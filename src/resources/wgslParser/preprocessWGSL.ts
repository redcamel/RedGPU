import PassClustersLightHelper from "../../light/clusterLight/PassClustersLightHelper";
import SystemCode from "../systemCode/SystemCode";
import ShaderVariantGenerator from "./ShaderVariantGenerator";

const shaderCodeKeys = Object.keys(SystemCode).join('|');
const includePattern = new RegExp(`#redgpu_include (${shaderCodeKeys})`, 'g');
const definePattern = /REDGPU_DEFINE_(?:TILE_COUNT_[XYZ]|TOTAL_TILES|WORKGROUP_SIZE_[XYZ]|MAX_LIGHTS_PER_CLUSTER)/g;
const defineValues = {
	REDGPU_DEFINE_TILE_COUNT_X: PassClustersLightHelper.TILE_COUNT_X.toString(),
	REDGPU_DEFINE_TILE_COUNT_Y: PassClustersLightHelper.TILE_COUNT_Y.toString(),
	REDGPU_DEFINE_TILE_COUNT_Z: PassClustersLightHelper.TILE_COUNT_Z.toString(),
	REDGPU_DEFINE_TOTAL_TILES: PassClustersLightHelper.getTotalTileSize().toString(),
	REDGPU_DEFINE_WORKGROUP_SIZE_X: PassClustersLightHelper.WORKGROUP_SIZE_X.toString(),
	REDGPU_DEFINE_WORKGROUP_SIZE_Y: PassClustersLightHelper.WORKGROUP_SIZE_Y.toString(),
	REDGPU_DEFINE_WORKGROUP_SIZE_Z: PassClustersLightHelper.WORKGROUP_SIZE_Z.toString(),
	REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTER: PassClustersLightHelper.MAX_LIGHTS_PER_CLUSTER.toString(),
} as const;
const conditionalBlockPattern = /#redgpu_if\s+(\w+)\b([\s\S]*?)(?:#redgpu_else([\s\S]*?))?#redgpu_endIf/g;

export interface ConditionalBlock {
	uniformName: string;
	ifBlock: string;
	elseBlock?: string;
	fullMatch: string;
	blockIndex: number;
}

interface PreprocessedWGSLResult {
	cacheKey: string;
	defaultSource: string;
	shaderSourceVariant: ShaderVariantGenerator;
	conditionalBlocks: string[];
}

const preprocessCache = new Map<string, PreprocessedWGSLResult>();
/**
 * ÏΩîÎìú Ìï¥Ïãú ÏÉùÏÑ± (Í∞ÑÎã®Ìïú Ìï¥Ïãú Ìï®Ïàò)
 */
const generateCodeHash = (code: string): string => {
	let hash = 0;
	for (let i = 0; i < code.length; i++) {
		const char = code.charCodeAt(i);
		hash = ((hash << 5) - hash) + char;
		hash = hash & hash;
	}
	return hash.toString(36);
};
/**
 * Ïù∏ÌÅ¥Î£®Îìú Ï≤òÎ¶¨ - SystemCodeÏóêÏÑú Ìï¥Îãπ ÌÇ§Ïùò ÏΩîÎìúÎ•º Í∞ÄÏ†∏ÏôÄÏÑú ÏπòÌôò
 */
const processIncludes = (code: string): string => {
	return code.replace(includePattern, (match, key) => SystemCode[key] || match);
};
/**
 * Ï†ïÏùò Ï≤òÎ¶¨ - ÎØ∏Î¶¨ Ï†ïÏùòÎêú Í∞íÎì§Î°ú ÏπòÌôò
 */
const processDefines = (code: string): string => {
	return code.replace(definePattern, (match) =>
		defineValues[match as keyof typeof defineValues] || match
	);
};
/**
 * Ï°∞Í±¥Î∂Ä Î∏îÎ°ù Ï∞æÍ∏∞ Î∞è ÌååÏã± - #redgpu_else ÏßÄÏõê
 */
const findConditionalBlocks = (code: string): ConditionalBlock[] => {
	const conditionalBlocks: ConditionalBlock[] = [];
	let match;
	let blockIndex = 0;
	conditionalBlockPattern.lastIndex = 0;
	while ((match = conditionalBlockPattern.exec(code)) !== null) {
		const [fullMatch, uniformName, ifBlock, elseBlock] = match;
		conditionalBlocks.push({
			uniformName,
			ifBlock: ifBlock.trim(),
			elseBlock: elseBlock?.trim(),
			fullMatch,
			blockIndex: blockIndex++
		});
	}
	return conditionalBlocks;
};
/**
 * Ï§ëÎ≥µ ÌÇ§ ÌÜµÍ≥Ñ Î∞è Î°úÍπÖ
 */
const logDuplicateKeys = (conditionalBlocks: ConditionalBlock[]): void => {
	if (!conditionalBlocks.length) return;
	const keyCount = new Map<string, number>();
	conditionalBlocks.forEach(block => {
		keyCount.set(block.uniformName, (keyCount.get(block.uniformName) || 0) + 1);
	});
	const duplicateKeys = Array.from(keyCount.entries()).filter(([_, count]) => count > 1);
	if (duplicateKeys.length > 0) {
		console.log('Ï§ëÎ≥µ ÌÇ§ Î∞úÍ≤¨:', duplicateKeys.map(([key, count]) => `${key}(${count}Í∞ú)`));
	}
	console.log('Î∞úÍ≤¨Îêú Ï°∞Í±¥Î∂Ä Î∏îÎ°ùÎì§:', conditionalBlocks.map(b =>
		`${b.uniformName}[${b.blockIndex}]${b.elseBlock ? ' (else Ìè¨Ìï®)' : ''}`
	));
};
/**
 * Í∏∞Î≥∏ ÏÖ∞Ïù¥Îçî ÏÜåÏä§ ÏÉùÏÑ± (Î™®Îì† Ï°∞Í±¥Î∂Ä Î∏îÎ°ùÏùò if Î∂ÄÎ∂Ñ Ìè¨Ìï®)
 */
const generateDefaultSource = (defines: string, conditionalBlocks: ConditionalBlock[]): string => {
	let defaultSource = defines;
	for (let i = conditionalBlocks.length - 1; i >= 0; i--) {
		const block = conditionalBlocks[i];
		// Í∏∞Î≥∏Ï†ÅÏúºÎ°ú if Î∏îÎ°ùÏùÑ Ìè¨Ìï® (Ï°∞Í±¥Ïù¥ trueÏùº ÎïåÏùò ÏÉÅÌÉú)
		defaultSource = defaultSource.replace(block.fullMatch, block.ifBlock);
		// console.log('‚úÖ Í∏∞Î≥∏ ÏÖ∞Ïù¥ÎçîÏóê Ìè¨Ìï®:', `${block.uniformName}[${block.blockIndex}] - if Î∏îÎ°ù`);
	}
	return defaultSource;
};
/**
 * WGSL Ï†ÑÏ≤òÎ¶¨ Î©îÏù∏ Ìï®Ïàò
 */
const preprocessWGSL = (code: string): PreprocessedWGSLResult => {
	// Ï∫êÏãú ÌôïÏù∏
	const cacheKey = generateCodeHash(code);
	const cachedResult = preprocessCache.get(cacheKey);
	if (cachedResult) {
		console.log('üöÄ Ï∫êÏãúÏóêÏÑú WGSL Î°úÎìú:', cacheKey);
		return cachedResult;
	}
	console.log('üîÑ WGSL ÌååÏã± ÏãúÏûë:', cacheKey);
	// 1. Ïù∏ÌÅ¥Î£®Îìú Ï≤òÎ¶¨
	const withIncludes = processIncludes(code);
	// 2. Ï†ïÏùò Ï≤òÎ¶¨
	const defines = processDefines(withIncludes);
	// 3. Ï°∞Í±¥Î∂Ä Î∏îÎ°ù Ï∞æÍ∏∞
	const conditionalBlocks = findConditionalBlocks(defines);
	// 4. Ï§ëÎ≥µ ÌÇ§ ÌÜµÍ≥Ñ Î∞è Î°úÍπÖ
	logDuplicateKeys(conditionalBlocks);
	// 5. Í∏∞Î≥∏ ÏÖ∞Ïù¥Îçî ÏÉùÏÑ±
	const defaultSource = generateDefaultSource(defines, conditionalBlocks);
	// 6. Í≥†Ïú† ÌÇ§ Ï∂îÏ∂ú
	const uniqueKeys = [...new Set(conditionalBlocks.map(b => b.uniformName))];
	// 7. Î†àÏù¥ÏßÄ Î∞îÎ¶¨ÏïàÌä∏ ÏÉùÏÑ±Í∏∞ ÏÉùÏÑ±
	const shaderSourceVariant = new ShaderVariantGenerator(defines, conditionalBlocks);
	// 8. Í≤∞Í≥º ÏÉùÏÑ±
	const result: PreprocessedWGSLResult = {
		cacheKey,
		defaultSource,
		shaderSourceVariant,
		conditionalBlocks: uniqueKeys,
	};
	// 9. Ï∫êÏã± Î∞è Î°úÍπÖ
	const totalCombinations = Math.pow(2, uniqueKeys.length);
	preprocessCache.set(cacheKey, result);
	if (totalCombinations > 1) {
		console.log(`Î†àÏù¥ÏßÄ Î∞îÎ¶¨ÏïàÌä∏ ÏÉùÏÑ±Í∏∞ Ï¥àÍ∏∞Ìôî (Ï∫êÏãú Ï†ÄÏû•):`, totalCombinations, cacheKey);
		console.log('Í≥†Ïú† ÌÇ§Îì§:', uniqueKeys);
		console.log('Ïù¥Î°†Ï†Å Í∞ÄÎä•Ìïú Î∞îÎ¶¨ÏïàÌä∏ Ïàò:', totalCombinations);
	}
	// keepLog('shaderSourceVariant',shaderSourceVariant)
	return result;
};
export default preprocessWGSL;
