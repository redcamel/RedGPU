var i=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array,g=Math.random;var x=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var i=0,m=arguments.length;m--;)i+=arguments[m]*arguments[m];return Math.sqrt(i)});var _=Object.freeze({__proto__:null,get ARRAY_TYPE(){return m},EPSILON:i,RANDOM:g,equals:function(m,g){return Math.abs(m-g)<=i*Math.max(1,Math.abs(m),Math.abs(g))},setMatrixArrayType:function(i){m=i},toRadian:function(i){return i*x}});function multiply$8(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=g[0],w=g[1],P=g[2],H=g[3];return i[0]=x*T+b*w,i[1]=_*T+y*w,i[2]=x*P+b*H,i[3]=_*P+y*H,i}function subtract$6(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i}var b=multiply$8,y=subtract$6,T=Object.freeze({__proto__:null,LDU:function(i,m,g,x){return i[2]=x[2]/x[0],g[0]=x[0],g[1]=x[1],g[3]=x[3]-i[2]*g[1],[i,m,g]},add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i},adjoint:function(i,m){var g=m[0];return i[0]=m[3],i[1]=-m[1],i[2]=-m[2],i[3]=g,i},clone:function(i){var g=new m(4);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i},create:function(){var i=new m(4);return m!=Float32Array&&(i[1]=0,i[2]=0),i[0]=1,i[3]=1,i},determinant:function(i){return i[0]*i[3]-i[2]*i[1]},equals:function(m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=g[0],w=g[1],P=g[2],H=g[3];return Math.abs(x-T)<=i*Math.max(1,Math.abs(x),Math.abs(T))&&Math.abs(_-w)<=i*Math.max(1,Math.abs(_),Math.abs(w))&&Math.abs(b-P)<=i*Math.max(1,Math.abs(b),Math.abs(P))&&Math.abs(y-H)<=i*Math.max(1,Math.abs(y),Math.abs(H))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3])},fromRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=g,i[2]=-g,i[3]=x,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=m[1],i},fromValues:function(i,g,x,_){var b=new m(4);return b[0]=i,b[1]=g,b[2]=x,b[3]=_,b},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i},invert:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=g*b-_*x;return y?(y=1/y,i[0]=b*y,i[1]=-x*y,i[2]=-_*y,i[3]=g*y,i):null},mul:b,multiply:multiply$8,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i},multiplyScalarAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i[3]=m[3]+g[3]*x,i},rotate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=Math.sin(g),w=Math.cos(g);return i[0]=x*w+b*T,i[1]=_*w+y*T,i[2]=x*-T+b*w,i[3]=_*-T+y*w,i},scale:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=g[0],w=g[1];return i[0]=x*T,i[1]=_*T,i[2]=b*w,i[3]=y*w,i},set:function(i,m,g,x,_){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i},str:function(i){return"mat2("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"},sub:y,subtract:subtract$6,transpose:function(i,m){if(i===m){var g=m[1];i[1]=m[2],i[2]=g}else i[0]=m[0],i[1]=m[2],i[2]=m[1],i[3]=m[3];return i}});function multiply$7(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=g[0],H=g[1],z=g[2],$=g[3],q=g[4],W=g[5];return i[0]=x*P+b*H,i[1]=_*P+y*H,i[2]=x*z+b*$,i[3]=_*z+y*$,i[4]=x*q+b*W+T,i[5]=_*q+y*W+w,i}function subtract$5(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i}var w=multiply$7,P=subtract$5,H=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i},clone:function(i){var g=new m(6);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i},create:function(){var i=new m(6);return m!=Float32Array&&(i[1]=0,i[2]=0,i[4]=0,i[5]=0),i[0]=1,i[3]=1,i},determinant:function(i){return i[0]*i[3]-i[1]*i[2]},equals:function(m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=g[0],H=g[1],z=g[2],$=g[3],q=g[4],W=g[5];return Math.abs(x-P)<=i*Math.max(1,Math.abs(x),Math.abs(P))&&Math.abs(_-H)<=i*Math.max(1,Math.abs(_),Math.abs(H))&&Math.abs(b-z)<=i*Math.max(1,Math.abs(b),Math.abs(z))&&Math.abs(y-$)<=i*Math.max(1,Math.abs(y),Math.abs($))&&Math.abs(T-q)<=i*Math.max(1,Math.abs(T),Math.abs(q))&&Math.abs(w-W)<=i*Math.max(1,Math.abs(w),Math.abs(W))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],1)},fromRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=g,i[2]=-g,i[3]=x,i[4]=0,i[5]=0,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=m[1],i[4]=0,i[5]=0,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i[4]=m[0],i[5]=m[1],i},fromValues:function(i,g,x,_,b,y){var T=new m(6);return T[0]=i,T[1]=g,T[2]=x,T[3]=_,T[4]=b,T[5]=y,T},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i[4]=0,i[5]=0,i},invert:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=g*b-x*_;return w?(w=1/w,i[0]=b*w,i[1]=-x*w,i[2]=-_*w,i[3]=g*w,i[4]=(_*T-b*y)*w,i[5]=(x*y-g*T)*w,i):null},mul:w,multiply:multiply$7,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i},multiplyScalarAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i[3]=m[3]+g[3]*x,i[4]=m[4]+g[4]*x,i[5]=m[5]+g[5]*x,i},rotate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=Math.sin(g),H=Math.cos(g);return i[0]=x*H+b*P,i[1]=_*H+y*P,i[2]=x*-P+b*H,i[3]=_*-P+y*H,i[4]=T,i[5]=w,i},scale:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=g[0],H=g[1];return i[0]=x*P,i[1]=_*P,i[2]=b*H,i[3]=y*H,i[4]=T,i[5]=w,i},set:function(i,m,g,x,_,b,y){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i[4]=b,i[5]=y,i},str:function(i){return"mat2d("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+")"},sub:P,subtract:subtract$5,translate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=g[0],H=g[1];return i[0]=x,i[1]=_,i[2]=b,i[3]=y,i[4]=x*P+b*H+T,i[5]=_*P+y*H+w,i}});function create$6(){var i=new m(9);return m!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[5]=0,i[6]=0,i[7]=0),i[0]=1,i[4]=1,i[8]=1,i}function multiply$6(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=m[8],$=g[0],q=g[1],W=g[2],ye=g[3],Ge=g[4],Ke=g[5],Xe=g[6],Ye=g[7],je=g[8];return i[0]=$*x+q*y+W*P,i[1]=$*_+q*T+W*H,i[2]=$*b+q*w+W*z,i[3]=ye*x+Ge*y+Ke*P,i[4]=ye*_+Ge*T+Ke*H,i[5]=ye*b+Ge*w+Ke*z,i[6]=Xe*x+Ye*y+je*P,i[7]=Xe*_+Ye*T+je*H,i[8]=Xe*b+Ye*w+je*z,i}function subtract$4(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i}var z=multiply$6,$=subtract$4,q=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i},adjoint:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],H=m[8];return i[0]=y*H-T*P,i[1]=_*P-x*H,i[2]=x*T-_*y,i[3]=T*w-b*H,i[4]=g*H-_*w,i[5]=_*b-g*T,i[6]=b*P-y*w,i[7]=x*w-g*P,i[8]=g*y-x*b,i},clone:function(i){var g=new m(9);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g[8]=i[8],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},create:create$6,determinant:function(i){var m=i[0],g=i[1],x=i[2],_=i[3],b=i[4],y=i[5],T=i[6],w=i[7],P=i[8];return m*(P*b-y*w)+g*(-P*_+y*T)+x*(w*_-b*T)},equals:function(m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=m[8],$=g[0],q=g[1],W=g[2],ye=g[3],Ge=g[4],Ke=g[5],Xe=g[6],Ye=g[7],je=g[8];return Math.abs(x-$)<=i*Math.max(1,Math.abs(x),Math.abs($))&&Math.abs(_-q)<=i*Math.max(1,Math.abs(_),Math.abs(q))&&Math.abs(b-W)<=i*Math.max(1,Math.abs(b),Math.abs(W))&&Math.abs(y-ye)<=i*Math.max(1,Math.abs(y),Math.abs(ye))&&Math.abs(T-Ge)<=i*Math.max(1,Math.abs(T),Math.abs(Ge))&&Math.abs(w-Ke)<=i*Math.max(1,Math.abs(w),Math.abs(Ke))&&Math.abs(P-Xe)<=i*Math.max(1,Math.abs(P),Math.abs(Xe))&&Math.abs(H-Ye)<=i*Math.max(1,Math.abs(H),Math.abs(Ye))&&Math.abs(z-je)<=i*Math.max(1,Math.abs(z),Math.abs(je))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8])},fromMat2d:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=0,i[3]=m[2],i[4]=m[3],i[5]=0,i[6]=m[4],i[7]=m[5],i[8]=1,i},fromMat4:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[4],i[4]=m[5],i[5]=m[6],i[6]=m[8],i[7]=m[9],i[8]=m[10],i},fromQuat:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=g+g,T=x+x,w=_+_,P=g*y,H=x*y,z=x*T,$=_*y,q=_*T,W=_*w,ye=b*y,Ge=b*T,Ke=b*w;return i[0]=1-z-W,i[3]=H-Ke,i[6]=$+Ge,i[1]=H+Ke,i[4]=1-P-W,i[7]=q-ye,i[2]=$-Ge,i[5]=q+ye,i[8]=1-P-z,i},fromRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=g,i[2]=0,i[3]=-g,i[4]=x,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=m[1],i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=m[0],i[7]=m[1],i[8]=1,i},fromValues:function(i,g,x,_,b,y,T,w,P){var H=new m(9);return H[0]=i,H[1]=g,H[2]=x,H[3]=_,H[4]=b,H[5]=y,H[6]=T,H[7]=w,H[8]=P,H},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},invert:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],H=m[8],z=H*y-T*P,$=-H*b+T*w,q=P*b-y*w,W=g*z+x*$+_*q;return W?(W=1/W,i[0]=z*W,i[1]=(-H*x+_*P)*W,i[2]=(T*x-_*y)*W,i[3]=$*W,i[4]=(H*g-_*w)*W,i[5]=(-T*g+_*b)*W,i[6]=q*W,i[7]=(-P*g+x*w)*W,i[8]=(y*g-x*b)*W,i):null},mul:z,multiply:multiply$6,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i},multiplyScalarAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i[3]=m[3]+g[3]*x,i[4]=m[4]+g[4]*x,i[5]=m[5]+g[5]*x,i[6]=m[6]+g[6]*x,i[7]=m[7]+g[7]*x,i[8]=m[8]+g[8]*x,i},normalFromMat4:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],H=m[8],z=m[9],$=m[10],q=m[11],W=m[12],ye=m[13],Ge=m[14],Ke=m[15],Xe=g*T-x*y,Ye=g*w-_*y,je=g*P-b*y,Ze=x*w-_*T,Je=x*P-b*T,Qe=_*P-b*w,et=H*ye-z*W,at=H*Ge-$*W,ht=H*Ke-q*W,ft=z*Ge-$*ye,gt=z*Ke-q*ye,xt=$*Ke-q*Ge,vt=Xe*xt-Ye*gt+je*ft+Ze*ht-Je*at+Qe*et;return vt?(vt=1/vt,i[0]=(T*xt-w*gt+P*ft)*vt,i[1]=(w*ht-y*xt-P*at)*vt,i[2]=(y*gt-T*ht+P*et)*vt,i[3]=(_*gt-x*xt-b*ft)*vt,i[4]=(g*xt-_*ht+b*at)*vt,i[5]=(x*ht-g*gt-b*et)*vt,i[6]=(ye*Qe-Ge*Je+Ke*Ze)*vt,i[7]=(Ge*je-W*Qe-Ke*Ye)*vt,i[8]=(W*Je-ye*je+Ke*Xe)*vt,i):null},projection:function(i,m,g){return i[0]=2/m,i[1]=0,i[2]=0,i[3]=0,i[4]=-2/g,i[5]=0,i[6]=-1,i[7]=1,i[8]=1,i},rotate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=m[8],$=Math.sin(g),q=Math.cos(g);return i[0]=q*x+$*y,i[1]=q*_+$*T,i[2]=q*b+$*w,i[3]=q*y-$*x,i[4]=q*T-$*_,i[5]=q*w-$*b,i[6]=P,i[7]=H,i[8]=z,i},scale:function(i,m,g){var x=g[0],_=g[1];return i[0]=x*m[0],i[1]=x*m[1],i[2]=x*m[2],i[3]=_*m[3],i[4]=_*m[4],i[5]=_*m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},set:function(i,m,g,x,_,b,y,T,w,P){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i[4]=b,i[5]=y,i[6]=T,i[7]=w,i[8]=P,i},str:function(i){return"mat3("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+")"},sub:$,subtract:subtract$4,translate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=m[8],$=g[0],q=g[1];return i[0]=x,i[1]=_,i[2]=b,i[3]=y,i[4]=T,i[5]=w,i[6]=$*x+q*y+P,i[7]=$*_+q*T+H,i[8]=$*b+q*w+z,i},transpose:function(i,m){if(i===m){var g=m[1],x=m[2],_=m[5];i[1]=m[3],i[2]=m[6],i[3]=g,i[5]=m[7],i[6]=x,i[7]=_}else i[0]=m[0],i[1]=m[3],i[2]=m[6],i[3]=m[1],i[4]=m[4],i[5]=m[7],i[6]=m[2],i[7]=m[5],i[8]=m[8];return i}});function create$5(){var i=new m(16);return m!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0),i[0]=1,i[5]=1,i[10]=1,i[15]=1,i}function clone$5(i){var g=new m(16);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g[8]=i[8],g[9]=i[9],g[10]=i[10],g[11]=i[11],g[12]=i[12],g[13]=i[13],g[14]=i[14],g[15]=i[15],g}function copy$5(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function fromValues$5(i,g,x,_,b,y,T,w,P,H,z,$,q,W,ye,Ge){var Ke=new m(16);return Ke[0]=i,Ke[1]=g,Ke[2]=x,Ke[3]=_,Ke[4]=b,Ke[5]=y,Ke[6]=T,Ke[7]=w,Ke[8]=P,Ke[9]=H,Ke[10]=z,Ke[11]=$,Ke[12]=q,Ke[13]=W,Ke[14]=ye,Ke[15]=Ge,Ke}function identity$2(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i}function invert$2(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],H=m[8],z=m[9],$=m[10],q=m[11],W=m[12],ye=m[13],Ge=m[14],Ke=m[15],Xe=g*T-x*y,Ye=g*w-_*y,je=g*P-b*y,Ze=x*w-_*T,Je=x*P-b*T,Qe=_*P-b*w,et=H*ye-z*W,at=H*Ge-$*W,ht=H*Ke-q*W,ft=z*Ge-$*ye,gt=z*Ke-q*ye,xt=$*Ke-q*Ge,vt=Xe*xt-Ye*gt+je*ft+Ze*ht-Je*at+Qe*et;return vt?(vt=1/vt,i[0]=(T*xt-w*gt+P*ft)*vt,i[1]=(_*gt-x*xt-b*ft)*vt,i[2]=(ye*Qe-Ge*Je+Ke*Ze)*vt,i[3]=($*Je-z*Qe-q*Ze)*vt,i[4]=(w*ht-y*xt-P*at)*vt,i[5]=(g*xt-_*ht+b*at)*vt,i[6]=(Ge*je-W*Qe-Ke*Ye)*vt,i[7]=(H*Qe-$*je+q*Ye)*vt,i[8]=(y*gt-T*ht+P*et)*vt,i[9]=(x*ht-g*gt-b*et)*vt,i[10]=(W*Je-ye*je+Ke*Xe)*vt,i[11]=(z*je-H*Je-q*Xe)*vt,i[12]=(T*at-y*ft-w*et)*vt,i[13]=(g*ft-x*at+_*et)*vt,i[14]=(ye*Ye-W*Ze-Ge*Xe)*vt,i[15]=(H*Ze-z*Ye+$*Xe)*vt,i):null}function multiply$5(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=m[8],$=m[9],q=m[10],W=m[11],ye=m[12],Ge=m[13],Ke=m[14],Xe=m[15],Ye=g[0],je=g[1],Ze=g[2],Je=g[3];return i[0]=Ye*x+je*T+Ze*z+Je*ye,i[1]=Ye*_+je*w+Ze*$+Je*Ge,i[2]=Ye*b+je*P+Ze*q+Je*Ke,i[3]=Ye*y+je*H+Ze*W+Je*Xe,Ye=g[4],je=g[5],Ze=g[6],Je=g[7],i[4]=Ye*x+je*T+Ze*z+Je*ye,i[5]=Ye*_+je*w+Ze*$+Je*Ge,i[6]=Ye*b+je*P+Ze*q+Je*Ke,i[7]=Ye*y+je*H+Ze*W+Je*Xe,Ye=g[8],je=g[9],Ze=g[10],Je=g[11],i[8]=Ye*x+je*T+Ze*z+Je*ye,i[9]=Ye*_+je*w+Ze*$+Je*Ge,i[10]=Ye*b+je*P+Ze*q+Je*Ke,i[11]=Ye*y+je*H+Ze*W+Je*Xe,Ye=g[12],je=g[13],Ze=g[14],Je=g[15],i[12]=Ye*x+je*T+Ze*z+Je*ye,i[13]=Ye*_+je*w+Ze*$+Je*Ge,i[14]=Ye*b+je*P+Ze*q+Je*Ke,i[15]=Ye*y+je*H+Ze*W+Je*Xe,i}function translate$1(i,m,g){var x,_,b,y,T,w,P,H,z,$,q,W,ye=g[0],Ge=g[1],Ke=g[2];return m===i?(i[12]=m[0]*ye+m[4]*Ge+m[8]*Ke+m[12],i[13]=m[1]*ye+m[5]*Ge+m[9]*Ke+m[13],i[14]=m[2]*ye+m[6]*Ge+m[10]*Ke+m[14],i[15]=m[3]*ye+m[7]*Ge+m[11]*Ke+m[15]):(x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=m[8],$=m[9],q=m[10],W=m[11],i[0]=x,i[1]=_,i[2]=b,i[3]=y,i[4]=T,i[5]=w,i[6]=P,i[7]=H,i[8]=z,i[9]=$,i[10]=q,i[11]=W,i[12]=x*ye+T*Ge+z*Ke+m[12],i[13]=_*ye+w*Ge+$*Ke+m[13],i[14]=b*ye+P*Ge+q*Ke+m[14],i[15]=y*ye+H*Ge+W*Ke+m[15]),i}function scale$5(i,m,g){var x=g[0],_=g[1],b=g[2];return i[0]=m[0]*x,i[1]=m[1]*x,i[2]=m[2]*x,i[3]=m[3]*x,i[4]=m[4]*_,i[5]=m[5]*_,i[6]=m[6]*_,i[7]=m[7]*_,i[8]=m[8]*b,i[9]=m[9]*b,i[10]=m[10]*b,i[11]=m[11]*b,i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function rotateX$3(i,m,g){var x=Math.sin(g),_=Math.cos(g),b=m[4],y=m[5],T=m[6],w=m[7],P=m[8],H=m[9],z=m[10],$=m[11];return m!==i&&(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[4]=b*_+P*x,i[5]=y*_+H*x,i[6]=T*_+z*x,i[7]=w*_+$*x,i[8]=P*_-b*x,i[9]=H*_-y*x,i[10]=z*_-T*x,i[11]=$*_-w*x,i}function rotateY$3(i,m,g){var x=Math.sin(g),_=Math.cos(g),b=m[0],y=m[1],T=m[2],w=m[3],P=m[8],H=m[9],z=m[10],$=m[11];return m!==i&&(i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=b*_-P*x,i[1]=y*_-H*x,i[2]=T*_-z*x,i[3]=w*_-$*x,i[8]=b*x+P*_,i[9]=y*x+H*_,i[10]=T*x+z*_,i[11]=w*x+$*_,i}function rotateZ$3(i,m,g){var x=Math.sin(g),_=Math.cos(g),b=m[0],y=m[1],T=m[2],w=m[3],P=m[4],H=m[5],z=m[6],$=m[7];return m!==i&&(i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=b*_+P*x,i[1]=y*_+H*x,i[2]=T*_+z*x,i[3]=w*_+$*x,i[4]=P*_-b*x,i[5]=H*_-y*x,i[6]=z*_-T*x,i[7]=$*_-w*x,i}function fromRotationTranslation$1(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=x+x,w=_+_,P=b+b,H=x*T,z=x*w,$=x*P,q=_*w,W=_*P,ye=b*P,Ge=y*T,Ke=y*w,Xe=y*P;return i[0]=1-(q+ye),i[1]=z+Xe,i[2]=$-Ke,i[3]=0,i[4]=z-Xe,i[5]=1-(H+ye),i[6]=W+Ge,i[7]=0,i[8]=$+Ke,i[9]=W-Ge,i[10]=1-(H+q),i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i}function getTranslation$1(i,m){return i[0]=m[12],i[1]=m[13],i[2]=m[14],i}function getScaling(i,m){var g=m[0],x=m[1],_=m[2],b=m[4],y=m[5],T=m[6],w=m[8],P=m[9],H=m[10];return i[0]=Math.hypot(g,x,_),i[1]=Math.hypot(b,y,T),i[2]=Math.hypot(w,P,H),i}function getRotation(i,g){var x=new m(3);getScaling(x,g);var _=1/x[0],b=1/x[1],y=1/x[2],T=g[0]*_,w=g[1]*b,P=g[2]*y,H=g[4]*_,z=g[5]*b,$=g[6]*y,q=g[8]*_,W=g[9]*b,ye=g[10]*y,Ge=T+z+ye,Ke=0;return Ge>0?(Ke=2*Math.sqrt(Ge+1),i[3]=.25*Ke,i[0]=($-W)/Ke,i[1]=(q-P)/Ke,i[2]=(w-H)/Ke):T>z&&T>ye?(Ke=2*Math.sqrt(1+T-z-ye),i[3]=($-W)/Ke,i[0]=.25*Ke,i[1]=(w+H)/Ke,i[2]=(q+P)/Ke):z>ye?(Ke=2*Math.sqrt(1+z-T-ye),i[3]=(q-P)/Ke,i[0]=(w+H)/Ke,i[1]=.25*Ke,i[2]=($+W)/Ke):(Ke=2*Math.sqrt(1+ye-T-z),i[3]=(w-H)/Ke,i[0]=(q+P)/Ke,i[1]=($+W)/Ke,i[2]=.25*Ke),i}function perspectiveNO(i,m,g,x,_){var b,y=1/Math.tan(m/2);return i[0]=y/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=y,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=_&&_!==1/0?(b=1/(x-_),i[10]=(_+x)*b,i[14]=2*_*x*b):(i[10]=-1,i[14]=-2*x),i}var W=perspectiveNO;function orthoNO(i,m,g,x,_,b,y){var T=1/(m-g),w=1/(x-_),P=1/(b-y);return i[0]=-2*T,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*w,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=2*P,i[11]=0,i[12]=(m+g)*T,i[13]=(_+x)*w,i[14]=(y+b)*P,i[15]=1,i}var ye=orthoNO;function orthoZO(i,m,g,x,_,b,y){var T=1/(m-g),w=1/(x-_),P=1/(b-y);return i[0]=-2*T,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*w,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=P,i[11]=0,i[12]=(m+g)*T,i[13]=(_+x)*w,i[14]=b*P,i[15]=1,i}function lookAt(m,g,x,_){var b,y,T,w,P,H,z,$,q,W,ye=g[0],Ge=g[1],Ke=g[2],Xe=_[0],Ye=_[1],je=_[2],Ze=x[0],Je=x[1],Qe=x[2];return Math.abs(ye-Ze)<i&&Math.abs(Ge-Je)<i&&Math.abs(Ke-Qe)<i?identity$2(m):(z=ye-Ze,$=Ge-Je,q=Ke-Qe,b=Ye*(q*=W=1/Math.hypot(z,$,q))-je*($*=W),y=je*(z*=W)-Xe*q,T=Xe*$-Ye*z,(W=Math.hypot(b,y,T))?(b*=W=1/W,y*=W,T*=W):(b=0,y=0,T=0),w=$*T-q*y,P=q*b-z*T,H=z*y-$*b,(W=Math.hypot(w,P,H))?(w*=W=1/W,P*=W,H*=W):(w=0,P=0,H=0),m[0]=b,m[1]=w,m[2]=z,m[3]=0,m[4]=y,m[5]=P,m[6]=$,m[7]=0,m[8]=T,m[9]=H,m[10]=q,m[11]=0,m[12]=-(b*ye+y*Ge+T*Ke),m[13]=-(w*ye+P*Ge+H*Ke),m[14]=-(z*ye+$*Ge+q*Ke),m[15]=1,m)}function targetTo(i,m,g,x){var _=m[0],b=m[1],y=m[2],T=x[0],w=x[1],P=x[2],H=_-g[0],z=b-g[1],$=y-g[2],q=H*H+z*z+$*$;q>0&&(H*=q=1/Math.sqrt(q),z*=q,$*=q);var W=w*$-P*z,ye=P*H-T*$,Ge=T*z-w*H;return(q=W*W+ye*ye+Ge*Ge)>0&&(W*=q=1/Math.sqrt(q),ye*=q,Ge*=q),i[0]=W,i[1]=ye,i[2]=Ge,i[3]=0,i[4]=z*Ge-$*ye,i[5]=$*W-H*Ge,i[6]=H*ye-z*W,i[7]=0,i[8]=H,i[9]=z,i[10]=$,i[11]=0,i[12]=_,i[13]=b,i[14]=y,i[15]=1,i}function subtract$3(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i[9]=m[9]-g[9],i[10]=m[10]-g[10],i[11]=m[11]-g[11],i[12]=m[12]-g[12],i[13]=m[13]-g[13],i[14]=m[14]-g[14],i[15]=m[15]-g[15],i}var Ge=multiply$5,Ke=subtract$3,Xe=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i[9]=m[9]+g[9],i[10]=m[10]+g[10],i[11]=m[11]+g[11],i[12]=m[12]+g[12],i[13]=m[13]+g[13],i[14]=m[14]+g[14],i[15]=m[15]+g[15],i},adjoint:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],H=m[8],z=m[9],$=m[10],q=m[11],W=m[12],ye=m[13],Ge=m[14],Ke=m[15];return i[0]=T*($*Ke-q*Ge)-z*(w*Ke-P*Ge)+ye*(w*q-P*$),i[1]=-(x*($*Ke-q*Ge)-z*(_*Ke-b*Ge)+ye*(_*q-b*$)),i[2]=x*(w*Ke-P*Ge)-T*(_*Ke-b*Ge)+ye*(_*P-b*w),i[3]=-(x*(w*q-P*$)-T*(_*q-b*$)+z*(_*P-b*w)),i[4]=-(y*($*Ke-q*Ge)-H*(w*Ke-P*Ge)+W*(w*q-P*$)),i[5]=g*($*Ke-q*Ge)-H*(_*Ke-b*Ge)+W*(_*q-b*$),i[6]=-(g*(w*Ke-P*Ge)-y*(_*Ke-b*Ge)+W*(_*P-b*w)),i[7]=g*(w*q-P*$)-y*(_*q-b*$)+H*(_*P-b*w),i[8]=y*(z*Ke-q*ye)-H*(T*Ke-P*ye)+W*(T*q-P*z),i[9]=-(g*(z*Ke-q*ye)-H*(x*Ke-b*ye)+W*(x*q-b*z)),i[10]=g*(T*Ke-P*ye)-y*(x*Ke-b*ye)+W*(x*P-b*T),i[11]=-(g*(T*q-P*z)-y*(x*q-b*z)+H*(x*P-b*T)),i[12]=-(y*(z*Ge-$*ye)-H*(T*Ge-w*ye)+W*(T*$-w*z)),i[13]=g*(z*Ge-$*ye)-H*(x*Ge-_*ye)+W*(x*$-_*z),i[14]=-(g*(T*Ge-w*ye)-y*(x*Ge-_*ye)+W*(x*w-_*T)),i[15]=g*(T*$-w*z)-y*(x*$-_*z)+H*(x*w-_*T),i},clone:clone$5,copy:copy$5,create:create$5,determinant:function(i){var m=i[0],g=i[1],x=i[2],_=i[3],b=i[4],y=i[5],T=i[6],w=i[7],P=i[8],H=i[9],z=i[10],$=i[11],q=i[12],W=i[13],ye=i[14],Ge=i[15];return(m*y-g*b)*(z*Ge-$*ye)-(m*T-x*b)*(H*Ge-$*W)+(m*w-_*b)*(H*ye-z*W)+(g*T-x*y)*(P*Ge-$*q)-(g*w-_*y)*(P*ye-z*q)+(x*w-_*T)*(P*W-H*q)},equals:function(m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=m[8],$=m[9],q=m[10],W=m[11],ye=m[12],Ge=m[13],Ke=m[14],Xe=m[15],Ye=g[0],je=g[1],Ze=g[2],Je=g[3],Qe=g[4],et=g[5],at=g[6],ht=g[7],ft=g[8],gt=g[9],xt=g[10],vt=g[11],bt=g[12],yt=g[13],Tt=g[14],St=g[15];return Math.abs(x-Ye)<=i*Math.max(1,Math.abs(x),Math.abs(Ye))&&Math.abs(_-je)<=i*Math.max(1,Math.abs(_),Math.abs(je))&&Math.abs(b-Ze)<=i*Math.max(1,Math.abs(b),Math.abs(Ze))&&Math.abs(y-Je)<=i*Math.max(1,Math.abs(y),Math.abs(Je))&&Math.abs(T-Qe)<=i*Math.max(1,Math.abs(T),Math.abs(Qe))&&Math.abs(w-et)<=i*Math.max(1,Math.abs(w),Math.abs(et))&&Math.abs(P-at)<=i*Math.max(1,Math.abs(P),Math.abs(at))&&Math.abs(H-ht)<=i*Math.max(1,Math.abs(H),Math.abs(ht))&&Math.abs(z-ft)<=i*Math.max(1,Math.abs(z),Math.abs(ft))&&Math.abs($-gt)<=i*Math.max(1,Math.abs($),Math.abs(gt))&&Math.abs(q-xt)<=i*Math.max(1,Math.abs(q),Math.abs(xt))&&Math.abs(W-vt)<=i*Math.max(1,Math.abs(W),Math.abs(vt))&&Math.abs(ye-bt)<=i*Math.max(1,Math.abs(ye),Math.abs(bt))&&Math.abs(Ge-yt)<=i*Math.max(1,Math.abs(Ge),Math.abs(yt))&&Math.abs(Ke-Tt)<=i*Math.max(1,Math.abs(Ke),Math.abs(Tt))&&Math.abs(Xe-St)<=i*Math.max(1,Math.abs(Xe),Math.abs(St))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]&&i[9]===m[9]&&i[10]===m[10]&&i[11]===m[11]&&i[12]===m[12]&&i[13]===m[13]&&i[14]===m[14]&&i[15]===m[15]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11],i[12],i[13],i[14],i[15])},fromQuat:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=g+g,T=x+x,w=_+_,P=g*y,H=x*y,z=x*T,$=_*y,q=_*T,W=_*w,ye=b*y,Ge=b*T,Ke=b*w;return i[0]=1-z-W,i[1]=H+Ke,i[2]=$-Ge,i[3]=0,i[4]=H-Ke,i[5]=1-P-W,i[6]=q+ye,i[7]=0,i[8]=$+Ge,i[9]=q-ye,i[10]=1-P-z,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromQuat2:function(i,g){var x=new m(3),_=-g[0],b=-g[1],y=-g[2],T=g[3],w=g[4],P=g[5],H=g[6],z=g[7],$=_*_+b*b+y*y+T*T;return $>0?(x[0]=2*(w*T+z*_+P*y-H*b)/$,x[1]=2*(P*T+z*b+H*_-w*y)/$,x[2]=2*(H*T+z*y+w*b-P*_)/$):(x[0]=2*(w*T+z*_+P*y-H*b),x[1]=2*(P*T+z*b+H*_-w*y),x[2]=2*(H*T+z*y+w*b-P*_)),fromRotationTranslation$1(i,g,x),i},fromRotation:function(m,g,x){var _,b,y,T=x[0],w=x[1],P=x[2],H=Math.hypot(T,w,P);return H<i?null:(T*=H=1/H,w*=H,P*=H,_=Math.sin(g),y=1-(b=Math.cos(g)),m[0]=T*T*y+b,m[1]=w*T*y+P*_,m[2]=P*T*y-w*_,m[3]=0,m[4]=T*w*y-P*_,m[5]=w*w*y+b,m[6]=P*w*y+T*_,m[7]=0,m[8]=T*P*y+w*_,m[9]=w*P*y-T*_,m[10]=P*P*y+b,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1,m)},fromRotationTranslation:fromRotationTranslation$1,fromRotationTranslationScale:function(i,m,g,x){var _=m[0],b=m[1],y=m[2],T=m[3],w=_+_,P=b+b,H=y+y,z=_*w,$=_*P,q=_*H,W=b*P,ye=b*H,Ge=y*H,Ke=T*w,Xe=T*P,Ye=T*H,je=x[0],Ze=x[1],Je=x[2];return i[0]=(1-(W+Ge))*je,i[1]=($+Ye)*je,i[2]=(q-Xe)*je,i[3]=0,i[4]=($-Ye)*Ze,i[5]=(1-(z+Ge))*Ze,i[6]=(ye+Ke)*Ze,i[7]=0,i[8]=(q+Xe)*Je,i[9]=(ye-Ke)*Je,i[10]=(1-(z+W))*Je,i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i},fromRotationTranslationScaleOrigin:function(i,m,g,x,_){var b=m[0],y=m[1],T=m[2],w=m[3],P=b+b,H=y+y,z=T+T,$=b*P,q=b*H,W=b*z,ye=y*H,Ge=y*z,Ke=T*z,Xe=w*P,Ye=w*H,je=w*z,Ze=x[0],Je=x[1],Qe=x[2],et=_[0],at=_[1],ht=_[2],ft=(1-(ye+Ke))*Ze,gt=(q+je)*Ze,xt=(W-Ye)*Ze,vt=(q-je)*Je,bt=(1-($+Ke))*Je,yt=(Ge+Xe)*Je,Tt=(W+Ye)*Qe,St=(Ge-Xe)*Qe,wt=(1-($+ye))*Qe;return i[0]=ft,i[1]=gt,i[2]=xt,i[3]=0,i[4]=vt,i[5]=bt,i[6]=yt,i[7]=0,i[8]=Tt,i[9]=St,i[10]=wt,i[11]=0,i[12]=g[0]+et-(ft*et+vt*at+Tt*ht),i[13]=g[1]+at-(gt*et+bt*at+St*ht),i[14]=g[2]+ht-(xt*et+yt*at+wt*ht),i[15]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=m[1],i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=m[2],i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=m[0],i[13]=m[1],i[14]=m[2],i[15]=1,i},fromValues:fromValues$5,fromXRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=x,i[6]=g,i[7]=0,i[8]=0,i[9]=-g,i[10]=x,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromYRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=0,i[2]=-g,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=g,i[9]=0,i[10]=x,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromZRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=g,i[2]=0,i[3]=0,i[4]=-g,i[5]=x,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},frustum:function(i,m,g,x,_,b,y){var T=1/(g-m),w=1/(_-x),P=1/(b-y);return i[0]=2*b*T,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*b*w,i[6]=0,i[7]=0,i[8]=(g+m)*T,i[9]=(_+x)*w,i[10]=(y+b)*P,i[11]=-1,i[12]=0,i[13]=0,i[14]=y*b*2*P,i[15]=0,i},getRotation:getRotation,getScaling:getScaling,getTranslation:getTranslation$1,identity:identity$2,invert:invert$2,lookAt:lookAt,mul:Ge,multiply:multiply$5,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i[9]=m[9]*g,i[10]=m[10]*g,i[11]=m[11]*g,i[12]=m[12]*g,i[13]=m[13]*g,i[14]=m[14]*g,i[15]=m[15]*g,i},multiplyScalarAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i[3]=m[3]+g[3]*x,i[4]=m[4]+g[4]*x,i[5]=m[5]+g[5]*x,i[6]=m[6]+g[6]*x,i[7]=m[7]+g[7]*x,i[8]=m[8]+g[8]*x,i[9]=m[9]+g[9]*x,i[10]=m[10]+g[10]*x,i[11]=m[11]+g[11]*x,i[12]=m[12]+g[12]*x,i[13]=m[13]+g[13]*x,i[14]=m[14]+g[14]*x,i[15]=m[15]+g[15]*x,i},ortho:ye,orthoNO:orthoNO,orthoZO:orthoZO,perspective:W,perspectiveFromFieldOfView:function(i,m,g,x){var _=Math.tan(m.upDegrees*Math.PI/180),b=Math.tan(m.downDegrees*Math.PI/180),y=Math.tan(m.leftDegrees*Math.PI/180),T=Math.tan(m.rightDegrees*Math.PI/180),w=2/(y+T),P=2/(_+b);return i[0]=w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=P,i[6]=0,i[7]=0,i[8]=-(y-T)*w*.5,i[9]=(_-b)*P*.5,i[10]=x/(g-x),i[11]=-1,i[12]=0,i[13]=0,i[14]=x*g/(g-x),i[15]=0,i},perspectiveNO:perspectiveNO,perspectiveZO:function(i,m,g,x,_){var b,y=1/Math.tan(m/2);return i[0]=y/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=y,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=_&&_!==1/0?(b=1/(x-_),i[10]=_*b,i[14]=_*x*b):(i[10]=-1,i[14]=-x),i},rotate:function(m,g,x,_){var b,y,T,w,P,H,z,$,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt=_[0],vt=_[1],bt=_[2],yt=Math.hypot(xt,vt,bt);return yt<i?null:(xt*=yt=1/yt,vt*=yt,bt*=yt,b=Math.sin(x),T=1-(y=Math.cos(x)),w=g[0],P=g[1],H=g[2],z=g[3],$=g[4],q=g[5],W=g[6],ye=g[7],Ge=g[8],Ke=g[9],Xe=g[10],Ye=g[11],je=xt*xt*T+y,Ze=vt*xt*T+bt*b,Je=bt*xt*T-vt*b,Qe=xt*vt*T-bt*b,et=vt*vt*T+y,at=bt*vt*T+xt*b,ht=xt*bt*T+vt*b,ft=vt*bt*T-xt*b,gt=bt*bt*T+y,m[0]=w*je+$*Ze+Ge*Je,m[1]=P*je+q*Ze+Ke*Je,m[2]=H*je+W*Ze+Xe*Je,m[3]=z*je+ye*Ze+Ye*Je,m[4]=w*Qe+$*et+Ge*at,m[5]=P*Qe+q*et+Ke*at,m[6]=H*Qe+W*et+Xe*at,m[7]=z*Qe+ye*et+Ye*at,m[8]=w*ht+$*ft+Ge*gt,m[9]=P*ht+q*ft+Ke*gt,m[10]=H*ht+W*ft+Xe*gt,m[11]=z*ht+ye*ft+Ye*gt,g!==m&&(m[12]=g[12],m[13]=g[13],m[14]=g[14],m[15]=g[15]),m)},rotateX:rotateX$3,rotateY:rotateY$3,rotateZ:rotateZ$3,scale:scale$5,set:function(i,m,g,x,_,b,y,T,w,P,H,z,$,q,W,ye,Ge){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i[4]=b,i[5]=y,i[6]=T,i[7]=w,i[8]=P,i[9]=H,i[10]=z,i[11]=$,i[12]=q,i[13]=W,i[14]=ye,i[15]=Ge,i},str:function(i){return"mat4("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+","+i[9]+","+i[10]+","+i[11]+","+i[12]+","+i[13]+","+i[14]+","+i[15]+")"},sub:Ke,subtract:subtract$3,targetTo:targetTo,translate:translate$1,transpose:function(i,m){if(i===m){var g=m[1],x=m[2],_=m[3],b=m[6],y=m[7],T=m[11];i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=g,i[6]=m[9],i[7]=m[13],i[8]=x,i[9]=b,i[11]=m[14],i[12]=_,i[13]=y,i[14]=T}else i[0]=m[0],i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=m[1],i[5]=m[5],i[6]=m[9],i[7]=m[13],i[8]=m[2],i[9]=m[6],i[10]=m[10],i[11]=m[14],i[12]=m[3],i[13]=m[7],i[14]=m[11],i[15]=m[15];return i}});function create$4(){var i=new m(3);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i}function length$4(i){var m=i[0],g=i[1],x=i[2];return Math.hypot(m,g,x)}function fromValues$4(i,g,x){var _=new m(3);return _[0]=i,_[1]=g,_[2]=x,_}function set$4(i,m,g,x){return i[0]=m,i[1]=g,i[2]=x,i}function subtract$2(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i}function multiply$4(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i[2]=m[2]*g[2],i}function divide$2(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i[2]=m[2]/g[2],i}function distance$2(i,m){var g=m[0]-i[0],x=m[1]-i[1],_=m[2]-i[2];return Math.hypot(g,x,_)}function squaredDistance$2(i,m){var g=m[0]-i[0],x=m[1]-i[1],_=m[2]-i[2];return g*g+x*x+_*_}function squaredLength$4(i){var m=i[0],g=i[1],x=i[2];return m*m+g*g+x*x}function normalize$4(i,m){var g=m[0],x=m[1],_=m[2],b=g*g+x*x+_*_;return b>0&&(b=1/Math.sqrt(b)),i[0]=m[0]*b,i[1]=m[1]*b,i[2]=m[2]*b,i}function dot$4(i,m){return i[0]*m[0]+i[1]*m[1]+i[2]*m[2]}function cross$2(i,m,g){var x=m[0],_=m[1],b=m[2],y=g[0],T=g[1],w=g[2];return i[0]=_*w-b*T,i[1]=b*y-x*w,i[2]=x*T-_*y,i}function lerp$4(i,m,g,x){var _=m[0],b=m[1],y=m[2];return i[0]=_+x*(g[0]-_),i[1]=b+x*(g[1]-b),i[2]=y+x*(g[2]-y),i}function transformMat4$2(i,m,g){var x=m[0],_=m[1],b=m[2],y=g[3]*x+g[7]*_+g[11]*b+g[15];return y=y||1,i[0]=(g[0]*x+g[4]*_+g[8]*b+g[12])/y,i[1]=(g[1]*x+g[5]*_+g[9]*b+g[13])/y,i[2]=(g[2]*x+g[6]*_+g[10]*b+g[14])/y,i}var Ye,je=subtract$2,Ze=multiply$4,Je=divide$2,Qe=distance$2,et=squaredDistance$2,at=length$4,ht=squaredLength$4,ft=(Ye=create$4(),function(i,m,g,x,_,b){var y,T;for(m||(m=3),g||(g=0),T=x?Math.min(x*m+g,i.length):i.length,y=g;y<T;y+=m)Ye[0]=i[y],Ye[1]=i[y+1],Ye[2]=i[y+2],_(Ye,Ye,b),i[y]=Ye[0],i[y+1]=Ye[1],i[y+2]=Ye[2];return i}),gt=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i},angle:function(i,m){var g=i[0],x=i[1],_=i[2],b=m[0],y=m[1],T=m[2],w=Math.sqrt(g*g+x*x+_*_)*Math.sqrt(b*b+y*y+T*T),P=w&&dot$4(i,m)/w;return Math.acos(Math.min(Math.max(P,-1),1))},bezier:function(i,m,g,x,_,b){var y=1-b,T=y*y,w=b*b,P=T*y,H=3*b*T,z=3*w*y,$=w*b;return i[0]=m[0]*P+g[0]*H+x[0]*z+_[0]*$,i[1]=m[1]*P+g[1]*H+x[1]*z+_[1]*$,i[2]=m[2]*P+g[2]*H+x[2]*z+_[2]*$,i},ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i[2]=Math.ceil(m[2]),i},clone:function(i){var g=new m(3);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i},create:create$4,cross:cross$2,dist:Qe,distance:distance$2,div:Je,divide:divide$2,dot:dot$4,equals:function(m,g){var x=m[0],_=m[1],b=m[2],y=g[0],T=g[1],w=g[2];return Math.abs(x-y)<=i*Math.max(1,Math.abs(x),Math.abs(y))&&Math.abs(_-T)<=i*Math.max(1,Math.abs(_),Math.abs(T))&&Math.abs(b-w)<=i*Math.max(1,Math.abs(b),Math.abs(w))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]},floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i[2]=Math.floor(m[2]),i},forEach:ft,fromValues:fromValues$4,hermite:function(i,m,g,x,_,b){var y=b*b,T=y*(2*b-3)+1,w=y*(b-2)+b,P=y*(b-1),H=y*(3-2*b);return i[0]=m[0]*T+g[0]*w+x[0]*P+_[0]*H,i[1]=m[1]*T+g[1]*w+x[1]*P+_[1]*H,i[2]=m[2]*T+g[2]*w+x[2]*P+_[2]*H,i},inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i[2]=1/m[2],i},len:at,length:length$4,lerp:lerp$4,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i[2]=Math.max(m[2],g[2]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i[2]=Math.min(m[2],g[2]),i},mul:Ze,multiply:multiply$4,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i},normalize:normalize$4,random:function(i,m){m=m||1;var x=2*g()*Math.PI,_=2*g()-1,b=Math.sqrt(1-_*_)*m;return i[0]=Math.cos(x)*b,i[1]=Math.sin(x)*b,i[2]=_*m,i},rotateX:function(i,m,g,x){var _=[],b=[];return _[0]=m[0]-g[0],_[1]=m[1]-g[1],_[2]=m[2]-g[2],b[0]=_[0],b[1]=_[1]*Math.cos(x)-_[2]*Math.sin(x),b[2]=_[1]*Math.sin(x)+_[2]*Math.cos(x),i[0]=b[0]+g[0],i[1]=b[1]+g[1],i[2]=b[2]+g[2],i},rotateY:function(i,m,g,x){var _=[],b=[];return _[0]=m[0]-g[0],_[1]=m[1]-g[1],_[2]=m[2]-g[2],b[0]=_[2]*Math.sin(x)+_[0]*Math.cos(x),b[1]=_[1],b[2]=_[2]*Math.cos(x)-_[0]*Math.sin(x),i[0]=b[0]+g[0],i[1]=b[1]+g[1],i[2]=b[2]+g[2],i},rotateZ:function(i,m,g,x){var _=[],b=[];return _[0]=m[0]-g[0],_[1]=m[1]-g[1],_[2]=m[2]-g[2],b[0]=_[0]*Math.cos(x)-_[1]*Math.sin(x),b[1]=_[0]*Math.sin(x)+_[1]*Math.cos(x),b[2]=_[2],i[0]=b[0]+g[0],i[1]=b[1]+g[1],i[2]=b[2]+g[2],i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i[2]=Math.round(m[2]),i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i},scaleAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i},set:set$4,sqrDist:et,sqrLen:ht,squaredDistance:squaredDistance$2,squaredLength:squaredLength$4,str:function(i){return"vec3("+i[0]+","+i[1]+","+i[2]+")"},sub:je,subtract:subtract$2,transformMat3:function(i,m,g){var x=m[0],_=m[1],b=m[2];return i[0]=x*g[0]+_*g[3]+b*g[6],i[1]=x*g[1]+_*g[4]+b*g[7],i[2]=x*g[2]+_*g[5]+b*g[8],i},transformMat4:transformMat4$2,transformQuat:function(i,m,g){var x=g[0],_=g[1],b=g[2],y=g[3],T=m[0],w=m[1],P=m[2],H=_*P-b*w,z=b*T-x*P,$=x*w-_*T,q=_*$-b*z,W=b*H-x*$,ye=x*z-_*H,Ge=2*y;return H*=Ge,z*=Ge,$*=Ge,q*=2,W*=2,ye*=2,i[0]=T+H+q,i[1]=w+z+W,i[2]=P+$+ye,i},zero:function(i){return i[0]=0,i[1]=0,i[2]=0,i}});function create$3(){var i=new m(4);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0,i[3]=0),i}function clone$3(i){var g=new m(4);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g}function fromValues$3(i,g,x,_){var b=new m(4);return b[0]=i,b[1]=g,b[2]=x,b[3]=_,b}function copy$3(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i}function set$3(i,m,g,x,_){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i}function add$3(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i}function subtract$1(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i}function multiply$3(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i[2]=m[2]*g[2],i[3]=m[3]*g[3],i}function divide$1(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i[2]=m[2]/g[2],i[3]=m[3]/g[3],i}function scale$3(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i}function distance$1(i,m){var g=m[0]-i[0],x=m[1]-i[1],_=m[2]-i[2],b=m[3]-i[3];return Math.hypot(g,x,_,b)}function squaredDistance$1(i,m){var g=m[0]-i[0],x=m[1]-i[1],_=m[2]-i[2],b=m[3]-i[3];return g*g+x*x+_*_+b*b}function length$3(i){var m=i[0],g=i[1],x=i[2],_=i[3];return Math.hypot(m,g,x,_)}function squaredLength$3(i){var m=i[0],g=i[1],x=i[2],_=i[3];return m*m+g*g+x*x+_*_}function normalize$3(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=g*g+x*x+_*_+b*b;return y>0&&(y=1/Math.sqrt(y)),i[0]=g*y,i[1]=x*y,i[2]=_*y,i[3]=b*y,i}function dot$3(i,m){return i[0]*m[0]+i[1]*m[1]+i[2]*m[2]+i[3]*m[3]}function lerp$3(i,m,g,x){var _=m[0],b=m[1],y=m[2],T=m[3];return i[0]=_+x*(g[0]-_),i[1]=b+x*(g[1]-b),i[2]=y+x*(g[2]-y),i[3]=T+x*(g[3]-T),i}function exactEquals$3(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]}function equals$3(m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=g[0],w=g[1],P=g[2],H=g[3];return Math.abs(x-T)<=i*Math.max(1,Math.abs(x),Math.abs(T))&&Math.abs(_-w)<=i*Math.max(1,Math.abs(_),Math.abs(w))&&Math.abs(b-P)<=i*Math.max(1,Math.abs(b),Math.abs(P))&&Math.abs(y-H)<=i*Math.max(1,Math.abs(y),Math.abs(H))}var xt=subtract$1,vt=multiply$3,bt=divide$1,yt=distance$1,Tt=squaredDistance$1,St=length$3,wt=squaredLength$3,Mt=function(){var i=create$3();return function(m,g,x,_,b,y){var T,w;for(g||(g=4),x||(x=0),w=_?Math.min(_*g+x,m.length):m.length,T=x;T<w;T+=g)i[0]=m[T],i[1]=m[T+1],i[2]=m[T+2],i[3]=m[T+3],b(i,i,y),m[T]=i[0],m[T+1]=i[1],m[T+2]=i[2],m[T+3]=i[3];return m}}(),Rt=Object.freeze({__proto__:null,add:add$3,ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i[2]=Math.ceil(m[2]),i[3]=Math.ceil(m[3]),i},clone:clone$3,copy:copy$3,create:create$3,cross:function(i,m,g,x){var _=g[0]*x[1]-g[1]*x[0],b=g[0]*x[2]-g[2]*x[0],y=g[0]*x[3]-g[3]*x[0],T=g[1]*x[2]-g[2]*x[1],w=g[1]*x[3]-g[3]*x[1],P=g[2]*x[3]-g[3]*x[2],H=m[0],z=m[1],$=m[2],q=m[3];return i[0]=z*P-$*w+q*T,i[1]=-H*P+$*y-q*b,i[2]=H*w-z*y+q*_,i[3]=-H*T+z*b-$*_,i},dist:yt,distance:distance$1,div:bt,divide:divide$1,dot:dot$3,equals:equals$3,exactEquals:exactEquals$3,floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i[2]=Math.floor(m[2]),i[3]=Math.floor(m[3]),i},forEach:Mt,fromValues:fromValues$3,inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i[2]=1/m[2],i[3]=1/m[3],i},len:St,length:length$3,lerp:lerp$3,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i[2]=Math.max(m[2],g[2]),i[3]=Math.max(m[3],g[3]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i[2]=Math.min(m[2],g[2]),i[3]=Math.min(m[3],g[3]),i},mul:vt,multiply:multiply$3,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=-m[3],i},normalize:normalize$3,random:function(i,m){var x,_,b,y,T,w;m=m||1;do{T=(x=2*g()-1)*x+(_=2*g()-1)*_}while(T>=1);do{w=(b=2*g()-1)*b+(y=2*g()-1)*y}while(w>=1);var P=Math.sqrt((1-T)/w);return i[0]=m*x,i[1]=m*_,i[2]=m*b*P,i[3]=m*y*P,i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i[2]=Math.round(m[2]),i[3]=Math.round(m[3]),i},scale:scale$3,scaleAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i[3]=m[3]+g[3]*x,i},set:set$3,sqrDist:Tt,sqrLen:wt,squaredDistance:squaredDistance$1,squaredLength:squaredLength$3,str:function(i){return"vec4("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"},sub:xt,subtract:subtract$1,transformMat4:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3];return i[0]=g[0]*x+g[4]*_+g[8]*b+g[12]*y,i[1]=g[1]*x+g[5]*_+g[9]*b+g[13]*y,i[2]=g[2]*x+g[6]*_+g[10]*b+g[14]*y,i[3]=g[3]*x+g[7]*_+g[11]*b+g[15]*y,i},transformQuat:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=g[0],T=g[1],w=g[2],P=g[3],H=P*x+T*b-w*_,z=P*_+w*x-y*b,$=P*b+y*_-T*x,q=-y*x-T*_-w*b;return i[0]=H*P+q*-y+z*-w-$*-T,i[1]=z*P+q*-T+$*-y-H*-w,i[2]=$*P+q*-w+H*-T-z*-y,i[3]=m[3],i},zero:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=0,i}});function create$2(){var i=new m(4);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i[3]=1,i}function setAxisAngle(i,m,g){g*=.5;var x=Math.sin(g);return i[0]=x*m[0],i[1]=x*m[1],i[2]=x*m[2],i[3]=Math.cos(g),i}function multiply$2(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=g[0],w=g[1],P=g[2],H=g[3];return i[0]=x*H+y*T+_*P-b*w,i[1]=_*H+y*w+b*T-x*P,i[2]=b*H+y*P+x*w-_*T,i[3]=y*H-x*T-_*w-b*P,i}function rotateX$1(i,m,g){g*=.5;var x=m[0],_=m[1],b=m[2],y=m[3],T=Math.sin(g),w=Math.cos(g);return i[0]=x*w+y*T,i[1]=_*w+b*T,i[2]=b*w-_*T,i[3]=y*w-x*T,i}function rotateY$1(i,m,g){g*=.5;var x=m[0],_=m[1],b=m[2],y=m[3],T=Math.sin(g),w=Math.cos(g);return i[0]=x*w-b*T,i[1]=_*w+y*T,i[2]=b*w+x*T,i[3]=y*w-_*T,i}function rotateZ$1(i,m,g){g*=.5;var x=m[0],_=m[1],b=m[2],y=m[3],T=Math.sin(g),w=Math.cos(g);return i[0]=x*w+_*T,i[1]=_*w-x*T,i[2]=b*w+y*T,i[3]=y*w-b*T,i}function exp(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=Math.sqrt(g*g+x*x+_*_),T=Math.exp(b),w=y>0?T*Math.sin(y)/y:0;return i[0]=g*w,i[1]=x*w,i[2]=_*w,i[3]=T*Math.cos(y),i}function ln(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=Math.sqrt(g*g+x*x+_*_),T=y>0?Math.atan2(y,b)/y:0;return i[0]=g*T,i[1]=x*T,i[2]=_*T,i[3]=.5*Math.log(g*g+x*x+_*_+b*b),i}function slerp(m,g,x,_){var b,y,T,w,P,H=g[0],z=g[1],$=g[2],q=g[3],W=x[0],ye=x[1],Ge=x[2],Ke=x[3];return(y=H*W+z*ye+$*Ge+q*Ke)<0&&(y=-y,W=-W,ye=-ye,Ge=-Ge,Ke=-Ke),1-y>i?(b=Math.acos(y),T=Math.sin(b),w=Math.sin((1-_)*b)/T,P=Math.sin(_*b)/T):(w=1-_,P=_),m[0]=w*H+P*W,m[1]=w*z+P*ye,m[2]=w*$+P*Ge,m[3]=w*q+P*Ke,m}function fromMat3(i,m){var g,x=m[0]+m[4]+m[8];if(x>0)g=Math.sqrt(x+1),i[3]=.5*g,g=.5/g,i[0]=(m[5]-m[7])*g,i[1]=(m[6]-m[2])*g,i[2]=(m[1]-m[3])*g;else{var _=0;m[4]>m[0]&&(_=1),m[8]>m[3*_+_]&&(_=2);var b=(_+1)%3,y=(_+2)%3;g=Math.sqrt(m[3*_+_]-m[3*b+b]-m[3*y+y]+1),i[_]=.5*g,g=.5/g,i[3]=(m[3*b+y]-m[3*y+b])*g,i[b]=(m[3*b+_]+m[3*_+b])*g,i[y]=(m[3*y+_]+m[3*_+y])*g}return i}var Ct,Pt,Et,It,Bt=clone$3,Lt=fromValues$3,Dt=copy$3,Ut=set$3,At=add$3,kt=multiply$2,Ot=scale$3,Ft=dot$3,Nt=lerp$3,Gt=length$3,Vt=Gt,Ht=squaredLength$3,zt=Ht,$t=normalize$3,qt=exactEquals$3,Kt=equals$3,Wt=(Ct=create$4(),Pt=fromValues$4(1,0,0),Et=fromValues$4(0,1,0),function(i,m,g){var x=dot$4(m,g);return x<-.999999?(cross$2(Ct,Pt,m),at(Ct)<1e-6&&cross$2(Ct,Et,m),normalize$4(Ct,Ct),setAxisAngle(i,Ct,Math.PI),i):x>.999999?(i[0]=0,i[1]=0,i[2]=0,i[3]=1,i):(cross$2(Ct,m,g),i[0]=Ct[0],i[1]=Ct[1],i[2]=Ct[2],i[3]=1+x,$t(i,i))}),Xt=function(){var i=create$2(),m=create$2();return function(g,x,_,b,y,T){return slerp(i,x,y,T),slerp(m,_,b,T),slerp(g,i,m,2*T*(1-T)),g}}(),Yt=(It=create$6(),function(i,m,g,x){return It[0]=g[0],It[3]=g[1],It[6]=g[2],It[1]=x[0],It[4]=x[1],It[7]=x[2],It[2]=-m[0],It[5]=-m[1],It[8]=-m[2],$t(i,fromMat3(i,It))}),jt=Object.freeze({__proto__:null,add:At,calculateW:function(i,m){var g=m[0],x=m[1],_=m[2];return i[0]=g,i[1]=x,i[2]=_,i[3]=Math.sqrt(Math.abs(1-g*g-x*x-_*_)),i},clone:Bt,conjugate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=m[3],i},copy:Dt,create:create$2,dot:Ft,equals:Kt,exactEquals:qt,exp:exp,fromEuler:function(i,m,g,x){var _=.5*Math.PI/180;m*=_,g*=_,x*=_;var b=Math.sin(m),y=Math.cos(m),T=Math.sin(g),w=Math.cos(g),P=Math.sin(x),H=Math.cos(x);return i[0]=b*w*H-y*T*P,i[1]=y*T*H+b*w*P,i[2]=y*w*P-b*T*H,i[3]=y*w*H+b*T*P,i},fromMat3:fromMat3,fromValues:Lt,getAngle:function(i,m){var g=Ft(i,m);return Math.acos(2*g*g-1)},getAxisAngle:function(m,g){var x=2*Math.acos(g[3]),_=Math.sin(x/2);return _>i?(m[0]=g[0]/_,m[1]=g[1]/_,m[2]=g[2]/_):(m[0]=1,m[1]=0,m[2]=0),x},identity:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i},invert:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=g*g+x*x+_*_+b*b,T=y?1/y:0;return i[0]=-g*T,i[1]=-x*T,i[2]=-_*T,i[3]=b*T,i},len:Vt,length:Gt,lerp:Nt,ln:ln,mul:kt,multiply:multiply$2,normalize:$t,pow:function(i,m,g){return ln(i,m),Ot(i,i,g),exp(i,i),i},random:function(i){var m=g(),x=g(),_=g(),b=Math.sqrt(1-m),y=Math.sqrt(m);return i[0]=b*Math.sin(2*Math.PI*x),i[1]=b*Math.cos(2*Math.PI*x),i[2]=y*Math.sin(2*Math.PI*_),i[3]=y*Math.cos(2*Math.PI*_),i},rotateX:rotateX$1,rotateY:rotateY$1,rotateZ:rotateZ$1,rotationTo:Wt,scale:Ot,set:Ut,setAxes:Yt,setAxisAngle:setAxisAngle,slerp:slerp,sqlerp:Xt,sqrLen:zt,squaredLength:Ht,str:function(i){return"quat("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"}});function fromRotationTranslation(i,m,g){var x=.5*g[0],_=.5*g[1],b=.5*g[2],y=m[0],T=m[1],w=m[2],P=m[3];return i[0]=y,i[1]=T,i[2]=w,i[3]=P,i[4]=x*P+_*w-b*T,i[5]=_*P+b*y-x*w,i[6]=b*P+x*T-_*y,i[7]=-x*y-_*T-b*w,i}function copy$1(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i}var Zt=Dt;var Jt=Dt;function multiply$1(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=g[4],w=g[5],P=g[6],H=g[7],z=m[4],$=m[5],q=m[6],W=m[7],ye=g[0],Ge=g[1],Ke=g[2],Xe=g[3];return i[0]=x*Xe+y*ye+_*Ke-b*Ge,i[1]=_*Xe+y*Ge+b*ye-x*Ke,i[2]=b*Xe+y*Ke+x*Ge-_*ye,i[3]=y*Xe-x*ye-_*Ge-b*Ke,i[4]=x*H+y*T+_*P-b*w+z*Xe+W*ye+$*Ke-q*Ge,i[5]=_*H+y*w+b*T-x*P+$*Xe+W*Ge+q*ye-z*Ke,i[6]=b*H+y*P+x*w-_*T+q*Xe+W*Ke+z*Ge-$*ye,i[7]=y*H-x*T-_*w-b*P+W*Xe-z*ye-$*Ge-q*Ke,i}var Qt=multiply$1;var en=Ft;var tn=Gt,nn=tn,rn=Ht,an=rn;var sn=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i},clone:function(i){var g=new m(8);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g},conjugate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=m[3],i[4]=-m[4],i[5]=-m[5],i[6]=-m[6],i[7]=m[7],i},copy:copy$1,create:function(){var i=new m(8);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0,i[4]=0,i[5]=0,i[6]=0,i[7]=0),i[3]=1,i},dot:en,equals:function(m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=g[0],$=g[1],q=g[2],W=g[3],ye=g[4],Ge=g[5],Ke=g[6],Xe=g[7];return Math.abs(x-z)<=i*Math.max(1,Math.abs(x),Math.abs(z))&&Math.abs(_-$)<=i*Math.max(1,Math.abs(_),Math.abs($))&&Math.abs(b-q)<=i*Math.max(1,Math.abs(b),Math.abs(q))&&Math.abs(y-W)<=i*Math.max(1,Math.abs(y),Math.abs(W))&&Math.abs(T-ye)<=i*Math.max(1,Math.abs(T),Math.abs(ye))&&Math.abs(w-Ge)<=i*Math.max(1,Math.abs(w),Math.abs(Ge))&&Math.abs(P-Ke)<=i*Math.max(1,Math.abs(P),Math.abs(Ke))&&Math.abs(H-Xe)<=i*Math.max(1,Math.abs(H),Math.abs(Xe))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]},fromMat4:function(i,g){var x=create$2();getRotation(x,g);var _=new m(3);return getTranslation$1(_,g),fromRotationTranslation(i,x,_),i},fromRotation:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=0,i[5]=0,i[6]=0,i[7]=0,i},fromRotationTranslation:fromRotationTranslation,fromRotationTranslationValues:function(i,g,x,_,b,y,T){var w=new m(8);w[0]=i,w[1]=g,w[2]=x,w[3]=_;var P=.5*b,H=.5*y,z=.5*T;return w[4]=P*_+H*x-z*g,w[5]=H*_+z*i-P*x,w[6]=z*_+P*g-H*i,w[7]=-P*i-H*g-z*x,w},fromTranslation:function(i,m){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i[4]=.5*m[0],i[5]=.5*m[1],i[6]=.5*m[2],i[7]=0,i},fromValues:function(i,g,x,_,b,y,T,w){var P=new m(8);return P[0]=i,P[1]=g,P[2]=x,P[3]=_,P[4]=b,P[5]=y,P[6]=T,P[7]=w,P},getDual:function(i,m){return i[0]=m[4],i[1]=m[5],i[2]=m[6],i[3]=m[7],i},getReal:Zt,getTranslation:function(i,m){var g=m[4],x=m[5],_=m[6],b=m[7],y=-m[0],T=-m[1],w=-m[2],P=m[3];return i[0]=2*(g*P+b*y+x*w-_*T),i[1]=2*(x*P+b*T+_*y-g*w),i[2]=2*(_*P+b*w+g*T-x*y),i},identity:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i[4]=0,i[5]=0,i[6]=0,i[7]=0,i},invert:function(i,m){var g=rn(m);return i[0]=-m[0]/g,i[1]=-m[1]/g,i[2]=-m[2]/g,i[3]=m[3]/g,i[4]=-m[4]/g,i[5]=-m[5]/g,i[6]=-m[6]/g,i[7]=m[7]/g,i},len:nn,length:tn,lerp:function(i,m,g,x){var _=1-x;return en(m,g)<0&&(x=-x),i[0]=m[0]*_+g[0]*x,i[1]=m[1]*_+g[1]*x,i[2]=m[2]*_+g[2]*x,i[3]=m[3]*_+g[3]*x,i[4]=m[4]*_+g[4]*x,i[5]=m[5]*_+g[5]*x,i[6]=m[6]*_+g[6]*x,i[7]=m[7]*_+g[7]*x,i},mul:Qt,multiply:multiply$1,normalize:function(i,m){var g=rn(m);if(g>0){g=Math.sqrt(g);var x=m[0]/g,_=m[1]/g,b=m[2]/g,y=m[3]/g,T=m[4],w=m[5],P=m[6],H=m[7],z=x*T+_*w+b*P+y*H;i[0]=x,i[1]=_,i[2]=b,i[3]=y,i[4]=(T-x*z)/g,i[5]=(w-_*z)/g,i[6]=(P-b*z)/g,i[7]=(H-y*z)/g}return i},rotateAroundAxis:function(m,g,x,_){if(Math.abs(_)<i)return copy$1(m,g);var b=Math.hypot(x[0],x[1],x[2]);_*=.5;var y=Math.sin(_),T=y*x[0]/b,w=y*x[1]/b,P=y*x[2]/b,H=Math.cos(_),z=g[0],$=g[1],q=g[2],W=g[3];m[0]=z*H+W*T+$*P-q*w,m[1]=$*H+W*w+q*T-z*P,m[2]=q*H+W*P+z*w-$*T,m[3]=W*H-z*T-$*w-q*P;var ye=g[4],Ge=g[5],Ke=g[6],Xe=g[7];return m[4]=ye*H+Xe*T+Ge*P-Ke*w,m[5]=Ge*H+Xe*w+Ke*T-ye*P,m[6]=Ke*H+Xe*P+ye*w-Ge*T,m[7]=Xe*H-ye*T-Ge*w-Ke*P,m},rotateByQuatAppend:function(i,m,g){var x=g[0],_=g[1],b=g[2],y=g[3],T=m[0],w=m[1],P=m[2],H=m[3];return i[0]=T*y+H*x+w*b-P*_,i[1]=w*y+H*_+P*x-T*b,i[2]=P*y+H*b+T*_-w*x,i[3]=H*y-T*x-w*_-P*b,T=m[4],w=m[5],P=m[6],H=m[7],i[4]=T*y+H*x+w*b-P*_,i[5]=w*y+H*_+P*x-T*b,i[6]=P*y+H*b+T*_-w*x,i[7]=H*y-T*x-w*_-P*b,i},rotateByQuatPrepend:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=g[0],w=g[1],P=g[2],H=g[3];return i[0]=x*H+y*T+_*P-b*w,i[1]=_*H+y*w+b*T-x*P,i[2]=b*H+y*P+x*w-_*T,i[3]=y*H-x*T-_*w-b*P,T=g[4],w=g[5],P=g[6],H=g[7],i[4]=x*H+y*T+_*P-b*w,i[5]=_*H+y*w+b*T-x*P,i[6]=b*H+y*P+x*w-_*T,i[7]=y*H-x*T-_*w-b*P,i},rotateX:function(i,m,g){var x=-m[0],_=-m[1],b=-m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=T*y+H*x+w*b-P*_,$=w*y+H*_+P*x-T*b,q=P*y+H*b+T*_-w*x,W=H*y-T*x-w*_-P*b;return rotateX$1(i,m,g),x=i[0],_=i[1],b=i[2],y=i[3],i[4]=z*y+W*x+$*b-q*_,i[5]=$*y+W*_+q*x-z*b,i[6]=q*y+W*b+z*_-$*x,i[7]=W*y-z*x-$*_-q*b,i},rotateY:function(i,m,g){var x=-m[0],_=-m[1],b=-m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=T*y+H*x+w*b-P*_,$=w*y+H*_+P*x-T*b,q=P*y+H*b+T*_-w*x,W=H*y-T*x-w*_-P*b;return rotateY$1(i,m,g),x=i[0],_=i[1],b=i[2],y=i[3],i[4]=z*y+W*x+$*b-q*_,i[5]=$*y+W*_+q*x-z*b,i[6]=q*y+W*b+z*_-$*x,i[7]=W*y-z*x-$*_-q*b,i},rotateZ:function(i,m,g){var x=-m[0],_=-m[1],b=-m[2],y=m[3],T=m[4],w=m[5],P=m[6],H=m[7],z=T*y+H*x+w*b-P*_,$=w*y+H*_+P*x-T*b,q=P*y+H*b+T*_-w*x,W=H*y-T*x-w*_-P*b;return rotateZ$1(i,m,g),x=i[0],_=i[1],b=i[2],y=i[3],i[4]=z*y+W*x+$*b-q*_,i[5]=$*y+W*_+q*x-z*b,i[6]=q*y+W*b+z*_-$*x,i[7]=W*y-z*x-$*_-q*b,i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i},set:function(i,m,g,x,_,b,y,T,w){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i[4]=b,i[5]=y,i[6]=T,i[7]=w,i},setDual:function(i,m){return i[4]=m[0],i[5]=m[1],i[6]=m[2],i[7]=m[3],i},setReal:Jt,sqrLen:an,squaredLength:rn,str:function(i){return"quat2("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+")"},translate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=.5*g[0],w=.5*g[1],P=.5*g[2],H=m[4],z=m[5],$=m[6],q=m[7];return i[0]=x,i[1]=_,i[2]=b,i[3]=y,i[4]=y*T+_*P-b*w+H,i[5]=y*w+b*T-x*P+z,i[6]=y*P+x*w-_*T+$,i[7]=-x*T-_*w-b*P+q,i}});function create(){var i=new m(2);return m!=Float32Array&&(i[0]=0,i[1]=0),i}function subtract(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i}function multiply(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i}function divide(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i}function distance(i,m){var g=m[0]-i[0],x=m[1]-i[1];return Math.hypot(g,x)}function squaredDistance(i,m){var g=m[0]-i[0],x=m[1]-i[1];return g*g+x*x}function length(i){var m=i[0],g=i[1];return Math.hypot(m,g)}function squaredLength(i){var m=i[0],g=i[1];return m*m+g*g}function lerp(i,m,g,x){var _=m[0],b=m[1];return i[0]=_+x*(g[0]-_),i[1]=b+x*(g[1]-b),i}var on=length,un=subtract,cn=multiply,hn=divide,fn=distance,dn=squaredDistance,mn=squaredLength,pn=function(){var i=create();return function(m,g,x,_,b,y){var T,w;for(g||(g=2),x||(x=0),w=_?Math.min(_*g+x,m.length):m.length,T=x;T<w;T+=g)i[0]=m[T],i[1]=m[T+1],b(i,i,y),m[T]=i[0],m[T+1]=i[1];return m}}(),gn=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i},angle:function(i,m){var g=i[0],x=i[1],_=m[0],b=m[1],y=Math.sqrt(g*g+x*x)*Math.sqrt(_*_+b*b),T=y&&(g*_+x*b)/y;return Math.acos(Math.min(Math.max(T,-1),1))},ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i},clone:function(i){var g=new m(2);return g[0]=i[0],g[1]=i[1],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i},create:create,cross:function(i,m,g){var x=m[0]*g[1]-m[1]*g[0];return i[0]=i[1]=0,i[2]=x,i},dist:fn,distance:distance,div:hn,divide:divide,dot:function(i,m){return i[0]*m[0]+i[1]*m[1]},equals:function(m,g){var x=m[0],_=m[1],b=g[0],y=g[1];return Math.abs(x-b)<=i*Math.max(1,Math.abs(x),Math.abs(b))&&Math.abs(_-y)<=i*Math.max(1,Math.abs(_),Math.abs(y))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]},floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i},forEach:pn,fromValues:function(i,g){var x=new m(2);return x[0]=i,x[1]=g,x},inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i},len:on,length:length,lerp:lerp,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i},mul:cn,multiply:multiply,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i},normalize:function(i,m){var g=m[0],x=m[1],_=g*g+x*x;return _>0&&(_=1/Math.sqrt(_)),i[0]=m[0]*_,i[1]=m[1]*_,i},random:function(i,m){m=m||1;var x=2*g()*Math.PI;return i[0]=Math.cos(x)*m,i[1]=Math.sin(x)*m,i},rotate:function(i,m,g,x){var _=m[0]-g[0],b=m[1]-g[1],y=Math.sin(x),T=Math.cos(x);return i[0]=_*T-b*y+g[0],i[1]=_*y+b*T+g[1],i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i},scaleAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i},set:function(i,m,g){return i[0]=m,i[1]=g,i},sqrDist:dn,sqrLen:mn,squaredDistance:squaredDistance,squaredLength:squaredLength,str:function(i){return"vec2("+i[0]+","+i[1]+")"},sub:un,subtract:subtract,transformMat2:function(i,m,g){var x=m[0],_=m[1];return i[0]=g[0]*x+g[2]*_,i[1]=g[1]*x+g[3]*_,i},transformMat2d:function(i,m,g){var x=m[0],_=m[1];return i[0]=g[0]*x+g[2]*_+g[4],i[1]=g[1]*x+g[3]*_+g[5],i},transformMat3:function(i,m,g){var x=m[0],_=m[1];return i[0]=g[0]*x+g[3]*_+g[6],i[1]=g[1]*x+g[4]*_+g[7],i},transformMat4:function(i,m,g){var x=m[0],_=m[1];return i[0]=g[0]*x+g[4]*_+g[12],i[1]=g[1]*x+g[5]*_+g[13],i},zero:function(i){return i[0]=0,i[1]=0,i}}),xn=Object.freeze({__proto__:null,glMatrix:_,mat2:T,mat2d:H,mat3:q,mat4:Xe,quat:jt,quat2:sn,vec2:gn,vec3:gt,vec4:Rt});class InstanceIdGenerator{static idMaps=new Map;static getNextId(i){let m=this.idMaps.get(i)||0;return this.idMaps.set(i,m+1),m}}Object.freeze(InstanceIdGenerator);class Camera2D{#e;#t=create$5();#n=0;#r=0;#i=0;#a;constructor(){}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get modelMatrix(){return this.#t}get z(){return this.#i}get x(){return this.#n}set x(i){this.#n=i,this.#t[12]=i}get y(){return this.#r}set y(i){this.#r=i,this.#t[13]=i}get position(){return[this.#n,this.#r]}setPosition(i,m){Array.isArray(i)?[this.#n,this.#r]=i:(this.#n=i,this.#r=m),[this.#t[12],this.#t[13],this.#t[14]]=[this.#n,this.#r,0]}}const consoleAndThrowError=(...i)=>{const m=Array.prototype.slice.call(i).join(" ");throw new Error(m)},validateNumber=i=>"number"==typeof i||(consoleAndThrowError("Only numbers allowed."),!1);class PerspectiveCamera{#e;#s=new Float32Array([0,1,0]);#t=create$5();#n=0;#i=0;#r=0;#o=0;#u=0;#l=0;#c=60;#h=.01;#f=1e4;#a;constructor(){}get rotationX(){return this.#o}set rotationX(i){this.#o=i}get rotationY(){return this.#u}set rotationY(i){this.#u=i}get rotationZ(){return this.#l}set rotationZ(i){this.#l=i}get fieldOfView(){return this.#c}set fieldOfView(i){validateNumber(i),this.#c=i}get nearClipping(){return this.#h}set nearClipping(i){validateNumber(i),this.#h=i}get farClipping(){return this.#f}set farClipping(i){validateNumber(i),this.#f=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get modelMatrix(){return this.#t}get x(){return this.#n}set x(i){this.#n=i,this.#t[12]=i}get y(){return this.#r}set y(i){this.#r=i,this.#t[13]=i}get z(){return this.#i}set z(i){this.#i=i,this.#t[14]=i}get position(){return[this.#n,this.#r,this.#i]}setPosition(i,m,g){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=m,this.#i=g),[this.#t[12],this.#t[13],this.#t[14]]=[this.#n,this.#r,this.#i]}lookAt(i,m,g){lookAt(this.#t,[this.#n,this.#r,this.#i],[i,m,g],this.#s)}}class OrthographicCamera extends PerspectiveCamera{#e;#a;#d=1;#m=-1;#p=-1;#g=1;constructor(){super(),this.nearClipping=.01,this.farClipping=2e3}get top(){return this.#d}set top(i){validateNumber(i),this.#d=i}get bottom(){return this.#m}set bottom(i){validateNumber(i),this.#m=i}get left(){return this.#p}set left(i){validateNumber(i),this.#p=i}get right(){return this.#g}set right(i){validateNumber(i),this.#g=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}}const gltfAnimationLooper_rotation=(m,g,x,_,b,y,T,w,P,H,z)=>{let $,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Ct=!0;if("CUBICSPLINE"==m)y!=_-1?(Rt=12*y,yt=x[Rt+4],Tt=x[Rt+5],St=x[Rt+6],wt=x[Rt+7],Mt=yt*yt+Tt*Tt+St*St+wt*wt,Mt>0&&(Mt=1/Math.sqrt(Mt)),je=yt*Mt,Ze=Tt*Mt,Je=St*Mt,Qe=wt*Mt,yt=x[Rt+8],Tt=x[Rt+9],St=x[Rt+10],wt=x[Rt+11],Mt=yt*yt+Tt*Tt+St*St+wt*wt,Mt>0&&(Mt=1/Math.sqrt(Mt)),et=yt*Mt,at=Tt*Mt,ht=St*Mt,ft=wt*Mt,yt=x[Rt],Tt=x[Rt+1],St=x[Rt+2],wt=x[Rt+3],Mt=yt*yt+Tt*Tt+St*St+wt*wt,Mt>0&&(Mt=1/Math.sqrt(Mt)),Ge=yt*Mt,Ke=Tt*Mt,Xe=St*Mt,Ye=wt*Mt,Rt=12*T,yt=x[Rt+4],Tt=x[Rt+5],St=x[Rt+6],wt=x[Rt+7],Mt=yt*yt+Tt*Tt+St*St+wt*wt,Mt>0&&(Mt=1/Math.sqrt(Mt)),$=yt*Mt,q=Tt*Mt,W=St*Mt,ye=wt*Mt,gt=je,xt=et*b,vt=$,bt=Ge*b,yt=w*gt+P*xt+H*vt+z*bt,gt=Ze,xt=at*b,vt=q,bt=Ke*b,Tt=w*gt+P*xt+H*vt+z*bt,gt=Je,xt=ht*b,vt=W,bt=Xe*b,St=w*gt+P*xt+H*vt+z*bt,gt=Qe,xt=ft*b,vt=ye,bt=Ye*b,wt=w*gt+P*xt+H*vt+z*bt):Ct=!1;else{let m,g,_,w,P;Rt=4*y,yt=x[Rt],Tt=x[Rt+1],St=x[Rt+2],wt=x[Rt+3],Mt=yt*yt+Tt*Tt+St*St+wt*wt,Mt>0&&(Mt=1/Math.sqrt(Mt)),je=yt*Mt,Ze=Tt*Mt,Je=St*Mt,Qe=wt*Mt,Rt=4*T,yt=x[Rt],Tt=x[Rt+1],St=x[Rt+2],wt=x[Rt+3],Mt=yt*yt+Tt*Tt+St*St+wt*wt,Mt>0&&(Mt=1/Math.sqrt(Mt)),$=yt*Mt,q=Tt*Mt,W=St*Mt,ye=wt*Mt,g=je*$+Ze*q+Je*W+Qe*ye,g<0&&(g=-g,$=-$,q=-q,W=-W,ye=-ye),1-g>i?(m=Math.acos(g),_=Math.sin(m),w=Math.sin((1-b)*m)/_,P=Math.sin(b*m)/_):(w=1-b,P=b),yt=w*je+P*$,Tt=w*Ze+P*q,St=w*Je+P*W,wt=w*Qe+P*ye}if(Ct){let i=[],m=[0,0,0],x=yt+yt,_=Tt+Tt,b=St+St,y=yt*x,T=yt*_,w=yt*b,P=Tt*_,H=Tt*b,z=St*b,$=wt*x,q=wt*_,W=wt*b;i[0]=1-(P+z),i[4]=T-W,i[8]=w+q,i[1]=T+W,i[5]=1-(y+z),i[9]=H-$,i[2]=w-q,i[6]=H+$,i[10]=1-(y+P),i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1;let ye=i[0],Ge=i[4],Ke=i[8],Xe=i[5],Ye=i[9],je=i[6],Ze=i[10];m[1]=Math.asin(Math.max(-1,Math.min(1,Ke))),Math.abs(Ke)<.99999?(m[0]=Math.atan2(-Ye,Ze),m[2]=Math.atan2(-Ge,ye)):(m[0]=Math.atan2(je,Xe),m[2]=0),m[0]=-180*m[0]/Math.PI,m[1]=-180*m[1]/Math.PI,m[2]=-180*m[2]/Math.PI,g.rotationX=m[0],g.rotationY=m[1],g.rotationZ=m[2]}},gltfAnimationLooper_scale=(i,m,g,x,_,b,y,T,w,P,H)=>{let z,$,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft;"CUBICSPLINE"==i?b!=x-1&&(ft=9*b,z=g[ft+3],$=g[ft+4],q=g[ft+5],je=g[ft+6],Ze=g[ft+7],Je=g[ft+8],ft=9*y,W=g[ft+0],ye=g[ft+1],Ge=g[ft+2],Ke=g[ft+3],Xe=g[ft+4],Ye=g[ft+5],Qe=Ke,et=je*_,at=z,ht=W*_,m.scaleX=T*Qe+w*et+P*at+H*ht,Qe=Xe,et=Ze*_,at=$,ht=ye*_,m.scaleY=T*Qe+w*et+P*at+H*ht,Qe=Ye,et=Je*_,at=q,ht=Ge*_,m.scaleZ=T*Qe+w*et+P*at+H*ht):(ft=3*y,z=g[ft],$=g[ft+1],q=g[ft+2],ft=3*b,Ke=g[ft],Xe=g[ft+1],Ye=g[ft+2],m.scaleX=Ke+_*(z-Ke),m.scaleY=Xe+_*($-Xe),m.scaleZ=Ye+_*(q-Ye))},gltfAnimationLooper_transition=(i,m,g,x,_,b,y,T,w,P,H)=>{let z,$,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft;"CUBICSPLINE"==i?b!=x-1&&(ft=9*b,z=g[ft+3],$=g[ft+4],q=g[ft+5],je=g[ft+6],Ze=g[ft+7],Je=g[ft+8],ft=9*y,W=g[ft+0],ye=g[ft+1],Ge=g[ft+2],Ke=g[ft+3],Xe=g[ft+4],Ye=g[ft+5],Qe=Ke,et=je*_,at=z,ht=W*_,m.x=T*Qe+w*et+P*at+H*ht,Qe=Xe,et=Ze*_,at=$,ht=ye*_,m.y=T*Qe+w*et+P*at+H*ht,Qe=Ye,et=Je*_,at=q,ht=Ge*_,m.z=T*Qe+w*et+P*at+H*ht):(ft=3*y,z=g[ft],$=g[ft+1],q=g[ft+2],ft=3*b,Ke=g[ft],Xe=g[ft+1],Ye=g[ft+2],m.x=Ke+_*(z-Ke),m.y=Xe+_*($-Xe),m.z=Ye+_*(q-Ye))},gltfAnimationLooper_weight=(i,m,g,x,_)=>{let b,y,T,w,P,H,z,$,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht;const ft=9999991;for(b=i.length;b--;){let gt;for(y=i[b],T=y.geometry.vertexBuffer.data,P=y.geometry.vertexBuffer.stride,z=T.length/P,je=y.animationInfo.morphInfo,w=je.origin,Ze=je.morphInfoDataList,Ye=Ze.length,H=0;H<z;H++){Xe=H*P;let i=Xe*ft+x*ft+_;if(ht=je.cacheData[i],ht)[$,q,W,ye,Ge,Ke]=ht;else{for($=w[Xe],q=w[Xe],W=w[Xe+1],ye=w[Xe+1],Ge=w[Xe+2],Ke=w[Xe+2],Je=Ye;Je--;)Qe=m[x*Ye+Je],et=m[_*Ye+Je],at=Ze[Je].interleaveData,gt=at[Xe],$+=Qe*gt,q+=et*gt,gt=at[Xe+1],W+=Qe*gt,ye+=et*gt,gt=at[Xe+2],Ge+=Qe*gt,Ke+=et*gt;je.cacheData[i]=[$,q,W,ye,Ge,Ke]}T[Xe]=$+g*(q-$),T[Xe+1]=W+g*(ye-W),T[Xe+2]=Ge+g*(Ke-Ge)}y.geometry.vertexBuffer.updateAllData(T)}};class VertexGPURenderInfo{vertexShaderModule;vertexStructInfo;vertexUniformInfo;vertexBindGroupLayout;vertexUniformBindGroup;vertexUniformBuffer;pipeline;shadowPipeline;pickingPipeline;constructor(i,m,g,x,_,b,y,T){this.vertexShaderModule=i,this.vertexUniformInfo=m,this.vertexBindGroupLayout=g,this.vertexUniformBindGroup=_,this.vertexUniformBuffer=x,this.pipeline=b,this.shadowPipeline=y,this.pickingPipeline=T}}Object.freeze(VertexGPURenderInfo);const defineProperty=(i,m,g,x,..._)=>{Object.defineProperty(i.prototype,m,g(m,x,..._))},defineProperties=i=>(m,g)=>{g.forEach(g=>{if(Array.isArray(g)){const[x,_,...b]=g;defineProperty(m,x,i,_,...b)}else defineProperty(m,g,i)})},createDefineByPreset=i=>{const m={};return Object.keys(i).forEach(g=>{const[x,_]=i[g];Object.assign(m,(i=>m=>m.reduce((m,g)=>({...m,[g]:i}),{}))(x)(Object.values(_)))}),{defineByPreset:(i,g)=>((i,m,g)=>{m.forEach(m=>{if(Array.isArray(m)){const[x,_,...b]=m,y=g[x];y||consoleAndThrowError(x,"is a key not defined in Define Preset."),defineProperty(i,x,y,_,...b)}else{const x=g[m];x||consoleAndThrowError(m,"is a key not defined in Define Preset."),defineProperty(i,m,x)}})})(i,g,m)}},_n={enumerable:!0,configurable:!1};function createSetter$5(i,m,g){return function(x){this[m]=x;const{gpuRenderInfo:_}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=_;g.writeBuffer(m.members[i],x?1:0)}else if(_){const{vertexUniformInfo:m,vertexUniformBuffer:g}=_;g.writeBuffer(m.members[i],x?1:0)}}}function defineBoolean(i,m=!1,g=!0){const x=Symbol(i);return{get:function(){return void 0===this[x]&&(this[x]=m),this[x]},set:createSetter$5(i,x,g),..._n}}Object.freeze(_n),Object.freeze(defineBoolean);const validatePositiveNumberRange=(i,m=0,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(m<0||i<0||i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed.`),!0);function createSetter$4(i,m,g,x=0,_){return function(b){void 0!==x&&b<x&&(console.warn(`Value for ${i} is below the minimum (${x}). Received:${b}. Adjusted to ${x}.`),b=x),void 0!==_&&b>_&&(console.warn(`Value for ${i} exceeds the maximum (${_}). Received:${b}. Adjusted to ${_}.`),b=_),validatePositiveNumberRange(b),this[m]=b;const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=y;x.writeBuffer(g.members[i],this[m])}else if(y){const{vertexUniformInfo:g,vertexUniformBuffer:x}=y;x.writeBuffer(g.members[i],this[m])}}}function definePositiveNumberRange(i,m=1,g=!0,x=0,_){const b=Symbol(i);return{get:function(){return void 0===this[b]&&(this[b]=m),this[b]},set:createSetter$4(i,b,g,x,_),..._n}}Object.freeze(definePositiveNumberRange);const isUint=i=>Number.isInteger(i)&&i>=0,validateUintRange=(i,m=0,g=4503599627370496)=>{const x=isUint(i),_=isUint(m),b=isUint(g),y="is not Uint!/value:",T=`(check range:${m}u ~ ${g}u)`;return x||consoleAndThrowError(`value ${y}${i}/${T}`),_||consoleAndThrowError(`min ${y}${m}/${T}`),b||consoleAndThrowError(`max ${y}${g}/${T}`),m>=g&&consoleAndThrowError(`maximum value is bigger than minimum value./${T}`),m>i&&consoleAndThrowError(`value is smaller than minimum value./value:${i}/${T}`),g<i&&consoleAndThrowError(`value is bigger than maximum value./value:${i}/${T}`),!0};function createSetter$3(i,m,g,x=0,_){return function(b){validateUintRange(b),void 0!==x&&b<x&&(console.warn(`Value for ${i} is below the minimum (${x}). Received:${b}. Adjusted to ${x}.`),b=x),void 0!==_&&b>_&&(console.warn(`Value for ${i} exceeds the maximum (${_}). Received:${b}. Adjusted to ${_}.`),b=_),this[m]=b;const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=y;x.writeBuffer(g.members[i],this[m])}else if(y){const{vertexUniformInfo:g,vertexUniformBuffer:x}=y;x.writeBuffer(g.members[i],this[m])}}}function defineUintRange(i,m=0,g=!0,x=0,_){const b=Symbol(i);return{get:function(){return void 0===this[b]&&(this[b]=m),this[b]},set:createSetter$3(i,b,g,x,_),..._n}}function defineProperty_boolean(i,m=!1){return defineBoolean(i,m,!1)}function defineProperty_uintRange(i,m=0,g,x){return defineUintRange(i,m,!1,g,x)}function defineProperty_PositiveNumberRange(i,m=0,g,x){return definePositiveNumberRange(i,m,!1,g,x)}Object.freeze(defineUintRange);const vn={USE_BILLBOARD_PERSPECTIVE:"useBillboardPerspective",USE_BILLBOARD:"useBillboard",RECEIVE_SHADOW:"receiveShadow"},bn={BILLBOARD_FIXED_SCALE:"billboardFixedScale"},yn={},Tn={...createDefineByPreset({defineBoolean:[defineProperty_boolean,vn],defineUint:[defineProperty_uintRange,yn],definePositiveNumber:[defineProperty_PositiveNumberRange,bn]}),defineBoolean:defineProperties(defineProperty_boolean),defineUint:defineProperties(defineProperty_uintRange),definePositiveNumber:defineProperties(defineProperty_PositiveNumberRange),PRESET_BOOLEAN:vn,PRESET_POSITIVE_NUMBER:bn,PRESET_UINT:yn,PRESET_SAMPLER:{},PRESET_TEXTURE:{},PRESET_CUBE_TEXTURE:{},PRESET_VEC2:{},PRESET_VEC3:{},PRESET_VEC4:{},PRESET_COLOR_RGB:{}};Object.freeze(Tn);class AABB{minX;maxX;minY;maxY;minZ;maxZ;centerX;centerY;centerZ;xSize;ySize;zSize;geometryRadius;constructor(i,m,g,x,_,b){this.minX=i,this.maxX=m,this.minY=g,this.maxY=x,this.minZ=_,this.maxZ=b,this.centerX=(m+i)/2,this.centerY=(x+g)/2,this.centerZ=(b+_)/2,this.xSize=m-i,this.ySize=x-g,this.zSize=b-_,this.geometryRadius=Math.sqrt((this.xSize/2)**2+(this.ySize/2)**2+(this.zSize/2)**2)}intersects(i){return i instanceof AABB||consoleAndThrowError("allow only AABB instance"),this.minX<=i.maxX&&this.maxX>=i.minX&&this.minY<=i.maxY&&this.maxY>=i.minY&&this.minZ<=i.maxZ&&this.maxZ>=i.minZ}contains(i,m,g){if(Array.isArray(i)){const[m,g,x]=i;return m>=this.minX&&m<=this.maxX&&g>=this.minY&&g<=this.maxY&&x>=this.minZ&&x<=this.maxZ}return i>=this.minX&&i<=this.maxX&&m>=this.minY&&m<=this.maxY&&g>=this.minZ&&g<=this.maxZ}clone(){return new AABB(this.minX,this.maxX,this.minY,this.maxY,this.minZ,this.maxZ)}}const Sn=create$4(),wn=create$4(),calculateMeshAABB=i=>{if(!i||!i._geometry)return new AABB(0,0,0,0,0,0);const m=i._geometry.volume,{minX:g,maxX:x,minY:_,maxY:b,minZ:y,maxZ:T}=m;if(0===g&&0===x&&0===_&&0===b&&0===y&&0===T)return new AABB(0,0,0,0,0,0);let w=1/0,P=1/0,H=1/0,z=-1/0,$=-1/0,q=-1/0;const W=[[g,_,y],[x,_,y],[x,b,y],[g,b,y],[g,_,T],[x,_,T],[x,b,T],[g,b,T]];for(let m=0;m<8;m++){const g=W[m];set$4(Sn,g[0],g[1],g[2]),transformMat4$2(wn,Sn,i.modelMatrix);const x=wn[0],_=wn[1],b=wn[2];x<w&&(w=x),_<P&&(P=_),b<H&&(H=b),x>z&&(z=x),_>$&&($=_),b>q&&(q=b)}return new AABB(w,z,P,$,H,q)},calculateMeshCombinedAABB=i=>{const m=[];return collectRecursive(i,m),0===m.length?new AABB(0,0,0,0,0,0):calculateCombinedAABBFromAABBs(m)},collectRecursive=(i,m)=>{if(i._geometry){const g=i.boundingAABB;0===g.minX&&0===g.maxX&&0===g.minY&&0===g.maxY&&0===g.minZ&&0===g.maxZ||m.push(g)}if(i.children)for(let g=0;g<i.children.length;g++){const x=i.children[g];x instanceof Mesh&&collectRecursive(x,m)}},calculateCombinedAABBFromAABBs=i=>{if(0===i.length)return new AABB(0,0,0,0,0,0);if(1===i.length)return i[0];let m=1/0,g=1/0,x=1/0,_=-1/0,b=-1/0,y=-1/0;for(let T=0;T<i.length;T++){const w=i[T];w.minX<m&&(m=w.minX),w.minY<g&&(g=w.minY),w.minZ<x&&(x=w.minZ),w.maxX>_&&(_=w.maxX),w.maxY>b&&(b=w.maxY),w.maxZ>y&&(y=w.maxZ)}return new AABB(m,_,g,b,x,y)};class OBB{centerX;centerY;centerZ;halfExtentX;halfExtentY;halfExtentZ;orientation;center;halfExtents;geometryRadius;constructor(i,m,g){this.centerX=i[0],this.centerY=i[1],this.centerZ=i[2],this.halfExtentX=m[0],this.halfExtentY=m[1],this.halfExtentZ=m[2],this.center=[this.centerX,this.centerY,this.centerZ],this.halfExtents=[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation=clone$5(g),this.geometryRadius=Math.sqrt(this.halfExtentX**2+this.halfExtentY**2+this.halfExtentZ**2)}intersects(i){i instanceof OBB||consoleAndThrowError("allow only OBB instance");const m=subtract$2(create$4(),this.center,i.center);if(length$4(m)>this.geometryRadius+i.geometryRadius)return!1;const g=[...this.#x(),...i.#x()];for(const x of g){const g=this.#_(x),_=i.#_(x);if(Math.abs(dot$4(m,x))>g+_)return!1}return!0}contains(i,m,g){let x;x=Array.isArray(i)?fromValues$4(i[0],i[1],i[2]):fromValues$4(i,m,g);const _=subtract$2(create$4(),x,this.center),b=this.#x();for(let i=0;i<3;i++){const m=dot$4(_,b[i]);if(Math.abs(m)>this.halfExtents[i])return!1}return!0}clone(){return new OBB([this.centerX,this.centerY,this.centerZ],[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation)}#x(){return[fromValues$4(this.orientation[0],this.orientation[1],this.orientation[2]),fromValues$4(this.orientation[4],this.orientation[5],this.orientation[6]),fromValues$4(this.orientation[8],this.orientation[9],this.orientation[10])]}#_(i){const m=this.#x();return Math.abs(dot$4(m[0],i))*this.halfExtentX+Math.abs(dot$4(m[1],i))*this.halfExtentY+Math.abs(dot$4(m[2],i))*this.halfExtentZ}}const calculateMeshOBB=i=>{if(!i||!i._geometry){const i=create$5();return new OBB([0,0,0],[0,0,0],i)}const m=i._geometry.volume;if(0===m.minX&&0===m.maxX&&0===m.minY&&0===m.maxY&&0===m.minZ&&0===m.maxZ){const i=create$5();return new OBB([0,0,0],[0,0,0],i)}const g=[m.centerX,m.centerY,m.centerZ],x=[(m.maxX-m.minX)/2,(m.maxY-m.minY)/2,(m.maxZ-m.minZ)/2],_=create$4();transformMat4$2(_,g,i.modelMatrix);const b=create$5();copy$5(b,i.modelMatrix),b[12]=0,b[13]=0,b[14]=0;const y=[create$4(),create$4(),create$4()],T=[0,0,0];for(let i=0;i<3;i++){const m=[0,0,0];m[i]=x[i],transformMat4$2(y[i],m,b),T[i]=length$4(y[i]),normalize$4(y[i],y[i])}const w=create$5();return w[0]=y[0][0],w[1]=y[0][1],w[2]=y[0][2],w[3]=0,w[4]=y[1][0],w[5]=y[1][1],w[6]=y[1][2],w[7]=0,w[8]=y[2][0],w[9]=y[2][1],w[10]=y[2][2],w[11]=0,w[12]=0,w[13]=0,w[14]=0,w[15]=1,new OBB([_[0],_[1],_[2]],T,w)},mat4ToEuler=(i,m,g)=>{m=m||[0,0,0],g=g||"XYZ";let x=i[0],_=i[4],b=i[8],y=i[1],T=i[5],w=i[9],P=i[2],H=i[6],z=i[10];return"XYZ"===g?(m[1]=Math.asin(clamp(b,-1,1)),Math.abs(b)<.99999?(m[0]=Math.atan2(-w,z),m[2]=Math.atan2(-_,x)):(m[0]=Math.atan2(H,T),m[2]=0)):"YXZ"===g?(m[0]=Math.asin(-clamp(w,-1,1)),Math.abs(w)<.99999?(m[1]=Math.atan2(b,z),m[2]=Math.atan2(y,T)):(m[1]=Math.atan2(-P,x),m[2]=0)):"ZXY"===g?(m[0]=Math.asin(clamp(H,-1,1)),Math.abs(H)<.99999?(m[1]=Math.atan2(-P,z),m[2]=Math.atan2(-_,T)):(m[1]=0,m[2]=Math.atan2(y,x))):"ZYX"===g?(m[1]=Math.asin(-clamp(P,-1,1)),Math.abs(P)<.99999?(m[0]=Math.atan2(H,z),m[2]=Math.atan2(y,x)):(m[0]=0,m[2]=Math.atan2(-_,T))):"YZX"===g?(m[2]=Math.asin(clamp(y,-1,1)),Math.abs(y)<.99999?(m[0]=Math.atan2(-w,T),m[1]=Math.atan2(-P,x)):(m[0]=0,m[1]=Math.atan2(b,z))):"XZY"===g&&(m[2]=Math.asin(-clamp(_,-1,1)),Math.abs(_)<.99999?(m[0]=Math.atan2(H,T),m[1]=Math.atan2(b,x)):(m[0]=Math.atan2(-w,z),m[1]=0)),m};let clamp=function(i,m,g){return Math.max(m,Math.min(g,i))};const uuidToUint=i=>{const m=i.replace(/-/g,"").substring(0,8);return parseInt(m,16)};class GeometryGPURenderInfo{buffers;constructor(i){this.buffers=i}}Object.freeze(GeometryGPURenderInfo);const validateRedGPUContext=i=>{if("RedGPUContext"!==i?.constructor?.name){return consoleAndThrowError(`from ${i?.constructor?.name}:requires a RedGPUContext instance,but received:${i}`),!1}return!0},createUUID=()=>{const i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let m,g=0,x=["","","","","-","","","","-","4","","","-","","","","-","","","","","","-","","","","","","","","","","","",""];for(;g<36;)""===x[g]&&(m=16*Math.random()|0,x[g]=i[19===g?3&m|8:15&m]),g++;return x.join("")};class ResourceBase{#v=createUUID();#b;#y;#a="";#e;#T=[];constructor(i){validateRedGPUContext(i),this.#b=i,this.#y=i.gpuDevice}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get uuid(){return this.#v}get gpuDevice(){return this.#y}get redGPUContext(){return this.#b}__addDirtyPipelineListener(i){this.#S(!0),this.#T.push(i)}__removeDirtyPipelineListener(i){const m=this.#T.indexOf(i);m>-1&&(this.#T.splice(m,1),this.#S(!1))}__fireListenerList(i=!1){for(const i of this.#T)i(this);i&&(this.#T.length=0)}#S(i){const{resourceManager:m}=this.#b;if(m){const g=m[`managed${this.constructor.name}State`]?.table?.[this.#v];g&&(i?g.useNum++:g.useNum--)}}}const calculateGeometryAABB=i=>{if(!i||!i.data||0===i.vertexCount)return new AABB(0,0,0,0,0,0);const m=i.stride,g=i.data,x=i.vertexCount;let _=1/0,b=1/0,y=1/0,T=-1/0,w=-1/0,P=-1/0,H=0;for(;H<=x-4;H+=4){let i=H*m;const x=g[i],z=g[i+1],$=g[i+2];i=(H+1)*m;const q=g[i],W=g[i+1],ye=g[i+2];i=(H+2)*m;const Ge=g[i],Ke=g[i+1],Xe=g[i+2];i=(H+3)*m;const Ye=g[i],je=g[i+1],Ze=g[i+2];x<_&&(_=x),q<_&&(_=q),Ge<_&&(_=Ge),Ye<_&&(_=Ye),x>T&&(T=x),q>T&&(T=q),Ge>T&&(T=Ge),Ye>T&&(T=Ye),z<b&&(b=z),W<b&&(b=W),Ke<b&&(b=Ke),je<b&&(b=je),z>w&&(w=z),W>w&&(w=W),Ke>w&&(w=Ke),je>w&&(w=je),$<y&&(y=$),ye<y&&(y=ye),Xe<y&&(y=Xe),Ze<y&&(y=Ze),$>P&&(P=$),ye>P&&(P=ye),Xe>P&&(P=Xe),Ze>P&&(P=Ze)}for(;H<x;H++){const i=H*m,x=g[i],z=g[i+1],$=g[i+2];x<_&&(_=x),z<b&&(b=z),$<y&&(y=$),x>T&&(T=x),z>w&&(w=z),$>P&&(P=$)}return new AABB(_,T,b,w,y,P)};class Geometry extends ResourceBase{gpuRenderInfo;#w;#M;#R;constructor(i,m,g){super(i),this.#C(m),this.#P(g);const{interleavedStruct:x}=this.#w;this.gpuRenderInfo=new GeometryGPURenderInfo([{arrayStride:x.arrayStride,attributes:x.attributes}])}get vertexBuffer(){return this.#w}get indexBuffer(){return this.#M}get volume(){return this.#R||(this.#R=calculateGeometryAABB(this.#w)),this.#R}#C(i){const m=this.#w;this.#w=i,m&&m.__removeDirtyPipelineListener(this.#E),i&&i.__addDirtyPipelineListener(this.#E),this.#R=null}#P(i){const m=this.#M;this.#M=i,m&&m.__removeDirtyPipelineListener(this.#I),i&&i.__addDirtyPipelineListener(this.#I)}#E(){this.__fireListenerList()}#I(){this.__fireListenerList()}}Object.freeze(Geometry);const Mn={POINT_LIST:"point-list",LINE_LIST:"line-list",LINE_STRIP:"line-strip",TRIANGLE_LIST:"triangle-list",TRIANGLE_STRIP:"triangle-strip"};Object.freeze(Mn);const isHexColor=i=>{const m=/^([A-Fa-f0-9]{3}){1,2}$/;return i.startsWith("#")?m.test(i.substring(1)):!!i.startsWith("0x")&&m.test(i.substring(2))},convertHexToRgb=(i,m=!1)=>{if("number"==typeof i&&(i=`#${i.toString(16)}`),isHexColor(i)){"#"===i.charAt(0)&&(i=i.substring(1)),3===i.length&&(i=i.charAt(0)+i.charAt(0)+i.charAt(1)+i.charAt(1)+i.charAt(2)+i.charAt(2));const g=parseInt("0x"+i),x=g>>16&255,_=g>>8&255,b=255&g;return m?[x,_,b]:{r:x,g:_,b:b}}throw Error(`from ${convertHexToRgb.constructor.name}:input value - ${i}/Only hex string allowed`)},convertRgbToHex=(i,m,g)=>{validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255);return`#${i.toString(16).padStart(2,"0").toUpperCase()}${m.toString(16).padStart(2,"0").toUpperCase()}${g.toString(16).padStart(2,"0").toUpperCase()}`};class ColorRGB{#B;#L;#D;#U;constructor(i=255,m=255,g=255,x=void 0){this.#A(i,m,g),this.#k(i,m,g),x&&(this.#U=x)}get r(){return this.#B}set r(i){validateUintRange(i,0,255),this.#B=i,this.#U?.()}get g(){return this.#L}set g(i){validateUintRange(i,0,255),this.#L=i,this.#U?.()}get b(){return this.#D}set b(i){validateUintRange(i,0,255),this.#D=i,this.#U?.()}get rgb(){return[this.#B,this.#L,this.#D]}get rgbNormal(){return[this.#B/255,this.#L/255,this.#D/255]}get hex(){return convertRgbToHex(this.#B,this.#L,this.#D)}setColorByRGB(i,m,g){this.#A(i,m,g),this.#k(i,m,g)}setColorByHEX(i){const{r:m,g:g,b:x}=convertHexToRgb(i);this.#k(m,g,x)}setColorByRGBString(i){const m=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(i);m||consoleAndThrowError(`Invalid rgb color value:${i}`);const[,g,x,_]=m.map(Number);this.#A(g,x,_),this.#k(g,x,_)}#k(i,m,g){this.#B=i,this.#L=m,this.#D=g,this.#U?.()}#A(i,m,g){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255)}}function defineColorRGB(i,m="#fff",g=!0){const x=Symbol(i);return{get:function(){if(void 0===this[x]){let _=255,b=255,y=255;if(isHexColor(m)){const i=convertHexToRgb(m);_=i.r,b=i.g,y=i.b}this[x]=new ColorRGB(_,b,y,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=m;_.writeBuffer(g.members[i],this[x].rgbNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:_}=m;_.writeBuffer(g.members[i],this[x].rgbNormal)}})}return this[x]},..._n}}Object.freeze(defineColorRGB);class ColorRGBA extends ColorRGB{#O;#U;constructor(i=255,m=255,g=255,x=1,_=void 0){super(i,m,g,_),validatePositiveNumberRange(x,0,1),this.#O=x,_&&(this.#U=_)}get a(){return this.#O}set a(i){validatePositiveNumberRange(i,0,1),this.#O=i,this.#U?.()}get rgba(){return[this.r,this.g,this.b,this.#O]}get rgbaNormal(){return[this.r/255,this.g/255,this.b/255,this.#O]}setColorByRGBA(i,m,g,x){this.#F(i,m,g,x),this.r=i,this.g=m,this.b=g,this.#O=x,this.#U?.()}setColorByRGBAString(i){const m=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d*(?:\.\d+)?)\s*\)/.exec(i);if(!m)throw new Error(`Invalid rgba color value:${i}`);const[,g,x,_,b]=m.map(Number);this.#F(g,x,_,b),this.r=g,this.g=x,this.b=_,this.#O=b,this.#U?.()}#F(i,m,g,x){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255),validatePositiveNumberRange(x,0,1)}}function defineColorRGBA(i,m="#fff",g=!0){const x=Symbol(i);return{get:function(){if(void 0===this[x]){let _=255,b=255,y=255,T=1;if(isHexColor(m)){const i=convertHexToRgb(m);_=i.r,b=i.g,y=i.b}this[x]=new ColorRGBA(_,b,y,T,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=m;_.writeBuffer(g.members[i],this[x].rgbaNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:_}=m;_.writeBuffer(g.members[i],this[x].rgbaNormal)}})}return this[x]},..._n}}function createSetter$2(i,m,g){const x=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const _=this[m];this[m]=i,this.updateTexture(_,i);const{gpuRenderInfo:b}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=b;m.members[x]&&g.writeBuffer(m.members[x],i?1:0)}else if(b){const{vertexUniformInfo:m,vertexUniformBuffer:g}=b;m.members[x]&&g.writeBuffer(g.members[x],i?1:0)}}}function defineCubeTexture(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter$2(i,g,m),..._n}}function defineSampler(i){const m=Symbol(i);return{get:function(){return this[m]},set:function(i){const g=this[m];this[m]=i,this.updateSampler(g,i)},..._n}}function createSetter$1(i,m,g){const x=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`,_=`premultiply${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const b=this[m];this[m]=i,this.updateTexture(b,i);const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=y;m.members[x]&&g.writeBuffer(m.members[x],i?1:0),m.members[_]&&g.writeBuffer(m.members[_],i?.usePremultiplyAlpha?1:0)}else if(y){const{vertexUniformInfo:m,vertexUniformBuffer:g}=y;m.members[x]&&g.writeBuffer(g.members[x],i?1:0)}}}function defineTexture$1(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter$1(i,g,m),..._n}}function createSetter(i,m,g){return function(x){this[m]=x;const{gpuRenderInfo:_}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=_;g.writeBuffer(m.members[i],x)}else if(_){const{vertexUniformInfo:m,vertexUniformBuffer:g}=_;g.writeBuffer(m.members[i],x)}}}function defineVector(i,m,g=!0){const x=Symbol(i);return{get:function(){return void 0===this[x]&&(this[x]=m),this[x]},set:createSetter(i,x,g),..._n}}function defineProperty_vec4(i,m=[0,0,0,0]){return defineVector(i,m)}function defineProperty_vec3(i,m=[0,0,0]){return defineVector(i,m)}function defineProperty_vec2(i,m=[0,0]){return defineVector(i,m)}Object.freeze(defineColorRGBA),Object.freeze(defineCubeTexture),Object.freeze(defineSampler),Object.freeze(defineTexture$1),Object.freeze(defineVector);const Rn={},Cn={AO_STRENGTH:"aoStrength",SPECULAR_STRENGTH:"specularStrength",EMISSIVE_STRENGTH:"emissiveStrength",OPACITY:"opacity",SHININESS:"shininess",NORMAL_SCALE:"normalScale"},Pn={},En={ALPHA_TEXTURE_SAMPLER:"alphaTextureSampler",AO_TEXTURE_SAMPLER:"aoTextureSampler",DIFFUSE_TEXTURE_SAMPLER:"diffuseTextureSampler",EMISSIVE_TEXTURE_SAMPLER:"emissiveTextureSampler",ENVIRONMENT_TEXTURE_SAMPLER:"environmentTextureSampler",NORMAL_TEXTURE_SAMPLER:"normalTextureSampler",SPECULAR_TEXTURE_SAMPLER:"specularTextureSampler"},In={ENVIRONMENT_TEXTURE:"environmentTexture"},Bn={},Ln={},Dn={},Un={ALPHA_TEXTURE:"alphaTexture",AO_TEXTURE:"aoTexture",DIFFUSE_TEXTURE:"diffuseTexture",EMISSIVE_TEXTURE:"emissiveTexture",NORMAL_TEXTURE:"normalTexture",SPECULAR_TEXTURE:"specularTexture"},An={COLOR:"color",EMISSIVE_COLOR:"emissiveColor",SPECULAR_COLOR:"specularColor"},kn={...createDefineByPreset({defineBoolean:[defineBoolean,Rn],definePositiveNumber:[definePositiveNumberRange,Cn],defineUint:[defineUintRange,Pn],defineVec2:[defineProperty_vec2,Bn],defineVec3:[defineProperty_vec3,Ln],defineVec4:[defineProperty_vec4,Dn],defineColorRGB:[defineColorRGB,An],defineSampler:[defineSampler,En],defineTexture:[defineTexture$1,Un],defineCubeTexture:[defineCubeTexture,In]}),defineBoolean:defineProperties(defineBoolean),definePositiveNumber:defineProperties(definePositiveNumberRange),defineUint:defineProperties(defineUintRange),defineVec2:defineProperties(defineProperty_vec2),defineVec3:defineProperties(defineProperty_vec3),defineVec4:defineProperties(defineProperty_vec4),defineColorRGB:defineProperties(defineColorRGB),defineColorRGBA:defineProperties(defineColorRGBA),defineSampler:defineProperties(defineSampler),defineTexture:defineProperties(defineTexture$1),defineCubeTexture:defineProperties(defineCubeTexture),PRESET_BOOLEAN:Rn,PRESET_POSITIVE_NUMBER:Cn,PRESET_UINT:Pn,PRESET_SAMPLER:En,PRESET_TEXTURE:Un,PRESET_CUBE_TEXTURE:In,PRESET_VEC2:Bn,PRESET_VEC3:Ln,PRESET_VEC4:Dn,PRESET_COLOR_RGB:An};Object.freeze(kn);class e{constructor(i,m){this.name=i,this.attributes=m,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}get isPointer(){return!1}getTypeName(){return this.name}}class t{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class n extends e{constructor(i,m){super(i,m),this.members=[],this.align=0,this.startLine=-1,this.endLine=-1,this.inUse=!1}get isStruct(){return!0}}class s extends e{constructor(i,m){super(i,m),this.count=0,this.stride=0}get isArray(){return!0}getTypeName(){return`array<${this.format.getTypeName()},${this.count}>`}}class r extends e{constructor(i,m,g){super(i,g),this.format=m}get isPointer(){return!0}getTypeName(){return`&${this.format.getTypeName()}`}}class a extends e{constructor(i,m,g,x){super(i,g),this.format=m,this.access=x}get isTemplate(){return!0}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}var On;(i=>{i[i.Uniform=0]="Uniform",i[i.Storage=1]="Storage",i[i.Texture=2]="Texture",i[i.Sampler=3]="Sampler",i[i.StorageTexture=4]="StorageTexture"})(On||(On={}));class o{constructor(i,m,g,x,_,b,y){this.name=i,this.type=m,this.group=g,this.binding=x,this.attributes=_,this.resourceType=b,this.access=y}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class l{constructor(i,m){this.name=i,this.type=m}}class c{constructor(i,m,g,x){this.name=i,this.type=m,this.locationType=g,this.location=x,this.interpolation=null}}class u{constructor(i,m,g,x){this.name=i,this.type=m,this.locationType=g,this.location=x}}class h{constructor(i,m,g,x){this.name=i,this.type=m,this.attributes=g,this.id=x}}class f{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g}}class p{constructor(i,m=null,g){this.stage=null,this.inputs=[],this.outputs=[],this.arguments=[],this.returnType=null,this.resources=[],this.overrides=[],this.startLine=-1,this.endLine=-1,this.inUse=!1,this.calls=new Set,this.name=i,this.stage=m,this.attributes=g}}class d{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}const Fn=new Float32Array(1),Nn=new Int32Array(Fn.buffer),Gn=new Uint16Array(1);function x$1(i){Fn[0]=i;const m=Nn[0],g=m>>31&1;let x=m>>23&255,_=8388607&m;if(255===x)return Gn[0]=g<<15|31744|(0!==_?512:0),Gn[0];if(0===x){if(0===_)return Gn[0]=g<<15,Gn[0];_|=8388608;let i=113;for(;!(8388608&_);)_<<=1,i--;return x=127-i,_&=8388607,x>0?(_=(_>>126-x)+(_>>127-x&1),Gn[0]=g<<15|x<<10|_>>13,Gn[0]):(Gn[0]=g<<15,Gn[0])}return x=x-127+15,x>=31?(Gn[0]=g<<15|31744,Gn[0]):x<=0?x<-10?(Gn[0]=g<<15,Gn[0]):(_=(8388608|_)>>1-x,Gn[0]=g<<15|_>>13,Gn[0]):(_>>=13,Gn[0]=g<<15|x<<10|_,Gn[0])}const Vn=new Uint32Array(1),Hn=new Float32Array(Vn.buffer,0,1);function v(i){const m=112+(i>>6&31)<<23|(63&i)<<17;return Vn[0]=m,Hn[0]}function k(i,m,g,x){const _=[0,0,0,0];for(let P=0;P<x;++P)switch(g){case"8unorm":_[P]=i[m]/255,m++;break;case"8snorm":_[P]=i[m]/255*2-1,m++;break;case"8uint":_[P]=i[m],m++;break;case"8sint":_[P]=i[m]-127,m++;break;case"16uint":_[P]=i[m]|i[m+1]<<8,m+=2;break;case"16sint":_[P]=(i[m]|i[m+1]<<8)-32768,m+=2;break;case"16float":_[P]=(void 0,void 0,void 0,y=(32768&(b=i[m]|i[m+1]<<8))>>15,w=1023&b,0==(T=(31744&b)>>10)?(y?-1:1)*Math.pow(2,-14)*(w/Math.pow(2,10)):31==T?w?NaN:1/0*(y?-1:1):(y?-1:1)*Math.pow(2,T-15)*(1+w/Math.pow(2,10))),m+=2;break;case"32uint":case"32sint":_[P]=i[m]|i[m+1]<<8|i[m+2]<<16|i[m+3]<<24,m+=4;break;case"32float":_[P]=new Float32Array(i.buffer,m,1)[0],m+=4}var b,y,T,w;return _}function I(i,m,g,x,_){for(let b=0;b<x;++b)switch(g){case"8unorm":i[m]=255*_[b],m++;break;case"8snorm":i[m]=.5*(_[b]+1)*255,m++;break;case"8uint":i[m]=_[b],m++;break;case"8sint":i[m]=_[b]+127,m++;break;case"16uint":new Uint16Array(i.buffer,m,1)[0]=_[b],m+=2;break;case"16sint":new Int16Array(i.buffer,m,1)[0]=_[b],m+=2;break;case"16float":{const g=x$1(_[b]);new Uint16Array(i.buffer,m,1)[0]=g,m+=2;break}case"32uint":new Uint32Array(i.buffer,m,1)[0]=_[b],m+=4;break;case"32sint":new Int32Array(i.buffer,m,1)[0]=_[b],m+=4;break;case"32float":new Float32Array(i.buffer,m,1)[0]=_[b],m+=4}return _}const zn={r8unorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8snorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8uint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8sint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg8unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8snorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"rgba8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8snorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},bgra8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bgra8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r16uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16float:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg16uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba16uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r32uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg32uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba32uint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32sint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32float:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rg11b10ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},stencil8:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!1,hasStencil:!0,channels:1},depth16unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},depth24plus:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,depthOnlyFormat:"depth32float",channels:1},"depth24plus-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,depthOnlyFormat:"depth32float",channels:1},depth32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},"depth32float-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,stencilOnlyFormat:"depth32float",channels:1},rgb9e5ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bc1-rgba-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc1-rgba-unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc4-r-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc4-r-snorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc5-rg-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc5-rg-snorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc6h-rgb-ufloat":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc6h-rgb-float":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"eac-r11unorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-r11snorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-rg11unorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"eac-rg11snorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"astc-4x4-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-4x4-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x5-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-5x5-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x6-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-6x6-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-8x5-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x5-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x6-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x6-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x8-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-8x8-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-10x5-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x5-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x6-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x6-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x8-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x8-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x10-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-10x10-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x12-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4},"astc-12x12-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4}};class S{constructor(){this.id=S._id++,this.line=0}get isAstNode(){return!0}get astNodeType(){return""}search(i){i(this)}searchBlock(i,m){if(i){m(A.instance);for(const g of i)g instanceof Array?this.searchBlock(g,m):g.search(m);m(E.instance)}}constEvaluate(i,m){throw new Error("Cannot evaluate node")}constEvaluateString(i){return this.constEvaluate(i).toString()}}S._id=0;class A extends S{}A.instance=new A;class E extends S{}E.instance=new E;const $n=new Set(["all","all","any","select","arrayLength","abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","clamp","cos","cosh","countLeadingZeros","countOneBits","countTrailingZeros","cross","degrees","determinant","distance","dot","dot4U8Packed","dot4I8Packed","exp","exp2","extractBits","faceForward","firstLeadingBit","firstTrailingBit","floor","fma","fract","frexp","insertBits","inverseSqrt","ldexp","length","log","log2","max","min","mix","modf","normalize","pow","quantizeToF16","radians","reflect","refract","reverseBits","round","saturate","sign","sin","sinh","smoothStep","sqrt","step","tan","tanh","transpose","trunc","dpdx","dpdxCoarse","dpdxFine","dpdy","dpdyCoarse","dpdyFine","fwidth","fwidthCoarse","fwidthFine","textureDimensions","textureGather","textureGatherCompare","textureLoad","textureNumLayers","textureNumLevels","textureNumSamples","textureSample","textureSampleBias","textureSampleCompare","textureSampleCompareLevel","textureSampleGrad","textureSampleLevel","textureSampleBaseClampToEdge","textureStore","atomicLoad","atomicStore","atomicAdd","atomicSub","atomicMax","atomicMin","atomicAnd","atomicOr","atomicXor","atomicExchange","atomicCompareExchangeWeak","pack4x8snorm","pack4x8unorm","pack4xI8","pack4xU8","pack4x8Clamp","pack4xU8Clamp","pack2x16snorm","pack2x16unorm","pack2x16float","unpack4x8snorm","unpack4x8unorm","unpack4xI8","unpack4xU8","unpack2x16snorm","unpack2x16unorm","unpack2x16float","storageBarrier","textureBarrier","workgroupBarrier","workgroupUniformLoad","subgroupAdd","subgroupExclusiveAdd","subgroupInclusiveAdd","subgroupAll","subgroupAnd","subgroupAny","subgroupBallot","subgroupBroadcast","subgroupBroadcastFirst","subgroupElect","subgroupMax","subgroupMin","subgroupMul","subgroupExclusiveMul","subgroupInclusiveMul","subgroupOr","subgroupShuffle","subgroupShuffleDown","subgroupShuffleUp","subgroupShuffleXor","subgroupXor","quadBroadcast","quadSwapDiagonal","quadSwapX","quadSwapY"]);class L extends S{constructor(){super()}}class C extends L{constructor(i,m,g,x,_,b){super(),this.calls=new Set,this.name=i,this.args=m,this.returnType=g,this.body=x,this.startLine=_,this.endLine=b}get astNodeType(){return"function"}search(i){if(this.attributes)for(const m of this.attributes)i(m);i(this);for(const m of this.args)i(m);this.searchBlock(this.body,i)}}class D extends L{constructor(i){super(),this.expression=i}get astNodeType(){return"staticAssert"}search(i){this.expression.search(i)}}class N extends L{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"while"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class V extends L{constructor(i,m){super(),this.body=i,this.loopId=m}get astNodeType(){return"continuing"}search(i){this.searchBlock(this.body,i)}}class O extends L{constructor(i,m,g,x){super(),this.init=i,this.condition=m,this.increment=g,this.body=x}get astNodeType(){return"for"}search(i){var m,g,x;null===(m=this.init)||void 0===m||m.search(i),null===(g=this.condition)||void 0===g||g.search(i),null===(x=this.increment)||void 0===x||x.search(i),this.searchBlock(this.body,i)}}class B extends L{constructor(i,m,g,x,_){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=x,this.value=_}get astNodeType(){return"var"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class F extends L{constructor(i,m,g){super(),this.attributes=null,this.name=i,this.type=m,this.value=g}get astNodeType(){return"override"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class M extends L{constructor(i,m,g,x,_){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=x,this.value=_}get astNodeType(){return"let"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class U extends L{constructor(i,m,g,x,_){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=x,this.value=_}get astNodeType(){return"const"}constEvaluate(i,m){return this.value.constEvaluate(i,m)}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}var qn,Kn,Wn,Xn;(i=>{i.increment="++",i.decrement="--"})(qn||(qn={})),(i=>{i.parse=function(m){const g=m;if("parse"==g)throw new Error("Invalid value for IncrementOperator");return i[g]}})(qn||(qn={}));let Yn=class extends L{constructor(i,m){super(),this.operator=i,this.variable=m}get astNodeType(){return"increment"}search(i){this.variable.search(i)}};(i=>{i.assign="=",i.addAssign="+=",i.subtractAssin="-=",i.multiplyAssign="*=",i.divideAssign="/=",i.moduloAssign="%=",i.andAssign="&=",i.orAssign="|=",i.xorAssign="^=",i.shiftLeftAssign="<<=",i.shiftRightAssign=">>="})(Kn||(Kn={})),(Kn||(Kn={})).parse=function(i){const m=i;if("parse"==m)throw new Error("Invalid value for AssignOperator");return m};class R extends L{constructor(i,m,g){super(),this.operator=i,this.variable=m,this.value=g}get astNodeType(){return"assign"}search(i){this.variable.search(i),this.value.search(i)}}class G extends L{constructor(i,m){super(),this.name=i,this.args=m}get astNodeType(){return"call"}isBuiltin(){return $n.has(this.name)}search(i){for(const m of this.args)m.search(i);i(this)}}class X extends L{constructor(i,m){super(),this.body=i,this.continuing=m}get astNodeType(){return"loop"}}class j extends L{constructor(i,m){super(),this.condition=i,this.cases=m}get astNodeType(){return"switch"}search(i){i(this);for(const m of this.cases)m.search(i)}}class Z extends L{constructor(i,m,g,x){super(),this.condition=i,this.body=m,this.elseif=g,this.else=x}get astNodeType(){return"if"}search(i){this.condition.search(i),this.searchBlock(this.body,i),this.searchBlock(this.elseif,i),this.searchBlock(this.else,i)}}class Q extends L{constructor(i){super(),this.value=i}get astNodeType(){return"return"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class Y extends L{constructor(i){super(),this.name=i}get astNodeType(){return"enable"}}class K extends L{constructor(i){super(),this.extensions=i}get astNodeType(){return"requires"}}class J extends L{constructor(i,m){super(),this.severity=i,this.rule=m}get astNodeType(){return"diagnostic"}}class ee extends L{constructor(i,m){super(),this.name=i,this.type=m}get astNodeType(){return"alias"}}class te extends L{constructor(){super()}get astNodeType(){return"discard"}}class ne extends L{constructor(){super(),this.condition=null,this.loopId=-1}get astNodeType(){return"break"}}class se extends L{constructor(){super(),this.loopId=-1}get astNodeType(){return"continue"}}class re extends L{constructor(i){super(),this.attributes=null,this.name=i}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}static maxFormatType(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const x=re._priority.get(m.name);re._priority.get(i[g].name)<x&&(m=i[g])}return"x32"===m.name?re.i32:m}getTypeName(){return this.name}}re.x32=new re("x32"),re.f32=new re("f32"),re.i32=new re("i32"),re.u32=new re("u32"),re.f16=new re("f16"),re.bool=new re("bool"),re.void=new re("void"),re._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class ae extends re{constructor(i){super(i)}}class ie extends re{constructor(i,m,g,x){super(i),this.members=m,this.startLine=g,this.endLine=x}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(i){for(let m=0;m<this.members.length;m++)if(this.members[m].name==i)return m;return-1}search(i){for(const m of this.members)i(m)}}class oe extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"template"}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}oe.vec2f=new oe("vec2",re.f32,null),oe.vec3f=new oe("vec3",re.f32,null),oe.vec4f=new oe("vec4",re.f32,null),oe.vec2i=new oe("vec2",re.i32,null),oe.vec3i=new oe("vec3",re.i32,null),oe.vec4i=new oe("vec4",re.i32,null),oe.vec2u=new oe("vec2",re.u32,null),oe.vec3u=new oe("vec3",re.u32,null),oe.vec4u=new oe("vec4",re.u32,null),oe.vec2h=new oe("vec2",re.f16,null),oe.vec3h=new oe("vec3",re.f16,null),oe.vec4h=new oe("vec4",re.f16,null),oe.vec2b=new oe("vec2",re.bool,null),oe.vec3b=new oe("vec3",re.bool,null),oe.vec4b=new oe("vec4",re.bool,null),oe.mat2x2f=new oe("mat2x2",re.f32,null),oe.mat2x3f=new oe("mat2x3",re.f32,null),oe.mat2x4f=new oe("mat2x4",re.f32,null),oe.mat3x2f=new oe("mat3x2",re.f32,null),oe.mat3x3f=new oe("mat3x3",re.f32,null),oe.mat3x4f=new oe("mat3x4",re.f32,null),oe.mat4x2f=new oe("mat4x2",re.f32,null),oe.mat4x3f=new oe("mat4x3",re.f32,null),oe.mat4x4f=new oe("mat4x4",re.f32,null),oe.mat2x2h=new oe("mat2x2",re.f16,null),oe.mat2x3h=new oe("mat2x3",re.f16,null),oe.mat2x4h=new oe("mat2x4",re.f16,null),oe.mat3x2h=new oe("mat3x2",re.f16,null),oe.mat3x3h=new oe("mat3x3",re.f16,null),oe.mat3x4h=new oe("mat3x4",re.f16,null),oe.mat4x2h=new oe("mat4x2",re.f16,null),oe.mat4x3h=new oe("mat4x3",re.f16,null),oe.mat4x4h=new oe("mat4x4",re.f16,null),oe.mat2x2i=new oe("mat2x2",re.i32,null),oe.mat2x3i=new oe("mat2x3",re.i32,null),oe.mat2x4i=new oe("mat2x4",re.i32,null),oe.mat3x2i=new oe("mat3x2",re.i32,null),oe.mat3x3i=new oe("mat3x3",re.i32,null),oe.mat3x4i=new oe("mat3x4",re.i32,null),oe.mat4x2i=new oe("mat4x2",re.i32,null),oe.mat4x3i=new oe("mat4x3",re.i32,null),oe.mat4x4i=new oe("mat4x4",re.i32,null),oe.mat2x2u=new oe("mat2x2",re.u32,null),oe.mat2x3u=new oe("mat2x3",re.u32,null),oe.mat2x4u=new oe("mat2x4",re.u32,null),oe.mat3x2u=new oe("mat3x2",re.u32,null),oe.mat3x3u=new oe("mat3x3",re.u32,null),oe.mat3x4u=new oe("mat3x4",re.u32,null),oe.mat4x2u=new oe("mat4x2",re.u32,null),oe.mat4x3u=new oe("mat4x3",re.u32,null),oe.mat4x4u=new oe("mat4x4",re.u32,null);class le extends re{constructor(i,m,g,x){super(i),this.storage=m,this.type=g,this.access=x}get astNodeType(){return"pointer"}}class ce extends re{constructor(i,m,g,x){super(i),this.attributes=m,this.format=g,this.count=x}get astNodeType(){return"array"}get isArray(){return!0}}class ue extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"sampler"}}class he extends S{constructor(){super(),this.postfix=null}}class fe extends he{constructor(i){super(),this.value=i}get astNodeType(){return"stringExpr"}toString(){return this.value}constEvaluateString(){return this.value}}class pe extends he{constructor(i,m){super(),this.type=i,this.args=m}get astNodeType(){return"createExpr"}search(i){if(i(this),this.args)for(const m of this.args)m.search(i)}constEvaluate(i,m){return m&&(m[0]=this.type),i.evalExpression(this,i.context)}}class de extends he{constructor(i,m){super(),this.cachedReturnValue=null,this.name=i,this.args=m}get astNodeType(){return"callExpr"}setCachedReturnValue(i){this.cachedReturnValue=i}get isBuiltin(){return $n.has(this.name)}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){for(const m of this.args)m.search(i);i(this)}}class me extends he{constructor(i){super(),this.name=i}get astNodeType(){return"varExpr"}search(i){i(this),this.postfix&&this.postfix.search(i)}constEvaluate(i,m){return i.evalExpression(this,i.context)}}class _e extends he{constructor(i,m){super(),this.name=i,this.initializer=m}get astNodeType(){return"constExpr"}constEvaluate(i,m){if(this.initializer){const m=i.evalExpression(this.initializer,i.context);return null!==m&&this.postfix?m.getSubData(i,this.postfix,i.context):m}return null}search(i){this.initializer.search(i)}}class ge extends he{constructor(i,m){super(),this.value=i,this.type=m}get astNodeType(){return"literalExpr"}constEvaluate(i,m){return void 0!==m&&(m[0]=this.type),this.value}get isScalar(){return this.value instanceof Oe}get isVector(){return this.value instanceof Fe||this.value instanceof Me}get scalarValue(){return this.value instanceof Oe?this.value.value:(console.error("Value is not scalar."),0)}get vectorValue(){return this.value instanceof Fe||this.value instanceof Me?this.value.data:(console.error("Value is not a vector or matrix."),new Float32Array(0))}}class xe extends he{constructor(i,m){super(),this.type=i,this.value=m}get astNodeType(){return"bitcastExpr"}search(i){this.value.search(i)}}class be extends he{constructor(i){super(),this.index=i}search(i){this.index.search(i)}}class ve extends he{constructor(){super()}}class we extends ve{constructor(i,m){super(),this.operator=i,this.right=m}get astNodeType(){return"unaryOp"}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.right.search(i)}}class ke extends ve{constructor(i,m,g){super(),this.operator=i,this.left=m,this.right=g}get astNodeType(){return"binaryOp"}_getPromotedType(i,m){return i.name===m.name?i:"f32"===i.name||"f32"===m.name?re.f32:"u32"===i.name||"u32"===m.name?re.u32:re.i32}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.left.search(i),this.right.search(i)}}class Ie extends S{constructor(i){super(),this.body=i}search(i){i(this),this.searchBlock(this.body,i)}}class Te extends he{constructor(){super()}get astNodeType(){return"default"}}class Se extends Ie{constructor(i,m){super(m),this.selectors=i}get astNodeType(){return"case"}search(i){this.searchBlock(this.body,i)}}class Ae extends Ie{constructor(i){super(i)}get astNodeType(){return"default"}search(i){this.searchBlock(this.body,i)}}class Ee extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"argument"}}class $e extends S{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"elseif"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class Le extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"member"}}class Ce extends S{constructor(i,m){super(),this.name=i,this.value=m}get astNodeType(){return"attribute"}}class De{constructor(i,m){this.parent=null,this.typeInfo=i,this.parent=m,this.id=De._id++}clone(){throw`Clone:Not implemented for ${this.constructor.name}`}setDataValue(i,m,g,x){console.error(`SetDataValue:Not implemented for ${this.constructor.name}`)}getSubData(i,m,g){return console.error(`GetDataValue:Not implemented for ${this.constructor.name}`),null}toString(){return`<${this.typeInfo.getTypeName()}>`}}De._id=0;class Ne extends De{constructor(){super(new e("void",null),null)}toString(){return"void"}}Ne.void=new Ne;class Ve extends De{constructor(i){super(new r("pointer",i.typeInfo,null),null),this.reference=i}clone(){return this}setDataValue(i,m,g,x){this.reference.setDataValue(i,m,g,x)}getSubData(i,m,g){return m?this.reference.getSubData(i,m,g):this}toString(){return`&${this.reference.toString()}`}}class Oe extends De{constructor(i,m,g=null){super(m,g),i instanceof Int32Array||i instanceof Uint32Array||i instanceof Float32Array?this.data=i:"x32"===this.typeInfo.name?i-Math.floor(i)!=0?this.data=new Float32Array([i]):this.data=i>=0?new Uint32Array([i]):new Int32Array([i]):"i32"===this.typeInfo.name||"bool"===this.typeInfo.name?this.data=new Int32Array([i]):"u32"===this.typeInfo.name?this.data=new Uint32Array([i]):"f32"===this.typeInfo.name||"f16"===this.typeInfo.name?this.data=new Float32Array([i]):console.error("ScalarData2:Invalid type",m)}clone(){if(this.data instanceof Float32Array)return new Oe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Oe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Oe(new Uint32Array(this.data),this.typeInfo,null);throw"ScalarData:Invalid data type"}get value(){return this.data[0]}set value(i){this.data[0]=i}setDataValue(i,m,g,x){if(g)return void console.error("SetDataValue:Scalar data does not support postfix",g);if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);let _=m.data[0];"i32"===this.typeInfo.name||"u32"===this.typeInfo.name?_=Math.floor(_):"bool"===this.typeInfo.name&&(_=_?1:0),this.data[0]=_}getSubData(i,m,g){return m?(console.error("getSubData:Scalar data does not support postfix",m),null):this}toString(){return`${this.value}`}}function Be(i,m,g){const x=m.length;return 2===x?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec2i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec2u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2h")):(console.error(`getSubData:Unknown format ${g}`),null):3===x?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec3i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec3u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3h")):(console.error(`getSubData:Unknown format ${g}`),null):4===x?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec4i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec4u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4h")):(console.error(`getSubData:Unknown format ${g}`),null):(console.error(`getSubData:Invalid vector size ${m.length}`),null)}class Fe extends De{constructor(i,m,g=null){if(super(m,g),i instanceof Float32Array||i instanceof Uint32Array||i instanceof Int32Array)this.data=i;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?this.data=new Float32Array(i):"vec2i"===m||"vec3i"===m||"vec4i"===m?this.data=new Int32Array(i):"vec2u"===m||"vec3u"===m||"vec4u"===m?this.data=new Uint32Array(i):"vec2h"===m||"vec3h"===m||"vec4h"===m?this.data=new Float32Array(i):"vec2b"===m||"vec3b"===m||"vec4b"===m?this.data=new Int32Array(i):"vec2"===m||"vec3"===m||"vec4"===m?this.data=new Float32Array(i):console.error(`VectorData:Invalid type ${m}`)}}clone(){if(this.data instanceof Float32Array)return new Fe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Fe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Fe(new Uint32Array(this.data),this.typeInfo,null);throw"VectorData:Invalid data type"}setDataValue(i,m,g,x){g instanceof fe?console.error("TODO:Set vector postfix"):m instanceof Fe?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;let x=i.getTypeInfo("f32");if(this.typeInfo instanceof a)x=this.typeInfo.format||x;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?x=i.getTypeInfo("f32"):"vec2i"===m||"vec3i"===m||"vec4i"===m?x=i.getTypeInfo("i32"):"vec2b"===m||"vec3b"===m||"vec4b"===m?x=i.getTypeInfo("bool"):"vec2u"===m||"vec3u"===m||"vec4u"===m?x=i.getTypeInfo("u32"):"vec2h"===m||"vec3h"===m||"vec4h"===m?x=i.getTypeInfo("f16"):console.error(`GetSubData:Unknown type ${m}`)}let _=this;for(;null!==m&&null!==_;){if(m instanceof be){const b=m.index;let y=-1;if(b instanceof ge){if(!(b.value instanceof Oe))return console.error(`GetSubData:Invalid array index ${b.value}`),null;y=b.value.value}else{const m=i.evalExpression(b,g);if(!(m instanceof Oe))return console.error("GetSubData:Unknown index type",b),null;y=m.value}if(y<0||y>=_.data.length)return console.error("GetSubData:Index out of range",y),null;if(_.data instanceof Float32Array){const i=new Float32Array(_.data.buffer,_.data.byteOffset+4*y,1);return new Oe(i,x)}if(_.data instanceof Int32Array){const i=new Int32Array(_.data.buffer,_.data.byteOffset+4*y,1);return new Oe(i,x)}if(_.data instanceof Uint32Array){const i=new Uint32Array(_.data.buffer,_.data.byteOffset+4*y,1);return new Oe(i,x)}throw"GetSubData:Invalid data type"}if(!(m instanceof fe))return console.error("GetSubData:Unknown postfix",m),null;{const g=m.value.toLowerCase();if(1===g.length){let i=0;if("x"===g||"r"===g)i=0;else if("y"===g||"g"===g)i=1;else if("z"===g||"b"===g)i=2;else{if("w"!==g&&"a"!==g)return console.error(`GetSubData:Unknown member ${g}`),null;i=3}if(this.data instanceof Float32Array){let m=new Float32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,x,this)}if(this.data instanceof Int32Array){let m=new Int32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,x,this)}if(this.data instanceof Uint32Array){let m=new Uint32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,x,this)}}const b=[];for(const i of g)"x"===i||"r"===i?b.push(this.data[0]):"y"===i||"g"===i?b.push(this.data[1]):"z"===i||"b"===i?b.push(this.data[2]):"w"===i||"a"===i?b.push(this.data[3]):console.error(`GetDataValue:Unknown member ${i}`);_=Be(i,b,x.name)}m=m.postfix}return _}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Me extends De{constructor(i,m,g=null){super(m,g),i instanceof Float32Array?this.data=i:this.data=new Float32Array(i)}clone(){return new Me(new Float32Array(this.data),this.typeInfo,null)}setDataValue(i,m,g,x){g instanceof fe?console.error("TODO:Set matrix postfix"):m instanceof Me?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;const x=this.typeInfo.name;if(i.getTypeInfo("f32"),this.typeInfo instanceof a)this.typeInfo.format;else if(x.endsWith("f"))i.getTypeInfo("f32");else if(x.endsWith("i"))i.getTypeInfo("i32");else if(x.endsWith("u"))i.getTypeInfo("u32");else{if(!x.endsWith("h"))return console.error(`GetDataValue:Unknown type ${x}`),null;i.getTypeInfo("f16")}if(m instanceof be){const _=m.index;let b=-1;if(_ instanceof ge){if(!(_.value instanceof Oe))return console.error(`GetDataValue:Invalid array index ${_.value}`),null;b=_.value.value}else{const m=i.evalExpression(_,g);if(!(m instanceof Oe))return console.error("GetDataValue:Unknown index type",_),null;b=m.value}if(b<0||b>=this.data.length)return console.error("GetDataValue:Index out of range",b),null;const y=x.endsWith("h")?"h":"f";let T;if("mat2x2"===x||"mat2x2f"===x||"mat2x2h"===x||"mat3x2"===x||"mat3x2f"===x||"mat3x2h"===x||"mat4x2"===x||"mat4x2f"===x||"mat4x2h"===x)T=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+2*b*4,2),i.getTypeInfo(`vec2${y}`));else if("mat2x3"===x||"mat2x3f"===x||"mat2x3h"===x||"mat3x3"===x||"mat3x3f"===x||"mat3x3h"===x||"mat4x3"===x||"mat4x3f"===x||"mat4x3h"===x)T=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+3*b*4,3),i.getTypeInfo(`vec3${y}`));else{if("mat2x4"!==x&&"mat2x4f"!==x&&"mat2x4h"!==x&&"mat3x4"!==x&&"mat3x4f"!==x&&"mat3x4h"!==x&&"mat4x4"!==x&&"mat4x4f"!==x&&"mat4x4h"!==x)return console.error(`GetDataValue:Unknown type ${x}`),null;T=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+4*b*4,4),i.getTypeInfo(`vec4${y}`))}return m.postfix?T.getSubData(i,m.postfix,g):T}return console.error("GetDataValue:Invalid postfix",m),null}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Ue extends De{constructor(i,m,g=0,x=null){super(m,x),this.buffer=i instanceof ArrayBuffer?i:i.buffer,this.offset=g}clone(){const i=new Uint8Array(new Uint8Array(this.buffer,this.offset,this.typeInfo.size));return new Ue(i.buffer,this.typeInfo,0,null)}setDataValue(i,m,g,x){if(null===m)return void console.log("setDataValue:NULL data.");let _=this.offset,b=this.typeInfo;for(;g;){if(g instanceof be)if(b instanceof s){const m=g.index;if(m instanceof ge){if(!(m.value instanceof Oe))return void console.error(`SetDataValue:Invalid index type ${m.value}`);_+=m.value.value*b.stride}else{const g=i.evalExpression(m,x);if(!(g instanceof Oe))return void console.error("SetDataValue:Unknown index type",m);_+=g.value*b.stride}b=b.format}else console.error(`SetDataValue:Type ${b.getTypeName()} is not an array`);else{if(!(g instanceof fe))return void console.error("SetDataValue:Unknown postfix type",g);{const i=g.value;if(b instanceof n){let m=!1;for(const g of b.members)if(g.name===i){_+=g.offset,b=g.type,m=!0;break}if(!m)return void console.error(`SetDataValue:Member ${i} not found`)}else if(b instanceof e){const g=b.getTypeName();let x=0;if("x"===i||"r"===i)x=0;else if("y"===i||"g"===i)x=1;else if("z"===i||"b"===i)x=2;else{if("w"!==i&&"a"!==i)return void console.error(`SetDataValue:Unknown member ${i}`);x=3}if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);const y=m.value;return"vec2f"===g?void(new Float32Array(this.buffer,_,2)[x]=y):"vec3f"===g?void(new Float32Array(this.buffer,_,3)[x]=y):"vec4f"===g?void(new Float32Array(this.buffer,_,4)[x]=y):"vec2i"===g?void(new Int32Array(this.buffer,_,2)[x]=y):"vec3i"===g?void(new Int32Array(this.buffer,_,3)[x]=y):"vec4i"===g?void(new Int32Array(this.buffer,_,4)[x]=y):"vec2u"===g?void(new Uint32Array(this.buffer,_,2)[x]=y):"vec3u"===g?void(new Uint32Array(this.buffer,_,3)[x]=y):"vec4u"===g?void(new Uint32Array(this.buffer,_,4)[x]=y):void console.error(`SetDataValue:Type ${g} is not a struct`)}}}g=g.postfix}this.setData(i,m,b,_,x)}setData(i,m,g,x,_){const b=g.getTypeName();if("f32"!==b&&"f16"!==b)if("i32"!==b&&"atomic<i32>"!==b&&"x32"!==b)if("u32"!==b&&"atomic<u32>"!==b)if("bool"!==b)if("vec2f"!==b&&"vec2h"!==b)if("vec3f"!==b&&"vec3h"!==b)if("vec4f"!==b&&"vec4h"!==b)if("vec2i"!==b)if("vec3i"!==b)if("vec4i"!==b)if("vec2u"!==b)if("vec3u"!==b)if("vec4u"!==b)if("vec2b"!==b)if("vec3b"!==b)if("vec4b"!==b)if("mat2x2f"!==b&&"mat2x2h"!==b)if("mat2x3f"!==b&&"mat2x3h"!==b)if("mat2x4f"!==b&&"mat2x4h"!==b)if("mat3x2f"!==b&&"mat3x2h"!==b)if("mat3x3f"!==b&&"mat3x3h"!==b)if("mat3x4f"!==b&&"mat3x4h"!==b)if("mat4x2f"!==b&&"mat4x2h"!==b)if("mat4x3f"!==b&&"mat4x3h"!==b)if("mat4x4f"!==b&&"mat4x4h"!==b)if(m instanceof Ue){if(g===m.typeInfo)return void new Uint8Array(this.buffer,x,m.buffer.byteLength).set(new Uint8Array(m.buffer));console.error("SetDataValue:Type mismatch",b,m.typeInfo.getTypeName())}else console.error(`SetData:Unknown type ${b}`);else{const i=new Float32Array(this.buffer,x,16);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11],i[12]=m.data[12],i[13]=m.data[13],i[14]=m.data[14],i[15]=m.data[15]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15])}else{const i=new Float32Array(this.buffer,x,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,x,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,x,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,x,9);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8])}else{const i=new Float32Array(this.buffer,x,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,x,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,x,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,x,4);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Uint32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Int32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Int32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Int32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Float32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Float32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Float32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else m instanceof Oe&&(new Int32Array(this.buffer,x,1)[0]=m.value);else m instanceof Oe&&(new Uint32Array(this.buffer,x,1)[0]=m.value);else m instanceof Oe&&(new Int32Array(this.buffer,x,1)[0]=m.value);else m instanceof Oe&&(new Float32Array(this.buffer,x,1)[0]=m.value)}getSubData(i,m,g){var x,_,b;if(null===m)return this;let y=this.offset,T=this.typeInfo;for(;m;){if(m instanceof be){const x=m.index,_=x instanceof he?i.evalExpression(x,g):x;let b=0;if(_ instanceof Oe?b=_.value:"number"==typeof _?b=_:console.error("GetDataValue:Invalid index type",x),T instanceof s)y+=b*T.stride,T=T.format;else{const m=T.getTypeName();"mat4x4"===m||"mat4x4f"===m||"mat4x4h"===m?(y+=16*b,T=i.getTypeInfo("vec4f")):console.error(`getDataValue:Type ${T.getTypeName()} is not an array`)}}else{if(!(m instanceof fe))return console.error("GetDataValue:Unknown postfix type",m),null;{const g=m.value;if(T instanceof n){let i=!1;for(const m of T.members)if(m.name===g){y+=m.offset,T=m.type,i=!0;break}if(!i)return console.error(`GetDataValue:Member ${g} not found`),null}else if(T instanceof e){const m=T.getTypeName();if("vec2f"===m||"vec3f"===m||"vec4f"===m||"vec2i"===m||"vec3i"===m||"vec4i"===m||"vec2u"===m||"vec3u"===m||"vec4u"===m||"vec2b"===m||"vec3b"===m||"vec4b"===m||"vec2h"===m||"vec3h"===m||"vec4h"===m||"vec2"===m||"vec3"===m||"vec4"===m){if(g.length>0&&g.length<5){let x="f";const _=[];for(let b=0;b<g.length;++b){const T=g[b].toLowerCase();let w=0;if("x"===T||"r"===T)w=0;else if("y"===T||"g"===T)w=1;else if("z"===T||"b"===T)w=2;else{if("w"!==T&&"a"!==T)return console.error(`Unknown member ${g}`),null;w=3}if(1===g.length){if(m.endsWith("f"))return this.buffer.byteLength<y+4*w+4?(console.log("Insufficient buffer data"),null):new Oe(new Float32Array(this.buffer,y+4*w,1),i.getTypeInfo("f32"),this);if(m.endsWith("h"))return new Oe(new Float32Array(this.buffer,y+4*w,1),i.getTypeInfo("f16"),this);if(m.endsWith("i"))return new Oe(new Int32Array(this.buffer,y+4*w,1),i.getTypeInfo("i32"),this);if(m.endsWith("b"))return new Oe(new Int32Array(this.buffer,y+4*w,1),i.getTypeInfo("bool"),this);if(m.endsWith("u"))return new Oe(new Uint32Array(this.buffer,y+4*w,1),i.getTypeInfo("i32"),this)}if("vec2f"===m)_.push(new Float32Array(this.buffer,y,2)[w]);else if("vec3f"===m){if(y+12>=this.buffer.byteLength)return console.log("Insufficient buffer data"),null;const i=new Float32Array(this.buffer,y,3);_.push(i[w])}else if("vec4f"===m)_.push(new Float32Array(this.buffer,y,4)[w]);else if("vec2i"===m)x="i",_.push(new Int32Array(this.buffer,y,2)[w]);else if("vec3i"===m)x="i",_.push(new Int32Array(this.buffer,y,3)[w]);else if("vec4i"===m)x="i",_.push(new Int32Array(this.buffer,y,4)[w]);else if("vec2u"===m){x="u";const i=new Uint32Array(this.buffer,y,2);_.push(i[w])}else"vec3u"===m?(x="u",_.push(new Uint32Array(this.buffer,y,3)[w])):"vec4u"===m&&(x="u",_.push(new Uint32Array(this.buffer,y,4)[w]))}return 2===_.length?T=i.getTypeInfo(`vec2${x}`):3===_.length?T=i.getTypeInfo(`vec3${x}`):4===_.length?T=i.getTypeInfo(`vec4${x}`):console.error(`GetDataValue:Invalid vector length ${_.length}`),new Fe(_,T,null)}return console.error(`GetDataValue:Unknown member ${g}`),null}return console.error(`GetDataValue:Type ${m} is not a struct`),null}}}m=m.postfix}const w=T.getTypeName();return"f32"===w?new Oe(new Float32Array(this.buffer,y,1),T,this):"i32"===w?new Oe(new Int32Array(this.buffer,y,1),T,this):"u32"===w?new Oe(new Uint32Array(this.buffer,y,1),T,this):"vec2f"===w?new Fe(new Float32Array(this.buffer,y,2),T,this):"vec3f"===w?new Fe(new Float32Array(this.buffer,y,3),T,this):"vec4f"===w?new Fe(new Float32Array(this.buffer,y,4),T,this):"vec2i"===w?new Fe(new Int32Array(this.buffer,y,2),T,this):"vec3i"===w?new Fe(new Int32Array(this.buffer,y,3),T,this):"vec4i"===w?new Fe(new Int32Array(this.buffer,y,4),T,this):"vec2u"===w?new Fe(new Uint32Array(this.buffer,y,2),T,this):"vec3u"===w?new Fe(new Uint32Array(this.buffer,y,3),T,this):"vec4u"===w?new Fe(new Uint32Array(this.buffer,y,4),T,this):T instanceof a&&"atomic"===T.name?"u32"===(null===(x=T.format)||void 0===x?void 0:x.name)?new Oe(new Uint32Array(this.buffer,y,1)[0],T.format,this):"i32"===(null===(_=T.format)||void 0===_?void 0:_.name)?new Oe(new Int32Array(this.buffer,y,1)[0],T.format,this):(console.error(`GetDataValue:Invalid atomic format ${null===(b=T.format)||void 0===b?void 0:b.name}`),null):new Ue(this.buffer,T,y,this)}toString(){let i="";if(this.typeInfo instanceof s)if("f32"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("i32"===this.typeInfo.format.name){const m=new Int32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("u32"===this.typeInfo.format.name){const m=new Uint32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("vec2f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]}]`;for(let g=1;g<m.length/2;++g)i+=`,[${m[2*g]},${m[2*g+1]}]`}else if("vec3f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]}]`}else if("vec4f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]},${m[3]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]},${m[g+3]}]`}else i="[...]";else this.typeInfo instanceof n?i+="{...}":i="[...]";return i}}class Pe extends De{constructor(i,m,g,x){super(m,null),this.data=i,this.descriptor=g,this.view=x}clone(){return new Pe(this.data,this.typeInfo,this.descriptor,this.view)}get width(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>0?null!==(i=g[0])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.width)&&void 0!==m?m:0}get height(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>1?null!==(i=g[1])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.height)&&void 0!==m?m:0}get depthOrArrayLayers(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>2?null!==(i=g[2])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.depthOrArrayLayers)&&void 0!==m?m:0}get format(){var i;return this.descriptor&&null!==(i=this.descriptor.format)&&void 0!==i?i:"rgba8unorm"}get sampleCount(){var i;return this.descriptor&&null!==(i=this.descriptor.sampleCount)&&void 0!==i?i:1}get mipLevelCount(){var i;return this.descriptor&&null!==(i=this.descriptor.mipLevelCount)&&void 0!==i?i:1}get dimension(){var i;return this.descriptor&&null!==(i=this.descriptor.dimension)&&void 0!==i?i:"2d"}getMipLevelSize(i){if(i>=this.mipLevelCount)return[0,0,0];const m=[this.width,this.height,this.depthOrArrayLayers];for(let g=0;g<m.length;++g)m[g]=Math.max(1,m[g]>>i);return m}get texelByteSize(){const i=this.format,m=zn[i];return m?m.isDepthStencil?4:m.bytesPerBlock:0}get bytesPerRow(){return this.width*this.texelByteSize}get isDepthStencil(){const i=this.format,m=zn[i];return!!m&&m.isDepthStencil}getGpuSize(){const i=this.format,m=zn[i],g=this.width;if(!i||g<=0||!m)return-1;const x=this.height,_=this.depthOrArrayLayers,b=this.dimension;return g/m.blockWidth*("1d"===b?1:x/m.blockHeight)*m.bytesPerBlock*_}getPixel(i,m,g=0,x=0){const _=this.texelByteSize,b=this.bytesPerRow,y=this.height,T=this.data[x];return function(i,m,g,x,_,b,y,T,w){const P=x*(y>>=_)*(b>>=_)+g*y+m*T;switch(w){case"r8unorm":return[k(i,P,"8unorm",1)[0]];case"r8snorm":return[k(i,P,"8snorm",1)[0]];case"r8uint":return[k(i,P,"8uint",1)[0]];case"r8sint":return[k(i,P,"8sint",1)[0]];case"rg8unorm":{const m=k(i,P,"8unorm",2);return[m[0],m[1]]}case"rg8snorm":{const m=k(i,P,"8snorm",2);return[m[0],m[1]]}case"rg8uint":{const m=k(i,P,"8uint",2);return[m[0],m[1]]}case"rg8sint":{const m=k(i,P,"8sint",2);return[m[0],m[1]]}case"rgba8unorm-srgb":case"rgba8unorm":{const m=k(i,P,"8unorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8snorm":{const m=k(i,P,"8snorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8uint":{const m=k(i,P,"8uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba8sint":{const m=k(i,P,"8sint",4);return[m[0],m[1],m[2],m[3]]}case"bgra8unorm-srgb":case"bgra8unorm":{const m=k(i,P,"8unorm",4);return[m[2],m[1],m[0],m[3]]}case"r16uint":return[k(i,P,"16uint",1)[0]];case"r16sint":return[k(i,P,"16sint",1)[0]];case"r16float":return[k(i,P,"16float",1)[0]];case"rg16uint":{const m=k(i,P,"16uint",2);return[m[0],m[1]]}case"rg16sint":{const m=k(i,P,"16sint",2);return[m[0],m[1]]}case"rg16float":{const m=k(i,P,"16float",2);return[m[0],m[1]]}case"rgba16uint":{const m=k(i,P,"16uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16sint":{const m=k(i,P,"16sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16float":{const m=k(i,P,"16float",4);return[m[0],m[1],m[2],m[3]]}case"r32uint":return[k(i,P,"32uint",1)[0]];case"r32sint":return[k(i,P,"32sint",1)[0]];case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return[k(i,P,"32float",1)[0]];case"rg32uint":{const m=k(i,P,"32uint",2);return[m[0],m[1]]}case"rg32sint":{const m=k(i,P,"32sint",2);return[m[0],m[1]]}case"rg32float":{const m=k(i,P,"32float",2);return[m[0],m[1]]}case"rgba32uint":{const m=k(i,P,"32uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32sint":{const m=k(i,P,"32sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32float":{const m=k(i,P,"32float",4);return[m[0],m[1],m[2],m[3]]}case"rg11b10ufloat":{const m=new Uint32Array(i.buffer,P,1)[0],g=(4192256&m)>>11,x=(4290772992&m)>>22;return[v(2047&m),v(g),function(i){const m=112+(i>>5&31)<<23|(31&i)<<18;return Vn[0]=m,Hn[0]}(x),1]}}return null}(new Uint8Array(T),i,m,g,x,y,b,_,this.format)}setPixel(i,m,g,x,_){const b=this.texelByteSize,y=this.bytesPerRow,T=this.height,w=this.data[x];!function(i,m,g,x,_,b,y,T,w,P){const H=x*(y>>=_)*(b>>=_)+g*y+m*T;switch(w){case"r8unorm":return void I(i,H,"8unorm",1,P);case"r8snorm":return void I(i,H,"8snorm",1,P);case"r8uint":return void I(i,H,"8uint",1,P);case"r8sint":return void I(i,H,"8sint",1,P);case"rg8unorm":return void I(i,H,"8unorm",2,P);case"rg8snorm":return void I(i,H,"8snorm",2,P);case"rg8uint":return void I(i,H,"8uint",2,P);case"rg8sint":return void I(i,H,"8sint",2,P);case"rgba8unorm-srgb":case"rgba8unorm":case"bgra8unorm-srgb":case"bgra8unorm":return void I(i,H,"8unorm",4,P);case"rgba8snorm":return void I(i,H,"8snorm",4,P);case"rgba8uint":return void I(i,H,"8uint",4,P);case"rgba8sint":return void I(i,H,"8sint",4,P);case"r16uint":return void I(i,H,"16uint",1,P);case"r16sint":return void I(i,H,"16sint",1,P);case"r16float":return void I(i,H,"16float",1,P);case"rg16uint":return void I(i,H,"16uint",2,P);case"rg16sint":return void I(i,H,"16sint",2,P);case"rg16float":return void I(i,H,"16float",2,P);case"rgba16uint":return void I(i,H,"16uint",4,P);case"rgba16sint":return void I(i,H,"16sint",4,P);case"rgba16float":return void I(i,H,"16float",4,P);case"r32uint":return void I(i,H,"32uint",1,P);case"r32sint":return void I(i,H,"32sint",1,P);case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return void I(i,H,"32float",1,P);case"rg32uint":return void I(i,H,"32uint",2,P);case"rg32sint":return void I(i,H,"32sint",2,P);case"rg32float":return void I(i,H,"32float",2,P);case"rgba32uint":return void I(i,H,"32uint",4,P);case"rgba32sint":return void I(i,H,"32sint",4,P);case"rgba32float":return void I(i,H,"32float",4,P);case"rg11b10ufloat":console.error("TODO:rg11b10ufloat not supported for writing")}}(new Uint8Array(w),i,m,g,x,T,y,b,this.format,_)}}(i=>{i[i.token=0]="token",i[i.keyword=1]="keyword",i[i.reserved=2]="reserved"})(Xn||(Xn={}));class We{constructor(i,m,g){this.name=i,this.type=m,this.rule=g}toString(){return this.name}}class qe{}Wn=qe,qe.none=new We("",Xn.reserved,""),qe.eof=new We("EOF",Xn.token,""),qe.reserved={asm:new We("asm",Xn.reserved,"asm"),bf16:new We("bf16",Xn.reserved,"bf16"),do:new We("do",Xn.reserved,"do"),enum:new We("enum",Xn.reserved,"enum"),f16:new We("f16",Xn.reserved,"f16"),f64:new We("f64",Xn.reserved,"f64"),handle:new We("handle",Xn.reserved,"handle"),i8:new We("i8",Xn.reserved,"i8"),i16:new We("i16",Xn.reserved,"i16"),i64:new We("i64",Xn.reserved,"i64"),mat:new We("mat",Xn.reserved,"mat"),premerge:new We("premerge",Xn.reserved,"premerge"),regardless:new We("regardless",Xn.reserved,"regardless"),typedef:new We("typedef",Xn.reserved,"typedef"),u8:new We("u8",Xn.reserved,"u8"),u16:new We("u16",Xn.reserved,"u16"),u64:new We("u64",Xn.reserved,"u64"),unless:new We("unless",Xn.reserved,"unless"),using:new We("using",Xn.reserved,"using"),vec:new We("vec",Xn.reserved,"vec"),void:new We("void",Xn.reserved,"void")},qe.keywords={array:new We("array",Xn.keyword,"array"),atomic:new We("atomic",Xn.keyword,"atomic"),bool:new We("bool",Xn.keyword,"bool"),f32:new We("f32",Xn.keyword,"f32"),i32:new We("i32",Xn.keyword,"i32"),mat2x2:new We("mat2x2",Xn.keyword,"mat2x2"),mat2x3:new We("mat2x3",Xn.keyword,"mat2x3"),mat2x4:new We("mat2x4",Xn.keyword,"mat2x4"),mat3x2:new We("mat3x2",Xn.keyword,"mat3x2"),mat3x3:new We("mat3x3",Xn.keyword,"mat3x3"),mat3x4:new We("mat3x4",Xn.keyword,"mat3x4"),mat4x2:new We("mat4x2",Xn.keyword,"mat4x2"),mat4x3:new We("mat4x3",Xn.keyword,"mat4x3"),mat4x4:new We("mat4x4",Xn.keyword,"mat4x4"),ptr:new We("ptr",Xn.keyword,"ptr"),sampler:new We("sampler",Xn.keyword,"sampler"),sampler_comparison:new We("sampler_comparison",Xn.keyword,"sampler_comparison"),struct:new We("struct",Xn.keyword,"struct"),texture_1d:new We("texture_1d",Xn.keyword,"texture_1d"),texture_2d:new We("texture_2d",Xn.keyword,"texture_2d"),texture_2d_array:new We("texture_2d_array",Xn.keyword,"texture_2d_array"),texture_3d:new We("texture_3d",Xn.keyword,"texture_3d"),texture_cube:new We("texture_cube",Xn.keyword,"texture_cube"),texture_cube_array:new We("texture_cube_array",Xn.keyword,"texture_cube_array"),texture_multisampled_2d:new We("texture_multisampled_2d",Xn.keyword,"texture_multisampled_2d"),texture_storage_1d:new We("texture_storage_1d",Xn.keyword,"texture_storage_1d"),texture_storage_2d:new We("texture_storage_2d",Xn.keyword,"texture_storage_2d"),texture_storage_2d_array:new We("texture_storage_2d_array",Xn.keyword,"texture_storage_2d_array"),texture_storage_3d:new We("texture_storage_3d",Xn.keyword,"texture_storage_3d"),texture_depth_2d:new We("texture_depth_2d",Xn.keyword,"texture_depth_2d"),texture_depth_2d_array:new We("texture_depth_2d_array",Xn.keyword,"texture_depth_2d_array"),texture_depth_cube:new We("texture_depth_cube",Xn.keyword,"texture_depth_cube"),texture_depth_cube_array:new We("texture_depth_cube_array",Xn.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new We("texture_depth_multisampled_2d",Xn.keyword,"texture_depth_multisampled_2d"),texture_external:new We("texture_external",Xn.keyword,"texture_external"),u32:new We("u32",Xn.keyword,"u32"),vec2:new We("vec2",Xn.keyword,"vec2"),vec3:new We("vec3",Xn.keyword,"vec3"),vec4:new We("vec4",Xn.keyword,"vec4"),bitcast:new We("bitcast",Xn.keyword,"bitcast"),block:new We("block",Xn.keyword,"block"),break:new We("break",Xn.keyword,"break"),case:new We("case",Xn.keyword,"case"),continue:new We("continue",Xn.keyword,"continue"),continuing:new We("continuing",Xn.keyword,"continuing"),default:new We("default",Xn.keyword,"default"),diagnostic:new We("diagnostic",Xn.keyword,"diagnostic"),discard:new We("discard",Xn.keyword,"discard"),else:new We("else",Xn.keyword,"else"),enable:new We("enable",Xn.keyword,"enable"),fallthrough:new We("fallthrough",Xn.keyword,"fallthrough"),false:new We("false",Xn.keyword,"false"),fn:new We("fn",Xn.keyword,"fn"),for:new We("for",Xn.keyword,"for"),function:new We("function",Xn.keyword,"function"),if:new We("if",Xn.keyword,"if"),let:new We("let",Xn.keyword,"let"),const:new We("const",Xn.keyword,"const"),loop:new We("loop",Xn.keyword,"loop"),while:new We("while",Xn.keyword,"while"),private:new We("private",Xn.keyword,"private"),read:new We("read",Xn.keyword,"read"),read_write:new We("read_write",Xn.keyword,"read_write"),return:new We("return",Xn.keyword,"return"),requires:new We("requires",Xn.keyword,"requires"),storage:new We("storage",Xn.keyword,"storage"),switch:new We("switch",Xn.keyword,"switch"),true:new We("true",Xn.keyword,"true"),alias:new We("alias",Xn.keyword,"alias"),type:new We("type",Xn.keyword,"type"),uniform:new We("uniform",Xn.keyword,"uniform"),var:new We("var",Xn.keyword,"var"),override:new We("override",Xn.keyword,"override"),workgroup:new We("workgroup",Xn.keyword,"workgroup"),write:new We("write",Xn.keyword,"write"),r8unorm:new We("r8unorm",Xn.keyword,"r8unorm"),r8snorm:new We("r8snorm",Xn.keyword,"r8snorm"),r8uint:new We("r8uint",Xn.keyword,"r8uint"),r8sint:new We("r8sint",Xn.keyword,"r8sint"),r16uint:new We("r16uint",Xn.keyword,"r16uint"),r16sint:new We("r16sint",Xn.keyword,"r16sint"),r16float:new We("r16float",Xn.keyword,"r16float"),rg8unorm:new We("rg8unorm",Xn.keyword,"rg8unorm"),rg8snorm:new We("rg8snorm",Xn.keyword,"rg8snorm"),rg8uint:new We("rg8uint",Xn.keyword,"rg8uint"),rg8sint:new We("rg8sint",Xn.keyword,"rg8sint"),r32uint:new We("r32uint",Xn.keyword,"r32uint"),r32sint:new We("r32sint",Xn.keyword,"r32sint"),r32float:new We("r32float",Xn.keyword,"r32float"),rg16uint:new We("rg16uint",Xn.keyword,"rg16uint"),rg16sint:new We("rg16sint",Xn.keyword,"rg16sint"),rg16float:new We("rg16float",Xn.keyword,"rg16float"),rgba8unorm:new We("rgba8unorm",Xn.keyword,"rgba8unorm"),rgba8unorm_srgb:new We("rgba8unorm_srgb",Xn.keyword,"rgba8unorm_srgb"),rgba8snorm:new We("rgba8snorm",Xn.keyword,"rgba8snorm"),rgba8uint:new We("rgba8uint",Xn.keyword,"rgba8uint"),rgba8sint:new We("rgba8sint",Xn.keyword,"rgba8sint"),bgra8unorm:new We("bgra8unorm",Xn.keyword,"bgra8unorm"),bgra8unorm_srgb:new We("bgra8unorm_srgb",Xn.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new We("rgb10a2unorm",Xn.keyword,"rgb10a2unorm"),rg11b10float:new We("rg11b10float",Xn.keyword,"rg11b10float"),rg32uint:new We("rg32uint",Xn.keyword,"rg32uint"),rg32sint:new We("rg32sint",Xn.keyword,"rg32sint"),rg32float:new We("rg32float",Xn.keyword,"rg32float"),rgba16uint:new We("rgba16uint",Xn.keyword,"rgba16uint"),rgba16sint:new We("rgba16sint",Xn.keyword,"rgba16sint"),rgba16float:new We("rgba16float",Xn.keyword,"rgba16float"),rgba32uint:new We("rgba32uint",Xn.keyword,"rgba32uint"),rgba32sint:new We("rgba32sint",Xn.keyword,"rgba32sint"),rgba32float:new We("rgba32float",Xn.keyword,"rgba32float"),static_assert:new We("static_assert",Xn.keyword,"static_assert")},qe.tokens={decimal_float_literal:new We("decimal_float_literal",Xn.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/),hex_float_literal:new We("hex_float_literal",Xn.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/),int_literal:new We("int_literal",Xn.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new We("uint_literal",Xn.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),name:new We("name",Xn.token,/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u),ident:new We("ident",Xn.token,/[_a-zA-Z][0-9a-zA-Z_]*/),and:new We("and",Xn.token,"&"),and_and:new We("and_and",Xn.token,"&&"),arrow:new We("arrow ",Xn.token,"->"),attr:new We("attr",Xn.token,"@"),forward_slash:new We("forward_slash",Xn.token,"/"),bang:new We("bang",Xn.token,"!"),bracket_left:new We("bracket_left",Xn.token,"["),bracket_right:new We("bracket_right",Xn.token,"]"),brace_left:new We("brace_left",Xn.token,"{"),brace_right:new We("brace_right",Xn.token,"}"),colon:new We("colon",Xn.token,":"),comma:new We("comma",Xn.token,","),equal:new We("equal",Xn.token,"="),equal_equal:new We("equal_equal",Xn.token,"=="),not_equal:new We("not_equal",Xn.token,"!="),greater_than:new We("greater_than",Xn.token,">"),greater_than_equal:new We("greater_than_equal",Xn.token,">="),shift_right:new We("shift_right",Xn.token,">>"),less_than:new We("less_than",Xn.token,"<"),less_than_equal:new We("less_than_equal",Xn.token,"<="),shift_left:new We("shift_left",Xn.token,"<<"),modulo:new We("modulo",Xn.token,"%"),minus:new We("minus",Xn.token,"-"),minus_minus:new We("minus_minus",Xn.token,"--"),period:new We("period",Xn.token,"."),plus:new We("plus",Xn.token,"+"),plus_plus:new We("plus_plus",Xn.token,"++"),or:new We("or",Xn.token,"|"),or_or:new We("or_or",Xn.token,"||"),paren_left:new We("paren_left",Xn.token,"("),paren_right:new We("paren_right",Xn.token,")"),semicolon:new We("semicolon",Xn.token,";"),star:new We("star",Xn.token,"*"),tilde:new We("tilde",Xn.token,"~"),underscore:new We("underscore",Xn.token,"_"),xor:new We("xor",Xn.token,"^"),plus_equal:new We("plus_equal",Xn.token,"+="),minus_equal:new We("minus_equal",Xn.token,"-="),times_equal:new We("times_equal",Xn.token,"*="),division_equal:new We("division_equal",Xn.token,"/="),modulo_equal:new We("modulo_equal",Xn.token,"%="),and_equal:new We("and_equal",Xn.token,"&="),or_equal:new We("or_equal",Xn.token,"|="),xor_equal:new We("xor_equal",Xn.token,"^="),shift_right_equal:new We("shift_right_equal",Xn.token,">>="),shift_left_equal:new We("shift_left_equal",Xn.token,"<<=")},qe.simpleTokens={"@":Wn.tokens.attr,"{":Wn.tokens.brace_left,"}":Wn.tokens.brace_right,":":Wn.tokens.colon,",":Wn.tokens.comma,"(":Wn.tokens.paren_left,")":Wn.tokens.paren_right,";":Wn.tokens.semicolon},qe.literalTokens={"&":Wn.tokens.and,"&&":Wn.tokens.and_and,"->":Wn.tokens.arrow,"/":Wn.tokens.forward_slash,"!":Wn.tokens.bang,"[":Wn.tokens.bracket_left,"]":Wn.tokens.bracket_right,"=":Wn.tokens.equal,"==":Wn.tokens.equal_equal,"!=":Wn.tokens.not_equal,">":Wn.tokens.greater_than,">=":Wn.tokens.greater_than_equal,">>":Wn.tokens.shift_right,"<":Wn.tokens.less_than,"<=":Wn.tokens.less_than_equal,"<<":Wn.tokens.shift_left,"%":Wn.tokens.modulo,"-":Wn.tokens.minus,"--":Wn.tokens.minus_minus,".":Wn.tokens.period,"+":Wn.tokens.plus,"++":Wn.tokens.plus_plus,"|":Wn.tokens.or,"||":Wn.tokens.or_or,"*":Wn.tokens.star,"~":Wn.tokens.tilde,_:Wn.tokens.underscore,"^":Wn.tokens.xor,"+=":Wn.tokens.plus_equal,"-=":Wn.tokens.minus_equal,"*=":Wn.tokens.times_equal,"/=":Wn.tokens.division_equal,"%=":Wn.tokens.modulo_equal,"&=":Wn.tokens.and_equal,"|=":Wn.tokens.or_equal,"^=":Wn.tokens.xor_equal,">>=":Wn.tokens.shift_right_equal,"<<=":Wn.tokens.shift_left_equal},qe.regexTokens={decimal_float_literal:Wn.tokens.decimal_float_literal,hex_float_literal:Wn.tokens.hex_float_literal,int_literal:Wn.tokens.int_literal,uint_literal:Wn.tokens.uint_literal,ident:Wn.tokens.ident},qe.storage_class=[Wn.keywords.function,Wn.keywords.private,Wn.keywords.workgroup,Wn.keywords.uniform,Wn.keywords.storage],qe.access_mode=[Wn.keywords.read,Wn.keywords.write,Wn.keywords.read_write],qe.sampler_type=[Wn.keywords.sampler,Wn.keywords.sampler_comparison],qe.sampled_texture_type=[Wn.keywords.texture_1d,Wn.keywords.texture_2d,Wn.keywords.texture_2d_array,Wn.keywords.texture_3d,Wn.keywords.texture_cube,Wn.keywords.texture_cube_array],qe.multisampled_texture_type=[Wn.keywords.texture_multisampled_2d],qe.storage_texture_type=[Wn.keywords.texture_storage_1d,Wn.keywords.texture_storage_2d,Wn.keywords.texture_storage_2d_array,Wn.keywords.texture_storage_3d],qe.depth_texture_type=[Wn.keywords.texture_depth_2d,Wn.keywords.texture_depth_2d_array,Wn.keywords.texture_depth_cube,Wn.keywords.texture_depth_cube_array,Wn.keywords.texture_depth_multisampled_2d],qe.texture_external_type=[Wn.keywords.texture_external],qe.any_texture_type=[...Wn.sampled_texture_type,...Wn.multisampled_texture_type,...Wn.storage_texture_type,...Wn.depth_texture_type,...Wn.texture_external_type],qe.texel_format=[Wn.keywords.r8unorm,Wn.keywords.r8snorm,Wn.keywords.r8uint,Wn.keywords.r8sint,Wn.keywords.r16uint,Wn.keywords.r16sint,Wn.keywords.r16float,Wn.keywords.rg8unorm,Wn.keywords.rg8snorm,Wn.keywords.rg8uint,Wn.keywords.rg8sint,Wn.keywords.r32uint,Wn.keywords.r32sint,Wn.keywords.r32float,Wn.keywords.rg16uint,Wn.keywords.rg16sint,Wn.keywords.rg16float,Wn.keywords.rgba8unorm,Wn.keywords.rgba8unorm_srgb,Wn.keywords.rgba8snorm,Wn.keywords.rgba8uint,Wn.keywords.rgba8sint,Wn.keywords.bgra8unorm,Wn.keywords.bgra8unorm_srgb,Wn.keywords.rgb10a2unorm,Wn.keywords.rg11b10float,Wn.keywords.rg32uint,Wn.keywords.rg32sint,Wn.keywords.rg32float,Wn.keywords.rgba16uint,Wn.keywords.rgba16sint,Wn.keywords.rgba16float,Wn.keywords.rgba32uint,Wn.keywords.rgba32sint,Wn.keywords.rgba32float],qe.const_literal=[Wn.tokens.int_literal,Wn.tokens.uint_literal,Wn.tokens.decimal_float_literal,Wn.tokens.hex_float_literal,Wn.keywords.true,Wn.keywords.false],qe.literal_or_ident=[Wn.tokens.ident,Wn.tokens.int_literal,Wn.tokens.uint_literal,Wn.tokens.decimal_float_literal,Wn.tokens.hex_float_literal,Wn.tokens.name],qe.element_count_expression=[Wn.tokens.int_literal,Wn.tokens.uint_literal,Wn.tokens.ident],qe.template_types=[Wn.keywords.vec2,Wn.keywords.vec3,Wn.keywords.vec4,Wn.keywords.mat2x2,Wn.keywords.mat2x3,Wn.keywords.mat2x4,Wn.keywords.mat3x2,Wn.keywords.mat3x3,Wn.keywords.mat3x4,Wn.keywords.mat4x2,Wn.keywords.mat4x3,Wn.keywords.mat4x4,Wn.keywords.atomic,Wn.keywords.bitcast,...Wn.any_texture_type],qe.attribute_name=[Wn.tokens.ident,Wn.keywords.block,Wn.keywords.diagnostic],qe.assignment_operators=[Wn.tokens.equal,Wn.tokens.plus_equal,Wn.tokens.minus_equal,Wn.tokens.times_equal,Wn.tokens.division_equal,Wn.tokens.modulo_equal,Wn.tokens.and_equal,Wn.tokens.or_equal,Wn.tokens.xor_equal,Wn.tokens.shift_right_equal,Wn.tokens.shift_left_equal],qe.increment_operators=[Wn.tokens.plus_plus,Wn.tokens.minus_minus];class He{constructor(i,m,g,x,_){this.type=i,this.lexeme=m,this.line=g,this.start=x,this.end=_}toString(){return this.lexeme}isTemplateType(){return-1!=qe.template_types.indexOf(this.type)}isArrayType(){return this.type==qe.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class ze{constructor(i){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=i?i:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new He(qe.eof,"",this._line,this._current,this._current)),this._tokens}scanToken(){let i=this._advance();if("\n"==i)return this._line++,!0;if(this._isWhitespace(i))return!0;if("/"==i){if("/"==this._peekAhead()){for(;"\n"!=i;){if(this._isAtEnd())return!0;i=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let m=1;for(;m>0;){if(this._isAtEnd())return!0;if(i=this._advance(),"\n"==i)this._line++;else if("*"==i){if("/"==this._peekAhead()&&(this._advance(),m--,0==m))return!0}else"/"==i&&"*"==this._peekAhead()&&(this._advance(),m++)}return!0}}const m=qe.simpleTokens[i];if(m)return this._addToken(m),!0;let g=qe.none;const x=this._isAlpha(i),_="_"===i;if(this._isAlphaNumeric(i)){let m=this._peekAhead();for(;this._isAlphaNumeric(m);)i+=this._advance(),m=this._peekAhead()}if(x){const m=qe.keywords[i];if(m)return this._addToken(m),!0}if(x||_)return this._addToken(qe.tokens.ident),!0;for(;;){let m=this._findType(i);const x=this._peekAhead();if("-"==i&&this._tokens.length>0){if("="==x)return this._current++,i+=x,this._addToken(qe.tokens.minus_equal),!0;if("-"==x)return this._current++,i+=x,this._addToken(qe.tokens.minus_minus),!0;const g=this._tokens.length-1;if((-1!=qe.literal_or_ident.indexOf(this._tokens[g].type)||this._tokens[g].type==qe.tokens.paren_right)&&">"!=x)return this._addToken(m),!0}if(">"==i&&(">"==x||"="==x)){let i=!1,g=this._tokens.length-1;for(let m=0;m<5&&g>=0&&-1===qe.assignment_operators.indexOf(this._tokens[g].type);++m,--g)if(this._tokens[g].type===qe.tokens.less_than){g>0&&this._tokens[g-1].isArrayOrTemplateType()&&(i=!0);break}if(i)return this._addToken(m),!0}if(m===qe.none){let x=i,_=0;const b=2;for(let i=0;i<b;++i)if(x+=this._peekAhead(i),m=this._findType(x),m!==qe.none){_=i;break}if(m===qe.none)return g!==qe.none&&(this._current--,this._addToken(g),!0);i=x,this._current+=_+1}if(g=m,this._isAtEnd())break;i+=this._advance()}return g!==qe.none&&(this._addToken(g),!0)}_findType(i){for(const m in qe.regexTokens){const g=qe.regexTokens[m];if(this._match(i,g.rule))return g}return qe.literalTokens[i]||qe.none}_match(i,m){const g=m.exec(i);return g&&0==g.index&&g[0]==i}_isAtEnd(){return this._current>=this._source.length}_isAlpha(i){return!this._isNumeric(i)&&!this._isWhitespace(i)&&"_"!==i&&"."!==i&&"("!==i&&")"!==i&&"["!==i&&"]"!==i&&"{"!==i&&"}"!==i&&","!==i&&";"!==i&&":"!==i&&"="!==i&&"!"!==i&&"<"!==i&&">"!==i&&"+"!==i&&"-"!==i&&"*"!==i&&"/"!==i&&"%"!==i&&"&"!==i&&"|"!==i&&"^"!==i&&"~"!==i&&"@"!==i&&"#"!==i&&"?"!==i&&"'"!==i&&"`"!==i&&'"'!==i&&"\\"!==i&&"\n"!==i&&"\r"!==i&&"\t"!==i&&"\0"!==i}_isNumeric(i){return i>="0"&&i<="9"}_isAlphaNumeric(i){return this._isAlpha(i)||this._isNumeric(i)||"_"===i}_isWhitespace(i){return" "==i||"\t"==i||"\r"==i}_advance(i=0){let m=this._source[this._current];return i=i||0,i++,this._current+=i,m}_peekAhead(i=0){return i=i||0,this._current+i>=this._source.length?"\0":this._source[this._current+i]}_addToken(i){const m=this._source.substring(this._start,this._current);this._tokens.push(new He(i,m,this._line,this._start,this._current))}}function Re(i){return Array.isArray(i)||(null==i?void 0:i.buffer)instanceof ArrayBuffer}const jn=new Float32Array(1),Zn=new Uint32Array(jn.buffer),Jn=new Uint32Array(jn.buffer),Qn=new Int32Array(1),er=new Float32Array(Qn.buffer),tr=new Uint32Array(Qn.buffer),nr=new Uint32Array(1),rr=new Float32Array(nr.buffer),ir=new Int32Array(nr.buffer);function tt(i,m,g){if(m===g)return i;if("f32"===m){if("i32"===g||"x32"===g)return jn[0]=i,Zn[0];if("u32"===g)return jn[0]=i,Jn[0]}else if("i32"===m||"x32"===m){if("f32"===g)return Qn[0]=i,er[0];if("u32"===g)return Qn[0]=i,tr[0]}else if("u32"===m){if("f32"===g)return nr[0]=i,rr[0];if("i32"===g||"x32"===g)return nr[0]=i,ir[0]}return console.error(`Unsupported cast from ${m} to ${g}`),i}class nt{constructor(i){this.resources=null,this.inUse=!1,this.info=null,this.node=i}}class st{constructor(i,m){this.align=i,this.size=m}}class rt{constructor(){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new d,this.functions=[],this._types=new Map,this._functions=new Map}_isStorageTexture(i){return"texture_storage_1d"==i.name||"texture_storage_2d"==i.name||"texture_storage_2d_array"==i.name||"texture_storage_3d"==i.name}updateAST(i){for(const m of i)m instanceof C&&this._functions.set(m.name,new nt(m));for(const m of i)if(m instanceof ie){const i=this.getTypeInfo(m,null);i instanceof n&&this.structs.push(i)}for(const m of i)if(m instanceof ee)this.aliases.push(this._getAliasInfo(m));else if(m instanceof F){const i=m,g=this._getAttributeNum(i.attributes,"id",0),x=null!=i.type?this.getTypeInfo(i.type,i.attributes):null;this.overrides.push(new h(i.name,x,i.attributes,g))}else if(this._isUniformVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=new o(i.name,_,g,x,i.attributes,On.Uniform,i.access);b.access||(b.access="read"),this.uniforms.push(b)}else if(this._isStorageVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=this._isStorageTexture(_),y=new o(i.name,_,g,x,i.attributes,b?On.StorageTexture:On.Storage,i.access);y.access||(y.access="read"),this.storage.push(y)}else if(this._isTextureVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=this._isStorageTexture(_),y=new o(i.name,_,g,x,i.attributes,b?On.StorageTexture:On.Texture,i.access);y.access||(y.access="read"),b?this.storage.push(y):this.textures.push(y)}else if(this._isSamplerVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=new o(i.name,_,g,x,i.attributes,On.Sampler,i.access);this.samplers.push(b)}for(const m of i)if(m instanceof C){const i=this._getAttribute(m,"vertex"),g=this._getAttribute(m,"fragment"),x=this._getAttribute(m,"compute"),_=i||g||x,b=new p(m.name,null==_?void 0:_.name,m.attributes);b.attributes=m.attributes,b.startLine=m.startLine,b.endLine=m.endLine,this.functions.push(b),this._functions.get(m.name).info=b,_&&(this._functions.get(m.name).inUse=!0,b.inUse=!0,b.resources=this._findResources(m,!!_),b.inputs=this._getInputs(m.args),b.outputs=this._getOutputs(m.returnType),this.entry[_.name].push(b)),b.arguments=m.args.map(i=>new f(i.name,this.getTypeInfo(i.type,i.attributes),i.attributes)),b.returnType=m.returnType?this.getTypeInfo(m.returnType,m.attributes):null}for(const i of this._functions.values())i.info&&(i.info.inUse=i.inUse,this._addCalls(i.node,i.info.calls));for(const i of this._functions.values())i.node.search(m=>{var g,x,_;if(m instanceof Ce){if(m.value)if(Re(m.value))for(const x of m.value)for(const m of this.overrides)x===m.name&&(null===(g=i.info)||void 0===g||g.overrides.push(m));else for(const g of this.overrides)m.value===g.name&&(null===(x=i.info)||void 0===x||x.overrides.push(g))}else if(m instanceof me)for(const g of this.overrides)m.name===g.name&&(null===(_=i.info)||void 0===_||_.overrides.push(g))});for(const i of this.uniforms)this._markStructsInUse(i.type);for(const i of this.storage)this._markStructsInUse(i.type)}getStructInfo(i){for(const m of this.structs)if(m.name==i)return m;return null}getOverrideInfo(i){for(const m of this.overrides)if(m.name==i)return m;return null}_markStructsInUse(i){if(i)if(i.isStruct){if(i.inUse=!0,i.members)for(const m of i.members)this._markStructsInUse(m.type)}else if(i.isArray)this._markStructsInUse(i.format);else if(i.isTemplate)i.format&&this._markStructsInUse(i.format);else{const m=this._getAlias(i.name);m&&this._markStructsInUse(m)}}_addCalls(i,m){var g;for(const x of i.calls){const i=null===(g=this._functions.get(x.name))||void 0===g?void 0:g.info;i&&m.add(i)}}findResource(i,m,g){if(g){for(const x of this.entry.compute)if(x.name===g)for(const g of x.resources)if(g.group==i&&g.binding==m)return g;for(const x of this.entry.vertex)if(x.name===g)for(const g of x.resources)if(g.group==i&&g.binding==m)return g;for(const x of this.entry.fragment)if(x.name===g)for(const g of x.resources)if(g.group==i&&g.binding==m)return g}for(const g of this.uniforms)if(g.group==i&&g.binding==m)return g;for(const g of this.storage)if(g.group==i&&g.binding==m)return g;for(const g of this.textures)if(g.group==i&&g.binding==m)return g;for(const g of this.samplers)if(g.group==i&&g.binding==m)return g;return null}_findResource(i){for(const m of this.uniforms)if(m.name==i)return m;for(const m of this.storage)if(m.name==i)return m;for(const m of this.textures)if(m.name==i)return m;for(const m of this.samplers)if(m.name==i)return m;return null}_markStructsFromAST(i){const m=this.getTypeInfo(i,null);this._markStructsInUse(m)}_findResources(i,m){const g=[],x=this,_=[];return i.search(b=>{if(b instanceof A)_.push({});else if(b instanceof E)_.pop();else if(b instanceof B){const i=b;m&&null!==i.type&&this._markStructsFromAST(i.type),_.length>0&&(_[_.length-1][i.name]=i)}else if(b instanceof pe){const i=b;m&&null!==i.type&&this._markStructsFromAST(i.type)}else if(b instanceof M){const i=b;m&&null!==i.type&&this._markStructsFromAST(i.type),_.length>0&&(_[_.length-1][i.name]=i)}else if(b instanceof me){const i=b;if(_.length>0&&_[_.length-1][i.name])return;const m=x._findResource(i.name);m&&g.push(m)}else if(b instanceof de){const _=b,y=x._functions.get(_.name);y&&(m&&(y.inUse=!0),i.calls.add(y.node),null===y.resources&&(y.resources=x._findResources(y.node,m)),g.push(...y.resources))}else if(b instanceof G){const _=b,y=x._functions.get(_.name);y&&(m&&(y.inUse=!0),i.calls.add(y.node),null===y.resources&&(y.resources=x._findResources(y.node,m)),g.push(...y.resources))}}),[...new Map(g.map(i=>[i.name,i])).values()]}getBindGroups(){const i=[];function t(m,g){m>=i.length&&(i.length=m+1),void 0===i[m]&&(i[m]=[]),g>=i[m].length&&(i[m].length=g+1)}for(const m of this.uniforms)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.storage)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.textures)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.samplers)t(m.group,m.binding),i[m.group][m.binding]=m;return i}_getOutputs(i,m=void 0){if(void 0===m&&(m=[]),i instanceof ie)this._getStructOutputs(i,m);else{const g=this._getOutputInfo(i);null!==g&&m.push(g)}return m}_getStructOutputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructOutputs(g.type,m);else{const i=this._getAttribute(g,"location")||this._getAttribute(g,"builtin");if(null!==i){const x=this.getTypeInfo(g.type,g.type.attributes),_=this._parseInt(i.value),b=new u(g.name,x,i.name,_);m.push(b)}}}_getOutputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this.getTypeInfo(i,i.attributes),x=this._parseInt(m.value);return new u("",g,m.name,x)}return null}_getInputs(i,m=void 0){void 0===m&&(m=[]);for(const g of i)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}return m}_getStructInputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}}_getInputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this._getAttribute(i,"interpolation"),x=this.getTypeInfo(i.type,i.attributes),_=this._parseInt(m.value),b=new c(i.name,x,m.name,_);return null!==g&&(b.interpolation=this._parseString(g.value)),b}return null}_parseString(i){return i instanceof Array&&(i=i[0]),i}_parseInt(i){i instanceof Array&&(i=i[0]);const m=parseInt(i);return isNaN(m)?i:m}_getAlias(i){for(const m of this.aliases)if(m.name==i)return m.type;return null}_getAliasInfo(i){return new l(i.name,this.getTypeInfo(i.type,null))}getTypeInfoByName(i){for(const m of this.structs)if(m.name==i)return m;for(const m of this.aliases)if(m.name==i)return m.type;return null}getTypeInfo(i,m=null){if(this._types.has(i))return this._types.get(i);if(i instanceof le){const g=i.type?this.getTypeInfo(i.type,i.attributes):null,x=new r(i.name,g,m);return this._types.set(i,x),this._updateTypeInfo(x),x}if(i instanceof ce){const g=i,x=g.format?this.getTypeInfo(g.format,g.attributes):null,_=new s(g.name,m);return _.format=x,_.count=g.count,this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof ie){const g=i,x=new n(g.name,m);x.startLine=g.startLine,x.endLine=g.endLine;for(const i of g.members){const m=this.getTypeInfo(i.type,i.attributes);x.members.push(new t(i.name,m,i.attributes))}return this._types.set(i,x),this._updateTypeInfo(x),x}if(i instanceof ue){const g=i,x=g.format instanceof re,_=g.format?x?this.getTypeInfo(g.format,null):new e(g.format,null):null,b=new a(g.name,_,m,g.access);return this._types.set(i,b),this._updateTypeInfo(b),b}if(i instanceof oe){const g=i,x=g.format?this.getTypeInfo(g.format,null):null,_=new a(g.name,x,m,g.access);return this._types.set(i,_),this._updateTypeInfo(_),_}const g=new e(i.name,m);return this._types.set(i,g),this._updateTypeInfo(g),g}_updateTypeInfo(i){var m,g,x;const _=this._getTypeSize(i);if(i.size=null!==(m=null==_?void 0:_.size)&&void 0!==m?m:0,i instanceof s&&i.format){const m=this._getTypeSize(i.format);i.stride=Math.max(null!==(g=null==m?void 0:m.size)&&void 0!==g?g:0,null!==(x=null==m?void 0:m.align)&&void 0!==x?x:0),this._updateTypeInfo(i.format)}i instanceof r&&this._updateTypeInfo(i.format),i instanceof n&&this._updateStructInfo(i)}_updateStructInfo(i){var m;let g=0,x=0,_=0,b=0;for(let y=0,T=i.members.length;y<T;++y){const T=i.members[y],w=this._getTypeSize(T);if(!w)continue;null!==(m=this._getAlias(T.type.name))&&void 0!==m||T.type;const P=w.align,H=w.size;g=this._roundUp(P,g+x),x=H,_=g,b=Math.max(b,P),T.offset=g,T.size=H,this._updateTypeInfo(T.type)}i.size=this._roundUp(b,_+x),i.align=b}_getTypeSize(i){var m,g;if(null==i)return null;const x=this._getAttributeNum(i.attributes,"size",0),_=this._getAttributeNum(i.attributes,"align",0);if(i instanceof t&&(i=i.type),i instanceof e){const m=this._getAlias(i.name);null!==m&&(i=m)}{const g=rt._typeInfo[i.name];if(void 0!==g){const b="f16"===(null===(m=i.format)||void 0===m?void 0:m.name)?2:1;return new st(Math.max(_,g.align/b),Math.max(x,g.size/b))}}{const m=rt._typeInfo[i.name.substring(0,i.name.length-1)];if(m){const g="h"===i.name[i.name.length-1]?2:1;return new st(Math.max(_,m.align/g),Math.max(x,m.size/g))}}if(i instanceof s){let m=i,b=8,y=8;const T=this._getTypeSize(m.format);return null!==T&&(y=T.size,b=T.align),y=m.count*this._getAttributeNum(null!==(g=null==i?void 0:i.attributes)&&void 0!==g?g:null,"stride",this._roundUp(b,y)),x&&(y=x),new st(Math.max(_,b),Math.max(x,y))}if(i instanceof n){let m=0,g=0,b=0,y=0,T=0;for(const g of i.members){const i=this._getTypeSize(g.type);null!==i&&(m=Math.max(i.align,m),b=this._roundUp(i.align,b+y),y=i.size,T=b)}return g=this._roundUp(m,T+y),new st(Math.max(_,m),Math.max(x,g))}return null}_isUniformVar(i){return i instanceof B&&"uniform"==i.storage}_isStorageVar(i){return i instanceof B&&"storage"==i.storage}_isTextureVar(i){return i instanceof B&&null!==i.type&&-1!=rt._textureTypes.indexOf(i.type.name)}_isSamplerVar(i){return i instanceof B&&null!==i.type&&-1!=rt._samplerTypes.indexOf(i.type.name)}_getAttribute(i,m){const g=i;if(!g||!g.attributes)return null;const x=g.attributes;for(let i of x)if(i.name==m)return i;return null}_getAttributeNum(i,m,g){if(null===i)return g;for(let x of i)if(x.name==m){let i=null!==x&&null!==x.value?x.value:g;return i instanceof Array&&(i=i[0]),"number"==typeof i?i:"string"==typeof i?parseInt(i):g}return g}_roundUp(i,m){return Math.ceil(m/i)*i}}rt._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},rt._textureTypes=qe.any_texture_type.map(i=>i.name),rt._samplerTypes=qe.sampler_type.map(i=>i.name);let ar=0;class it{constructor(i,m,g){this.id=ar++,this.name=i,this.value=m,this.node=g}clone(){return new it(this.name,this.value,this.node)}}class ot{constructor(i){this.id=ar++,this.name=i.name,this.node=i}clone(){return new ot(this.node)}}class lt{constructor(i){this.parent=null,this.variables=new Map,this.functions=new Map,this.currentFunctionName="",this.id=ar++,i&&(this.parent=i,this.currentFunctionName=i.currentFunctionName)}getVariable(i){var m;return this.variables.has(i)?null!==(m=this.variables.get(i))&&void 0!==m?m:null:this.parent?this.parent.getVariable(i):null}getFunction(i){var m;return this.functions.has(i)?null!==(m=this.functions.get(i))&&void 0!==m?m:null:this.parent?this.parent.getFunction(i):null}createVariable(i,m,g){this.variables.set(i,new it(i,m,null!=g?g:null))}setVariable(i,m,g){const x=this.getVariable(i);null!==x?x.value=m:this.createVariable(i,m,g)}getVariableValue(i){var m;const g=this.getVariable(i);return null!==(m=null==g?void 0:g.value)&&void 0!==m?m:null}clone(){return new lt(this)}}class ct{evalExpression(i,m){return null}getTypeInfo(i){return null}getVariableName(i,m){return""}}class ut{constructor(i){this.exec=i}getTypeInfo(i){return this.exec.getTypeInfo(i)}All(i,m){const g=this.exec.evalExpression(i.args[0],m);let x=!0;if(g instanceof Fe)return g.data.forEach(i=>{i||(x=!1)}),new Oe(x?1:0,this.getTypeInfo("bool"));throw new Error(`All() expects a vector argument. Line ${i.line}`)}Any(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const i=g.data.some(i=>i);return new Oe(i?1:0,this.getTypeInfo("bool"))}throw new Error(`Any() expects a vector argument. Line ${i.line}`)}Select(i,m){const g=this.exec.evalExpression(i.args[2],m);if(!(g instanceof Oe))throw new Error(`Select() expects a bool condition. Line ${i.line}`);return g.value?this.exec.evalExpression(i.args[1],m):this.exec.evalExpression(i.args[0],m)}ArrayLength(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.evalExpression(g,m);if(x instanceof Ue&&0===x.typeInfo.size){const i=x.typeInfo,m=x.buffer.byteLength/i.stride;return new Oe(m,this.getTypeInfo("u32"))}return new Oe(x.typeInfo.size,this.getTypeInfo("u32"))}Abs(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.abs(i)),g.typeInfo);const x=g;return new Oe(Math.abs(x.value),x.typeInfo)}Acos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acos(i)),g.typeInfo);const x=g;return new Oe(Math.acos(x.value),g.typeInfo)}Acosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acosh(i)),g.typeInfo);const x=g;return new Oe(Math.acosh(x.value),g.typeInfo)}Asin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asin(i)),g.typeInfo);const x=g;return new Oe(Math.asin(x.value),g.typeInfo)}Asinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asinh(i)),g.typeInfo);const x=g;return new Oe(Math.asinh(x.value),g.typeInfo)}Atan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atan(i)),g.typeInfo);const x=g;return new Oe(Math.atan(x.value),g.typeInfo)}Atanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atanh(i)),g.typeInfo);const x=g;return new Oe(Math.atanh(x.value),g.typeInfo)}Atan2(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.atan2(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.atan2(_.value,b.value),g.typeInfo)}Ceil(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.ceil(i)),g.typeInfo);const x=g;return new Oe(Math.ceil(x.value),g.typeInfo)}_clamp(i,m,g){return Math.min(Math.max(i,m),g)}Clamp(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>this._clamp(i,x.data[m],_.data[m])),g.typeInfo);const b=g,y=x,T=_;return new Oe(this._clamp(b.value,y.value,T.value),g.typeInfo)}Cos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cos(i)),g.typeInfo);const x=g;return new Oe(Math.cos(x.value),g.typeInfo)}Cosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cosh(i)),g.typeInfo);const x=g;return new Oe(Math.cos(x.value),g.typeInfo)}CountLeadingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.clz32(i)),g.typeInfo);const x=g;return new Oe(Math.clz32(x.value),g.typeInfo)}_countOneBits(i){let m=0;for(;0!==i;)1&i&&m++,i>>=1;return m}CountOneBits(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countOneBits(i)),g.typeInfo);const x=g;return new Oe(this._countOneBits(x.value),g.typeInfo)}_countTrailingZeros(i){if(0===i)return 32;let m=0;for(;!(1&i);)i>>=1,m++;return m}CountTrailingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countTrailingZeros(i)),g.typeInfo);const x=g;return new Oe(this._countTrailingZeros(x.value),g.typeInfo)}Cross(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe){if(3!==g.data.length||3!==x.data.length)return console.error(`Cross() expects 3D vectors. Line ${i.line}`),null;const m=g.data,_=x.data;return new Fe([m[1]*_[2]-_[1]*m[2],m[2]*_[0]-_[2]*m[0],m[0]*_[1]-_[0]*m[1]],g.typeInfo)}return console.error(`Cross() expects vector arguments. Line ${i.line}`),null}Degrees(i,m){const g=this.exec.evalExpression(i.args[0],m),x=180/Math.PI;return g instanceof Fe?new Fe(g.data.map(i=>i*x),g.typeInfo):new Oe(g.value*x,this.getTypeInfo("f32"))}Determinant(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Me){const i=g.data,m=g.typeInfo.getTypeName(),x=m.endsWith("h")?this.getTypeInfo("f16"):this.getTypeInfo("f32");if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m)return new Oe(i[0]*i[3]-i[1]*i[2],x);if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),x);if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m)console.error(`TODO:Determinant for ${m}`);else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m)console.error(`TODO:Determinant for ${m}`);else{if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),x);"mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m||"mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m||"mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m?console.error(`TODO:Determinant for ${m}`):"mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m||console.error(`TODO:Determinant for ${m}`)}}return console.error(`Determinant expects a matrix argument. Line ${i.line}`),null}Distance(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe){let i=0;for(let m=0;m<g.data.length;++m)i+=(g.data[m]-x.data[m])*(g.data[m]-x.data[m]);return new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const _=g,b=x;return new Oe(Math.abs(_.value-b.value),g.typeInfo)}_dot(i,m){let g=0;for(let x=0;x<i.length;++x)g+=m[x]*i[x];return g}Dot(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);return g instanceof Fe&&x instanceof Fe?new Oe(this._dot(g.data,x.data),this.getTypeInfo("f32")):(console.error(`Dot() expects vector arguments. Line ${i.line}`),null)}Dot4U8Packed(i,m){return console.error(`TODO:dot4U8Packed. Line ${i.line}`),null}Dot4I8Packed(i,m){return console.error(`TODO:dot4I8Packed. Line ${i.line}`),null}Exp(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.exp(i)),g.typeInfo);const x=g;return new Oe(Math.exp(x.value),g.typeInfo)}Exp2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.pow(2,i)),g.typeInfo);const x=g;return new Oe(Math.pow(2,x.value),g.typeInfo)}ExtractBits(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if("u32"!==x.typeInfo.name&&"x32"!==x.typeInfo.name)return console.error(`ExtractBits() expects an i32 offset argument. Line ${i.line}`),null;if("u32"!==_.typeInfo.name&&"x32"!==_.typeInfo.name)return console.error(`ExtractBits() expects an i32 count argument. Line ${i.line}`),null;const b=x.value,y=_.value;if(g instanceof Fe)return new Fe(g.data.map(i=>i>>b&(1<<y)-1),g.typeInfo);if("i32"!==g.typeInfo.name&&"x32"!==g.typeInfo.name)return console.error(`ExtractBits() expects an i32 argument. Line ${i.line}`),null;const T=g.value;return new Oe(T>>b&(1<<y)-1,this.getTypeInfo("i32"))}FaceForward(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe){const i=this._dot(x.data,_.data);return new Fe(i<0?Array.from(g.data):g.data.map(i=>-i),g.typeInfo)}return console.error(`FaceForward() expects vector arguments. Line ${i.line}`),null}_firstLeadingBit(i){return 0===i?-1:31-Math.clz32(i)}FirstLeadingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstLeadingBit(i)),g.typeInfo);const x=g;return new Oe(this._firstLeadingBit(x.value),g.typeInfo)}_firstTrailingBit(i){return 0===i?-1:Math.log2(i&-i)}FirstTrailingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstTrailingBit(i)),g.typeInfo);const x=g;return new Oe(this._firstTrailingBit(x.value),g.typeInfo)}Floor(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.floor(i)),g.typeInfo);const x=g;return new Oe(Math.floor(x.value),g.typeInfo)}Fma(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe)return g.data.length!==x.data.length||g.data.length!==_.data.length?(console.error(`Fma() expects vectors of the same length. Line ${i.line}`),null):new Fe(g.data.map((i,m)=>i*x.data[m]+_.data[m]),g.typeInfo);const b=g,y=x,T=_;return new Oe(b.value*y.value+T.value,b.typeInfo)}Fract(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>i-Math.floor(i)),g.typeInfo);const x=g;return new Oe(x.value-Math.floor(x.value),g.typeInfo)}Frexp(i,m){return console.error(`TODO:frexp. Line ${i.line}`),null}InsertBits(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m),b=this.exec.evalExpression(i.args[3],m);if("u32"!==_.typeInfo.name&&"x32"!==_.typeInfo.name)return console.error(`InsertBits() expects an i32 offset argument. Line ${i.line}`),null;const y=_.value,T=(1<<b.value)-1<<y,w=~T;if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>i&w|x.data[m]<<y&T),g.typeInfo);const P=g.value,H=x.value;return new Oe(P&w|H<<y&T,g.typeInfo)}InverseSqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>1/Math.sqrt(i)),g.typeInfo);const x=g;return new Oe(1/Math.sqrt(x.value),g.typeInfo)}Ldexp(i,m){return console.error(`TODO:ldexp. Line ${i.line}`),null}Length(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){let i=0;return g.data.forEach(m=>{i+=m*m}),new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const x=g;return new Oe(Math.abs(x.value),g.typeInfo)}Log(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log(i)),g.typeInfo);const x=g;return new Oe(Math.log(x.value),g.typeInfo)}Log2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log2(i)),g.typeInfo);const x=g;return new Oe(Math.log2(x.value),g.typeInfo)}Max(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.max(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.max(_.value,b.value),g.typeInfo)}Min(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.min(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.min(_.value,b.value),g.typeInfo)}Mix(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>g.data[m]*(1-_.data[m])+x.data[m]*_.data[m]),g.typeInfo);const b=x,y=_;return new Oe(g.value*(1-y.value)+b.value*y.value,g.typeInfo)}Modf(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>i%x.data[m]),g.typeInfo);const _=x;return new Oe(g.value%_.value,g.typeInfo)}Normalize(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const x=this.Length(i,m).value;return new Fe(g.data.map(i=>i/x),g.typeInfo)}return console.error(`Normalize() expects a vector argument. Line ${i.line}`),null}Pow(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.pow(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.pow(_.value,b.value),g.typeInfo)}QuantizeToF16(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i),g.typeInfo):new Oe(g.value,g.typeInfo)}Radians(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i*Math.PI/180),g.typeInfo):new Oe(g.value*Math.PI/180,this.getTypeInfo("f32"))}Reflect(i,m){let g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe){const i=this._dot(g.data,x.data);return new Fe(g.data.map((m,g)=>m-2*i*x.data[g]),g.typeInfo)}return console.error(`Reflect() expects vector arguments. Line ${i.line}`),null}Refract(i,m){let g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Oe){const i=this._dot(x.data,g.data);return new Fe(g.data.map((m,g)=>{const b=1-_.value*_.value*(1-i*i);if(b<0)return 0;const y=Math.sqrt(b);return _.value*m-(_.value*i+y)*x.data[g]}),g.typeInfo)}return console.error(`Refract() expects vector arguments and a scalar argument. Line ${i.line}`),null}ReverseBits(i,m){return console.error(`TODO:reverseBits. Line ${i.line}`),null}Round(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.round(i)),g.typeInfo);const x=g;return new Oe(Math.round(x.value),g.typeInfo)}Saturate(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.min(Math.max(i,0),1)),g.typeInfo);const x=g;return new Oe(Math.min(Math.max(x.value,0),1),g.typeInfo)}Sign(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sign(i)),g.typeInfo);const x=g;return new Oe(Math.sign(x.value),g.typeInfo)}Sin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sin(i)),g.typeInfo);const x=g;return new Oe(Math.sin(x.value),g.typeInfo)}Sinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sinh(i)),g.typeInfo);const x=g;return new Oe(Math.sinh(x.value),g.typeInfo)}_smoothstep(i,m,g){const x=Math.min(Math.max((g-i)/(m-i),0),1);return x*x*(3-2*x)}SmoothStep(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(_ instanceof Fe&&g instanceof Fe&&x instanceof Fe)return new Fe(_.data.map((i,m)=>this._smoothstep(g.data[m],x.data[m],i)),_.typeInfo);const b=g,y=x,T=_;return new Oe(this._smoothstep(b.value,y.value,T.value),_.typeInfo)}Sqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sqrt(i)),g.typeInfo);const x=g;return new Oe(Math.sqrt(x.value),g.typeInfo)}Step(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(x instanceof Fe&&g instanceof Fe)return new Fe(x.data.map((i,m)=>i<g.data[m]?0:1),x.typeInfo);const _=g;return new Oe(x.value<_.value?0:1,_.typeInfo)}Tan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tan(i)),g.typeInfo);const x=g;return new Oe(Math.tan(x.value),g.typeInfo)}Tanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tanh(i)),g.typeInfo);const x=g;return new Oe(Math.tanh(x.value),g.typeInfo)}_getTransposeType(i){const m=i.getTypeName();return"mat2x2f"===m||"mat2x2h"===m?i:"mat2x3f"===m?this.getTypeInfo("mat3x2f"):"mat2x3h"===m?this.getTypeInfo("mat3x2h"):"mat2x4f"===m?this.getTypeInfo("mat4x2f"):"mat2x4h"===m?this.getTypeInfo("mat4x2h"):"mat3x2f"===m?this.getTypeInfo("mat2x3f"):"mat3x2h"===m?this.getTypeInfo("mat2x3h"):"mat3x3f"===m||"mat3x3h"===m?i:"mat3x4f"===m?this.getTypeInfo("mat4x3f"):"mat3x4h"===m?this.getTypeInfo("mat4x3h"):"mat4x2f"===m?this.getTypeInfo("mat2x4f"):"mat4x2h"===m?this.getTypeInfo("mat2x4h"):"mat4x3f"===m?this.getTypeInfo("mat3x4f"):"mat4x3h"===m?this.getTypeInfo("mat3x4h"):("mat4x4f"===m||"mat4x4h"===m||console.error(`Invalid matrix type ${m}`),i)}Transpose(i,m){const g=this.exec.evalExpression(i.args[0],m);if(!(g instanceof Me))return console.error(`Transpose() expects a matrix argument. Line ${i.line}`),null;const x=this._getTransposeType(g.typeInfo);if("mat2x2"===g.typeInfo.name||"mat2x2f"===g.typeInfo.name||"mat2x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[2],i[1],i[3]],x)}if("mat2x3"===g.typeInfo.name||"mat2x3f"===g.typeInfo.name||"mat2x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7]],x)}if("mat2x4"===g.typeInfo.name||"mat2x4f"===g.typeInfo.name||"mat2x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13]],x)}if("mat3x2"===g.typeInfo.name||"mat3x2f"===g.typeInfo.name||"mat3x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[1],i[4],i[2],i[5]],x)}if("mat3x3"===g.typeInfo.name||"mat3x3f"===g.typeInfo.name||"mat3x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7],i[2],i[5],i[8]],x)}if("mat3x4"===g.typeInfo.name||"mat3x4f"===g.typeInfo.name||"mat3x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14]],x)}if("mat4x2"===g.typeInfo.name||"mat4x2f"===g.typeInfo.name||"mat4x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[1],i[5],i[2],i[6]],x)}if("mat4x3"===g.typeInfo.name||"mat4x3f"===g.typeInfo.name||"mat4x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]],x)}if("mat4x4"===g.typeInfo.name||"mat4x4f"===g.typeInfo.name||"mat4x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14],i[3],i[7],i[11],i[15]],x)}return console.error(`Invalid matrix type ${g.typeInfo.name}`),null}Trunc(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.trunc(i)),g.typeInfo);const x=g;return new Oe(Math.trunc(x.value),g.typeInfo)}Dpdx(i,m){return console.error(`TODO:dpdx. Line ${i.line}`),null}DpdxCoarse(i,m){return console.error(`TODO:dpdxCoarse. Line ${i.line}`),null}DpdxFine(i,m){return console.error("TODO:dpdxFine"),null}Dpdy(i,m){return console.error("TODO:dpdy"),null}DpdyCoarse(i,m){return console.error("TODO:dpdyCoarse"),null}DpdyFine(i,m){return console.error("TODO:dpdyFine"),null}Fwidth(i,m){return console.error("TODO:fwidth"),null}FwidthCoarse(i,m){return console.error("TODO:fwidthCoarse"),null}FwidthFine(i,m){return console.error("TODO:fwidthFine"),null}TextureDimensions(i,m){const g=i.args[0],x=i.args.length>1?this.exec.evalExpression(i.args[1],m).value:0;if(g instanceof me){const _=g.name,b=m.getVariableValue(_);if(b instanceof Pe){if(x<0||x>=b.mipLevelCount)return console.error(`Invalid mip level for textureDimensions. Line ${i.line}`),null;const m=b.getMipLevelSize(x),g=b.dimension;return"1d"===g?new Oe(m[0],this.getTypeInfo("u32")):"3d"===g?new Fe(m,this.getTypeInfo("vec3u")):"2d"===g?new Fe(m.slice(0,2),this.getTypeInfo("vec2u")):(console.error(`Invalid texture dimension ${g} not found. Line ${i.line}`),null)}return console.error(`Texture ${_} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureDimensions. Line ${i.line}`),null}TextureGather(i,m){return console.error("TODO:textureGather"),null}TextureGatherCompare(i,m){return console.error("TODO:textureGatherCompare"),null}TextureLoad(i,m){const g=i.args[0],x=this.exec.evalExpression(i.args[1],m),_=i.args.length>2?this.exec.evalExpression(i.args[2],m).value:0;if(!(x instanceof Fe)||2!==x.data.length)return console.error(`Invalid UV argument for textureLoad. Line ${i.line}`),null;if(g instanceof me){const b=g.name,y=m.getVariableValue(b);if(y instanceof Pe){const m=Math.floor(x.data[0]),g=Math.floor(x.data[1]);if(m<0||m>=y.width||g<0||g>=y.height)return console.error(`Texture ${b} out of bounds. Line ${i.line}`),null;const T=y.getPixel(m,g,0,_);return null===T?(console.error(`Invalid texture format for textureLoad. Line ${i.line}`),null):new Fe(T,this.getTypeInfo("vec4f"))}return console.error(`Texture ${b} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureLoad. Line ${i.line}`),null}TextureNumLayers(i,m){const g=i.args[0];if(g instanceof me){const x=g.name,_=m.getVariableValue(x);return _ instanceof Pe?new Oe(_.depthOrArrayLayers,this.getTypeInfo("u32")):(console.error(`Texture ${x} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLayers. Line ${i.line}`),null}TextureNumLevels(i,m){const g=i.args[0];if(g instanceof me){const x=g.name,_=m.getVariableValue(x);return _ instanceof Pe?new Oe(_.mipLevelCount,this.getTypeInfo("u32")):(console.error(`Texture ${x} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLevels. Line ${i.line}`),null}TextureNumSamples(i,m){const g=i.args[0];if(g instanceof me){const x=g.name,_=m.getVariableValue(x);return _ instanceof Pe?new Oe(_.sampleCount,this.getTypeInfo("u32")):(console.error(`Texture ${x} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumSamples. Line ${i.line}`),null}TextureSample(i,m){return console.error("TODO:textureSample"),null}TextureSampleBias(i,m){return console.error("TODO:textureSampleBias"),null}TextureSampleCompare(i,m){return console.error("TODO:textureSampleCompare"),null}TextureSampleCompareLevel(i,m){return console.error("TODO:textureSampleCompareLevel"),null}TextureSampleGrad(i,m){return console.error("TODO:textureSampleGrad"),null}TextureSampleLevel(i,m){return console.error("TODO:textureSampleLevel"),null}TextureSampleBaseClampToEdge(i,m){return console.error("TODO:textureSampleBaseClampToEdge"),null}TextureStore(i,m){const g=i.args[0],x=this.exec.evalExpression(i.args[1],m),_=4===i.args.length?this.exec.evalExpression(i.args[2],m).value:0,b=4===i.args.length?this.exec.evalExpression(i.args[3],m).data:this.exec.evalExpression(i.args[2],m).data;if(4!==b.length)return console.error(`Invalid value argument for textureStore. Line ${i.line}`),null;if(!(x instanceof Fe)||2!==x.data.length)return console.error(`Invalid UV argument for textureStore. Line ${i.line}`),null;if(g instanceof me){const y=g.name,T=m.getVariableValue(y);if(T instanceof Pe){const m=T.getMipLevelSize(0),g=Math.floor(x.data[0]),w=Math.floor(x.data[1]);return g<0||g>=m[0]||w<0||w>=m[1]?(console.error(`Texture ${y} out of bounds. Line ${i.line}`),null):(T.setPixel(g,w,0,_,Array.from(b)),null)}return console.error(`Texture ${y} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureStore. Line ${i.line}`),null}AtomicLoad(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m);return m.getVariable(x).value.getSubData(this.exec,g.postfix,m)}AtomicStore(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m);return T instanceof Oe&&y instanceof Oe&&(T.value=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),null}AtomicAdd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value+=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicSub(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value-=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicMax(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=Math.max(T.value,y.value)),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicMin(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=Math.min(T.value,y.value)),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicAnd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=T.value&y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicOr(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=T.value|y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicXor(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=T.value^y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicExchange(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicCompareExchangeWeak(i,m){return console.error("TODO:atomicCompareExchangeWeak"),null}Pack4x8snorm(i,m){return console.error("TODO:pack4x8snorm"),null}Pack4x8unorm(i,m){return console.error("TODO:pack4x8unorm"),null}Pack4xI8(i,m){return console.error("TODO:pack4xI8"),null}Pack4xU8(i,m){return console.error("TODO:pack4xU8"),null}Pack4x8Clamp(i,m){return console.error("TODO:pack4x8Clamp"),null}Pack4xU8Clamp(i,m){return console.error("TODO:pack4xU8Clamp"),null}Pack2x16snorm(i,m){return console.error("TODO:pack2x16snorm"),null}Pack2x16unorm(i,m){return console.error("TODO:pack2x16unorm"),null}Pack2x16float(i,m){return console.error("TODO:pack2x16float"),null}Unpack4x8snorm(i,m){return console.error("TODO:unpack4x8snorm"),null}Unpack4x8unorm(i,m){return console.error("TODO:unpack4x8unorm"),null}Unpack4xI8(i,m){return console.error("TODO:unpack4xI8"),null}Unpack4xU8(i,m){return console.error("TODO:unpack4xU8"),null}Unpack2x16snorm(i,m){return console.error("TODO:unpack2x16snorm"),null}Unpack2x16unorm(i,m){return console.error("TODO:unpack2x16unorm"),null}Unpack2x16float(i,m){return console.error("TODO:unpack2x16float"),null}StorageBarrier(i,m){return null}TextureBarrier(i,m){return null}WorkgroupBarrier(i,m){return null}WorkgroupUniformLoad(i,m){return null}SubgroupAdd(i,m){return console.error("TODO:subgroupAdd"),null}SubgroupExclusiveAdd(i,m){return console.error("TODO:subgroupExclusiveAdd"),null}SubgroupInclusiveAdd(i,m){return console.error("TODO:subgroupInclusiveAdd"),null}SubgroupAll(i,m){return console.error("TODO:subgroupAll"),null}SubgroupAnd(i,m){return console.error("TODO:subgroupAnd"),null}SubgroupAny(i,m){return console.error("TODO:subgroupAny"),null}SubgroupBallot(i,m){return console.error("TODO:subgroupBallot"),null}SubgroupBroadcast(i,m){return console.error("TODO:subgroupBroadcast"),null}SubgroupBroadcastFirst(i,m){return console.error("TODO:subgroupBroadcastFirst"),null}SubgroupElect(i,m){return console.error("TODO:subgroupElect"),null}SubgroupMax(i,m){return console.error("TODO:subgroupMax"),null}SubgroupMin(i,m){return console.error("TODO:subgroupMin"),null}SubgroupMul(i,m){return console.error("TODO:subgroupMul"),null}SubgroupExclusiveMul(i,m){return console.error("TODO:subgroupExclusiveMul"),null}SubgroupInclusiveMul(i,m){return console.error("TODO:subgroupInclusiveMul"),null}SubgroupOr(i,m){return console.error("TODO:subgroupOr"),null}SubgroupShuffle(i,m){return console.error("TODO:subgroupShuffle"),null}SubgroupShuffleDown(i,m){return console.error("TODO:subgroupShuffleDown"),null}SubgroupShuffleUp(i,m){return console.error("TODO:subgroupShuffleUp"),null}SubgroupShuffleXor(i,m){return console.error("TODO:subgroupShuffleXor"),null}SubgroupXor(i,m){return console.error("TODO:subgroupXor"),null}QuadBroadcast(i,m){return console.error("TODO:quadBroadcast"),null}QuadSwapDiagonal(i,m){return console.error("TODO:quadSwapDiagonal"),null}QuadSwapX(i,m){return console.error("TODO:quadSwapX"),null}QuadSwapY(i,m){return console.error("TODO:quadSwapY"),null}}const sr={vec2:2,vec2f:2,vec2i:2,vec2u:2,vec2b:2,vec2h:2,vec3:3,vec3f:3,vec3i:3,vec3u:3,vec3b:3,vec3h:3,vec4:4,vec4f:4,vec4i:4,vec4u:4,vec4b:4,vec4h:4},or={mat2x2:[2,2,4],mat2x2f:[2,2,4],mat2x2h:[2,2,4],mat2x3:[2,3,6],mat2x3f:[2,3,6],mat2x3h:[2,3,6],mat2x4:[2,4,8],mat2x4f:[2,4,8],mat2x4h:[2,4,8],mat3x2:[3,2,6],mat3x2f:[3,2,6],mat3x2h:[3,2,6],mat3x3:[3,3,9],mat3x3f:[3,3,9],mat3x3h:[3,3,9],mat3x4:[3,4,12],mat3x4f:[3,4,12],mat3x4h:[3,4,12],mat4x2:[4,2,8],mat4x2f:[4,2,8],mat4x2h:[4,2,8],mat4x3:[4,3,12],mat4x3f:[4,3,12],mat4x3h:[4,3,12],mat4x4:[4,4,16],mat4x4f:[4,4,16],mat4x4h:[4,4,16]};class pt extends ct{constructor(i,m){var g;super(),this.ast=null!=i?i:[],this.reflection=new rt,this.reflection.updateAST(this.ast),this.context=null!==(g=null==m?void 0:m.clone())&&void 0!==g?g:new lt,this.builtins=new ut(this),this.typeInfo={bool:this.getTypeInfo(re.bool),i32:this.getTypeInfo(re.i32),u32:this.getTypeInfo(re.u32),f32:this.getTypeInfo(re.f32),f16:this.getTypeInfo(re.f16),vec2f:this.getTypeInfo(oe.vec2f),vec2u:this.getTypeInfo(oe.vec2u),vec2i:this.getTypeInfo(oe.vec2i),vec2h:this.getTypeInfo(oe.vec2h),vec3f:this.getTypeInfo(oe.vec3f),vec3u:this.getTypeInfo(oe.vec3u),vec3i:this.getTypeInfo(oe.vec3i),vec3h:this.getTypeInfo(oe.vec3h),vec4f:this.getTypeInfo(oe.vec4f),vec4u:this.getTypeInfo(oe.vec4u),vec4i:this.getTypeInfo(oe.vec4i),vec4h:this.getTypeInfo(oe.vec4h),mat2x2f:this.getTypeInfo(oe.mat2x2f),mat2x3f:this.getTypeInfo(oe.mat2x3f),mat2x4f:this.getTypeInfo(oe.mat2x4f),mat3x2f:this.getTypeInfo(oe.mat3x2f),mat3x3f:this.getTypeInfo(oe.mat3x3f),mat3x4f:this.getTypeInfo(oe.mat3x4f),mat4x2f:this.getTypeInfo(oe.mat4x2f),mat4x3f:this.getTypeInfo(oe.mat4x3f),mat4x4f:this.getTypeInfo(oe.mat4x4f)}}getVariableValue(i){var m,g;const x=null!==(g=null===(m=this.context.getVariable(i))||void 0===m?void 0:m.value)&&void 0!==g?g:null;if(null===x)return null;if(x instanceof Oe)return x.value;if(x instanceof Fe)return Array.from(x.data);if(x instanceof Me)return Array.from(x.data);if(x instanceof Ue&&x.typeInfo instanceof s){if("u32"===x.typeInfo.format.name)return Array.from(new Uint32Array(x.buffer,x.offset,x.typeInfo.count));if("i32"===x.typeInfo.format.name)return Array.from(new Int32Array(x.buffer,x.offset,x.typeInfo.count));if("f32"===x.typeInfo.format.name)return Array.from(new Float32Array(x.buffer,x.offset,x.typeInfo.count))}return console.error(`Unsupported return variable type ${x.typeInfo.name}`),null}execute(i){(i=null!=i?i:{}).constants&&this._setOverrides(i.constants,this.context),this._execStatements(this.ast,this.context)}dispatchWorkgroups(i,m,g,x){const _=this.context.clone();(x=null!=x?x:{}).constants&&this._setOverrides(x.constants,_),this._execStatements(this.ast,_);const b=_.getFunction(i);if(!b)return void console.error(`Function ${i} not found`);if("number"==typeof m)m=[m,1,1];else{if(0===m.length)return void console.error("Invalid dispatch count");1===m.length?m=[m[0],1,1]:2===m.length?m=[m[0],m[1],1]:m.length>3&&(m=[m[0],m[1],m[2]])}const y=m[0],T=m[1],w=m[2],P=this.getTypeInfo("vec3u");_.setVariable("@num_workgroups",new Fe(m,P));for(const i in g)for(const m in g[i]){const x=g[i][m];_.variables.forEach(g=>{var _;const b=g.node;if(null==b?void 0:b.attributes){let y=null,T=null;for(const i of b.attributes)"binding"===i.name?y=i.value:"group"===i.name&&(T=i.value);if(m==y&&i==T)if(void 0!==x.texture&&void 0!==x.descriptor){const i=new Pe(x.texture,this.getTypeInfo(b.type),x.descriptor,null!==(_=x.texture.view)&&void 0!==_?_:null);g.value=i}else void 0!==x.uniform?g.value=new Ue(x.uniform,this.getTypeInfo(b.type)):g.value=new Ue(x,this.getTypeInfo(b.type))}})}for(let i=0;i<w;++i)for(let m=0;m<T;++m)for(let g=0;g<y;++g)_.setVariable("@workgroup_id",new Fe([g,m,i],this.getTypeInfo("vec3u"))),this._dispatchWorkgroup(b,[g,m,i],_)}execStatement(i,m){if(i instanceof Q)return this.evalExpression(i.value,m);if(i instanceof ne){if(i.condition){const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))throw new Error("Invalid break-if condition");if(!g.value)return null}return pt._breakObj}if(i instanceof se)return pt._continueObj;if(i instanceof M)this._let(i,m);else if(i instanceof B)this._var(i,m);else if(i instanceof U)this._const(i,m);else if(i instanceof C)this._function(i,m);else{if(i instanceof Z)return this._if(i,m);if(i instanceof j)return this._switch(i,m);if(i instanceof O)return this._for(i,m);if(i instanceof N)return this._while(i,m);if(i instanceof X)return this._loop(i,m);if(i instanceof V){const g=m.clone();return g.currentFunctionName=m.currentFunctionName,this._execStatements(i.body,g)}if(i instanceof R)this._assign(i,m);else if(i instanceof Yn)this._increment(i,m);else{if(i instanceof ie)return null;if(i instanceof F){const g=i.name;null===m.getVariable(g)&&m.setVariable(g,new Oe(0,this.getTypeInfo("u32")))}else if(i instanceof G)this._call(i,m);else{if(i instanceof J)return null;if(i instanceof ee)return null;console.error("Invalid statement type.",i,`Line ${i.line}`)}}}return null}evalExpression(i,m){return i instanceof ke?this._evalBinaryOp(i,m):i instanceof ge?this._evalLiteral(i,m):i instanceof me?this._evalVariable(i,m):i instanceof de?this._evalCall(i,m):i instanceof pe?this._evalCreate(i,m):i instanceof _e?this._evalConst(i,m):i instanceof xe?this._evalBitcast(i,m):i instanceof we?this._evalUnaryOp(i,m):(console.error("Invalid expression type",i,`Line ${i.line}`),null)}getTypeInfo(i){var m;if(i instanceof re){const m=this.reflection.getTypeInfo(i);if(null!==m)return m}let g=null!==(m=this.typeInfo[i])&&void 0!==m?m:null;return null!==g||(g=this.reflection.getTypeInfoByName(i)),g}_setOverrides(i,m){for(const g in i){const x=i[g],_=this.reflection.getOverrideInfo(g);null!==_?(null===_.type&&(_.type=this.getTypeInfo("u32")),"u32"===_.type.name||"i32"===_.type.name||"f32"===_.type.name||"f16"===_.type.name?m.setVariable(g,new Oe(x,_.type)):"bool"===_.type.name?m.setVariable(g,new Oe(x?1:0,_.type)):"vec2"===_.type.name||"vec3"===_.type.name||"vec4"===_.type.name||"vec2f"===_.type.name||"vec3f"===_.type.name||"vec4f"===_.type.name||"vec2i"===_.type.name||"vec3i"===_.type.name||"vec4i"===_.type.name||"vec2u"===_.type.name||"vec3u"===_.type.name||"vec4u"===_.type.name||"vec2h"===_.type.name||"vec3h"===_.type.name||"vec4h"===_.type.name?m.setVariable(g,new Fe(x,_.type)):console.error(`Invalid constant type for ${g}`)):console.error(`Override ${g} does not exist in the shader.`)}}_dispatchWorkgroup(i,m,g){const x=[1,1,1];for(const m of i.node.attributes)if("workgroup_size"===m.name){if(m.value.length>0){const i=g.getVariableValue(m.value[0]);x[0]=i instanceof Oe?i.value:parseInt(m.value[0])}if(m.value.length>1){const i=g.getVariableValue(m.value[1]);x[1]=i instanceof Oe?i.value:parseInt(m.value[1])}if(m.value.length>2){const i=g.getVariableValue(m.value[2]);x[2]=i instanceof Oe?i.value:parseInt(m.value[2])}}const _=this.getTypeInfo("vec3u"),b=this.getTypeInfo("u32");g.setVariable("@workgroup_size",new Fe(x,_));const y=x[0],T=x[1],w=x[2];for(let P=0,H=0;P<w;++P)for(let w=0;w<T;++w)for(let T=0;T<y;++T,++H){const y=[T,w,P],z=[T+m[0]*x[0],w+m[1]*x[1],P+m[2]*x[2]];g.setVariable("@local_invocation_id",new Fe(y,_)),g.setVariable("@global_invocation_id",new Fe(z,_)),g.setVariable("@local_invocation_index",new Oe(H,b)),this._dispatchExec(i,g)}}_dispatchExec(i,m){for(const g of i.node.args)for(const i of g.attributes)if("builtin"===i.name){const x=`@${i.value}`,_=m.getVariable(x);void 0!==_&&m.variables.set(g.name,_)}this._execStatements(i.node.body,m)}getVariableName(i,m){for(;i instanceof we;)i=i.right;return i instanceof me?i.name:(console.error("Unknown variable type",i,"Line",i.line),null)}_execStatements(i,m){for(const g of i){if(g instanceof Array){const i=m.clone(),x=this._execStatements(g,i);if(x)return x;continue}const i=this.execStatement(g,m);if(i)return i}return null}_call(i,m){const g=m.clone();g.currentFunctionName=i.name;const x=m.getFunction(i.name);if(x){for(let m=0;m<x.node.args.length;++m){const _=x.node.args[m],b=this.evalExpression(i.args[m],g);g.setVariable(_.name,b,_)}this._execStatements(x.node.body,g)}else i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)&&this._evalCreate(i,m)}_increment(i,m){const g=this.getVariableName(i.variable,m),x=m.getVariable(g);x?"++"===i.operator?x.value instanceof Oe?x.value.value++:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):"--"===i.operator?x.value instanceof Oe?x.value.value--:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):console.error(`Unknown increment operator ${i.operator}. Line ${i.line}`):console.error(`Variable ${g} not found. Line ${i.line}`)}_getVariableData(i,m){if(i instanceof me){const g=this.getVariableName(i,m),x=m.getVariable(g);return null===x?(console.error(`Variable ${g} not found. Line ${i.line}`),null):x.value.getSubData(this,i.postfix,m)}if(i instanceof we){if("*"===i.operator){const g=this._getVariableData(i.right,m);return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Variable ${i.right} is not a pointer. Line ${i.line}`),null)}if("&"===i.operator){const g=this._getVariableData(i.right,m);return new Ve(g)}}return null}_assign(i,m){let g=null,x="<var>",_=null;if(i.variable instanceof we){const g=this._getVariableData(i.variable,m),x=this.evalExpression(i.value,m),_=i.operator;if("="===_){if(g instanceof Oe||g instanceof Fe||g instanceof Me){if(x instanceof Oe||x instanceof Fe||x instanceof Me&&g.data.length===x.data.length)return void g.data.set(x.data);console.error(`Invalid assignment. Line ${i.line}`)}else if(g instanceof Ue&&x instanceof Ue&&g.buffer.byteLength-g.offset>=x.buffer.byteLength-x.offset)return void(g.buffer.byteLength%4==0?new Uint32Array(g.buffer,g.offset,g.typeInfo.size/4).set(new Uint32Array(x.buffer,x.offset,x.typeInfo.size/4)):new Uint8Array(g.buffer,g.offset,g.typeInfo.size).set(new Uint8Array(x.buffer,x.offset,x.typeInfo.size)));return console.error(`Invalid assignment. Line ${i.line}`),null}if("+="===_)return g instanceof Oe||g instanceof Fe||g instanceof Me?x instanceof Oe||x instanceof Fe||x instanceof Me?void g.data.set(x.data.map((i,m)=>g.data[m]+i)):void console.error(`Invalid assignment . Line ${i.line}`):void console.error(`Invalid assignment. Line ${i.line}`);if("-="===_)return(g instanceof Oe||g instanceof Fe||g instanceof Me)&&(x instanceof Oe||x instanceof Fe||x instanceof Me)?void g.data.set(x.data.map((i,m)=>g.data[m]-i)):void console.error(`Invalid assignment. Line ${i.line}`)}if(i.variable instanceof we){if("*"===i.variable.operator){x=this.getVariableName(i.variable.right,m);const _=m.getVariable(x);if(!(_&&_.value instanceof Ve))return void console.error(`Variable ${x} is not a pointer. Line ${i.line}`);g=_.value.reference;let b=i.variable.postfix;if(!b){let m=i.variable.right;for(;m instanceof we;){if(m.postfix){b=m.postfix;break}m=m.right}}b&&(g=g.getSubData(this,b,m))}}else{_=i.variable.postfix,x=this.getVariableName(i.variable,m);const b=m.getVariable(x);if(null===b)return void console.error(`Variable ${x} not found. Line ${i.line}`);g=b.value}if(g instanceof Ve&&(g=g.reference),null===g)return void console.error(`Variable ${x} not found. Line ${i.line}`);const b=this.evalExpression(i.value,m),y=i.operator;if("="===y)if(g instanceof Ue)g.setDataValue(this,b,_,m);else if(_){if(!(g instanceof Fe||g instanceof Me))return void console.error(`Variable ${x} is not a vector or matrix. Line ${i.line}`);if(_ instanceof be){const y=this.evalExpression(_.index,m).value;if(g instanceof Fe){if(!(b instanceof Oe))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[y]=b.value}else{if(!(g instanceof Me))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);{const y=this.evalExpression(_.index,m).value;if(y<0)return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);if(!(b instanceof Fe))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);{const m=g.typeInfo.getTypeName();if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m){if(!(y<2&&2===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[2*y]=b.data[0],g.data[2*y+1]=b.data[1]}else if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m){if(!(y<2&&3===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[3*y]=b.data[0],g.data[3*y+1]=b.data[1],g.data[3*y+2]=b.data[2]}else if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m){if(!(y<2&&4===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[4*y]=b.data[0],g.data[4*y+1]=b.data[1],g.data[4*y+2]=b.data[2],g.data[4*y+3]=b.data[3]}else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m){if(!(y<3&&2===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[2*y]=b.data[0],g.data[2*y+1]=b.data[1]}else if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m){if(!(y<3&&3===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[3*y]=b.data[0],g.data[3*y+1]=b.data[1],g.data[3*y+2]=b.data[2]}else if("mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m){if(!(y<3&&4===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[4*y]=b.data[0],g.data[4*y+1]=b.data[1],g.data[4*y+2]=b.data[2],g.data[4*y+3]=b.data[3]}else if("mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m){if(!(y<4&&2===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[2*y]=b.data[0],g.data[2*y+1]=b.data[1]}else if("mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m){if(!(y<4&&3===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[3*y]=b.data[0],g.data[3*y+1]=b.data[1],g.data[3*y+2]=b.data[2]}else{if("mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m)return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);if(!(y<4&&4===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[4*y]=b.data[0],g.data[4*y+1]=b.data[1],g.data[4*y+2]=b.data[2],g.data[4*y+3]=b.data[3]}}}}}else if(_ instanceof fe){const m=_.value;if(!(g instanceof Fe))return void console.error(`Invalid assignment to ${m}. Variable ${x} is not a vector. Line ${i.line}`);if(b instanceof Oe){if(m.length>1)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);if("x"===m)g.data[0]=b.value;else if("y"===m){if(g.data.length<2)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);g.data[1]=b.value}else if("z"===m){if(g.data.length<3)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);g.data[2]=b.value}else if("w"===m){if(g.data.length<4)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);g.data[3]=b.value}}else{if(!(b instanceof Fe))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);if(m.length!==b.data.length)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);for(let _=0;_<m.length;++_){const y=m[_];if("x"===y||"r"===y)g.data[0]=b.data[_];else if("y"===y||"g"===y){if(b.data.length<2)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);g.data[1]=b.data[_]}else if("z"===y||"b"===y){if(b.data.length<3)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);g.data[2]=b.data[_]}else{if("w"!==y&&"a"!==y)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);if(b.data.length<4)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);g.data[3]=b.data[_]}}}}}else g instanceof Oe&&b instanceof Oe?g.value=b.value:g instanceof Fe&&b instanceof Fe||g instanceof Me&&b instanceof Me?g.data.set(b.data):console.error(`Invalid assignment to ${x}. Line ${i.line}`);else{const x=g.getSubData(this,_,m);if(x instanceof Fe&&b instanceof Oe){const m=x.data,g=b.value;if("+="===y)for(let i=0;i<m.length;++i)m[i]+=g;else if("-="===y)for(let i=0;i<m.length;++i)m[i]-=g;else if("*="===y)for(let i=0;i<m.length;++i)m[i]*=g;else if("/="===y)for(let i=0;i<m.length;++i)m[i]/=g;else if("%="===y)for(let i=0;i<m.length;++i)m[i]%=g;else if("&="===y)for(let i=0;i<m.length;++i)m[i]&=g;else if("|="===y)for(let i=0;i<m.length;++i)m[i]|=g;else if("^="===y)for(let i=0;i<m.length;++i)m[i]^=g;else if("<<="===y)for(let i=0;i<m.length;++i)m[i]<<=g;else if(">>="===y)for(let i=0;i<m.length;++i)m[i]>>=g;else console.error(`Invalid operator ${y}. Line ${i.line}`)}else if(x instanceof Fe&&b instanceof Fe){const m=x.data,g=b.data;if(m.length!==g.length)return void console.error(`Vector length mismatch. Line ${i.line}`);if("+="===y)for(let i=0;i<m.length;++i)m[i]+=g[i];else if("-="===y)for(let i=0;i<m.length;++i)m[i]-=g[i];else if("*="===y)for(let i=0;i<m.length;++i)m[i]*=g[i];else if("/="===y)for(let i=0;i<m.length;++i)m[i]/=g[i];else if("%="===y)for(let i=0;i<m.length;++i)m[i]%=g[i];else if("&="===y)for(let i=0;i<m.length;++i)m[i]&=g[i];else if("|="===y)for(let i=0;i<m.length;++i)m[i]|=g[i];else if("^="===y)for(let i=0;i<m.length;++i)m[i]^=g[i];else if("<<="===y)for(let i=0;i<m.length;++i)m[i]<<=g[i];else if(">>="===y)for(let i=0;i<m.length;++i)m[i]>>=g[i];else console.error(`Invalid operator ${y}. Line ${i.line}`)}else{if(!(x instanceof Oe&&b instanceof Oe))return void console.error(`Invalid type for ${i.operator} operator. Line ${i.line}`);"+="===y?x.value+=b.value:"-="===y?x.value-=b.value:"*="===y?x.value*=b.value:"/="===y?x.value/=b.value:"%="===y?x.value%=b.value:"&="===y?x.value&=b.value:"|="===y?x.value|=b.value:"^="===y?x.value^=b.value:"<<="===y?x.value<<=b.value:">>="===y?x.value>>=b.value:console.error(`Invalid operator ${y}. Line ${i.line}`)}g instanceof Ue&&g.setDataValue(this,x,_,m)}}_function(i,m){const g=new ot(i);m.functions.set(i.name,g)}_const(i,m){let g=null;null!==i.value&&(g=this.evalExpression(i.value,m)),m.createVariable(i.name,g,i)}_let(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{const x=i.type.name;if("f32"===x||"i32"===x||"u32"===x||"bool"===x||"f16"===x||"vec2"===x||"vec3"===x||"vec4"===x||"vec2f"===x||"vec3f"===x||"vec4f"===x||"vec2i"===x||"vec3i"===x||"vec4i"===x||"vec2u"===x||"vec3u"===x||"vec4u"===x||"vec2h"===x||"vec3h"===x||"vec4h"===x||"vec2b"===x||"vec3b"===x||"vec4b"===x||"mat2x2"===x||"mat2x3"===x||"mat2x4"===x||"mat3x2"===x||"mat3x3"===x||"mat3x4"===x||"mat4x2"===x||"mat4x3"===x||"mat4x4"===x||"mat2x2f"===x||"mat2x3f"===x||"mat2x4f"===x||"mat3x2f"===x||"mat3x3f"===x||"mat3x4f"===x||"mat4x2f"===x||"mat4x3f"===x||"mat4x4f"===x||"mat2x2h"===x||"mat2x3h"===x||"mat2x4h"===x||"mat3x2h"===x||"mat3x3h"===x||"mat3x4h"===x||"mat4x2h"===x||"mat4x3h"===x||"mat4x4h"===x||"array"===x){const x=new pe(i.type,[]);g=this._evalCreate(x,m)}}m.createVariable(i.name,g,i)}_var(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{if(null===i.type)return void console.error(`Variable ${i.name} has no type. Line ${i.line}`);const x=i.type.name;if("f32"===x||"i32"===x||"u32"===x||"bool"===x||"f16"===x||"vec2"===x||"vec3"===x||"vec4"===x||"vec2f"===x||"vec3f"===x||"vec4f"===x||"vec2i"===x||"vec3i"===x||"vec4i"===x||"vec2u"===x||"vec3u"===x||"vec4u"===x||"vec2h"===x||"vec3h"===x||"vec4h"===x||"vec2b"===x||"vec3b"===x||"vec4b"===x||"mat2x2"===x||"mat2x3"===x||"mat2x4"===x||"mat3x2"===x||"mat3x3"===x||"mat3x4"===x||"mat4x2"===x||"mat4x3"===x||"mat4x4"===x||"mat2x2f"===x||"mat2x3f"===x||"mat2x4f"===x||"mat3x2f"===x||"mat3x3f"===x||"mat3x4f"===x||"mat4x2f"===x||"mat4x3f"===x||"mat4x4f"===x||"mat2x2h"===x||"mat2x3h"===x||"mat2x4h"===x||"mat3x2h"===x||"mat3x3h"===x||"mat3x4h"===x||"mat4x2h"===x||"mat4x3h"===x||"mat4x4h"===x||i.type instanceof ce||i.type instanceof ie||i.type instanceof oe){const x=new pe(i.type,[]);g=this._evalCreate(x,m)}}m.createVariable(i.name,g,i)}_switch(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;let x=null;for(const _ of i.cases)if(_ instanceof Se)for(const b of _.selectors){if(b instanceof Te){x=_;continue}const y=this.evalExpression(b,m);if(!(y instanceof Oe))return console.error(`Invalid case selector. Line ${i.line}`),null;if(y.value===g.value)return this._execStatements(_.body,m)}else _ instanceof Ae&&(x=_);return x?this._execStatements(x.body,m):null}_if(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(g.value)return this._execStatements(i.body,m);for(const g of i.elseif){const x=this.evalExpression(g.condition,m);if(!(x instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(x.value)return this._execStatements(g.body,m)}return i.else?this._execStatements(i.else,m):null}_getScalarValue(i){return i instanceof Oe?i.value:(console.error("Expected scalar value.",i),0)}_for(i,m){for(m=m.clone(),this.execStatement(i.init,m);this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(null!==g&&g!==pt._continueObj)return g;this.execStatement(i.increment,m)}return null}_loop(i,m){for(m=m.clone();;){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g===pt._continueObj){if(i.continuing&&this._execStatements(i.continuing.body,m)===pt._breakObj)break}else if(null!==g)return g}return null}_while(i,m){for(m=m.clone();this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g!==pt._continueObj&&null!==g)return g}return null}_evalBitcast(i,m){const g=this.evalExpression(i.value,m),x=i.type;if(g instanceof Oe){const i=tt(g.value,g.typeInfo.name,x.name);return new Oe(i,this.getTypeInfo(x))}if(g instanceof Fe){const m=g.typeInfo.getTypeName();let _="";if(m.endsWith("f"))_="f32";else if(m.endsWith("i"))_="i32";else if(m.endsWith("u"))_="u32";else if(m.endsWith("b"))_="bool";else{if(!m.endsWith("h"))return console.error(`Unknown vector type ${m}. Line ${i.line}`),null;_="f16"}const b=x.getTypeName();let y="";if(b.endsWith("f"))y="f32";else if(b.endsWith("i"))y="i32";else if(b.endsWith("u"))y="u32";else if(b.endsWith("b"))y="bool";else{if(!b.endsWith("h"))return console.error(`Unknown vector type ${y}. Line ${i.line}`),null;y="f16"}const T=function(i,m,g){if(m===g)return i;const x=new Array(i.length);for(let _=0;_<i.length;_++)x[_]=tt(i[_],m,g);return x}(Array.from(g.data),_,y);return new Fe(T,this.getTypeInfo(x))}return console.error(`TODO:bitcast for ${g.typeInfo.name}. Line ${i.line}`),null}_evalConst(i,m){return m.getVariableValue(i.name).clone().getSubData(this,i.postfix,m)}_evalCreate(i,m){var g;if(i instanceof pe){if(null===i.type)return Ne.void;switch(i.type.getTypeName()){case"bool":case"i32":case"u32":case"f32":case"f16":return this._callConstructorValue(i,m);case"vec2":case"vec3":case"vec4":case"vec2f":case"vec3f":case"vec4f":case"vec2h":case"vec3h":case"vec4h":case"vec2i":case"vec3i":case"vec4i":case"vec2u":case"vec3u":case"vec4u":case"vec2b":case"vec3b":case"vec4b":return this._callConstructorVec(i,m);case"mat2x2":case"mat2x2f":case"mat2x2h":case"mat2x3":case"mat2x3f":case"mat2x3h":case"mat2x4":case"mat2x4f":case"mat2x4h":case"mat3x2":case"mat3x2f":case"mat3x2h":case"mat3x3":case"mat3x3f":case"mat3x3h":case"mat3x4":case"mat3x4f":case"mat3x4h":case"mat4x2":case"mat4x2f":case"mat4x2h":case"mat4x3":case"mat4x3f":case"mat4x3h":case"mat4x4":case"mat4x4f":case"mat4x4h":return this._callConstructorMatrix(i,m)}}const x=i instanceof pe?i.type.name:i.name,_=i instanceof pe?this.getTypeInfo(i.type):this.getTypeInfo(i.name);if(null===_)return console.error(`Unknown type ${x}. Line ${i.line}`),null;if(0===_.size)return null;const b=new Ue(new ArrayBuffer(_.size),_,0);if(_ instanceof n){if(i.args)for(let g=0;g<i.args.length;++g){const x=_.members[g],y=i.args[g],T=this.evalExpression(y,m);b.setData(this,T,x.type,x.offset,m)}}else if(_ instanceof s){let x=0;if(i.args)for(let y=0;y<i.args.length;++y){const T=i.args[y],w=this.evalExpression(T,m);null===_.format&&("x32"===(null===(g=w.typeInfo)||void 0===g?void 0:g.name)?_.format=this.getTypeInfo("i32"):_.format=w.typeInfo),b.setData(this,w,_.format,x,m),x+=_.stride}}else console.error(`Unknown type "${x}". Line ${i.line}`);return i instanceof pe?b.getSubData(this,i.postfix,m):b}_evalLiteral(i,m){const g=this.getTypeInfo(i.type),x=g.name;return"x32"===x||"u32"===x||"f32"===x||"f16"===x||"i32"===x||"bool"===x?new Oe(i.scalarValue,g):"vec2"===x||"vec3"===x||"vec4"===x||"vec2f"===x||"vec3f"===x||"vec4f"===x||"vec2h"===x||"vec3h"===x||"vec4h"===x||"vec2i"===x||"vec3i"===x||"vec4i"===x||"vec2u"===x||"vec3u"===x||"vec4u"===x?this._callConstructorVec(i,m):"mat2x2"===x||"mat2x3"===x||"mat2x4"===x||"mat3x2"===x||"mat3x3"===x||"mat3x4"===x||"mat4x2"===x||"mat4x3"===x||"mat4x4"===x||"mat2x2f"===x||"mat2x3f"===x||"mat2x4f"===x||"mat3x2f"===x||"mat3x3f"===x||"mat3x4f"===x||"mat4x2f"===x||"mat4x3f"===x||"mat4x4f"===x||"mat2x2h"===x||"mat2x3h"===x||"mat2x4h"===x||"mat3x2h"===x||"mat3x3h"===x||"mat3x4h"===x||"mat4x2h"===x||"mat4x3h"===x||"mat4x4h"===x?this._callConstructorMatrix(i,m):i.value}_evalVariable(i,m){const g=m.getVariableValue(i.name);return null===g?g:g.getSubData(this,i.postfix,m)}_maxFormatTypeInfo(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const x=pt._priority.get(m.name);pt._priority.get(i[g].name)<x&&(m=i[g])}return"x32"===m.name?this.getTypeInfo("i32"):m}_evalUnaryOp(i,m){const g=this.evalExpression(i.right,m);if("&"===i.operator)return new Ve(g);if("*"===i.operator)return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Invalid dereference. Line ${i.line}`),null);const x=g instanceof Oe?g.value:g instanceof Fe?Array.from(g.data):null;switch(i.operator){case"+":{if(Re(x)){const i=x.map((i,m)=>+i);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(+i,m)}case"-":{if(Re(x)){const i=x.map((i,m)=>-i);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(-i,m)}case"!":{if(Re(x)){const i=x.map((i,m)=>i?0:1);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(i?0:1,m)}case"~":{if(Re(x)){const i=x.map((i,m)=>~i);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(~i,m)}}return console.error(`Invalid unary operator ${i.operator}. Line ${i.line}`),null}_evalBinaryOp(i,m){const g=this.evalExpression(i.left,m),x=this.evalExpression(i.right,m),_=g instanceof Oe?g.value:g instanceof Fe||g instanceof Me?Array.from(g.data):null,b=x instanceof Oe?x.value:x instanceof Fe||x instanceof Me?Array.from(x.data):null;switch(i.operator){case"+":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i+x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m+i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i+m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m+y,T)}case"-":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i-x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m-i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i-m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m-y,T)}case"*":{if(Re(_)&&Re(b)){const m=_,y=b;if(g instanceof Me&&x instanceof Me){const _=function(i,m,g,x){if(void 0===or[m.name]||void 0===or[x.name])return null;const _=or[m.name][0],b=or[m.name][1],y=or[x.name][0];if(_!==or[x.name][1])return null;const T=new Array(y*b);for(let m=0;m<b;m++)for(let x=0;x<y;x++){let w=0;for(let y=0;y<_;y++)w+=i[y*b+m]*g[x*_+y];T[m*y+x]=w}return T}(m,g.typeInfo,y,x.typeInfo);if(null===_)return console.error(`Matrix multiplication failed. Line ${i.line}.`),null;const b=or[x.typeInfo.name][0],T=or[g.typeInfo.name][1],w=this.getTypeInfo(`mat${b}x${T}f`);return new Me(_,w)}if(g instanceof Me&&x instanceof Fe){const _=function(i,m,g,x){if(void 0===or[m.name]||void 0===sr[x.name])return null;const _=or[m.name][0],b=or[m.name][1];if(_!==g.length)return null;const y=new Array(b);for(let m=0;m<b;m++){let x=0;for(let y=0;y<_;y++)x+=i[y*b+m]*g[y];y[m]=x}return y}(m,g.typeInfo,y,x.typeInfo);return null===_?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(_,x.typeInfo)}if(g instanceof Fe&&x instanceof Me){const _=function(i,m,g,x){if(void 0===sr[m.name]||void 0===or[x.name])return null;const _=or[x.name][0],b=or[x.name][1];if(b!==i.length)return null;const y=[];for(let m=0;m<_;m++){let x=0;for(let y=0;y<b;y++)x+=i[y]*g[y*_+m];y[m]=x}return y}(m,g.typeInfo,y,x.typeInfo);return null===_?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(_,g.typeInfo)}{if(m.length!==y.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const x=m.map((i,m)=>i*y[m]);return new Fe(x,g.typeInfo)}}if(Re(_)){const i=b,m=_.map((m,g)=>m*i);return g instanceof Me?new Me(m,g.typeInfo):new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i*m);return x instanceof Me?new Me(m,x.typeInfo):new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m*y,T)}case"%":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i%x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m%i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i%m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m%y,T)}case"/":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i/x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m/i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i/m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m/y,T)}case"&":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i&x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m&i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i&m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m&y,T)}case"|":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i|x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m|i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i|m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m|y,T)}case"^":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i^x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m^i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i^m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m^y,T)}case"<<":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i<<x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m<<i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i<<m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m<<y,T)}case">>":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i>>x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m>>i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i>>m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m>>y,T)}case">":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i>x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m>i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i>m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_>b?1:0,this.getTypeInfo("bool"));case"<":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i<x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m<i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i<m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_<b?1:0,this.getTypeInfo("bool"));case"==":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i===x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m==i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i==m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_===b?1:0,this.getTypeInfo("bool"));case"!=":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i!==x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m!==i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i!==m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_!==b?1:0,this.getTypeInfo("bool"));case">=":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i>=x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m>=i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i>=m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_>=b?1:0,this.getTypeInfo("bool"));case"<=":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i<=x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m<=i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i<=m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_<=b?1:0,this.getTypeInfo("bool"));case"&&":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i&&x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m&&i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i&&m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_&&b?1:0,this.getTypeInfo("bool"));case"||":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i||x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m||i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i||m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_||b?1:0,this.getTypeInfo("bool"))}return console.error(`Unknown operator ${i.operator}. Line ${i.line}`),null}_evalCall(i,m){if(null!==i.cachedReturnValue)return i.cachedReturnValue;const g=m.clone();g.currentFunctionName=i.name;const x=m.getFunction(i.name);if(!x)return i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)?this._evalCreate(i,m):(console.error(`Unknown function "${i.name}". Line ${i.line}`),null);for(let m=0;m<x.node.args.length;++m){const _=x.node.args[m],b=this.evalExpression(i.args[m],g);g.createVariable(_.name,b,_)}return this._execStatements(x.node.body,g)}_callBuiltinFunction(i,m){switch(i.name){case"all":return this.builtins.All(i,m);case"any":return this.builtins.Any(i,m);case"select":return this.builtins.Select(i,m);case"arrayLength":return this.builtins.ArrayLength(i,m);case"abs":return this.builtins.Abs(i,m);case"acos":return this.builtins.Acos(i,m);case"acosh":return this.builtins.Acosh(i,m);case"asin":return this.builtins.Asin(i,m);case"asinh":return this.builtins.Asinh(i,m);case"atan":return this.builtins.Atan(i,m);case"atanh":return this.builtins.Atanh(i,m);case"atan2":return this.builtins.Atan2(i,m);case"ceil":return this.builtins.Ceil(i,m);case"clamp":return this.builtins.Clamp(i,m);case"cos":return this.builtins.Cos(i,m);case"cosh":return this.builtins.Cosh(i,m);case"countLeadingZeros":return this.builtins.CountLeadingZeros(i,m);case"countOneBits":return this.builtins.CountOneBits(i,m);case"countTrailingZeros":return this.builtins.CountTrailingZeros(i,m);case"cross":return this.builtins.Cross(i,m);case"degrees":return this.builtins.Degrees(i,m);case"determinant":return this.builtins.Determinant(i,m);case"distance":return this.builtins.Distance(i,m);case"dot":return this.builtins.Dot(i,m);case"dot4U8Packed":return this.builtins.Dot4U8Packed(i,m);case"dot4I8Packed":return this.builtins.Dot4I8Packed(i,m);case"exp":return this.builtins.Exp(i,m);case"exp2":return this.builtins.Exp2(i,m);case"extractBits":return this.builtins.ExtractBits(i,m);case"faceForward":return this.builtins.FaceForward(i,m);case"firstLeadingBit":return this.builtins.FirstLeadingBit(i,m);case"firstTrailingBit":return this.builtins.FirstTrailingBit(i,m);case"floor":return this.builtins.Floor(i,m);case"fma":return this.builtins.Fma(i,m);case"fract":return this.builtins.Fract(i,m);case"frexp":return this.builtins.Frexp(i,m);case"insertBits":return this.builtins.InsertBits(i,m);case"inverseSqrt":return this.builtins.InverseSqrt(i,m);case"ldexp":return this.builtins.Ldexp(i,m);case"length":return this.builtins.Length(i,m);case"log":return this.builtins.Log(i,m);case"log2":return this.builtins.Log2(i,m);case"max":return this.builtins.Max(i,m);case"min":return this.builtins.Min(i,m);case"mix":return this.builtins.Mix(i,m);case"modf":return this.builtins.Modf(i,m);case"normalize":return this.builtins.Normalize(i,m);case"pow":return this.builtins.Pow(i,m);case"quantizeToF16":return this.builtins.QuantizeToF16(i,m);case"radians":return this.builtins.Radians(i,m);case"reflect":return this.builtins.Reflect(i,m);case"refract":return this.builtins.Refract(i,m);case"reverseBits":return this.builtins.ReverseBits(i,m);case"round":return this.builtins.Round(i,m);case"saturate":return this.builtins.Saturate(i,m);case"sign":return this.builtins.Sign(i,m);case"sin":return this.builtins.Sin(i,m);case"sinh":return this.builtins.Sinh(i,m);case"smoothStep":return this.builtins.SmoothStep(i,m);case"sqrt":return this.builtins.Sqrt(i,m);case"step":return this.builtins.Step(i,m);case"tan":return this.builtins.Tan(i,m);case"tanh":return this.builtins.Tanh(i,m);case"transpose":return this.builtins.Transpose(i,m);case"trunc":return this.builtins.Trunc(i,m);case"dpdx":return this.builtins.Dpdx(i,m);case"dpdxCoarse":return this.builtins.DpdxCoarse(i,m);case"dpdxFine":return this.builtins.DpdxFine(i,m);case"dpdy":return this.builtins.Dpdy(i,m);case"dpdyCoarse":return this.builtins.DpdyCoarse(i,m);case"dpdyFine":return this.builtins.DpdyFine(i,m);case"fwidth":return this.builtins.Fwidth(i,m);case"fwidthCoarse":return this.builtins.FwidthCoarse(i,m);case"fwidthFine":return this.builtins.FwidthFine(i,m);case"textureDimensions":return this.builtins.TextureDimensions(i,m);case"textureGather":return this.builtins.TextureGather(i,m);case"textureGatherCompare":return this.builtins.TextureGatherCompare(i,m);case"textureLoad":return this.builtins.TextureLoad(i,m);case"textureNumLayers":return this.builtins.TextureNumLayers(i,m);case"textureNumLevels":return this.builtins.TextureNumLevels(i,m);case"textureNumSamples":return this.builtins.TextureNumSamples(i,m);case"textureSample":return this.builtins.TextureSample(i,m);case"textureSampleBias":return this.builtins.TextureSampleBias(i,m);case"textureSampleCompare":return this.builtins.TextureSampleCompare(i,m);case"textureSampleCompareLevel":return this.builtins.TextureSampleCompareLevel(i,m);case"textureSampleGrad":return this.builtins.TextureSampleGrad(i,m);case"textureSampleLevel":return this.builtins.TextureSampleLevel(i,m);case"textureSampleBaseClampToEdge":return this.builtins.TextureSampleBaseClampToEdge(i,m);case"textureStore":return this.builtins.TextureStore(i,m);case"atomicLoad":return this.builtins.AtomicLoad(i,m);case"atomicStore":return this.builtins.AtomicStore(i,m);case"atomicAdd":return this.builtins.AtomicAdd(i,m);case"atomicSub":return this.builtins.AtomicSub(i,m);case"atomicMax":return this.builtins.AtomicMax(i,m);case"atomicMin":return this.builtins.AtomicMin(i,m);case"atomicAnd":return this.builtins.AtomicAnd(i,m);case"atomicOr":return this.builtins.AtomicOr(i,m);case"atomicXor":return this.builtins.AtomicXor(i,m);case"atomicExchange":return this.builtins.AtomicExchange(i,m);case"atomicCompareExchangeWeak":return this.builtins.AtomicCompareExchangeWeak(i,m);case"pack4x8snorm":return this.builtins.Pack4x8snorm(i,m);case"pack4x8unorm":return this.builtins.Pack4x8unorm(i,m);case"pack4xI8":return this.builtins.Pack4xI8(i,m);case"pack4xU8":return this.builtins.Pack4xU8(i,m);case"pack4x8Clamp":return this.builtins.Pack4x8Clamp(i,m);case"pack4xU8Clamp":return this.builtins.Pack4xU8Clamp(i,m);case"pack2x16snorm":return this.builtins.Pack2x16snorm(i,m);case"pack2x16unorm":return this.builtins.Pack2x16unorm(i,m);case"pack2x16float":return this.builtins.Pack2x16float(i,m);case"unpack4x8snorm":return this.builtins.Unpack4x8snorm(i,m);case"unpack4x8unorm":return this.builtins.Unpack4x8unorm(i,m);case"unpack4xI8":return this.builtins.Unpack4xI8(i,m);case"unpack4xU8":return this.builtins.Unpack4xU8(i,m);case"unpack2x16snorm":return this.builtins.Unpack2x16snorm(i,m);case"unpack2x16unorm":return this.builtins.Unpack2x16unorm(i,m);case"unpack2x16float":return this.builtins.Unpack2x16float(i,m);case"storageBarrier":return this.builtins.StorageBarrier(i,m);case"textureBarrier":return this.builtins.TextureBarrier(i,m);case"workgroupBarrier":return this.builtins.WorkgroupBarrier(i,m);case"workgroupUniformLoad":return this.builtins.WorkgroupUniformLoad(i,m);case"subgroupAdd":return this.builtins.SubgroupAdd(i,m);case"subgroupExclusiveAdd":return this.builtins.SubgroupExclusiveAdd(i,m);case"subgroupInclusiveAdd":return this.builtins.SubgroupInclusiveAdd(i,m);case"subgroupAll":return this.builtins.SubgroupAll(i,m);case"subgroupAnd":return this.builtins.SubgroupAnd(i,m);case"subgroupAny":return this.builtins.SubgroupAny(i,m);case"subgroupBallot":return this.builtins.SubgroupBallot(i,m);case"subgroupBroadcast":return this.builtins.SubgroupBroadcast(i,m);case"subgroupBroadcastFirst":return this.builtins.SubgroupBroadcastFirst(i,m);case"subgroupElect":return this.builtins.SubgroupElect(i,m);case"subgroupMax":return this.builtins.SubgroupMax(i,m);case"subgroupMin":return this.builtins.SubgroupMin(i,m);case"subgroupMul":return this.builtins.SubgroupMul(i,m);case"subgroupExclusiveMul":return this.builtins.SubgroupExclusiveMul(i,m);case"subgroupInclusiveMul":return this.builtins.SubgroupInclusiveMul(i,m);case"subgroupOr":return this.builtins.SubgroupOr(i,m);case"subgroupShuffle":return this.builtins.SubgroupShuffle(i,m);case"subgroupShuffleDown":return this.builtins.SubgroupShuffleDown(i,m);case"subgroupShuffleUp":return this.builtins.SubgroupShuffleUp(i,m);case"subgroupShuffleXor":return this.builtins.SubgroupShuffleXor(i,m);case"subgroupXor":return this.builtins.SubgroupXor(i,m);case"quadBroadcast":return this.builtins.QuadBroadcast(i,m);case"quadSwapDiagonal":return this.builtins.QuadSwapDiagonal(i,m);case"quadSwapX":return this.builtins.QuadSwapX(i,m);case"quadSwapY":return this.builtins.QuadSwapY(i,m)}const g=m.getFunction(i.name);if(g){const x=m.clone();for(let m=0;m<g.node.args.length;++m){const _=g.node.args[m],b=this.evalExpression(i.args[m],x);x.setVariable(_.name,b,_)}return this._execStatements(g.node.body,x)}return null}_callConstructorValue(i,m){if(!i.args||0===i.args.length)return new Oe(0,this.getTypeInfo(i.type));const g=this.evalExpression(i.args[0],m);return g.typeInfo=this.getTypeInfo(i.type),g.getSubData(this,i.postfix,m).clone()}_callConstructorVec(i,m){const g=this.getTypeInfo(i.type),x=i.type.getTypeName(),_=sr[x];if(void 0===_)return console.error(`Invalid vec constructor ${x}. Line ${i.line}`),null;const b=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)b.push(i)}else b.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);if(i instanceof Fe){const m=i.data;for(let i=0;i<m.length;++i){let g=m[i];b.push(g)}}else if(i instanceof Oe){let m=i.value;b.push(m)}}if(i.type instanceof oe&&null===i.type.format&&(i.type.format=oe.f32),0===b.length){const x=new Array(_).fill(0);return new Fe(x,g).getSubData(this,i.postfix,m)}if(1===b.length)for(;b.length<_;)b.push(b[0]);return b.length<_?(console.error(`Invalid vec constructor. Line ${i.line}`),null):new Fe(b.length>_?b.slice(0,_):b,g).getSubData(this,i.postfix,m)}_callConstructorMatrix(i,m){const g=this.getTypeInfo(i.type),x=i.type.getTypeName(),_=or[x];if(void 0===_)return console.error(`Invalid matrix constructor ${x}. Line ${i.line}`),null;const b=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)b.push(i)}else b.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);i instanceof Fe?b.push(...i.data):i instanceof Oe?b.push(i.value):i instanceof Me&&b.push(...i.data)}if(g instanceof a&&null===g.format&&(g.format=this.getTypeInfo("f32")),0===b.length){const x=new Array(_[2]).fill(0);return new Me(x,g).getSubData(this,i.postfix,m)}return b.length!==_[2]?(console.error(`Invalid matrix constructor. Line ${i.line}`),null):new Me(b,g).getSubData(this,i.postfix,m)}}pt._breakObj=new De(new e("BREAK",null),null),pt._continueObj=new De(new e("CONTINUE",null),null),pt._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class dt{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class mt{constructor(){this._tokens=[],this._current=0,this._currentLine=1,this._deferArrayCountEval=[],this._currentLoop=[],this._context=new dt,this._exec=new pt,this._forwardTypeCount=0}parse(i){this._initialize(i),this._deferArrayCountEval.length=0;const m=[];for(;!this._isAtEnd();){const i=this._global_decl_or_directive();if(!i)break;m.push(i)}if(this._deferArrayCountEval.length>0){for(const m of this._deferArrayCountEval){const g=m.arrayType,x=m.countNode;if(x instanceof me){const m=x.name,_=this._context.constants.get(m);if(_)try{const i=_.constEvaluate(this._exec);g.count=i}catch(i){}}}this._deferArrayCountEval.length=0}if(this._forwardTypeCount>0)for(const i of m)i.search(i=>{i instanceof Le||i instanceof le?i.type=this._forwardType(i.type):i instanceof ce?i.format=this._forwardType(i.format):i instanceof B||i instanceof M||i instanceof U?i.type=this._forwardType(i.type):i instanceof C?i.returnType=this._forwardType(i.returnType):i instanceof Ee&&(i.type=this._forwardType(i.type))});return m}_forwardType(i){if(i instanceof ae){const m=this._getType(i.name);if(m)return m}else i instanceof le?i.type=this._forwardType(i.type):i instanceof ce&&(i.format=this._forwardType(i.format));return i}_initialize(i){if(i)if("string"==typeof i){const m=new ze(i);this._tokens=m.scanTokens()}else this._tokens=i;else this._tokens=[];this._current=0}_updateNode(i,m){return i.line=null!=m?m:this._currentLine,i}_error(i,m){return{token:i,message:m,toString:()=>`${m}`}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==qe.eof}_match(i){if(i instanceof We)return!!this._check(i)&&(this._advance(),!0);for(let m=0,g=i.length;m<g;++m){const g=i[m];if(this._check(g))return this._advance(),!0}return!1}_consume(i,m){if(this._check(i))return this._advance();throw this._error(this._peek(),`${m}. Line:${this._currentLine}`)}_check(i){if(this._isAtEnd())return!1;const m=this._peek();if(i instanceof Array){const g=m.type;let x=!1;for(const m of i){if(g===m)return!0;m===qe.tokens.name&&(x=!0)}if(x){const i=qe.tokens.name.rule.exec(m.lexeme);if(i&&0==i.index&&i[0]==m.lexeme)return!0}return!1}if(m.type===i)return!0;if(i===qe.tokens.name){const i=qe.tokens.name.rule.exec(m.lexeme);return i&&0==i.index&&i[0]==m.lexeme}return!1}_advance(){var i,m;return this._currentLine=null!==(m=null===(i=this._peek())||void 0===i?void 0:i.line)&&void 0!==m?m:-1,this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._match(qe.keywords.alias)){const i=this._type_alias();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.diagnostic)){const i=this._diagnostic();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.requires)){const i=this._requires_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.enable)){const i=this._enable_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}const i=this._attribute();if(this._check(qe.keywords.var)){const m=this._global_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.override)){const m=this._override_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.let)){const m=this._global_let_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.const)){const m=this._global_const_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.struct)){const m=this._struct_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.fn)){const m=this._function_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}return null}_function_decl(){if(!this._match(qe.keywords.fn))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected function name.").toString();this._consume(qe.tokens.paren_left,"Expected '(' for function arguments.");const g=[];if(!this._check(qe.tokens.paren_right))do{if(this._check(qe.tokens.paren_right))break;const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected argument name.").toString();this._consume(qe.tokens.colon,"Expected ':' for argument type.");const x=this._attribute(),_=this._type_decl();null!=_&&(_.attributes=x,g.push(this._updateNode(new Ee(m,_,i))))}while(this._match(qe.tokens.comma));this._consume(qe.tokens.paren_right,"Expected ')' after function arguments.");let x=null;if(this._match(qe.tokens.arrow)){const i=this._attribute();x=this._type_decl(),null!=x&&(x.attributes=i)}const _=this._compound_statement(),b=this._currentLine;return this._updateNode(new C(m,g,x,_,i,b),i)}_compound_statement(){const i=[];for(this._consume(qe.tokens.brace_left,"Expected '{' for block.");!this._check(qe.tokens.brace_right);){const m=this._statement();null!==m&&i.push(m)}return this._consume(qe.tokens.brace_right,"Expected '}' for block."),i}_statement(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._check(qe.tokens.attr)&&this._attribute(),this._check(qe.keywords.if))return this._if_statement();if(this._check(qe.keywords.switch))return this._switch_statement();if(this._check(qe.keywords.loop))return this._loop_statement();if(this._check(qe.keywords.for))return this._for_statement();if(this._check(qe.keywords.while))return this._while_statement();if(this._check(qe.keywords.continuing))return this._continuing_statement();if(this._check(qe.keywords.static_assert))return this._static_assert_statement();if(this._check(qe.tokens.brace_left))return this._compound_statement();let i=null;if(this._check(qe.keywords.return))i=this._return_statement();else if(this._check([qe.keywords.var,qe.keywords.let,qe.keywords.const]))i=this._variable_statement();else if(this._match(qe.keywords.discard))i=this._updateNode(new te);else if(this._match(qe.keywords.break)){const m=this._updateNode(new ne);if(this._currentLoop.length>0){const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m,this._check(qe.keywords.if)&&(this._advance(),m.condition=this._optional_paren_expression())}else if(this._match(qe.keywords.continue)){const m=this._updateNode(new se);if(!(this._currentLoop.length>0))throw this._error(this._peek(),`Continue statement must be inside a loop. Line:${m.line}`);{const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m}else i=this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement();return null!=i&&this._consume(qe.tokens.semicolon,"Expected ';' after statement."),i}_static_assert_statement(){if(!this._match(qe.keywords.static_assert))return null;const i=this._currentLine,m=this._optional_paren_expression();return this._updateNode(new D(m),i)}_while_statement(){if(!this._match(qe.keywords.while))return null;const i=this._updateNode(new N(null,null));return this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_continuing_statement(){const i=this._currentLoop.length>0?this._currentLoop[this._currentLoop.length-1].id:-1;if(!this._match(qe.keywords.continuing))return null;const m=this._currentLine,g=this._compound_statement();return this._updateNode(new V(g,i),m)}_for_statement(){if(!this._match(qe.keywords.for))return null;this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._updateNode(new O(null,null,null,null));return this._currentLoop.push(i),i.init=this._check(qe.tokens.semicolon)?null:this._for_init(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.condition=this._check(qe.tokens.semicolon)?null:this._short_circuit_or_expression(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.increment=this._check(qe.tokens.paren_right)?null:this._for_increment(),this._consume(qe.tokens.paren_right,"Expected ')'."),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(qe.keywords.var)){const i=this._variable_decl();if(null===i)throw this._error(this._peek(),"Variable declaration expected.");let m=null;return this._match(qe.tokens.equal)&&(m=this._short_circuit_or_expression()),this._updateNode(new B(i.name,i.type,i.storage,i.access,m),i.line)}if(this._match(qe.keywords.let)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for let.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for let.");const x=this._short_circuit_or_expression();return this._updateNode(new M(m,g,null,null,x),i)}if(this._match(qe.keywords.const)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for const.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for const.");const x=this._short_circuit_or_expression();return null===g&&x instanceof ge&&(g=x.type),this._updateNode(new U(m,g,null,null,x),i)}return null}_increment_decrement_statement(){const i=this._current,m=this._unary_expression();if(null==m)return null;if(!this._check(qe.increment_operators))return this._current=i,null;const g=this._consume(qe.increment_operators,"Expected increment operator");return this._updateNode(new Yn(g.type===qe.tokens.plus_plus?qn.increment:qn.decrement,m))}_assignment_statement(){let i=null;const m=this._currentLine;if(this._check(qe.tokens.brace_right))return null;let g=this._match(qe.tokens.underscore);if(g||(i=this._unary_expression()),!g&&null==i)return null;const x=this._consume(qe.assignment_operators,"Expected assignment operator."),_=this._short_circuit_or_expression();return this._updateNode(new R(Kn.parse(x.lexeme),i,_),m)}_func_call_statement(){if(!this._check(qe.tokens.ident))return null;const i=this._currentLine,m=this._current,g=this._consume(qe.tokens.ident,"Expected function name."),x=this._argument_expression_list();return null===x?(this._current=m,null):this._updateNode(new G(g.lexeme,x),i)}_loop_statement(){if(!this._match(qe.keywords.loop))return null;this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for loop.");const i=this._updateNode(new X([],null));this._currentLoop.push(i);let m=this._statement();for(;null!==m;){if(Array.isArray(m))for(let g of m)i.body.push(g);else i.body.push(m);if(m instanceof V){i.continuing=m;break}m=this._statement()}return this._currentLoop.pop(),this._consume(qe.tokens.brace_right,"Expected '}' for loop."),i}_switch_statement(){if(!this._match(qe.keywords.switch))return null;const i=this._updateNode(new j(null,[]));if(this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for switch."),i.cases=this._switch_body(),null==i.cases||0==i.cases.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(qe.tokens.brace_right,"Expected '}' for switch."),this._currentLoop.pop(),i}_switch_body(){const i=[];let m=!1;for(;this._check([qe.keywords.default,qe.keywords.case]);){if(this._match(qe.keywords.case)){const g=this._case_selectors();for(const i of g)if(i instanceof Te){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");m=!0;break}this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch case.");const x=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch case."),i.push(this._updateNode(new Se(g,x)))}if(this._match(qe.keywords.default)){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch default.");const g=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch default."),i.push(this._updateNode(new Ae(g)))}}return i}_case_selectors(){const i=[];for(this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());this._match(qe.tokens.comma);)this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());return i}_case_body(){if(this._match(qe.keywords.fallthrough))return this._consume(qe.tokens.semicolon,"Expected ';'"),[];let i=this._statement();if(null==i)return[];i instanceof Array||(i=[i]);const m=this._case_body();return 0==m.length?i:[...i,m[0]]}_if_statement(){if(!this._match(qe.keywords.if))return null;const i=this._currentLine,m=this._optional_paren_expression();this._check(qe.tokens.attr)&&this._attribute();const g=this._compound_statement();let x=[];this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),x=this._elseif_statement(x));let _=null;return this._match(qe.keywords.else)&&(this._check(qe.tokens.attr)&&this._attribute(),_=this._compound_statement()),this._updateNode(new Z(m,g,x,_),i)}_match_elseif(){return this._tokens[this._current].type===qe.keywords.else&&this._tokens[this._current+1].type===qe.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(i=[]){const m=this._optional_paren_expression(),g=this._compound_statement();return i.push(this._updateNode(new $e(m,g))),this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),this._elseif_statement(i)),i}_return_statement(){if(!this._match(qe.keywords.return))return null;const i=this._short_circuit_or_expression();return this._updateNode(new Q(i))}_short_circuit_or_expression(){let i=this._short_circuit_and_expr();for(;this._match(qe.tokens.or_or);)i=this._updateNode(new ke(this._previous().toString(),i,this._short_circuit_and_expr()));return i}_short_circuit_and_expr(){let i=this._inclusive_or_expression();for(;this._match(qe.tokens.and_and);)i=this._updateNode(new ke(this._previous().toString(),i,this._inclusive_or_expression()));return i}_inclusive_or_expression(){let i=this._exclusive_or_expression();for(;this._match(qe.tokens.or);)i=this._updateNode(new ke(this._previous().toString(),i,this._exclusive_or_expression()));return i}_exclusive_or_expression(){let i=this._and_expression();for(;this._match(qe.tokens.xor);)i=this._updateNode(new ke(this._previous().toString(),i,this._and_expression()));return i}_and_expression(){let i=this._equality_expression();for(;this._match(qe.tokens.and);)i=this._updateNode(new ke(this._previous().toString(),i,this._equality_expression()));return i}_equality_expression(){const i=this._relational_expression();return this._match([qe.tokens.equal_equal,qe.tokens.not_equal])?this._updateNode(new ke(this._previous().toString(),i,this._relational_expression())):i}_relational_expression(){let i=this._shift_expression();for(;this._match([qe.tokens.less_than,qe.tokens.greater_than,qe.tokens.less_than_equal,qe.tokens.greater_than_equal]);)i=this._updateNode(new ke(this._previous().toString(),i,this._shift_expression()));return i}_shift_expression(){let i=this._additive_expression();for(;this._match([qe.tokens.shift_left,qe.tokens.shift_right]);)i=this._updateNode(new ke(this._previous().toString(),i,this._additive_expression()));return i}_additive_expression(){let i=this._multiplicative_expression();for(;this._match([qe.tokens.plus,qe.tokens.minus]);)i=this._updateNode(new ke(this._previous().toString(),i,this._multiplicative_expression()));return i}_multiplicative_expression(){let i=this._unary_expression();for(;this._match([qe.tokens.star,qe.tokens.forward_slash,qe.tokens.modulo]);)i=this._updateNode(new ke(this._previous().toString(),i,this._unary_expression()));return i}_unary_expression(){return this._match([qe.tokens.minus,qe.tokens.bang,qe.tokens.tilde,qe.tokens.star,qe.tokens.and])?this._updateNode(new we(this._previous().toString(),this._unary_expression())):this._singular_expression()}_singular_expression(){const i=this._primary_expression(),m=this._postfix_expression();return m&&(i.postfix=m),i}_postfix_expression(){if(this._match(qe.tokens.bracket_left)){const i=this._short_circuit_or_expression();this._consume(qe.tokens.bracket_right,"Expected ']'.");const m=this._updateNode(new be(i)),g=this._postfix_expression();return g&&(m.postfix=g),m}if(this._match(qe.tokens.period)){const i=this._consume(qe.tokens.name,"Expected member name."),m=this._postfix_expression(),g=this._updateNode(new fe(i.lexeme));return m&&(g.postfix=m),g}return null}_getStruct(i){return this._context.aliases.has(i)?this._context.aliases.get(i).type:this._context.structs.has(i)?this._context.structs.get(i):null}_getType(i){const m=this._getStruct(i);if(null!==m)return m;switch(i){case"void":return re.void;case"bool":return re.bool;case"i32":return re.i32;case"u32":return re.u32;case"f32":return re.f32;case"f16":return re.f16;case"vec2f":return oe.vec2f;case"vec3f":return oe.vec3f;case"vec4f":return oe.vec4f;case"vec2i":return oe.vec2i;case"vec3i":return oe.vec3i;case"vec4i":return oe.vec4i;case"vec2u":return oe.vec2u;case"vec3u":return oe.vec3u;case"vec4u":return oe.vec4u;case"vec2h":return oe.vec2h;case"vec3h":return oe.vec3h;case"vec4h":return oe.vec4h;case"mat2x2f":return oe.mat2x2f;case"mat2x3f":return oe.mat2x3f;case"mat2x4f":return oe.mat2x4f;case"mat3x2f":return oe.mat3x2f;case"mat3x3f":return oe.mat3x3f;case"mat3x4f":return oe.mat3x4f;case"mat4x2f":return oe.mat4x2f;case"mat4x3f":return oe.mat4x3f;case"mat4x4f":return oe.mat4x4f;case"mat2x2h":return oe.mat2x2h;case"mat2x3h":return oe.mat2x3h;case"mat2x4h":return oe.mat2x4h;case"mat3x2h":return oe.mat3x2h;case"mat3x3h":return oe.mat3x3h;case"mat3x4h":return oe.mat3x4h;case"mat4x2h":return oe.mat4x2h;case"mat4x3h":return oe.mat4x3h;case"mat4x4h":return oe.mat4x4h;case"mat2x2i":return oe.mat2x2i;case"mat2x3i":return oe.mat2x3i;case"mat2x4i":return oe.mat2x4i;case"mat3x2i":return oe.mat3x2i;case"mat3x3i":return oe.mat3x3i;case"mat3x4i":return oe.mat3x4i;case"mat4x2i":return oe.mat4x2i;case"mat4x3i":return oe.mat4x3i;case"mat4x4i":return oe.mat4x4i;case"mat2x2u":return oe.mat2x2u;case"mat2x3u":return oe.mat2x3u;case"mat2x4u":return oe.mat2x4u;case"mat3x2u":return oe.mat3x2u;case"mat3x3u":return oe.mat3x3u;case"mat3x4u":return oe.mat3x4u;case"mat4x2u":return oe.mat4x2u;case"mat4x3u":return oe.mat4x3u;case"mat4x4u":return oe.mat4x4u}return null}_validateTypeRange(i,m){if("i32"===m.name){if(i<-2147483648||i>2147483647)throw this._error(this._previous(),`Value out of range for i32:${i}. Line:${this._currentLine}.`)}else if("u32"===m.name&&(i<0||i>4294967295))throw this._error(this._previous(),`Value out of range for u32:${i}. Line:${this._currentLine}.`)}_primary_expression(){if(this._match(qe.tokens.ident)){const i=this._previous().toString();if(this._check(qe.tokens.paren_left)){const m=this._argument_expression_list(),g=this._getType(i);return null!==g?this._updateNode(new pe(g,m)):this._updateNode(new de(i,m))}if(this._context.constants.has(i)){const m=this._context.constants.get(i);return this._updateNode(new _e(i,m.value))}return this._updateNode(new me(i))}if(this._match(qe.tokens.int_literal)){const i=this._previous().toString();let m=i.endsWith("i")||i.endsWith("i")?re.i32:i.endsWith("u")||i.endsWith("U")?re.u32:re.x32;const g=parseInt(i);return this._validateTypeRange(g,m),this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(m)),m))}if(this._match(qe.tokens.uint_literal)){const i=parseInt(this._previous().toString());return this._validateTypeRange(i,re.u32),this._updateNode(new ge(new Oe(i,this._exec.getTypeInfo(re.u32)),re.u32))}if(this._match([qe.tokens.decimal_float_literal,qe.tokens.hex_float_literal])){let i=this._previous().toString(),m=i.endsWith("h");m&&(i=i.substring(0,i.length-1));const g=parseFloat(i);this._validateTypeRange(g,m?re.f16:re.f32);const x=m?re.f16:re.f32;return this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(x)),x))}if(this._match([qe.keywords.true,qe.keywords.false])){let i=this._previous().toString()===qe.keywords.true.rule;return this._updateNode(new ge(new Oe(i?1:0,this._exec.getTypeInfo(re.bool)),re.bool))}if(this._check(qe.tokens.paren_left))return this._paren_expression();if(this._match(qe.keywords.bitcast)){this._consume(qe.tokens.less_than,"Expected '<'.");const i=this._type_decl();this._consume(qe.tokens.greater_than,"Expected '>'.");const m=this._paren_expression();return this._updateNode(new xe(i,m))}const i=this._type_decl(),m=this._argument_expression_list();return this._updateNode(new pe(i,m))}_argument_expression_list(){if(!this._match(qe.tokens.paren_left))return null;const i=[];do{if(this._check(qe.tokens.paren_right))break;const m=this._short_circuit_or_expression();i.push(m)}while(this._match(qe.tokens.comma));return this._consume(qe.tokens.paren_right,"Expected ')' for agument list"),i}_optional_paren_expression(){this._match(qe.tokens.paren_left);const i=this._short_circuit_or_expression();return this._match(qe.tokens.paren_right),i}_paren_expression(){this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._short_circuit_or_expression();return this._consume(qe.tokens.paren_right,"Expected ')'."),i}_struct_decl(){if(!this._match(qe.keywords.struct))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected name for struct.").toString();this._consume(qe.tokens.brace_left,"Expected '{' for struct body.");const g=[];for(;!this._check(qe.tokens.brace_right);){const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected variable name.").toString();this._consume(qe.tokens.colon,"Expected ':' for struct member type.");const x=this._attribute(),_=this._type_decl();null!=_&&(_.attributes=x),this._check(qe.tokens.brace_right)?this._match(qe.tokens.comma):this._consume(qe.tokens.comma,"Expected ',' for struct member."),g.push(this._updateNode(new Le(m,_,i)))}this._consume(qe.tokens.brace_right,"Expected '}' after struct body.");const x=this._currentLine,_=this._updateNode(new ie(m,g,i,x),i);return this._context.structs.set(m,_),_}_global_variable_decl(){const i=this._variable_decl();if(!i)return null;if(this._match(qe.tokens.equal)){const m=this._const_expression();i.value=m}if(null!==i.type&&i.value instanceof ge){if("x32"!==i.value.type.name&&i.type.getTypeName()!==i.value.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${i.value.type.name} to ${i.type.name}. Line:${this._currentLine}`);i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type),i.value.type=i.type}else null===i.type&&i.value instanceof ge&&(i.type="x32"===i.value.type.name?re.i32:i.value.type,i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type));return i}_override_variable_decl(){const i=this._override_decl();return i&&this._match(qe.tokens.equal)&&(i.value=this._const_expression()),i}_global_const_decl(){var i;if(!this._match(qe.keywords.const))return null;const m=this._consume(qe.tokens.name,"Expected variable name"),g=this._currentLine;let x=null;if(this._match(qe.tokens.colon)){const i=this._attribute();x=this._type_decl(),null!=x&&(x.attributes=i)}let _=null;this._consume(qe.tokens.equal,"const declarations require an assignment");const b=this._short_circuit_or_expression();try{let i=[re.f32],g=b.constEvaluate(this._exec,i);g instanceof Oe&&this._validateTypeRange(g.value,i[0]),i[0]instanceof oe&&null===i[0].format&&g.typeInfo instanceof a&&null!==g.typeInfo.format&&("f16"===g.typeInfo.format.name?i[0].format=re.f16:"f32"===g.typeInfo.format.name?i[0].format=re.f32:"i32"===g.typeInfo.format.name?i[0].format=re.i32:"u32"===g.typeInfo.format.name?i[0].format=re.u32:"bool"===g.typeInfo.format.name?i[0].format=re.bool:console.error(`TODO:impelement template format type ${g.typeInfo.format.name}`)),_=this._updateNode(new ge(g,i[0])),this._exec.context.setVariable(m.toString(),g)}catch(i){_=b}if(null!==x&&_ instanceof ge){if("x32"!==_.type.name&&x.getTypeName()!==_.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${_.type.name} to ${x.name}. Line:${this._currentLine}`);_.type=x,_.isScalar&&this._validateTypeRange(_.scalarValue,_.type)}else null===x&&_ instanceof ge&&(x=null!==(i=null==_?void 0:_.type)&&void 0!==i?i:re.f32,x===re.x32&&(x=re.i32));const y=this._updateNode(new U(m.toString(),x,"","",_),g);return this._context.constants.set(y.name,y),y}_global_let_decl(){if(!this._match(qe.keywords.let))return null;const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected variable name");let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}let x=null;if(this._match(qe.tokens.equal)&&(x=this._const_expression()),null!==g&&x instanceof ge){if("x32"!==x.type.name&&g.getTypeName()!==x.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${x.type.name} to ${g.name}. Line:${this._currentLine}`);x.type=g}else null===g&&x instanceof ge&&(g="x32"===x.type.name?re.i32:x.type);return x instanceof ge&&x.isScalar&&this._validateTypeRange(x.scalarValue,g),this._updateNode(new M(m.toString(),g,"","",x),i)}_const_expression(){return this._short_circuit_or_expression()}_variable_decl(){if(!this._match(qe.keywords.var))return null;const i=this._currentLine;let m="",g="";this._match(qe.tokens.less_than)&&(m=this._consume(qe.storage_class,"Expected storage_class.").toString(),this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode.").toString()),this._consume(qe.tokens.greater_than,"Expected '>'."));const x=this._consume(qe.tokens.name,"Expected variable name");let _=null;if(this._match(qe.tokens.colon)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}return this._updateNode(new B(x.toString(),_,m,g,null),i)}_override_decl(){if(!this._match(qe.keywords.override))return null;const i=this._consume(qe.tokens.name,"Expected variable name");let m=null;if(this._match(qe.tokens.colon)){const i=this._attribute();m=this._type_decl(),null!=m&&(m.attributes=i)}return this._updateNode(new F(i.toString(),m,null))}_diagnostic(){this._consume(qe.tokens.paren_left,"Expected '('");const i=this._consume(qe.tokens.ident,"Expected severity control name.");this._consume(qe.tokens.comma,"Expected ','");let m=this._consume(qe.tokens.ident,"Expected diagnostic rule name.").toString();return this._match(qe.tokens.period)&&(m+=`.${this._consume(qe.tokens.ident,"Expected diagnostic message.").toString()}`),this._consume(qe.tokens.paren_right,"Expected ')'"),this._updateNode(new J(i.toString(),m))}_enable_directive(){const i=this._consume(qe.tokens.ident,"identity expected.");return this._updateNode(new Y(i.toString()))}_requires_directive(){const i=[this._consume(qe.tokens.ident,"identity expected.").toString()];for(;this._match(qe.tokens.comma);){const m=this._consume(qe.tokens.ident,"identity expected.");i.push(m.toString())}return this._updateNode(new K(i))}_type_alias(){const i=this._consume(qe.tokens.ident,"identity expected.");this._consume(qe.tokens.equal,"Expected '=' for type alias.");let m=this._type_decl();if(null===m)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(m.name)&&(m=this._context.aliases.get(m.name).type);const g=this._updateNode(new ee(i.toString(),m));return this._context.aliases.set(g.name,g),g}_type_decl(){if(this._check([qe.tokens.ident,...qe.texel_format,qe.keywords.bool,qe.keywords.f32,qe.keywords.i32,qe.keywords.u32])){const i=this._advance().toString();if(this._context.structs.has(i))return this._context.structs.get(i);if(this._context.aliases.has(i))return this._context.aliases.get(i).type;if(!this._getType(i)){const m=this._updateNode(new ae(i));return this._forwardTypeCount++,m}return this._updateNode(new re(i))}let i=this._texture_sampler_types();if(i)return i;if(this._check(qe.template_types)){let i=this._advance().toString(),m=null,g=null;return this._match(qe.tokens.less_than)&&(m=this._type_decl(),g=null,this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for type.")),this._updateNode(new oe(i,m,g))}if(this._match(qe.keywords.ptr)){let i=this._previous().toString();this._consume(qe.tokens.less_than,"Expected '<' for pointer.");const m=this._consume(qe.storage_class,"Expected storage_class for pointer");this._consume(qe.tokens.comma,"Expected ',' for pointer.");const g=this._type_decl();let x=null;return this._match(qe.tokens.comma)&&(x=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for pointer."),this._updateNode(new le(i,m.toString(),g,x))}const m=this._attribute();if(this._match(qe.keywords.array)){let g=null,x=-1;const _=this._previous();let b=null;if(this._match(qe.tokens.less_than)){g=this._type_decl(),this._context.aliases.has(g.name)&&(g=this._context.aliases.get(g.name).type);let m="";if(this._match(qe.tokens.comma)){b=this._shift_expression();try{m=b.constEvaluate(this._exec).toString(),b=null}catch(i){m="1"}}this._consume(qe.tokens.greater_than,"Expected '>' for array."),x=m?parseInt(m):0}const y=this._updateNode(new ce(_.toString(),m,g,x));return b&&this._deferArrayCountEval.push({arrayType:y,countNode:b}),y}return null}_texture_sampler_types(){if(this._match(qe.sampler_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.depth_texture_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.sampled_texture_type)||this._match(qe.multisampled_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._type_decl();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,null))}if(this._match(qe.storage_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._consume(qe.texel_format,"Invalid texel format.").toString();this._consume(qe.tokens.comma,"Expected ',' after texel format.");const g=this._consume(qe.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,g))}return null}_attribute(){let i=[];for(;this._match(qe.tokens.attr);){const m=this._consume(qe.attribute_name,"Expected attribute name"),g=this._updateNode(new Ce(m.toString(),null));if(this._match(qe.tokens.paren_left)){if(g.value=this._consume(qe.literal_or_ident,"Expected attribute value").toString(),this._check(qe.tokens.comma)){this._advance();do{const i=this._consume(qe.literal_or_ident,"Expected attribute value").toString();g.value instanceof Array||(g.value=[g.value]),g.value.push(i)}while(this._match(qe.tokens.comma))}this._consume(qe.tokens.paren_right,"Expected ')'")}i.push(g)}return 0==i.length?null:i}}class _t extends rt{constructor(i){super(),i&&this.update(i)}update(i){const m=(new mt).parse(i);this.updateAST(m)}}class UniformType{static get i32(){return{numElements:1,align:4,size:4,type:"i32",wgslType:"i32",View:Int32Array}}static get u32(){return{numElements:1,align:4,size:4,type:"u32",wgslType:"u32",View:Uint32Array}}static get f32(){return{numElements:1,align:4,size:4,type:"f32",wgslType:"f32",View:Float32Array}}static get f16(){return{numElements:1,align:2,size:2,type:"f16",wgslType:"f16",View:Uint16Array}}static get vec2f32(){return{numElements:2,align:8,size:8,type:"f32",wgslType:"vec2<f32>",View:Float32Array}}static get vec2i32(){return{numElements:2,align:8,size:8,type:"i32",wgslType:"vec2<i32>",View:Int32Array}}static get vec2u32(){return{numElements:2,align:8,size:8,type:"u32",wgslType:"vec2<u32>",View:Uint32Array}}static get vec2u16(){return{numElements:2,align:4,size:4,type:"u16",wgslType:"vec2<u16>",View:Uint16Array}}static get vec3i32(){return{numElements:3,align:16,size:12,type:"i32",wgslType:"vec3<i32>",View:Int32Array}}static get vec3u32(){return{numElements:3,align:16,size:12,type:"u32",wgslType:"vec3<u32>",View:Uint32Array}}static get vec3f32(){return{numElements:3,align:16,size:12,type:"f32",wgslType:"vec3<f32>",View:Float32Array}}static get vec3u16(){return{numElements:3,align:8,size:6,type:"u16",wgslType:"vec3<u16>",View:Uint16Array}}static get vec4i32(){return{numElements:4,align:16,size:16,type:"i32",wgslType:"vec4<i32>",View:Int32Array}}static get vec4u32(){return{numElements:4,align:16,size:16,type:"u32",wgslType:"vec4<u32>",View:Uint32Array}}static get vec4f32(){return{numElements:4,align:16,size:16,type:"f32",wgslType:"vec4<f32>",View:Float32Array}}static get vec4u16(){return{numElements:4,align:8,size:8,type:"u16",wgslType:"vec4<u16>",View:Uint16Array}}static get mat2x2f32(){return{numElements:4,align:8,size:16,type:"f32",wgslType:"mat2x2<f32>",View:Float32Array}}static get mat2x2u16(){return{numElements:4,align:4,size:8,type:"u16",wgslType:"mat2x2<u16>",View:Uint16Array}}static get mat3x2f32(){return{numElements:6,align:8,size:24,type:"f32",wgslType:"mat3x2<f32>",View:Float32Array}}static get mat3x2u16(){return{numElements:6,align:4,size:12,type:"u16",wgslType:"mat3x2<u16>",View:Uint16Array}}static get mat3x3f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat3x3<f32>",View:Float32Array}}static get mat4x2f32(){return{numElements:8,align:8,size:32,type:"f32",wgslType:"mat4x2<f32>",View:Float32Array}}static get mat4x2u16(){return{numElements:8,align:4,size:16,type:"u16",wgslType:"mat4x2<u16>",View:Uint16Array}}static get mat2x3f32(){return{numElements:8,align:16,size:32,type:"f32",wgslType:"mat2x3<f32>",View:Float32Array}}static get mat2x3u16(){return{numElements:8,align:8,size:16,type:"u16",wgslType:"mat2x3<u16>",View:Uint16Array}}static get mat4x4f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat4x4<f32>",View:Float32Array}}static get mat4x4u16(){return{numElements:16,align:8,size:32,type:"u16",wgslType:"mat4x4<u16>",View:Uint16Array}}}Object.freeze(UniformType);const ur={TILE_COUNT_X:32,TILE_COUNT_Y:32,TILE_COUNT_Z:48,WORKGROUP_SIZE_X:8,WORKGROUP_SIZE_Y:4,WORKGROUP_SIZE_Z:8,MAX_LIGHTS_PER_CLUSTER:100,MAX_CLUSTER_LIGHTS:1024,getTotalTileSize:()=>ur.TILE_COUNT_X*ur.TILE_COUNT_Y*ur.TILE_COUNT_Z,getClusterLightsBufferSize:()=>{const i=ur.getTotalTileSize();return 8*i+8*ur.MAX_LIGHTS_PER_CLUSTER*i+4},getDispatchSize:()=>[Math.ceil(ur.TILE_COUNT_X/ur.WORKGROUP_SIZE_X),Math.ceil(ur.TILE_COUNT_Y/ur.WORKGROUP_SIZE_Y),Math.ceil(ur.TILE_COUNT_Z/ur.WORKGROUP_SIZE_Z)]};Object.freeze(ur);const lr=Object.freeze({SYSTEM_UNIFORM:"struct DirectionalLight {direction:vec3<f32>,color:vec3<f32>,intensity:f32,\n};\nstruct AmbientLight {color:vec3<f32>,intensity:f32\n};\nstruct Camera {cameraMatrix:mat4x4<f32>,cameraPosition:vec3<f32>,nearClipping:f32,farClipping:f32\n};\nstruct SystemUniform {projectionMatrix:mat4x4<f32>,inverseProjectionMatrix:mat4x4<f32>,projectionCameraMatrix:mat4x4<f32>,camera:Camera,resolution:vec2<f32>,viewPosition:vec2<f32>,directionalLightCount:u32,directionalLights:array<DirectionalLight,3>,directionalLightProjectionViewMatrix:mat4x4<f32>,directionalLightProjectionMatrix:mat4x4<f32>,directionalLightViewMatrix:mat4x4<f32>,shadowDepthTextureSize:u32,bias:f32,ambientLight:AmbientLight,time:f32,useIblTexture:u32,isView3D:u32,\n};\n@group(0) @binding(0) var<uniform> systemUniforms:SystemUniform;\n@group(0) @binding(1) var directionalShadowMapSampler:sampler_comparison;\n@group(0) @binding(2) var directionalShadowMap:texture_depth_2d;\n@group(0) @binding(3) var iblTextureSampler:sampler;\n@group(0) @binding(7) var renderPath1ResultTextureSampler:sampler;\n@group(0) @binding(8) var renderPath1ResultTexture:texture_2d<f32>;\n@group(0) @binding(9) var packedTextureSampler:sampler;\n@group(0) @binding(10) var ibl_environmentTexture:texture_cube<f32>;\n@group(0) @binding(11) var ibl_irradianceTexture:texture_cube<f32>;\nconst clusterLight_indicesLength:u32=u32(REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu * REDGPU_DEFINE_TOTAL_TILESu);\nconst clusterLight_tileCount=vec3<u32>(REDGPU_DEFINE_TILE_COUNT_Xu,REDGPU_DEFINE_TILE_COUNT_Yu,REDGPU_DEFINE_TILE_COUNT_Zu);\nstruct ClusterLights {offset:u32,count:u32\n};\nstruct ClusterLightsGroup {offset:atomic<u32>,lights:array<ClusterLights,REDGPU_DEFINE_TOTAL_TILES>,indices:array<u32,clusterLight_indicesLength>\n};\nstruct ClusterLight_ClusterCube {minAABB:vec4<f32>,maxAABB:vec4<f32>};\nstruct ClusterLight_Clusters {cubeList:array<ClusterLight_ClusterCube,REDGPU_DEFINE_TOTAL_TILES>\n};\nfn linearDepth(depthSample:f32) -> f32 {return systemUniforms.camera.farClipping*systemUniforms.camera.nearClipping/fma(depthSample,systemUniforms.camera.nearClipping-systemUniforms.camera.farClipping,systemUniforms.camera.farClipping);\n}\nfn getClusterLightClusterIndex(fragCoord:vec4<f32>) -> u32 {let tile=getClusterLightTile(fragCoord);return tile.x +tile.y * clusterLight_tileCount.x +tile.z * clusterLight_tileCount.x * clusterLight_tileCount.y;\n}\nfn getClusterLightTile(fragCoord:vec4<f32>) -> vec3<u32> {let sliceScale=f32(clusterLight_tileCount.z)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping);let sliceBias=-(f32(clusterLight_tileCount.z) * log2(systemUniforms.camera.nearClipping)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping));let zTile=u32(max(log2(linearDepth(fragCoord.z)) * sliceScale + sliceBias,0.0));return vec3<u32>(u32(fragCoord.x/(systemUniforms.resolution.x/f32(clusterLight_tileCount.x))),u32(fragCoord.y/(systemUniforms.resolution.y/f32(clusterLight_tileCount.y))),zTile);\n}\nstruct ClusterLight {position:vec3<f32>,radius:f32,color:vec3<f32>,intensity:f32,isSpotLight:f32,directionX:f32,directionY:f32,directionZ:f32,outerCutoff:f32,innerCutoff:f32,\n};\nstruct ClusterLightList {count:vec4<f32>,lights:array<ClusterLight>\n};\n@group(0) @binding(5) var<storage> clusterLightList:ClusterLightList;\n@group(0) @binding(6) var<storage,read_write> clusterLightGroup:ClusterLightsGroup;\n",calcTintBlendMode:"\nfn rgbToHsl(rgb:vec3<f32>) -> vec3<f32> {let maxVal:f32=max(max(rgb.r,rgb.g),rgb.b);let minVal:f32=min(min(rgb.r,rgb.g),rgb.b);let delta:f32=maxVal - minVal;let eps=1e-6;let lightness:f32=(maxVal + minVal) * 0.5;if (delta < eps) {return vec3<f32>(0.0,0.0,lightness);}var saturation:f32;if (lightness < 0.5) {saturation=delta/(maxVal + minVal + eps);} else {saturation=delta/(2.0 - maxVal - minVal + eps);}var hue:f32=0.0;if (abs(rgb.r - maxVal) < eps) {hue=(rgb.g - rgb.b)/delta;if (rgb.g < rgb.b) {hue +=6.0;}} else if (abs(rgb.g - maxVal) < eps) {hue=(rgb.b - rgb.r)/delta + 2.0;} else {hue=(rgb.r - rgb.g)/delta + 4.0;}hue=hue/6.0;return vec3<f32>(hue,saturation,lightness);\n}\nfn hslToRgb(hsl:vec3<f32>) -> vec3<f32> {let h=hsl.x;let s=hsl.y;let l=hsl.z;if (s==0.0) {return vec3<f32>(l,l,l);}var q:f32;if (l < 0.5) {q=l * (1.0 + s);} else {q=l + s - l * s;}let p=2.0 * l - q;var r:f32;var g:f32;var b:f32;for (var i:i32=0;i < 3;i=i + 1) {var t:f32;if (i==0) {t=h + 1.0/3.0;} else if (i==1) {t=h;} else {t=h - 1.0/3.0;}if (t < 0.0) {t=t + 1.0;}if (t > 1.0) {t=t - 1.0;}var color:f32;if (t < 1.0/6.0) {color=p + (q - p) * 6.0 * t;} else if (t < 1.0/2.0) {color=q;} else if (t < 2.0/3.0) {color=p + (q - p) * (2.0/3.0 - t) * 6.0;} else {color=p;}if (i==0) {r=color;} else if (i==1) {g=color;} else {b=color;}}return vec3<f32>(r,g,b);\n}\nfn calcTintBlendMode(baseColor:vec4<f32>,tintBlendMode:u32,tint:vec4<f32>) -> vec4<f32> {var tintedColor:vec3<f32>;let eps=1e-6;switch (tintBlendMode) {case 0u:{ tintedColor=mix(baseColor.rgb,tint.rgb,tint.a);}case 1u:{ tintedColor=baseColor.rgb * tint.rgb;}case 2u:{ tintedColor=max(baseColor.rgb,tint.rgb);}case 3u:{ tintedColor=1.0 - (1.0 - baseColor.rgb) * (1.0 - tint.rgb);}case 4u:{ tintedColor=clamp(baseColor.rgb + tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0));}case 5u:{ tintedColor=clamp(baseColor.rgb - tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0));}case 6u:{ tintedColor=min(baseColor.rgb,tint.rgb);}case 7u:{ tintedColor=mix(2.0 * baseColor.rgb * tint.rgb,1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb),step(vec3<f32>(0.5),baseColor.rgb));}case 8u:{ tintedColor=clamp(baseColor.rgb/(1.0 - tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0));}case 9u:{ tintedColor=1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0));}case 10u:{ tintedColor=mix(2.0 * baseColor.rgb * tint.rgb,1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb),step(vec3<f32>(0.5),tint.rgb));}case 11u:{ tintedColor=mix(baseColor.rgb * (tint.rgb + tint.rgb - vec3<f32>(1.0)),baseColor.rgb + tint.rgb - baseColor.rgb * tint.rgb,step(vec3<f32>(0.5),tint.rgb));}case 12u:{ tintedColor=abs(baseColor.rgb - tint.rgb);}case 13u:{ tintedColor=baseColor.rgb + tint.rgb - 2.0 * baseColor.rgb * tint.rgb;}case 14u:{ tintedColor=clamp(baseColor.rgb/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0));}case 15u:{ tintedColor=mix(clamp(baseColor.rgb/(1.0 - (tint.rgb - vec3<f32>(0.5)) * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)),1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)),step(vec3<f32>(0.5),tint.rgb));}case 16u:{ tintedColor=clamp(baseColor.rgb + tint.rgb - vec3<f32>(1.0),vec3<f32>(0.0),vec3<f32>(1.0));}case 17u:{ tintedColor=mix(min(baseColor.rgb,2.0 * tint.rgb),max(baseColor.rgb,2.0 * tint.rgb - vec3<f32>(1.0)),step(vec3<f32>(0.5),tint.rgb));}case 18u:{ let baseHsl=rgbToHsl(baseColor.rgb);let tintHsl=rgbToHsl(tint.rgb);tintedColor=hslToRgb(vec3<f32>(baseHsl.x,tintHsl.y,baseHsl.z));}case 19u:{ let baseHsl=rgbToHsl(baseColor.rgb);let tintHsl=rgbToHsl(tint.rgb);tintedColor=hslToRgb(vec3<f32>(tintHsl.x,baseHsl.y,baseHsl.z));}case 20u:{ let baseHsl=rgbToHsl(baseColor.rgb);let tintHsl=rgbToHsl(tint.rgb);tintedColor=hslToRgb(vec3<f32>(baseHsl.x,baseHsl.y,tintHsl.z));}case 21u:{ let baseHsl=rgbToHsl(baseColor.rgb);let tintHsl=rgbToHsl(tint.rgb);tintedColor=hslToRgb(vec3<f32>(tintHsl.x,tintHsl.y,baseHsl.z));}case 22u:{ tintedColor=1.0 - abs(1.0 - baseColor.rgb - tint.rgb);}default:{tintedColor=baseColor.rgb;}}return vec4<f32>(tintedColor,baseColor.a * tint.a);\n}\n",calcDisplacements:"fn calcDisplacementPosition(input_position:vec3<f32>,input_vertexNormal:vec3<f32>,displacementTexture:texture_2d<f32>,displacementTextureSampler:sampler,displacementScale:f32,input_uv:vec2<f32>,mipLevel:f32) -> vec3<f32> {let displacementSample=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,mipLevel).r;let scaledDisplacement=(displacementSample - 0.5) * displacementScale;let displacedPosition=input_position + input_vertexNormal * scaledDisplacement;return displacedPosition;\n}\nfn calcDisplacementNormal(input_vertexNormal:vec3<f32>,displacementTexture:texture_2d<f32>,displacementTextureSampler:sampler,displacementScale:f32,input_uv:vec2<f32>,mipLevel:f32) -> vec3<f32> {let textureSize=textureDimensions(displacementTexture);let texelSizeX=1.0/f32(textureSize.x);let texelSizeY=1.0/f32(textureSize.y);let displacementRight=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(texelSizeX,0.0),mipLevel).r;let displacementLeft=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(texelSizeX,0.0),mipLevel).r;let displacementUp=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(0.0,texelSizeY),mipLevel).r;let displacementDown=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(0.0,texelSizeY),mipLevel).r;let gradientX=((displacementRight - 0.5) - (displacementLeft - 0.5)) * displacementScale * 0.2;let gradientY=((displacementUp - 0.5) - (displacementDown - 0.5)) * displacementScale * 0.2;let up=vec3<f32>(0.0,1.0,0.0);let tangent=normalize(cross(up,input_vertexNormal));let bitangent=normalize(cross(input_vertexNormal,tangent));let tangentSpaceNormal=normalize(vec3<f32>(gradientX,gradientY,1.0));let objectSpaceNormal=tangentSpaceNormal.x * tangent +tangentSpaceNormal.y * bitangent +tangentSpaceNormal.z * input_vertexNormal;return normalize(objectSpaceNormal);\n}\n",drawDirectionalShadowDepth:"struct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {var output:OutputShadowData;let u_useDisplacementTexture=vertexUniforms.useDisplacementTexture==1u;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_displacementScale=vertexUniforms.displacementScale;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;position=u_modelMatrix * vec4<f32>(input_position,1.0);if (u_useDisplacementTexture) {let distance=distance(position.xyz,u_cameraPosition);let mipLevel=(distance/maxDistance) * maxMipLevel;let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);position=u_modelMatrix * vec4<f32>(displacedPosition,1.0);}output.position=u_directionalLightProjectionViewMatrix * position;return output;\n}\n",getBillboardMatrix:"fn getBillboardMatrix(cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>) -> mat4x4<f32> {let scaleX=length(vec3<f32>(modelMatrix[0].xyz));let scaleY=length(vec3<f32>(modelMatrix[1].xyz));let scaleZ=length(vec3<f32>(modelMatrix[2].xyz));let scaleMatrix=mat4x4<f32>(vec4<f32>(scaleX,0.0,0.0,0.0),vec4<f32>(0.0,scaleY,0.0,0.0),vec4<f32>(0.0,0.0,scaleZ,0.0),vec4<f32>(0.0,0.0,0.0,1.0));var resultMatrix=cameraMatrix * modelMatrix;resultMatrix[0][0]=1.0;resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0;resultMatrix[1][0]=0.0;resultMatrix[1][1]=1.0;resultMatrix[1][2]=0.0;resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=1.0;return resultMatrix * scaleMatrix;\n}\nfn getBillboardMatrixNoScaleRatio( cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>)-> mat4x4<f32>{var resultMatrix=cameraMatrix * modelMatrix;resultMatrix[0][0]=modelMatrix[0][0];resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0;resultMatrix[1][0]=0.0;resultMatrix[1][1]=modelMatrix[1][1];resultMatrix[1][2]=0.0;resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=modelMatrix[2][2];return resultMatrix;\n}\n",extractScaleAndTranslation:"fn extractScaleAndTranslation(modelMatrix:mat4x4<f32>) -> mat4x4<f32> {let scaleX=length(vec3<f32>(modelMatrix[0].xyz));let scaleY=length(vec3<f32>(modelMatrix[1].xyz));let scaleZ=length(vec3<f32>(modelMatrix[2].xyz));let scaleMatrix=mat4x4<f32>(vec4<f32>(scaleX,0.0,0.0,0.0),vec4<f32>(0.0,scaleY,0.0,0.0),vec4<f32>(0.0,0.0,scaleZ,0.0),vec4<f32>(0.0,0.0,0.0,1.0));return mat4x4<f32>(scaleMatrix[0],scaleMatrix[1],scaleMatrix[2],modelMatrix[3] );\n}\n",calcDirectionalShadowVisibility:"fn calcDirectionalShadowVisibility(directionalShadowMap:texture_depth_2d,directionalShadowMapSampler:sampler_comparison,shadowDepthTextureSize:u32,bias:f32,shadowPos:vec3<f32>\n) -> f32 {let oneOverShadowDepthTextureSize=1.0/f32(shadowDepthTextureSize);let shadowDepth=clamp(shadowPos.z,0.0,1.0);var visibility:f32=0.0;for (var y=-1;y <=1;y++) {for (var x=-1;x <=1;x++) {let offset=vec2f(vec2(x,y)) * oneOverShadowDepthTextureSize;let tUV=shadowPos.xy + offset;let sampleVisibility=textureSampleCompare(directionalShadowMap,directionalShadowMapSampler,tUV,shadowDepth - bias);if (tUV.x < 0.0 || tUV.x > 1.0 || tUV.y < 0.0 || tUV.y > 1.0) {visibility +=1.0;} else {visibility +=sampleVisibility;}}}visibility/=9.0;let depthFactor=shadowDepth;let minVisibility=0.2 + depthFactor * 0.6;return max(visibility,minVisibility);\n}\n",drawPicking:"\n@fragment\nfn picking(inputData:InputData) -> @location(0) vec4<f32> {var finalColor:vec4<f32>=inputData.pickingId;return finalColor;\n}\n",normalFunctions:"\nfn cotangent_frame( N:vec3<f32>,p:vec3<f32>,uv:vec2<f32>) -> mat3x3<f32>{let dp1:vec3<f32>=dpdx( p );let dp2:vec3<f32>=dpdy( p );let duv1:vec2<f32>=dpdx( uv );let duv2:vec2<f32>=dpdy( uv );let dp2perp:vec3<f32>=cross( dp2,N );let dp1perp:vec3<f32>=cross( N,dp1 );let T:vec3<f32>=dp2perp * duv1.x + dp1perp * duv2.x;let B:vec3<f32>=dp2perp * duv1.y + dp1perp * duv2.y;let invmax:f32=inverseSqrt( max( dot(T,T),dot(B,B) ) );return mat3x3<f32>( T * invmax,B * invmax,N );\n}\nfn perturb_normal( N:vec3<f32>,V:vec3<f32>,texcoord:vec2<f32>,normalColor:vec3<f32>,normalPower:f32 ) -> vec3<f32> {var map:vec3<f32>=normalColor;map=map * 255./127. - 128./127.;map=vec3<f32>(map.xy * -normalPower,map.z);let TBN:mat3x3<f32>=cotangent_frame(N,V,texcoord);return normalize(TBN * map);\n}\n"});Object.freeze(lr);const cr=Object.keys(lr).join("|"),hr=new RegExp(`#redgpu_include (${cr})`,"g"),parseIncludeWGSL=i=>i.replace(hr,(i,m)=>lr[m]||i).replace(/REDGPU_DEFINE_TILE_COUNT_X/g,ur.TILE_COUNT_X.toString()).replace(/REDGPU_DEFINE_TILE_COUNT_Y/g,ur.TILE_COUNT_Y.toString()).replace(/REDGPU_DEFINE_TILE_COUNT_Z/g,ur.TILE_COUNT_Z.toString()).replace(/REDGPU_DEFINE_TOTAL_TILES/g,ur.getTotalTileSize().toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_X/g,ur.WORKGROUP_SIZE_X.toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_Y/g,ur.WORKGROUP_SIZE_Y.toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_Z/g,ur.WORKGROUP_SIZE_Z.toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_Z/g,ur.WORKGROUP_SIZE_Z.toString()).replace(/REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTER/g,ur.MAX_LIGHTS_PER_CLUSTER.toString()),processMembers=(i,m=0,g=0)=>{let x=0,_=g;const b=i?.reduce((i,g,b)=>{const{type:y,offset:T,size:w,stride:P,count:H,isArray:z}=g,{format:$}=y,q="array"===y.name?`${$.name}${$.format?`${$.format.name}`:""}`:`${y.name}${$?`${$.name}`:""}`;if(0===b&&(x=T),_=T+w,i[g.name]=((i,m,g)=>{const x=UniformType[g];return{uniformOffset:i.offset+m,stride:i.stride,isArray:i.isArray,typeInfo:x,View:x?.View}})(g,m,q),z&&$.members){const m=processMembers($.members).members;i[g.name].memberList=Array.from({length:H},(i,g)=>{const x={};for(const i in m){const _=x[i]={...m[i]};_.uniformOffset=_.uniformOffset+T+P*g}return x})}else y.members&&(i[g.name]=processMembers(y.members,T+m,_));return i},{});return{members:b,startOffset:x,endOffset:_}},parseWGSL=i=>{const m=parseIncludeWGSL(i),g=new _t(m);return{uniforms:{...(_=g.uniforms,_.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},storage:{...(x=g.storage,x.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride,acccess:m.access,type:m.type},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},samplers:g.samplers,textures:g.textures,vertexEntries:g.entry.vertex.map(i=>i.name),fragmentEntries:g.entry.fragment.map(i=>i.name),computeEntries:g.entry.compute.map(i=>i.name),shaderSource:m};var x,_},fr={ZERO:"zero",ONE:"one",SRC:"src",ONE_MINUS_SRC:"one-minus-src",SRC_ALPHA:"src-alpha",ONE_MINUS_SRC_ALPHA:"one-minus-src-alpha",DST:"dst",ONE_MINUS_DST:"one-minus-dst",DST_ALPHA:"dst-alpha",ONE_MINUS_DST_ALPHA:"one-minus-dst-alpha",SRC_ALPHA_SATURATED:"src-alpha-saturated",CONSTANT:"constant",ONE_MINUS_CONSTANT:"one-minus-constant",SRC1:"src1",ONE_MINUS_SRC1:"one-minus-src1",SRC1_ALPHA:"src1-alpha",ONE_MINUS_SRC1_ALPHA:"one-minus-src1-alpha"};Object.freeze(fr);const dr={ADD:"add",SUBTRACT:"subtract",REVERSE_SUBTRACT:"reverse-subtract",MIN:"min",MAX:"max"};Object.freeze(dr);class FragmentGPURenderInfo{fragmentShaderModule;fragmentUniformInfo;fragmentBindGroupLayout;fragmentUniformBuffer;fragmentUniformBindGroup;fragmentState;constructor(i,m,g,x,_,b){this.fragmentShaderModule=i,this.fragmentUniformInfo=m,this.fragmentBindGroupLayout=g,this.fragmentUniformBuffer=x,this.fragmentUniformBindGroup=_,this.fragmentState=b}}Object.freeze(FragmentGPURenderInfo);const mr=Object.values(fr),pr=Object.values(dr);class BlendState{state;#N;#G;#V;#H;constructor(i,m,g,x){this.#H=i,this.srcFactor=m,this.dstFactor=g,this.operation=x}get operation(){return this.#V}set operation(i){pr.includes(i)||consoleAndThrowError(`Invalid GPUBlendOperation:${i}. Valid operations are ${pr.join(",")}`),this.#V=i,this.#z()}get srcFactor(){return this.#N}set srcFactor(i){mr.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid srcFactor factors are ${mr.join(",")}`),this.#N=i,this.#z()}get dstFactor(){return this.#G}set dstFactor(i){mr.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid dstFactor factors are ${mr.join(",")}`),this.#G=i,this.#z()}#z(){const i=this.#V?{operation:this.#V}:{},m=this.#N?{srcFactor:this.#N}:{},g=this.#G?{dstFactor:this.#G}:{};this.state={...i,...m,...g},this.#H.dirtyPipeline=!0}}let gr=class{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}};class ResourceStateCubeTexture{texture;srcList;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.srcList=i.srcList,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class ResourceStateBitmapTexture{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}const basicRegisterResource=(i,m)=>{const{uuid:g,targetResourceManagedState:x}=i,_=m instanceof ResourceStateCubeTexture||m instanceof gr||m instanceof ResourceStateBitmapTexture;try{x.table[g]&&consoleAndThrowError(`Buffer with UUID ${g} is already registered.`),x.table[g]=m,x.length++,_||(x.videoMemory+=i.size)}catch(i){consoleAndThrowError(i.message)}};class ResourceStateUniformBuffer{static dirtyList=[];buffer;uuid;#$=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#$}set useNum(i){this.#$=i,ResourceStateUniformBuffer.dirtyList.push(this)}}const basicUnregisterResource=i=>{const{uuid:m,targetResourceManagedState:g}=i,{table:x}=g;x[m]&&(g.videoMemory-=i.size,delete x[m],g.length--)};class ManagedResourceBase extends ResourceBase{#q;constructor(i,m){super(i),this.#q=i.resourceManager[m]}get targetResourceManagedState(){return this.#q}}class ABaseBuffer extends ManagedResourceBase{#K;constructor(i,m,g){super(i,m),this.#K=g}get usage(){return this.#K}}class AUniformBaseBuffer extends ABaseBuffer{#W;#X;#Y;#j;constructor(i,m,g,x,_=""){super(i,m,g),this.#X=x.byteLength,this.#W={size:this.#X,usage:this.usage,label:_};try{this.#j=i.gpuDevice.createBuffer(this.#W)}catch(i){console.error("GPU 버퍼 생성에 실패했습니다:",i)}i.gpuDevice.queue.writeBuffer(this.#j,0,x)}get gpuBuffer(){return this.#j}get data(){return this.#Y}get size(){return this.#X}get uniformBufferDescriptor(){return this.#W}destroy(){const i=this.#j;i&&(this.#j=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}writeBuffers(i){const{gpuDevice:m}=this.redGPUContext;let g=i.length;for(;g--;){const[x,_]=i[g];m.queue.writeBuffer(this.gpuBuffer,x.uniformOffset,new x.View("number"==typeof _?[_]:_))}}writeBuffer(i,m){this.redGPUContext.gpuDevice.queue.writeBuffer(this.gpuBuffer,i.uniformOffset,new i.View("number"==typeof m?[m]:m))}}const getCacheBufferFromResourceState=(i,m)=>{const{targetResourceManagedState:g}=i,x=((i,m)=>{if(!m)return;let g;const x=i.table;for(const i in x)if(x[i].label===m){g=x[i];break}return g})(g,m);return x?g.table[i.uuid].buffer:null};class UniformBuffer extends AUniformBaseBuffer{constructor(i,m,g="",x=""){super(i,"managedUniformBufferState",GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,m,g);const _=getCacheBufferFromResourceState(this,x);if(_)return _;x&&(this.name=x),basicRegisterResource(this,new ResourceStateUniformBuffer(this))}}function calculateTextureByteSize(i){return function(i){switch(i){case"r8unorm":case"r8snorm":case"r8uint":case"r8sint":return 1;case"r16uint":case"r16sint":case"r16float":case"rg8unorm":case"rg8snorm":case"rg8uint":case"rg8sint":case"depth16unorm":return 2;case"r32uint":case"r32sint":case"r32float":case"rg16uint":case"rg16sint":case"rg16float":case"rgba8unorm":case"rgba8unorm-srgb":case"rgba8snorm":case"rgba8uint":case"rgba8sint":case"bgra8unorm":case"bgra8unorm-srgb":case"depth24plus":case"depth32float":return 4;case"rg32uint":case"rg32sint":case"rg32float":case"rgba16uint":case"rgba16sint":case"rgba16float":return 8;case"rgba32uint":case"rgba32sint":case"rgba32float":return 16;default:throw new Error(`Unrecognized texture format:${i}`)}}(i.format)*(i.size[0]*i.size[1]*(i.size[2]||1))*(i.sampleCount?i.sampleCount:1)}Object.freeze(UniformBuffer);const getMipLevelCount=(i,m)=>Math.floor(Math.log2(Math.max(i,m)))+1,imageBitmapToGPUTexture=(i,m,g,x=!0)=>{const _=i.createTexture(g);for(let b=0;b<m.length;b++){const y=m[b],T={source:y},w={texture:_,origin:[0,0,b],premultipliedAlpha:x};g.format.includes("srgb")&&(w.colorSpace="srgb");const P=[y.width,y.height];i.queue.copyExternalImageToTexture(T,w,P)}return _};async function loadAndCreateBitmapImage(i,m="none",g="premultiply"){const x=await fetch(i),_=await x.blob();return createImageBitmap(_,{colorSpaceConversion:m,premultiplyAlpha:g})}class CubeTexture extends ManagedResourceBase{static defaultViewDescriptor={dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6};#Z;#J;#Q;#ee;#te;#ne;#re=0;#ie;#ae;#se;constructor(i,m,g=!0,x,_,b){super(i,"managedCubeTextureState"),this.#ae=x,this.#se=_,this.#te=g,this.#ie=b||navigator.gpu.getPreferredCanvasFormat(),this.#J=m,this.#Q=m?.toString();const{table:y}=this.targetResourceManagedState;let T;for(const i in y)if(y[i].cacheKey===this.#Q){T=y[i];break}if(T){const i=y[T.uuid].texture;this.#ae?.(i)}else this.srcList=m,this.#oe()}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#ee}}get cacheKey(){return this.#Q}get videoMemorySize(){return this.#re}get gpuTexture(){return this.#Z}get mipLevelCount(){return this.#ee}get srcList(){return this.#J}set srcList(i){this.#J=i,this.#Q=i?.toString()||createUUID(),this.#J?.length&&this.#ue(this.#J)}get useMipmap(){return this.#te}set useMipmap(i){this.#te=i,this.#le()}destroy(){const i=this.#Z;this.#ce(null),this.__fireListenerList(!0),this.#J=null,this.#Q=null,this.#he(),i&&i.destroy()}setGPUTextureDirectly(i,m,g=!0){this.#Z&&(this.#Z.destroy(),this.targetResourceManagedState.videoMemory-=this.#re),this.#Z=i,this.#te=g,this.#ee=i.mipLevelCount,this.#Q=m||`direct_${this.uuid}`;const x={size:[i.width,i.height,i.depthOrArrayLayers],format:i.format,usage:i.usage,mipLevelCount:this.#ee};this.#re=calculateTextureByteSize(x),this.targetResourceManagedState.videoMemory+=this.#re,this.__fireListenerList()}#ce(i){this.#Z=i,i||(this.#ne=null),this.__fireListenerList()}#oe(){basicRegisterResource(this,new ResourceStateCubeTexture(this))}#he(){basicUnregisterResource(this)}#le(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#Z&&(this.#Z.destroy(),this.#Z=null),this.#ee=1;{const m=this.#ne,x=m[0],{width:_,height:b}=x,y={size:[_,b,6],format:this.#ie,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`cubeTexture_${this.#J?.toString()||this.uuid}`};this.#te&&(this.#ee=getMipLevelCount(_,b),y.mipLevelCount=this.#ee,y.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const T=imageBitmapToGPUTexture(i,m,y);this.targetResourceManagedState.videoMemory-=this.#re,this.#re=calculateTextureByteSize(y),this.targetResourceManagedState.videoMemory+=this.#re,this.#te&&g.generateMipmap(T,y),this.#ce(T)}}async#ue(i){this.#ne=await async function(i){const m=i.map(i=>loadAndCreateBitmapImage(i));return await Promise.all(m)}(i);try{this.#le(),this.#ae?.(this)}catch(i){console.error(i),this.#se?.(i)}}}Object.freeze(CubeTexture);class PackedTexture{#b;#fe;#de;#Z;#y;constructor(i){this.#b=i,this.#y=i.gpuDevice,this.#fe=this.#me(),this.#de=this.#pe()}get gpuTexture(){return this.#Z}async packing(i,m,g,x,_){const b={r:"r",g:"g",b:"b",a:"a",..._},y={size:[m,g,1],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,label:x||`packedTexture_${createUUID()}'`};this.#Z&&(this.#Z.destroy(),this.#Z=null);const T=this.#y.createTexture(y),w=this.#y.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),P=new Uint32Array([["r","g","b","a"].indexOf(b.r),["r","g","b","a"].indexOf(b.g),["r","g","b","a"].indexOf(b.b),["r","g","b","a"].indexOf(b.a)]);this.#y.queue.writeBuffer(w,0,P);const H=[{binding:0,resource:i.r?i.r.createView({label:i.r.label}):this.#b.resourceManager.emptyBitmapTextureView},{binding:1,resource:i.g?i.g.createView({label:i.g.label}):this.#b.resourceManager.emptyBitmapTextureView},{binding:2,resource:i.b?i.b.createView({label:i.b.label}):this.#b.resourceManager.emptyBitmapTextureView},{binding:3,resource:i.a?i.a.createView({label:i.a.label}):this.#b.resourceManager.emptyBitmapTextureView},{binding:4,resource:this.#de},{binding:5,resource:{buffer:w}}],z=this.#y.createBindGroup({layout:this.#fe.getBindGroupLayout(0),entries:H}),$=this.#y.createCommandEncoder(),q=$.beginRenderPass({colorAttachments:[{view:T.createView({label:T.label}),loadOp:"clear",storeOp:"store",clearValue:[0,0,0,0]}]});q.setPipeline(this.#fe),q.setBindGroup(0,z),q.draw(6,1,0,0),q.end(),this.#y.queue.submit([$.finish()]),this.#Z=T,w.destroy()}#me(){const i="\n\tstruct VertexOut {@builtin(position) position:vec4<f32>,@location(0) uv:vec2<f32>,\n\t};\n\n\t@vertex\n\tfn vertexMain(@builtin(vertex_index) VertexIndex:u32) -> VertexOut {var pos=array<vec2<f32>,6>(vec2(-1.0,-1.0),vec2( 1.0,-1.0),vec2(-1.0, 1.0),vec2(-1.0, 1.0),vec2( 1.0,-1.0),vec2( 1.0, 1.0));\nvar uv=array<vec2<f32>,6>(vec2(0.0,1.0),vec2(1.0,1.0),vec2(0.0,0.0),vec2(0.0,0.0),vec2(1.0,1.0),vec2(1.0,0.0));\nvar output:VertexOut;output.position=vec4(pos[VertexIndex],0.0,1.0);output.uv=uv[VertexIndex];return output;\n\t}\n\n\tstruct ComponentMapping {r_component:u32,g_component:u32,b_component:u32,a_component:u32,\n\t};\n\n\t@group(0) @binding(0) var textureR:texture_2d<f32>;\n\t@group(0) @binding(1) var textureG:texture_2d<f32>;\n\t@group(0) @binding(2) var textureB:texture_2d<f32>;\n\t@group(0) @binding(3) var textureA:texture_2d<f32>;\n\t@group(0) @binding(4) var sampler0:sampler;\n\t@group(0) @binding(5) var<uniform> mapping:ComponentMapping;\n\n\tfn getComponent(color:vec4<f32>,componentIndex:u32) -> f32 {switch componentIndex {case 0u:{ return color.r;}case 1u:{ return color.g;}case 2u:{ return color.b;}case 3u:{ return color.a;}default:{ return 0.0;}}\n\t}\n\n\t@fragment\n\tfn main(input:VertexOut) -> @location(0) vec4<f32> {let colorR=textureSample(textureR,sampler0,input.uv);let colorG=textureSample(textureG,sampler0,input.uv);let colorB=textureSample(textureB,sampler0,input.uv);let colorA=textureSample(textureA,sampler0,input.uv);\nlet r=getComponent(colorR,mapping.r_component);let g=getComponent(colorG,mapping.g_component);let b=getComponent(colorB,mapping.b_component);let a=getComponent(colorA,mapping.a_component);\nreturn vec4(r,g,b,a);\n\t}\n\t";return this.#y.createRenderPipeline({layout:"auto",vertex:{module:this.#y.createShaderModule({code:i}),entryPoint:"vertexMain"},fragment:{module:this.#y.createShaderModule({code:i}),entryPoint:"main",targets:[{format:"rgba8unorm"}]},primitive:{topology:"triangle-list"}})}#pe(){return this.#y.createSampler({magFilter:"linear",minFilter:"linear"})}}const xr={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DARKEN:6,OVERLAY:7,COLOR_DODGE:8,COLOR_BURN:9,HARD_LIGHT:10,SOFT_LIGHT:11,DIFFERENCE:12,EXCLUSION:13,DIVIDE:14,VIVID_LIGHT:15,LINEAR_BURN:16,PIN_LIGHT:17,SATURATION:18,HUE:19,LUMINOSITY:20,COLOR:21,NEGATION:22},getBindGroupLayoutDescriptorFromShaderInfo=(i,m,g,x=!0)=>{const{textures:_,samplers:b,uniforms:y,storage:T}=i,w=[];for(const i in T){const x=T[i],{binding:_,name:b,group:y,type:P}=x;if(x.access){const i={write:"write-only-storage",read:"read-only-storage",read_write:"read-write-storage"}[x.access];m===y&&w.push({binding:_,visibility:g,buffer:{type:i}})}else if(m===y){const{access:i,format:m}=P,x={write:"write-only",read:"read-only",read_write:"read-write"}[i],b=m.name;w.push({binding:_,visibility:g,storageTexture:{access:x,format:b}})}}for(const i in _){const b=_[i],{binding:y,name:T,group:P,type:H}=b,{name:z}=H;m===P&&w.push({binding:y,visibility:g,texture:"texture_depth_2d"===z||"texture_depth_multisampled_2d"===z?{viewDimension:"2d",sampleType:"depth",multisampled:x}:"texture_cube"===z?{viewDimension:"cube"}:{}})}for(const i in b){const x=b[i],{binding:_,name:y,group:T}=x;m===T&&w.push({binding:_,visibility:g,sampler:{type:"filtering"}})}for(const i in y){const x=y[i],{binding:_,name:b,group:T}=x;m===T&&w.push({binding:_,visibility:g,buffer:{type:"uniform"}})}return{entries:w}},getFragmentBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.FRAGMENT),getVertexBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.VERTEX),getComputeBindGroupLayoutDescriptorFromShaderInfo=(i,m,g)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.COMPUTE,g);class ABaseMaterial extends ResourceBase{gpuRenderInfo;dirtyPipeline=!1;transparent=!1;#ge=GPUColorWrite.ALL;#xe;#_e;#ve;#be;#ye;#Te;#Se;#we;#Me;#Re;#Ce;#Pe;#Ee;#Ie;#Be;#Le;#De=xr.MULTIPLY;constructor(i,m,g,x){super(i),this.#Be=m,this.#Se=`FRAGMENT_MODULE_${this.#Be}`,this.#we=`FRAGMENT_BIND_GROUP_DESCRIPTOR_${m}`,this.#Me=`FRAGMENT_BIND_GROUP_LAYOUT_${m}`,this.#Re=g,this.#Ce=g?.storage,this.#Pe=g?.uniforms.uniforms,this.#Ee=g?.textures,this.#Ie=g?.samplers,this.#Le=i.resourceManager.getGPUBindGroupLayout(this.#Me)||i.resourceManager.createBindGroupLayout(this.#Me,getFragmentBindGroupLayoutDescriptorFromShaderInfo(g,x)),this.#xe=new BlendState(this,fr.SRC_ALPHA,fr.ONE_MINUS_SRC_ALPHA,dr.ADD),this.#_e=new BlendState(this,fr.SRC_ALPHA,fr.ONE_MINUS_SRC_ALPHA,dr.ADD),this.#ve=i.resourceManager,this.#be=this.#ve.basicSampler.gpuSampler,this.#ye=this.#ve.emptyBitmapTextureView,this.#Te=this.#ve.emptyCubeTextureView}get tintBlendMode(){const i=Object.entries(xr).find(([,i])=>i===this.#De);if(!i)throw new Error(`Invalid tint mode value:${this.#De}`);return i[0]}set tintBlendMode(i){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=this.gpuRenderInfo;let x;if("string"==typeof i){if(!(i in xr))throw new Error(`Invalid tint mode key:${i}`);x=xr[i]}else{if("number"!=typeof i||!Object.values(xr).includes(i))throw new Error(`Invalid tint mode:${i}`);x=i}g.writeBuffer(m.members.tintBlendMode,x),this.#De=x}get MODULE_NAME(){return this.#Be}get FRAGMENT_SHADER_MODULE_NAME(){return this.#Se}get FRAGMENT_BIND_GROUP_DESCRIPTOR_NAME(){return this.#we}get STORAGE_STRUCT(){return this.#Ce}get UNIFORM_STRUCT(){return this.#Pe}get blendColorState(){return this.#xe}get blendAlphaState(){return this.#_e}get writeMaskState(){return this.#ge}set writeMaskState(i){this.#ge=i}initGPURenderInfos(){const{redGPUContext:i}=this,{resourceManager:m}=i,g=m.createGPUShaderModule(this.#Se,{code:this.#Re.shaderSource}),x=new ArrayBuffer(Math.max(this.#Pe.arrayBufferByteLength,16)),_=new UniformBuffer(i,x,`UniformBuffer_${this.#Be}_${this.uuid}`);this.gpuRenderInfo=new FragmentGPURenderInfo(g,this.#Pe,this.#Le,_,null,null),this._updateBaseProperty(),this._updateFragmentState()}_updateFragmentState(){const{gpuDevice:i}=this.redGPUContext,m=[];for(const i in this.#Ee){const g=this.#Ee[i],{binding:x,name:_,group:b,type:y}=g,{name:T}=y;let w;w="texture_cube"===T?this.getGPUResourceCubeTextureView(this[_]):this[_]instanceof PackedTexture?this[_].gpuTexture?this[_].gpuTexture.createView({}):this.#ye:this.getGPUResourceBitmapTextureView(this[_])||this.#ye,2===b&&m.push({binding:x,resource:w})}for(const i in this.#Ie){const g=this.#Ie[i],{binding:x,name:_,group:b}=g;2===b&&m.push({binding:x,resource:this.getGPUResourceSampler(this[_])})}this.#Pe&&m.push({binding:this.#Pe.binding,resource:{buffer:this.gpuRenderInfo.fragmentUniformBuffer.gpuBuffer,offset:0,size:this.gpuRenderInfo.fragmentUniformBuffer.size}});const g={layout:this.gpuRenderInfo.fragmentBindGroupLayout,label:this.#we,entries:m},x=i.createBindGroup(g);this.gpuRenderInfo.fragmentState=this.getFragmentRenderState(),this.gpuRenderInfo.fragmentUniformBindGroup=x}getFragmentRenderState(i="main"){return{module:this.gpuRenderInfo.fragmentShaderModule,entryPoint:i,targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.blendColorState.state,alpha:this.blendAlphaState.state},writeMask:this.writeMaskState}]}}_updateBaseProperty(){const{fragmentUniformInfo:i,fragmentUniformBuffer:m}=this.gpuRenderInfo,{members:g}=i;for(const x in g){const g=this[x];g instanceof ColorRGBA?m.writeBuffer(i.members[x],g.rgbaNormal):g instanceof ColorRGB?m.writeBuffer(i.members[x],g.rgbNormal):_r.test(x)||(this[x]=g)}}getGPUResourceBitmapTextureView(i){return i?.gpuTexture?.createView({label:i.src})||this.#ye}getGPUResourceCubeTextureView(i,m){return i?.gpuTexture?.createView(m||i.viewDescriptor||CubeTexture.defaultViewDescriptor)||this.#Te}getGPUResourceSampler(i){return i?.gpuSampler||this.#be}}const _r=/^use\w+Texture$/;kn.defineByPreset(ABaseMaterial,[kn.PRESET_POSITIVE_NUMBER.OPACITY]),kn.defineBoolean(ABaseMaterial,[["useTint",!1]]),kn.defineColorRGBA(ABaseMaterial,["tint","#ff0000"]),Object.freeze(ABaseMaterial);const vr=parseWGSL("#redgpu_include drawPicking;\n#redgpu_include calcTintBlendMode;\nstruct Uniforms {color:vec3<f32>,opacity:f32,useTint:u32,tint:vec4<f32>,tintBlendMode:u32,\n};\nstruct InputData {@builtin(position) position:vec4<f32>,@location(12) combinedOpacity:f32,@location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> {var finalColor=vec4<f32>( uniforms.color.r,uniforms.color.g,uniforms.color.b,uniforms.opacity * inputData.combinedOpacity);if(uniforms.useTint==1u){finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);}return finalColor;\n}\n");class ColorMaterial extends ABaseMaterial{constructor(i,m="#fff"){super(i,"COLOR_MATERIAL",vr,2),this.initGPURenderInfos(),this.color.setColorByHEX(m)}}kn.defineByPreset(ColorMaterial,[kn.PRESET_COLOR_RGB.COLOR]),Object.freeze(ColorMaterial);class InterleaveType{static get float32(){return{numElements:1,stride:Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32",offset:0}}static get float32x2(){return{numElements:2,stride:2*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x2",offset:0}}static get float32x3(){return{numElements:3,stride:3*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x3",offset:0}}static get float32x4(){return{numElements:4,stride:4*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x4",offset:0}}}Object.freeze(InterleaveType);class InterleavedStructElement{attributeName;attributeStride;interleaveType;constructor(i,m,g){this.attributeName=i,this.attributeStride=m,this.interleaveType=g}}class InterleavedStruct{#Ue;#a="";#Ae=[];#ke=0;constructor(i,m=""){this.#a=m,this.#Oe(i),this.#Fe()}get label(){return this.#a}get attributes(){return this.#Ae}get arrayStride(){return this.#ke}get define(){return{...this.#Ue}}#Oe(i){let m={};for(const g in i){const x=i[g],_=x.stride;m[g]=new InterleavedStructElement(g,_,x),_%4!=0&&consoleAndThrowError(`Invalid attribute stride:${_}`)}this.#Ue=m}#Fe(){this.#ke=0,this.#Ae=[];for(const[i,{attributeStride:m,interleaveType:g}]of Object.entries(this.#Ue))this.#Ae.push({attributeName:i,shaderLocation:this.#Ae.length,offset:this.#ke,format:g.gpuVertexFormat}),this.#ke+=m}}class ResourceStateVertexBuffer{static dirtyList=[];buffer;label;uuid;#$=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#$}set useNum(i){this.#$=i,ResourceStateVertexBuffer.dirtyList.push(this)}}class VertexBuffer extends ABaseBuffer{#Ne=0;#Ge=0;#Ve;#Y;#He=0;#j;constructor(i,m,g,x=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,_=""){super(i,"managedVertexBufferState",x);const b=getCacheBufferFromResourceState(this,_);if(b)return b;this.#Ve=g,_&&(this.name=_),this.changeData(m,this.#Ve),basicRegisterResource(this,new ResourceStateVertexBuffer(this))}get gpuBuffer(){return this.#j}get stride(){return this.#Ge}get data(){return this.#Y}get size(){return this.#Y.byteLength||0}get interleavedStruct(){return this.#Ve}get vertexCount(){return this.#Ne}get triangleCount(){return this.#He}destroy(){const i=this.#j;i&&(this.#j=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}updateAllData(i){const{gpuDevice:m}=this;m.queue.writeBuffer(this.#j,0,this.#Y)}changeData(i,m){const{gpuDevice:g}=this;if(Array.isArray(i)&&(i=new Float32Array(i)),this.#Y=i,m&&this.#ze(m),this.#j){this.targetResourceManagedState.videoMemory-=this.#Y.byteLength||0;let i=this.#j;requestAnimationFrame(()=>{i.destroy()}),this.#j=null}this.targetResourceManagedState.videoMemory+=this.#Y.byteLength;const x={size:this.#Y.byteLength,usage:this.usage,label:this.name};this.#j=g.createBuffer(x),this.#He=this.#Y.length/this.#Ge,g.queue.writeBuffer(this.#j,0,this.#Y)}#ze(i){this.#Ve=i,this.#Ne=0,this.#Ge=0;for(const i in this.#Ve.define){const m=this.#Ve.define[i].attributeStride/Float32Array.BYTES_PER_ELEMENT;this.#Ne+=m,this.#Ge+=m}this.#Ne=this.#Y.length/this.#Ne}}Object.freeze(VertexBuffer);class DrawDebuggerMesh{#b;#$e;#w;#qe;#Ke;#We="AABB";#Xe;#Ye;#je=null;#Ze=null;constructor(i,m){this.#b=i,this.#$e=m;const g=this.#Je(i);this.#w=g.vertexBuffer,this.#qe=new ColorMaterial(i),this.#qe.color.setColorByRGB(255,0,0),this.#Ke=new Mesh(i,g,this.#qe),this.#Ke.primitiveState.cullMode="none",this.#Ke.primitiveState.topology=Mn.LINE_LIST,this.#Ke.depthStencilState.depthWriteEnabled=!1;const x=this.#Je(i);this.#Xe=new ColorMaterial(i),this.#Xe.color.setColorByRGB(0,255,0),this.#Ye=new Mesh(i,x,this.#Xe),this.#Ye.primitiveState.cullMode="none",this.#Ye.primitiveState.topology=Mn.LINE_LIST,this.#Ye.depthStencilState.depthWriteEnabled=!1}get debugMode(){return this.#We}set debugMode(i){this.#We=i,"OBB"===i?this.#qe.color.setColorByRGB(255,0,0):"AABB"===i||"COMBINED_AABB"===i?this.#qe.color.setColorByRGB(0,255,0):"BOTH"===i&&(this.#qe.color.setColorByRGB(255,0,0),this.#Xe.color.setColorByRGB(0,255,0)),this.#je=null,this.#Ze=null}#Je(i){const m=new Float32Array(192),g=new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},`wireframeBoxStruct_${Math.random()}`),x=new VertexBuffer(i,m,g);return new Geometry(i,x)}#Qe(i){if(!this.#je)return!0;const m=this.#je;return m.center[0]!==i.center[0]||m.center[1]!==i.center[1]||m.center[2]!==i.center[2]||m.halfExtents[0]!==i.halfExtents[0]||m.halfExtents[1]!==i.halfExtents[1]||m.halfExtents[2]!==i.halfExtents[2]||!this.#et(m.orientation,i.orientation)}#tt(i){if(!this.#Ze)return!0;const m=this.#Ze;return m.minX!==i.minX||m.maxX!==i.maxX||m.minY!==i.minY||m.maxY!==i.maxY||m.minZ!==i.minZ||m.maxZ!==i.maxZ}#et(i,m){if(i.length!==m.length)return!1;for(let g=0;g<i.length;g++)if(Math.abs(i[g]-m[g])>1e-4)return!1;return!0}#nt(i){this.#je=new OBB(i.center,i.halfExtents,i.orientation)}#rt(i){this.#Ze=i.clone()}#it(i,m){const{center:g,halfExtents:x,orientation:_}=i,b=[[-1,-1,-1],[1,-1,-1],[1,1,-1],[-1,1,-1],[-1,-1,1],[1,-1,1],[1,1,1],[-1,1,1]].map(i=>{const m=[i[0]*x[0],i[1]*x[1],i[2]*x[2]],b=[_[0]*m[0]+_[4]*m[1]+_[8]*m[2],_[1]*m[0]+_[5]*m[1]+_[9]*m[2],_[2]*m[0]+_[6]*m[1]+_[10]*m[2]];return[b[0]+g[0],b[1]+g[1],b[2]+g[2]]});this.#C(b,m)}#at(i,m){const{minX:g,maxX:x,minY:_,maxY:b,minZ:y,maxZ:T}=i,w=[[g,_,y],[x,_,y],[x,b,y],[g,b,y],[g,_,T],[x,_,T],[x,b,T],[g,b,T]];this.#C(w,m)}render(i){if(this.#$e.enableDebugger)if("OBB"===this.#We){const m=this.#$e.boundingOBB;this.#Qe(m)&&(this.#it(m,this.#w),this.#nt(m)),this.#Ke.setPosition(0,0,0),this.#Ke.setRotation(0,0,0),this.#Ke.setScale(1,1,1),this.#Ke.render(i)}else if("AABB"===this.#We||"COMBINED_AABB"===this.#We){const m="COMBINED_AABB"===this.#We?this.#$e.combinedBoundingAABB:this.#$e.boundingAABB;this.#tt(m)&&(this.#at(m,this.#w),this.#rt(m)),this.#Ke.setPosition(0,0,0),this.#Ke.setRotation(0,0,0),this.#Ke.setScale(1,1,1),this.#Ke.render(i)}else if("BOTH"===this.#We){const m=this.#$e.boundingOBB,g=this.#$e.boundingAABB;this.#Qe(m)&&(this.#it(m,this.#w),this.#nt(m)),this.#Ke.setPosition(0,0,0),this.#Ke.setRotation(0,0,0),this.#Ke.setScale(1,1,1),this.#Ke.render(i),this.#tt(g)&&(this.#at(g,this.#Ye.geometry.vertexBuffer),this.#rt(g)),this.#Ye.setPosition(0,0,0),this.#Ye.setRotation(0,0,0),this.#Ye.setScale(1,1,1),this.#Ye.render(i)}}#C(i,m){const g=m.data;let x=0;[[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]].forEach(([m,_])=>{g[x++]=i[m][0],g[x++]=i[m][1],g[x++]=i[m][2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0,g[x++]=i[_][0],g[x++]=i[_][1],g[x++]=i[_][2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0}),m.updateAllData(g)}}Object.freeze(DrawDebuggerMesh);const br={CLAMP_TO_EDGE:"clamp-to-edge",REPEAT:"repeat",MIRRORED_REPEAT:"mirror-repeat"};Object.freeze(br);const yr={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(yr);const Tr={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(Tr);const Sr=new Map,wr=Object.values(yr),Mr=Object.values(br),Rr=Object.values(Tr);class Sampler extends ResourceBase{#st;#ot=yr.LINEAR;#ut=yr.LINEAR;#lt=Tr.LINEAR;#ct=br.REPEAT;#ht=br.REPEAT;#ft=br.REPEAT;#dt;#mt;#pt;#gt=1;constructor(i,m){super(i),this.#xt(m)}get addressModeU(){return this.#ct}set addressModeU(i){this.#_t(i,"addressModeU")}get addressModeV(){return this.#ht}set addressModeV(i){this.#_t(i,"addressModeV")}get addressModeW(){return this.#ft}set addressModeW(i){this.#_t(i,"addressModeW")}get mipmapFilter(){return this.#lt}set mipmapFilter(i){this.#vt(i,Rr,"mipmapFilter")}get gpuSampler(){return this.#st}get magFilter(){return this.#ot}set magFilter(i){this.#vt(i,wr,"magFilter")}get minFilter(){return this.#ut}set minFilter(i){this.#vt(i,wr,"minFilter")}get maxAnisotropy(){return this.#gt}set maxAnisotropy(i){validateUintRange(i,1,16),this.#gt=i,this.#xt()}get isAnisotropyValid(){return!this.#gt||"linear"===this.#ot&&"linear"===this.#ut&&"linear"===this.#lt}#bt(){this.__fireListenerList()}#_t(i,m){if(Mr.includes(i)){switch(m){case"addressModeU":this.#ct=i;break;case"addressModeV":this.#ht=i;break;case"addressModeW":this.#ft=i}this.#xt()}else consoleAndThrowError(`Invalid ${m} value. Must be one of ${Mr.join(",")},but received:${i}.`)}#vt(i,m,g){if(m.includes(i)||null===i){switch(g){case"mipmapFilter":this.#lt=i;break;case"magFilter":this.#ot=i;break;case"minFilter":this.#ut=i}this.#xt()}else consoleAndThrowError(`Invalid ${g} value. Must be one of ${m.join(",")},but received:${i}.`)}#yt(){return`${this.#ot}:${this.#ut}:${this.#lt}:${this.#ct}:${this.#ht}:${this.#ft}:${this.#dt}:${this.#mt}:${this.#pt}:${this.#gt}`}#xt(i){i&&(i.magFilter&&(this.#ot=i.magFilter),i.minFilter&&(this.#ut=i.minFilter),i.mipmapFilter&&(this.#lt=i.mipmapFilter),i.addressModeU&&(this.#ct=i.addressModeU),i.addressModeV&&(this.#ht=i.addressModeV),i.addressModeW&&(this.#ft=i.addressModeW),void 0!==i.lodMinClamp&&(this.#dt=i.lodMinClamp),void 0!==i.lodMaxClamp&&(this.#mt=i.lodMaxClamp),i.compare&&(this.#pt=i.compare),i.maxAnisotropy&&(this.#gt=i.maxAnisotropy)),this.isAnisotropyValid||1===this.#gt||(console.warn(`Invalid maxAnisotropy setting (${this.#gt}) detected:magFilter(${this.#ot}),minFilter(${this.#ut}),mipmapFilter(${this.#lt}) must all be set to 'linear' for anisotropic filtering to work. Falling back to default (1).`),this.#gt=1);const m=this.#yt();if(!Sr.has(m)){let i={};this.#ot&&(i.magFilter=this.#ot),this.#ut&&(i.minFilter=this.#ut),this.#lt&&(i.mipmapFilter=this.#lt),this.#ct&&(i.addressModeU=this.#ct),this.#ht&&(i.addressModeV=this.#ht),this.#ft&&(i.addressModeW=this.#ft),void 0!==this.#dt&&(i.lodMinClamp=this.#dt),void 0!==this.#mt&&(i.lodMaxClamp=this.#mt),this.#pt&&(i.compare=this.#pt),this.#gt&&(i.maxAnisotropy=this.#gt),Sr.set(m,this.redGPUContext.gpuDevice.createSampler(i))}this.#st=Sr.get(m),this.#bt()}}Object.freeze(Sampler);class BitmapTexture extends ManagedResourceBase{#Z;#Tt;#Q;#ee;#te;#St;#re=0;#wt=!0;#ie;#ae;#se;constructor(i,m,g=!0,x,_,b,y=!1){if(super(i,"managedBitmapTextureState"),this.#ae=x,this.#se=_,this.#wt=y,this.#te=g,this.#ie=b||navigator.gpu.getPreferredCanvasFormat(),m){this.#Tt=m?.src||m,this.#Q=m?.cacheKey||m||this.uuid;const{table:i}=this.targetResourceManagedState;let g;for(const m in i)if(i[m].cacheKey===this.#Q){g=i[m];break}if(g)return this.#ae?.(this),i[g.uuid].texture;this.src=m,this.#oe()}}get usePremultiplyAlpha(){return this.#wt}get cacheKey(){return this.#Q}get videoMemorySize(){return this.#re}get gpuTexture(){return this.#Z}get mipLevelCount(){return this.#ee}get src(){return this.#Tt}set src(i){this.#Tt=i?.src||i,this.#Q=i?.cacheKey||i||this.uuid,this.#Tt&&this.#ue(this.#Tt)}get useMipmap(){return this.#te}set useMipmap(i){this.#te=i,this.#le()}destroy(){const i=this.#Z;this.#ce(null),this.__fireListenerList(!0),this.#Tt=null,this.#Q=null,this.#he(),i&&i.destroy()}#ce(i){this.#Z=i,i||(this.#St=null),this.__fireListenerList()}#oe(){basicRegisterResource(this,new gr(this))}#he(){basicUnregisterResource(this)}#le(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#Z&&(this.#Z.destroy(),this.#Z=null),this.targetResourceManagedState.videoMemory-=this.#re,this.#re=0;const{width:x,height:_}=this.#St;this.#ee=1;const b={size:[x,_],format:this.#ie,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:this.#Tt};this.#te&&(this.#ee=getMipLevelCount(x,_),b.mipLevelCount=this.#ee,b.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const y=imageBitmapToGPUTexture(i,[this.#St],b,this.#wt);this.#re=calculateTextureByteSize(b),this.targetResourceManagedState.videoMemory+=this.#re,this.#te&&g.generateMipmap(y,b),this.#ce(y)}async#Mt(i){return new Promise((m,g)=>{const x=new Image;x.src=i,x.onload=()=>{const i=document.createElement("canvas");i.width=x.width||512,i.height=x.height||512;const _=i.getContext("2d");_?(_.fillStyle="rgba(0,0,0,0)",_.fillRect(0,0,i.width,i.height),_.drawImage(x,0,0,i.width,i.height),createImageBitmap(i,{colorSpaceConversion:"none",premultiplyAlpha:this.#wt?"premultiply":"none"}).then(m).catch(g)):g(new Error("Canvas context could not be created."))},x.onerror=i=>{g(new Error(`Failed to load SVG:${i}`))}})}async#ue(i){try{i.endsWith(".svg")?this.#St=await this.#Mt(i):this.#St=await loadAndCreateBitmapImage(i,"none",this.#wt?"premultiply":"none"),this.#le(),this.#ae?.(this)}catch(i){console.error(i),this.#se?.(i)}}}Object.freeze(BitmapTexture);const Cr={LOAD:"load",CLEAR:"clear"};Object.freeze(Cr);const Pr={STORE:"store",DISCARD:"discard"};Object.freeze(Pr);class MipmapGenerator{#b;#de;#Rt;#Ct;#Le;#Pt;#Et=new Map;#It=new Map;#Bt=new Map;#Lt=new Map;#Dt=null;#Ut=null;#At=null;#kt=null;#Ot=8;#Ft=8;constructor(i){this.#b=i,this.#de=new Sampler(i,{minFilter:"linear"}).gpuSampler,this.#Ct={}}getTextureView(i,m,g){this.#Et.has(i)||this.#Et.set(i,new Map);const x=this.#Et.get(i);x.has(m)||x.set(m,new Map);const _=x.get(m);if(!_.has(g)){const x=i.createView({baseMipLevel:m,mipLevelCount:1,dimension:"2d",baseArrayLayer:g,arrayLayerCount:1,label:`mipmap_${m}_${g}_${i.label}`});_.set(g,x)}return _.get(g)}getBindGroup(i){if(!this.#It.has(i)){const{gpuDevice:m}=this.#b,g=m.createBindGroup({layout:this.#Le,entries:[{binding:0,resource:this.#de},{binding:1,resource:i}]});this.#It.set(i,g)}return this.#It.get(i)}clearCaches(i){if(i){if(this.#Et.has(i)){const m=this.#Et.get(i);for(const i of m.values())for(const m of i.values())this.#It.delete(m);this.#Et.delete(i)}}else this.#Et.clear(),this.#It.clear()}getMipmapPipeline(i){const{gpuDevice:m,resourceManager:g}=this.#b;let x=this.#Ct[i];return x||(this.#Pt||(this.#Pt=g.createGPUShaderModule("MODULE_MIP_MAP",{code:"\nvar<private> pos:array<vec2<f32>,3>=array<vec2<f32>,3>(vec2<f32>(-1.0,-1.0),vec2<f32>(-1.0,3.0),vec2<f32>(3.0,-1.0)\n);\nstruct VertexOutput {@builtin(position)position:vec4<f32>,@location(0)texCoord:vec2<f32>,\n};\n@vertex\nfn vertexMain(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput {var output:VertexOutput;output.texCoord=pos[vertexIndex] * vec2<f32>(0.5,-0.5) + vec2<f32>(0.5);output.position=vec4<f32>(pos[vertexIndex],0.0,1.0);return output;\n}\n@group(0) @binding(0)\nvar imgSampler:sampler;\n@group(0) @binding(1)\nvar img:texture_2d<f32>;\n@fragment\nfn fragmentMain(@location(0) texCoord:vec2<f32>) -> @location(0) vec4<f32> {return textureSample(img,imgSampler,texCoord);\n}\n"}),this.#Le=g.createBindGroupLayout("FRAGMENT_BIND_GROUP_LAYOUT_NAME_MIP_MAP",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]}),this.#Rt=g.createGPUPipelineLayout("PIPELINE_DESCRIPTOR_FINAL_MIP_MAP",{bindGroupLayouts:[this.#Le]})),x=m.createRenderPipeline({layout:this.#Rt,vertex:{module:this.#Pt,entryPoint:"vertexMain"},fragment:{module:this.#Pt,entryPoint:"fragmentMain",targets:[{format:i}]}}),this.#Ct[i]=x),x}#Nt(){if(this.#Dt)return;const{gpuDevice:i,resourceManager:m}=this.#b;this.#kt=new Sampler(this.#b,{minFilter:"linear",magFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}).gpuSampler,this.#Dt=m.createGPUShaderModule("CUBEMAP_DOWNSAMPLER_COMPUTE",{code:"\nstruct Uniforms {targetSize:f32,sourceMipLevel:f32,targetMipLevel:f32,padding:f32,\n};\n@group(0) @binding(0) var sourceCubemap:texture_cube<f32>;\n@group(0) @binding(1) var targetCubemap:texture_storage_2d_array<rgba8unorm,write>;\n@group(0) @binding(2) var cubemapSampler:sampler;\n@group(0) @binding(3) var<uniform> uniforms:Uniforms;\nfn cubemapUVToDirection(uv:vec2<f32>,face:u32) -> vec3<f32> {let u=uv.x * 2.0 - 1.0;let v=uv.y * 2.0 - 1.0;switch face {case 0u:{return vec3<f32>(1.0,-v,-u);}case 1u:{return vec3<f32>(-1.0,-v,u);}case 2u:{return vec3<f32>(u,1.0,v);}case 3u:{return vec3<f32>(u,-1.0,-v);}case 4u:{return vec3<f32>(u,-v,1.0);}case 5u:{return vec3<f32>(-u,-v,-1.0);}default:{return vec3<f32>(0.0,0.0,1.0);}}\n}\nfn gaussianWeight(x:f32,y:f32,sigma:f32) -> f32 {let sigmaSq=sigma * sigma;return exp(-(x * x + y * y)/(2.0 * sigmaSq))/(2.0 * 3.14159265359 * sigmaSq);\n}\nfn clampCubemapUV(uv:vec2<f32>) -> vec2<f32> {return clamp(uv,vec2<f32>(0.0),vec2<f32>(1.0));\n}\n@compute @workgroup_size(8,8,1)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) {let face=global_id.z;let coord=vec2<u32>(global_id.xy);let targetSize=u32(uniforms.targetSize);if (coord.x >=targetSize || coord.y >=targetSize || face >=6u) {return;}let uv=(vec2<f32>(coord) + 0.5)/f32(targetSize);let direction=normalize(cubemapUVToDirection(uv,face));let sourceMipLevel=uniforms.sourceMipLevel;let targetMipLevel=uniforms.targetMipLevel;var color=vec4<f32>(0.0);if (sourceMipLevel==0.0 && targetSize > 64u) {let sampleCount=16u;let sampleRadius=1.0/f32(targetSize);var totalWeight=0.0;for (var i=0u;i < sampleCount;i++) {let angle=2.0 * 3.14159265359 * f32(i)/f32(sampleCount);let radius=sampleRadius * (0.5 + 0.5 * f32(i % 4u)/4.0);let offsetUV=clampCubemapUV(uv + vec2<f32>(cos(angle) * radius,sin(angle) * radius));let sampleDir=normalize(cubemapUVToDirection(offsetUV,face));let sampleColor=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel);let weight=gaussianWeight(cos(angle) * radius * f32(targetSize),sin(angle) * radius * f32(targetSize),0.8);color +=sampleColor * weight;totalWeight +=weight;}if (totalWeight > 0.0) {color=color/totalWeight;}} else if (sourceMipLevel==0.0 && targetSize > 16u) {let sampleCount=4u;let invSampleCount=1.0/f32(sampleCount * sampleCount);let sampleOffset=0.5/f32(targetSize);for (var x=0u;x < sampleCount;x++) {for (var y=0u;y < sampleCount;y++) {let offset=vec2<f32>((f32(x) - 1.5) * sampleOffset,(f32(y) - 1.5) * sampleOffset);let offsetUV=clampCubemapUV(uv + offset);let sampleDir=normalize(cubemapUVToDirection(offsetUV,face));color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel);}}color *=invSampleCount;} else if (targetSize > 4u) {let sampleCount=2u;let invSampleCount=1.0/f32(sampleCount * sampleCount);let sampleOffset=0.25/f32(targetSize);for (var x=0u;x < sampleCount;x++) {for (var y=0u;y < sampleCount;y++) {let offset=vec2<f32>((f32(x) - 0.5) * sampleOffset,(f32(y) - 0.5) * sampleOffset);let offsetUV=clampCubemapUV(uv + offset);let sampleDir=normalize(cubemapUVToDirection(offsetUV,face));color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel);}}color *=invSampleCount;} else {color=textureSampleLevel(sourceCubemap,cubemapSampler,direction,sourceMipLevel);}if (targetMipLevel > 0.0) {let luminance=dot(color.rgb,vec3<f32>(0.299,0.587,0.114));let saturation=0.9 + 0.1/(1.0 + targetMipLevel * 0.1);color=vec4<f32>(mix(vec3<f32>(luminance),color.rgb,saturation),color.a);}textureStore(targetCubemap,vec2<i32>(coord),i32(face),color);\n}\n"}),this.#Gt()}#Vt(i){if(!this.#Bt.has(i)){const{gpuDevice:m,resourceManager:g}=this.#b,x=g.createBindGroupLayout(`CUBEMAP_DOWNSAMPLER_BIND_GROUP_LAYOUT_${i}`,{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{viewDimension:"cube",sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:i,viewDimension:"2d-array"}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),_=m.createComputePipeline({layout:m.createPipelineLayout({bindGroupLayouts:[x]}),compute:{module:this.#Dt,entryPoint:"main"}});this.#Lt.set(i,x),this.#Bt.set(i,_)}return this.#Bt.get(i)}#Gt(){const{gpuDevice:i}=this.#b;this.#At={arrayBufferByteLength:16,properties:{targetSize:{byteOffset:0,size:4},sourceMipLevel:{byteOffset:4,size:4},targetMipLevel:{byteOffset:8,size:4},padding:{byteOffset:12,size:4}}},this.#Ut=i.createBuffer({size:this.#At.arrayBufferByteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"MipmapGenerator_CubemapDownsampler_UniformBuffer"})}async downsampleCubemap(i,m=256,g="rgba8unorm"){try{this.#Nt();const{gpuDevice:x}=this.#b;if(!i)throw new Error("Invalid source cubemap texture");if(m<=0||!Number.isInteger(m))throw new Error("Target size must be a positive integer");const _=i.mipLevelCount,b=getMipLevelCount(m,m),y=x.createTexture({size:[m,m,6],format:g,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:b,label:`MipmapGenerator_CubemapDownsampler_${m}x${m}_${b}mips_${Date.now()}`});for(let x=0;x<b;x++){const b=Math.max(1,m>>x),T=this.#Ht(i.width,m,x,_);await this.#zt(i,y,T,x,b,g)}return y}catch(i){throw console.error("큐브맵 다운샘플링 실패:",i),i}}#Ht(i,m,g,x){const _=i/Math.max(1,m>>g),b=Math.max(0,Math.floor(Math.log2(_)));return Math.min(b,x-1)}async#zt(i,m,g,x,_,b){const{gpuDevice:y}=this.#b,T=this.#Vt(b),w=this.#Lt.get(b),P=y.createBindGroup({layout:w,entries:[{binding:0,resource:i.createView({dimension:"cube",baseMipLevel:g,mipLevelCount:1})},{binding:1,resource:m.createView({dimension:"2d-array",baseMipLevel:x,mipLevelCount:1,arrayLayerCount:6})},{binding:2,resource:this.#kt},{binding:3,resource:{buffer:this.#Ut}}]});this.#$t(g,x,_);const H=y.createCommandEncoder({label:`MipmapGenerator_CubemapDownsampler_CommandEncoder_Mip${x}`}),z=H.beginComputePass({label:`MipmapGenerator_CubemapDownsampler_ComputePass_Mip${x}`});z.setPipeline(T),z.setBindGroup(0,P),z.dispatchWorkgroups(Math.ceil(_/this.#Ot),Math.ceil(_/this.#Ft),6),z.end();const $=H.finish();y.queue.submit([$]),await y.queue.onSubmittedWorkDone()}#$t(i,m,g){const{gpuDevice:x}=this.#b,_=new Float32Array([g,i,m,0]);x.queue.writeBuffer(this.#Ut,0,_)}generateMipmap(i,m){const{gpuDevice:g}=this.#b,x=this.getMipmapPipeline(m.format);if("3d"==m.dimension||"1d"==m.dimension)throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");let _=i;const b=m.size[0],y=m.size[1],T=m.size[2]||1,w=m.usage&GPUTextureUsage.RENDER_ATTACHMENT;if(!w){const i={size:{width:Math.max(1,b>>>1),height:Math.max(1,y>>>1),depthOrArrayLayers:T},format:m.format,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,mipLevelCount:m.mipLevelCount-1};_=g.createTexture(i)}const P=g.createCommandEncoder({});for(let g=0;g<T;++g){let b=this.getTextureView(i,0,g),y=w?1:0;for(let i=1;i<m.mipLevelCount;++i){const i=this.getTextureView(_,y++,g),m=P.beginRenderPass({colorAttachments:[{view:i,clearValue:{r:0,g:0,b:0,a:0},loadOp:Cr.CLEAR,storeOp:Pr.STORE}]}),T=this.getBindGroup(b);m.setPipeline(x),m.setBindGroup(0,T),m.draw(3,1,0,0),m.end(),b=i}}if(!w){const g={width:Math.max(1,b>>>1),height:Math.max(1,y>>>1),depthOrArrayLayers:T};for(let x=1;x<m.mipLevelCount;++x)P.copyTextureToTexture({texture:_,mipLevel:x-1},{texture:i,mipLevel:x},g),g.width=Math.max(1,g.width>>>1),g.height=Math.max(1,g.height>>>1)}return g.queue.submit([P.finish()]),w||(this.clearCaches(_),_.destroy()),i}destroy(){this.clearCaches(),this.#Ut&&(this.#Ut.destroy(),this.#Ut=null),this.#Bt.clear(),this.#Lt.clear(),this.#Dt=null,this.#kt=null}}Object.freeze(MipmapGenerator);class ResourceState{table={};videoMemory=0;length=0;constructor(){}}var Er;Object.freeze(ResourceState),function(i){i.GPUShaderModule="GPUShaderModule",i.GPUBindGroupLayout="GPUBindGroupLayout",i.GPUPipelineLayout="GPUPipelineLayout"}(Er||(Er={}));class ResourceManager extends ResourceBase{static PRESET_GPUBindGroupLayout_System="PRESET_GPUBindGroupLayout_System";static PRESET_VERTEX_GPUBindGroupLayout_Instancing="PRESET_VERTEX_GPUBindGroupLayout_Instancing";static PRESET_VERTEX_GPUBindGroupLayout="PRESET_VERTEX_GPUBindGroupLayout";static PRESET_VERTEX_GPUBindGroupLayout_SKIN="PRESET_VERTEX_GPUBindGroupLayout_SKIN";#qt=new ImmutableKeyMap([[Er.GPUShaderModule,new Map],[Er.GPUBindGroupLayout,new Map],[Er.GPUPipelineLayout,new Map]]);#Kt=new ResourceState;#Wt=new ResourceState;#Xt=new ResourceState;#Yt=new ResourceState;#jt=new ResourceState;#Zt=new ResourceState;#Jt=new ResourceState;#Qt={};#en;#Te;#tn;#nn;constructor(i){super(i),this.#tn=new MipmapGenerator(i),this.#rn()}get basicSampler(){return this.#nn}get mipmapGenerator(){return this.#tn}get cachedBufferState(){return this.#Qt}get emptyBitmapTextureView(){return this.#en}get emptyCubeTextureView(){return this.#Te}get managedBitmapTextureState(){return this.#Kt}get managedCubeTextureState(){return this.#Wt}get managedHDRTextureState(){return this.#Xt}get managedUniformBufferState(){return this.#Yt}get managedVertexBufferState(){return this.#jt}get managedIndexBufferState(){return this.#Zt}get managedStorageBufferState(){return this.#Jt}get resources(){return this.#qt}createGPUShaderModule(i,m){return this.#in(i,m,m=>this.#an(i,m),Er.GPUShaderModule)}getGPUShaderModule(i){return this.#sn(i,Er.GPUShaderModule)}deleteGPUShaderModule(i){this.#on(i,Er.GPUShaderModule)}createBindGroupLayout(i,m){return this.#in(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createBindGroupLayout(m)),Er.GPUBindGroupLayout)}getGPUBindGroupLayout(i){return this.#sn(i,Er.GPUBindGroupLayout)}deleteGPUBindGroupLayout(i){this.#on(i,Er.GPUBindGroupLayout)}createGPUPipelineLayout(i,m){return this.#in(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createPipelineLayout(m)),Er.GPUPipelineLayout)}getGPUPipelineLayout(i){return this.#sn(i,Er.GPUPipelineLayout)}deleteGPUPipelineLayout(i){this.#on(i,Er.GPUPipelineLayout)}#rn(){const{gpuDevice:i}=this.redGPUContext;{const m=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"emptyBitmapTexture"});this.#en=m.createView({label:m.label});const g=new Uint8Array([0,0,0,0]);i.queue.writeTexture({texture:m},g,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});const x=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:6},format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"emptyCubeTexture"});this.#Te=x.createView(CubeTexture.defaultViewDescriptor);const _=new Uint8Array([0,0,0,0]);for(let m=0;m<6;m++)i.queue.writeTexture({texture:x,origin:{x:0,y:0,z:m}},_,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});this.#nn=new Sampler(this.redGPUContext)}this.createBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:6,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:9,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}},{binding:3,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]})}#un(i){return this.#qt.get(i)}#an(i,m){const{code:g}=m,x=parseIncludeWGSL(g),_=this.redGPUContext.gpuDevice.createShaderModule({...m,code:x});return this.#un(Er.GPUShaderModule).set(i,_),_}#ln(i,m){if(!i)throw new Error("Name is required");return this.#un(m)}#in(i,m,g,x){const _=this.#ln(i,x);if(_.has(i))return _.get(i);m.label||(m.label=i);const b=g(m);return _.set(i,b),b}#sn(i,m){return this.#ln(i,m).get(i)}#on(i,m){const g=this.#ln(i,m);if(!g.has(i))throw new Error(`${m} with name ${i} doesn't exist.`);g.delete(i)}}Object.freeze(BitmapTexture);class ImmutableKeyMap extends Map{constructor(i=[]){super(),i?.forEach(([i,m])=>super.set(i,m))}set(i,m){if(this.has(i))throw new Error("Cannot change the value of an existing key");return super.set(i,m)}}const createMeshVertexUniformBuffers=(i,m=!1)=>{const{gpuRenderInfo:g,redGPUContext:x}=i,{resourceManager:_}=x,b=_.getGPUBindGroupLayout(m?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout),y=new ArrayBuffer(g.vertexUniformInfo.arrayBufferByteLength),T=new UniformBuffer(x,y,i.name);g.vertexBindGroupLayout=b,g.vertexUniformBuffer=T};class ABitmapBaseMaterial extends ABaseMaterial{__packingList;constructor(i,m,g,x){super(i,m,g,x)}updateTexture(i,m){i&&i.__removeDirtyPipelineListener(this.#cn),m&&m.__addDirtyPipelineListener(this.#cn),this.#cn()}updateSampler(i,m){i&&i.__removeDirtyPipelineListener(this.#cn),m&&m.__addDirtyPipelineListener(this.#cn),this.#cn()}#cn=()=>{this.dirtyPipeline=!0;{let i=(this.__packingList||[]).length;for(;i--;)this.__packingList[i]()}this.gpuRenderInfo?.fragmentShaderModule?this._updateFragmentState():this.initGPURenderInfos()}}Object.freeze(ABitmapBaseMaterial);const Ir=[{textureList:["baseColorTexture"],vec4List:[["baseColorFactor",[1,1,1,1]]]},{textureList:["normalTexture"]},{textureList:["metallicRoughnessTexture"],positiveNumberList:["metallicFactor","roughnessFactor"]},{textureList:["emissiveTexture"],vec3List:["emissiveFactor"]},{textureList:["occlusionTexture"],positiveNumberList:["occlusionStrength"]},{extensionName:"KHR_materials_clearcoat",textureList:["KHR_clearcoatTexture","KHR_clearcoatNormalTexture","KHR_clearcoatRoughnessTexture"],positiveNumberList:[["KHR_clearcoatFactor",0],["KHR_clearcoatRoughnessFactor",0],"KHR_clearcoatNormalScale"]},{extensionName:"KHR_materials_sheen",textureList:["KHR_sheenColorTexture","KHR_sheenRoughnessTexture"],positiveNumberList:[["KHR_sheenRoughnessFactor",0]],vec3List:[["KHR_sheenColorFactor",[0,0,0]]]},{extensionName:"KHR_materials_specular",textureList:["KHR_specularTexture","KHR_specularColorTexture"],positiveNumberList:["KHR_specularFactor"],vec3List:[["KHR_specularColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_transmission",textureList:["KHR_transmissionTexture"],positiveNumberList:[["KHR_transmissionFactor",0]]},{extensionName:"KHR_materials_volume",textureList:["KHR_thicknessTexture"],positiveNumberList:[["KHR_thicknessFactor",0],["KHR_attenuationDistance",1]],vec3List:[["KHR_attenuationColor",[1,1,1]]]},{extensionName:"KHR_materials_diffuse_transmission",textureList:["KHR_diffuseTransmissionTexture","KHR_diffuseTransmissionColorTexture"],positiveNumberList:[["KHR_diffuseTransmissionFactor",0]],vec3List:[["KHR_diffuseTransmissionColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_anisotropy",textureList:["KHR_anisotropyTexture"],positiveNumberList:[["KHR_anisotropyStrength",0],["KHR_anisotropyRotation",0]]},{extensionName:"KHR_materials_iridescence",textureList:["KHR_iridescenceTexture","KHR_iridescenceThicknessTexture"],positiveNumberList:[["KHR_iridescenceFactor",0],["KHR_iridescenceIor",1.3],["KHR_iridescenceThicknessMinimum",100],["KHR_iridescenceThicknessMaximum",400]]}],Br=parseWGSL((i=>{const m=Ir.map(i=>{const{textureList:m,positiveNumberList:g}=i,x=m?.map(i=>`use${i.charAt(0).toUpperCase()+i.slice(1)}:u32,${i}_texCoord_index:u32,use_${i}_KHR_texture_transform:u32,${i}_KHR_texture_transform_offset:vec2<f32>,${i}_KHR_texture_transform_scale:vec2<f32>,${i}_KHR_texture_transform_rotation:f32,`).join("");return[x].join("\n")}).join("");return i.replace(/#redgpu_include KHR_texture_transform/g,m)})("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include calcTintBlendMode;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\nstruct Uniforms {useVertexColor:u32,useCutOff:u32,cutOff:f32,alphaBlend:u32,doubleSided:u32,useVertexTangent:u32,opacity:f32,useTint:u32,tint:vec4<f32>,tintBlendMode:u32,baseColorFactor:vec4<f32>,emissiveFactor:vec3<f32>,emissiveStrength:f32,occlusionStrength:f32,metallicFactor:f32,roughnessFactor:f32,normalScale:f32,useKHR_materials_unlit:u32,KHR_materials_ior:f32,useKHR_materials_transmission:u32,KHR_transmissionFactor:f32,useKHR_materials_diffuse_transmission:u32,KHR_diffuseTransmissionFactor:f32,KHR_diffuseTransmissionColorFactor:vec3<f32>,KHR_dispersion:f32,useKHR_materials_volume:u32,KHR_thicknessFactor:f32,KHR_attenuationDistance:f32,KHR_attenuationColor:vec3<f32>,useKHR_materials_specular:u32,KHR_specularFactor:f32,KHR_specularColorFactor:vec3<f32>,useKHR_materials_anisotropy:u32,KHR_anisotropyStrength:f32,KHR_anisotropyRotation:f32,useKHR_materials_iridescence:u32,KHR_iridescenceFactor:f32,KHR_iridescenceIor:f32,KHR_iridescenceThicknessMinimum:f32,KHR_iridescenceThicknessMaximum:f32,useKHR_materials_sheen:u32,KHR_sheenColorFactor:vec3<f32>,KHR_sheenRoughnessFactor:f32,useKHR_materials_clearcoat:u32,KHR_clearcoatFactor:f32,KHR_clearcoatRoughnessFactor:f32,KHR_clearcoatNormalScale:f32,#redgpu_include KHR_texture_transform\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var baseColorTextureSampler:sampler;\n@group(2) @binding(2) var baseColorTexture:texture_2d<f32>;\n@group(2) @binding(3) var emissiveTextureSampler:sampler;\n@group(2) @binding(4) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(5) var normalTextureSampler:sampler;\n@group(2) @binding(6) var normalTexture:texture_2d<f32>;\n@group(2) @binding(7) var packedORMTexture:texture_2d<f32>;\n@group(2) @binding(8) var KHR_specularTextureSampler:sampler;\n@group(2) @binding(9) var KHR_specularTexture:texture_2d<f32>;\n@group(2) @binding(10) var KHR_specularColorTextureSampler:sampler;\n@group(2) @binding(11) var KHR_specularColorTexture:texture_2d<f32>;\n@group(2) @binding(12) var KHR_clearcoatNormalTexture:texture_2d<f32>;\n@group(2) @binding(13) var packedKHR_clearcoatTexture_transmission:texture_2d<f32>;\n@group(2) @binding(14) var packedKHR_diffuse_transmission:texture_2d<f32>;\n@group(2) @binding(15) var packedKHR_sheen:texture_2d<f32>;\n@group(2) @binding(16) var KHR_anisotropyTexture:texture_2d<f32>;\n@group(2) @binding(17) var packedKHR_iridescence:texture_2d<f32>;\nstruct InputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(3) uv1:vec2<f32>,@location(4) vertexColor_0:vec4<f32>,@location(5) vertexTangent:vec4<f32>,@location(6) shadowPos:vec3<f32>,@location(7) receiveShadow:f32,@location(8) pickingId:vec4<f32>,@location(9) ndcPosition:vec3<f32>,@location(10) localNodeScale:f32,@location(11) volumeScale:f32,\n}\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> {let input_vertexNormal=(inputData.vertexNormal.xyz);let input_vertexPosition=inputData.vertexPosition.xyz;let input_vertexColor_0=inputData.vertexColor_0;let input_vertexTangent=inputData.vertexTangent;let input_ndcPosition=inputData.ndcPosition;let input_uv=inputData.uv;let input_uv1=inputData.uv1;let u_ambientLight=systemUniforms.ambientLight;let u_ambientLightColor=u_ambientLight.color;let u_ambientLightIntensity=u_ambientLight.intensity;let u_directionalLightCount=systemUniforms.directionalLightCount;let u_directionalLights=systemUniforms.directionalLights;let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize;let u_bias=systemUniforms.bias;let u_useIblTexture=systemUniforms.useIblTexture==1u;let receiveShadowYn=inputData.receiveShadow !=.0;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_opacity=uniforms.opacity;let u_doubleSided=uniforms.doubleSided==1u;let u_useCutOff=uniforms.useCutOff==1u;let u_cutOff=uniforms.cutOff;let u_useVertexColor=uniforms.useVertexColor==1u;let u_useVertexTangent=uniforms.useVertexTangent==1u;let u_baseColorFactor=uniforms.baseColorFactor;let u_useBaseColorTexture=uniforms.useBaseColorTexture==1u;let u_metallicFactor=uniforms.metallicFactor;let u_roughnessFactor=uniforms.roughnessFactor;let u_useMetallicRoughnessTexture=uniforms.useMetallicRoughnessTexture==1u;let u_useNormalTexture=uniforms.useNormalTexture==1u;let u_normalScale=uniforms.normalScale;let u_useOcclusionTexture=uniforms.useOcclusionTexture==1u;let u_occlusionStrength=uniforms.occlusionStrength;let u_useEmissiveTexture=uniforms.useEmissiveTexture==1u;let u_emissiveFactor=uniforms.emissiveFactor;let u_emissiveStrength=uniforms.emissiveStrength;let u_useKHR_materials_unlit=uniforms.useKHR_materials_unlit==1u;let u_KHR_materials_ior=uniforms.KHR_materials_ior;let u_KHR_dispersion=uniforms.KHR_dispersion;let u_useKHR_materials_transmission=uniforms.useKHR_materials_transmission==1u;let u_KHR_transmissionFactor=uniforms.KHR_transmissionFactor;let u_useKHR_transmissionTexture=uniforms.useKHR_transmissionTexture==1u;var u_useKHR_materials_volume=uniforms.useKHR_materials_volume==1u;var u_KHR_thicknessFactor=uniforms.KHR_thicknessFactor;var u_KHR_attenuationColor=uniforms.KHR_attenuationColor;var u_KHR_attenuationDistance=uniforms.KHR_attenuationDistance;var u_useKHR_thicknessTexture=uniforms.useKHR_thicknessTexture==1u;let u_useKHR_materials_diffuse_transmission=uniforms.useKHR_materials_diffuse_transmission==1u;let u_KHR_diffuseTransmissionFactor=uniforms.KHR_diffuseTransmissionFactor;let u_KHR_diffuseTransmissionColorFactor=uniforms.KHR_diffuseTransmissionColorFactor;let u_useKHR_diffuseTransmissionTexture=uniforms.useKHR_diffuseTransmissionTexture==1u;let u_useKHR_diffuseTransmissionColorTexture=uniforms.useKHR_diffuseTransmissionColorTexture==1u;let u_useKHR_materials_specular=uniforms.useKHR_materials_specular==1u;let u_KHR_specularFactor=uniforms.KHR_specularFactor;let u_KHR_specularColorFactor=uniforms.KHR_specularColorFactor;let u_useKHR_specularTexture=uniforms.useKHR_specularTexture==1u;let u_useKHR_specularColorTexture=uniforms.useKHR_specularColorTexture==1u;let u_useKHR_materials_anisotropy=uniforms.useKHR_materials_anisotropy==1u;let u_KHR_anisotropyStrength=uniforms.KHR_anisotropyStrength;let u_KHR_anisotropyRotation=uniforms.KHR_anisotropyRotation;let u_useKHR_anisotropyTexture=uniforms.useKHR_anisotropyTexture==1u;let u_useKHR_materials_sheen=uniforms.useKHR_materials_sheen==1u;let u_useKHR_sheenColorTexture=uniforms.useKHR_sheenColorTexture==1u;let u_useKHR_sheenRoughnessTexture=uniforms.useKHR_sheenRoughnessTexture==1u;let u_KHR_sheenColorFactor=uniforms.KHR_sheenColorFactor;let u_KHR_sheenRoughnessFactor=uniforms.KHR_sheenRoughnessFactor;let u_useKHR_materials_iridescence=uniforms.useKHR_materials_iridescence==1u;let u_useKHR_iridescenceTexture=uniforms.useKHR_iridescenceTexture==1u;let u_useKHR_iridescenceThicknessTexture=uniforms.useKHR_iridescenceThicknessTexture==1u;let u_KHR_iridescenceFactor=uniforms.KHR_iridescenceFactor;let u_KHR_iridescenceIor=uniforms.KHR_iridescenceIor;let u_KHR_iridescenceThicknessMinimum=uniforms.KHR_iridescenceThicknessMinimum;let u_KHR_iridescenceThicknessMaximum=uniforms.KHR_iridescenceThicknessMaximum;let u_useKHR_materials_clearcoat=uniforms.useKHR_materials_clearcoat==1u;let u_KHR_clearcoatFactor=uniforms.KHR_clearcoatFactor;let u_useKHR_clearcoatTexture=uniforms.useKHR_clearcoatTexture==1u;let u_KHR_clearcoatRoughnessFactor=uniforms.KHR_clearcoatRoughnessFactor;let u_useKHR_clearcoatRoughnessTexture=uniforms.useKHR_clearcoatRoughnessTexture==1u;let u_useKHR_clearcoatNormalTexture=uniforms.useKHR_clearcoatNormalTexture==1u;let u_KHR_clearcoatNormalScale=uniforms.KHR_clearcoatNormalScale;let diffuseUV=get_transformed_uv(input_uv,input_uv1,uniforms.baseColorTexture_texCoord_index,uniforms.use_baseColorTexture_KHR_texture_transform,uniforms.baseColorTexture_KHR_texture_transform_offset,uniforms.baseColorTexture_KHR_texture_transform_rotation,uniforms.baseColorTexture_KHR_texture_transform_scale);let emissiveUV=get_transformed_uv(input_uv,input_uv1,uniforms.emissiveTexture_texCoord_index,uniforms.use_emissiveTexture_KHR_texture_transform,uniforms.emissiveTexture_KHR_texture_transform_offset,uniforms.emissiveTexture_KHR_texture_transform_rotation,uniforms.emissiveTexture_KHR_texture_transform_scale);let occlusionUV=get_transformed_uv(input_uv,input_uv1,uniforms.occlusionTexture_texCoord_index,uniforms.use_occlusionTexture_KHR_texture_transform,uniforms.occlusionTexture_KHR_texture_transform_offset,uniforms.occlusionTexture_KHR_texture_transform_rotation,uniforms.occlusionTexture_KHR_texture_transform_scale);let metallicRoughnessUV=get_transformed_uv(input_uv,input_uv1,uniforms.metallicRoughnessTexture_texCoord_index,uniforms.use_metallicRoughnessTexture_KHR_texture_transform,uniforms.metallicRoughnessTexture_KHR_texture_transform_offset,uniforms.metallicRoughnessTexture_KHR_texture_transform_rotation,uniforms.metallicRoughnessTexture_KHR_texture_transform_scale);let normalUV=get_transformed_uv(input_uv,input_uv1,uniforms.normalTexture_texCoord_index,uniforms.use_normalTexture_KHR_texture_transform,uniforms.normalTexture_KHR_texture_transform_offset,uniforms.normalTexture_KHR_texture_transform_rotation,uniforms.normalTexture_KHR_texture_transform_scale);let KHR_clearcoatUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_clearcoatTexture_texCoord_index,uniforms.use_KHR_clearcoatTexture_KHR_texture_transform,uniforms.KHR_clearcoatTexture_KHR_texture_transform_offset,uniforms.KHR_clearcoatTexture_KHR_texture_transform_rotation,uniforms.KHR_clearcoatTexture_KHR_texture_transform_scale);let KHR_clearcoatNormalUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_clearcoatNormalTexture_texCoord_index,uniforms.use_KHR_clearcoatNormalTexture_KHR_texture_transform,uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_offset,uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_rotation,uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_scale);let KHR_clearcoatRoughnessUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_clearcoatRoughnessTexture_texCoord_index,uniforms.use_KHR_clearcoatRoughnessTexture_KHR_texture_transform,uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_offset,uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_rotation,uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_scale);let KHR_sheenColorUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_sheenColorTexture_texCoord_index,uniforms.use_KHR_sheenColorTexture_KHR_texture_transform,uniforms.KHR_sheenColorTexture_KHR_texture_transform_offset,uniforms.KHR_sheenColorTexture_KHR_texture_transform_rotation,uniforms.KHR_sheenColorTexture_KHR_texture_transform_scale);let KHR_sheenRoughnessUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_sheenRoughnessTexture_texCoord_index,uniforms.use_KHR_sheenRoughnessTexture_KHR_texture_transform,uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_offset,uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_rotation,uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_scale);let KHR_specularTextureUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_specularTexture_texCoord_index,uniforms.use_KHR_specularTexture_KHR_texture_transform,uniforms.KHR_specularTexture_KHR_texture_transform_offset,uniforms.KHR_specularTexture_KHR_texture_transform_rotation,uniforms.KHR_specularTexture_KHR_texture_transform_scale);let KHR_specularColorTextureUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_specularColorTexture_texCoord_index,uniforms.use_KHR_specularColorTexture_KHR_texture_transform,uniforms.KHR_specularColorTexture_KHR_texture_transform_offset,uniforms.KHR_specularColorTexture_KHR_texture_transform_rotation,uniforms.KHR_specularColorTexture_KHR_texture_transform_scale);let KHR_iridescenceTextureUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_iridescenceTexture_texCoord_index,uniforms.use_KHR_iridescenceTexture_KHR_texture_transform,uniforms.KHR_iridescenceTexture_KHR_texture_transform_offset,uniforms.KHR_iridescenceTexture_KHR_texture_transform_rotation,uniforms.KHR_iridescenceTexture_KHR_texture_transform_scale);let KHR_iridescenceThicknessTextureUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_iridescenceThicknessTexture_texCoord_index,uniforms.use_KHR_iridescenceThicknessTexture_KHR_texture_transform,uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_offset,uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_rotation,uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_scale);let KHR_transmissionUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_transmissionTexture_texCoord_index,uniforms.use_KHR_transmissionTexture_KHR_texture_transform,uniforms.KHR_transmissionTexture_KHR_texture_transform_offset,uniforms.KHR_transmissionTexture_KHR_texture_transform_rotation,uniforms.KHR_transmissionTexture_KHR_texture_transform_scale);let KHR_diffuseTransmissionUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_diffuseTransmissionTexture_texCoord_index,uniforms.use_KHR_diffuseTransmissionTexture_KHR_texture_transform,uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_offset,uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_rotation,uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_scale);let KHR_diffuseTransmissionColorUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_diffuseTransmissionColorTexture_texCoord_index,uniforms.use_KHR_diffuseTransmissionColorTexture_KHR_texture_transform,uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_offset,uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_rotation,uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_scale);let KHR_anisotropyUV=get_transformed_uv(input_uv,input_uv1,uniforms.KHR_anisotropyTexture_texCoord_index,uniforms.use_KHR_anisotropyTexture_KHR_texture_transform,uniforms.KHR_anisotropyTexture_KHR_texture_transform_offset,uniforms.KHR_anisotropyTexture_KHR_texture_transform_rotation,uniforms.KHR_anisotropyTexture_KHR_texture_transform_scale);var N:vec3<f32>=normalize(input_vertexNormal.xyz);var backFaceYn:bool=false;if(u_doubleSided) {var fdx:vec3<f32>=dpdx(input_vertexPosition);var fdy:vec3<f32>=dpdy(input_vertexPosition);var faceNormal:vec3<f32>=normalize(cross(fdy,fdx));if (dot(N,faceNormal) < 0.0) {N=-N;backFaceYn=true;};}let N2=N;if(u_useNormalTexture){var targetUv=select(normalUV,1.0 - normalUV,backFaceYn);let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,normalUV).rgb;N=perturb_normal(N,input_vertexPosition,targetUv,vec3<f32>(normalSamplerColor.r,1.0 - normalSamplerColor.g,normalSamplerColor.b),u_normalScale);N=select(N,select(N,-N,backFaceYn),u_useVertexTangent);}else{N=N * u_normalScale;}let V:vec3<f32>=normalize(u_cameraPosition - input_vertexPosition);let NdotV=max(dot(N,V),0.04);let VdotN=max(dot(V,N),0.0);var visibility:f32=1.0;visibility=calcDirectionalShadowVisibility(directionalShadowMap,directionalShadowMapSampler,u_shadowDepthTextureSize,u_bias,inputData.shadowPos);if(!receiveShadowYn){visibility=1.0;}var finalColor:vec4<f32>;var ior:f32=u_KHR_materials_ior;var baseColor=u_baseColorFactor;var resultAlpha:f32=u_opacity * baseColor.a;baseColor *=select(vec4<f32>(1.0),input_vertexColor_0,u_useVertexColor);if(u_useBaseColorTexture){let diffuseSampleColor=(textureSample(baseColorTexture,baseColorTextureSampler,diffuseUV));baseColor *=diffuseSampleColor;resultAlpha *=diffuseSampleColor.a;}let albedo:vec3<f32>=baseColor.rgb;if(u_useKHR_materials_unlit){return baseColor;}var occlusionParameter:f32=1;if(u_useOcclusionTexture){occlusionParameter=textureSample(packedORMTexture,packedTextureSampler,occlusionUV).r * u_occlusionStrength;}var metallicParameter:f32=u_metallicFactor;var roughnessParameter:f32=u_roughnessFactor;if (u_useMetallicRoughnessTexture) {let metallicRoughnessSample=(textureSample(packedORMTexture,packedTextureSampler,metallicRoughnessUV));metallicParameter=metallicRoughnessSample.b * metallicParameter;roughnessParameter=metallicRoughnessSample.g * roughnessParameter;}roughnessParameter=max(roughnessParameter,0.045);if (abs(ior - 1.0) < 0.0001) {roughnessParameter=0;}var clearcoatParameter=u_KHR_clearcoatFactor;var clearcoatRoughnessParameter=u_KHR_clearcoatRoughnessFactor;var clearcoatNormal:vec3<f32>=N;if(u_useKHR_materials_clearcoat){if(clearcoatParameter==0.0){}else{if(u_useKHR_clearcoatTexture){let clearcoatSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatUV);clearcoatParameter *=clearcoatSample.r;}if(u_useKHR_clearcoatRoughnessTexture){let clearcoatRoughnesstSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatRoughnessUV);clearcoatRoughnessParameter *=clearcoatRoughnesstSample.g;}var clearcoatNormalSampler=textureSample(KHR_clearcoatNormalTexture,baseColorTextureSampler,KHR_clearcoatNormalUV);if(u_useKHR_clearcoatNormalTexture){var targetUv=KHR_clearcoatNormalUV;if(backFaceYn){targetUv=1.0 - targetUv;}clearcoatNormal=clearcoatNormalSampler.rgb;clearcoatNormal=perturb_normal(N,input_vertexPosition,targetUv,clearcoatNormal,u_normalScale);if(u_useVertexTangent){if(backFaceYn ){ clearcoatNormal=-clearcoatNormal;}}clearcoatNormal=normalize(clearcoatNormal);}}}var specularParameter=u_KHR_specularFactor;var specularColor=u_KHR_specularColorFactor;if(u_useKHR_materials_specular){if(u_useKHR_specularColorTexture){let specularColorTextureSample=textureSample(KHR_specularColorTexture,KHR_specularColorTextureSampler,KHR_specularColorTextureUV);specularColor *=specularColorTextureSample.rgb;};if(u_useKHR_specularTexture){let specularTextureSample=textureSample(KHR_specularTexture,KHR_specularTextureSampler,KHR_specularTextureUV);specularParameter *=specularTextureSample.a;};}var transmissionParameter:f32=u_KHR_transmissionFactor;if (u_useKHR_transmissionTexture) {let transmissionSample:vec4<f32>=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_transmissionUV);transmissionParameter *=transmissionSample.b;}var thicknessParameter:f32=u_KHR_thicknessFactor;if (u_useKHR_thicknessTexture) {let thicknessSample:vec4<f32>=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_transmissionUV);thicknessParameter *=thicknessSample.a;}var diffuseTransmissionColor:vec3<f32>=u_KHR_diffuseTransmissionColorFactor;var diffuseTransmissionParameter:f32=u_KHR_diffuseTransmissionFactor;if(u_useKHR_materials_diffuse_transmission){if(u_useKHR_diffuseTransmissionTexture){let transmissionSample=textureSample(packedKHR_diffuse_transmission,packedTextureSampler,KHR_diffuseTransmissionUV);diffuseTransmissionParameter *=transmissionSample.a;}if(u_useKHR_diffuseTransmissionColorTexture){let transmissionSample=textureSample(packedKHR_diffuse_transmission,packedTextureSampler,KHR_diffuseTransmissionColorUV);diffuseTransmissionColor *=transmissionSample.rgb;}}var sheenColor=u_KHR_sheenColorFactor;var sheenRoughnessParameter=u_KHR_sheenRoughnessFactor;if(u_useKHR_materials_sheen){if(u_useKHR_sheenColorTexture){let sheenColorSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenColorUV));sheenColor *=sheenColorSample.rgb;}if(u_useKHR_sheenRoughnessTexture){let sheenRoughnessSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenRoughnessUV));sheenRoughnessParameter *=sheenRoughnessSample.a;}}var iridescenceParameter=u_KHR_iridescenceFactor;var iridescenceThickness=u_KHR_iridescenceThicknessMaximum;if(u_useKHR_materials_iridescence){if (u_useKHR_iridescenceTexture) {let iridescenceTextureSample:vec4<f32>=textureSample(packedKHR_iridescence,packedTextureSampler,KHR_iridescenceTextureUV);iridescenceParameter *=iridescenceTextureSample.r;}if(u_useKHR_iridescenceThicknessTexture){let iridescenceTextureSample:vec4<f32>=textureSample(packedKHR_iridescence,packedTextureSampler,KHR_iridescenceThicknessTextureUV);iridescenceThickness=mix(u_KHR_iridescenceThicknessMinimum,u_KHR_iridescenceThicknessMaximum,iridescenceTextureSample.g);}}var anisotropy:f32=u_KHR_anisotropyStrength;var anisotropicT:vec3<f32>;var anisotropicB:vec3<f32>;if (u_useKHR_materials_anisotropy) {var anisotropicDirection:vec2<f32>=vec2<f32>(1.0,0.0);if(u_useKHR_anisotropyTexture){let anisotropyTex=textureSample(KHR_anisotropyTexture,baseColorTextureSampler,KHR_anisotropyUV).rgb;anisotropicDirection=anisotropyTex.rg * 2.0 - vec2<f32>(1.0,1.0);var anisotropyRotation:vec2<f32>;if(u_KHR_anisotropyRotation < 0.0001){anisotropyRotation=vec2<f32>(1.0,0.0);}else{anisotropyRotation=vec2<f32>( cos(u_KHR_anisotropyRotation),sin(u_KHR_anisotropyRotation) );}let rotationMtx:mat2x2<f32>=mat2x2<f32>(anisotropyRotation.x,anisotropyRotation.y,-anisotropyRotation.y,anisotropyRotation.x);anisotropicDirection=rotationMtx * normalize(anisotropicDirection);anisotropy *=anisotropyTex.b;}var T:vec3<f32>;var B:vec3<f32>;if (u_useVertexTangent) {if (length(input_vertexTangent.xyz) > 0.0) {T=normalize(input_vertexTangent.xyz);B=normalize(cross(T,N) * input_vertexTangent.w);} else {T=vec3<f32>(1.0,0.0,0.0);B=normalize(cross(T,N) * 1.0);}} else {T=vec3<f32>(1.0,0.0,0.0);B=normalize(cross(T,N) * 1.0);}let TBN:mat3x3<f32>=mat3x3<f32>(T,B,N);anisotropicT=normalize(TBN * vec3<f32>(anisotropicDirection,0.0));anisotropicB=normalize(cross(N,anisotropicT));}var prePathBackground=vec3<f32>(0.0);if(u_useKHR_materials_transmission) {prePathBackground=calcPrePathBackground(u_useKHR_materials_volume,thicknessParameter * inputData.volumeScale,u_KHR_dispersion,u_KHR_attenuationDistance,u_KHR_attenuationColor,ior,roughnessParameter,albedo,systemUniforms.projectionCameraMatrix,input_vertexPosition,input_ndcPosition,V,N,renderPath1ResultTexture,renderPath1ResultTextureSampler);}let F0_dielectric:vec3<f32>=vec3(pow((1.0 - ior)/(1.0 + ior),2.0));let F0_metal=baseColor.rgb;var F0=mix(F0_dielectric,F0_metal,metallicParameter);if(u_useKHR_materials_iridescence){F0=mix(iridescent_fresnel( 1.0,u_KHR_iridescenceIor,F0_dielectric,iridescenceThickness,iridescenceParameter,NdotV),iridescent_fresnel( 1.0,u_KHR_iridescenceIor,F0_metal,iridescenceThickness,iridescenceParameter,NdotV),metallicParameter);}var totalDirectLighting=vec3<f32>(0.0);for (var i=0u;i < u_directionalLightCount;i++) {totalDirectLighting +=calcLight(u_directionalLights[i].color,u_directionalLights[i].intensity * visibility,N,V,-normalize(u_directionalLights[i].direction),VdotN,roughnessParameter,metallicParameter,albedo,F0,ior,prePathBackground,specularColor,specularParameter,u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor,transmissionParameter,sheenColor,sheenRoughnessParameter,anisotropy,anisotropicT,anisotropicB,clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal);}{let clusterIndex=getClusterLightClusterIndex(inputData.position);let lightOffset=clusterLightGroup.lights[clusterIndex].offset;let lightCount:u32=clusterLightGroup.lights[clusterIndex].count;for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) {let i=clusterLightGroup.indices[lightOffset + lightIndex];let targetLight=clusterLightList.lights[i];let u_clusterLightPosition=targetLight.position;let u_clusterLightRadius=targetLight.radius;let u_isSpotLight=targetLight.isSpotLight;let lightDistance=length(u_clusterLightPosition - input_vertexPosition);if (lightDistance > u_clusterLightRadius) {continue;}let lightDir=normalize(u_clusterLightPosition - input_vertexPosition);let attenuation=clamp(1.0 - (lightDistance * lightDistance)/(u_clusterLightRadius * u_clusterLightRadius),0.0,1.0);var finalAttenuation=attenuation;if (u_isSpotLight > 0.0) {let u_clusterLightDirection=normalize(vec3<f32>(targetLight.directionX,targetLight.directionY,targetLight.directionZ));let u_clusterLightInnerAngle=targetLight.innerCutoff;let u_clusterLightOuterCutoff=targetLight.outerCutoff;let lightToVertex=normalize(-lightDir);let cosTheta=dot(lightToVertex,u_clusterLightDirection);let cosOuter=cos(radians(u_clusterLightOuterCutoff));let cosInner=cos(radians(u_clusterLightInnerAngle));if (cosTheta < cosOuter) {continue;}let epsilon=cosInner - cosOuter;let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0);finalAttenuation *=spotIntensity;}totalDirectLighting +=calcLight(targetLight.color,targetLight.intensity * finalAttenuation,N,V,lightDir,VdotN,roughnessParameter,metallicParameter,albedo,F0,ior,prePathBackground,specularColor,specularParameter,u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor,transmissionParameter,sheenColor,sheenRoughnessParameter,anisotropy,anisotropicT,anisotropicB,clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal);}}if (u_useIblTexture) {let R=normalize(reflect(-V,N));let NdotV=max(dot(N,V),0.04);let NdotV_fresnel=max(dot(N,V),0.04);let F_IBL_dielectric=F0_dielectric + (vec3<f32>(1.0) - F0_dielectric) * pow(1.0 - NdotV_fresnel,5.0);let F_IBL_metal=F0_metal + (vec3<f32>(1.0) - F0_metal) * pow(1.0 - NdotV_fresnel,5.0);var F_IBL=F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - NdotV_fresnel,5.0);var F_IBL_iridescence=F_IBL;var F_metal_iridescent=vec3<f32>(1.0);if (iridescenceParameter > 0.0) {let F_iridescent=iridescent_fresnel(1.0,u_KHR_iridescenceIor,F0_dielectric,iridescenceThickness,iridescenceParameter,NdotV );let F_metal_iridescent=iridescent_fresnel(1.0,u_KHR_iridescenceIor,baseColor.rgb,iridescenceThickness,iridescenceParameter,NdotV );F_IBL=mix(F_iridescent,F_metal_iridescent,metallicParameter);}let K=(roughnessParameter + 1.0) * (roughnessParameter + 1.0)/8.0;let G=NdotV/(NdotV * (1.0 - K) + K);let a2=roughnessParameter * roughnessParameter;let G_smith=NdotV/(NdotV * (1.0 - a2) + a2);let iblMipmapCount:f32=f32(textureNumLevels(ibl_environmentTexture) - 1);let mipLevel=pow(roughnessParameter,0.4) * iblMipmapCount;var reflectedColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,R,mipLevel).rgb;let effectiveTransmission=transmissionParameter * (1.0 - metallicParameter);let iblDiffuseColor=textureSampleLevel(ibl_irradianceTexture,iblTextureSampler,N,0).rgb;var envIBL_DIFFUSE:vec3<f32>=albedo * iblDiffuseColor * (vec3<f32>(1.0) - F_IBL_dielectric);if (u_useKHR_materials_diffuse_transmission && diffuseTransmissionParameter > 0.0) {var backScatteringColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,-N,mipLevel).rgb;let transmittedIBL=backScatteringColor * diffuseTransmissionColor * (vec3<f32>(1.0) - F_IBL);envIBL_DIFFUSE=mix(envIBL_DIFFUSE,transmittedIBL,diffuseTransmissionParameter);}var envIBL_SPECULAR:vec3<f32>;let specularColorCorrected=max(vec3<f32>(0.16),specularColor);if (u_useKHR_materials_anisotropy) {var bentNormal=cross(anisotropicB,V);bentNormal=normalize(cross(bentNormal,anisotropicB));let temp=1.0 - anisotropy * (1.0 - roughnessParameter);let tempSquared=temp * temp;var a=tempSquared * tempSquared;bentNormal=normalize(mix(bentNormal,N,a));var reflectVec=reflect(-V,bentNormal);reflectVec=normalize(mix(reflectVec,bentNormal,roughnessParameter * roughnessParameter));let roughnessT=roughnessParameter * (1.0 + anisotropy);let roughnessB=roughnessParameter * (1.0 - anisotropy);let TdotR=dot(anisotropicT,reflectVec);let BdotR=dot(anisotropicB,reflectVec);let TdotV=dot(anisotropicT,V);let BdotV=dot(anisotropicB,V);let anisotropicR=normalize(reflectVec - anisotropy * (TdotR * anisotropicT - BdotR * anisotropicB));let VdotN=max(0.04,dot(V,N));let oneMinusVdotN=1.0 - VdotN;let directionFactor=oneMinusVdotN * oneMinusVdotN * oneMinusVdotN;let VdotT_abs=abs(TdotV);let VdotB_abs=abs(BdotV);let totalWeight=max(0.0001,VdotT_abs + VdotB_abs);let weightedRoughness=(roughnessT * VdotT_abs + roughnessB * VdotB_abs)/totalWeight;let anisotropyFactor=max(0.0,min(1.0,anisotropy));let finalRoughness=mix( roughnessParameter,weightedRoughness,anisotropyFactor * directionFactor );let anistropyMipmap=pow(finalRoughness,0.4) * iblMipmapCount;reflectedColor=textureSampleLevel( ibl_environmentTexture,iblTextureSampler,anisotropicR,anistropyMipmap ).rgb;let a2=finalRoughness * finalRoughness;let G_smith=NdotV/(NdotV * (1.0 - a2) + a2);envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter;} else {envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter;}var envIBL_SPECULAR_BTDF=vec3<f32>(0.0);if (u_useKHR_materials_transmission) {var refractedDir:vec3<f32>;let eta=1.0/ior;if (abs(ior - 1.0) < 0.0001) {refractedDir=V;} else {refractedDir=refract(-V,-N,eta);}if(length(refractedDir) > 0.0001) {let NdotT=abs(dot(N,normalize(refractedDir)));let F_transmission=vec3<f32>(1.0) - F_IBL_dielectric;var attenuatedBackground=prePathBackground;if (u_useKHR_materials_volume) {let localNodeScale=inputData.localNodeScale;let volumeScale=inputData.volumeScale;let scaledThickness=thicknessParameter * localNodeScale;let safeAttenuationColor=clamp(u_KHR_attenuationColor,vec3<f32>(0.0001),vec3<f32>(1.0));let safeAttenuationDistance=max(u_KHR_attenuationDistance,0.0001);let attenuationCoefficient=-log(safeAttenuationColor)/safeAttenuationDistance;let cosTheta=max(NdotT,0.001);let pathLength=scaledThickness/cosTheta;let transmittance=exp(-attenuationCoefficient * pathLength);attenuatedBackground *=transmittance;}else{attenuatedBackground *=albedo;}envIBL_SPECULAR_BTDF=attenuatedBackground * F_transmission * transmissionParameter + reflectedColor * G_smith * F_IBL * NdotT;}}let envIBL_DIELECTRIC=envIBL_DIFFUSE * (1.0-transmissionParameter) + envIBL_SPECULAR_BTDF + envIBL_SPECULAR;var envIBL_SHEEN=vec3<f32>(0.0);var sheen_albedo_scaling:f32=1.0;let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z));if (u_useKHR_materials_sheen) {let NdotV=max(dot(N,V),0.0001);let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter;let R=reflect(-V,N);let sheenLobe=sheenRoughnessParameter * sheenRoughnessParameter;let sheenSamplingDir=normalize(mix(R,N,sheenLobe));var sheenMipLevel=log2(sheenRoughnessParameter) * 1.2 + iblMipmapCount - 1.0;sheenMipLevel=clamp(sheenMipLevel,0.0,iblMipmapCount - 1.0);let sheenRadiance=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,sheenSamplingDir,sheenMipLevel).rgb;let F0=0.04;let sheenFresnel=F0 + (1.0 - F0) * pow(1.0 - NdotV,5.0);let E_VdotN=1.0 - pow(1.0 - NdotV,5.0);sheen_albedo_scaling=max(1.0 - maxSheenColor * E_VdotN,0.04);envIBL_SHEEN=sheenColor * sheenFresnel;}let envIBL_METAL=select(reflectedColor * max(baseColor.rgb,vec3<f32>(0.04)),reflectedColor * F_IBL,iridescenceParameter>0.0);let metallicPart=envIBL_METAL * metallicParameter * sheen_albedo_scaling;let dielectricPart=envIBL_DIELECTRIC * (1.0 - metallicParameter);var indirectLighting=metallicPart + dielectricPart + envIBL_SHEEN;if (clearcoatParameter > 0.0) {let clearcoatR=reflect(-V,clearcoatNormal);let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04);let clearcoatMipLevel=pow(clearcoatRoughnessParameter,0.4) * iblMipmapCount;let clearcoatPrefilteredColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,clearcoatR,clearcoatMipLevel).rgb;let clearcoatF0=F0;let clearcoatF=clearcoatF0 + (vec3<f32>(1.0) - clearcoatF0) * pow(1.0 - clearcoatNdotV,5.0);let clearcoatK=(clearcoatRoughnessParameter + 1.0) * (clearcoatRoughnessParameter + 1.0)/8.0;let clearcoatG=clearcoatNdotV/(clearcoatNdotV * (1.0 - clearcoatK) + clearcoatK);let clearcoatBRDF=clearcoatF * clearcoatG;let clearcoatSpecularIBL=clearcoatPrefilteredColor * clearcoatBRDF * clearcoatParameter;let clearcoatFresnel=clearcoatF;indirectLighting=clearcoatSpecularIBL + (vec3<f32>(1.0) - clearcoatFresnel) * indirectLighting;}let environmentIntensity=1.0;let surfaceColor=totalDirectLighting + indirectLighting * environmentIntensity * occlusionParameter;finalColor=vec4<f32>(surfaceColor,resultAlpha);} else {let ambientContribution=albedo * u_ambientLightColor * u_ambientLightIntensity * occlusionParameter;finalColor=vec4<f32>(totalDirectLighting + ambientContribution,resultAlpha);}if (u_useEmissiveTexture) {let emissiveSamplerColor:vec4<f32>=(textureSample(emissiveTexture,emissiveTextureSampler,emissiveUV));finalColor +=vec4<f32>( emissiveSamplerColor.rgb * u_emissiveFactor * u_emissiveStrength,0);} else {finalColor +=(vec4<f32>(u_emissiveFactor * u_emissiveStrength,0));}finalColor=linear_to_srgb(finalColor);if (u_useCutOff) {if (resultAlpha <=u_cutOff) {discard;}}return finalColor;\n};\nfn calcPrePathBackground(u_useKHR_materials_volume:bool,thicknessParameter:f32,u_KHR_dispersion:f32,u_KHR_attenuationDistance:f32,u_KHR_attenuationColor:vec3<f32>,ior:f32,roughnessParameter:f32,albedo:vec3<f32>,projectionCameraMatrix:mat4x4<f32>,input_vertexPosition:vec3<f32>,input_ndcPosition:vec3<f32>,V:vec3<f32>,N:vec3<f32>,renderPath1ResultTexture:texture_2d<f32>,renderPath1ResultTextureSampler:sampler\n) -> vec3<f32> {var prePathBackground=vec3<f32>(0.0);let transmissionMipLevel:f32=roughnessParameter * f32(textureNumLevels(renderPath1ResultTexture) - 1);if(u_useKHR_materials_volume){var iorR:f32=ior;var iorG:f32=ior;var iorB:f32=ior;if(u_KHR_dispersion>0.0){let halfSpread:f32=(ior - 1.0) * 0.025 * u_KHR_dispersion;iorR=ior + halfSpread;iorG=ior;iorB=ior - halfSpread;}let refractedVecR:vec3<f32>=refract(-V,N,1.0/iorR);let refractedVecG:vec3<f32>=refract(-V,N,1.0/iorG);let refractedVecB:vec3<f32>=refract(-V,N,1.0/iorB);let worldPosR:vec3<f32>=input_vertexPosition + refractedVecR * thicknessParameter;let worldPosG:vec3<f32>=input_vertexPosition + refractedVecG * thicknessParameter;let worldPosB:vec3<f32>=input_vertexPosition + refractedVecB * thicknessParameter;let clipPosR:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosR,1.0);let clipPosG:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosG,1.0);let clipPosB:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosB,1.0);let ndcR:vec2<f32>=clipPosR.xy/clipPosR.w * 0.5 + 0.5;let ndcG:vec2<f32>=clipPosG.xy/clipPosG.w * 0.5 + 0.5;let ndcB:vec2<f32>=clipPosB.xy/clipPosB.w * 0.5 + 0.5;let finalUV_R:vec2<f32>=vec2<f32>(ndcR.x,1.0 - ndcR.y);let finalUV_G:vec2<f32>=vec2<f32>(ndcG.x,1.0 - ndcG.y);let finalUV_B:vec2<f32>=vec2<f32>(ndcB.x,1.0 - ndcB.y);prePathBackground.r=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_R,transmissionMipLevel).r;prePathBackground.g=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_G,transmissionMipLevel).g;prePathBackground.b=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_B,transmissionMipLevel).b;} else {let refractedVec:vec3<f32>=refract(-V,N,1.0/ior);let worldPos:vec3<f32>=input_vertexPosition + refractedVec * thicknessParameter;let clipPos:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPos,1.0);let ndc:vec2<f32>=clipPos.xy/clipPos.w * 0.5 + 0.5;let finalUV:vec2<f32>=vec2<f32>(ndc.x,1.0 - ndc.y);prePathBackground=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV,transmissionMipLevel).rgb;}prePathBackground *=albedo;return prePathBackground;\n}\nfn calcLight(lightColor:vec3<f32>,lightIntensity:f32,N:vec3<f32>,V:vec3<f32>,L:vec3<f32>,VdotN:f32,roughnessParameter:f32,metallicParameter:f32,albedo:vec3<f32>,F0:vec3<f32>,ior:f32,prePathBackground:vec3<f32>,specularColor:vec3<f32>,specularParameter:f32,u_useKHR_materials_diffuse_transmission:bool,diffuseTransmissionParameter:f32,diffuseTransmissionColor:vec3<f32>,transmissionParameter:f32,sheenColor:vec3<f32>,sheenRoughnessParameter:f32,anisotropy:f32,anisotropicT:vec3<f32>,anisotropicB:vec3<f32>,clearcoatParameter:f32,clearcoatRoughnessParameter:f32,clearcoatNormal:vec3<f32>\n) -> vec3<f32>{let dLight=lightColor * lightIntensity;let NdotL=max(dot(N,L),0.04);let NdotV=max(dot(N,V),0.04);let H=normalize(L + V);let LdotH=max(dot(L,H),0.0);let NdotH=max(dot(N,H),0.0);let VdotH=max(dot(V,H),0.0);var DIFFUSE_BRDF:vec3<f32>=diffuse_brdf_disney(NdotL,NdotV,LdotH,roughnessParameter,albedo);if(u_useKHR_materials_diffuse_transmission && diffuseTransmissionParameter > 0.0){DIFFUSE_BRDF=mix(DIFFUSE_BRDF,diffuse_btdf(N,L,diffuseTransmissionColor),diffuseTransmissionParameter);}var SPECULAR_BRDF:vec3<f32>;if (anisotropy > 0.0) {var TdotL=dot(anisotropicT,L);var TdotV=dot(anisotropicT,V);var BdotL=dot(anisotropicB,L);var TdotH=dot(anisotropicT,H);var BdotH=dot(anisotropicB,H);var BdotV=dot(anisotropicB,V);SPECULAR_BRDF=BRDF_specularAnisotropicGGX(albedo,vec3<f32>(1.0),roughnessParameter * roughnessParameter,VdotH,NdotL,NdotV,NdotH,BdotV,TdotV,TdotL,BdotL,TdotH,BdotH,anisotropy);}else{SPECULAR_BRDF=specular_brdf( albedo,roughnessParameter,NdotH,NdotV,NdotL,LdotH);}let METAL_BRDF=conductor_fresnel( albedo,SPECULAR_BRDF,VdotH);;let transmissionWeight=transmissionParameter * (vec3<f32>(1.0) - F0);var SPECULAR_BTDF=vec3<f32>(0.0);if(transmissionParameter > 0.0){SPECULAR_BTDF=specular_btdf( NdotV,NdotL,NdotH,VdotH,LdotH,roughnessParameter,albedo,ior);}let DIELECTRIC_BRDF=fresnel_mix(F0,specularParameter,mix(DIFFUSE_BRDF,SPECULAR_BTDF,transmissionParameter),SPECULAR_BRDF,VdotH);var SHEEN_BRDF:vec3<f32>=vec3<f32>(0.0);var sheen_albedo_scaling:f32=1.0;let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z));if(sheenRoughnessParameter > 0.0 && maxSheenColor > 0.001 && dot(N,V) > 0) {let NdotV=dot(N,V);let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter;let invR=1/sheenRoughnessAlpha;let cos2h=NdotH * NdotH;let sin2h=1 - cos2h;let sheenDistribution=(2 + invR) * pow(sin2h,invR * 0.5)/(2 * pi);let sheen_visibility=1.0/((1.0 + lambda_sheen(NdotV,sheenRoughnessAlpha) + lambda_sheen(NdotL,sheenRoughnessAlpha)) * (4.0 * NdotV * NdotL));let LdotN=max(dot(L,N),0.04);let E_LdotN=1.0 - pow(1.0 - LdotN,5.0);let E_VdotN=1.0 - pow(1.0 - VdotN,5.0);sheen_albedo_scaling=max(min(1.0 - maxSheenColor * E_VdotN,1.0 - maxSheenColor * E_LdotN),0.04);SHEEN_BRDF=sheenColor * sheenDistribution * sheen_visibility;}let metallicPart=METAL_BRDF * metallicParameter * sheen_albedo_scaling;let dielectricPart=DIELECTRIC_BRDF * sheen_albedo_scaling;let sheenPart=SHEEN_BRDF;var directLighting=(metallicPart + dielectricPart + sheenPart);if(transmissionParameter > 0.0) {directLighting=mix(directLighting,prePathBackground,transmissionWeight);}if(clearcoatParameter > 0.0){let clearcoatNdotL=max(dot(clearcoatNormal,L),0.04);let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04);let clearcoatNdotH=max(dot(clearcoatNormal,H),0.0);let CLEARCOAT_BRDF=specular_brdf( F0,clearcoatRoughnessParameter,clearcoatNdotH,clearcoatNdotV,clearcoatNdotL,LdotH);directLighting=fresnel_coat(clearcoatNdotV,ior,clearcoatParameter,directLighting,CLEARCOAT_BRDF);}var lightDirection:f32;if (u_useKHR_materials_diffuse_transmission && diffuseTransmissionParameter > 0.0) {lightDirection=mix(abs(dot(N,L)),1.0,diffuseTransmissionParameter);} else {lightDirection=NdotL;}let lightContribution=directLighting * dLight * lightDirection;return lightContribution;\n}\nconst pi:f32=3.14159265359;\nfn BRDF_specularAnisotropicGGX( f0:vec3<f32>,f90:vec3<f32>,alphaRoughness:f32,VdotH:f32,NdotL:f32,NdotV:f32,NdotH:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,TdotH:f32,BdotH:f32,anisotropy:f32 ) -> vec3<f32> {var at=mix(alphaRoughness,1.0,anisotropy * anisotropy);var ab=alphaRoughness;var F:vec3<f32>=fresnel_schlick(VdotH,f0);var V:f32=V_GGX_anisotropic(NdotL,NdotV,BdotV,TdotV,TdotL,BdotL,at,ab);var D:f32=D_GGX_anisotropic(NdotH,TdotH,BdotH,at,ab);return F * (V * D);\n}\nfn D_GGX_anisotropic( NdotH:f32,TdotH:f32,BdotH:f32,at:f32,ab:f32 ) -> f32 {let a2:f32=at * ab;let f:vec3<f32>=vec3<f32>(ab * TdotH,at * BdotH,a2 * NdotH);let denominator:f32=dot(f,f);let w2:f32=a2/denominator;return a2 * w2 * w2/pi;\n}\nfn V_GGX_anisotropic( NdotL:f32,NdotV:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,at:f32,ab:f32 ) -> f32 {let GGXV=NdotL * length(vec3<f32>(at * TdotV,ab * BdotV,NdotV));let GGXL=NdotV * length(vec3<f32>(at * TdotL,ab * BdotL,NdotL));let v=0.5/(GGXV + GGXL);return clamp(v,0.0,1.0);\n}\nfn iridescent_fresnel(outside_ior:f32,iridescence_ior:f32,base_f0:vec3<f32>,iridescence_thickness:f32,iridescence_factor:f32,cos_theta1:f32) -> vec3<f32> {if (iridescence_thickness <=0.0 || iridescence_factor <=0.0) {return base_f0;}let cos_theta1_abs=abs(cos_theta1);let min_ior=1.01;let safe_iridescence_ior=max(iridescence_ior,min_ior);let sin_theta1=sqrt(max(0.0,1.0 - cos_theta1_abs * cos_theta1_abs));let sin_theta2=(outside_ior/safe_iridescence_ior) * sin_theta1;if (sin_theta2 >=1.0) {let total_reflection=vec3<f32>(1.0);return base_f0 + iridescence_factor * (total_reflection - base_f0);}let cos_theta2=sqrt(max(0.0,1.0 - sin_theta2 * sin_theta2));let wavelengths=vec3<f32>(650.0,510.0,475.0);let min_thickness=10.0;let effective_thickness=max(iridescence_thickness,min_thickness);let ior_scale=max(1.0,1.5 - 0.5 * (safe_iridescence_ior/1.5));let optical_thickness=2.0 * effective_thickness * safe_iridescence_ior * cos_theta2 * ior_scale;let phase=(2.0 * 3.14159265359 * optical_thickness)/wavelengths;let r12_s=((outside_ior * cos_theta1_abs) - (safe_iridescence_ior * cos_theta2))/((outside_ior * cos_theta1_abs) + (safe_iridescence_ior * cos_theta2));let r12_p=((safe_iridescence_ior * cos_theta1_abs) - (outside_ior * cos_theta2))/((safe_iridescence_ior * cos_theta1_abs) + (outside_ior * cos_theta2));let t12_s=2.0 * outside_ior * cos_theta1_abs/((outside_ior * cos_theta1_abs) + (safe_iridescence_ior * cos_theta2));let t12_p=2.0 * outside_ior * cos_theta1_abs/((safe_iridescence_ior * cos_theta1_abs) + (outside_ior * cos_theta2));let n3=vec3<f32>((1.0 + sqrt(clamp(base_f0.r,0.01,0.99)))/(1.0 - sqrt(clamp(base_f0.r,0.01,0.99))),(1.0 + sqrt(clamp(base_f0.g,0.01,0.99)))/(1.0 - sqrt(clamp(base_f0.g,0.01,0.99))),(1.0 + sqrt(clamp(base_f0.b,0.01,0.99)))/(1.0 - sqrt(clamp(base_f0.b,0.01,0.99))));let safe_n3=max(n3,vec3<f32>(1.2));let r23_s=vec3<f32>(((safe_iridescence_ior * cos_theta2) - (safe_n3.r * cos_theta1_abs))/((safe_iridescence_ior * cos_theta2) + (safe_n3.r * cos_theta1_abs)),((safe_iridescence_ior * cos_theta2) - (safe_n3.g * cos_theta1_abs))/((safe_iridescence_ior * cos_theta2) + (safe_n3.g * cos_theta1_abs)),((safe_iridescence_ior * cos_theta2) - (safe_n3.b * cos_theta1_abs))/((safe_iridescence_ior * cos_theta2) + (safe_n3.b * cos_theta1_abs)));let r23_p=vec3<f32>(((safe_n3.r * cos_theta2) - (safe_iridescence_ior * cos_theta1_abs))/((safe_n3.r * cos_theta2) + (safe_iridescence_ior * cos_theta1_abs)),((safe_n3.g * cos_theta2) - (safe_iridescence_ior * cos_theta1_abs))/((safe_n3.g * cos_theta2) + (safe_iridescence_ior * cos_theta1_abs)),((safe_n3.b * cos_theta2) - (safe_iridescence_ior * cos_theta1_abs))/((safe_n3.b * cos_theta2) + (safe_iridescence_ior * cos_theta1_abs)));let cos_phase=vec3<f32>(cos(phase.r),cos(phase.g),cos(phase.b));let sin_phase=vec3<f32>(sin(phase.r),sin(phase.g),sin(phase.b));let numerator_s_real=vec3<f32>(r12_s + r23_s.r * cos_phase.r,r12_s + r23_s.g * cos_phase.g,r12_s + r23_s.b * cos_phase.b);let numerator_s_imag=vec3<f32>(r23_s.r * sin_phase.r,r23_s.g * sin_phase.g,r23_s.b * sin_phase.b);let denominator_s_real=vec3<f32>(1.0 + r12_s * r23_s.r * cos_phase.r,1.0 + r12_s * r23_s.g * cos_phase.g,1.0 + r12_s * r23_s.b * cos_phase.b);let denominator_s_imag=vec3<f32>(r12_s * r23_s.r * sin_phase.r,r12_s * r23_s.g * sin_phase.g,r12_s * r23_s.b * sin_phase.b);let denom_s_squared=vec3<f32>(denominator_s_real.r * denominator_s_real.r + denominator_s_imag.r * denominator_s_imag.r,denominator_s_real.g * denominator_s_real.g + denominator_s_imag.g * denominator_s_imag.g,denominator_s_real.b * denominator_s_real.b + denominator_s_imag.b * denominator_s_imag.b);let epsilon=0.001;let r_s_real=vec3<f32>((numerator_s_real.r * denominator_s_real.r + numerator_s_imag.r * denominator_s_imag.r)/(denom_s_squared.r + epsilon),(numerator_s_real.g * denominator_s_real.g + numerator_s_imag.g * denominator_s_imag.g)/(denom_s_squared.g + epsilon),(numerator_s_real.b * denominator_s_real.b + numerator_s_imag.b * denominator_s_imag.b)/(denom_s_squared.b + epsilon));let r_s_imag=vec3<f32>((numerator_s_imag.r * denominator_s_real.r - numerator_s_real.r * denominator_s_imag.r)/(denom_s_squared.r + epsilon),(numerator_s_imag.g * denominator_s_real.g - numerator_s_real.g * denominator_s_imag.g)/(denom_s_squared.g + epsilon),(numerator_s_imag.b * denominator_s_real.b - numerator_s_real.b * denominator_s_imag.b)/(denom_s_squared.b + epsilon));let numerator_p_real=vec3<f32>(r12_p + r23_p.r * cos_phase.r,r12_p + r23_p.g * cos_phase.g,r12_p + r23_p.b * cos_phase.b);let numerator_p_imag=vec3<f32>(r23_p.r * sin_phase.r,r23_p.g * sin_phase.g,r23_p.b * sin_phase.b);let denominator_p_real=vec3<f32>(1.0 + r12_p * r23_p.r * cos_phase.r,1.0 + r12_p * r23_p.g * cos_phase.g,1.0 + r12_p * r23_p.b * cos_phase.b);let denominator_p_imag=vec3<f32>(r12_p * r23_p.r * sin_phase.r,r12_p * r23_p.g * sin_phase.g,r12_p * r23_p.b * sin_phase.b);let denom_p_squared=vec3<f32>(denominator_p_real.r * denominator_p_real.r + denominator_p_imag.r * denominator_p_imag.r,denominator_p_real.g * denominator_p_real.g + denominator_p_imag.g * denominator_p_imag.g,denominator_p_real.b * denominator_p_real.b + denominator_p_imag.b * denominator_p_imag.b);let r_p_real=vec3<f32>((numerator_p_real.r * denominator_p_real.r + numerator_p_imag.r * denominator_p_imag.r)/(denom_p_squared.r + epsilon),(numerator_p_real.g * denominator_p_real.g + numerator_p_imag.g * denominator_p_imag.g)/(denom_p_squared.g + epsilon),(numerator_p_real.b * denominator_p_real.b + numerator_p_imag.b * denominator_p_imag.b)/(denom_p_squared.b + epsilon));let r_p_imag=vec3<f32>((numerator_p_imag.r * denominator_p_real.r - numerator_p_real.r * denominator_p_imag.r)/(denom_p_squared.r + epsilon),(numerator_p_imag.g * denominator_p_real.g - numerator_p_real.g * denominator_p_imag.g)/(denom_p_squared.g + epsilon),(numerator_p_imag.b * denominator_p_real.b - numerator_p_real.b * denominator_p_imag.b)/(denom_p_squared.b + epsilon));let Rs=vec3<f32>(r_s_real.r * r_s_real.r + r_s_imag.r * r_s_imag.r,r_s_real.g * r_s_real.g + r_s_imag.g * r_s_imag.g,r_s_real.b * r_s_real.b + r_s_imag.b * r_s_imag.b);let Rp=vec3<f32>(r_p_real.r * r_p_real.r + r_p_imag.r * r_p_imag.r,r_p_real.g * r_p_real.g + r_p_imag.g * r_p_imag.g,r_p_real.b * r_p_real.b + r_p_imag.b * r_p_imag.b);let reflectance=0.5 * (Rs + Rp);let ior_influence=smoothstep(1.0,2.0,safe_iridescence_ior);let enhanced_reflectance=mix(pow(reflectance,vec3<f32>(0.8)) * 1.2,reflectance,ior_influence);let clamped_reflectance=clamp(enhanced_reflectance,vec3<f32>(0.0),vec3<f32>(1.0));return mix(base_f0,clamped_reflectance,iridescence_factor);\n}\nfn specular_btdf(NdotV:f32,NdotL:f32,NdotH:f32,VdotH:f32,LdotH:f32,roughness:f32,F0:vec3<f32>,ior:f32\n) -> vec3<f32> {let eta:f32=1.0/ior;let D_rough:f32=distribution_ggx(NdotH,roughness * roughness);let t:f32=clamp((ior - 1.0) * 100.0,0.0,1.0);let D:f32=mix(1.0,D_rough,t);let G:f32=min(1.0,min((2.0 * NdotH * NdotV)/VdotH,(2.0 * NdotH * NdotL)/VdotH));let F:vec3<f32>=fresnel_schlick(VdotH,F0);let denom:f32=(eta * VdotH + LdotH) * (eta * VdotH + LdotH);let btdf:vec3<f32>=(vec3<f32>(1.0) - F) * abs(VdotH * LdotH) * (eta * eta) * D * G/(NdotV * denom + 0.001);return btdf;\n}\nfn lambda_sheen_calc_l(x:f32,alpha_g:f32) -> f32 {let one_minus_alpha_sq=(1.0 - alpha_g) * (1.0 - alpha_g);let a=mix(21.5473,25.3245,one_minus_alpha_sq);let b=mix(3.82987,3.32435,one_minus_alpha_sq);let c=mix(0.19823,0.16801,one_minus_alpha_sq);let d=mix(-1.97760,-1.27393,one_minus_alpha_sq);let e=mix(-4.32054,-4.85967,one_minus_alpha_sq);return a/(1.0 + b * pow(x,c)) + d * x + e;\n}\nfn lambda_sheen(cos_theta:f32,alpha_g:f32) -> f32 {if (abs(cos_theta) < 0.5) {return exp(lambda_sheen_calc_l(cos_theta,alpha_g));} else {return exp(2.0 * lambda_sheen_calc_l(0.5,alpha_g) - lambda_sheen_calc_l(1.0 - cos_theta,alpha_g));}\n}\nfn fresnel_coat(NdotV:f32,ior:f32,weight:f32,base:vec3<f32>,layer:vec3<f32>) -> vec3<f32> {let f0:f32=pow((1.0 - ior)/(1.0 + ior),2.0);let fr:f32=f0 + (1.0 - f0) * pow(1.0 - abs(NdotV),5.0);return mix(base,layer,weight * fr);\n}\nfn conductor_fresnel(F0:vec3<f32>,bsdf:vec3<f32>,VdotH:f32) -> vec3<f32> {let fresnel=F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - abs(VdotH),5.0);return bsdf * fresnel;\n}\nfn fresnel_mix(F0:vec3<f32>,weight:f32,base:vec3<f32>,layer:vec3<f32>,VdotH:f32\n) -> vec3<f32> {var f0=F0;f0=min(f0,vec3<f32>(1.0));let fr=f0 + (1.0 - f0) * pow(1.0 - abs(VdotH),5.0);return (1 - weight * max(max(fr.x,fr.y),fr.z)) * base + weight * fr * layer;\n}\nfn fresnel_mix_ibl(F0:vec3<f32>,weight:f32,base:vec3<f32>,layer:vec3<f32>,NdotV:f32\n) -> vec3<f32> {var f0=F0;f0=min(f0,vec3<f32>(1.0));let fr=f0 + (1.0 - f0) * pow(1.0 - max(NdotV,0.0),5.0);return base * (1.0 - fr * weight) + layer * fr * weight;\n}\nfn diffuse_brdf_disney(NdotL:f32,NdotV:f32,LdotH:f32,roughness:f32,albedo:vec3<f32>) -> vec3<f32> {if (NdotL <=0.0) { return vec3<f32>(0.0);}let energyBias=mix(0.0,0.5,roughness);let energyFactor=mix(1.0,1.0/1.51,roughness);let fd90=energyBias + 2.0 * LdotH * LdotH * roughness;let f0=1.0;let lightScatter=f0 + (fd90 - f0) * pow(1.0 - NdotL,5.0);let viewScatter=f0 + (fd90 - f0) * pow(1.0 - NdotV,5.0);return albedo * NdotL * lightScatter * viewScatter * energyFactor/pi;\n}\nfn diffuse_brdf(NdotL:f32,albedo:vec3<f32>) -> vec3<f32> {return albedo * NdotL/pi;\n}\nfn diffuse_btdf(N:vec3<f32>,L:vec3<f32>,Albedo:vec3<f32>) -> vec3<f32> {let cos_theta=max(-dot(N,L),0.0);return Albedo * cos_theta/pi;\n}\nfn specular_brdf(F0:vec3<f32>,roughness:f32,NdotH:f32,NdotV:f32,NdotL:f32,LdotH:f32\n) -> vec3<f32> {let D=distribution_ggx(NdotH,roughness);let G=geometry_smith(NdotV,NdotL,roughness);let F=fresnel_schlick(LdotH,F0);let numerator=D * G * F;let denominator=4.0 * NdotV * NdotL + 0.04;return (numerator/denominator);\n}\nfn distribution_ggx(NdotH:f32,roughness:f32) -> f32 {let alpha=roughness * roughness;let alpha2=alpha * alpha;let NdotH2=NdotH * NdotH;let nom=alpha2;let denom=(NdotH2 * (alpha2 - 1.0) + 1.0);let denom_squared=denom * denom;return nom/(denom_squared * 3.14159265359);\n}\nfn geometry_smith(NdotV:f32,NdotL:f32,roughness:f32) -> f32 {let alpha=roughness * roughness;let k=alpha/2.0;let ggx1=NdotV/(NdotV * (1.0 - k) + k);let ggx2=NdotL/(NdotL * (1.0 - k) + k);return ggx1 * ggx2;\n}\nfn fresnel_schlick(cosTheta:f32,F0:vec3<f32>) -> vec3<f32> {return F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - cosTheta,5.0);\n}\nfn get_transformed_uv(input_uv:vec2<f32>,input_uv1:vec2<f32>,texCoord_index:u32,use_transform:u32,transform_offset:vec2<f32>,transform_rotation:f32,transform_scale:vec2<f32>\n) -> vec2<f32> {var result_uv=select(input_uv,input_uv1,texCoord_index==1);if (use_transform==1) {let translation=mat3x3<f32>(1.0,0.0,0.0,0.0,1.0,0.0,transform_offset.x,transform_offset.y,1.0);let cos_rot=cos(transform_rotation);let sin_rot=sin(transform_rotation);let rotation_matrix=mat3x3<f32>(cos_rot,-sin_rot,0.0,sin_rot,cos_rot,0.0,0.0,0.0,1.0);let scale_matrix=mat3x3<f32>(transform_scale.x,0.0,0.0,0.0,transform_scale.y,0.0,0.0,0.0,1.0);let result_matrix=translation * rotation_matrix * scale_matrix;result_uv=(result_matrix * vec3<f32>(result_uv,1.0)).xy;}return result_uv;\n}\nfn linear_to_srgb(linearColor:vec4<f32>) -> vec4<f32> {let cutoff=vec4<f32>(0.0031308);let higher=vec4<f32>(1.055) * pow(linearColor,vec4<f32>(1.0/2.4)) - vec4<f32>(0.055);let lower=linearColor * vec4<f32>(12.92);return vec4<f32>(mix(higher.r,lower.r,step(linearColor.r,cutoff.r)),mix(higher.g,lower.g,step(linearColor.g,cutoff.g)),mix(higher.b,lower.b,step(linearColor.b,cutoff.b)),linearColor.a );\n}\n"));class PBRMaterial extends ABitmapBaseMaterial{#hn;#fn;#dn;#mn;#pn;constructor(i){super(i,"PBR_MATERIAL",Br,2),this.initGPURenderInfos(),this.#hn=new PackedTexture(i),this.#pn=new PackedTexture(i),this.#fn=new PackedTexture(i),this.#dn=new PackedTexture(i),this.#mn=new PackedTexture(i),this.__packingList=[()=>{this.setupPackORMTexture(),this.setupPackedKHR_clearcoatTexture_transmission(),this.setupPackedKHR_diffuse_transmission(),this.setupPackedKHR_sheen(),this.setupPackedKHR_iridescence()}]}get packedKHR_clearcoatTexture_transmission(){return this.#pn}get packedKHR_iridescence(){return this.#mn}get packedORMTexture(){return this.#hn}get packedKHR_sheen(){return this.#dn}get packedKHR_diffuse_transmission(){return this.#fn}async setupPackORMTexture(){const i=Math.max(this.occlusionTexture?.gpuTexture?.width||1,this.metallicRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.occlusionTexture?.gpuTexture?.height||1,this.metallicRoughnessTexture?.gpuTexture?.height||1);await this.#hn.packing({r:this.occlusionTexture?.gpuTexture,g:this.metallicRoughnessTexture?.gpuTexture,b:this.metallicRoughnessTexture?.gpuTexture},i,m,"packedORMTexture")}async setupPackedKHR_clearcoatTexture_transmission(){const i=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.width||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.height||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.height||1),g=Math.max(this.KHR_transmissionTexture?.gpuTexture?.width||1,this.KHR_thicknessTexture?.gpuTexture?.width||1),x=Math.max(this.KHR_transmissionTexture?.gpuTexture?.height||1,this.KHR_thicknessTexture?.gpuTexture?.height||1),_=Math.max(i,g),b=Math.max(m,x);await this.#pn.packing({r:this.KHR_clearcoatTexture?.gpuTexture,g:this.KHR_clearcoatRoughnessTexture?.gpuTexture,b:this.KHR_transmissionTexture?.gpuTexture,a:this.KHR_thicknessTexture?.gpuTexture},_,b,"packedKHR_clearcoatTexture_transmission",{b:"r",a:"g"})}async setupPackedKHR_diffuse_transmission(){const i=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.width||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.height||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.height||1);await this.#fn.packing({r:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,g:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,b:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,a:this.KHR_diffuseTransmissionTexture?.gpuTexture},i,m,"packedKHR_diffuse_transmission")}async setupPackedKHR_sheen(){const i=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.width||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.height||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.height||1);await this.#dn.packing({r:this.KHR_sheenColorTexture?.gpuTexture,g:this.KHR_sheenColorTexture?.gpuTexture,b:this.KHR_sheenColorTexture?.gpuTexture,a:this.KHR_sheenRoughnessTexture?.gpuTexture},i,m,"packedKHR_sheen")}async setupPackedKHR_iridescence(){const i=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.width||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.height||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.height||1);await this.#mn.packing({r:this.KHR_iridescenceTexture?.gpuTexture,g:this.KHR_iridescenceThicknessTexture?.gpuTexture},i,m,"packedKHR_iridescence")}}kn.defineByPreset(PBRMaterial,[kn.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,kn.PRESET_POSITIVE_NUMBER.NORMAL_SCALE]);Ir.forEach(i=>{const{extensionName:m,textureList:g,useSampler:x}=i,{positiveNumberList:_,vec3List:b,vec4List:y}=i;m&&kn.defineBoolean(PBRMaterial,[`use${m}`]),((i,m)=>{i?.forEach(i=>{kn.defineBoolean(PBRMaterial,[`use_${i}`]),kn.definePositiveNumber(PBRMaterial,[[`${i}_KHR_texture_transform_rotation`,0]]),kn.defineBoolean(PBRMaterial,[`use_${i}_KHR_texture_transform`]),kn.defineVec2(PBRMaterial,[`${i}_KHR_texture_transform_offset`,[`${i}_KHR_texture_transform_scale`,[1,1]]]),kn.defineUint(PBRMaterial,[`${i}_texCoord_index`]),kn.defineTexture(PBRMaterial,[i]),m&&kn.defineSampler(PBRMaterial,[`${i}Sampler`])})})(g,!x),_?.forEach(i=>{kn.definePositiveNumber(PBRMaterial,[i])}),b?.forEach(i=>{kn.defineVec3(PBRMaterial,[i])}),y?.forEach(i=>{kn.defineVec4(PBRMaterial,[i])})}),kn.definePositiveNumber(PBRMaterial,[["cutOff",0],["KHR_materials_ior",1.5],["KHR_dispersion",0]]),kn.defineUint(PBRMaterial,["alphaBlend"]),kn.defineBoolean(PBRMaterial,["doubleSided","useCutOff","useVertexColor","useVertexTangent","useKHR_materials_unlit"]),Object.freeze(PBRMaterial);var Lr="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include calcDisplacements;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,useDisplacementTexture:u32,displacementScale:f32,receiveShadow:f32,combinedOpacity:f32,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(14) receiveShadow:f32,@location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main( inputData:InputData ) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_resolution=systemUniforms.resolution;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_displacementScale=vertexUniforms.displacementScale;let u_useDisplacementTexture=vertexUniforms.useDisplacementTexture==1u;let u_receiveShadow=vertexUniforms.receiveShadow;let u_directionalLightCount=systemUniforms.directionalLightCount;let u_directionalLights=systemUniforms.directionalLights;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;position=u_modelMatrix * vec4<f32>(input_position,1.0);if (u_useDisplacementTexture) {let distance=distance(position.xyz,u_cameraPosition);let mipLevel=(distance/maxDistance) * maxMipLevel;let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);let displacedNormal=calcDisplacementNormal(input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);position=u_modelMatrix * vec4<f32>(displacedPosition,1.0);normalPosition=u_normalModelMatrix * vec4<f32>(displacedNormal,1.0);} else {normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);}output.position=u_projectionMatrix * u_cameraMatrix * position;output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.uv=input_uv;var posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0);output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z);output.receiveShadow=u_receiveShadow;output.combinedOpacity=vertexUniforms.combinedOpacity;return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;let input_position=inputData.position;let u_modelMatrix=vertexUniforms.modelMatrix;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0);output.position=u_projectionMatrix * u_cameraMatrix * position;output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n",Dr="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include calcDisplacements;\nstruct VertexUniforms {pickingId:u32,localMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,useDisplacementTexture:u32,displacementScale:f32,receiveShadow:f32\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(3) uv1:vec2<f32>,@location(4) vertexColor_0:vec4<f32>,@location(5) vertexWeight:vec4<f32>,@location(6) vertexJoint:vec4<f32>,@location(7) vertexTangent:vec4<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(3) uv1:vec2<f32>,@location(4) vertexColor_0:vec4<f32>,@location(5) vertexTangent:vec4<f32>,@location(6) shadowPos:vec3<f32>,@location(7) receiveShadow:f32,@location(8) pickingId:vec4<f32>,@location(9) ndcPosition:vec3<f32>,@location(10) localNodeScale:f32,@location(11) volumeScale:f32,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData {var output:OutputData;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_localMatrix=vertexUniforms.localMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_directionalLightCount=systemUniforms.directionalLightCount;let u_directionalLights=systemUniforms.directionalLights;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_receiveShadow=vertexUniforms.receiveShadow;var position:vec4<f32>;var normalPosition:vec4<f32>;position=u_modelMatrix * vec4<f32>(input_position,1.0);normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);output.position=u_projectionMatrix * u_cameraMatrix * position;output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.uv=inputData.uv;output.uv1=inputData.uv1;output.vertexColor_0=inputData.vertexColor_0;output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent;let viewDirection=normalize(position.xyz - u_cameraPosition);var posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0);output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z);output.receiveShadow=u_receiveShadow;output.ndcPosition=output.position.xyz/output.position.w;\nlet nodeScaleX:f32=length(u_localMatrix[0].xyz);\nlet nodeScaleY:f32=length(u_localMatrix[1].xyz);\nlet nodeScaleZ=length(u_localMatrix[2].xyz);\noutput.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0);\nlet volumeScaleX:f32=length(u_modelMatrix[0].xyz);\nlet volumeScaleY:f32=length(u_modelMatrix[1].xyz);\nlet volumeScaleZ=length(u_modelMatrix[2].xyz);\noutput.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0);return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;let input_position=inputData.position;let u_modelMatrix=vertexUniforms.modelMatrix;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0);output.position=u_projectionMatrix * u_cameraMatrix * position;output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n";class ResourceStateStorageBuffer{static dirtyList=[];buffer;uuid;#$=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#$}set useNum(i){this.#$=i,ResourceStateStorageBuffer.dirtyList.push(this)}}class StorageBuffer extends AUniformBaseBuffer{constructor(i,m,g="",x=""){super(i,"managedStorageBufferState",GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC,m,g);const _=getCacheBufferFromResourceState(this,x);if(_)return _;x&&(this.name=x),basicRegisterResource(this,new ResourceStateStorageBuffer(this))}}Object.freeze(StorageBuffer);const getBasicMeshVertexBindGroupDescriptor=(i,m=!1)=>{const{redGPUContext:g,gpuRenderInfo:x,material:_}=i,{resourceManager:b}=g,{vertexUniformBuffer:y,vertexBindGroupLayout:T}=x,{basicSampler:w,emptyBitmapTextureView:P,emptyCubeTextureView:H}=b,{gpuSampler:z}=w;return{layout:T,label:m?"VERTEX_BIND_GROUP_DESCRIPTOR_MESH_SKIN":"VERTEX_BIND_GROUP_DESCRIPTOR_MESH",entries:m?[{binding:0,resource:{buffer:y.gpuBuffer,offset:0,size:y.size}},{binding:1,resource:getGPUResourceSampler(_?.displacementTextureSampler)||z},{binding:2,resource:getGPUResourceBitmapTextureView(_?.displacementTexture)||P},{binding:3,resource:{buffer:i.animationInfo.skinInfo.vertexStorageBuffer.gpuBuffer,offset:0,size:i.animationInfo.skinInfo.vertexStorageBuffer.size}}]:[{binding:0,resource:{buffer:y.gpuBuffer,offset:0,size:y.size}},{binding:1,resource:getGPUResourceSampler(_?.displacementTextureSampler)||z},{binding:2,resource:getGPUResourceBitmapTextureView(_?.displacementTexture)||P}]}},getGPUResourceBitmapTextureView=i=>i?.gpuTexture?.createView({label:i.src}),getGPUResourceSampler=i=>i?.gpuSampler,Ur=parseWGSL(Dr),Ar=Ur.uniforms.vertexUniforms,kr=parseWGSL(Lr),Or=kr.uniforms.vertexUniforms,createMeshVertexShaderModule=i=>{const{material:m}=i;let g;return g=m instanceof PBRMaterial?i.animationInfo.skinInfo?((i,m)=>{const{redGPUContext:g,currentShaderModuleName:x}=m,{resourceManager:_}=g,{gpuRenderInfo:b}=m,y=`${m.animationInfo.skinInfo.joints.length}`,T=`${i}_${y}`,w="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDisplacements;\nstruct VertexUniforms {pickingId:u32,localMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,useDisplacementTexture:u32,displacementScale:f32,receiveShadow:f32\n};\nstruct VertexStorages {jointMatrix:array<mat4x4<f32>,#JOINT_NUM>,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\n@group(1) @binding(3) var<storage,read> vertexStorages:VertexStorages;\nstruct InputDataSkin {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(3) uv1:vec2<f32>,@location(4) vertexColor_0:vec4<f32>,@location(5) vertexWeight:vec4<f32>,@location(6) vertexJoint:vec4<f32>,@location(7) vertexTangent:vec4<f32>,\n};\nstruct OutputDataSkin {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(3) uv1:vec2<f32>,@location(4) vertexColor_0:vec4<f32>,@location(5) vertexTangent:vec4<f32>,@location(6) shadowPos:vec3<f32>,@location(7) receiveShadow:f32,@location(8) pickingId:vec4<f32>,@location(9) ndcPosition:vec3<f32>,@location(10) localNodeScale:f32,@location(11) volumeScale:f32,\n};\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main( inputData:InputDataSkin ) -> OutputDataSkin {let u_projectionMatrix=systemUniforms.projectionMatrix;let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_localMatrix=vertexUniforms.localMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_directionalLightCount=systemUniforms.directionalLightCount;let u_directionalLights=systemUniforms.directionalLights;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_receiveShadow=vertexUniforms.receiveShadow;var output:OutputDataSkin;var skinMat:mat4x4<f32>;let vertexJoint:vec4<f32>=inputData.vertexJoint;let vertexWeight:vec4<f32>=inputData.vertexWeight;let jointMatrix=vertexStorages.jointMatrix;skinMat=vertexWeight.x * jointMatrix[ u32(vertexJoint.x) ]+vertexWeight.y * jointMatrix[ u32(vertexJoint.y) ]+vertexWeight.z * jointMatrix[ u32(vertexJoint.z) ]+vertexWeight.w * jointMatrix[ u32(vertexJoint.w) ];let position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0);let normalPosition=u_normalModelMatrix * skinMat * vec4<f32>(inputData.vertexNormal,1.0);output.position=u_projectionCameraMatrix * position;output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.uv=inputData.uv;output.uv1=inputData.uv1;output.vertexColor_0=inputData.vertexColor_0;output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent;var posFromLight=u_directionalLightProjectionViewMatrix * position;output.shadowPos=vec3<f32>(posFromLight.xy * vec2<f32>(0.5,-0.5) + vec2<f32>(0.5),posFromLight.z);output.receiveShadow=u_receiveShadow;let nodeScaleX:f32=length(u_localMatrix[0].xyz);let nodeScaleY:f32=length(u_localMatrix[1].xyz);let nodeScaleZ:f32=length(u_localMatrix[2].xyz);output.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0);let volumeScaleX:f32=length(u_modelMatrix[0].xyz);let volumeScaleY:f32=length(u_modelMatrix[1].xyz);let volumeScaleZ:f32=length(u_modelMatrix[2].xyz);output.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0);return output;\n}\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputDataSkin ) -> OutputShadowData {var output:OutputShadowData;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let input_position=inputData.position;var position:vec4<f32>;var skinMat:mat4x4<f32>=mat4x4<f32>(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);var vertexJoint:vec4<f32>=inputData.vertexJoint;var vertexWeight:vec4<f32>=inputData.vertexWeight;var jointMatrix=vertexStorages.jointMatrix;skinMat=vertexWeight.x * jointMatrix[ u32(vertexJoint.x) ]+vertexWeight.y * jointMatrix[ u32(vertexJoint.y) ]+vertexWeight.z * jointMatrix[ u32(vertexJoint.z) ]+vertexWeight.w * jointMatrix[ u32(vertexJoint.w) ];position=u_modelMatrix * skinMat * vec4<f32>(input_position,1.0);output.position=u_directionalLightProjectionViewMatrix * position;return output;\n}\n@vertex\nfn picking(inputData:InputDataSkin) -> OutputDataSkin {let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;var output:OutputDataSkin;var skinMat:mat4x4<f32>=mat4x4<f32>(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);var vertexJoint:vec4<f32>=inputData.vertexJoint;var vertexWeight:vec4<f32>=inputData.vertexWeight;var jointMatrix=vertexStorages.jointMatrix;skinMat=vertexWeight.x * jointMatrix[ u32(vertexJoint.x) ]+vertexWeight.y * jointMatrix[ u32(vertexJoint.y) ]+vertexWeight.z * jointMatrix[ u32(vertexJoint.z) ]+vertexWeight.w * jointMatrix[ u32(vertexJoint.w) ];var position:vec4<f32>;position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0);output.position=u_projectionMatrix * u_cameraMatrix * position;output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n",P={code:w};if(x===T)return _.getGPUShaderModule(T);if(P.code=w.replaceAll("#JOINT_NUM",y),b.vertexUniformInfo=parseWGSL(P.code).uniforms.vertexUniforms,m.animationInfo.skinInfo){createMeshVertexUniformBuffers(m,!0),m.animationInfo.skinInfo.vertexStorageInfo=parseWGSL(P.code).storage.vertexStorages;const i=new ArrayBuffer(m.animationInfo.skinInfo.vertexStorageInfo.arrayBufferByteLength);m.animationInfo.skinInfo.vertexStorageBuffer=new StorageBuffer(m.redGPUContext,i,m.name),b.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m,!0))}else createMeshVertexUniformBuffers(m),b.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m));return _.createGPUShaderModule(T,P)})("VERTEX_MODULE_MESH_PBR_SKIN",i):i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH_PBR",Ur,Ar,Dr):i.createCustomMeshVertexShaderModule?i.createCustomMeshVertexShaderModule():i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH",kr,Or,Lr),i.currentShaderModuleName=g.label,g},Fr={NEVER:"never",LESS:"less",EQUAL:"equal",LESS_EQUAL:"less-equal",GREATER:"greater",NOT_EQUAL:"not-equal",GREATER_EQUAL:"greater-equal",ALWAYS:"always"};Object.freeze(Fr);const Nr="shadow",Gr="picking",createBasePipeline=(i,m,g,x)=>{const{redGPUContext:_}=i,{gpuDevice:b}=_,y=i.material.gpuRenderInfo;let T,w;switch(x){case Nr:T="drawDirectionalShadowDepth",w=`${m.label}_shadow_pipelineDescriptor`;break;case Gr:T="picking",w=`${m.label}_picking_pipelineDescriptor`;break;default:T="main",w=`${m.label}_pipelineDescriptor`}const P={module:m,entryPoint:T,buffers:i.vertexStateBuffers},H=[_.resourceManager.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),g];x!==Nr&&H.push(y.fragmentBindGroupLayout);const z={bindGroupLayouts:H},$={label:w,layout:b.createPipelineLayout(z),vertex:P,primitive:i.primitiveState.state};switch(x){case Nr:$.depthStencil={depthWriteEnabled:!0,depthCompare:Fr.LESS_EQUAL,format:"depth32float"};break;case Gr:i.material&&($.fragment={module:i.material.gpuRenderInfo.fragmentShaderModule,entryPoint:"picking",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},$.depthStencil=i.depthStencilState.state);break;default:$.fragment=y.fragmentState,$.depthStencil=i.depthStencilState.state,$.multisample={count:_.antialiasingManager.useMSAA?4:1}}return b.createRenderPipeline($)},updateMeshDirtyPipeline=(i,m)=>{const{material:g,gpuRenderInfo:x,redGPUContext:_}=i,{resourceManager:b}=_;i.dirtyTransform=!0,g.dirtyPipeline&&g._updateFragmentState();const y=createMeshVertexShaderModule(i),T=b.getGPUBindGroupLayout(i.animationInfo.skinInfo?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout);x.vertexShaderModule=y,x.pipeline=createBasePipeline(i,y,T),x.shadowPipeline=i.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("drawDirectionalShadowDepth")?createBasePipeline(i,y,T,Nr):null,x.pickingPipeline=i.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("picking")?createBasePipeline(i,y,T,Gr):null;const{vertexUniformInfo:w}=i.gpuRenderInfo,{members:P}=w;for(const m in P)"pickingId"!==m&&(i[m]=i[m]);i.gpuRenderInfo.vertexUniformInfo.members.pickingId&&i.gpuRenderInfo.vertexUniformBuffer.writeBuffer(i.gpuRenderInfo.vertexUniformInfo.members.pickingId,i.pickingId),g.dirtyPipeline=!1,i.dirtyPipeline=!1,m&&m.numDirtyPipelines++},Vr=Object.values(Fr);class DepthStencilState{state;#gn;#ie="depth32float";#xn=["r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm-srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm-srgb","rgb9e5ufloat","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth24plus-stencil8","depth32float","depth32float-stencil8","bc1-rgba-unorm","bc1-rgba-unorm-srgb","bc2-rgba-unorm","bc2-rgba-unorm-srgb","bc3-rgba-unorm","bc3-rgba-unorm-srgb","bc4-r-unorm","bc4-r-snorm","bc5-rg-unorm","bc5-rg-snorm","bc6h-rgb-ufloat","bc6h-rgb-float","bc7-rgba-unorm","bc7-rgba-unorm-srgb","etc2-rgb8unorm","etc2-rgb8unorm-srgb","etc2-rgb8a1unorm","etc2-rgb8a1unorm-srgb","etc2-rgba8unorm","etc2-rgba8unorm-srgb","eac-r11unorm","eac-r11snorm","eac-rg11unorm","eac-rg11snorm","astc-4x4-unorm","astc-4x4-unorm-srgb","astc-5x4-unorm","astc-5x4-unorm-srgb","astc-5x5-unorm","astc-5x5-unorm-srgb","astc-6x5-unorm","astc-6x5-unorm-srgb","astc-6x6-unorm","astc-6x6-unorm-srgb","astc-8x5-unorm","astc-8x5-unorm-srgb","astc-8x6-unorm","astc-8x6-unorm-srgb","astc-8x8-unorm","astc-8x8-unorm-srgb","astc-10x5-unorm","astc-10x5-unorm-srgb","astc-10x6-unorm","astc-10x6-unorm-srgb","astc-10x8-unorm","astc-10x8-unorm-srgb","astc-10x10-unorm","astc-10x10-unorm-srgb","astc-12x10-unorm","astc-12x10-unorm-srgb","astc-12x12-unorm","astc-12x12-unorm-srgb"];#_n=!0;#vn=Fr.LESS_EQUAL;#bn;#yn;#Tn;#Sn;#wn;#Mn;#Rn;constructor(i){this.#gn=i,this.#z()}get format(){return this.#ie}set format(i){this.#xn.includes(i)?(this.#ie=i,this.#z()):consoleAndThrowError(`Invalid value for format. Received ${i}. Expected one of:${this.#xn.join(",")}`)}get depthWriteEnabled(){return this.#_n}set depthWriteEnabled(i){this.#_n=i,this.#z()}get depthCompare(){return this.#vn}set depthCompare(i){Vr.includes(i)?(this.#vn=i,this.#z()):consoleAndThrowError(`Invalid value for depthCompare. Received ${i}. Expected one of:${Vr.join(",")}`)}get stencilFront(){return this.#bn}set stencilFront(i){this.#bn=i,this.#z()}get stencilBack(){return this.#yn}set stencilBack(i){this.#yn=i,this.#z()}get stencilReadMask(){return this.#Tn}set stencilReadMask(i){this.#Tn=i,this.#z()}get stencilWriteMask(){return this.#Sn}set stencilWriteMask(i){this.#Sn=i,this.#z()}get depthBias(){return this.#wn}set depthBias(i){this.#wn=i,this.#z()}get depthBiasSlopeScale(){return this.#Mn}set depthBiasSlopeScale(i){this.#Mn=i,this.#z()}get depthBiasClamp(){return this.#Rn}set depthBiasClamp(i){this.#Rn=i,this.#z()}#z(){this.state={format:this.#ie,depthWriteEnabled:this.#_n,depthCompare:this.#vn,stencilFront:this.#bn,stencilBack:this.#yn,stencilReadMask:this.#Tn,stencilWriteMask:this.#Sn,depthBias:this.#wn,depthBiasSlopeScale:this.#Mn,depthBiasClamp:this.#Rn},this.#gn.dirtyPipeline=!0}}const Hr={NONE:"none",FRONT:"front",BACK:"back"};Object.freeze(Hr);const zr={CW:"cw",CCW:"ccw"};Object.freeze(zr);const $r={UINT16:"uint16",UINT32:"uint32"};Object.freeze($r);const qr=Object.values($r),Kr=Object.values(zr),Wr=Object.values(Hr),Xr=["point-list","line-list","line-strip","triangle-list","triangle-strip"];class PrimitiveState{dirtyPipeline=!1;state;#gn;#Cn=Mn.TRIANGLE_LIST;#Pn;#En=zr.CCW;#In=Hr.BACK;#Bn=!1;constructor(i){this.#gn=i,this.#z()}get topology(){return this.#Cn}set topology(i){Xr.includes(i)?(this.#Cn=i,this.#z()):consoleAndThrowError(`Invalid value for topology. Received ${i}. Expected one of:${Xr.join(",")}`)}get stripIndexFormat(){return this.#Pn}set stripIndexFormat(i){qr.includes(i)?(this.#Pn=i,this.#z()):consoleAndThrowError(`Invalid value for stripIndexFormat. Received ${i}. Expected one of:${qr.join(",")}`)}get frontFace(){return this.#En}set frontFace(i){Kr.includes(i)?(this.#En=i,this.#z()):consoleAndThrowError(`Invalid value for frontFace. Received ${i}. Expected one of:${Kr.join(",")}`)}get cullMode(){return this.#In}set cullMode(i){Wr.includes(i)?(this.#In=i,this.#z()):consoleAndThrowError(`Invalid value for cullMode. Received ${i}. Expected one of:${Wr.join(",")}`)}get unclippedDepth(){return this.#Bn}set unclippedDepth(i){"boolean"==typeof i?(this.#Bn=i,this.#z()):consoleAndThrowError(`Invalid type for unclippedDepth. Received ${typeof i}. Expected type:boolean.`)}#z(){this.state={topology:this.#Cn,stripIndexFormat:this.#Pn,frontFace:this.#En,cullMode:this.#In,unclippedDepth:this.#Bn},this.#gn.dirtyPipeline=!0}}const Yr=create$5(),jr={x:0,y:0,z:0,w:0},getScreenPoint=(i,m)=>{"View3D"!==i?.constructor?.name&&consoleAndThrowError("allow only View3D instance"),identity$2(Yr);const{projectionMatrix:g,rawCamera:x,pixelRectArray:_}=i;return multiply$5(Yr,g,x.modelMatrix),multiply$5(Yr,Yr,m),jr.z=Yr[14],jr.w=Yr[15],jr.x=.5*Yr[12]/jr.w+.5,jr.y=.5*Yr[13]/jr.w+.5,[(_[0]+jr.x*_[2])/window.devicePixelRatio,(_[1]+(1-jr.y)*_[3])/window.devicePixelRatio]},Zr=create$5(),localToWorld=(i,m,g,x)=>(validateNumber(m),validateNumber(g),validateNumber(x),identity$2(Zr),translate$1(Zr,Zr,[m,g,x]),multiply$5(Zr,i,Zr),[Zr[12],Zr[13],Zr[14]]),Jr=create$5(),Qr=create$4(),worldToLocal=(i,m,g,x)=>(validateNumber(m),validateNumber(g),validateNumber(x),invert$2(Jr,i),set$4(Qr,m,g,x),transformMat4$2(Qr,Qr,Jr),[Qr[0],Qr[1],Qr[2]]);class Object3DContainer{modelMatrix=create$5();#Ln=[];constructor(){}get children(){return this.#Ln}get numChildren(){return this.#Ln.length}contains(i){return this.#Dn(i),this.#Ln.includes(i)}addChild(i){return this.#Dn(i),this.#Un(i)?(this.#Ln.push(i),i.dirtyTransform=!0,i):null}addChildAt(i,m){if(validateUintRange(m),this.#Ln.length<m&&(m=this.#Ln.length),!(m<0||m>this.#Ln.length)&&this.#Un(i))return this.#Ln.splice(m,0,i),i.dirtyTransform=!0,this}getChildAt(i){if(validateUintRange(i),!(i>=this.#Ln.length||i<0))return this.#Ln[i]}getChildIndex(i){this.#Dn(i);const m=this.#Ln.indexOf(i);return-1===m?-1:m}setChildIndex(i,m){this.#Dn(i),validateUintRange(m);const g=this.#Ln.length,x=m>=g,_=this.#Ln.indexOf(i);-1!==_?x?consoleAndThrowError(`Invalid index. Index ${m} is out of bounds. Index should be between 0 and ${g-1}.`):(this.#Ln.splice(_,1),this.#Ln.splice(m,0,i)):consoleAndThrowError(`The provided is not a child of the Object3DContainer.:${i}`)}swapChildren(i,m){if(this.#Dn(i),this.#Dn(m),i===m)return void consoleAndThrowError("Error:child1 and child2 are the same. Cannot swap a child with itself.");const g=this.#Ln.indexOf(i),x=this.#Ln.indexOf(m);-1!==g&&-1!==x||consoleAndThrowError(`Error:${-1===g?"child1":"child2"} is not a child of this Object3DContainer.`),this.swapChildrenAt(g,x)}swapChildrenAt(i,m){validateUintRange(i),validateUintRange(m),i===m&&consoleAndThrowError("Error:index1 and index2 are identical. Cannot swap a child with itself.");const g=this.#Ln.length;(i>=g||m>=g)&&consoleAndThrowError(`Error:Both index1 and index2 should be less than the number of children. Provided index1:${i},index2:${m},number of children:${g}`);let x=this.#Ln[i];this.#Ln[i]=this.#Ln[m],this.#Ln[m]=x}removeChild(i){this.#Dn(i);const m=this.#Ln.indexOf(i);if(m>-1)return i.parent=null,this.#Ln.splice(m,1)[0];consoleAndThrowError("Error:Child not found within parent.")}removeChildAt(i){validateUintRange(i);const m=this.#Ln[i];if(m)return m.parent=null,this.#Ln.splice(i,1)[0];throw new Error(`Error:No child found at provided index:${i}.`)}removeAllChildren(){let i=this.#Ln.length;for(;i--;)this.#Ln[i].parent=null;return this.#Ln.length=0,this}#Dn(i){i instanceof Object3DContainer||consoleAndThrowError("allow only Object3DContainer instance.")}#Un=i=>(this.#Dn(i),i.parent?!!i.parent?.removeChild(i)&&(i.parent=this,!0):(i.parent=this,!0))}class MeshBase extends Object3DContainer{gpuRenderInfo;animationInfo={skinInfo:null,morphInfo:null,animationsList:null};gltfLoaderInfo;dirtyPipeline=!0;dirtyTransform=!0;dirtyOpacity=!0;modelMatrix=create$5();localMatrix=create$5();normalModelMatrix=create$5();#b;#y;#An;#kn;#On;#T=[];#v=createUUID();constructor(i){super(),validateRedGPUContext(i),this.#b=i,this.#y=i.gpuDevice,this.#An=new PrimitiveState(this),this.#kn=new DepthStencilState(this)}get uuid(){return this.#v}get currentShaderModuleName(){return this.#On}set currentShaderModuleName(i){this.#On=i}get primitiveState(){return this.#An}get depthStencilState(){return this.#kn}get gpuDevice(){return this.#y}get redGPUContext(){return this.#b}worldToLocal(i,m,g){return worldToLocal(this.modelMatrix,i,m,g)}localToWorld(i,m,g){return localToWorld(this.modelMatrix,i,m,g)}getScreenPoint(i){return getScreenPoint(i,this.modelMatrix)}__fireListenerList(i=!1){for(const i of this.#T)i(this);i&&(this.#T.length=0)}}const ei="VERTEX_MODULE_MESH_PBR_SKIN",ti=Math.PI/180,ni=3.141592653589793,ri=6.283185307179586,ii=.225,ai=1.27323954,si=.405284735,oi=1.5707963267948966;class Mesh extends MeshBase{displacementTexture;castShadow=!1;#e;#a;#Fn;#n=0;#i=0;#r=0;#Nn=[0,0,0];#Gn=0;#Vn=0;#Hn=0;#zn;#$n=1;#qn=1;#Kn=1;#Wn=[1,1,1];#o=0;#u=0;#l=0;#Xn=[0,0,0];#Yn={};#jn=0;#Zn=!1;#Jn=1;#Qn;#er=!1;get enableDebugger(){return this.#er}get drawDebugger(){return this.#Qn}set enableDebugger(i){this.#er=i,i&&!this.#Qn&&(this.#Qn=new DrawDebuggerMesh(this.redGPUContext,this))}constructor(i,m,g,x){super(i),x&&(this.name=x),this._geometry=m,this._material=g,this.#zn=uuidToUint(this.uuid)}_material;get material(){return this._material}set material(i){this._material=i,this.dirtyPipeline=!0,"blendMode"in this&&(this.blendMode=this.blendMode)}_geometry;get geometry(){return this._geometry}set geometry(i){this._geometry=i,this.dirtyPipeline=!0,this.dirtyTransform=!0}get opacity(){return this.#Jn}set opacity(i){validatePositiveNumberRange(i,0,1),this.#Jn=i,this.dirtyOpacity=!0}get ignoreFrustumCulling(){return this.#Zn}set ignoreFrustumCulling(i){this.#Zn=i}get pickingId(){return this.#zn}get events(){return this.#Yn}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get vertexStateBuffers(){return this._geometry.gpuRenderInfo.buffers}get parent(){return this.#Fn}set parent(i){this.#Fn=i}get pivotX(){return this.#Gn}set pivotX(i){this.#Gn=i,this.dirtyTransform=!0}get pivotY(){return this.#Vn}set pivotY(i){this.#Vn=i,this.dirtyTransform=!0}get pivotZ(){return this.#Hn}set pivotZ(i){this.#Hn=i,this.dirtyTransform=!0}get x(){return this.#n}set x(i){this.#n=this.#Nn[0]=i,this.dirtyTransform=!0}get y(){return this.#r}set y(i){this.#r=this.#Nn[1]=i,this.dirtyTransform=!0}get z(){return this.#i}set z(i){this.#i=this.#Nn[2]=i,this.dirtyTransform=!0}get position(){return this.#Nn}get scaleX(){return this.#$n}set scaleX(i){this.#$n=this.#Wn[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#qn}set scaleY(i){this.#qn=this.#Wn[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#Kn}set scaleZ(i){this.#Kn=this.#Wn[2]=i,this.dirtyTransform=!0}get scale(){return this.#Nn}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#Xn[0]=i%360,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#Xn[1]=i%360,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#Xn[2]=i%360,this.dirtyTransform=!0}get rotation(){return this.#Xn}setEnableDebuggerRecursively(i=!1){"enableDebugger"in this&&(this.enableDebugger=i),this.children&&this.children.forEach(m=>{m.setEnableDebuggerRecursively(i)})}setCastShadowRecursively(i=!1){"castShadow"in this&&(this.castShadow=i),this.children&&this.children.forEach(m=>{m.setCastShadowRecursively(i)})}setReceiveShadowRecursively(i=!1){"receiveShadow"in this&&(this.receiveShadow=i),this.children&&this.children.forEach(m=>{m.setReceiveShadowRecursively(i)})}getCombinedOpacity(){if(this.is2DMeshType){const i=this.parent;return this.#Jn*(i?.getCombinedOpacity?i.getCombinedOpacity():1)}return 1}addListener(i,m){this.#Yn[i]=m,this.#jn=Object.keys(this.#Yn).length}lookAt(i,m,g){var x,_=new Float32Array([0,1,0]),b=[];b[0]=i,b[1]=m,b[2]=g,identity$2(this.localMatrix),targetTo(this.localMatrix,[this.#n,this.#r,this.#i],b,_),x=mat4ToEuler(this.localMatrix,[]),this.rotationX=180*-x[0]/Math.PI,this.rotationY=180*-x[1]/Math.PI,this.rotationZ=180*-x[2]/Math.PI}setScale(i,m,g){m=m??i,g=g??i;const x=this.#Wn;this.#$n=x[0]=i,this.#qn=x[1]=m,this.#Kn=x[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const x=this.#Nn;this.#n=x[0]=i,this.#r=x[1]=m,this.#i=x[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const x=this.#Xn;this.#o=x[0]=i,this.#u=x[1]=m,this.#l=x[2]=g,this.dirtyTransform=!0}clone(){const i=new Mesh(this.redGPUContext,this._geometry,this._material);i.setPosition(this.#n,this.#r,this.#i),i.setRotation(this.#o,this.#u,this.#l),i.setScale(this.#$n,this.#qn,this.#Kn);let m=this.children.length;for(;m--;)i.addChild(this.children[m].clone());return i}render(i){const{redGPUContext:m}=this,{view:g,isScene2DMode:x,currentRenderPassEncoder:_,timestamp:b,frustumPlanes:y,dirtyVertexUniformFromMaterial:T,useDistanceCulling:w,cullingDistanceSquared:P,distanceCulling:H}=i,{scene:z}=g,{shadowManager:$}=z,{directionalShadowManager:q}=$,{pickingManager:W}=g,{castingList:ye}=q,Ge=this._geometry,Ke=this._material,{uuid:Xe}=Ke||{};let Ye,je;if(x&&(this.#i=0,this.#Hn=0,this.depthStencilState.depthWriteEnabled&&(this.depthStencilState.depthWriteEnabled=!1)),this.dirtyTransform){Ye=!0;{const{pixelRectObject:i}=g,m=this.parent,_=this.localMatrix;let b,y,T,w,P,H,z,$,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Ct,Pt,Et,It,Bt,Lt;if(_[12]=this.#n,_[13]=this.#r,_[14]=this.#i,_[15]=1,b=this.#o*ti,y=this.#u*ti,T=this.#l*ti,ft=1,gt=0,xt=0,bt=0,yt=1,Tt=0,wt=0,Mt=0,Rt=1,Lt=b%ri,Lt<-ni?Lt+=ri:Lt>ni&&(Lt-=ri),Lt=Lt<0?ai*Lt+si*Lt*Lt:ai*Lt-si*Lt*Lt,w=Lt<0?ii*(Lt*-Lt-Lt)+Lt:ii*(Lt*Lt-Lt)+Lt,Lt=(b+oi)%ri,Lt<-ni?Lt+=ri:Lt>ni&&(Lt-=ri),Lt=Lt<0?ai*Lt+si*Lt*Lt:ai*Lt-si*Lt*Lt,z=Lt<0?ii*(Lt*-Lt-Lt)+Lt:ii*(Lt*Lt-Lt)+Lt,Lt=y%ri,Lt<-ni?Lt+=ri:Lt>ni&&(Lt-=ri),Lt=Lt<0?ai*Lt+si*Lt*Lt:ai*Lt-si*Lt*Lt,P=Lt<0?ii*(Lt*-Lt-Lt)+Lt:ii*(Lt*Lt-Lt)+Lt,Lt=(y+oi)%ri,Lt<-ni?Lt+=ri:Lt>ni&&(Lt-=ri),Lt=Lt<0?ai*Lt+si*Lt*Lt:ai*Lt-si*Lt*Lt,$=Lt<0?ii*(Lt*-Lt-Lt)+Lt:ii*(Lt*Lt-Lt)+Lt,Lt=T%ri,Lt<-ni?Lt+=ri:Lt>ni&&(Lt-=ri),Lt=Lt<0?ai*Lt+si*Lt*Lt:ai*Lt-si*Lt*Lt,H=Lt<0?ii*(Lt*-Lt-Lt)+Lt:ii*(Lt*Lt-Lt)+Lt,Lt=(T+oi)%ri,Lt<-ni?Lt+=ri:Lt>ni&&(Lt-=ri),Lt=Lt<0?ai*Lt+si*Lt*Lt:ai*Lt-si*Lt*Lt,q=Lt<0?ii*(Lt*-Lt-Lt)+Lt:ii*(Lt*Lt-Lt)+Lt,Xe=$*q,Ye=w*P*q-z*H,je=z*P*q+w*H,Ze=$*H,Je=w*P*H+z*q,Qe=z*P*H-w*q,et=-P,at=w*$,ht=z*$,b=this.#$n,y=this.#qn,T=this.#Kn,this.renderTextureWidth&&(b*=this.renderTextureWidth,y*=this.renderTextureHeight),_[0]=(ft*Xe+bt*Ye+wt*je)*b,_[1]=(gt*Xe+yt*Ye+Mt*je)*b,_[2]=(xt*Xe+Tt*Ye+Rt*je)*b,_[3]=_[3]*b,_[4]=(ft*Ze+bt*Je+wt*Qe)*y,_[5]=(gt*Ze+yt*Je+Mt*Qe)*y,_[6]=(xt*Ze+Tt*Je+Rt*Qe)*y,_[7]=_[7]*y,_[8]=(ft*et+bt*at+wt*ht)*T,_[9]=(gt*et+yt*at+Mt*ht)*T,_[10]=(xt*et+Tt*at+Rt*ht)*T,_[11]=_[11]*T,(this.#Gn||this.#Vn||this.#Hn)&&(ft=_[0],gt=_[1],xt=_[2],vt=_[3],bt=_[4],yt=_[5],Tt=_[6],St=_[7],wt=_[8],Mt=_[9],Rt=_[10],Ct=_[11],Pt=_[12],Et=_[13],It=_[14],Bt=_[15],W=1,ye=0,Ge=0,Ke=0,_[0]=W*ft+ye*bt+Ge*wt+Ke*Pt,_[1]=W*gt+ye*yt+Ge*Mt+Ke*Et,_[2]=W*xt+ye*Tt+Ge*Rt+Ke*It,_[3]=W*vt+ye*St+Ge*Ct+Ke*Bt,W=0,ye=1,Ge=0,Ke=0,_[4]=W*ft+ye*bt+Ge*wt+Ke*Pt,_[5]=W*gt+ye*yt+Ge*Mt+Ke*Et,_[6]=W*xt+ye*Tt+Ge*Rt+Ke*It,_[7]=W*vt+ye*St+Ge*Ct+Ke*Bt,W=0,ye=0,Ge=1,Ke=0,_[8]=W*ft+ye*bt+Ge*wt+Ke*Pt,_[9]=W*gt+ye*yt+Ge*Mt+Ke*Et,_[10]=W*xt+ye*Tt+Ge*Rt+Ke*It,_[11]=W*vt+ye*St+Ge*Ct+Ke*Bt,x?m?.modelMatrix?(W=-this.#Gn,ye=-this.#Vn,Ge=-this.#Hn,Ke=1):(W=-this.#Gn/b,ye=-this.#Vn/y,Ge=-this.#Hn,Ke=1):(W=-this.#Gn,ye=-this.#Vn,Ge=-this.#Hn,Ke=1),_[12]=W*ft+ye*bt+Ge*wt+Ke*Pt,_[13]=W*gt+ye*yt+Ge*Mt+Ke*Et,_[14]=W*xt+ye*Tt+Ge*Rt+Ke*It,_[15]=W*vt+ye*St+Ge*Ct+Ke*Bt),m?.modelMatrix){let i=m.modelMatrix,g=this.localMatrix,x=this.modelMatrix,_=i[0],b=i[1],y=i[2],T=i[3],w=i[4],P=i[5],H=i[6],z=i[7],$=i[8],q=i[9],W=i[10],ye=i[11],Ge=i[12],Ke=i[13],Xe=i[14],Ye=i[15],je=g[0],Ze=g[1],Je=g[2],Qe=g[3];x[0]=je*_+Ze*w+Je*$+Qe*Ge,x[1]=je*b+Ze*P+Je*q+Qe*Ke,x[2]=je*y+Ze*H+Je*W+Qe*Xe,x[3]=je*T+Ze*z+Je*ye+Qe*Ye,je=g[4],Ze=g[5],Je=g[6],Qe=g[7],x[4]=je*_+Ze*w+Je*$+Qe*Ge,x[5]=je*b+Ze*P+Je*q+Qe*Ke,x[6]=je*y+Ze*H+Je*W+Qe*Xe,x[7]=je*T+Ze*z+Je*ye+Qe*Ye,je=g[8],Ze=g[9],Je=g[10],Qe=g[11],x[8]=je*_+Ze*w+Je*$+Qe*Ge,x[9]=je*b+Ze*P+Je*q+Qe*Ke,x[10]=je*y+Ze*H+Je*W+Qe*Xe,x[11]=je*T+Ze*z+Je*ye+Qe*Ye,je=g[12],Ze=g[13],Je=g[14],Qe=g[15],x[12]=je*_+Ze*w+Je*$+Qe*Ge,x[13]=je*b+Ze*P+Je*q+Qe*Ke,x[14]=je*y+Ze*H+Je*W+Qe*Xe,x[15]=je*T+Ze*z+Je*ye+Qe*Ye}else{const{modelMatrix:i,localMatrix:m}=this;i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]}{let i=this.normalModelMatrix,m=this.modelMatrix,g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],H=m[8],z=m[9],$=m[10],q=m[11],W=m[12],ye=m[13],Ge=m[14],Ke=m[15],Xe=g*T-x*y,Ye=g*w-_*y,je=g*P-b*y,Ze=x*w-_*T,Je=x*P-b*T,Qe=_*P-b*w,et=H*ye-z*W,at=H*Ge-$*W,ht=H*Ke-q*W,ft=$*Ke-q*Ge,gt=z*Ke-q*ye,xt=Xe*ft-Ye*gt+je*ft+Ze*ht-Je*at+Qe*et;xt=1/xt,i[0]=(T*ft-w*gt+P*ft)*xt,i[4]=(-x*ft+_*gt-b*ft)*xt,i[8]=(ye*Qe-Ge*Je+Ke*Ze)*xt,i[12]=(-z*Qe+$*Je-q*Ze)*xt,i[1]=(-y*ft+w*ht-P*at)*xt,i[5]=(g*ft-_*ht+b*at)*xt,i[9]=(-W*Qe+Ge*je-Ke*Ye)*xt,i[13]=(H*Qe-$*je+q*Ye)*xt,i[2]=(y*gt-T*ht+P*et)*xt,i[6]=(-g*gt+x*ht-b*et)*xt,i[10]=(W*Je-ye*je+Ke*Xe)*xt,i[14]=(-H*Je+z*je-q*Xe)*xt,i[3]=(-y*ft+T*at-w*et)*xt,i[7]=(g*ft-x*at+_*et)*xt,i[11]=(-W*Ze+ye*Ye-Ge*Xe)*xt,i[15]=(H*Ze-z*Ye+$*Xe)*xt}}}this.gltfLoaderInfo?.activeAnimations?.length&&((i,m)=>{let g,x,_,b,y,T,w,P,H,z,$,q,W,ye,Ge=m.length;for(;Ge--;)for(w=m[Ge],T=w.targetAniTrackList,y=T.length;y--;){P=T[y];const{animationTargetMesh:m,timeAnimationInfo:Ge,aniDataAnimationInfo:Ke,weightMeshes:Xe}=P;for(g=(i-w.startTime)%(1e3*T.maxTime)/1e3,$=Ge.dataList,q=Ke.dataList,W=$.length,ye=0,z=$.length-1,H=0,x=$[z],_=$[H];ye<W;ye++){const i=$[ye];if(i<g&&(z=ye,x=$[z],H=null==$[z+1]?0:z+1,_=$[H]),0==ye&&g<i){z=W-1,x=$[z],H=ye,_=$[H],g=i;break}if(ye==W-1&&g>i){z=0,x=$[z],H=W-1,_=$[H],g=i;break}}let Ye,je,Ze,Je,Qe,et,at;switch("CUBICSPLINE"==P.interpolation?(b=_-x,"NaN"==b.toString()&&(b=0),Ye=(g-x)/b,"NaN"==Ye.toString()&&(Ye=0),je=Ye*Ye,Ze=je*Ye,et=-2*Ze+3*je,at=Ze-je,Je=1-et,Qe=at-je+Ye):(b="STEP"==P.interpolation?0:(g-x)/(_-x),"NaN"==b.toString()&&(b=0)),P.key){case"rotation":gltfAnimationLooper_rotation(P.interpolation,m,q,W,b,z,H,Je,Qe,et,at);break;case"translation":gltfAnimationLooper_transition(P.interpolation,m,q,W,b,z,H,Je,Qe,et,at);break;case"scale":gltfAnimationLooper_scale(P.interpolation,m,q,W,b,z,H,Je,Qe,et,at);break;case"weights":gltfAnimationLooper_weight(Xe,q,b,z,H)}}})(b,this.gltfLoaderInfo.activeAnimations),this.animationInfo.skinInfo&&(this.currentShaderModuleName.includes(ei)||(this.dirtyPipeline=!0),this.currentShaderModuleName===`${ei}_${this.animationInfo.skinInfo.joints?.length}`&&(this.animationInfo.skinInfo.update(m,this),Ye=!1));let Ze=!0;if(w&&Ge){const{rawCamera:i}=g,m=this.boundingAABB,x=i.x-m.centerX,_=i.y-m.centerY,b=i.z-m.centerZ;x*x+_*_+b*b>P+m.geometryRadius*m.geometryRadius&&(Ze=!1)}if(y&&Ze)if(Ge){const i=this.boundingAABB,m=y[0],g=y[1],x=y[2],_=y[3],b=y[4],T=y[5],w=i.centerX,P=i.centerY,H=i.centerZ,z=i.geometryRadius;(m[0]*w+m[1]*P+m[2]*H+m[3]<=-z||g[0]*w+g[1]*P+g[2]*H+g[3]<=-z||x[0]*w+x[1]*P+x[2]*H+x[3]<=-z||_[0]*w+_[1]*P+_[2]*H+_[3]<=-z||b[0]*w+b[1]*P+b[2]*H+b[3]<=-z||T[0]*w+T[1]*P+T[2]*H+T[3]<=-z)&&(Ze=!1)}else Ze=!1;this.#Zn&&(Ze=!0),Ge?i.num3DObjects++:i.num3DGroups++;const{displacementTexture:Je,displacementScale:Qe}=Ke||{};(this.dirtyPipeline||Ke?.dirtyPipeline||T[Xe])&&(T[Xe]=!0);const{antialiasingManager:et,gpuDevice:at}=m;if(Ge&&(et.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.initGPURenderInfos(),(this.dirtyPipeline||T[Xe])&&updateMeshDirtyPipeline(this,i)),Ge&&Ze){{const{gpuRenderInfo:i}=this,{vertexUniformBuffer:m,vertexUniformInfo:g,pipeline:x}=i,{members:_}=g;void 0!==_.displacementScale&&_.displacementScale!==Qe&&at.queue.writeBuffer(m.gpuBuffer,_.displacementScale.uniformOffset,new _.displacementScale.View([Qe])),void 0!==_.useDisplacementTexture&&_.useDisplacementTexture!==Je&&at.queue.writeBuffer(m.gpuBuffer,_.useDisplacementTexture.uniformOffset,new _.useDisplacementTexture.View([Je?1:0]))}const{gpuRenderInfo:m}=this,{vertexUniformBuffer:g,vertexUniformBindGroup:x,vertexUniformInfo:b,pipeline:y}=m,{members:T}=b;if(this.dirtyTransform&&(at.queue.writeBuffer(g.gpuBuffer,T.modelMatrix.uniformOffset,new T.modelMatrix.View(this.is2DMeshType?multiply$5(create$5(),this.modelMatrix,fromValues$5(this.width,0,0,0,0,this.height,0,0,0,0,1,0,0,0,0,1)):this.modelMatrix)),at.queue.writeBuffer(g.gpuBuffer,T.normalModelMatrix.uniformOffset,new T.normalModelMatrix.View(this.normalModelMatrix)),T.localMatrix&&at.queue.writeBuffer(g.gpuBuffer,T.localMatrix.uniformOffset,new T.localMatrix.View(this.localMatrix)),Ye=!0,this.dirtyTransform=!1),this.dirtyOpacity&&(je=!0,T.combinedOpacity&&at.queue.writeBuffer(g.gpuBuffer,T.combinedOpacity.uniformOffset,new T.combinedOpacity.View([this.getCombinedOpacity()])),this.dirtyOpacity=!1),Ke.use2PathRender)i.render2PathLayer[i.render2PathLayer.length]=this;else if("particle"===this.meshType)i.particleLayer[i.particleLayer.length]=this;else if("instanceMesh"===this.meshType)i.instanceMeshLayer[i.instanceMeshLayer.length]=this;else if(Ke.transparent)i.transparentLayer[i.transparentLayer.length]=this;else if(2===Ke.alphaBlend||Ke.opacity<1||!this.depthStencilState.depthWriteEnabled)i.alphaLayer[i.alphaLayer.length]=this;else{_.setPipeline(y);const{gpuBuffer:m}=Ge.vertexBuffer,{fragmentUniformBindGroup:g}=Ke.gpuRenderInfo;if(i.prevVertexGpuBuffer!==m&&(_.setVertexBuffer(0,m),i.prevVertexGpuBuffer=m),_.setBindGroup(1,x),i.prevFragmentUniformBindGroup!==g&&(_.setBindGroup(2,g),i.prevFragmentUniformBindGroup=g),i.numDrawCalls++,Ge.indexBuffer){const{indexBuffer:m}=Ge,{indexNum:g,triangleCount:x,gpuBuffer:b}=m;_.setIndexBuffer(b,"uint32"),this.particleBuffers?_.drawIndexed(g,this.particleNum,0,0,0):_.drawIndexed(g,1,0,0,0),i.numTriangles+=x,i.numPoints+=g}else{const{vertexBuffer:m}=Ge,{vertexCount:g,triangleCount:x}=m;_.draw(g,1,0,0),i.numTriangles+=x,i.numPoints+=g}}this.#jn&&(W.castingList[W.castingList.length]=this)}(this.castShadow||this.castShadow&&!Ge)&&(ye[ye.length]=this),this.#er&&this.#Qn.render(i);const{children:ht}=this;let ft=0;const gt=ht.length;for(;ft<gt;ft++)Ye&&(ht[ft].dirtyTransform=Ye),je&&(ht[ft].dirtyOpacity=je),ht[ft].render(i)}initGPURenderInfos(){this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null),updateMeshDirtyPipeline(this)}createMeshVertexShaderModuleBASIC(i,m,g,x){const{redGPUContext:_}=this,{resourceManager:b}=_,{gpuRenderInfo:y}=this,T={code:x};return y.vertexUniformInfo!==g&&(y.vertexUniformInfo=g,y.vertexStructInfo=m,createMeshVertexUniformBuffers(this)),y.vertexUniformBindGroup=_.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(this)),b.createGPUShaderModule(i,T)}#tr;#nr;get boundingOBB(){return this.#nr&&!this.dirtyTransform||(this.#nr=null,this.#tr=null,this.#nr=calculateMeshOBB(this)),this.#nr}get boundingAABB(){return this.#tr&&!this.dirtyTransform||(this.#nr=null,this.#tr=null,this.#tr=calculateMeshAABB(this)),this.#tr}get combinedBoundingAABB(){return calculateMeshCombinedAABB(this)}}Object.defineProperty(Mesh.prototype,"meshType",{value:"mesh",writable:!1}),Tn.defineByPreset(Mesh,[Tn.PRESET_BOOLEAN.RECEIVE_SHADOW]),Object.freeze(Mesh);class AController{#rr;constructor(){}get camera(){return this.#rr}set camera(i){this.#rr=i}update(i,m){}getCanvasEventPoint=(i,m)=>{const g=m.htmlCanvas,x=m.detector.isMobile,_=g.getBoundingClientRect(),b="clientX",y="clientY";let T,w;if(x){const m=i.changedTouches[0];T=m[b],w=m[y]}else{const m=i;T=m[b],w=m[y]}return{x:T-_.left,y:w-_.top}}}let ui,li=create$5();const ci=create$5(),hi=create$4();const validateNumberRange=(i,m=-Number.MAX_VALUE,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed. input:${i}`),!0);let fi;var di=Object.freeze({__proto__:null,BasicController:class extends AController{#ir;#ar={moveForward:"w",moveBack:"s",moveLeft:"a",moveRight:"d",moveUp:"t",moveDown:"g",turnLeft:"q",turnRight:"e",turnUp:"r",turnDown:"f"};#sr=1;#or=.1;#ur=1;#lr=.1;#cr=3;#hr=0;#fr=[0,0,0];#dr=0;#mr=0;#pr;constructor(i){super(),this.#pr=new Mesh(i),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let x,_;const checkArea=m=>{let g=this.#ir;if(ui&&g===ui){let x,_,b=g.pixelRectObject;const{x:y,y:T}=this.getCanvasEventPoint(m,i);if(x=y*window.devicePixelRatio*i.renderScale,_=T*window.devicePixelRatio*i.renderScale,!(b.x<x&&x<b.x+b.width))return;if(!(b.y<_&&_<b.y+b.height))return}return!0};x=0,_=0;const HD_Move=m=>{const{x:g,y:b}=this.getCanvasEventPoint(m,i),y=g-x,T=b-_;x=g,_=b,this.#dr-=y*this.#ur*.1,this.#mr-=T*this.#ur*.1},HD_up=()=>{ui=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{if(ui=this.#ir,!checkArea(m))return;const{x:b,y:y}=this.getCanvasEventPoint(m,i);x=b,_=y,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)})}get x(){return this.#pr.x}set x(i){validateNumber(i),this.#pr.x=i,this.#fr[0]=i}get y(){return this.#pr.y}set y(i){validateNumber(i),this.#pr.y=i,this.#fr[1]=i}get z(){return this.#pr.z}set z(i){validateNumber(i),this.#pr.z=i,this.#fr[2]=i}get tilt(){return this.#mr}set tilt(i){validateNumber(i),this.#pr.rotationX=i,this.#mr=i}get pan(){return this.#dr}set pan(i){validateNumber(i),this.#pr.rotationY=i,this.#dr=i}get keyNameMapper(){return{...this.#ar}}setMoveForwardKey(i){this.#ar.moveForward=i}setMoveBackKey(i){this.#ar.moveBack=i}setMoveLeftKey(i){this.#ar.moveLeft=i}setMoveRightKey(i){this.#ar.moveRight=i}setMoveUpKey(i){this.#ar.moveUp=i}setMoveDownKey(i){this.#ar.moveDown=i}setTurnLeftKey(i){this.#ar.turnLeft=i}setTurnRightKey(i){this.#ar.turnRight=i}setTurnUpKey(i){this.#ar.turnUp=i}setTurnDownKey(i){this.#ar.turnDown=i}update(i,m){this.#ir=i;const g=this.#or,x=this.#lr,_=this.#fr,b=this.#pr;b.rotationY+=(this.#dr-b.rotationY)*x,b.rotationX+=(this.#mr-b.rotationX)*x,this.#gr(i)&&(li=b.modelMatrix,identity$2(ci),rotateY$3(ci,ci,b.rotationY*Math.PI/180),rotateX$3(ci,ci,b.rotationX*Math.PI/180),translate$1(ci,ci,hi),identity$2(li),translate$1(li,li,b.position),multiply$5(li,li,ci),_[0]=li[12],_[1]=li[13],_[2]=li[14]),b.x+=(_[0]-b.x)*g,b.y+=(_[1]-b.y)*g,b.z+=(_[2]-b.z)*g,b.rotationY+=(this.#dr-b.rotationY)*x,b.rotationX+=(this.#mr-b.rotationX)*x,li=b.modelMatrix,identity$2(li),translate$1(li,li,b.position),rotateY$3(li,li,b.rotationY*Math.PI/180),rotateX$3(li,li,b.rotationX*Math.PI/180);const y=clone$5(li);translate$1(y,y,[0,0,.01]),this.camera.setPosition(y[12],y[13],y[14]),this.camera.lookAt(b.x,b.y,b.z)}#gr(i){if(!i.checkMouseInViewBounds())return;const m=this.#sr,g=this.#ur,{keyboardKeyBuffer:x}=i.redGPUContext,_=this.#ar;let b=!1,y=!1,T=0,w=0;hi[0]=0,hi[1]=0,hi[2]=0;const P=this.#hr*m;return x[_.turnLeft]&&(y=!0,T=g),x[_.turnRight]&&(y=!0,T=-g),x[_.turnUp]&&(y=!0,w=g),x[_.turnDown]&&(y=!0,w=-g),x[_.moveForward]&&(b=!0,hi[2]=-P),x[_.moveBack]&&(b=!0,hi[2]=P),x[_.moveLeft]&&(b=!0,hi[0]=-P),x[_.moveRight]&&(b=!0,hi[0]=P),x[_.moveUp]&&(b=!0,hi[1]=P),x[_.moveDown]&&(b=!0,hi[1]=-P),y||b?(this.#hr+=.1,this.#hr>this.#cr&&(this.#hr=this.#cr)):(this.#hr+=-.1,this.#hr<0&&(this.#hr=0)),y&&(this.#dr+=T,this.#mr+=w),b||y}},Camera2D:Camera2D,ObitController:class extends AController{#e;#a;#xr=0;#_r=0;#vr=0;#br=15;#yr=2;#Tr=.1;#ur=3;#lr=.1;#Sr=-35;#wr=-90;#Mr=90;#Rr=0;#Cr=0;#Pr=0;#Er=0;#Ir=new Set;#Br=-1;constructor(i){super(),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let x,_;const findTargetView=m=>{const{x:g,y:x}=this.getCanvasEventPoint(m,i);let _,b;_=g*window.devicePixelRatio*i.renderScale,b=x*window.devicePixelRatio*i.renderScale;for(const i of this.#Ir){const m=i.pixelRectObject;if(m.x<_&&_<m.x+m.width&&m.y<b&&b<m.y+m.height)return i}return null};x=0,_=0;const HD_Move=m=>{if(!fi)return;const{x:g,y:b}=this.getCanvasEventPoint(m,i),y=g-x,T=b-_;x=g,_=b,this.#Rr-=y*this.#ur*.1,this.#Sr-=T*this.#ur*.1},HD_up=()=>{fi=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{const b=findTargetView(m);if(!b)return;fi=b;const{x:y,y:T}=this.getCanvasEventPoint(m,i);x=y,_=T,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)}),i.htmlCanvas.addEventListener("wheel",i=>{findTargetView(i)&&(this.#br+=i.deltaY/100*this.#yr)})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get centerX(){return this.#xr}set centerX(i){this.#xr=i}get centerY(){return this.#_r}set centerY(i){this.#_r=i}get centerZ(){return this.#vr}set centerZ(i){this.#vr=i}get distance(){return this.#br}set distance(i){validateNumberRange(i,0),this.#br=i}get speedDistance(){return this.#yr}set speedDistance(i){validateNumberRange(i,.01),this.#yr=i}get delayDistance(){return this.#Tr}set delayDistance(i){validateNumberRange(i,.01,1),this.#Tr=i}get speedRotation(){return this.#ur}set speedRotation(i){validateNumberRange(i,.01),this.#ur=i}get delayRotation(){return this.#lr}set delayRotation(i){validateNumberRange(i,.01,1),this.#lr=i}get minTilt(){return this.#wr}set minTilt(i){validateNumberRange(i,-90,90),this.#wr=i}get maxTilt(){return this.#Mr}set maxTilt(i){validateNumberRange(i,-90,90),this.#Mr=i}get pan(){return this.#Rr}set pan(i){this.#Rr=i}get tilt(){return this.#Sr}set tilt(i){validateNumberRange(i,-90,90),this.#Sr=i}update(i,m){this.#Br!==m&&(this.#Br=m,this.#Ir.clear()),this.#Ir.add(i),1===this.#Ir.size&&this.#Lr()}#Lr(){const i=Math.PI/180;this.#Sr<this.#wr&&(this.#Sr=this.#wr),this.#Sr>this.#Mr&&(this.#Sr=this.#Mr);const{camera:m}=this;this.#Cr+=(this.#Rr-this.#Cr)*this.#lr,this.#Pr+=(this.#Sr-this.#Pr)*this.#lr,this.#br<m.nearClipping&&(this.#br=m.nearClipping),this.#Er+=(this.#br-this.#Er)*this.#Tr,this.#Er<m.nearClipping&&(this.#Er=m.nearClipping);const g=m.modelMatrix;identity$2(g),translate$1(g,g,[this.#xr,this.#_r,this.#vr]),rotateY$3(g,g,this.#Cr*i),rotateX$3(g,g,this.#Pr*i),translate$1(g,g,[0,0,this.#Er]),m.x=g[12],m.y=g[13],m.z=g[14],this.camera.lookAt(this.#xr,this.#_r,this.#vr)}},OrthographicCamera:OrthographicCamera,PerspectiveCamera:PerspectiveCamera});class RedGPUContextSizeManager{#Dr;#Ur;#b;#Ar=[0,0,0,0];#kr;#Or=1;constructor(i,m="100%",g="100%"){this.#b=i,this.#kr=i.htmlCanvas,this.#kr.style.boxSizing="border-box",this.#Dr=m,this.#Ur=g}get renderScale(){return this.#Or}set renderScale(i){validateNumber(i),i<=0&&(i=.01),this.#Or=i,this.setSize()}get width(){return this.#Dr}set width(i){this.setSize(i,this.#Ur)}get height(){return this.#Ur}set height(i){this.setSize(this.#Dr,i)}get pixelRectArray(){return this.#Ar}get pixelRectObject(){return{x:this.#Ar[0],y:this.#Ar[1],width:this.#Ar[2],height:this.#Ar[3]}}get parentDomRect(){return(this.#kr.parentNode||document.body).getBoundingClientRect()}get screenRectObject(){return{x:this.#Ar[0]/devicePixelRatio,y:this.#Ar[1]/devicePixelRatio,width:this.#Ar[2]/devicePixelRatio,height:this.#Ar[3]/devicePixelRatio}}static validateSizeValue=i=>{switch(typeof i){case"number":validatePositiveNumberRange(i);break;case"string":new RegExp(/^[+]?^[.]?(\d+)(\.\d+)?(?:px|%|$)/gm).test(i)||consoleAndThrowError(`allow positive number,%,px model/input:${i}`);break;default:consoleAndThrowError(`positive number,%,px model/input:${i}`)}};static validatePositionValue=i=>{switch(typeof i){case"number":validateNumber(i);break;case"string":new RegExp(/^-?\d+(\.\d+)?(px|%)?$/).test(i)||consoleAndThrowError(`allow number,%,px model /input:${i}`);break;default:consoleAndThrowError(`number,%,px model/input:${i}`)}};static getPixelDimension(i,m,g){return"number"==typeof g?g:RedGPUContextSizeManager.calculateSizeFromString(i,m,g)}static calculateSizeFromString(i,m,g){return g.includes("%")?Math.floor(i[m]*+g.replace("%","")/100):+g.replace("px","")}setSize(i=this.#Dr,m=this.#Ur){RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#Dr=i,this.#Ur=m;const g=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"width",i),x=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"height",m);this.#Fr(g,x),this.#Nr(g,x),this.#Gr()}#Nr(i,m){this.#Ar[2]=Math.floor(i*this.#Or*window.devicePixelRatio),this.#Ar[3]=Math.floor(m*this.#Or*window.devicePixelRatio)}#Gr(){this.#b.onResize&&this.#b.onResize(this.screenRectObject.width,this.screenRectObject.height),this.#b.viewList.forEach(i=>{i.setSize(),i.setPosition()})}#Fr(i,m){const g=this.#kr,{style:x}=g;g.width=i*this.#Or*window.devicePixelRatio,g.height=m*this.#Or*window.devicePixelRatio,x.width=`${i}px`,x.height=`${m}px`}}class PassClusterLightBound{#Vr;#Hr;#zr;#$r;#qr;#b;constructor(i,m){validateRedGPUContext(i),this.#b=i,this.#Vr=m,this.#Kr()}get clusterBoundBuffer(){return this.#Hr}render(){const i=this.#Vr.systemUniform_Vertex_UniformBindGroup;if(i){const{gpuDevice:m}=this.#b,g=m.createCommandEncoder(),x=g.beginComputePass({label:"Bound cluster"}),_=ur.getDispatchSize();x.setPipeline(this.#qr),x.setBindGroup(0,i),x.setBindGroup(1,this.#$r),x.dispatchWorkgroups(_[0],_[1],_[2]),x.end(),m.queue.submit([g.finish()])}}#Kr(){const{gpuDevice:i,resourceManager:m}=this.#b,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage,read_write> clusterLight_Clusters:ClusterLight_Clusters;\nfn lineIntersectionToZPlane(a:vec3<f32>,b:vec3<f32>,zDistance:f32) -> vec3<f32> {let normal=vec3<f32>(0.0,0.0,0.5);let ab=b - a;let t=(zDistance - dot(normal,a))/dot(normal,ab);return a + t * ab;\n}\nfn clipToView(clip:vec4<f32>) -> vec4<f32> {let view=systemUniforms.inverseProjectionMatrix * clip;return view/vec4<f32>(view.w,view.w,view.w,view.w);\n}\nfn screen2View(screen:vec4<f32>) -> vec4<f32> {let texCoord=screen.xy/systemUniforms.resolution.xy;let clip=vec4<f32>(vec2<f32>(texCoord.x,1.0 - texCoord.y) * 2.0 - vec2<f32>(1.0,1.0),screen.z,screen.w );return clipToView(clip);\n}\nconst eyePos=vec3<f32>(0.0);\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) {let tileIndex=global_id.x +global_id.y * clusterLight_tileCount.x +global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y;let tileSize=vec2<f32>(systemUniforms.resolution.x/f32(clusterLight_tileCount.x),systemUniforms.resolution.y/f32(clusterLight_tileCount.y));let global_id_x_pos_one=vec2<f32>(f32(global_id.x + 1u),f32(global_id.y + 1u)) * tileSize;let global_id_x_y=vec2<f32>(f32(global_id.x),f32(global_id.y)) * tileSize;let maxPoint_sS=vec4<f32>(global_id_x_pos_one,0.0,1.0);let minPoint_sS=vec4<f32>(global_id_x_y,0.0,1.0);let maxPoint_vS=screen2View(maxPoint_sS).xyz;let minPoint_vS=screen2View(minPoint_sS).xyz;let nearFarX=systemUniforms.camera.nearClipping;let nearFarY=systemUniforms.camera.farClipping;let tileZ=f32(global_id.z)/f32(clusterLight_tileCount.z);let tileZ_plus_one=f32(global_id.z + 1u)/f32(clusterLight_tileCount.z);let tileNear=-nearFarX * pow(nearFarY/nearFarX,tileZ);let tileFar=-nearFarX * pow(nearFarY/nearFarX,tileZ_plus_one);let minPointNear=lineIntersectionToZPlane(eyePos,minPoint_vS,tileNear);let minPointFar=lineIntersectionToZPlane(eyePos,minPoint_vS,tileFar);let maxPointNear=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileNear);let maxPointFar=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileFar);let minAABB=min(min(minPointNear,minPointFar),min(maxPointNear,maxPointFar));let maxAABB=max(max(minPointNear,minPointFar),max(maxPointNear,maxPointFar));clusterLight_Clusters.cubeList[tileIndex].minAABB=vec4<f32>(minAABB,0.0);clusterLight_Clusters.cubeList[tileIndex].maxAABB=vec4<f32>(maxAABB,0.0);\n}\n").shaderSource;this.#Hr=i.createBuffer({size:32*ur.getTotalTileSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),this.#zr=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),this.#$r=i.createBindGroup({label:"clusterBoundBindGroup",layout:this.#zr,entries:[{binding:0,resource:{buffer:this.#Hr}}]}),this.#qr=i.createComputePipeline({label:"clusterBoundPipeline",layout:i.createPipelineLayout({bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),this.#zr]}),compute:{module:i.createShaderModule({code:g,label:"Cluster Bounds"}),entryPoint:"main"}})}}const mi=new Uint32Array([0,0,0,0]);class PassClustersLight{#Vr;#Wr;#Xr;#Yr;#b;constructor(i,m){validateRedGPUContext(i),this.#b=i,this.#Vr=m,this.#Kr()}get clusterLightsBuffer(){return this.#Yr}render(){const{gpuDevice:i}=this.#b,m=this.#Vr.systemUniform_Vertex_UniformBindGroup;if(m){const g=i.createCommandEncoder(),x=g.beginComputePass({label:"ClusterLight cluster"}),_=ur.getDispatchSize();this.#b.gpuDevice.queue.writeBuffer(this.clusterLightsBuffer,0,mi),x.setPipeline(this.#Xr),x.setBindGroup(0,m),x.setBindGroup(1,this.#Wr),x.dispatchWorkgroups(_[0],_[1],_[2]),x.end(),i.queue.submit([g.finish()])}}#Kr(){const{gpuDevice:i,resourceManager:m}=this.#b,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage> clusterLight_Clusters:ClusterLight_Clusters;\nfn pointLight_testSphereAABB(light:u32,tile:u32) -> bool {let targetLight=clusterLightList.lights[light];let targetTile=clusterLight_Clusters.cubeList[tile];let radius:f32=targetLight.radius;let position:vec3<f32>=targetLight.position;let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz;let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz);return squaredDistance <=(radius * radius);\n}\nfn pointLight_sqDistPointAABB(targetPoint:vec3<f32>,tile:u32,minAABB:vec3<f32>,maxAABB:vec3<f32>) -> f32 {var sqDist=0.0;for(var i=0u;i < 3u;i=i + 1u) {let v=targetPoint[i];let _minAABB=minAABB[i];let _maxAABB=maxAABB[i];if(v < _minAABB){sqDist +=(_minAABB - v) * (_minAABB - v);}if(v > _maxAABB){sqDist +=(v - _maxAABB) * (v - _maxAABB);}}return sqDist;\n}\nfn spotLight_testSphereAABB(light:u32,tile:u32) -> bool {let targetLight=clusterLightList.lights[light];let targetTile=clusterLight_Clusters.cubeList[tile];let radius:f32=targetLight.radius;let position:vec3<f32>=targetLight.position;let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz;let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz);return squaredDistance <=(radius * radius);\n}\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) {let tileIndex=global_id.x +global_id.y * clusterLight_tileCount.x +global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y;var clusterLightCount=0u;var clusterLightIndices:array<u32,REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu>;for (var i=0u;i < u32(clusterLightList.count[0]);i=i + 1u) {let lightInCluster=pointLight_testSphereAABB(i,tileIndex);if (lightInCluster) {clusterLightIndices[clusterLightCount]=i;clusterLightCount=clusterLightCount + 1u;}if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) {break;}}let spotLightStartIndex=u32(clusterLightList.count[0]);for (var i=0u;i < u32(clusterLightList.count[1]);i=i + 1u) {let actualLightIndex=spotLightStartIndex + i;let sphereTest=spotLight_testSphereAABB(actualLightIndex,tileIndex);if (sphereTest) {clusterLightIndices[clusterLightCount]=actualLightIndex;clusterLightCount=clusterLightCount + 1u;}if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) {break;}}var offset=atomicAdd(&clusterLightGroup.offset,clusterLightCount);for(var i=0u;i < clusterLightCount;i=i + 1u) {clusterLightGroup.indices[offset + i]=clusterLightIndices[i];}clusterLightGroup.lights[tileIndex].offset=offset;clusterLightGroup.lights[tileIndex].count=clusterLightCount;\n}\n").shaderSource;this.#Yr=i.createBuffer({size:ur.getClusterLightsBufferSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const x=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]});this.#Wr=i.createBindGroup({label:"clusterLightBindGroup",layout:x,entries:[{binding:0,resource:{buffer:this.#Vr.passLightClustersBound.clusterBoundBuffer}}]}),this.#Xr=i.createComputePipeline({label:"clusterLightPipeline",layout:i.createPipelineLayout({bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),x]}),compute:{module:i.createShaderModule({code:g,label:"Cluster Light"}),entryPoint:"main"}})}}class PickingEvent{pickingId;mouseX;mouseY;target;time;type;movementX=0;movementY=0;localX=0;localY=0;localZ=0;altKey=!1;ctrlKey=!1;shiftKey=!1;constructor(i,m,g,x,_,b,y){this.pickingId=i,this.mouseX=m,this.mouseY=g,this.target=x,this.time=_,this.type=b,this.altKey=y.altKey,this.ctrlKey=y.ctrlKey,this.shiftKey=y.shiftKey}}const pi={MOVE:"move",DOWN:"down",UP:"up",OVER:"over",OUT:"out",CLICK:"click"};class PickingManager{lastMouseEvent;lastMouseClickEvent;#jr;#Zr;#Jr;#Qr;#b;#Vr;#ei=[];#ti=0;#ni=0;#ri;#ii;get mouseX(){return this.#ti}set mouseX(i){this.#ti=i}get mouseY(){return this.#ni}set mouseY(i){this.#ni=i}get castingList(){return this.#ei}get pickingGPUTexture(){return this.#Jr}get pickingGPUTextureView(){return this.#Qr}get pickingDepthGPUTextureView(){return this.#Zr}resetCastingList(){this.#ei.length=0}destroy(){this.#Jr&&(this.#Jr.destroy(),this.#jr.destroy(),this.#Jr=null,this.#Qr=null,this.#jr=null,this.#Zr=null)}checkTexture(i){const{redGPUContext:m}=i;this.#Vr=i,this.#b=m,this.#Jr?.width===this.#Vr.pixelRectObject.width&&this.#Jr?.height===this.#Vr.pixelRectObject.height||(this.destroy(),this.#Jr=this.#ai(navigator.gpu.getPreferredCanvasFormat()),this.#Qr=this.#Jr.createView({label:this.#Jr.label}),this.#jr=this.#ai("depth32float"),this.#Zr=this.#jr.createView({label:this.#jr.label}))}checkEvents(i,m){this.#si(i,m),this.resetCastingList()}#ai(i){const{gpuDevice:m}=this.#b;return m.createTexture({size:[this.#Vr.pixelRectObject.width,this.#Vr.pixelRectObject.height,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,format:i,sampleCount:1,label:`pickingGPUTexture_${this.#Vr.pixelRectObject.width}x${this.#Vr.pixelRectObject.height}_${Date.now()}`})}#si=async(i,m,g=1,x=1)=>{const{gpuDevice:_}=i.redGPUContext,{pixelRectArray:b}=i,y=this.#ti,T=this.#ni;if(y<=0||y>=b[2]||T<=0||T>=b[3])return;const w=this.#oi(),P=this.#ui(_,g,x,y,T),H=await this.#li(P);P.destroy(),H?(this.#ci(H,y,T,m,w),this.#hi(H,y,T,m,w)):this.#fi(),this.lastMouseEvent=null,this.lastMouseClickEvent=null};#oi=()=>this.#ei.reduce((i,m)=>(i[m.pickingId]=m,i),{});#ui=(i,m,g,x,_)=>{const b=i.createCommandEncoder(),y=i.createBuffer({size:16*m*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),T={texture:this.#Jr,origin:{x:x,y:_,z:0}},w={buffer:y,bytesPerRow:Math.max(256,4*m*g),rowsPerImage:1},P={width:m,height:g,depthOrArrayLayers:1};return b.copyTextureToBuffer(T,w,P),i.queue.submit([b.finish()]),y};#ci=(i,m,g,x,_)=>{const b=_[i],y=this.lastMouseClickEvent?.type;if(y===pi.CLICK){const _=new PickingEvent(i,m,g,b,x,y,this.lastMouseClickEvent);this.#di(y,_)}};#hi=(i,m,g,x,_)=>{const b=_[i],y=this.lastMouseEvent?.type;if(y){const _=new PickingEvent(i,m,g,b,x,y,this.lastMouseEvent);switch(this.#ri&&(_.movementX=m-this.#ri.mouseX,_.movementY=g-this.#ri.mouseY),y){case pi.DOWN:case pi.UP:this.#di(y,_);break;case pi.MOVE:this.#mi(i,b,_)}this.#ri=_}};#mi=(i,m,g)=>{const x=this.#ri?.pickingId;x!==i?(this.#ri&&x&&x!==i&&this.#fi(),this.#ii!==m&&(this.#di(pi.OVER,g),document.body.style.cursor="pointer"),this.#ii=m):this.#di(pi.MOVE,g)};#fi=()=>{this.#ri&&this.#di(pi.OUT,this.#ri),this.#ri=null,this.#ii=null,document.body.style.cursor="default"};async#li(i){await i.mapAsync(GPUMapMode.READ);const m=new DataView(i.getMappedRange()),g="rgba8unorm"==this.#Jr.format?[0,1,2,3]:[2,1,0,3],x=m.getUint8(g[0]),_=m.getUint8(g[1]),b=m.getUint8(g[2]);return(m.getUint8(g[3])<<24|b<<16|_<<8|x)>>>0}#di(i,m){m.target.events[i]&&m.target.events[i](m)}}Object.freeze(PickingManager);var gi="struct Camera {cameraMatrix:mat4x4<f32>,cameraPosition:vec3<f32>,nearClipping:f32,farClipping:f32,fieldOfView:f32\n};\nstruct SystemUniform {projectionMatrix:mat4x4<f32>,inverseProjectionMatrix:mat4x4<f32>,projectionCameraMatrix:mat4x4<f32>,inverseProjectionCameraMatrix:mat4x4<f32>,camera:Camera,\n};\n@group(1) @binding(1) var<uniform> systemUniforms:SystemUniform;\n";const xi=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\nstruct Uniforms {useDiffuseTexture:u32,opacity:f32,useTint:u32,tint:vec4<f32>,tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> {var finalColor:vec4<f32>=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv);let alpha2D=select(finalColor.a,1.0,systemUniforms.isView3D==1u);finalColor=vec4<f32>(finalColor.rgb * alpha2D,finalColor.a * uniforms.opacity * inputData.combinedOpacity);if(uniforms.useTint==1u){finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);}if (systemUniforms.isView3D==1 && finalColor.a==0.0) {discard;}return finalColor;\n};\n");class BitmapMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"BITMAP_MATERIAL",xi,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}kn.defineByPreset(BitmapMaterial,[kn.PRESET_TEXTURE.DIFFUSE_TEXTURE,kn.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(BitmapMaterial);const _i={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DIFFERENCE:6,EXCLUSION:7};const vi=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\nstruct Uniforms {useDiffuseTexture:u32,color:vec3<f32>,emissiveColor:vec3<f32>,emissiveStrength:f32,useEmissiveTexture:u32,specularColor:vec3<f32>,specularStrength:f32,useSpecularTexture:u32,shininess:f32,useAoTexture:u32,aoStrength:f32,useAlphaTexture:u32,useNormalTexture:u32,normalScale:f32,opacity:f32,useTint:u32,tint:vec4<f32>,tintBlendMode:u32,\n};\nstruct InputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(14) receiveShadow:f32,@location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\n@group(2) @binding(3) var alphaTextureSampler:sampler;\n@group(2) @binding(4) var alphaTexture:texture_2d<f32>;\n@group(2) @binding(5) var specularTextureSampler:sampler;\n@group(2) @binding(6) var specularTexture:texture_2d<f32>;\n@group(2) @binding(7) var emissiveTextureSampler:sampler;\n@group(2) @binding(8) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(9) var aoTextureSampler:sampler;\n@group(2) @binding(10) var aoTexture:texture_2d<f32>;\n@group(2) @binding(11) var normalTextureSampler:sampler;\n@group(2) @binding(12) var normalTexture:texture_2d<f32>;\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> {let u_ambientLight=systemUniforms.ambientLight;let u_ambientLightColor=u_ambientLight.color;let u_ambientLightIntensity=u_ambientLight.intensity;let u_directionalLightCount=systemUniforms.directionalLightCount;let u_directionalLights=systemUniforms.directionalLights;let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize;let u_bias=systemUniforms.bias;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_color=uniforms.color;let u_aoStrength=uniforms.aoStrength;let u_emissiveColor=uniforms.emissiveColor;let u_emissiveStrength=uniforms.emissiveStrength;let u_normalScale=uniforms.normalScale;let u_specularColor=uniforms.specularColor;let u_specularStrength=uniforms.specularStrength;let u_shininess=uniforms.shininess;let u_opacity=uniforms.opacity;let E=normalize(u_cameraPosition);let u_useDiffuseTexture=uniforms.useDiffuseTexture==1;let u_useAlphaTexture=uniforms.useAlphaTexture==1;let u_useSpecularTexture=uniforms.useSpecularTexture==1;let u_useEmissiveTexture=uniforms.useEmissiveTexture==1;let u_useAoTexture=uniforms.useAoTexture==1;let u_useNormalTexture=uniforms.useNormalTexture==1;let receiveShadowYn=inputData.receiveShadow !=.0;var N=normalize(inputData.vertexNormal);if(u_useNormalTexture){let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,inputData.uv).rgb;N=perturb_normal( N,inputData.vertexPosition,inputData.uv,normalSamplerColor,u_normalScale );}else{N=N * u_normalScale;}var finalColor:vec4<f32>;var resultAlpha:f32=u_opacity * inputData.combinedOpacity;var diffuseColor:vec3<f32>=u_color;if(u_useDiffuseTexture){let diffuseSampleColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv);diffuseColor=diffuseSampleColor.rgb;resultAlpha=resultAlpha * diffuseSampleColor.a;}var specularSamplerValue:f32=1;if(u_useSpecularTexture){specularSamplerValue=textureSample(specularTexture,specularTextureSampler,inputData.uv).r;}var mixColor:vec3<f32>;var visibility:f32=1.0;visibility=calcDirectionalShadowVisibility(directionalShadowMap,directionalShadowMapSampler,u_shadowDepthTextureSize,u_bias,inputData.shadowPos,);if(!receiveShadowYn){visibility=1.0;}for (var i=0u;i < u_directionalLightCount;i=i + 1) {let u_directionalLightDirection=u_directionalLights[i].direction;let u_directionalLightColor=u_directionalLights[i].color;let u_directionalLightIntensity=u_directionalLights[i].intensity;let L=normalize(u_directionalLightDirection);let R=reflect(L,N);let lambertTerm=max(dot(N,-L),0.0);let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue;let lightContribution=u_directionalLightColor * u_directionalLightIntensity * visibility;let ld=diffuseColor * lightContribution * lambertTerm;let ls=u_specularColor * u_specularStrength * lightContribution * specular;mixColor +=ld + ls;}let clusterIndex=getClusterLightClusterIndex(inputData.position);let lightOffset=clusterLightGroup.lights[clusterIndex].offset;let lightCount:u32=clusterLightGroup.lights[clusterIndex].count;for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) {let i=clusterLightGroup.indices[lightOffset + lightIndex];let u_clusterLightPosition=clusterLightList.lights[i].position;let u_clusterLightColor=clusterLightList.lights[i].color;let u_clusterLightIntensity=clusterLightList.lights[i].intensity;let u_clusterLightRadius=clusterLightList.lights[i].radius;let u_isSpotLight=clusterLightList.lights[i].isSpotLight;let lightDir=u_clusterLightPosition - inputData.vertexPosition;let lightDistance=length(lightDir);if (lightDistance > u_clusterLightRadius) {continue;}let L=normalize(lightDir);let attenuation=clamp(1.0 - (lightDistance * lightDistance)/(u_clusterLightRadius * u_clusterLightRadius),0.0,1.0);var finalAttenuation=attenuation;if (u_isSpotLight > 0.0) {let u_clusterLightDirection=normalize(vec3<f32>(clusterLightList.lights[i].directionX,clusterLightList.lights[i].directionY,clusterLightList.lights[i].directionZ));let u_clusterLightInnerAngle=clusterLightList.lights[i].innerCutoff;let u_clusterLightOuterCutoff=clusterLightList.lights[i].outerCutoff;let lightToVertex=normalize(-lightDir);let cosTheta=dot(lightToVertex,u_clusterLightDirection);let cosOuter=cos(radians(u_clusterLightOuterCutoff));let cosInner=cos(radians(u_clusterLightInnerAngle));if (cosTheta < cosOuter) {continue;}let epsilon=cosInner - cosOuter;let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0);finalAttenuation *=spotIntensity;}let R=reflect(-L,N);let diffuse=diffuseColor * max(dot(N,L),0.0);let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue;let diffuseAttenuation=finalAttenuation;let specularAttenuation=finalAttenuation * finalAttenuation;let ld=u_clusterLightColor * diffuse * diffuseAttenuation * u_clusterLightIntensity;let ls=u_specularColor * u_specularStrength * specular * specularAttenuation * u_clusterLightIntensity;mixColor +=ld + ls;}if(u_useAlphaTexture){let alphaMapValue:f32=textureSample(alphaTexture,alphaTextureSampler,inputData.uv).r;resultAlpha=alphaMapValue * resultAlpha;if(resultAlpha==0){discard;}}var emissiveColor=u_emissiveColor * u_emissiveStrength;if(u_useEmissiveTexture){emissiveColor=textureSample(emissiveTexture,emissiveTextureSampler,inputData.uv).rgb * u_emissiveStrength;}if(u_useAoTexture){mixColor=mixColor * textureSample(aoTexture,aoTextureSampler,inputData.uv).rgb * u_aoStrength;}finalColor=vec4<f32>(mixColor + emissiveColor,resultAlpha);if(uniforms.useTint==1u){finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);}if (systemUniforms.isView3D==1 && finalColor.a==0.0) {discard;}return finalColor;\n}\n");class PhongMaterial extends ABitmapBaseMaterial{#pi;#gi=1;constructor(i,m="#fff",g){super(i,"PHONG_MATERIAL",vi,2),g&&(this.name=g),this.initGPURenderInfos(),this.color.setColorByHEX(m),this.emissiveColor.setColorByHEX(this.emissiveColor.hex),this.specularColor.setColorByHEX(this.specularColor.hex)}get displacementScale(){return this.#gi}set displacementScale(i){this.#gi=i}get displacementTexture(){return this.#pi}set displacementTexture(i){const m=this.#pi;this.#pi=i,this.updateTexture(m,i),this.dirtyPipeline=!0}}kn.defineByPreset(PhongMaterial,[kn.PRESET_COLOR_RGB.COLOR,kn.PRESET_TEXTURE.ALPHA_TEXTURE,kn.PRESET_SAMPLER.ALPHA_TEXTURE_SAMPLER,kn.PRESET_TEXTURE.AO_TEXTURE,kn.PRESET_SAMPLER.AO_TEXTURE_SAMPLER,kn.PRESET_POSITIVE_NUMBER.AO_STRENGTH,kn.PRESET_TEXTURE.DIFFUSE_TEXTURE,kn.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER,kn.PRESET_TEXTURE.EMISSIVE_TEXTURE,kn.PRESET_SAMPLER.EMISSIVE_TEXTURE_SAMPLER,kn.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,[kn.PRESET_COLOR_RGB.EMISSIVE_COLOR,"#000000"],kn.PRESET_TEXTURE.NORMAL_TEXTURE,kn.PRESET_SAMPLER.NORMAL_TEXTURE_SAMPLER,kn.PRESET_POSITIVE_NUMBER.NORMAL_SCALE,kn.PRESET_TEXTURE.SPECULAR_TEXTURE,kn.PRESET_SAMPLER.SPECULAR_TEXTURE_SAMPLER,kn.PRESET_POSITIVE_NUMBER.SPECULAR_STRENGTH,[kn.PRESET_COLOR_RGB.SPECULAR_COLOR,"#ffffff"],[kn.PRESET_POSITIVE_NUMBER.SHININESS,32]]),Object.freeze(PhongMaterial);var bi=Object.freeze({__proto__:null,ABaseMaterial:ABaseMaterial,ABitmapBaseMaterial:ABitmapBaseMaterial,BLEND_MODE:_i,BitmapMaterial:BitmapMaterial,COMPOSITE_MODE:{ADDITIVE:"additive",SOURCE_OVER:"source-over",SOURCE_IN:"source-in",SOURCE_OUT:"source-out",SOURCE_ATOP:"source-atop",DESTINATION_OVER:"destination-over",DESTINATION_IN:"destination-in",DESTINATION_OUT:"destination-out",DESTINATION_ATOP:"destination-atop"},ColorMaterial:ColorMaterial,PhongMaterial:PhongMaterial,TINT_BLEND_MODE:xr,getComputeBindGroupLayoutDescriptorFromShaderInfo:getComputeBindGroupLayoutDescriptorFromShaderInfo,getFragmentBindGroupLayoutDescriptorFromShaderInfo:getFragmentBindGroupLayoutDescriptorFromShaderInfo,getVertexBindGroupLayoutDescriptorFromShaderInfo:getVertexBindGroupLayoutDescriptorFromShaderInfo});class ASinglePassPostEffect{#xi;#_i;#vi;#bi;#yi;#Ti;#Si;#wi;#Mi;#Ri;#Ci;#Pi;#Ei;#a;#Ii;#Bi;#Li;#Di=[];#Ui=[];#Ai=16;#ki=16;#Oi=1;#Fi=!1;#b;#Ni;#Gi=[];constructor(i){this.#b=i,this.#Ni=i.antialiasingManager}get useDepthTexture(){return this.#Fi}set useDepthTexture(i){this.#Fi=i}get redGPUContext(){return this.#b}get storageInfo(){return this.#Ei}get shaderInfo(){return this.#Ni.useMSAA?this.#Ii:this.#Bi}get uniformBuffer(){return this.#Ri}get uniformsInfo(){return this.#Ci}get systemUuniformsInfo(){return this.#Pi}get WORK_SIZE_X(){return this.#Ai}set WORK_SIZE_X(i){this.#Ai=i}get WORK_SIZE_Y(){return this.#ki}set WORK_SIZE_Y(i){this.#ki=i}get WORK_SIZE_Z(){return this.#Oi}set WORK_SIZE_Z(i){this.#Oi=i}get outputTextureView(){return this.#Ui}getOutputTextureView(){return this.#Ui[this.#Ui.length-1]}clear(){this.#Di&&(this.#Di.forEach(i=>i.destroy()),this.#Di.length=0,this.#Ui.length=0)}init(i,m,g,x){this.#a=m;const{resourceManager:_}=i;this.#xi=_.createGPUShaderModule(`${m}_MSAA`,{code:g.msaa}),this.#_i=_.createGPUShaderModule(`${m}_NonMSAA`,{code:g.nonMsaa}),this.#Ii=parseWGSL(g.msaa),this.#Bi=parseWGSL(g.nonMsaa);const b=this.#Ii.storage,y=this.#Ii.uniforms;if(this.#Ei=b,this.#Ci=y.uniforms,this.#Pi=y.systemUniforms,this.#Ci){const m=new ArrayBuffer(this.#Ci.arrayBufferByteLength);this.#Ri=new UniformBuffer(i,m,`${this.constructor.name}_UniformBuffer`)}}execute(i,m,g){const x=i.createCommandEncoder(),_=x.beginComputePass();_.setPipeline(this.#Mi),_.setBindGroup(0,this.#yi),_.setBindGroup(1,this.#Ti),_.dispatchWorkgroups(Math.ceil(m/this.WORK_SIZE_X),Math.ceil(g/this.WORK_SIZE_Y)),_.end(),i.queue.submit([x.finish()])}render(i,m,g,...x){const{gpuDevice:_,antialiasingManager:b}=this.#b,{useMSAA:y}=b,T=this.#Vi(i),w=b.changedMSAA,P=this.#Hi(x),H=this.getOutputTextureView(),{redGPUContext:z}=i;if(T||w||P){const m=this.storageInfo,g=this.uniformsInfo,_=this.systemUuniformsInfo;this.#Si=[],this.#wi=[];for(const i in m){const g=m[i],{binding:_,name:b}=g;"outputTexture"!==b&&this.#Si.push({binding:_,resource:x[_]})}this.#wi.push({binding:0,resource:H}),this.shaderInfo.textures.forEach(m=>{const{name:g,binding:x}=m;"depthTexture"===g&&this.#Si.push({binding:x,resource:i.viewRenderTextureManager.depthTextureView})}),_&&this.#wi.push({binding:_.binding,resource:{buffer:i.postEffectManager.postEffectSystemUniformBuffer.gpuBuffer,offset:0,size:i.postEffectManager.postEffectSystemUniformBuffer.size}}),this.#Ri&&g&&this.#wi.push({binding:g.binding,resource:{buffer:this.#Ri.gpuBuffer,offset:0,size:this.#Ri.size}})}if(T||w||P){const i=y?this.#Ii:this.#Bi,m=y?this.#xi:this.#_i;this.#vi=z.resourceManager.getGPUBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_0_USE_MSAA_${y}`)||z.resourceManager.createBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_0_USE_MSAA_${y}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(i,0,y)),this.#bi=z.resourceManager.getGPUBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_1_USE_MSAA_${y}`)||z.resourceManager.createBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_1_USE_MSAA_${y}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(i,1,y)),this.#yi=_.createBindGroup({layout:this.#vi,entries:this.#Si}),this.#Ti=_.createBindGroup({layout:this.#bi,entries:this.#wi}),this.#Mi=_.createComputePipeline({label:`${this.#a}_COMPUTE_PIPELINE_USE_MSAA_${y}`,layout:_.createPipelineLayout({bindGroupLayouts:[this.#vi,this.#bi]}),compute:{module:m,entryPoint:"main"}}),this.#zi(x)}return this.update(performance.now()),this.execute(_,m,g),H}update(i){}updateUniform(i,m){this.uniformBuffer.writeBuffer(this.uniformsInfo.members[i],m)}#Hi(i){if(!this.#Gi||this.#Gi.length!==i.length)return!0;for(let m=0;m<i.length;m++)if(this.#Gi[m]!==i[m])return!0;return!1}#zi(i){this.#Gi=[...i]}#Vi(i){const{redGPUContext:m,viewRenderTextureManager:g}=i,{colorTexture:x}=g,{gpuDevice:_}=m,{width:b,height:y}=x,T=b!==this.#Li?.width||y!==this.#Li?.height||0===this.#Di.length;if(T){this.clear();const i=_.createTexture({size:{width:b,height:y},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`PostEffect_${this.#a}_${b}x${y}_${Date.now()}`});this.#Di.push(i),this.#Ui.push(i.createView({label:i.label}))}return this.#Li={width:b,height:y},T}}Object.freeze(ASinglePassPostEffect);const createCode=(i,m,g="",x=!1)=>{const{WORK_SIZE_X:_,WORK_SIZE_Y:b,WORK_SIZE_Z:y}=i,T=x?"texture_depth_multisampled_2d":"texture_depth_2d";return`\n${g}@group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>;${i.useDepthTexture?`@group(0) @binding(1) var depthTexture:${T}`:""};\n\t@group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>;${gi}${g?"@group(1) @binding(2) var<uniform> uniforms:Uniforms;":""}@compute @workgroup_size(${_},${b},${y})fn main ( @builtin(global_invocation_id) global_id:vec3<u32>,){${m}}`},createBasicPostEffectCode=(i,m,g="")=>({msaa:createCode(i,m,g,!0),nonMsaa:createCode(i,m,g,!1)});Object.freeze(createBasicPostEffectCode);class FXAA extends ASinglePassPostEffect{#$i=.75;#qi=.166;#Ki=.0833;constructor(i){super(i);this.init(i,"POST_EFFECT_FXAA",createBasicPostEffectCode(this,"\nlet index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\n\nvar colorC=textureLoad(sourceTexture,index);\nvar colorN=textureLoad(sourceTexture,vec2<u32>(index.x,u32(max(i32(index.y) - 1,0))));\nvar colorS=textureLoad(sourceTexture,vec2<u32>(index.x,u32(min(i32(index.y) + 1,i32(dimH - 1)))));\nvar colorW=textureLoad(sourceTexture,vec2<u32>(u32(max(i32(index.x) - 1,0)),index.y));\nvar colorE=textureLoad(sourceTexture,vec2<u32>(u32(min(i32(index.x) + 1,i32(dimW - 1))),index.y));\n\nlet lumaC=dot(colorC.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaN=dot(colorN.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaS=dot(colorS.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaW=dot(colorW.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaE=dot(colorE.rgb,vec3<f32>(0.299,0.587,0.114));\n\nlet lumaMin=min(lumaC,min(min(lumaN,lumaS),min(lumaW,lumaE)));\nlet lumaMax=max(lumaC,max(max(lumaN,lumaS),max(lumaW,lumaE)));\nlet range=lumaMax - lumaMin;\n\nlet edgeThreshold=uniforms.edgeThreshold;\nlet edgeThresholdMin=uniforms.edgeThresholdMin;\nlet subpix=uniforms.subpix;\n\nif (range < edgeThresholdMin) {\ntextureStore(outputTexture,index,colorC);\nreturn;\n}\n\nlet blurredColor=(colorN.rgb + colorS.rgb + colorW.rgb + colorE.rgb + colorC.rgb) * 0.2;\n\nlet blendAmount=min(1.0,range * 50.0 + 0.5) * subpix;\n\nlet finalColor=mix(colorC.rgb,blurredColor,blendAmount);\n\ntextureStore(outputTexture,index,vec4<f32>(finalColor,colorC.a));\n","\nstruct Uniforms {subpix:f32,edgeThreshold:f32,edgeThresholdMin:f32 \n};\n")),this.subpix=this.#$i,this.edgeThreshold=this.#qi,this.edgeThresholdMin=this.#Ki}get subpix(){return this.#$i}set subpix(i){validateNumberRange(i,0,1),this.#$i=i,this.updateUniform("subpix",i)}get edgeThreshold(){return this.#qi}set edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#qi=i,this.updateUniform("edgeThreshold",i)}get edgeThresholdMin(){return this.#Ki}set edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#Ki=i,this.updateUniform("edgeThresholdMin",i)}}Object.freeze(FXAA);class PostEffectManager{#Vr;#Wi=[];#Xi;#Yi;#ji;#Ot=16;#Ft=4;#Zi=1;#Ji;#Qi;#ea;#ta;#na;#ra;#ia;#aa;constructor(i){this.#Vr=i,this.#sa()}get postEffectSystemUniformBuffer(){return this.#ia}get view(){return this.#Vr}get effectList(){return this.#Wi}addEffect(i){this.#Wi.push(i)}addEffectAt(i){}getEffectAt(i){return this.#Wi[i]}removeEffect(i){}removeEffectAt(i){}removeAllEffect(){this.#Wi.forEach(i=>{i.clear()}),this.#Wi.length=0}render(){const{viewRenderTextureManager:i,redGPUContext:m}=this.#Vr,{antialiasingManager:g}=m,{useMSAA:x,useFXAA:_}=g,{colorTextureView:b,colorResolveTextureView:y,colorTexture:T}=i,{width:w,height:P}=T;this.#oa();const H=x?y:b;this.#Yi=this.#ua(this.#Vr,H);let z=this.#Yi;return this.#Wi.forEach(i=>{z=i.render(this.#Vr,w,P,z)}),_&&(this.#Ji||(this.#Ji=new FXAA(m)),this.#Ji.subpix=g.fxaa_subpix,z=this.#Ji.render(this.#Vr,w,P,z)),z}clear(){this.#Wi.forEach(i=>{i.clear()})}#oa(){const{inverseProjectionMatrix:i,projectionMatrix:m,rawCamera:g,redGPUContext:x,scene:_}=this.#Vr,{gpuDevice:b}=x,{modelMatrix:y,position:T}=g,w=this.#aa,P=this.#ia.gpuBuffer,H=g instanceof Camera2D,z=multiply$5(Ri,m,y);[{key:"projectionMatrix",value:m},{key:"projectionCameraMatrix",value:z},{key:"inverseProjectionMatrix",value:i},{key:"inverseProjectionCameraMatrix",value:invert$2(Ci,z)}].forEach(({key:i,value:m})=>{b.queue.writeBuffer(P,w.members[i].uniformOffset,new w.members[i].View(m))}),[{key:"cameraMatrix",value:y},{key:"cameraPosition",value:T},{key:"nearClipping",value:[H?0:g.nearClipping]},{key:"farClipping",value:[H?0:g.farClipping]},{key:"fieldOfView",value:g.fieldOfView*Math.PI/180}].forEach(({key:i,value:m})=>{b.queue.writeBuffer(P,w.members.camera.members[i].uniformOffset,new w.members.camera.members[i].View(m))})}#sa(){const{redGPUContext:i}=this.#Vr,{gpuDevice:m,width:g}=i,x=this.#la();this.#Qi=m.createShaderModule({code:x}),this.#ta=this.#ca(i),this.#na=this.#ha(m,this.#Qi,this.#ta);const _=parseWGSL(gi).uniforms.systemUniforms,b=new ArrayBuffer(_.arrayBufferByteLength);this.#aa=_,this.#ia=new UniformBuffer(i,b,"#postEffectSystemUniformBuffer")}#ua(i,m){const{redGPUContext:g,viewRenderTextureManager:x}=i,{colorTexture:_}=x,{gpuDevice:b,antialiasingManager:y}=g,{useMSAA:T,changedMSAA:w}=y,{width:P,height:H}=_,z=P!==this.#ra?.width||H!==this.#ra?.height;return z&&(this.#Xi&&(this.#Xi.destroy(),this.#Xi=null),this.#Xi=this.#fa(b,P,H),this.#ji=this.#Xi.createView({label:this.#Xi.label})),(z||w)&&(this.#ea=this.#da(g,this.#ta,m,this.#ji)),this.#ra={width:P,height:H},this.#ma(b,this.#na,this.#ea,P,H),this.#ji}#la(){return`@group(0) @binding(0) var sourceTextureSampler:sampler;@group(0) @binding(1) var sourceTexture:texture_2d<f32>;@group(0) @binding(2) var outputTexture:texture_storage_2d<rgba8unorm,write>;@compute @workgroup_size(${this.#Ot},${this.#Ft},${this.#Zi})fn main (@builtin(global_invocation_id) global_id:vec3<u32>,){let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>((f32(index.x)+0.5)/dimW,(f32(index.y)+0.5)/dimH);var color:vec4<f32>=textureSampleLevel(sourceTexture,sourceTextureSampler,uv,0);textureStore(outputTexture,index,color );};`}#ca(i){return i.resourceManager.createBindGroupLayout("POST_EFFECT_COPY_TO_STORAGE",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#fa(i,m,g){return i.createTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`PostEffect_Storage_${m}x${g}_${Date.now()}`})}#da(i,m,g,x){return i.gpuDevice.createBindGroup({layout:m,entries:[{binding:0,resource:new Sampler(i).gpuSampler},{binding:1,resource:g},{binding:2,resource:x}]})}#ha(i,m,g){return i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#ma(i,m,g,x,_){const b=i.createCommandEncoder(),y=b.beginComputePass();y.setPipeline(m),y.setBindGroup(0,g),y.dispatchWorkgroups(Math.ceil(x/this.#Ot),Math.ceil(_/this.#Ft)),y.end(),i.queue.submit([b.finish()])}}let yi,Ti,Si,wi,Mi,Ri=create$5(),Ci=create$5();Object.freeze(PostEffectManager);class RenderViewStateData{useDistanceCulling;cullingDistanceSquared;distanceCulling;num3DGroups;num3DObjects;numDrawCalls;numDirtyPipelines;numInstances;numTriangles;numPoints;viewRenderTime;viewportSize;usedVideoMemory;currentRenderPassEncoder;timestamp;frustumPlanes;prevVertexGpuBuffer;prevFragmentUniformBindGroup;dirtyVertexUniformFromMaterial={};alphaLayer=[];transparentLayer=[];particleLayer=[];instanceMeshLayer=[];render2PathLayer=[];startTime;isScene2DMode=!1;#Vr;constructor(i){this.#Vr=i}get view(){return this.#Vr}reset(i,m){if(!m||!this.#Vr)throw new Error("Invalid parameters provided");const g=this.#Vr,{useFrustumCulling:x,frustumPlanes:_}=g,{colorTexture:b,depthTexture:y}=g.viewRenderTextureManager;if(!b||!y)throw new Error("Invalid view properties");this.useDistanceCulling=g.useDistanceCulling,this.distanceCulling=g.distanceCulling,this.cullingDistanceSquared=this.distanceCulling*this.distanceCulling,this.num3DGroups=0,this.num3DObjects=0,this.numDrawCalls=0,this.numInstances=0,this.numDirtyPipelines=0,this.numTriangles=0,this.numPoints=0,this.viewRenderTime=0,this.currentRenderPassEncoder=i,this.timestamp=m,this.prevVertexGpuBuffer=null,this.prevFragmentUniformBindGroup=null,this.dirtyVertexUniformFromMaterial={},this.alphaLayer=[],this.transparentLayer=[],this.particleLayer=[],this.instanceMeshLayer=[],this.render2PathLayer=[],this.startTime=performance.now(),this.isScene2DMode=g.camera instanceof Camera2D,this.viewportSize={x:g.x,y:g.y,width:g.width,height:g.height,pixelRectArray:g.pixelRectArray};try{this.usedVideoMemory=calculateTextureByteSize({size:[b.width,b.height,b.depthOrArrayLayers],format:b.format,sampleCount:b.sampleCount,usage:b.usage})+calculateTextureByteSize({size:[y.width,y.height,y.depthOrArrayLayers],format:y.format,sampleCount:y.sampleCount,usage:y.usage})}catch(i){throw new Error("Could not calculate texture size:"+i.message)}this.frustumPlanes=x?_:null}}let Pi,Ei=create$4(),Ii=create$5(),Bi=create$5();const screenToWorld=(i,m,g)=>{const{rawCamera:x,pixelRectArray:_}=g;return yi=2*(i*window.devicePixelRatio+_[0])/_[2]-1,Ti=-2*(m*window.devicePixelRatio+_[1])/_[3]+1,Si=1,multiply$5(Bi,g.projectionMatrix,x.modelMatrix),Pi=clone$5(Bi),invert$2(Pi,Pi),Ei=fromValues$4(yi,Ti,1),identity$2(Ii),translate$1(Ii,Ii,Ei),multiply$5(Pi,Pi,Ii),Ei[0]=Pi[12],Ei[1]=Pi[13],Ei[2]=Pi[14],wi=Bi[12]*yi+Bi[13]*Ti+Bi[15],0!==wi&&(Mi=1/wi,Ei[0]/=Mi,Ei[1]/=Mi,Ei[2]/=Mi,Ei[0]=Ei[0]+x.x,Ei[1]=Ei[1]+x.y,Ei[2]=Ei[2]+x.z),[Ei[0],Ei[1],Ei[2]]};class ResourceStateIndexBuffer{static dirtyList=[];buffer;label;uuid;#$=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#$}set useNum(i){this.#$=i,ResourceStateIndexBuffer.dirtyList.push(this)}}class IndexBuffer extends ABaseBuffer{#Y;#pa=0;#He=0;#j;constructor(i,m,g=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,x=""){super(i,"managedIndexBufferState",g);const _=getCacheBufferFromResourceState(this,x);if(_)return _;x&&(this.name=x),this.changeData(m),basicRegisterResource(this,new ResourceStateIndexBuffer(this))}get gpuBuffer(){return this.#j}get size(){return this.#Y.byteLength||0}get triangleCount(){return this.#He}get indexNum(){return this.#pa}destroy(){const i=this.#j;i&&(this.#j=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}changeData(i){const{gpuDevice:m}=this;if(Array.isArray(i)&&(i=new Uint32Array(i)),this.#j){this.targetResourceManagedState.videoMemory-=this.#Y.byteLength||0;let i=this.#j;requestAnimationFrame(()=>{i.destroy()}),this.#j=null}this.#Y=i,this.#pa=i.length,this.targetResourceManagedState.videoMemory+=this.#Y.byteLength;const g={size:this.#Y.byteLength,usage:this.usage,label:this.name};this.#j=m.createBuffer(g),this.#He=this.#pa/3,m.queue.writeBuffer(this.#j,0,this.#Y)}updatePartialData(i,m){const{gpuDevice:g}=this;(i<0||i>=this.#Y.length)&&consoleAndThrowError(`Offset value is out of data bounds. Tried to access index ${i} on data of length ${this.#Y.length}`),Array.isArray(m)&&(m=new Uint32Array(m)),this.#pa=m.length,g.queue.writeBuffer(this.#j,i,m)}}Object.freeze(IndexBuffer);class Primitive{#ga;#w;#M;#R;constructor(i){validateRedGPUContext(i)}static get primitiveInterleaveStruct(){return new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},"primitiveInterleaveStruct")}get gpuRenderInfo(){return this.#ga}get vertexBuffer(){return this.#w}get indexBuffer(){return this.#M}get volume(){return this.#R||(this.#R=calculateGeometryAABB(this.#w)),this.#R}_setData(i){if(this.#w=i.vertexBuffer,this.#M=i.indexBuffer,this.#w){const{interleavedStruct:i}=this.#w;this.#ga=new GeometryGPURenderInfo([{arrayStride:i.arrayStride,attributes:i.attributes}])}}}Object.freeze(Primitive);const createPrimitiveGeometry=(i,m,g,x)=>new Geometry(i,new VertexBuffer(i,new Float32Array(m),Primitive.primitiveInterleaveStruct,void 0,`VertexBuffer_${x}`),new IndexBuffer(i,new Uint32Array(g),void 0,`IndexBuffer_${x}`));class Plane extends Primitive{#xa=function(){const i=[],m=[];return function(g,x,_,b,y,T,w,P){const H=_/2,z=b/2,$=Math.floor(y)||1,q=Math.floor(T)||1,W=$+1,ye=q+1,Ge=_/$,Ke=b/q;i.length=0,m.length=0;for(let g=0;g<ye;g++){const x=g*Ke-z,_=P?(1-g/q)*w:g/q*w;for(let b=0;b<W;b++){const y=b*Ge-H,T=b/$*w;if(i.push(y,-x,0,0,0,1,T,_),g<q&&b<$){const i=b+W*g,x=b+W*(g+1),_=b+1+W*(g+1),y=b+1+W*g;m.push(i,x,y),m.push(x,_,y)}}}return createPrimitiveGeometry(x,i,m,g)}}();constructor(i,m=1,g=1,x=1,_=1,b=1,y=!1){super(i);const T=`PRIMITIVE_PLANE_W${m}_H${g}_WS${x}_HS${_}_UV${b}_FY${y}`,w=i.resourceManager.cachedBufferState;let P=w[T];P||(P=w[T]=this.#xa(T,i,m,g,x,_,b,y)),this._setData(P)}}const Li=";box-sizing:content-box;white-space:nowrap;",Di={padding:0,background:"transparent",color:"#fff",fontFamily:"Arial",fontSize:16,fontWeight:"normal",fontStyle:"normal",letterSpacing:0,wordBreak:"keep-all",verticalAlign:"middle",textAlign:"center",lineHeight:1.4,border:"",boxShadow:"none",boxSizing:"border-box",filter:""};class ATextField extends Mesh{#_a;#va;#ba;#ya;#Ta;#Sa;#wa;#Ma=!0;#b;#Ra;#Ca=!1;constructor(i,m,g=!0){super(i),this.#b=i,this.#Ma=g,this.#wa=m,this._material=new BitmapMaterial(i,new BitmapTexture(i)),this._material.transparent=!0,this._material.diffuseTextureSampler=new Sampler(i,g?{minFilter:yr.LINEAR,magFilter:yr.LINEAR,mipmapFilter:Tr.LINEAR}:{minFilter:yr.NEAREST,magFilter:yr.NEAREST,mipmapFilter:null}),this.depthStencilState.depthWriteEnabled=!1,this.#Pa(),this.#Ea(),this.#Ia(),this.#Ba(),this.#La()}get text(){return this.#Sa}set text(i){if(this.#Sa===i)return;this.#Sa=i;const m=this.#ba.querySelector("foreignObject div"),g=this.#Da(i);this.#ya.innerHTML=g,m.innerHTML=g,this.#Ca=!0}render(i){this.#wa(this.#Ta.width,this.#Ta.height),this.#Ua(),super.render(i)}#Da(i){return i.toString().replace(/\<br\/>/gi,"<div/>")}#Pa(){"undefined"!=typeof OffscreenCanvas?this.#_a=new OffscreenCanvas(100,100):this.#_a=document.createElement("canvas"),this.#va=this.#_a.getContext("2d")}#Aa(){const i=this.#ya.getBoundingClientRect();const m=i.width+3+3,g=i.height+3+3;return{width:-2&Math.ceil(m),height:-2&Math.ceil(g),extraTop:3,extraRight:3,extraBottom:3,extraLeft:3}}#ka(){const i=this.#ba,m=i.querySelector("foreignObject"),{width:g,height:x,extraTop:_,extraRight:b,extraBottom:y,extraLeft:T}=this.#Aa();m.setAttribute("width",g.toString()),m.setAttribute("height",x.toString()),m.style.padding=`${_}px ${b}px ${y}px ${T}px`,i.setAttribute("width",g.toString()),i.setAttribute("height",x.toString()),this.#Ta.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(i.outerHTML)}#Ba(){this.#Ta=new Image,this.#Ta.style.cssText="position:absolute;bottom:0px;left:0;",this.#Ta.onload=i=>{let m,g;const{width:x,height:_}=this.#Aa(),b=(this.#Ma,2),y=this.#Ma?1:2;m=x*b,g=_*b,this.#Ta.width=m/y,this.#Ta.height=g/y,this.#_a.width=m,this.#_a.height=g,this.#_a instanceof OffscreenCanvas||(this.#_a.style.width=m/b+"px",this.#_a.style.height=g/b+"px"),this.#va.imageSmoothingEnabled=!0,this.#va.imageSmoothingQuality="high",this.#va.clearRect(0,0,m,g),this.#va.fillStyle="rgba(0,0,0,0)",this.#va.fillRect(0,0,m,g),this.#va.drawImage(this.#Ta,0,0,m,g),this.dirtyTransform=!0;const callback=i=>{this.material.diffuseTexture.src=URL.createObjectURL(i)};this.#_a instanceof OffscreenCanvas?this.#_a.convertToBlob({type:"image/png"}).then(callback):this.#_a.toBlob(callback,"image/png")}}#Ua(){this.#Ca&&(this.#Ra&&cancelAnimationFrame(this.#Ra),this.#Ra=requestAnimationFrame(()=>{this.#ka()})),this.#Ca=!1}#Oa=(i,m)=>{const g=this.#ba.querySelector("foreignObject > div").style,x=this.#ya.style,_=`_${i}`;this[_]=m,Object.defineProperty(this,i,{get:()=>this[_],set:m=>{const b=this[_];this[_]=m;const y=(i=>"number"==typeof i)(m)&&(i=>!["lineHeight","fontWeight"].includes(i))(i)?`${m}px`:m;g[i]=y,x[i]=y,b!==m&&(this.#Ca=!0)}}),this[i]=m};#Ea(){this.#ya=document.createElement("div"),this.#ya.style.cssText=Li+";position:absolute;top:200px;left:0;visibility:hidden;text-rendering:optimizeLegibility",document.body.appendChild(this.#ya)}#Ia(){const i=this.#ba=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.setAttribute("text-rendering","optimizeLegibility"),i.style.cssText="position:absolute;top:0px;left:0px;z-index:1;margin:0;padding:0;overflow:visible;background:transparent",i.innerHTML=`<rect x="0" y="0" width="100%" height="100%" fill="rgba(0,0,0,0)"/><foreignObject width="100%" height="100%" style="margin:0;padding:0;" overflow="visible"><div xmlns="http://www.w3.org/1999/xhtml" style="${Li}"></div></foreignObject>`}#La(){for(const[i,m]of Object.entries(Di))this.#Oa(i,m);this.#Ca=!0}}Object.freeze(ATextField);const Ui=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\nstruct Uniforms {useDiffuseTexture:u32,opacity:f32,useTint:u32,tint:vec4<f32>,tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> {var finalColor:vec4<f32>=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv);finalColor=vec4<f32>(finalColor.rgb/finalColor.a,finalColor.a * uniforms.opacity * inputData.combinedOpacity);if(uniforms.useTint==1u){finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);}if (finalColor.a==0.0) {discard;}return finalColor;\n};\n");class TextFieldMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"TEXT_FILED_MATERIAL",Ui,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}kn.defineByPreset(TextFieldMaterial,[kn.PRESET_TEXTURE.DIFFUSE_TEXTURE,kn.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(TextFieldMaterial);var Ai="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,useBillboardPerspective:u32,useBillboard:u32,combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main( inputData:InputData ) -> OutputData {var output:OutputData;let u_resolution=systemUniforms.resolution;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_positionVec4=vec4<f32>(input_position,1.0);let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0);let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;\nvar scaleMatrix:mat4x4<f32>;let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz);let objectPosition=input_position.xyz;let distance=length(cameraPosition - objectPosition);let scaleFactor=distance;scaleMatrix=mat4x4<f32>(10,0.0,0.0,0.0,0.0,10,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);if (u_useBillboard==1) {if (u_useBillboardPerspective==1) {} else {scaleMatrix=mat4x4<f32>(scaleFactor,0.0,0.0,0.0,0.0,scaleFactor,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);}position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0);normalPosition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(input_vertexNormal.xyz,1.0);var temp=output.position/output.position.w;output.position=vec4<f32>(temp.xy + objectPosition.xy * vec2<f32>((u_projectionMatrix * u_modelMatrix)[0][0],(u_projectionMatrix * u_modelMatrix)[1][1]),temp.zw);} else {position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0);normalPosition=u_cameraMatrix * u_normalModelMatrix * scaleMatrix * vec4<f32>(input_vertexNormal.xyz,1.0);}output.position=u_projectionMatrix * position;output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.uv=input_uv;output.combinedOpacity=vertexUniforms.combinedOpacity;return output;\n}\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let input_position=inputData.position;let input_positionVec4=vec4<f32>(input_position,1.0);let input_uv=inputData.uv;var position:vec4<f32>;var scaleMatrix:mat4x4<f32>;let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz);let objectPosition=input_position.xyz;let distance=length(cameraPosition - objectPosition);let scaleFactor=distance;scaleMatrix=mat4x4<f32>(10,0.0,0.0,0.0,0.0,10,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);if (u_useBillboard==1) {if (u_useBillboardPerspective==1) {} else {scaleMatrix=mat4x4<f32>(scaleFactor,0.0,0.0,0.0,0.0,scaleFactor,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);}position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0);var temp=output.position/output.position.w;output.position=vec4<f32>(temp.xy + objectPosition.xy * vec2<f32>((u_projectionMatrix * u_modelMatrix)[0][0],(u_projectionMatrix * u_modelMatrix)[1][1]),temp.zw);} else {position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0);}output.position=u_projectionMatrix * position;output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n";const ki=parseWGSL(Ai),Oi=ki.uniforms.vertexUniforms;class TextField3D extends ATextField{#Fa=1;#Na=1;constructor(i,m){super(i,(i,m)=>{this.#Fa=i/1024,this.#Na=m/1024}),this._geometry=new Plane(i),this._material=new TextFieldMaterial(i,new BitmapTexture(i)),this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,m&&(this.text=m)}get geometry(){return this._geometry}set geometry(i){console.error("TextField3D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField3D can not change material")}get renderTextureWidth(){return this.#Fa}get renderTextureHeight(){return this.#Na}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_3D",ki,Oi,Ai)}}Tn.defineByPreset(TextField3D,[[Tn.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],Tn.PRESET_BOOLEAN.USE_BILLBOARD]),Object.freeze(TextField3D);class ADrawDebuggerLight{#b;#Ga;#Va;get lightMaterial(){return this.#Ga}get lightDebugMesh(){return this.#Va}constructor(i,m,g=32){this.#b=i;const x=this.createLightDebugGeometry(i,g);this.#Ga=new ColorMaterial(i),this.#Ga.color.setColorByRGB(m[0],m[1],m[2]),this.#Va=new Mesh(i,x,this.#Ga),this.#Va.primitiveState.cullMode="none",this.#Va.primitiveState.topology=Mn.LINE_LIST,this.#Va.depthStencilState.depthWriteEnabled=!1}createLightDebugGeometry(i,m){const g=new Float32Array(2*m*8),x=new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},`lightDebugStruct_${Math.random()}`),_=new VertexBuffer(i,g,x);return new Geometry(i,_)}updateVertexBuffer(i,m){const g=m.data;let x=0;const _=Math.min(i.length,Math.floor(g.length/16));for(let m=0;m<_;m++){const[_,b]=i[m];g[x++]=_[0],g[x++]=_[1],g[x++]=_[2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0,g[x++]=b[0],g[x++]=b[1],g[x++]=b[2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0}m.updateAllData(g)}}class DrawDebuggerPointLight extends ADrawDebuggerLight{#$e;#Ha;constructor(i,m){super(i,[0,255,255],51),this.#$e=m,this.#Ha=new TextField3D(i),this.#Ha.useBillboard=!0,this.#Ha.fontSize=40,this.#Ha.text="💡",this.lightDebugMesh.addChild(this.#Ha)}#za(i,m){const g=i.position||[0,0,0],x=i.radius||1,_=16,b=[];for(let i=0;i<_;i++){const m=i/_*Math.PI*2,y=(i+1)/_*Math.PI*2,T=g[0]+Math.cos(m)*x,w=g[1]+Math.sin(m)*x,P=g[2],H=g[0]+Math.cos(y)*x,z=g[1]+Math.sin(y)*x,$=g[2];b.push([[T,w,P],[H,z,$]])}for(let i=0;i<_;i++){const m=i/_*Math.PI*2,y=(i+1)/_*Math.PI*2,T=g[0]+Math.cos(m)*x,w=g[1],P=g[2]+Math.sin(m)*x,H=g[0]+Math.cos(y)*x,z=g[1],$=g[2]+Math.sin(y)*x;b.push([[T,w,P],[H,z,$]])}for(let i=0;i<_;i++){const m=i/_*Math.PI*2,y=(i+1)/_*Math.PI*2,T=g[0],w=g[1]+Math.cos(m)*x,P=g[2]+Math.sin(m)*x,H=g[0],z=g[1]+Math.cos(y)*x,$=g[2]+Math.sin(y)*x;b.push([[T,w,P],[H,z,$]])}const y=.2*x;b.push([[g[0]-y,g[1],g[2]],[g[0]+y,g[1],g[2]]]),b.push([[g[0],g[1]-y,g[2]],[g[0],g[1]+y,g[2]]]),b.push([[g[0],g[1],g[2]-y],[g[0],g[1],g[2]+y]]),this.updateVertexBuffer(b,m)}render(i){this.#$e.enableDebugger&&(this.#za(this.#$e,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#Ha.setPosition(...this.#$e.position))}}Object.freeze(DrawDebuggerPointLight);class DrawDebuggerSpotLight extends ADrawDebuggerLight{#$e;#Ha;constructor(i,m){super(i,[255,255,0],80),this.#$e=m,this.#Ha=new TextField3D(i),this.#Ha.useBillboard=!0,this.#Ha.fontSize=40,this.#Ha.text="🔦",this.lightDebugMesh.addChild(this.#Ha)}#$a(i,m){const g=i.position||[0,0,0],x=i.direction||[0,-1,0],_=i.radius||5,b=i.outerCutoff||22.5,y=i.innerCutoff||15,T=[],w=Math.sqrt(x[0]*x[0]+x[1]*x[1]+x[2]*x[2]),P=[x[0]/w,x[1]/w,x[2]/w],H=[g[0]+P[0]*_,g[1]+P[1]*_,g[2]+P[2]*_],z=_*Math.tan(b*Math.PI/180),$=_*Math.tan(y*Math.PI/180);let q=[0,1,0];Math.abs(P[1])>.99&&(q=[1,0,0]);const W=[P[1]*q[2]-P[2]*q[1],P[2]*q[0]-P[0]*q[2],P[0]*q[1]-P[1]*q[0]],ye=Math.sqrt(W[0]*W[0]+W[1]*W[1]+W[2]*W[2]),Ge=[W[0]/ye,W[1]/ye,W[2]/ye],Ke=[Ge[1]*P[2]-Ge[2]*P[1],Ge[2]*P[0]-Ge[0]*P[2],Ge[0]*P[1]-Ge[1]*P[0]],Xe=16;for(let i=0;i<Xe;i++){const m=i/Xe*Math.PI*2,x=(i+1)/Xe*Math.PI*2,_=Math.cos(m),b=Math.sin(m),y=Math.cos(x),w=Math.sin(x),P=[H[0]+(Ge[0]*_+Ke[0]*b)*z,H[1]+(Ge[1]*_+Ke[1]*b)*z,H[2]+(Ge[2]*_+Ke[2]*b)*z],$=[H[0]+(Ge[0]*y+Ke[0]*w)*z,H[1]+(Ge[1]*y+Ke[1]*w)*z,H[2]+(Ge[2]*y+Ke[2]*w)*z];T.push([P,$]),T.push([g,P])}for(let i=0;i<Xe;i++){const m=i/Xe*Math.PI*2,g=(i+1)/Xe*Math.PI*2,x=Math.cos(m),_=Math.sin(m),b=Math.cos(g),y=Math.sin(g),w=[H[0]+(Ge[0]*x+Ke[0]*_)*$,H[1]+(Ge[1]*x+Ke[1]*_)*$,H[2]+(Ge[2]*x+Ke[2]*_)*$],P=[H[0]+(Ge[0]*b+Ke[0]*y)*$,H[1]+(Ge[1]*b+Ke[1]*y)*$,H[2]+(Ge[2]*b+Ke[2]*y)*$];T.push([w,P])}T.push([g,H]);const Ye=.3;T.push([[g[0]-Ye,g[1],g[2]],[g[0]+Ye,g[1],g[2]]]),T.push([[g[0],g[1]-Ye,g[2]],[g[0],g[1]+Ye,g[2]]]),T.push([[g[0],g[1],g[2]-Ye],[g[0],g[1],g[2]+Ye]]);for(let i=0;i<4;i++){const m=i/4*Math.PI*2,x=Math.cos(m),_=Math.sin(m),b=[H[0]+(Ge[0]*x+Ke[0]*_)*z,H[1]+(Ge[1]*x+Ke[1]*_)*z,H[2]+(Ge[2]*x+Ke[2]*_)*z];T.push([g,b])}this.updateVertexBuffer(T,m)}render(i){this.#$e.enableDebugger&&(this.#$a(this.#$e,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#Ha.setPosition(...this.#$e.position))}}Object.freeze(DrawDebuggerSpotLight);class Box extends Primitive{#xa=function(){let i,m;return m=function(m,g,x,_,b,y,T,w,P,H,z,$,q){let W,ye,Ge=w/z,Ke=P/$,Xe=w/2,Ye=P/2,je=H/2,Ze=z+1,Je=$+1,Qe=0,et=[];for(ye=0;ye<Je;ye++){let i=ye*Ke-Ye;for(W=0;W<Ze;W++){let g=W*Ge-Xe;et[x]=g*y,et[_]=i*T,et[b]=je,m.push(et.x,et.y,et.z),et[x]=0,et[_]=0,et[b]=H>0?1:-1,m.push(et.x,et.y,et.z),m.push(W/z*q,ye/$*q),Qe+=1}}for(ye=0;ye<$;ye++)for(W=0;W<z;W++){let m=i+W+Ze*ye,x=i+W+Ze*(ye+1),_=i+(W+1)+Ze*(ye+1),b=i+(W+1)+Ze*ye;g.push(m,x,b,x,_,b)}i+=Qe},function(g,x,_,b,y,T,w,P,H){let z=[],$=[];return i=0,m(z,$,"z","y","x",-1,-1,y,b,_,P,w,H),m(z,$,"z","y","x",1,-1,y,b,-_,P,w,H),m(z,$,"x","z","y",1,1,_,y,b,T,P,H),m(z,$,"x","z","y",1,-1,_,y,-b,T,P,H),m(z,$,"x","y","z",1,-1,_,b,y,T,w,H),m(z,$,"x","y","z",-1,-1,_,b,-y,T,w,H),createPrimitiveGeometry(x,z,$,g)}}();constructor(i,m=1,g=1,x=1,_=1,b=1,y=1,T=1){super(i);const w=`PRIMITIVE_BOX_W${m}_H${g}_D${x}_WS${_}_HS${b}_DS${y}_UV${T}`,P=i.resourceManager.cachedBufferState;let H=P[w];H||(H=P[w]=this.#xa(w,i,m,g,x,_,b,y,T)),this._setData(H)}}class Cylinder extends Primitive{#xa=function(){let i,m;return function(g,x,_,b,y,T,w,P,H,z){const $=[],q=[];let W=0;const ye=[],Ge=y/2;return i=function(){let i,m;const g=[],x=[],P=(b-_)/y;for(m=0;m<=w;m++){const q=[],Ke=m/w,Xe=Ke*(b-_)+_;for(i=0;i<=T;i++){const m=i/T,_=m*z+H,b=Math.sin(_),w=Math.cos(_);x[0]=Xe*b,x[1]=-Ke*y+Ge,x[2]=Xe*w,$.push(x[0],x[1],x[2]),g[0]=b,g[1]=P,g[2]=w,normalize$4(g,g),$.push(g[0],g[1],g[2]),$.push(m,Ke),q.push(W++)}ye.push(q)}for(i=0;i<T;i++)for(m=0;m<w;m++){const g=ye[m][i],x=ye[m+1][i],_=ye[m+1][i+1],b=ye[m][i+1];q.push(g,x,b),q.push(x,_,b)}},m=function(i){let m,g,x;const y=[],w=[],P=!0===i?_:b,ye=!0===i?1:-1;for(g=W,m=1;m<=T;m++)$.push(0,Ge*ye,0),$.push(0,ye,0),$.push(.5,.5),W++;for(x=W,m=0;m<=T;m++){const i=m/T*z+H,g=Math.cos(i),x=Math.sin(i);w[0]=P*x,w[1]=Ge*ye,w[2]=P*g,$.push(w[0],w[1],w[2]),$.push(0,ye,0),y[0]=.5*g+.5,y[1]=.5*x*ye+.5,$.push(y[0],1-y[1]),W++}for(m=0;m<T;m++){const _=g+m,b=x+m;!0===i?q.push(b,b+1,_):q.push(b+1,b,_)}},i(),!1===P&&(_>0&&m(!0),b>0&&m(!1)),createPrimitiveGeometry(x,$,q,g)}}();constructor(i,m=1,g=1,x=1,_=8,b=8,y=!1,T=0,w=2*Math.PI){super(i);const P=`PRIMITIVE_CYLINDER_RT${m}_RB${g}_H${x}_RS${_}_HS${b}_TS${y}_TS${T}_TL${w}`,H=i.resourceManager.cachedBufferState;let z=H[P];z||(z=H[P]=this.#xa(P,i,m,g,x,_,b,y,T,w)),this._setData(z)}}class Sphere extends Primitive{#xa=function(){let i,m,g,x,_,b,y,T,w=[],P=new Float32Array([0,0,0]),H=new Float32Array([0,0,0]);return function(z,$,q,W,ye,Ge,Ke,Xe,Ye,je){i=Xe+Ye,x=0,w.length=0,P[0]=0,P[1]=0,P[2]=0,H[0]=0,H[1]=0,H[2]=0;let Ze=[],Je=[];for(g=0;g<=ye;g++){let i=[],_=g/ye;for(m=0;m<=W;m++){let g=m/W;P.x=-q*Math.cos(Ge+g*Ke)*Math.sin(Xe+_*Ye),P.y=q*Math.cos(Xe+_*Ye),P.z=q*Math.sin(Ge+g*Ke)*Math.sin(Xe+_*Ye),Ze.push(P.x,P.y,P.z),H[0]=P.x,H[1]=P.y,H[2]=P.z,normalize$4(H,H),Ze.push(H[0],H[1],H[2]),Ze.push(g*je,_*je),i.push(x++)}w.push(i)}for(g=0;g<ye;g++)for(m=0;m<W;m++)_=w[g][m+1],b=w[g][m],y=w[g+1][m],T=w[g+1][m+1],(0!==g||Xe>0)&&Je.push(_,b,T),(g!==ye-1||i<Math.PI)&&Je.push(b,y,T);return createPrimitiveGeometry($,Ze,Je,z)}}();constructor(i,m=1,g=16,x=16,_=0,b=2*Math.PI,y=0,T=Math.PI,w=1){super(i);const P=`PRIMITIVE_SPHERE_R${m}_WS${g}_HS${x}_PS${_}_PL${b}_TS${y}_TL${T}_UV${w}`,H=i.resourceManager.cachedBufferState;let z=H[P];z||(z=H[P]=this.#xa(P,i,m,g,x,_,b,y,T,w)),this._setData(z)}}class DrawDebuggerAxis extends Mesh{constructor(i){super(i,null,null);const m=new Mesh(i,new Sphere(i,.5),new ColorMaterial(i));this.addChild(m);const g=new Box(i);this.addChild(this.#qa(g,"#ff0000",[5,.1,.1],[2.5,0,0])),this.addChild(this.#Ka(i,"#ff0000",[.5,1.25],[5.5,0,0],[0,0,-90])),this.addChild(this.#qa(g,"#00ff00",[.1,5,.1],[0,2.5,0])),this.addChild(this.#Ka(i,"#00ff00",[.5,1.25],[0,5.5,0],[180,0,0])),this.addChild(this.#qa(g,"#0000ff",[.1,.1,5],[0,0,2.5])),this.addChild(this.#Ka(i,"#0000ff",[.5,1.25],[0,0,5.5],[90,0,0]))}#qa(i,m,g,x){const{redGPUContext:_}=this,b=new Mesh(_,i,new ColorMaterial(_,m));return b.setScale(...g),b.setPosition(...x),b}#Ka(i,m,g,x,_){const b=new Mesh(i,new Cylinder(i,g[0],.001,g[1],32,1),new ColorMaterial(i,m));return b.setScale(g[0],g[1],g[0]),b.setPosition(...x),b.setRotation(..._),b}}var Fi="#redgpu_include SYSTEM_UNIFORM;\nstruct VertexIn {@location(0) pos:vec4<f32>,@location(1) uv:vec2<f32>,\n}\nstruct VertexOut {@builtin(position) pos:vec4<f32>,@location(0) uv:vec2<f32>,\n}\n@vertex\nfn vertexMain(in:VertexIn) -> VertexOut {var out:VertexOut;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;out.pos=u_projectionMatrix * u_cameraMatrix * in.pos;out.uv=in.uv;return out;\n}\nfn PristineGrid(uv:vec2<f32>,lineWidth:vec2<f32>) -> f32 {let uvDDXY=vec4<f32>(dpdx(uv),dpdy(uv));let uvDeriv=vec2<f32>(length(uvDDXY.xz),length(uvDDXY.yw));let invertLine:vec2<bool>=lineWidth > vec2f(0.5);let targetWidth:vec2<f32>=select(lineWidth,1 - lineWidth,invertLine);let drawWidth:vec2<f32>=clamp(targetWidth,uvDeriv,vec2f(0.5));let lineAA:vec2<f32>=uvDeriv * 1.5;var gridUV:vec2<f32>=abs(fract(uv) * 2.0 - 1.0);gridUV=select(1 - gridUV,gridUV,invertLine);var grid2:vec2<f32>=smoothstep(drawWidth + lineAA,drawWidth - lineAA,gridUV);grid2 *=saturate(targetWidth/drawWidth);grid2=mix(grid2,targetWidth,saturate(uvDeriv * 2.0 - 1.0));grid2=select(grid2,1.0 - grid2,invertLine);return mix(grid2.x,1.0,grid2.y);\n}\nstruct GridArgs {lineColor:vec4<f32>,baseColor:vec4<f32>,lineWidth:vec2<f32>,size:f32,distance:f32,\n}\n@group(1) @binding(0) var<uniform> gridArgs:GridArgs;\n@fragment\nfn fragmentMain(in:VertexOut) -> @location(0) vec4<f32> {var lineWidthWeight:f32=1;var color:vec4<f32>=gridArgs.lineColor;let DIVISION_SIZE:f32=gridArgs.size;let ASIX_SIZE:f32=max(DIVISION_SIZE * gridArgs.lineWidth.x,DIVISION_SIZE/20);let HALF_DIVISION_SIZE:f32=DIVISION_SIZE * 0.5;let PER_SIZE:f32=1/DIVISION_SIZE * ASIX_SIZE;let MIN_RANGE=HALF_DIVISION_SIZE - PER_SIZE;let MAX_RANGE=HALF_DIVISION_SIZE + PER_SIZE;if( MIN_RANGE <=in.uv.x && in.uv.x <=MAX_RANGE) {color=vec4<f32>(0,0,1,1);lineWidthWeight=ASIX_SIZE;}else if( MIN_RANGE <=in.uv.y && in.uv.y <=MAX_RANGE) {color=vec4<f32>(1,0,0,1);lineWidthWeight=ASIX_SIZE;}var grid=PristineGrid(in.uv,gridArgs.lineWidth * lineWidthWeight);return mix(gridArgs.baseColor,color,grid * gridArgs.lineColor.a);\n;\n}\n";const Ni=parseWGSL(Fi),Gi=Ni.uniforms.gridArgs;class DrawDebuggerGrid{#w;#M;#Ri;#Wa;#fe;#Xa;#xe;#_e;#Ya;#X=100;#e;#a;#ja=1;constructor(i){validateRedGPUContext(i),this.#e=InstanceIdGenerator.getNextId(this.constructor);const{resourceManager:m,gpuDevice:g}=i,x={code:Fi},_=m.createGPUShaderModule("VERTEX_MODULE_GRID",x);this.#xe=new BlendState(this,fr.ONE,fr.ONE_MINUS_SRC_ALPHA,dr.ADD),this.#_e=new BlendState(this,fr.SRC_ALPHA,fr.ONE_MINUS_SRC_ALPHA,dr.ADD),this.#Ya=new ColorRGBA(128,128,128,1);const b=m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),y=i.resourceManager.getGPUBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT")||i.resourceManager.createBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Ni,1));this.#Za(i),this.#Wa=g.createBindGroup({label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_GRID",layout:y,entries:[{binding:0,resource:{buffer:this.#Ri.gpuBuffer,offset:0,size:this.#Ri.size}}]});const T={label:"PIPELINE_DESCRIPTOR_GRID",layout:g.createPipelineLayout({bindGroupLayouts:[b,y]}),vertex:{module:_,entryPoint:"vertexMain",buffers:[{arrayStride:this.#w.interleavedStruct.arrayStride,attributes:this.#w.interleavedStruct.attributes}]},fragment:{module:_,entryPoint:"fragmentMain",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.#xe.state,alpha:this.#_e.state}}]},depthStencil:{format:"depth32float",depthWriteEnabled:!1,depthCompare:Fr.LESS_EQUAL}};this.#fe=g.createRenderPipeline(T),this.#Xa=g.createRenderPipeline({...T,multisample:{count:4}})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get size(){return this.#X}set size(i){this.#X=i}get lineColor(){return this.#Ya}get lineWidth(){return this.#ja}set lineWidth(i){validatePositiveNumberRange(i),this.#ja=i}render(i){const{view:m,currentRenderPassEncoder:g}=i,x=create$4();set$4(x,m.rawCamera.x,m.rawCamera.y,m.rawCamera.z);const _=distance$2(x,[0,0,0]),b=this.#X;i.num3DObjects++,i.numDrawCalls++;const y=1/m.pixelRectObject.width*_*this.#ja;this.#Ri.writeBuffers([[Gi.members.lineColor,this.#Ya.rgbaNormal],[Gi.members.lineWidth,[y,y]],[Gi.members.size,b],[Gi.members.distance,_]]);const T=[-b/2,-0,-b/2,0,0,b/2,-0,-b/2,b,0,-b/2,-0,b/2,0,b,b/2,-0,b/2,b,b];if(this.#w.changeData(T),this.#fe){const{triangleCount:x,indexNum:_}=this.#M;g.setPipeline(m.redGPUContext.antialiasingManager.useMSAA?this.#Xa:this.#fe),g.setBindGroup(1,this.#Wa),g.setVertexBuffer(0,this.#w.gpuBuffer),g.setIndexBuffer(this.#M.gpuBuffer,"uint32"),g.drawIndexed(6),i.numTriangles+=x,i.numPoints+=_}}#Za(i){const m=this.#X,{resourceManager:g}=i,{cachedBufferState:x}=g;{const g="VertexBuffer_Grid",_=x[g],b=[-m,-0,-m,0,0,m,-0,-m,m,0,-m,-0,m,0,m,m,-0,m,m,m];x[g]=this.#w=_||new VertexBuffer(i,b,new InterleavedStruct({position:InterleaveType.float32x3,uv:InterleaveType.float32x2}),void 0,g)}{const m="IndexBuffer_Grid",g=x[m],_=[0,1,2,1,2,3];x[m]=this.#M=g||new IndexBuffer(i,_,void 0,m)}{const m="UniformBuffer_Grid",g=x[m],_=new ArrayBuffer(Gi.arrayBufferByteLength);x[m]=this.#Ri=g||new UniformBuffer(i,_)}}}class DrawDebuggerDirectionalLight extends ADrawDebuggerLight{#$e;#Ha;#Ja=[0,10,0];constructor(i,m){super(i,[255,255,0],8),this.#$e=m,this.#Ha=new TextField3D(i),this.#Ha.useBillboard=!0,this.#Ha.fontSize=40,this.#Ha.text="☀️",this.lightDebugMesh.addChild(this.#Ha)}#Qa(i,m){const g=this.#Ja,x=i.direction||[0,-1,0],_=Math.sqrt(x[0]*x[0]+x[1]*x[1]+x[2]*x[2]),b=[x[0]/_,x[1]/_,x[2]/_],y=[g[0]+3*b[0],g[1]+3*b[1],g[2]+3*b[2]],T=.3;let w=[0,1,0];Math.abs(b[1])>.99&&(w=[1,0,0]);const P=[b[1]*w[2]-b[2]*w[1],b[2]*w[0]-b[0]*w[2],b[0]*w[1]-b[1]*w[0]],H=Math.sqrt(P[0]*P[0]+P[1]*P[1]+P[2]*P[2]),z=[P[0]/H,P[1]/H,P[2]/H],$=[z[1]*b[2]-z[2]*b[1],z[2]*b[0]-z[0]*b[2],z[0]*b[1]-z[1]*b[0]],q=[[g,y],[y,[y[0]+-.5*b[0]+z[0]*T,y[1]+-.5*b[1]+z[1]*T,y[2]+-.5*b[2]+z[2]*T]],[y,[y[0]+-.5*b[0]-z[0]*T,y[1]+-.5*b[1]-z[1]*T,y[2]+-.5*b[2]-z[2]*T]],[y,[y[0]+-.5*b[0]+$[0]*T,y[1]+-.5*b[1]+$[1]*T,y[2]+-.5*b[2]+$[2]*T]],[y,[y[0]+-.5*b[0]-$[0]*T,y[1]+-.5*b[1]-$[1]*T,y[2]+-.5*b[2]-$[2]*T]],[[g[0]-.3,g[1],g[2]],[g[0]+.3,g[1],g[2]]],[[g[0],g[1]-.3,g[2]],[g[0],g[1]+.3,g[2]]],[[g[0],g[1],g[2]-.3],[g[0],g[1],g[2]+.3]]];this.updateVertexBuffer(q,m)}render(i){if(!this.#$e.enableDebugger)return;this.#Qa(this.#$e,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i);const m=this.#$e.direction,g=this.#Ja,x=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]),_=[m[0]/x,m[1]/x,m[2]/x];this.#Ha.setPosition(g[0]-0*_[0],g[1]-0*_[1],g[2]-0*_[2])}}Object.freeze(DrawDebuggerDirectionalLight);class BaseLight{#es;#ts;drawDebugger;#er=!1;get enableDebugger(){return this.#er}set enableDebugger(i){this.#er=i}constructor(i,m=1){this.#es=i,this.#ts=m}get color(){return this.#es}set color(i){this.#es=i}get intensity(){return this.#ts}set intensity(i){this.#ts=i}}Object.freeze(BaseLight);class AmbientLight extends BaseLight{constructor(i=new ColorRGB(7,7,7),m=.2){super(i,m)}}Object.freeze(AmbientLight);class DirectionalLight extends BaseLight{#ns=-1;#rs=-1;#is=-1;constructor(i=[-1,-1,-1],m="#fff",g=1){super(new ColorRGB(...convertHexToRgb(m,!0)),g),this.#ns=i[0],this.#rs=i[1],this.#is=i[2]}get directionX(){return this.#ns}set directionX(i){this.#ns=i}get directionY(){return this.#rs}set directionY(i){this.#rs=i}get directionZ(){return this.#is}set directionZ(i){this.#is=i}get direction(){return[this.#ns,this.#rs,this.#is]}set direction(i){this.#ns=i[0],this.#rs=i[1],this.#is=i[2]}}Object.freeze(DirectionalLight);class PointLight extends BaseLight{#as=1;#n=0;#r=0;#i=0;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#n}set x(i){this.#n=i}get y(){return this.#r}set y(i){this.#r=i}get z(){return this.#i}set z(i){this.#i=i}get position(){return[this.#n,this.#r,this.#i]}get radius(){return this.#as}set radius(i){this.#as=i}setPosition(i,m,g){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=m,this.#i=g)}}Object.freeze(PointLight);class SpotLight extends BaseLight{#as=1;#n=0;#r=2;#i=0;#ns=0;#rs=-1;#is=0;#ss=15;#os=22.5;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#n}set x(i){this.#n=i}get y(){return this.#r}set y(i){this.#r=i}get z(){return this.#i}set z(i){this.#i=i}get position(){return[this.#n,this.#r,this.#i]}get radius(){return this.#as}set radius(i){this.#as=i}get directionX(){return this.#ns}set directionX(i){this.#ns=i}get directionY(){return this.#rs}set directionY(i){this.#rs=i}get directionZ(){return this.#is}set directionZ(i){this.#is=i}get direction(){return[this.#ns,this.#rs,this.#is]}set direction(i){this.#ns=i[0],this.#rs=i[1],this.#is=i[2]}get innerCutoff(){return this.#ss}set innerCutoff(i){this.#ss=i}get outerCutoff(){return this.#os}set outerCutoff(i){this.#os=i}get innerCutoffCos(){return Math.cos(this.#ss*Math.PI/180)}get outerCutoffCos(){return Math.cos(this.#os*Math.PI/180)}setPosition(i,m,g){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=m,this.#i=g)}lookAt(i,m,g){let x,_,b;Array.isArray(i)?[x,_,b]=i:(x=i,_=m,b=g);const y=x-this.#n,T=_-this.#r,w=b-this.#i,P=Math.sqrt(y*y+T*T+w*w);P>0&&(this.#ns=y/P,this.#rs=T/P,this.#is=w/P)}}Object.freeze(SpotLight);class LightManager{#us=3;#ls=ur.MAX_CLUSTER_LIGHTS;#cs=[];#hs=[];#fs=[];#ds=new AmbientLight;#ms=create$5();get spotLights(){return this.#fs}get spotLightCount(){return this.#fs.length}get limitClusterLightCount(){return this.#ls}get pointLights(){return this.#hs}get pointLightCount(){return this.#hs.length}get limitDirectionalLightCount(){return this.#us}get directionalLightCount(){return this.#cs.length}get directionalLights(){return this.#cs}get ambientLight(){return this.#ds}set ambientLight(i){i instanceof AmbientLight||consoleAndThrowError("allow only AmbientLight instance"),this.#ds=i}addSpotLight(i){i instanceof SpotLight||consoleAndThrowError("allow only SpotLight instance");this.#fs.length+this.#hs.length>this.#ls&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#fs.push(i)}addPointLight(i){i instanceof PointLight||consoleAndThrowError("allow only PointLight instance");this.#fs.length+this.#hs.length>this.#ls&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#hs.push(i)}addDirectionalLight(i){i instanceof DirectionalLight||consoleAndThrowError("allow only DirectionalLight instance");this.#cs.length>this.#us&&consoleAndThrowError("Cannot add more directional lights. The limit has been reached."),this.#cs.push(i)}removeSpotLight(i){const m=this.#fs.indexOf(i);-1!==m&&this.#fs.splice(m,1)}removePointLight(i){const m=this.#hs.indexOf(i);-1!==m&&this.#hs.splice(m,1)}removeDirectionalLight(i){const m=this.#cs.indexOf(i);-1!==m&&this.#cs.splice(m,1)}removeAllSpotLight(){this.#fs=[]}removeAllPointLight(){this.#hs=[]}removeAllDirectionalLight(){this.#cs=[]}removeAllLight(){this.removeAllPointLight(),this.removeAllSpotLight(),this.removeAllDirectionalLight(),this.#ds=null}updateViewSystemUniforms(i){const{scene:m,redGPUContext:g}=i,x=i.systemUniform_Vertex_StructInfo,{systemUniform_Vertex_UniformBuffer:_}=i,{members:b}=x,{lightManager:y,shadowManager:T}=m,{directionalShadowManager:w}=T;if(_.writeBuffers([[b.directionalLightCount,y.directionalLightCount],[b.directionalLightProjectionViewMatrix,this.#ps(i)],[b.directionalLightProjectionMatrix,this.#gs(i)],[b.directionalLightViewMatrix,this.#xs(i)],[b.shadowDepthTextureSize,w.shadowDepthTextureSize],[b.bias,w.bias]]),y.directionalLights.forEach((m,x)=>{const{directionalLights:y}=b,{direction:T,color:w,intensity:P}=y.memberList[x];m.enableDebugger&&(m.drawDebugger||(m.drawDebugger=new DrawDebuggerDirectionalLight(g,m)),m.drawDebugger.render(i.debugViewRenderState)),_.writeBuffers([[T,m.direction],[w,m.color.rgbNormal],[P,m.intensity]])}),y.ambientLight){const m=i.scene.lightManager.ambientLight,{ambientLight:g}=b,{color:x,intensity:y}=g.members;_.writeBuffers([[x,m.color.rgbNormal],[y,m.intensity]])}}#ps(i){return multiply$5(create$5(),this.#gs(i),this.#xs(i))}#gs(i){const m=create$5(),g=i.rawCamera instanceof Camera2D?fromValues$4(0,0,0):fromValues$4(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),x=Math.max(distance$2(g,create$4()),1);return ye(m,-x,x,-x,x,3*-x,3*x),m}#xs(i){identity$2(this.#ms);const m=i.rawCamera instanceof Camera2D?fromValues$4(0,0,0):fromValues$4(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),g=Math.max(distance$2(m,create$4()),1),x=fromValues$4(0,1,0),_=fromValues$4(0,0,0),b=i.scene.lightManager.directionalLights.length?fromValues$4(-i.scene.lightManager.directionalLights[0].direction[0]*g,-i.scene.lightManager.directionalLights[0].direction[1]*g,-i.scene.lightManager.directionalLights[0].direction[2]*g):create$4(),y=create$5();return lookAt(y,b,_,x),y}}Object.freeze(LightManager);class DirectionalShadowManager{#_s=2048;#vs=.005;#bs;#ys;#Ts;#b;#ei=[];get castingList(){return this.#ei}get shadowDepthTextureView(){return this.#ys}get shadowDepthTextureViewEmpty(){return this.#Ts}get bias(){return this.#vs}set bias(i){validatePositiveNumberRange(i,0,1),this.#vs=i}get shadowDepthTextureSize(){return this.#_s}set shadowDepthTextureSize(i){validateUintRange(i,1),this.#_s=i,this.#Ss()}resetCastingList(){this.#ei.length=0}updateViewSystemUniforms(i){this.#b=i,this.#Ss()}destroy(){this.#bs&&(this.#bs.destroy(),this.#bs=null,this.#ys=null)}#Ss(){this.#bs?.width!==this.#_s&&(this.destroy(),this.#ws())}#Ms(i){const m=i.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_EmptyDepthTexture_1x1_${Date.now()}`});this.#Ts=m.createView({label:m.label})}#ws(){const{gpuDevice:i}=this.#b;this.#bs=i.createTexture({size:[this.#_s,this.#_s,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_shadowDepthTextureSize_${this.#_s}x${this.#_s}_${Date.now()}`}),this.#ys=this.#bs.createView({label:this.#bs.label}),this.#Ts||this.#Ms(i)}}Object.freeze(DirectionalShadowManager);class ShadowManager{#Rs=new DirectionalShadowManager;constructor(){}get directionalShadowManager(){return this.#Rs}}Object.freeze(ShadowManager);class Scene extends Object3DContainer{#e;#a;#Cs=new ColorRGBA;#Ps=!1;#Es=new LightManager;#Is=new ShadowManager;constructor(i){super(),this.#e=InstanceIdGenerator.getNextId(this.constructor),this.#a=i}get lightManager(){return this.#Es}get shadowManager(){return this.#Is}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get backgroundColor(){return this.#Cs}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#Cs=i}get useBackgroundColor(){return this.#Ps}set useBackgroundColor(i){this.#Ps=i}}class ViewRenderTextureManager{#Bs;#Ls;#Ds;#Us;#As;#ks;#Os;#Fs;#Ns;#Gs=!0;#Vs=!0;#b;#Vr;constructor(i){validateRedGPUContext(i.redGPUContext),this.#b=i.redGPUContext,this.#Vr=i}get renderPath1ResultTextureDescriptor(){return this.#Us}get colorTexture(){return this.#Bs}get colorResolveTexture(){return this.#As}get depthTexture(){return this.#ks}get depthTextureView(){return this.#Hs("depth"),this.#Ns}get colorTextureView(){return this.#Hs("color"),this.#Os}get colorResolveTextureView(){return this.#Fs}get renderPath1ResultTextureView(){return this.#Ds}get renderPath1ResultTexture(){return this.#zs(),this.#Ls}#zs(){const{gpuDevice:i}=this.#b,m=this.#Ls,{pixelRectObject:g}=this.#Vr,{width:x,height:_}=g;(!m||(m?.width!==x||m?.height!==_))&&(m&&(m?.destroy(),this.#Ls=null,this.#Ds=null),this.#Us={size:{width:Math.max(1,x),height:Math.max(1,_),depthOrArrayLayers:1},format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,mipLevelCount:getMipLevelCount(x,_),label:`renderPath1ResultTexture_${x}x${_}_${Date.now()}`},this.#Ls=i.createTexture(this.#Us),this.#Ds=this.#Ls.createView({label:this.#Ls.label}))}#Hs(i){const m="depth"===i,{antialiasingManager:g,gpuDevice:x}=this.#b,{useMSAA:_}=g,b=m?this.#ks:this.#Bs,{pixelRectObject:y}=this.#Vr,{width:T,height:w}=y,P=b?.width!==T||b?.height!==w,H=m?this.#Vs!==_:this.#Gs!==_,z=!b||P||H;if(m?this.#Vs=_:this.#Gs=_,z){b&&(b?.destroy(),m||(this.#As?.destroy(),this.#As=null,this.#Fs=null));const g=x.createTexture({size:[Math.max(T,1),Math.max(w,1),1],sampleCount:_?4:1,label:`${i}_${T}x${w}_${Date.now()}`,format:m?"depth32float":navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|(m||_?0:GPUTextureUsage.COPY_SRC)});if(m)this.#ks=g,this.#Ns=g.createView({label:g.label});else if(this.#Bs=g,this.#Os=g.createView({label:g.label}),_){const m=x.createTexture({size:{width:Math.max(T,1),height:Math.max(w,1),depthOrArrayLayers:1},sampleCount:1,label:`${i}_resolve_${T}x${w}_${Date.now()}`,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC});this.#As=m,this.#Fs=m.createView({label:m.label})}}}}Object.freeze(ViewRenderTextureManager);const Vi=create$5(),computeViewFrustumPlanes=(i,m)=>{multiply$5(Vi,i,m);const g=[[Vi[3]-Vi[0],Vi[7]-Vi[4],Vi[11]-Vi[8],Vi[15]-Vi[12]],[Vi[3]+Vi[0],Vi[7]+Vi[4],Vi[11]+Vi[8],Vi[15]+Vi[12]],[Vi[3]+Vi[1],Vi[7]+Vi[5],Vi[11]+Vi[9],Vi[15]+Vi[13]],[Vi[3]-Vi[1],Vi[7]-Vi[5],Vi[11]-Vi[9],Vi[15]-Vi[13]],[Vi[3]-Vi[2],Vi[7]-Vi[6],Vi[11]-Vi[10],Vi[15]-Vi[14]],[Vi[3]+Vi[2],Vi[7]+Vi[6],Vi[11]+Vi[10],Vi[15]+Vi[14]]];for(let i=0;i<6;i++){const m=g[i],x=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]);m[0]/=x,m[1]/=x,m[2]/=x,m[3]/=x}return g};class ViewTransform{onResize=null;#b;#$s=create$5();#rr;#n=0;#r=0;#Dr;#Ur;#Ar=[0,0,0,0];constructor(i){validateRedGPUContext(i),this.#b=i}get redGPUContext(){return this.#b}get camera(){return this.#rr}set camera(i){i instanceof PerspectiveCamera||i instanceof Camera2D||i instanceof Camera2D||i instanceof OrthographicCamera||i instanceof AController||consoleAndThrowError("allow PerspectiveCamera or OrthographicCamera or AController instance"),this.#rr=i}get x(){return this.#n}set x(i){this.setPosition(i,this.y)}get y(){return this.#r}set y(i){this.setPosition(this.x,i)}get width(){return this.#Dr}set width(i){this.setSize(i,this.#Ur)}get height(){return this.#Ur}set height(i){this.setSize(this.#Dr,i)}get pixelRectArray(){return this.#Ar}get pixelRectObject(){return{x:this.#Ar[0],y:this.#Ar[1],width:this.#Ar[2],height:this.#Ar[3]}}get screenRectObject(){return{x:this.#Ar[0]/devicePixelRatio,y:this.#Ar[1]/devicePixelRatio,width:this.#Ar[2]/devicePixelRatio,height:this.#Ar[3]/devicePixelRatio}}get aspect(){return this.#Ar[2]/this.#Ar[3]}get frustumPlanes(){return this.#rr instanceof AController?computeViewFrustumPlanes(this.projectionMatrix,this.#rr.camera.modelMatrix):computeViewFrustumPlanes(this.projectionMatrix,this.#rr.modelMatrix)}get rawCamera(){return this.#rr instanceof AController?this.#rr.camera:this.#rr}get projectionMatrix(){const{pixelRectObject:i,redGPUContext:m}=this;if(this.rawCamera instanceof OrthographicCamera){const{nearClipping:i,farClipping:m}=this.rawCamera;orthoZO(this.#$s,this.rawCamera.left,this.rawCamera.right,this.rawCamera.bottom,this.rawCamera.top,i,m)}else if(this.rawCamera instanceof Camera2D)ye(this.#$s,-.5,.5,-.5,.5,-1e5,1e5),scale$5(this.#$s,this.#$s,[m.renderScale,m.renderScale,1]),translate$1(this.#$s,this.#$s,[-.5,.5,0]),scale$5(this.#$s,this.#$s,[1/i.width*window.devicePixelRatio,-1/i.height*window.devicePixelRatio,1]),identity$2(this.rawCamera.modelMatrix);else{const{fieldOfView:i,nearClipping:m,farClipping:g}=this.rawCamera;W(this.#$s,Math.PI/180*i,this.aspect,m,g)}return this.#$s}get inverseProjectionMatrix(){return invert$2(create$5(),this.#$s)}setPosition(i=this.#n,m=this.#r){const{sizeManager:g}=this.#b;RedGPUContextSizeManager.validatePositionValue(i),RedGPUContextSizeManager.validatePositionValue(m),this.#n=i,this.#r=m;const x=g.pixelRectObject,_=RedGPUContextSizeManager.getPixelDimension(x,"width",i),b=RedGPUContextSizeManager.getPixelDimension(x,"height",m);this.#Ar[0]=Math.floor(_*(this.#n.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#Ar[1]=Math.floor(b*(this.#r.toString().includes("%")?1:g.renderScale*window.devicePixelRatio))}setSize(i=this.#Dr,m=this.#Ur){const{sizeManager:g}=this.#b;RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#Dr=i,this.#Ur=m;const x=g.pixelRectObject,_=RedGPUContextSizeManager.getPixelDimension(x,"width",i),b=RedGPUContextSizeManager.getPixelDimension(x,"height",m);this.#Ar[2]=Math.floor(_*(this.#Dr.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#Ar[3]=Math.floor(b*(this.#Ur.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.onResize&&this.onResize(this.screenRectObject.width,this.screenRectObject.height)}}const Hi=parseWGSL(lr.SYSTEM_UNIFORM).uniforms.systemUniforms;class View3D extends ViewTransform{#qs=Hi;#Ks;#Ws;#e;#Xs;#Ys;#js;#a;#Zs;#Js=!0;#Qs=!1;#eo=50;#to;#no;#ro;#io;#ao=new PickingManager;#so=[];#oo;#nn;#Yr;#uo;#lo;#co;#ho=void 0;#fo=void 0;constructor(i,m,g,x){super(i),this.scene=m,this.camera=g,x&&(this.name=x),this.#sa(),this.#io=new ViewRenderTextureManager(this),this.#no=new RenderViewStateData(this),this.#ro=new PostEffectManager(this),this.setSize("100%","100%")}get viewRenderTextureManager(){return this.#io}get systemUniform_Vertex_StructInfo(){return this.#qs}get systemUniform_Vertex_UniformBindGroup(){return this.#Ks}get systemUniform_Vertex_UniformBuffer(){return this.#Ws}get passLightClustersBound(){return this.#co}get ibl(){return this.#to}set ibl(i){this.#to=i}get pickingManager(){return this.#ao}get postEffectManager(){return this.#ro}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get debugViewRenderState(){return this.#no}get grid(){return this.#Xs}screenToWorld(i,m){return screenToWorld(i,m,this)}set grid(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerGrid(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerGrid)&&null!==i)throw new TypeError("grid must be of type 'DrawDebuggerGrid','boolean',or 'null'.");this.#Xs=i}get axis(){return this.#Ys}set axis(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerAxis(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerAxis)&&null!==i)throw new TypeError("axis must be of type 'DrawDebuggerAxis','boolean',or 'null'.");this.#Ys=i}get skybox(){return this.#js}set skybox(i){this.#js=i}get useFrustumCulling(){return this.#Js}set useFrustumCulling(i){this.#Js=i}get useDistanceCulling(){return this.#Qs}set useDistanceCulling(i){this.#Qs=i}get distanceCulling(){return this.#eo}set distanceCulling(i){this.#eo=i}get scene(){return this.#Zs}set scene(i){i instanceof Scene||consoleAndThrowError("allow only Scene instance"),this.#Zs=i}update(i,m=!1,g=!1,x){const{scene:_}=i,{shadowManager:b}=_,{directionalShadowManager:y}=b,T=i.ibl,w=T?.iblTexture?.gpuTexture,P=T?.irradianceTexture?.gpuTexture;let H=m?y.shadowDepthTextureViewEmpty:y.shadowDepthTextureView;const z=i.redGPUContext.viewList.indexOf(i),$=`${z}_${m?"shadowRender":"basic"}_2path${!!x}`;if(z>-1){let m=!0,g=this.#so[$];g&&(m=g.ibl!==T||g.ibl_iblTexture!==w||g.ibl_irradianceTexture!==P||g.renderPath1ResultTextureView!==x||g.shadowDepthTextureView!==H||!this.#lo),m?this.#do($,H,i.ibl,x):this.#Ks=this.#so[$].vertexUniformBindGroup,[{key:"useIblTexture",value:[w?1:0]},{key:"time",value:[i.debugViewRenderState.timestamp||0]},{key:"isView3D",value:[this.constructor===View3D?1:0]}].forEach(({key:i,value:m})=>{this.redGPUContext.gpuDevice.queue.writeBuffer(this.#Ws.gpuBuffer,this.#qs.members[i].uniformOffset,new this.#qs.members[i].View(m))}),this.#so[$]={ibl:T,ibl_iblTexture:w,ibl_irradianceTexture:P,renderPath1ResultTextureView:x,shadowDepthTextureView:H,vertexUniformBindGroup:this.#Ks}}this.#mo(g)}checkMouseInViewBounds(){const{pixelRectObject:i,pickingManager:m}=this,{mouseX:g,mouseY:x}=m;return 0<g&&g<i.width&&0<x&&x<i.height}#do(i,m,g,x){this.#mo(!0);const _=g?.iblTexture,b=g?.irradianceTexture,y={layout:this.redGPUContext.resourceManager.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),label:`SYSTEM_UNIFORM_bindGroup_${i}`,entries:[{binding:0,resource:{buffer:this.#Ws.gpuBuffer,offset:0,size:this.#Ws.size}},{binding:1,resource:this.#oo},{binding:2,resource:m},{binding:3,resource:this.#nn},{binding:5,resource:{buffer:this.#Yr,offset:0,size:this.#Yr.size}},{binding:6,resource:{buffer:this.#lo.clusterLightsBuffer,offset:0,size:this.#lo.clusterLightsBuffer.size}},{binding:7,resource:this.#nn},{binding:8,resource:x||this.redGPUContext.resourceManager.emptyBitmapTextureView},{binding:9,resource:this.#nn},{binding:10,resource:_?.gpuTexture?.createView(_?.viewDescriptor||CubeTexture.defaultViewDescriptor)||this.redGPUContext.resourceManager.emptyCubeTextureView},{binding:11,resource:b?.gpuTexture?.createView(b?.viewDescriptor||CubeTexture.defaultViewDescriptor)||this.redGPUContext.resourceManager.emptyCubeTextureView}]};this.#Ks=this.redGPUContext.gpuDevice.createBindGroup(y)}#sa(){const i=new ArrayBuffer(Hi.arrayBufferByteLength);this.#Ws=new UniformBuffer(this.redGPUContext,i,"#systemUniform_Vertex_UniformBuffer"),this.#uo=new Float32Array(16*ur.MAX_CLUSTER_LIGHTS+4),this.#Yr=this.redGPUContext.gpuDevice.createBuffer({label:"clusterLightsBuffer",size:this.#uo.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#Yr,0,this.#uo),this.#oo=new Sampler(this.redGPUContext,{addressModeU:br.CLAMP_TO_EDGE,addressModeV:br.CLAMP_TO_EDGE,addressModeW:br.CLAMP_TO_EDGE,compare:Fr.LESS_EQUAL}).gpuSampler,this.#nn=new Sampler(this.redGPUContext).gpuSampler}#mo(i=!1){if(!i)return;const{redGPUContext:m,scene:g,debugViewRenderState:x}=this;if(this.#co||(this.#co=new PassClusterLightBound(m,this)),this.#lo&&(this.#co.render(),this.#ho=this.pixelRectArray[2],this.#fo=this.pixelRectArray[3]),this.#lo||(this.#lo=new PassClustersLight(m,this)),g){const{pointLights:i,spotLights:_}=g.lightManager,b=i.length,y=_.length;if(b){let g=b;for(;g--;){const _=i[g],b=4+16*g;this.#uo.set([..._.position,_.radius,..._.color.rgbNormal,_.intensity,0],b),_.enableDebugger&&(_.drawDebugger||(_.drawDebugger=new DrawDebuggerPointLight(m,_)),_.drawDebugger.render(x))}}if(y){const i=16,g=b*i;let T=y;for(;T--;){const b=_[T],y=4+i*T+g;this.#uo.set([...b.position,b.radius,...b.color.rgbNormal,b.intensity,1,...b.direction,b.outerCutoff,b.innerCutoff],y),b.enableDebugger&&(b.drawDebugger||(b.drawDebugger=new DrawDebuggerSpotLight(m,b)),b.drawDebugger.render(x))}}this.#uo.set([b,y,0,0],0),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#Yr,0,this.#uo),this.#lo.render()}}}Object.freeze(View3D);class RedGPUContextViewContainer{#po=[];constructor(){}get viewList(){return this.#po}get numViews(){return this.#po.length}contains(i){return this.#po.includes(i)}addView(i){this.#go(i),this.#po.push(i)}addViewAt(i,m){this.#go(i),validateUintRange(m);const g=this.#po.length;g<m&&(m=g),this.#po[m]=i}getViewAt(i){return validateUintRange(i),this.#po[i]}getViewIndex(i){return this.#go(i),this.#po.indexOf(i)}setViewIndex(i,m){this.#go(i),validateUintRange(m);const g=this.#po.length,x=m>=g,_=this.#po.indexOf(i);-1===_&&consoleAndThrowError("입력하신 View 는 RedGPUContext instance 에 등록되지 않은 View 입니다."),x&&consoleAndThrowError(`index must be smaller than the viewList length./index:${m}/this.#viewList.length:${g}`),this.#po.splice(_,1),this.#po.splice(m,0,i)}swapViews(i,m){this.#go(i),this.#go(m);const g=this.#po.indexOf(i),x=this.#po.indexOf(m);-1!==g&&-1!==x||consoleAndThrowError((-1===g?"view1":"view2")+" is not child of this RedGPUContext instance."),this.swapViewsAt(g,x)}swapViewsAt(i,m){i===m&&consoleAndThrowError("The indices to swap cannot be the same."),validateUintRange(i),validateUintRange(m);const g=this.#po.length;(i>=g||m>=g)&&consoleAndThrowError(`index1,index2 must be smaller than the viewList length./index1:${i}/index2:${m}/this.#viewList.length:${g}`);const x=this.#po[i];this.#po[i]=this.#po[m],this.#po[m]=x}removeView(i){this.#go(i);const m=this.#po.indexOf(i);m>-1?this.#po.splice(m,1):consoleAndThrowError("View3D is not found in the view list.")}removeViewAt(i){validateUintRange(i);const m=this.#po.length;i<m?this.#po.splice(i,1):consoleAndThrowError(`Index ${i} is out of range. View list length is ${m}.`)}removeAllViews(){this.#po.length=0}#go(i){i instanceof View3D||consoleAndThrowError("allow only View3D instance")}}class RedGPUContextDetector{#xo;#_o;#vo;#bo;#yo;constructor(i){this.#sa(i.gpuAdapter)}get adapterInfo(){return this.#xo}get limits(){return this.#_o}get isFallbackAdapter(){return this.#vo}get groupedLimits(){return this.#bo}get userAgent(){return this.#yo}get isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Kindle|Silk|PlayBook/i.test(navigator.userAgent)}#sa(i){this.#yo=navigator.userAgent,this.#To(i),this.#So()}#To(i){if(i){const{limits:m,info:g}=i,{isFallbackAdapter:x}=g;this.#xo=g,this.#vo=x,this.#_o=m}}#So(){const i={TextureLimits:["maxTextureDimension1D","maxTextureDimension2D","maxTextureDimension3D","maxTextureArrayLayers","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage"],BufferLimits:["maxBindGroups","maxBindGroupsPlusVertexBuffers","maxBindingsPerBindGroup","maxDynamicUniformBuffersPerPipelineLayout","maxDynamicStorageBuffersPerPipelineLayout","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxUniformBufferBindingSize","maxStorageBufferBindingSize","minUniformBufferOffsetAlignment","minStorageBufferOffsetAlignment","maxBufferSize"],PipelineAndShaderLimits:["maxVertexBuffers","maxVertexAttributes","maxVertexBufferArrayStride","maxInterStageShaderComponents","maxInterStageShaderVariables"],ComputeLimits:["maxComputeWorkgroupStorageSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeWorkgroupsPerDimension"],ColorLimits:["maxColorAttachments","maxColorAttachmentBytesPerSample"]};let m={TextureLimits:{},BufferLimits:{},PipelineAndShaderLimits:{},ComputeLimits:{},ColorLimits:{},EtcLimit:{}};for(const g in this.#_o){let x=!1;for(const _ in i)if(i[_].includes(g)){m[_][g]=this.#_o[g],x=!0;break}x||(m.EtcLimit[g]=this.#_o[g])}this.#bo=m}}class AntialiasingManager{#b;#wo=!0;#Mo=!1;#Ro=.75;#Co=.166;#Po=.0833;#Eo=!0;constructor(i){this.#b=i}get fxaa_subpix(){return this.#Ro}set fxaa_subpix(i){validateNumberRange(i,0,1),this.#Ro=i}get fxaa_edgeThreshold(){return this.#Co}set fxaa_edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#Co=i}get fxaa_edgeThresholdMin(){return this.#Po}set fxaa_edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#Po=i}get useMSAA(){return this.#wo}set useMSAA(i){this.#wo=i,this.#Eo=!0}get useFXAA(){return this.#Mo}set useFXAA(i){this.#Mo=i}get changedMSAA(){return this.#Eo}set changedMSAA(i){this.#Eo=i}}Object.freeze(AntialiasingManager);class RedGPUContext extends RedGPUContextViewContainer{currentRequestAnimationFrame;onResize=null;#Io;#Bo;#Lo;#Do;#y;#kr;#Uo;#Ao;#ve;#Cs=new ColorRGBA(0,0,0,1);#ko=!1;#Oo={};#Ni;constructor(i,m,g,x,_){super(),this.#Bo=m,this.#y=g,this.#Do=x,this.#Lo=_,this.#kr=i,this.#Uo=new RedGPUContextSizeManager(this),this.#Ao=new RedGPUContextDetector(this),this.#ve=new ResourceManager(this),this.#Ni=new AntialiasingManager(this),this.#Fo()}get antialiasingManager(){return this.#Ni}get useDebugPanel(){return this.#ko}set useDebugPanel(i){this.#ko=i}get backgroundColor(){return this.#Cs}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#Cs=i}get detector(){return this.#Ao}get configurationDescription(){return this.#Io}get gpuAdapter(){return this.#Bo}get alphaMode(){return this.#Lo}set alphaMode(i){this.#Lo=i,this.#No()}get gpuContext(){return this.#Do}get gpuDevice(){return this.#y}get htmlCanvas(){return this.#kr}get keyboardKeyBuffer(){return this.#Oo}set keyboardKeyBuffer(i){this.#Oo=i}get resourceManager(){return this.#ve}get sizeManager(){return this.#Uo}get width(){return this.#Uo.width}set width(i){this.#Uo.width=i}get height(){return this.#Uo.height}set height(i){this.#Uo.height=i}get screenRectObject(){return this.#Uo.screenRectObject}get renderScale(){return this.#Uo.renderScale}set renderScale(i){this.#Uo.renderScale=i,this.viewList.forEach(i=>{i.setPosition(),i.setSize()})}destroy(){this.#y.destroy()}setSize(i=this.width,m=this.height){this.sizeManager.setSize(i,m)}#Fo(){this.#No(),this.sizeManager.setSize("100%","100%"),window?.addEventListener("resize",()=>{this.sizeManager.setSize(),this.viewList.forEach(i=>{i.setSize(),i.setPosition()})});(this.detector.isMobile?["click","touchmove","touchstart","touchend"]:["click","mousemove","mousedown","mouseup"]).forEach(i=>{const m=this.detector.isMobile?{click:pi.CLICK,touchmove:pi.MOVE,touchstart:pi.DOWN,touchend:pi.UP}:{click:pi.CLICK,mousemove:pi.MOVE,mousedown:pi.DOWN,mouseup:pi.UP};this.#kr.addEventListener(i,i=>{const g=m[i.type];this.viewList.forEach(m=>{this.detector.isMobile&&i instanceof TouchEvent&&i.touches.length>0?(m.pickingManager.mouseX=i.touches[0].clientX*devicePixelRatio-m.pixelRectObject.x,m.pickingManager.mouseY=i.touches[0].clientY*devicePixelRatio-m.pixelRectObject.y):i instanceof MouseEvent&&(m.pickingManager.mouseX=i.offsetX*devicePixelRatio-m.pixelRectObject.x,m.pickingManager.mouseY=i.offsetY*devicePixelRatio-m.pixelRectObject.y),g===pi.CLICK?m.pickingManager.lastMouseClickEvent={...i,type:g}:m.pickingManager.lastMouseEvent={...i,type:g}})})});{const HD_keyDown=i=>{this.#Oo[i.key]=!0},HD_keyUp=i=>{this.#Oo[i.key]=!1};window?.addEventListener("keyup",HD_keyUp),window?.addEventListener("keydown",HD_keyDown)}new ResizeObserver(i=>{}).observe(this.#kr)}#No(){const i=navigator.gpu.getPreferredCanvasFormat();this.#Io={device:this.#y,format:i,alphaMode:this.#Lo},this.#Do.configure(this.#Io)}}Object.freeze(RedGPUContext);const getFileExtension=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");const m=i.split("/"),g=m[m.length-1],x=g.lastIndexOf(".");return-1===x?"":g.substring(x+1).toLowerCase()},getFileName=(i,m=!0)=>{const g=i.substring(i.lastIndexOf("/")+1);return m?g:g.split(".").slice(0,-1).join(".")},getFilePath=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");return i.substring(0,i.lastIndexOf("/")+1)},calculateNormals=(i,m)=>{let g,x,_=[];for(g=0;g<i.length;g+=3)_[g+0]=0,_[g+1]=0,_[g+2]=0;for(g=0;g<m.length;g+=3){let b,y,T,w,P=[],H=[],z=[];for(b=3*m[g],y=3*m[g+1],T=3*m[g+2],P[0]=i[T+0]-i[y+0],P[1]=i[T+1]-i[y+1],P[2]=i[T+2]-i[y+2],H[0]=i[b+0]-i[y+0],H[1]=i[b+1]-i[y+1],H[2]=i[b+2]-i[y+2],z[0]=P[1]*H[2]-P[2]*H[1],z[1]=P[2]*H[0]-P[0]*H[2],z[2]=P[0]*H[1]-P[1]*H[0],x=0;x<3;x++)w=3*m[g+x],_[w+0]=_[w+0]+z[0],_[w+1]=_[w+1]+z[1],_[w+2]=_[w+2]+z[2]}for(g=0;g<i.length;g+=3){let i=[];i[0]=_[g+0],i[1]=_[g+1],i[2]=_[g+2];let m=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);0===m&&(m=1),i[0]=i[0]/m,i[1]=i[1]/m,i[2]=i[2]/m,_[g+0]=i[0],_[g+1]=i[1],_[g+2]=i[2]}return _},formatBytes=(i,m=2)=>{if(("number"!=typeof i||i<0||Number.isNaN(i)||!Number.isInteger(i))&&consoleAndThrowError("Invalid input:'bytes' must be a uint"),0===i)return"0 Bytes";const g=m<0?0:m,x=Math.floor(Math.log(i)/Math.log(1024));return parseFloat((i/Math.pow(1024,x)).toFixed(g))+" "+["Bytes","KB","MB","GB"][x]},quaternionToRotationMat4=(i,m)=>{let g=i[0],x=i[1],_=i[2],b=i[3],y=g+g,T=x+x,w=_+_,P=g*y,H=g*T,z=g*w,$=x*T,q=x*w,W=_*w,ye=b*y,Ge=b*T,Ke=b*w;return m[0]=1-($+W),m[4]=H-Ke,m[8]=z+Ge,m[1]=H+Ke,m[5]=1-(P+W),m[9]=q-ye,m[2]=z-Ge,m[6]=q+ye,m[10]=1-(P+$),m[3]=0,m[7]=0,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1,m};function sortTransparentObjects(i,m){const g={},{x:x,y:_,z:b}=i;return m.sort((i,m)=>{if(!g[i.uuid]){const m=i.x-x,y=i.y-_,T=i.z-b;g[i.uuid]=m*m+y*y+T*T}if(!g[m.uuid]){const i=m.x-x,y=m.y-_,T=m.z-b;g[m.uuid]=i*i+y*y+T*T}return g[m.uuid]-g[i.uuid]})}const zi=console.log.bind(console);var $i=Object.freeze({__proto__:null,AABB:AABB,OBB:OBB,calculateGeometryAABB:calculateGeometryAABB,calculateMeshAABB:calculateMeshAABB,calculateMeshCombinedAABB:calculateMeshCombinedAABB,calculateMeshOBB:calculateMeshOBB,calculateNormals:calculateNormals,calculateTextureByteSize:calculateTextureByteSize,computeViewFrustumPlanes:computeViewFrustumPlanes,convertHexToRgb:convertHexToRgb,convertRgbToHex:convertRgbToHex,createUUID:createUUID,formatBytes:formatBytes,getFileExtension:getFileExtension,getFileName:getFileName,getFilePath:getFilePath,getMipLevelCount:getMipLevelCount,getScreenPoint:getScreenPoint,keepLog:zi,localToWorld:localToWorld,matToEuler:mat4ToEuler,quaternionToRotationMat4:quaternionToRotationMat4,screenToWorld:screenToWorld,sortTransparentObjects:sortTransparentObjects,uuidToUint:uuidToUint,worldToLocal:worldToLocal});const copyGPUBuffer=(i,m,g)=>{const x=i.createCommandEncoder();x.copyBufferToBuffer(m,0,g,0,Math.min(m.size,g.size));const _=x.finish();i.queue.submit([_])},qi=3.141592653589793,Ki=6.283185307179586,Wi=.225,Xi=1.27323954,Yi=.405284735,ji=1.5707963267948966,Zi=Math.PI/180;class InstancingMeshObject3D{modelMatrix=create$5();localMatrix=create$5();normalModelMatrix=create$5();inited=!1;#n=0;#i=0;#r=0;#Nn=[0,0,0];#$n=1;#qn=1;#Kn=1;#Wn=[1,1,1];#o=0;#u=0;#l=0;#Xn=[0,0,0];#Go=0;#Vo;#b;#Jn=1;constructor(i,m,g){validateRedGPUContext(i),this.#b=i,this.#Vo=g,this.#Go=m}get opacity(){return this.#Jn}set opacity(i){validatePositiveNumberRange(i,0,1),this.#Jn=i,this.#Ho()}get x(){return this.#n}set x(i){this.#n=this.#Nn[0]=i,this.#Ho()}get y(){return this.#r}set y(i){this.#r=this.#Nn[1]=i,this.#Ho()}get z(){return this.#i}set z(i){this.#i=this.#Nn[2]=i,this.#Ho()}get position(){return this.#Nn}set position(i){this.#n=this.#Nn[0]=i,this.#r=this.#Nn[1]=i,this.#i=this.#Nn[2]=i,this.#Ho()}get scaleX(){return this.#$n}set scaleX(i){this.#$n=this.#Wn[0]=i,this.#Ho()}get scaleY(){return this.#qn}set scaleY(i){this.#qn=this.#Wn[1]=i,this.#Ho()}get scaleZ(){return this.#Kn}set scaleZ(i){this.#Kn=this.#Wn[2]=i,this.#Ho()}get scale(){return this.#Nn}set scale(i){this.#$n=this.#Wn[0]=i,this.#qn=this.#Wn[1]=i,this.#Kn=this.#Wn[2]=i,this.#Ho()}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#Xn[0]=i,this.#Ho()}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#Xn[1]=i,this.#Ho()}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#Xn[2]=i,this.#Ho()}get rotation(){return this.#Xn}set rotation(i){this.#o=this.#Xn[0]=i,this.#u=this.#Xn[1]=i,this.#l=this.#Xn[2]=i,this.#Ho()}setScale(i,m,g){m=m??i,g=g??i;const x=this.#Wn;this.#$n=x[0]=i,this.#qn=x[1]=m,this.#Kn=x[2]=g,this.#Ho()}setPosition(i,m,g){m=m??i,g=g??i;const x=this.#Nn;this.#n=x[0]=i,this.#r=x[1]=m,this.#i=x[2]=g,this.#Ho()}setRotation(i,m,g){m=m??i,g=g??i;const x=this.#Xn;this.#o=x[0]=i,this.#u=x[1]=m,this.#l=x[2]=g,this.#Ho()}#Ho(){let i,m,g,x,_,b,y,T,w,P,H,z,$,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt;this.inited=!0;{const $=this.localMatrix;let Ge;P=1,H=0,z=0,q=0,W=1,ye=0,Ke=0,Xe=0,Ye=1,$[12]=this.#n,$[13]=this.#r,$[14]=this.#i,$[15]=1,y=this.#o*Zi,T=this.#u*Zi,w=this.#l*Zi,Ge=y%Ki,Ge<-qi?Ge+=Ki:Ge>qi&&(Ge-=Ki),Ge=Ge<0?Xi*Ge+Yi*Ge*Ge:Xi*Ge-Yi*Ge*Ge,i=Ge<0?Wi*(Ge*-Ge-Ge)+Ge:Wi*(Ge*Ge-Ge)+Ge,Ge=(y+ji)%Ki,Ge<-qi?Ge+=Ki:Ge>qi&&(Ge-=Ki),Ge=Ge<0?Xi*Ge+Yi*Ge*Ge:Xi*Ge-Yi*Ge*Ge,x=Ge<0?Wi*(Ge*-Ge-Ge)+Ge:Wi*(Ge*Ge-Ge)+Ge,Ge=T%Ki,Ge<-qi?Ge+=Ki:Ge>qi&&(Ge-=Ki),Ge=Ge<0?Xi*Ge+Yi*Ge*Ge:Xi*Ge-Yi*Ge*Ge,m=Ge<0?Wi*(Ge*-Ge-Ge)+Ge:Wi*(Ge*Ge-Ge)+Ge,Ge=(T+ji)%Ki,Ge<-qi?Ge+=Ki:Ge>qi&&(Ge-=Ki),Ge=Ge<0?Xi*Ge+Yi*Ge*Ge:Xi*Ge-Yi*Ge*Ge,_=Ge<0?Wi*(Ge*-Ge-Ge)+Ge:Wi*(Ge*Ge-Ge)+Ge,Ge=w%Ki,Ge<-qi?Ge+=Ki:Ge>qi&&(Ge-=Ki),Ge=Ge<0?Xi*Ge+Yi*Ge*Ge:Xi*Ge-Yi*Ge*Ge,g=Ge<0?Wi*(Ge*-Ge-Ge)+Ge:Wi*(Ge*Ge-Ge)+Ge,Ge=(w+ji)%Ki,Ge<-qi?Ge+=Ki:Ge>qi&&(Ge-=Ki),Ge=Ge<0?Xi*Ge+Yi*Ge*Ge:Xi*Ge-Yi*Ge*Ge,b=Ge<0?Wi*(Ge*-Ge-Ge)+Ge:Wi*(Ge*Ge-Ge)+Ge,xt=_*b,vt=i*m*b-x*g,bt=x*m*b+i*g,yt=_*g,Tt=i*m*g+x*b,St=x*m*g-i*b,wt=-m,Mt=i*_,Rt=x*_,y=this.#$n,T=this.#qn,w=this.#Kn,$[0]=(P*xt+q*vt+Ke*bt)*y,$[1]=(H*xt+W*vt+Xe*bt)*y,$[2]=(z*xt+ye*vt+Ye*bt)*y,$[3]=$[3]*y,$[4]=(P*yt+q*Tt+Ke*St)*T,$[5]=(H*yt+W*Tt+Xe*St)*T,$[6]=(z*yt+ye*Tt+Ye*St)*T,$[7]=$[7]*T,$[8]=(P*wt+q*Mt+Ke*Rt)*w,$[9]=(H*wt+W*Mt+Xe*Rt)*w,$[10]=(z*wt+ye*Mt+Ye*Rt)*w,$[11]=$[11]*w}this.modelMatrix=this.localMatrix;{let i=this.normalModelMatrix,m=this.modelMatrix;P=m[0],H=m[1],z=m[2],$=m[3],q=m[4],W=m[5],ye=m[6],Ge=m[7],Ke=m[8],Xe=m[9],Ye=m[10],je=m[11],Je=m[12],Qe=m[13],et=m[14],at=m[15],Ze=P*W-H*q,ht=P*ye-z*q,ft=P*Ge-$*q,gt=H*ye-z*W,xt=H*Ge-$*W,vt=z*Ge-$*ye,bt=Ke*Qe-Xe*Je,yt=Ke*et-Ye*Je,Tt=Ke*at-je*Je,wt=Xe*at-je*Qe,St=Ye*at-je*et,Rt=Ze*St-ht*wt+ft*St+gt*Tt-xt*yt+vt*bt,Rt=1/Rt,i[0]=(W*St-ye*wt+Ge*St)*Rt,i[4]=(-H*St+z*wt-$*St)*Rt,i[8]=(Qe*vt-et*xt+at*gt)*Rt,i[12]=(-Xe*vt+Ye*xt-je*gt)*Rt,i[1]=(-q*St+ye*Tt-Ge*yt)*Rt,i[5]=(P*St-z*Tt+$*yt)*Rt,i[9]=(-Je*vt+et*ft-at*ht)*Rt,i[13]=(Ke*vt-Ye*ft+je*ht)*Rt,i[2]=(q*wt-W*Tt+Ge*bt)*Rt,i[6]=(-P*wt+H*Tt-$*bt)*Rt,i[10]=(Je*xt-Qe*ft+at*Ze)*Rt,i[14]=(-Ke*xt+Xe*ft-je*Ze)*Rt,i[3]=(-q*St+W*yt-ye*bt)*Rt,i[7]=(P*St-H*yt+z*bt)*Rt,i[11]=(-Je*gt+Qe*ht-et*Ze)*Rt,i[15]=(Ke*gt-Xe*ht+Ye*Ze)*Rt}if(this.#Vo.gpuRenderInfo){const{vertexUniformBuffer:i,vertexUniformInfo:m}=this.#Vo.gpuRenderInfo,g=m.members.instanceModelMatrixs,x=m.members.instanceNormalModelMatrix,_=m.members.instanceOpacity;this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,g.uniformOffset+g.stride*this.#Go,new g.View(this.modelMatrix)),this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,x.uniformOffset+x.stride*this.#Go,new x.View(this.normalModelMatrix)),this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,_.uniformOffset+_.stride*this.#Go,new _.View([this.opacity]))}}}var Ji="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDisplacements;\nstruct InstanceUniforms {instanceGroupModelMatrix:mat4x4<f32>,instanceModelMatrixs:array<mat4x4<f32>,100000>,instanceNormalModelMatrix:array<mat4x4<f32>,100000>,instanceOpacity:array<f32,100000>,useDisplacementTexture:u32,displacementScale:f32,\n};\n@group(1) @binding(0) var<storage,read> instanceUniforms:InstanceUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData {@builtin(instance_index) instanceIdx:u32,@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) instanceOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(14) receiveShadow:f32,@location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@vertex\nfn main( inputData:InputData ) -> OutputData {var output:OutputData;let input_instanceIdx:u32=inputData.instanceIdx;let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx];let u_normalModelMatrix=instanceUniforms.instanceNormalModelMatrix[input_instanceIdx];let u_instanceGroupModelMatrix=instanceUniforms.instanceGroupModelMatrix;let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u;let u_displacementScale=instanceUniforms.displacementScale;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0);let worldPosition=position.xyz;let margin:f32=0.5;var clipPosition:vec4<f32>=u_projectionMatrix * u_cameraMatrix * vec4<f32>(worldPosition,1.0);let ndcPosition:vec3<f32>=clipPosition.xyz/clipPosition.w;\noutput.position=clipPosition;var normalPosition:vec3<f32>=(u_instanceGroupModelMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0)).xyz;;if (u_useDisplacementTexture) {let distance=distance(position.xyz,u_cameraPosition);let mipLevel=(distance/maxDistance) * maxMipLevel;let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);position=u_modelMatrix * vec4<f32>(displacedPosition,1.0);}output.position=u_projectionMatrix * u_cameraMatrix * u_instanceGroupModelMatrix * position;output.vertexPosition=position.xyz;output.vertexNormal=normalPosition;output.uv=input_uv;output.instanceOpacity=instanceUniforms.instanceOpacity[input_instanceIdx];return output;\n}\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {var output:OutputShadowData;let input_instanceIdx:u32=inputData.instanceIdx;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx];let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u;let u_displacementScale=instanceUniforms.displacementScale;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;position=u_modelMatrix * vec4<f32>(input_position,1.0);if (u_useDisplacementTexture) {let distance=distance(position.xyz,u_directionalLightProjectionViewMatrix[3].xyz);let mipLevel=(distance/maxDistance) * maxMipLevel;let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);position=u_modelMatrix * vec4<f32>(displacedPosition,1.0);}output.position=u_directionalLightProjectionViewMatrix * position;return output;\n}\n";const Qi="VERTEX_BIND_GROUP_DESCRIPTOR_INSTANCING";class InstancingMesh extends Mesh{#b;#zo=1;#$o=[];constructor(i,m,g,x){super(i,g,x),this.#b=i,this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null),this.instanceCount=m,this.#qo(i)}get instanceCount(){return this.#zo}set instanceCount(i){validateUintRange(i),this.gpuRenderInfo.vertexUniformInfo=parseWGSL(Ji).storage.instanceUniforms;const m=new ArrayBuffer(this.gpuRenderInfo.vertexUniformInfo.arrayBufferByteLength),g=new StorageBuffer(this.#b,m,this.name),x=this.gpuRenderInfo.vertexUniformBuffer;x?.gpuBuffer&&copyGPUBuffer(this.#b.gpuDevice,x.gpuBuffer,g.gpuBuffer),x?.destroy(),this.gpuRenderInfo.vertexUniformBuffer=g;let _=i;for(;_--;)this.#$o[_]||(this.#$o[_]=new InstancingMeshObject3D(this.#b,_,this));this.#zo=i,this.#qo(this.#b)}get instanceChildren(){return this.#$o}render(i,m=!1){const{view:g,currentRenderPassEncoder:x}=i,{scene:_}=g,{shadowManager:b}=_,{directionalShadowManager:y}=b,{castingList:T}=y,w=this.parent;let P=this.dirtyTransform;P&&(identity$2(this.localMatrix),translate$1(this.localMatrix,this.localMatrix,[this.x,this.y,this.z]),rotateX$3(this.localMatrix,this.localMatrix,this.rotationX),rotateY$3(this.localMatrix,this.localMatrix,this.rotationY),rotateZ$3(this.localMatrix,this.localMatrix,this.rotationZ),scale$5(this.localMatrix,this.localMatrix,[this.scaleX,this.scaleY,this.scaleZ]),w?.modelMatrix?multiply$5(this.modelMatrix,this.localMatrix,w.modelMatrix):this.modelMatrix=clone$5(this.localMatrix)),this.geometry?i.num3DObjects++:i.num3DGroups++;const H=this.#b;if(this.geometry){const{antialiasingManager:g,gpuDevice:_}=H;g.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.#qo(H);const b=this.dirtyPipeline||this.material.dirtyPipeline,{displacementTexture:y,displacementScale:T}=this.material||{};b&&(this.dirtyTransform=!0,this.material.dirtyPipeline&&this.material._updateFragmentState(),this.#Ko(),this.material.dirtyPipeline=!1,this.dirtyPipeline=!1,i.numDirtyPipelines++);const{gpuRenderInfo:w}=this,{vertexUniformBuffer:P,vertexUniformBindGroup:z,vertexUniformInfo:$,pipeline:q,shadowPipeline:W}=w;void 0!==$.members.displacementScale&&_.queue.writeBuffer(P.gpuBuffer,$.members.displacementScale.uniformOffset,new $.members.displacementScale.View([T])),void 0!==$.members.useDisplacementTexture&&_.queue.writeBuffer(P.gpuBuffer,$.members.useDisplacementTexture.uniformOffset,new $.members.useDisplacementTexture.View([y?1:0])),this.dirtyTransform&&_.queue.writeBuffer(P.gpuBuffer,$.members.instanceGroupModelMatrix.uniformOffset,new $.members.instanceGroupModelMatrix.View(this.modelMatrix)),this.dirtyTransform=!1,x.setPipeline(m?W:q);const{gpuBuffer:ye}=this.geometry.vertexBuffer,{fragmentUniformBindGroup:Ge}=this.material.gpuRenderInfo;if(i.prevVertexGpuBuffer!==ye&&(x.setVertexBuffer(0,ye),i.prevVertexGpuBuffer=ye),x.setBindGroup(1,z),x.setBindGroup(2,Ge),i.numDrawCalls++,i.numInstances++,this.geometry.indexBuffer){const{indexBuffer:m}=this.geometry,{indexNum:g,triangleCount:_,gpuBuffer:b}=m;x.setIndexBuffer(b,"uint32"),x.drawIndexed(g,this.#zo,0,0,0),i.numTriangles+=_*this.#zo,i.numPoints+=g*this.#zo}else{const{vertexBuffer:m}=this.geometry,{vertexCount:g,triangleCount:_}=m;x.draw(g,this.#zo,0,0),i.numTriangles+=_,i.numPoints+=g}}this.castShadow&&(T[T.length]=this);const{children:z}=this;let $=z.length;for(;$--;)z[$].dirtyTransform=P,z[$].render(i);this.dirtyTransform=!1}#qo(i){this.dirtyPipeline=!0;const{resourceManager:m}=this.#b,g=m.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),{basicSampler:x,emptyBitmapTextureView:_,emptyCubeTextureView:b}=m,{gpuSampler:y}=x,{vertexUniformBuffer:T}=this.gpuRenderInfo,{material:w}=this,P={layout:g,label:Qi,entries:[{binding:0,resource:{buffer:T.gpuBuffer,offset:0,size:T.size}},{binding:1,resource:w?.displacementTextureSampler?.gpuSampler||y},{binding:2,resource:w?.displacementTexture?.gpuTexture?.createView()||_}]},H=i.gpuDevice.createBindGroup(P);this.#Ko(),this.gpuRenderInfo.vertexBindGroupLayout=g,this.gpuRenderInfo.vertexUniformBindGroup=H}#Ko(){const{resourceManager:i}=this.#b,m={code:Ji},g=i.createGPUShaderModule("VERTEX_MODULE_INSTANCING",m),{vertexUniformBuffer:x}=this.gpuRenderInfo,{material:_}=this,{basicSampler:b,emptyBitmapTextureView:y,emptyCubeTextureView:T}=i,{gpuSampler:w}=b,P=i.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),H={layout:P,label:Qi,entries:[{binding:0,resource:{buffer:x.gpuBuffer,offset:0,size:x.size}},{binding:1,resource:_?.displacementTextureSampler?.gpuSampler||w},{binding:2,resource:_?.displacementTexture?.gpuTexture?.createView()||y}]};this.gpuRenderInfo.vertexUniformBindGroup=this.redGPUContext.gpuDevice.createBindGroup(H),this.gpuRenderInfo.pipeline=createBasePipeline(this,g,P),this.gpuRenderInfo.shadowPipeline=createBasePipeline(this,g,P,Nr)}}async function float32ToUint8WithToneMapping(i,m,g){const x=performance.now(),{gpuDevice:_}=i,{exposure:b,width:y,height:T,workgroupSize:w=[8,8]}=g,P=m.length/4,H=function(i){return`struct Constants {exposure:f32,width:u32,height:u32,}@group(0) @binding(0) var<storage,read> inputData:array<f32>;@group(0) @binding(1) var<storage,read_write> outputData:array<u32>;@group(0) @binding(2) var<uniform> constants:Constants;/* ACES 톤매핑 함수 */fn acesToneMapping(x:f32) -> f32 {let a=2.51;let b=0.03;let c=2.43;let d=0.59;let e=0.14;return max(0.0,(x * (a * x + b))/(x * (c * x + d) + e));}/* Linear → sRGB 감마 보정 */fn linearToSRGB(linearValue:f32) -> f32 {if (linearValue <=0.0031308) {return 12.92 * linearValue;} else {return 1.055 * pow(linearValue,1.0/2.4) - 0.055;}}@compute @workgroup_size(${i[0]},${i[1]})fn main(@builtin(global_invocation_id) global_id:vec3<u32>) {let x=global_id.x;let y=global_id.y;/* 범위 체크 */if (x >=constants.width || y >=constants.height) {return;}let pixelIndex=y * constants.width + x;let baseIndex=pixelIndex * 4u;/* 🎯 RGBA 각 채널 처리 */var processedPixel=0u;for (var channel=0u;channel < 4u;channel++) {let inputIndex=baseIndex + channel;let originalVal=inputData[inputIndex];/* 🎯 노출값 적용 */let exposedVal=originalVal * constants.exposure;/* 🎬 ACES 톤매핑 적용 */let toneMappedVal=acesToneMapping(exposedVal);/* 🔧 감마 보정 적용 (sRGB) */let gammaCorrectedVal=linearToSRGB(toneMappedVal);/* 🎯 최종 8bit 변환 */let uint8Val=u32(round(clamp(gammaCorrectedVal,0.0,1.0) * 255.0));/* 🔧 4개 채널을 하나의 u32에 패킹 */processedPixel |=(uint8Val << (channel * 8u));}outputData[pixelIndex]=processedPixel;}`}(w);try{const i=_.createShaderModule({code:H,label:"hdr_tonemapping_shader"}),g=function(i,m,g){const x=i.createBuffer({size:m.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"hdr_input_float32_buffer"}),_=i.createBuffer({size:4*g,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC,label:"hdr_output_uint8_buffer"}),b=i.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"hdr_constants_buffer"}),y=i.createBuffer({size:4*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"hdr_read_buffer"});return i.queue.writeBuffer(x,0,m),{inputBuffer:x,outputBuffer:_,constantsBuffer:b,readBuffer:y}}(_,m,P);!function(i,m,g,x,_){const b=new ArrayBuffer(12),y=new DataView(b);y.setFloat32(0,g,!0),y.setUint32(4,x,!0),y.setUint32(8,_,!0),i.queue.writeBuffer(m,0,b)}(_,g.constantsBuffer,b,y,T);const{computePipeline:z,bindGroup:$}=function(i,m,g){const x=i.createComputePipeline({layout:"auto",compute:{module:m,entryPoint:"main"},label:"hdr_tonemapping_pipeline"}),_=i.createBindGroup({layout:x.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g.inputBuffer}},{binding:1,resource:{buffer:g.outputBuffer}},{binding:2,resource:{buffer:g.constantsBuffer}}],label:"hdr_tonemapping_bindgroup"});return{computePipeline:x,bindGroup:_}}(_,i,g),q=await async function(i,m,g,x,_,b,y,T,w){const P=i.createCommandEncoder({label:"hdr_tonemapping_encoder"}),H=P.beginComputePass({label:"hdr_tonemapping_pass"});H.setPipeline(m),H.setBindGroup(0,g);const z=Math.ceil(b/T[0]),$=Math.ceil(y/T[1]);if(z>65535||$>65535)throw new Error(`이미지가 너무 큽니다. 최대 크기:${65535*T[0]} × ${65535*T[1]}`);H.dispatchWorkgroups(z,$),H.end(),P.copyBufferToBuffer(x,0,_,0,4*w),i.queue.submit([P.finish()]),await _.mapAsync(GPUMapMode.READ);const q=new Uint32Array(_.getMappedRange()),W=q.byteLength>0?new Uint8Array(q.buffer.slice(q.byteOffset,q.byteOffset+q.byteLength)):new Uint8Array(4);return _.unmap(),W}(_,z,$,g.outputBuffer,g.readBuffer,y,T,w,P);!function(i){i.inputBuffer.destroy(),i.outputBuffer.destroy(),i.constantsBuffer.destroy(),i.readBuffer.destroy()}(g);return{data:q,processedPixels:P,executionTime:performance.now()-x}}catch(i){throw console.error("톤매핑 처리 실패:",i),i}}Object.defineProperty(InstancingMesh.prototype,"meshType",{value:"instanceMesh",writable:!1});class HDRLoader{#Wo=!0;constructor(i=!0){this.#Wo=i}get enableDebugLogs(){return this.#Wo}set enableDebugLogs(i){this.#Wo=i}async loadHDRFile(i){this.#Wo&&zi(`HDR 파일 로딩 시작:${i}`);const m=await fetch(i);if(!m.ok)throw new Error(`HTTP ${m.status}:${m.statusText}`);const g=await m.arrayBuffer(),x=new Uint8Array(g),_=this.#Xo(x,i);return this.#Yo(_)}#Yo(i){this.#Wo&&zi("HDR 데이터 분석 시작 (원본 데이터 보존)...");const m=this.#jo(i),g=this.#Zo(m);return this.#Wo&&zi(`권장 노출값 계산:${g.toFixed(3)} (원본 데이터는 보존)`),{...i,recommendedExposure:g,luminanceStats:m}}#jo(i){let m=1/0,g=0,x=0;const _=i.width*i.height;for(let _=0;_<i.data.length;_+=4){const b=.2126*i.data[_]+.7152*i.data[_+1]+.0722*i.data[_+2];m=Math.min(m,b),g=Math.max(g,b),x+=b}return{min:Math.max(.001,m),max:g,average:Math.max(.001,x/_),median:Math.max(.001,x/_)}}#Zo(i){const{average:m,median:g,max:x}=i;let _=.18;m<.01?_=.5:m<.05?_=.36:m>2?_=.09:m>.8&&(_=.12);let b=_/Math.max(Math.pow(m*g,.5),.001);const y=x/Math.max(i.min,.001);m<.05?b*=2.5:m<.1&&(b*=1.8),y>1e3?b*=.8:y>100&&(b*=.9),x>10?b*=.5:x>5?b*=.7:x>2&&(b*=.85);const T=g/m;return T<.3?b*=.8:T>1.5&&(b*=1.2),b=Math.max(1,Math.min(15,b)),b}#Xo(i,m){const g=this.#Jo(i);if(this.#Wo&&zi(`파일 형식:${g.format}`),!g.isValid)throw new Error(g.error||"지원되지 않는 파일 형식입니다");if(m.toLowerCase().endsWith(".hdr")){this.#Wo&&this.#Qo(i.slice(0,200));const m=this.#eu(i);return this.#Wo&&this.#tu(m),m}throw m.toLowerCase().endsWith(".exr")?new Error("EXR format not supported yet"):new Error(`Unsupported HDR format:${m}`)}#eu(i){let m=0,g="";const x={};for(;m<i.length;){const x=String.fromCharCode(i[m++]);if("\n"===x)break;g+=x}if(!g.startsWith("#?RADIANCE")&&!g.startsWith("#?RGBE"))throw new Error("Invalid HDR file header");for(;m<i.length;){for(g="";m<i.length;){const x=String.fromCharCode(i[m++]);if("\n"===x)break;g+=x}if(""===g.trim())break;const _=g.indexOf("=");if(_>0){const i=g.substring(0,_).trim(),m=g.substring(_+1).trim();x[i]=m}}for(g="";m<i.length;){const x=String.fromCharCode(i[m++]);if("\n"===x)break;g+=x}const _=g.match(/-Y\s+(\d+)\s+\+X\s+(\d+)/);if(!_)throw new Error("Invalid resolution format in HDR file");const b=parseInt(_[1]),y=parseInt(_[2]);let T;x.EXPOSURE&&(T=parseFloat(x.EXPOSURE),this.#Wo&&zi(`파일 노출값:${T.toFixed(3)}`));const w=new Float32Array(y*b*4);let P=0;for(let g=0;g<b;g++){const g=this.#nu(i,m,y);m=g.nextOffset;for(let i=0;i<y;i++){const m=4*i,x=g.data[m],_=g.data[m+1],b=g.data[m+2],y=g.data[m+3];if(0===y)w[P++]=0,w[P++]=0,w[P++]=0,w[P++]=1;else{const i=Math.pow(2,y-128-8);w[P++]=x*i,w[P++]=_*i,w[P++]=b*i,w[P++]=1}}}return{data:w,width:y,height:b,exposure:T}}#Jo(i){if(i.length<50)return{isValid:!1,format:"unknown",error:"파일이 너무 작습니다"};const m=new TextDecoder("ascii",{fatal:!1}).decode(i.slice(0,50));return m.startsWith("#?RADIANCE")||m.startsWith("#?RGBE")?{isValid:!0,format:"RGBE/Radiance"}:m.includes("RADIANCE")||m.includes("RGBE")?{isValid:!0,format:"RGBE/Radiance (variant)"}:{isValid:!1,format:"unknown",error:"지원되지 않는 HDR 형식입니다"}}#nu(i,m,g){const x=new Uint8Array(4*g);if(2===i[m]&&2===i[m+1]&&i[m+2]===(g>>8&255)&&i[m+3]===(255&g)){m+=4;for(let _=0;_<4;_++){let b=_;for(;b<4*g;){const _=i[m++];if(_>128){const y=_-128,T=i[m++];for(let i=0;i<y&&b<4*g;i++)x[b]=T,b+=4}else{const y=_;for(let _=0;_<y&&b<4*g;_++)x[b]=i[m++],b+=4}}}}else for(let _=0;_<4*g;_++)x[_]=i[m++];return{data:x,nextOffset:m}}#tu(i){if(this.#Wo){zi("HDR 정보:"),zi(`크기:${i.width} x ${i.height}`),zi(`데이터 길이:${i.data.length}`),zi("예상 픽셀 수:"+i.width*i.height*4);for(let m=0;m<Math.min(16,i.data.length);m+=4)i.data[m],i.data[m+1],i.data[m+2],i.data[m+3]}}#Qo(i){if(this.#Wo)for(let m=0;m<i.length;m+=16)Array.from(i.slice(m,m+16)).map(i=>i.toString(16).padStart(2,"0")).join(" "),Array.from(i.slice(m,m+16)).map(i=>i>=32&&i<=126?String.fromCharCode(i):".").join("")}}class HDRTexture extends ManagedResourceBase{#Z;#Tt;#Q;#ee;#te;#ru;#re=0;#iu=1024;#au=new HDRLoader;#ie;#su=1;#ou=1;#uu;#ae;#se;#lu=!1;constructor(i,m,g,x,_=1024,b=!0){if(super(i,"managedHDRTextureState"),this.#ae=g,this.#se=x,this.#ie="rgba8unorm",this.#iu=_,this.useMipmap=b,m){this.#cu(m),this.#Tt=m,this.#Q=this.uuid;const{table:i}=this.targetResourceManagedState;let g;for(const m in i)if(i[m].cacheKey===this.#Q){g=i[m];break}if(g){const m=i[g.uuid].texture;return this.#ae?.(m),m}this.src=m,this.#oe()}}#cu(i){if(!i||"string"!=typeof i)throw new Error("HDR 파일 경로가 필요합니다");if(!i.toLowerCase().endsWith(".hdr"))throw new Error(`지원되지 않는 형식입니다. .hdr 형식만 지원됩니다. 입력된 파일:${i}`)}get cacheKey(){return this.#Q}get videoMemorySize(){return this.#re}get gpuTexture(){return this.#Z}get mipLevelCount(){return this.#ee}get src(){return this.#Tt}set src(i){const m=i?.src||i;this.#cu(m),this.#Tt=m,this.#Q=i?.cacheKey||m||this.uuid,this.#lu=!1,this.#Tt&&this.#hu(this.#Tt)}get useMipmap(){return this.#te}set useMipmap(i){this.#te!==i&&(this.#te=i,this.#ee=this.#te?getMipLevelCount(this.#iu,this.#iu):1,this.#lu=!1,this.#le())}get exposure(){return this.#su}#fu=null;set exposure(i){const m=Math.max(.01,Math.min(20,i));this.#su!==m&&(this.#su=m,this.#fu&&clearTimeout(this.#fu),this.#fu=setTimeout(()=>{this.#ru&&(this.#lu&&this.#Z?this.#du():this.#le()),this.#fu=null},50))}get recommendedExposure(){return this.#ou}get luminanceAnalysis(){return this.#uu}resetToRecommendedExposure(){this.exposure=this.#ou}static isSupportedFormat(i){return!(!i||"string"!=typeof i)&&i.toLowerCase().endsWith(".hdr")}static getSupportedFormats(){return[".hdr"]}destroy(){const i=this.#Z;this.#ce(null),this.#lu=!1,this.__fireListenerList(!0),this.#Tt=null,this.#Q=null,this.#uu=null,this.#he(),i&&i.destroy()}async#hu(i){try{const m=await this.#au.loadHDRFile(i);this.#ru=m,this.#ou=m.recommendedExposure||1,this.#su=this.#ou,m.luminanceStats&&(this.#uu={averageLuminance:m.luminanceStats.average,maxLuminance:m.luminanceStats.max,minLuminance:m.luminanceStats.min,medianLuminance:m.luminanceStats.median,percentile95:.95*m.luminanceStats.max,percentile99:.99*m.luminanceStats.max,recommendedExposure:this.#ou},zi("휘도 분석 완료:",this.#uu)),zi(`HDR 데이터 로드 완료:${m.width}x${m.height},권장 노출:${this.#ou.toFixed(3)},현재 노출:${this.#su.toFixed(3)}`),await this.#le(),this.#ae?.(this)}catch(i){console.error("HDR loading error (.hdr 형식):",i),this.#se?.(i)}}#ce(i){this.#Z=i,i||(this.#ru=null,this.#lu=!1),this.__fireListenerList()}#oe(){basicRegisterResource(this,new ResourceStateBitmapTexture(this))}#he(){basicUnregisterResource(this)}async#le(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext;if(this.#lu&&this.#Z)return void await this.#du();await i.queue.onSubmittedWorkDone();const g=this.#Z;this.#Z=null,this.targetResourceManagedState.videoMemory-=this.#re,this.#re=0;const x={size:[this.#iu,this.#iu,6],format:this.#ie,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#ee,dimension:"2d",label:`${this.#Tt}_cubemap_exp${this.#su.toFixed(2)}`},_=i.createTexture(x);this.#ce(_),this.#ee=x.mipLevelCount||1,this.#re=calculateTextureByteSize(x),this.targetResourceManagedState.videoMemory+=this.#re,await this.#du(),this.#lu=!0,g&&(await i.queue.onSubmittedWorkDone(),g.destroy())}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#ee}}async#du(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;if(!this.#Z)return void console.warn("큐브맵 텍스처가 없어 업데이트를 건너뜁니다.");if(!this.#ru)return void console.warn("HDR 데이터가 없어 업데이트를 건너뜁니다.");const{width:x,height:_}=this.#ru,b={size:[x,_],format:this.#ie,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`${this.#Tt}_temp_exp${this.#su.toFixed(2)}`},y=await this.#mu(i,this.#ru,b);await this.#pu(y),y.destroy(),this.#te&&g.generateMipmap(this.#Z,{size:[this.#iu,this.#iu,6],format:this.#ie,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#ee,dimension:"2d"})}async#pu(i){const{gpuDevice:m,resourceManager:g}=this.redGPUContext,x=m.createShaderModule({code:"struct VertexOutput {@builtin(position) position:vec4<f32>,@location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput {var pos=array<vec2<f32>,6>(vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0),vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0));var texCoord=array<vec2<f32>,6>(vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0),vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0));var output:VertexOutput;output.position=vec4<f32>(pos[vertexIndex],0.0,1.0);output.texCoord=texCoord[vertexIndex];return output;\n}\n@group(0) @binding(0) var equirectangularTexture:texture_2d<f32>;\n@group(0) @binding(1) var textureSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> {let ndc=vec2<f32>(input.texCoord.x * 2.0 - 1.0,(1.0 - input.texCoord.y) * 2.0 - 1.0);var localDirection=vec3<f32>(ndc.x,ndc.y,1.0);let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz);let theta=atan2(worldDirection.z,worldDirection.x);let phi=acos(clamp(worldDirection.y,-1.0,1.0));var u=(theta + 3.14159265359)/(2.0 * 3.14159265359);var v=phi/3.14159265359;u=fract(u + 1.0);v=clamp(v,0.0001,0.9999);let color=textureSample(equirectangularTexture,textureSampler,vec2<f32>(u,v));return color;\n}\n"}),_=m.createRenderPipeline({layout:"auto",vertex:{module:x,entryPoint:"vs_main"},fragment:{module:x,entryPoint:"fs_main",targets:[{format:this.#ie}]}}),b=new Sampler(this.redGPUContext,{magFilter:yr.LINEAR,minFilter:yr.LINEAR,mipmapFilter:Tr.LINEAR,addressModeU:br.CLAMP_TO_EDGE,addressModeV:br.CLAMP_TO_EDGE,addressModeW:br.CLAMP_TO_EDGE}),y=this.#gu();for(let m=0;m<6;m++)await this.#xu(_,b,m,y[m],i)}async#mu(i,m,g){const x=i.createTexture(g);let _,b;if("rgba8unorm"!==this.#ie)throw new Error(`지원되지 않는 텍스처 포맷:${this.#ie}`);_=4;b=(await this.#_u(m.data)).buffer;return i.queue.writeTexture({texture:x},b,{bytesPerRow:m.width*_,rowsPerImage:m.height},{width:m.width,height:m.height}),x}async#_u(i){return(await float32ToUint8WithToneMapping(this.redGPUContext,i,{exposure:this.#su,width:this.#ru.width,height:this.#ru.height,workgroupSize:[8,8]})).data}#gu(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}async#xu(i,m,g,x,_){const{gpuDevice:b}=this.redGPUContext,y=b.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`hdr_face_${g}_uniform`});b.queue.writeBuffer(y,0,x);const T=b.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:_.createView()},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:y}}]}),w=b.createCommandEncoder(),P=w.beginRenderPass({colorAttachments:[{view:this.#Z.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});P.setPipeline(i),P.setBindGroup(0,T),P.draw(6,1,0,0),P.end(),b.queue.submit([w.finish()]),y.destroy()}}Object.freeze(HDRTexture);var ea="#redgpu_include SYSTEM_UNIFORM;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec4<f32>,\n};\nstruct VertexUniforms {modelMatrix:mat4x4<f32>,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@vertex\nfn main(inputData:InputData) -> OutData {var outData:OutData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;outData.position=u_projectionMatrix * u_cameraMatrix * vertexUniforms.modelMatrix * vec4<f32>(inputData.position,1.0);outData.vertexPosition=0.5 * (vec4<f32>(inputData.position,1.0) + vec4<f32>(1.0,1.0,1.0,1.0));return outData;\n}\n";const ta=parseWGSL("\nstruct Uniforms {opacity:f32,useSkyboxTexture:u32,blur:f32,transitionProgress:f32,useTransitionAlphaTexture:u32\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var skyboxTextureSampler:sampler;\n@group(2) @binding(2) var skyboxTexture:texture_cube<f32>;\n@group(2) @binding(3) var transitionTexture:texture_cube<f32>;\n@group(2) @binding(4) var transitionAlphaTexture:texture_2d<f32>;\nstruct InputData {@location(0) vertexPosition:vec4<f32>,\n};\nfn sphericalToUV(dir:vec3<f32>) -> vec2<f32> {let normalizedDir=normalize(dir);let phi=atan2(normalizedDir.z,normalizedDir.x);let theta=acos(clamp(normalizedDir.y,-1.0,1.0));let u=(phi + 3.14159265359)/(2.0 * 3.14159265359);let v=theta/3.14159265359;return vec2<f32>(u,v);\n}\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> {var cubemapVec=inputData.vertexPosition.xyz - vec3<f32>(0.5);let mipmapCount:f32=f32(textureNumLevels(skyboxTexture) - 1);let blurCurve=uniforms.blur * uniforms.blur;let skyboxColor=textureSampleLevel(skyboxTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve);var sampleColor=skyboxColor;let u_transitionProgress=uniforms.transitionProgress;if(u_transitionProgress > 0.0){let transitionSample=textureSampleLevel(transitionTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve);if(uniforms.useTransitionAlphaTexture==1u){let uv=sphericalToUV(normalize(cubemapVec));let transitionAlphaSample=textureSampleLevel(transitionAlphaTexture,skyboxTextureSampler,uv,0.0);let transitionAlphaValue=dot(transitionAlphaSample.rgb,vec3<f32>(0.299,0.587,0.114));let threshold=u_transitionProgress;let noiseInfluence=0.3;let edgeSoftness=0.1;let maskValue=smoothstep(threshold - edgeSoftness,threshold + edgeSoftness,transitionAlphaValue + (u_transitionProgress - 0.5) * noiseInfluence);sampleColor=mix( transitionSample,skyboxColor,maskValue * (1.0 - u_transitionProgress));}else{sampleColor=mix( skyboxColor,transitionSample,u_transitionProgress );}}var outColor=vec4<f32>(sampleColor.rgb,sampleColor.a * uniforms.opacity);if(outColor.a==0.0) {discard;}return outColor;\n}\n");class SkyBoxMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m){super(i,"SKYBOX_MATERIAL",ta,2),this.skyboxTexture=m,this.skyboxTextureSampler=new Sampler(this.redGPUContext,{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}),this.initGPURenderInfos()}}kn.definePositiveNumber(SkyBoxMaterial,[["blur",0]]),kn.definePositiveNumber(SkyBoxMaterial,[["transitionProgress",0]]),kn.defineCubeTexture(SkyBoxMaterial,["transitionTexture"]),kn.defineTexture(SkyBoxMaterial,["transitionAlphaTexture"]),kn.defineCubeTexture(SkyBoxMaterial,["skyboxTexture"]),kn.defineSampler(SkyBoxMaterial,["skyboxTextureSampler"]),Object.freeze(SkyBoxMaterial);const na=parseWGSL(ea),ra=na.uniforms.vertexUniforms;class View2D extends View3D{constructor(i,m,g){super(i,m,new Camera2D,g)}}Object.freeze(View2D);const ia=Math.PI/180;class GroupBase extends Object3DContainer{modelMatrix=create$5();localMatrix=create$5();#e;#a;#Fn;#n=0;#i=0;#r=0;#Nn=[0,0,0];#Gn=0;#Vn=0;#Hn=0;#$n=1;#qn=1;#Kn=1;#Wn=[1,1,1];#o=0;#u=0;#l=0;#Xn=[0,0,0];#vu=!0;constructor(i){super(),i&&(this.name=i)}get dirtyTransform(){return this.#vu}set dirtyTransform(i){this.#vu=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get parent(){return this.#Fn}set parent(i){this.#Fn=i}get pivotX(){return this.#Gn}set pivotX(i){this.#Gn=i,this.dirtyTransform=!0}get pivotY(){return this.#Vn}set pivotY(i){this.#Vn=i,this.dirtyTransform=!0}get pivotZ(){return this.#Hn}set pivotZ(i){this.#Hn=i,this.dirtyTransform=!0}get x(){return this.#n}set x(i){this.#n=this.#Nn[0]=i,this.dirtyTransform=!0}get y(){return this.#r}set y(i){this.#r=this.#Nn[1]=i,this.dirtyTransform=!0}get z(){return this.#i}set z(i){this.#i=this.#Nn[2]=i,this.dirtyTransform=!0}get position(){return this.#Nn}get scaleX(){return this.#$n}set scaleX(i){this.#$n=this.#Wn[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#qn}set scaleY(i){this.#qn=this.#Wn[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#Kn}set scaleZ(i){this.#Kn=this.#Wn[2]=i,this.dirtyTransform=!0}get scale(){return this.#Nn}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#Xn[0]=i,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#Xn[1]=i,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#Xn[2]=i,this.dirtyTransform=!0}get rotation(){return this.#Xn}setScale(i,m,g){m=m??i,g=g??i;const x=this.#Wn;this.#$n=x[0]=i,this.#qn=x[1]=m,this.#Kn=x[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const x=this.#Nn;this.#n=x[0]=i,this.#r=x[1]=m,this.#i=x[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const x=this.#Xn;this.#o=x[0]=i,this.#u=x[1]=m,this.#l=x[2]=g,this.dirtyTransform=!0}render(i){const{view:m,isScene2DMode:g}=i;let x;if(g&&(this.#i=0,this.#Hn=0),this.dirtyTransform){x=!0;{const{pixelRectObject:i}=m,g=this.parent,x=this.localMatrix;identity$2(x),translate$1(x,x,[this.#n,this.#r,this.#i]),rotateX$3(x,x,this.#o*ia),rotateY$3(x,x,this.#u*ia),rotateZ$3(x,x,this.#l*ia);let _=[this.#$n,this.#qn,this.#Kn];if(this.renderTextureWidth&&(_[0]*=this.renderTextureWidth/i.height,_[1]*=this.renderTextureHeight/i.height),scale$5(x,x,_),this.#Gn||this.#Vn||this.#Hn){translate$1(x,x,[-this.#Gn,-this.#Vn,-this.#Hn])}g?.modelMatrix?multiply$5(this.modelMatrix,g.modelMatrix,this.localMatrix):copy$5(this.modelMatrix,this.localMatrix)}}this.dirtyTransform&&(x=!0,this.dirtyTransform=!1),i.num3DGroups++;const{children:_}=this;let b=0;const y=_.length;for(;b<y;b++)x&&(_[b].dirtyTransform=x),_[b].render(i)}}Object.defineProperty(GroupBase.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(GroupBase);class Group2D extends GroupBase{#e;#a;#bu=0;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get rotation(){return this.#bu}set rotation(i){this.#bu=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}}Object.defineProperty(Group2D.prototype,"is2DMeshType",{value:!0,writable:!1}),Object.freeze(Group2D);class Group3D extends GroupBase{#e;#a;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}}Object.defineProperty(Group3D.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(Group3D);const aa={Linear:0,QuintIn:1,QuintOut:2,QuintInOut:3,BackIn:4,BackOut:5,BackInOut:6,CircIn:7,CircOut:8,CircInOut:9,CubicIn:10,CubicOut:11,CubicInOut:12,ExpoIn:13,ExpoOut:14,ExpoInOut:15,QuadIn:16,QuadOut:17,QuadInOut:18,QuartIn:19,QuartOut:20,QuartInOut:21,SineIn:22,SineOut:23,SineInOut:24,ElasticIn:25,ElasticOut:26,ElasticInOut:27};var sa="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,useBillboardPerspective:u32,useBillboard:u32,combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData {@location(0) a_position:vec3<f32>,@location(1) a_normal:vec3<f32>,@location(2) a_uv:vec2<f32>,@location(3) position:vec3<f32>,@location(4) alpha:f32,@location(5) rotation:vec3<f32>,@location(6) scale:f32,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(14) receiveShadow:f32,@location(15) pickingId:vec4<f32>,\n};\nfn mat4_inverse(a:mat4x4<f32>) -> mat4x4<f32> {var a00:f32=a[0][0];var a01:f32=a[0][1];var a02:f32=a[0][2];var a03:f32=a[0][3];var a10:f32=a[1][0];var a11:f32=a[1][1];var a12:f32=a[1][2];var a13:f32=a[1][3];var a20:f32=a[2][0];var a21:f32=a[2][1];var a22:f32=a[2][2];var a23:f32=a[2][3];var a30:f32=a[3][0];var a31:f32=a[3][1];var a32:f32=a[3][2];var a33:f32=a[3][3];var b00:f32=a00*a11 - a01*a10;var b01:f32=a00*a12 - a02*a10;var b02:f32=a00*a13 - a03*a10;var b03:f32=a01*a12 - a02*a11;var b04:f32=a01*a13 - a03*a11;var b05:f32=a02*a13 - a03*a12;var b06:f32=a20*a31 - a21*a30;var b07:f32=a20*a32 - a22*a30;var b08:f32=a20*a33 - a23*a30;var b09:f32=a21*a32 - a22*a31;var b10:f32=a21*a33 - a23*a31;var b11:f32=a22*a33 - a23*a32;var det:f32=b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06;if (det !=0.0) {det=1.0/det;return mat4x4<f32>((a11*b11 - a12*b10 + a13*b09) * det,(a02*b10 - a01*b11 - a03*b09) * det,(a31*b05 - a32*b04 + a33*b03) * det,(a22*b04 - a21*b05 - a23*b03) * det,(a12*b08 - a10*b11 - a13*b07) * det,(a00*b11 - a02*b08 + a03*b07) * det,(a32*b02 - a30*b05 - a33*b01) * det,(a20*b05 - a22*b02 + a23*b01) * det,(a10*b10 - a11*b08 + a13*b06) * det,(a01*b08 - a00*b10 - a03*b06) * det,(a30*b04 - a31*b02 + a33*b00) * det,(a21*b02 - a20*b04 - a23*b00) * det,(a11*b07 - a10*b09 - a12*b06) * det,(a00*b09 - a01*b07 + a02*b06) * det,(a31*b01 - a30*b03 - a32*b00) * det,(a20*b03 - a21*b01 + a22*b00) * det);}return mat4x4<f32>(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);\n}\nfn rotationMTX(t:vec3<f32>)->mat4x4<f32>\n{var s:f32=sin(t.x);var c:f32=cos(t.x);var m1=mat4x4<f32>(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1);s=sin(t[1]);c=cos(t[1]);var m2=mat4x4<f32>(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1);s=sin(t[2]);c=cos(t[2]);var m3=mat4x4<f32>(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1);return m1 * m2 * m3;\n}\n@vertex\nfn main( inputData:InputData) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_resolution=systemUniforms.resolution;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective==1u;let u_useBillboard=vertexUniforms.useBillboard==1u;let input_position=inputData.position;var position:vec4<f32>;var normalPosition:vec4<f32>;var scaleMTX=mat4x4<f32>(inputData.scale,0,0,0,0,inputData.scale,0,0,0,0,inputData.scale,0,0,0,0,1);var translateTX=mat4x4<f32>(1,0,0,0,0,1,0,0,0,0,1,0,inputData.position.x,inputData.position.y,inputData.position.z,1);var temp:mat4x4<f32>;if(u_useBillboard){var rotateMTX2=rotationMTX( vec3(0,0,inputData.rotation.z) );temp=translateTX * rotateMTX2;position=rotateMTX2 * vec4<f32>(inputData.a_position,1);output.position=u_projectionMatrix * getBillboardMatrixNoScaleRatio( u_cameraMatrix,temp ) * scaleMTX * position;}else{var rotateMTX=rotationMTX( inputData.rotation );temp=translateTX * rotateMTX * scaleMTX;position=temp * vec4<f32>(inputData.a_position,1);output.position=u_projectionMatrix * u_cameraMatrix * position;}output.vertexPosition=position.xyz;output.vertexNormal=(transpose(mat4_inverse(temp) ) * vec4<f32>(inputData.a_normal,1.0)).xyz;output.uv=inputData.a_uv;output.combinedOpacity=vertexUniforms.combinedOpacity;return output;\n}\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n";const oa=parseWGSL(sa),ua=oa.uniforms.vertexUniforms;class ParticleEmitter extends Mesh{#yu=1e3;#Tu=5e3;#Su=0;#wu=0;#Mu=0;#Ru=0;#Cu=0;#Pu=0;#Eu=-5;#Iu=-5;#Bu=-5;#Lu=5;#Du=5;#Uu=5;#Au=0;#ku=0;#Ou=1;#Fu=1;#Nu=0;#Gu=1;#Vu=0;#Hu=0;#zu=-360;#$u=-360;#qu=-360;#Ku=360;#Wu=360;#Xu=360;#Yu=-360;#ju=-360;#Zu=-360;#Ju=360;#Qu=360;#el=360;#tl=aa.CubicOut;#nl=aa.CubicOut;#rl=aa.CubicOut;#il=aa.Linear;#al=aa.Linear;#sl=aa.CubicOut;#ol=aa.CubicOut;#ul=aa.CubicOut;#ll;#cl;#hl;#Mi;#fl;#dl=2e3;constructor(i){super(i),this.geometry=new Plane(i),this.material=new BitmapMaterial(i),this.ignoreFrustumCulling=!0,this.useBillboard=!0}get vertexStateBuffers(){return[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x3"},{shaderLocation:2,offset:24,format:"float32x2"}]},{arrayStride:48,stepMode:"instance",attributes:[{shaderLocation:3,offset:16,format:"float32x3"},{shaderLocation:4,offset:28,format:"float32"},{shaderLocation:5,offset:32,format:"float32x3"},{shaderLocation:6,offset:44,format:"float32"}]}]}get particleBuffers(){return this.#cl}get particleNum(){return this.#dl}set particleNum(i){this.#dl=Math.max(Math.min(i,5e5),1),this.#ml()}get minLife(){return this.#yu}set minLife(i){this.#yu=i}get maxLife(){return this.#Tu}set maxLife(i){this.#Tu=i}get minStartX(){return this.#Su}set minStartX(i){this.#Su=i}get minStartY(){return this.#wu}set minStartY(i){this.#wu=i}get minStartZ(){return this.#Mu}set minStartZ(i){this.#Mu=i}get maxStartX(){return this.#Ru}set maxStartX(i){this.#Ru=i}get maxStartY(){return this.#Cu}set maxStartY(i){this.#Cu=i}get maxStartZ(){return this.#Pu}set maxStartZ(i){this.#Pu=i}get minEndX(){return this.#Eu}set minEndX(i){this.#Eu=i}get minEndY(){return this.#Iu}set minEndY(i){this.#Iu=i}get minEndZ(){return this.#Bu}set minEndZ(i){this.#Bu=i}get maxEndX(){return this.#Lu}set maxEndX(i){this.#Lu=i}get maxEndY(){return this.#Du}set maxEndY(i){this.#Du=i}get maxEndZ(){return this.#Uu}set maxEndZ(i){this.#Uu=i}get minStartAlpha(){return this.#Au}set minStartAlpha(i){this.#Au=i}get maxStartAlpha(){return this.#ku}set maxStartAlpha(i){this.#ku=i}get minEndAlpha(){return this.#Ou}set minEndAlpha(i){this.#Ou=i}get maxEndAlpha(){return this.#Fu}set maxEndAlpha(i){this.#Fu=i}get minStartScale(){return this.#Nu}set minStartScale(i){this.#Nu=i}get maxStartScale(){return this.#Gu}set maxStartScale(i){this.#Gu=i}get minEndScale(){return this.#Vu}set minEndScale(i){this.#Vu=i}get maxEndScale(){return this.#Hu}set maxEndScale(i){this.#Hu=i}get minStartRotationX(){return this.#zu}set minStartRotationX(i){this.#zu=i}get minStartRotationY(){return this.#$u}set minStartRotationY(i){this.#$u=i}get minStartRotationZ(){return this.#qu}set minStartRotationZ(i){this.#qu=i}get maxStartRotationX(){return this.#Ku}set maxStartRotationX(i){this.#Ku=i}get maxStartRotationY(){return this.#Wu}set maxStartRotationY(i){this.#Wu=i}get maxStartRotationZ(){return this.#Xu}set maxStartRotationZ(i){this.#Xu=i}get minEndRotationX(){return this.#Yu}set minEndRotationX(i){this.#Yu=i}get minEndRotationY(){return this.#ju}set minEndRotationY(i){this.#ju=i}get minEndRotationZ(){return this.#Zu}set minEndRotationZ(i){this.#Zu=i}get maxEndRotationX(){return this.#Ju}set maxEndRotationX(i){this.#Ju=i}get maxEndRotationY(){return this.#Qu}set maxEndRotationY(i){this.#Qu=i}get maxEndRotationZ(){return this.#el}set maxEndRotationZ(i){this.#el=i}get easeX(){return this.#tl}set easeX(i){this.#tl=i}get easeY(){return this.#nl}set easeY(i){this.#nl=i}get easeZ(){return this.#rl}set easeZ(i){this.#rl=i}get easeAlpha(){return this.#il}set easeAlpha(i){this.#il=i}get easeScale(){return this.#al}set easeScale(i){this.#al=i}get easeRotationX(){return this.#sl}set easeRotationX(i){this.#sl=i}get easeRotationY(){return this.#ol}set easeRotationY(i){this.#ol=i}get easeRotationZ(){return this.#ul}set easeRotationZ(i){this.#ul=i}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_PARTICLE_EMITTER",oa,ua,sa)}render(i){this.#cl||this.#sa(),this.#pl(i.timestamp),super.render(i)}#ml(){let i=this.redGPUContext;const m=new Float32Array(12*this.#dl),g=new Float32Array(12*this.#dl),x=new Float32Array(12*this.#dl),_=new Float32Array(4*this.#dl),b=new Float32Array(4*this.#dl),y=performance.now(),T=this.localToWorld(this.x,this.y,this.z);for(let i=0;i<this.#dl;++i){let w=Math.random()*this.#Tu,P=Math.random()*w;const H=T[0]+Math.random()*(this.#Ru-this.#Su)+this.#Su,z=T[1]+Math.random()*(this.#Cu-this.#wu)+this.#wu,$=T[2]+Math.random()*(this.#Pu-this.#Mu)+this.#Mu,q=Math.random()*(this.#Ku-this.#zu)+this.#zu,W=Math.random()*(this.#Wu-this.#$u)+this.#$u,ye=Math.random()*(this.#Xu-this.#qu)+this.#qu;Math.random(),this.#Gu,this.#Nu,this.#Nu,Math.random(),this.#ku,this.#Au,this.#Au,m[12*i]=y-P,m[12*i+1]=w,m[12*i+4]=H,m[12*i+5]=z,m[12*i+6]=$,m[12*i+7]=0,m[12*i+8]=q,m[12*i+9]=W,m[12*i+10]=ye,m[12*i+11]=0,g[4*i]=H,g[4*i+1]=Math.random()*(this.#Lu-this.#Eu)+this.#Eu,g[4*i+2]=this.#tl,g[4*i+3]=T[0],g[4*i+4]=z,g[4*i+5]=Math.random()*(this.#Du-this.#Iu)+this.#Iu,g[4*i+6]=this.#nl,g[4*i+7]=T[1],g[4*i+8]=$,g[4*i+9]=Math.random()*(this.#Uu-this.#Bu)+this.#Bu,g[4*i+10]=this.#rl,g[4*i+11]=T[2],x[4*i]=q,x[4*i+1]=Math.random()*(this.#Ju-this.#Yu)+this.#Yu,x[4*i+2]=this.#sl,x[4*i+3]=0,x[4*i+4]=W,x[4*i+5]=Math.random()*(this.#Qu-this.#ju)+this.#ju,x[4*i+6]=this.#ol,x[4*i+7]=0,x[4*i+8]=ye,x[4*i+9]=Math.random()*(this.#el-this.#Zu)+this.#Zu,x[4*i+10]=this.#ul,x[4*i+11]=0,_[4*i]=0,_[4*i+1]=Math.random()*(this.#Hu-this.#Vu)+this.#Vu,_[4*i+2]=this.#al,_[4*i+3]=0,b[4*i]=0,b[4*i+1]=Math.random()*(this.#Fu-this.#Ou)+this.#Ou,b[4*i+2]=this.#il,b[4*i+3]=0}const w=this.#cl;this.#cl=[];const P=[m,g,x,_,b];P.forEach((m,g)=>{const x=i.gpuDevice.createBuffer({size:m.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE});i.gpuDevice.queue.writeBuffer(x,0,m),this.#cl.push(x),w?.length&&copyGPUBuffer(i.gpuDevice,w[g],x)}),w&&w.forEach(i=>i.destroy());let H={code:"\nstruct Info {startValue:f32,endValue:f32,easeType:f32,birthCenterValue:f32\n};\nstruct InfoGroup {infoX:Info,infoY:Info,infoZ:Info,\n};\nstruct Particle {startTime:f32,life:f32,valuePosition:vec3<f32>,valueAlpha:f32,valueRotation:vec3<f32>,valueScale:f32,\n};\nstruct SimParams {time:f32,currentPositionX:f32,currentPositionY:f32,currentPositionZ:f32,minLife:f32,maxLife:f32,minStartX:f32,maxStartX:f32,minEndX:f32,maxEndX:f32,easeX:f32,minStartY:f32,maxStartY:f32,minEndY:f32,maxEndY:f32,easeY:f32,minStartZ:f32,maxStartZ:f32,minEndZ:f32,maxEndZ:f32,easeZ:f32,minStartAlpha:f32,maxStartAlpha:f32,minEndAlpha:f32,maxEndAlpha:f32,easeAlpha:f32,minStartScale:f32,maxStartScale:f32,minEndScale:f32,maxEndScale:f32,easeScale:f32,minStartRotationX:f32,maxStartRotationX:f32,minEndRotationX:f32,maxEndRotationX:f32,easeRotationX:f32,minStartRotationY:f32,maxStartRotationY:f32,minEndRotationY:f32,maxEndRotationY:f32,easeRotationY:f32,minStartRotationZ:f32,maxStartRotationZ:f32,minEndRotationZ:f32,maxEndRotationZ:f32,easeRotationZ:f32,\n};\n@group(0) @binding(0) var<uniform> params:SimParams;\n@group(0) @binding(1) var<storage,read_write> particles:array<Particle>;\n@group(0) @binding(2) var<storage,read_write> infoPosition:array<InfoGroup>;\n@group(0) @binding(3) var<storage,read_write> infoRotation:array<InfoGroup>;\n@group(0) @binding(4) var<storage,read_write> infoScale:array<Info>;\n@group(0) @binding(5) var<storage,read_write> infoAlpha:array<Info>;\nconst PI:f32=3.141592653589793;\nconst HPI:f32=PI * 0.5;\nconst PI2:f32=PI * 2.0;\nfn calEasing(n:f32,easingType:f32) -> f32 {var m:f32=n;let easingInt:i32=i32(easingType);switch (easingInt) {case 0:{ m=m;}case 1:{ m=m * m * m * m * m;}case 2:{m -=1.0;m=(m * m * m * m * m) + 1.0;}case 3:{if(m * 2.0 < 1.0) {m *=2.0;m=m * m * m * m * m * 0.5;}else {m=m * 2.0 - 2.0;m=0.5 * (m * m * m * m * m + 2.0);}}case 4:{ m=m * m * (m * 1.70158 + m - 1.70158);}case 5:{m -=1.0;m=m * m * (m * 1.70158 + m + 1.70158) + 1.0;}case 6:{if(m * 2.0 < 1.0) {m *=2.0;m=0.5 * m * m * (m * 1.70158 + m - 1.70158);}else {m=m * 2.0 - 2.0;m=0.5 * m * m * (m * 1.70158 + m + 1.70158) + 1.0;}}case 7:{ m=-1.0 * (sqrt(1.0 - m * m) - 1.0);}case 8:{m -=1.0;m=sqrt(1.0 - m * m);}case 9:{if(m * 2.0 < 1.0) {m *=2.0;m=-0.5 * (sqrt(1.0 - m * m) - 1.0);}else {m=m * 2.0 - 2.0;m=0.5 * sqrt(1.0 - m * m) + 0.5;}}case 10:{ m=m * m * m;}case 11:{m -=1.0;m=m * m * m + 1.0;}case 12:{if(m * 2.0 < 1.0) {m *=2.0;m=m * m * m * 0.5;}else {m=m * 2.0 - 2.0;m=0.5 * (m * m * m + 2.0);}}case 13:{if (m==0.0) { m=0.0;}else { m=pow(2.0,10.0 * (m - 1.0));}}case 14:{if (m==1.0) { m=1.0;}else { m=-pow(2.0,-10.0 * m) + 1.0;}}case 15:{if(m * 2.0 < 1.0) {if (m==0.0) { m=0.0;}else { m *=2.0;m=0.5 * pow(2.0,10.0 * (m - 1.0));}}else {if (m==2.0) { m=1.0;}else { m=m * 2.0 - 1.0;m=-0.5 * pow(2.0,-10.0 * m) + 1.0;}}}case 16:{ m=m * m;}case 17:{ m=(2.0 - m) * m;}case 18:{if(m * 2.0 < 1.0) {m *=2.0;m=m * m * 0.5;}else {m=2.0 - m;m=0.5 * (m * m + 1.0);}}case 19:{ m=m * m * m * m;}case 20:{m -=1.0;m=1.0 - (m * m * m * m);}case 21:{if(m * 2.0 < 1.0) {m *=2.0;m=m * m * m * m * 0.5;}else {m=m * 2.0 - 2.0;m=1.0 - (m * m * m * m * 0.5);}}case 22:{ m=-cos(m * HPI) + 1.0;}case 23:{ m=sin(m * HPI);}case 24:{ m=(-cos(m * PI) + 1.0) * 0.5;}case 25:{if (m==0.0) { m=0.0;}else if (m==1.0) { m=1.0;}else { m -=1.0;m=-1.0 * pow(2.0,10.0 * m) * sin((m - 0.075) * (PI2)/0.3);}}case 26:{if (m==0.0) {m=0.0;} else if (m==1.0) {m=1.0;} else {m -=1.0;m=-pow(2.0,10.0 * m) * sin((m - 0.075) * PI2/0.3);}}case 27:{if (m==0.0) {m=0.0;} else if (m==1.0) {m=1.0;} else {m=pow(2.0,-10.0 * m) * sin((m - 0.075) * PI2/0.3) + 1.0;}}default:{ m=m;}}return m;\n}\nfn rand(n:f32) -> f32 {return fract(sin(n) * 43758.5453123);\n}\nfn randomRange(min:f32,max:f32,v:f32)->f32\n{var newValue:f32=rand(v);return (newValue * (max-min)) + min;\n}\nfn compute_value(tInfo:Info,lifeRatio:f32) -> f32 {return tInfo.startValue + ((tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio,tInfo.easeType));\n}\n@compute @workgroup_size(256,1,1)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) {let index:u32=(global_id.x);let age:f32=(params.time - particles[index].startTime);var lifeRatio:f32=(age/particles[index].life);if (lifeRatio >=1.0 ) {let uuid:f32=(params.time + f32(index));particles[index].startTime=params.time;particles[index].life=randomRange( params.minLife,params.maxLife,uuid );infoPosition[index].infoX.startValue=randomRange( params.minStartX + params.currentPositionX,params.maxStartX + params.currentPositionX,(uuid + 1.0) );infoPosition[index].infoX.endValue=randomRange( params.minEndX + params.currentPositionX,params.maxEndX + params.currentPositionX,(uuid + 2.0) );infoPosition[index].infoX.easeType=params.easeX;infoPosition[index].infoX.birthCenterValue=params.currentPositionX;infoPosition[index].infoY.startValue=randomRange( params.minStartY +params.currentPositionY,params.maxStartY+params.currentPositionY,(uuid + 3.0) );infoPosition[index].infoY.endValue=randomRange( params.minEndY+params.currentPositionY,params.maxEndY+params.currentPositionY,(uuid + 4.0) );infoPosition[index].infoY.easeType=params.easeY;infoPosition[index].infoY.birthCenterValue=params.currentPositionY;infoPosition[index].infoZ.startValue=randomRange( params.minStartZ+params.currentPositionZ,params.maxStartZ+params.currentPositionZ,(uuid + 5.0) );infoPosition[index].infoZ.endValue=randomRange( params.minEndZ+params.currentPositionZ,params.maxEndZ+params.currentPositionZ,(uuid + 6.0) );infoPosition[index].infoZ.easeType=params.easeZ;infoPosition[index].infoZ.birthCenterValue=params.currentPositionZ;infoAlpha[index].startValue=randomRange( params.minStartAlpha,params.maxStartAlpha,(uuid + 7.0) );infoAlpha[index].endValue=randomRange( params.minEndAlpha,params.maxEndAlpha,(uuid + 8.0) );infoAlpha[index].easeType=params.easeAlpha;infoScale[index].startValue=randomRange( params.minStartScale,params.maxStartScale,(uuid + 9.0) );infoScale[index].endValue=randomRange( params.minEndScale,params.maxEndScale,(uuid + 10.0));infoScale[index].easeType=params.easeScale;infoRotation[index].infoX.startValue=randomRange( params.minStartRotationX,params.maxStartRotationX,(uuid + 11.0));infoRotation[index].infoX.endValue=randomRange( params.minEndRotationX,params.maxEndRotationX,(uuid + 12.0));infoRotation[index].infoX.easeType=params.easeRotationX;infoRotation[index].infoY.startValue=randomRange( params.minStartRotationY,params.maxStartRotationY,(uuid + 13.0));infoRotation[index].infoY.endValue=randomRange( params.minEndRotationY,params.maxEndRotationY,(uuid + 14.0));infoRotation[index].infoY.easeType=params.easeRotationY;infoRotation[index].infoZ.startValue=randomRange( params.minStartRotationZ,params.maxStartRotationZ,(uuid + 15.0));infoRotation[index].infoZ.endValue=randomRange( params.minEndRotationZ,params.maxEndRotationZ,(uuid + 16.0));infoRotation[index].infoZ.easeType=params.easeRotationZ;lifeRatio=0.0;}var targetInfo:Info;let targetParticle=particles[index];targetInfo=infoPosition[index].infoX;particles[index].valuePosition.x=compute_value(targetInfo,lifeRatio);targetInfo=infoPosition[index].infoY;particles[index].valuePosition.y=compute_value(targetInfo,lifeRatio);targetInfo=infoPosition[index].infoZ;particles[index].valuePosition.z=compute_value(targetInfo,lifeRatio);targetInfo=infoAlpha[index];particles[index].valueAlpha=compute_value(targetInfo,lifeRatio);targetInfo=infoScale[index];particles[index].valueScale=compute_value(targetInfo,lifeRatio);targetInfo=infoRotation[index].infoX;particles[index].valueRotation.x=compute_value(targetInfo,lifeRatio) * PI/180.0;targetInfo=infoRotation[index].infoY;particles[index].valueRotation.y=compute_value(targetInfo,lifeRatio) * PI/180.0;targetInfo=infoRotation[index].infoZ;particles[index].valueRotation.z=compute_value(targetInfo,lifeRatio) * PI/180.0;\n}\n"},z=i.resourceManager.createGPUShaderModule("PARTICLE_EMITTER_MODULE",H);const $=[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}],q=[{binding:0,resource:{buffer:this.#ll,offset:0,size:this.#hl.byteLength}}];P.forEach((i,m)=>{$.push({binding:m+1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}),q.push({binding:m+1,resource:{buffer:this.#cl[m],offset:0,size:i.byteLength}})});const W=i.gpuDevice.createBindGroupLayout({entries:$}),ye=i.gpuDevice.createPipelineLayout({bindGroupLayouts:[W]});this.#fl=i.gpuDevice.createBindGroup({layout:W,entries:q}),this.#Mi=i.gpuDevice.createComputePipeline({layout:ye,compute:{module:z,entryPoint:"main"}})}#sa(){this.#hl=new Float32Array(46);let i={size:this.#hl.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};const{gpuDevice:m}=this.redGPUContext;this.#ll=m.createBuffer(i),m.queue.writeBuffer(this.#ll,0,this.#hl),this.#ml(),this.depthStencilState.depthWriteEnabled=!1}#pl(i){const m=this.localToWorld(this.x,this.y,this.z);this.#hl.set([i,...m,this.#yu,this.#Tu,this.#Su,this.#Ru,this.#Eu,this.#Lu,this.#tl,this.#wu,this.#Cu,this.#Iu,this.#Du,this.#nl,this.#Mu,this.#Pu,this.#Bu,this.#Uu,this.#rl,this.#Au,this.#ku,this.#Ou,this.#Fu,this.#il,this.#Nu,this.#Gu,this.#Vu,this.#Hu,this.#al,this.#zu,this.#Ku,this.#Yu,this.#Ju,this.#sl,this.#$u,this.#Wu,this.#ju,this.#Qu,this.#ol,this.#qu,this.#Xu,this.#Zu,this.#el,this.#ul],0);const{gpuDevice:g}=this.redGPUContext;g.queue.writeBuffer(this.#ll,0,this.#hl);const x=g.createCommandEncoder({}),_=x.beginComputePass();_.setPipeline(this.#Mi),_.setBindGroup(0,this.#fl),_.dispatchWorkgroups(Math.ceil(this.#dl/256)),_.end(),g.queue.submit([x.finish()])}}function mixInMesh2D(i){const m=class extends i{#bu=0;#gl=_i.NORMAL;get blendMode(){const i=Object.entries(_i).find(([,i])=>i===this.#gl);if(!i)throw new Error(`Invalid blendMode value:${this.#gl}`);return i[0]}set blendMode(i){let m;if("string"==typeof i){if(!(i in _i))throw new Error(`Invalid blendMode key:${i}`);m=_i[i]}else{if("number"!=typeof i||!Object.values(_i).includes(i))throw new Error(`Invalid blendMode:${i}`);m=i}this.#gl=m,this.#xl(m)}get rotation(){return this.#bu}set rotation(i){this.#bu=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}#xl(i){const{blendColorState:m,blendAlphaState:g}=this._material;switch(i){case _i.NORMAL:m.operation=dr.ADD,m.srcFactor=fr.SRC_ALPHA,m.dstFactor=fr.ONE_MINUS_SRC_ALPHA,g.operation=dr.ADD,g.srcFactor=fr.SRC_ALPHA,g.dstFactor=fr.ONE_MINUS_SRC_ALPHA;break;case _i.MULTIPLY:m.operation=dr.ADD,m.srcFactor=fr.ONE_MINUS_DST_ALPHA,m.dstFactor=fr.ONE_MINUS_SRC_ALPHA,g.operation=dr.ADD,g.srcFactor=fr.SRC_ALPHA,g.dstFactor=fr.ONE_MINUS_SRC_ALPHA;break;case _i.LIGHTEN:m.operation=dr.MAX,m.srcFactor=fr.ONE,m.dstFactor=fr.ONE,g.operation=dr.ADD,g.srcFactor=fr.SRC_ALPHA,g.dstFactor=fr.ONE_MINUS_SRC_ALPHA;break;case _i.SCREEN:m.operation=dr.ADD,m.srcFactor=fr.ONE,m.dstFactor=fr.ONE_MINUS_SRC,g.operation=dr.ADD,g.srcFactor=fr.SRC_ALPHA,g.dstFactor=fr.ONE_MINUS_SRC_ALPHA;break;case _i.LINEAR_DODGE:m.operation=dr.ADD,m.srcFactor=fr.ONE,m.dstFactor=fr.ONE,g.operation=dr.ADD,g.srcFactor=fr.SRC_ALPHA,g.dstFactor=fr.ONE;break;case _i.SUBTRACT:m.operation=dr.REVERSE_SUBTRACT,m.srcFactor=fr.SRC_ALPHA,m.dstFactor=fr.ONE_MINUS_SRC_ALPHA,g.operation=dr.REVERSE_SUBTRACT,g.srcFactor=fr.ONE,g.dstFactor=fr.ONE;break;case _i.DIFFERENCE:m.operation=dr.SUBTRACT,m.srcFactor=fr.ONE,m.dstFactor=fr.ONE,g.operation=dr.SUBTRACT,g.srcFactor=fr.ONE,g.dstFactor=fr.ONE;break;case _i.EXCLUSION:m.operation=dr.ADD,m.srcFactor=fr.ONE_MINUS_DST_ALPHA,m.dstFactor=fr.ONE_MINUS_SRC_ALPHA,g.operation=dr.ADD,g.srcFactor=fr.ONE,g.dstFactor=fr.ONE;break;default:console.warn(`Unsupported blend mode:${i}`)}}};return Object.defineProperty(m.prototype,"is2DMeshType",{value:!0,writable:!1}),m}Object.defineProperty(ParticleEmitter.prototype,"meshType",{value:"particle",writable:!1}),Tn.defineByPreset(ParticleEmitter,[Tn.PRESET_BOOLEAN.USE_BILLBOARD]),Tn.definePositiveNumber(ParticleEmitter,[]),Object.freeze(ParticleEmitter);const la=mixInMesh2D(Mesh);class Sprite2D extends la{#Dr=1;#Ur=1;constructor(i,m){super(i,new Plane(i,1,1,1,1,1,!0),m),this.primitiveState.cullMode=Hr.FRONT}get width(){return this.#Dr}set width(i){validatePositiveNumberRange(i),this.#Dr=i,this.dirtyTransform=!0}get height(){return this.#Ur}set height(i){validatePositiveNumberRange(i),this.#Ur=i,this.dirtyTransform=!0}get material(){return this._material}set material(i){consoleAndThrowError("Sprite2D can not change material")}setSize(i,m){this.width=i,this.height=void 0!==m?m:i}}Object.freeze(Sprite2D);var ca="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,useBillboardPerspective:u32,useBillboard:u32,billboardFixedScale:f32,combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData {var output:OutputData;let u_resolution=systemUniforms.resolution;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let u_billboardFixedScale=vertexUniforms.billboardFixedScale;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_positionVec4=vec4<f32>(input_position,1.0);let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0);let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;if (u_useBillboard==1) {let projectionModelMatrix=u_projectionMatrix * u_modelMatrix;let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix);let billboardNormalMatrix=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix);if(u_useBillboardPerspective==1){position=billboardMatrix * input_positionVec4;normalPosition=billboardNormalMatrix * input_vertexNormalVec4;}else{position=billboardMatrix * input_positionVec4;normalPosition=billboardNormalMatrix * input_vertexNormalVec4;}output.position=u_projectionMatrix * position;if (u_useBillboardPerspective !=1) {var temp=output.position/output.position.w;let aspectRatio=u_resolution.x/u_resolution.y;let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio;let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0);output.position=vec4<f32>(temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),temp.zw);}} else {position=u_cameraMatrix * u_modelMatrix * input_positionVec4;normalPosition=u_cameraMatrix * u_normalModelMatrix * input_vertexNormalVec4;output.position=u_projectionMatrix * position;}output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.uv=input_uv;output.combinedOpacity=vertexUniforms.combinedOpacity;return output;\n}\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {var output:OutputShadowData;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix;let u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let u_billboardFixedScale=vertexUniforms.billboardFixedScale;let input_position=inputData.position;let input_positionVec4=vec4<f32>(input_position,1.0);var position:vec4<f32>;return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_cameraMatrix=systemUniforms.camera.cameraMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let u_billboardFixedScale=vertexUniforms.billboardFixedScale;let input_position=inputData.position;let input_positionVec4=vec4<f32>(input_position,1.0);let u_resolution=systemUniforms.resolution;var position:vec4<f32>;if (u_useBillboard==1) {let projectionModelMatrix=u_projectionMatrix * u_modelMatrix;let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix);if(u_useBillboardPerspective==1){position=billboardMatrix * input_positionVec4;}else{position=billboardMatrix * input_positionVec4;}output.position=u_projectionMatrix * position;if (u_useBillboardPerspective !=1) {var temp=output.position/output.position.w;let aspectRatio=u_resolution.x/u_resolution.y;let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio;let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0);output.position=vec4<f32>(temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),temp.zw);}} else {position=u_cameraMatrix * u_modelMatrix * input_positionVec4;output.position=u_projectionMatrix * position;}output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n";const ha=parseWGSL(ca),fa=ha.uniforms.vertexUniforms;class Sprite3D extends Mesh{constructor(i,m,g){super(i),this._geometry=g||new Plane(i),this._material=m,this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.primitiveState.cullMode=Hr.NONE}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_3D",ha,fa,ca)}}Tn.defineByPreset(Sprite3D,[[Tn.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[Tn.PRESET_BOOLEAN.USE_BILLBOARD,!0],[Tn.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(Sprite3D);class ASpriteSheet extends Mesh{#_l=0;#vl=0;#bl=0;#yl=!0;#Tl=!0;#Sl;#wl;#Ml="play";constructor(i,m,g){super(i),this.#wl=g,this._material=new BitmapMaterial(i),this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.spriteSheetInfo=m}get state(){return this.#Ml}get loop(){return this.#Tl}set loop(i){this.#Tl=i}get frameRate(){return this.#_l}set frameRate(i){i<0&&(i=0),0===this.#_l&&i&&(this.#vl=0),this.#_l=i,this.#bl=1e3/this.#_l}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("ASpriteSheet can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("ASpriteSheet can not change material")}get spriteSheetInfo(){return this.#Sl}set spriteSheetInfo(i){this.#Sl=i,this.frameRate=i.frameRate,this.segmentW=i.segmentW,this.segmentH=i.segmentH,this.totalFrame=i.totalFrame,this.currentIndex=i.startIndex,this.#Tl=!0,this.#vl=0,this._material.diffuseTexture=i.texture}play(){this.#yl=!0,this.#Ml="play",this.#vl=0}pause(){this.#yl=!1,this.#Ml="pause"}stop(){this.#yl=!1,this.currentIndex=0,this.#Ml="stop"}render(i){const{diffuseTexture:m}=this._material;this.#wl(m,this.segmentW,this.segmentH);const{timestamp:g}=i;if(this.#vl||(this.#vl=this.#bl+g),this.#yl&&this.#vl<g&&this.#_l){const i=Math.floor((g-this.#vl)/this.#bl),m=(Number.isFinite(i)?i:0)||1;this.#vl=this.#bl+g,this.currentIndex+=m,this.currentIndex>=this.totalFrame&&(this.loop?(this.#yl=!0,this.currentIndex=0):(this.#yl=!1,this.currentIndex=this.totalFrame-1))}super.render(i)}}Tn.definePositiveNumber(ASpriteSheet,[["segmentW",5],["segmentH",3],["totalFrame",15],["currentIndex",0]]),Object.freeze(ASpriteSheet);var da="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,segmentW:f32,segmentH:f32,totalFrame:f32,currentIndex:f32,combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main( inputData:InputData ) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);output.position=u_projectionMatrix * position;output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.combinedOpacity=vertexUniforms.combinedOpacity;let uv=vec2<f32>(input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW),input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH));output.uv=uv;return output;\n}\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {var output:OutputShadowData;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix;let u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let input_position=inputData.position;var position:vec4<f32>;return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);output.position=u_projectionMatrix * position;output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n";const ma=parseWGSL(da),pa=ma.uniforms.vertexUniforms,ga=mixInMesh2D(ASpriteSheet);class SpriteSheet2D extends ga{#Dr=1;#Ur=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:x}=i,_=x?.width/m,b=x?.height/g;_===this.#Dr&&b===this.#Ur||(this.#Dr=x?.width/m,this.#Ur=x?.height/g,this.dirtyTransform=!0)}else this.#Dr=1,this.#Ur=1}),this._geometry=new Plane(i,1,1,1,1,1,!0),this.primitiveState.cullMode=Hr.FRONT}get width(){return this.#Dr}get height(){return this.#Ur}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_2D",ma,pa,da)}}Object.freeze(SpriteSheet2D);var xa="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,useBillboardPerspective:u32,useBillboard:u32,segmentW:f32,segmentH:f32,totalFrame:f32,currentIndex:f32,billboardFixedScale:f32,_renderRatioX:f32,_renderRatioY:f32,combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main( inputData:InputData ) -> OutputData {var output:OutputData;let u_resolution=systemUniforms.resolution;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let u_billboardFixedScale=vertexUniforms.billboardFixedScale;let u_renderRatioX=vertexUniforms._renderRatioX;let u_renderRatioY=vertexUniforms._renderRatioY;var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>(u_renderRatioX,0,0,0,0,u_renderRatioY,0,0,0,0,1,0,0,0,0,1);let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;if (u_useBillboard==1) {if(u_useBillboardPerspective==1){position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0);normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix *vec4<f32>(input_vertexNormal,1.0);}else{position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix *vec4<f32>(input_position,1.0);normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0);}output.position=u_projectionMatrix * position;if (u_useBillboardPerspective !=1) {var temp=output.position/output.position.w;let aspectRatio=u_resolution.x/u_resolution.y;let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX;let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY;output.position=vec4<f32>(temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),temp.zw);}} else {position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0);normalPosition=u_cameraMatrix * u_normalModelMatrix * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0);output.position=u_projectionMatrix * position;}output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.combinedOpacity=vertexUniforms.combinedOpacity;let uv=vec2<f32>(input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW),input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH));output.uv=uv;return output;\n}\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {var output:OutputShadowData;let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;let u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix;let u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let input_position=inputData.position;var position:vec4<f32>;return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_cameraMatrix=systemUniforms.camera.cameraMatrix;let u_modelMatrix=vertexUniforms.modelMatrix;let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;let u_useBillboard=vertexUniforms.useBillboard;let u_billboardFixedScale=vertexUniforms.billboardFixedScale;let u_renderRatioX=vertexUniforms._renderRatioX;let u_renderRatioY=vertexUniforms._renderRatioY;var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>(u_renderRatioX,0,0,0,0,u_renderRatioY,0,0,0,0,1,0,0,0,0,1);let input_position=inputData.position;let u_resolution=systemUniforms.resolution;var position:vec4<f32>;if (u_useBillboard==1) {if(u_useBillboardPerspective==1){position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0);}else{position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix *vec4<f32>(input_position,1.0);}output.position=u_projectionMatrix * position;if (u_useBillboardPerspective !=1) {var temp=output.position/output.position.w;let aspectRatio=u_resolution.x/u_resolution.y;let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX;let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY;output.position=vec4<f32>(temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),temp.zw);}} else {position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0);output.position=u_projectionMatrix * position;}output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n";const _a=parseWGSL(xa),va=_a.uniforms.vertexUniforms;class SpriteSheet3D extends ASpriteSheet{#Fa=1;#Na=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:x}=i,_=x?.width/m,b=x?.height/g;_===this.#Fa&&b===this.#Na||(this.#Fa=x?.width/m,this.#Na=x?.height/g,this.#Na>this.#Fa?(this._renderRatioX=1,this._renderRatioY=this.#Na/this.#Fa):(this._renderRatioX=this.#Fa/this.#Na,this._renderRatioY=1),this.dirtyTransform=!0)}else this.#Fa=1,this.#Na=1}),this._geometry=new Plane(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_3D",_a,va,xa)}}Tn.definePositiveNumber(SpriteSheet3D,[["_renderRatioX",1],["_renderRatioY",1]]),Tn.defineByPreset(SpriteSheet3D,[[Tn.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[Tn.PRESET_BOOLEAN.USE_BILLBOARD,!0],[Tn.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(SpriteSheet3D);class SpriteSheetInfo{#Rl=0;#Cl=0;#Pl=0;#El=0;#_l=0;#Tl=!0;#Il;constructor(i,m,g,x,_,b,y=!0,T=60){validateRedGPUContext(i),validateUintRange(g),validateUintRange(x),validateUintRange(_),validateUintRange(b),validateUintRange(T),this.#Rl=g,this.#Cl=x,this.#Pl=_,this.#El=b,this.#Il=new BitmapTexture(i,m),this.#Tl=y,this.#_l=T}get segmentW(){return this.#Rl}get segmentH(){return this.#Cl}get totalFrame(){return this.#Pl}get startIndex(){return this.#El}get texture(){return this.#Il}get frameRate(){return this.#_l}get loop(){return this.#Tl}}Object.freeze(SpriteSheetInfo);const ba=parseWGSL("#redgpu_include drawPicking;\nstruct Uniforms {opacity:f32\n};\nstruct InputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexColor:vec4<f32>,@location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> {return inputData.vertexColor;\n}\n");class LineMaterial extends ABaseMaterial{constructor(i,m){super(i,"LINE_MATERIAL",ba,2),m&&(this.name=m),this.initGPURenderInfos()}}Object.freeze(LineMaterial);class LinePoint{position;colorRGBA;constructor(i=0,m=0,g=0,x){this.position=[i,m,g],this.colorRGBA=x}}const getPointsOnBezierCurveWithSplitting=(i,m,g,x)=>{let _=x||[];if(((i,m)=>{let g=i[m].position,x=i[m+1].position,_=i[m+2].position,b=i[m+3].position,y=3*x[0]-2*g[0]-b[0],T=3*x[1]-2*g[1]-b[1],w=3*_[0]-2*b[0]-g[0],P=3*_[1]-2*b[1]-g[1];return y*=y,T*=T,w*=w,P*=P,y<w&&(y=w),T<P&&(T=P),y+T})(i,m)<g)_.push(i[m],i[m+3]);else{let x=.5,b=i[m],y=i[m+1],T=i[m+2],w=i[m+3],P=lerp$4(create$4(),b.position,y.position,x),H=lerp$4(create$4(),y.position,T.position,x),z=lerp$4(create$4(),T.position,w.position,x),$=lerp$4(create$4(),P,H,x),q=lerp$4(create$4(),H,z,x),W=lerp$4(create$4(),$,q,x);W=new LinePoint(W[0],W[1],W[2],b.colorRGBA),P=new LinePoint(P[0],P[1],P[2],P.colorRGBA),z=new LinePoint(z[0],z[1],z[2],z.colorRGBA),$=new LinePoint($[0],$[1],$[2],$.colorRGBA),q=new LinePoint(q[0],q[1],q[2],q.colorRGBA),getPointsOnBezierCurveWithSplitting([b,P,$,W],0,g,_),getPointsOnBezierCurveWithSplitting([W,q,z,w],0,g,_)}return _};class LinePointWithInOut{inLinePoint;linePoint;outLinePoint;constructor(i=0,m=0,g=0,x=0,_=0,b=0,y=0,T=0,w=0,P,H){let z=[...convertHexToRgb(P,!0)];z=[z[0]/255,z[1]/255,z[2]/255,H],this.inLinePoint=new LinePoint(x,_,b,z),this.linePoint=new LinePoint(i,m,g,z),this.outLinePoint=new LinePoint(y,T,w,z)}}const lineVec2DistanceToSegmentSq=function(i,m,g){i=[i[0],i[1]],m=[m[0],m[1]],g=[g[0],g[1]];let x=dn(m,g);if(0===x)return dn(i,m);let _=((i[0]-m[0])*(g[0]-m[0])+(i[1]-m[1])*(g[1]-m[1]))/x;return _=Math.max(0,Math.min(1,_)),dn(i,lerp([0,0],m,g,_))},lineSimplifyPoints=(i,m,g,x,_)=>{let b=_||[],y=i[m],T=i[g-1],w=0,P=1,H=m+1;for(;H<g-1;++H){let m=lineVec2DistanceToSegmentSq(i[H].position,y.position,T.position);m>w&&(w=m,P=H)}return Math.sqrt(w)>x?(lineSimplifyPoints(i,m,P+1,x,b),lineSimplifyPoints(i,P,g,x,b)):b.push(y,T),b},ya={LINEAR:"linear",CATMULL_ROM:"catmullRom",BEZIER:"bezier"};Object.freeze(ya);var Ta="#redgpu_include SYSTEM_UNIFORM;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexColor:vec4<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexColor:vec4<f32>,@location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main( inputData:InputData ) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_resolution=systemUniforms.resolution;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let input_position=inputData.position;let input_vertexColor=inputData.vertexColor;var position:vec4<f32>;position=u_modelMatrix * vec4<f32>(input_position,1.0);output.position=u_projectionMatrix * u_cameraMatrix * position;output.vertexPosition=position.xyz;output.vertexColor=input_vertexColor;return output;\n}\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;return output;\n}\n";const Sa=parseWGSL(Ta),wa=Sa.uniforms.vertexUniforms;class Line3D extends Mesh{baseColor;#Bl;#Ll=1;#Dl=.01;#br=.01;#Ul=[];#Al=[];#kl;constructor(i,m=ya.LINEAR,g="#fff"){super(i),this.primitiveState.topology=Mn.LINE_STRIP,this.baseColor=g,this.#Bl=m,this._geometry=new Geometry(i,new VertexBuffer(i,this.#Ul,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4}))),this._material=new LineMaterial(i)}get originalPoints(){return this.#Al}get type(){return this.#Bl}set type(i){this.#Bl=i,this.#Ol()}get interleaveData(){return this.#Ul}get tension(){return this.#Ll}set tension(i){validatePositiveNumberRange(i),this.#Ll=i,this.#Ol()}get tolerance(){return this.#Dl}set tolerance(i){validatePositiveNumberRange(i),this.#Dl=i,this.#Ol()}get distance(){return this.#br}set distance(i){validatePositiveNumberRange(i),this.#br=i,this.#Ol()}get numPoints(){return this.#Al.length}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_3D",Sa,wa,Ta)}addPoint(i=0,m=0,g=0,x=this.baseColor,_=1,b=0,y=0,T=0,w=0,P=0,H=0){this.#Al.push(new LinePointWithInOut(i,m,g,b,y,T,w,P,H,x,_)),this.#Ol()}addPointAt(i,m=0,g=0,x=0,_=this.baseColor,b=1,y=0,T=0,w=0,P=0,H=0,z=0){this.#Al.length<i&&(i=this.#Al.length),null!=i?this.#Al.splice(i,0,new LinePointWithInOut(m,g,x,y,T,w,P,H,z,_,b)):this.#Al.push(new LinePointWithInOut(m,g,x,y,T,w,P,H,z,_,b)),this.#Ol()}removePointAt(i){validateUintRange(i),this.#Al[i]?this.#Al.splice(i,1):consoleAndThrowError("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값:"+i),this.#Ol()}removeAllPoint(){this.#Al.length=0,this.#Ol()}#z(){if(this._geometry,this.#Al.length){const{redGPUContext:i}=this;this._geometry=new Geometry(i,new VertexBuffer(i,this.#Ul,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4})))}this.dirtyPipeline=!0}#Ol(){const i=this.#Al,m=this.#Ll,g=this.#Dl,x=this.#br;let _,b,y,T;switch(this.#Ul.length=0,this.#Bl){case ya.CATMULL_ROM:case ya.BEZIER:if(i.length>1)for(this.#kl=(i=>{let m,g=[],x=0,_=0;const b=i.length;for(;x<b;x++){m=i[x];const{inLinePoint:b,linePoint:y,outLinePoint:T}=m;0===_?(g[_++]=y,g[_++]=T):(g[_++]=b,g[_++]=y,i[x+1]&&(g[_++]=T))}return g})(ya.CATMULL_ROM===this.#Bl?((i,m=1)=>{const g=i.length,x=g-2;for(let _=0;_<g-1;_++){const g=_?i[_-1].linePoint.position:i[_].linePoint.position,b=i[_].linePoint.position,y=i[_+1].linePoint.position,T=_===x?y:i[_+2].linePoint.position;i[_].outLinePoint.position=[b[0]+(y[0]-g[0])/6*m,b[1]+(y[1]-g[1])/6*m,b[2]+(y[2]-g[2])/6*m],i[_+1].inLinePoint.position=[y[0]-(T[0]-b[0])/6*m,y[1]-(T[1]-b[1])/6*m,y[2]-(T[2]-b[2])/6*m]}return i})(i,m):i),_=((i,m)=>{let g=[],x=(i.length-1)/3;x=Math.floor(x);let _,b=0;for(;b<x;++b)_=3*b,getPointsOnBezierCurveWithSplitting(i,_,m,g);return g})(this.#kl,g),_=lineSimplifyPoints(_,0,_.length,x),b=0,y=_.length;b<y;b++)T=_[b],this.#Ul.push(...T.position,...T.colorRGBA);else this.#Ul.push(0,0,0,1,1,1,1);break;default:for(b=0,y=i.length;b<y;b++){const{linePoint:m}=i[b],g=m.colorRGBA;this.interleaveData.push(...m.position,...g)}}this.#z()}}Object.freeze(Line3D);const Ma=parseWGSL(Ta),Ra=Ma.uniforms.vertexUniforms;var Ca="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms {pickingId:u32,modelMatrix:mat4x4<f32>,normalModelMatrix:mat4x4<f32>,combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData {@location(0) position:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,\n};\nstruct OutputData {@builtin(position) position:vec4<f32>,@location(0) vertexPosition:vec3<f32>,@location(1) vertexNormal:vec3<f32>,@location(2) uv:vec2<f32>,@location(12) combinedOpacity:f32,@location(13) shadowPos:vec3<f32>,@location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main( inputData:InputData ) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);output.position=u_projectionMatrix * position;output.vertexPosition=position.xyz;output.vertexNormal=normalPosition.xyz;output.uv=input_uv;output.combinedOpacity=vertexUniforms.combinedOpacity;return output;\n}\nstruct OutputShadowData {@builtin(position) position:vec4<f32>,\n};\n@vertex\nfn picking(inputData:InputData) -> OutputData {var output:OutputData;let u_projectionMatrix=systemUniforms.projectionMatrix;let u_camera=systemUniforms.camera;let u_cameraMatrix=u_camera.cameraMatrix;let u_cameraPosition=u_camera.cameraPosition;let u_modelMatrix=vertexUniforms.modelMatrix;let u_normalModelMatrix=vertexUniforms.normalModelMatrix;let input_position=inputData.position;let input_vertexNormal=inputData.vertexNormal;let input_uv=inputData.uv;var position:vec4<f32>;var normalPosition:vec4<f32>;position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);output.position=u_projectionMatrix * position;output.pickingId=unpack4x8unorm(vertexUniforms.pickingId);return output;\n}\n";const Pa=parseWGSL(Ca),Ea=Pa.uniforms.vertexUniforms,Ia=mixInMesh2D(ATextField);class TextField2D extends Ia{#Dr=1;#Ur=1;#Fl=!1;constructor(i,m=!1){super(i,(i,m)=>{this.#Dr=i,this.#Ur=m},!1),this._geometry=new Plane(i,1,1,1,1,1,!0),this._material=new TextFieldMaterial(i,new BitmapTexture(i)),this._material.transparent=!0,this.useSmoothing=m,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.primitiveState.cullMode=Hr.FRONT}get useSmoothing(){return this.#Fl}set useSmoothing(i){this.#Fl=i,this.useSmoothing?(this._material.diffuseTextureSampler.minFilter=yr.LINEAR,this._material.diffuseTextureSampler.magFilter=yr.LINEAR,this._material.diffuseTextureSampler.mipmapFilter=Tr.LINEAR):(this._material.diffuseTextureSampler.minFilter=yr.NEAREST,this._material.diffuseTextureSampler.magFilter=yr.NEAREST,this._material.diffuseTextureSampler.mipmapFilter=null)}get width(){return this.#Dr}get height(){return this.#Ur}get geometry(){return this._geometry}set geometry(i){console.error("TextField2D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_2D",Pa,Ea,Ca)}}Object.freeze(TextField2D);var Ba=Object.freeze({__proto__:null,Group2D:Group2D,Group3D:Group3D,InstancingMesh:InstancingMesh,LINE_TYPE:ya,Line2D:class extends Line3D{constructor(i,m=ya.LINEAR,g="#fff"){super(i,m,g),this._material=new LineMaterial(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_2D",Ma,Ra,Ta)}addPoint(i=0,m=0,g=this.baseColor,x=1,_=0,b=0,y=0,T=0){super.addPoint(i,m,0,g,x,_,b,0,y,T,0)}addPointAt(i,m=0,g=0,x=this.baseColor,_=1,b=0,y=0,T=0,w=0){super.addPointAt(i,m,g,0,x,_,b,y,0,T,w,0)}},Line3D:Line3D,Mesh:Mesh,Object3DContainer:Object3DContainer,PARTICLE_EASE:aa,ParticleEmitter:ParticleEmitter,Scene:Scene,SkyBox:class{#Nl=!0;modelMatrix=create$5();gpuRenderInfo;#Gl;#qe;#b;#An;#kn;#Vl;#Hl;#zl=0;#$l=0;#ql=0;constructor(i,m){validateRedGPUContext(i),this.#b=i,this.#Gl=new Box(i),this.#Vl=m,this.#qe=new SkyBoxMaterial(i,this.#Vl),this.#An=new PrimitiveState(this),this.#An.cullMode=Hr.NONE,this.#kn=new DepthStencilState(this)}get transitionDuration(){return this.#$l}get transitionElapsed(){return this.#ql}get transitionProgress(){return this.#qe.transitionProgress}get blur(){return this.#qe.blur}set blur(i){validatePositiveNumberRange(1,0,1),this.#qe.blur=i}get exposure(){return this.#Vl instanceof HDRTexture?this.#Vl.exposure:1}set exposure(i){validatePositiveNumberRange(1),this.#Vl instanceof HDRTexture&&(this.#Vl.exposure=i)}get opacity(){return this.#qe.opacity}set opacity(i){validatePositiveNumberRange(1,0,1),this.#qe.opacity=i}get skyboxTexture(){return this.#Vl}set skyboxTexture(i){i?(this.#Vl=i,this.#qe.skyboxTexture=i):consoleAndThrowError("SkyBox requires a valid CubeTexture | HDRTexture")}get transitionTexture(){return this.#Hl}transition(i,m=300,g){this.#Hl=i,this.#qe.transitionTexture=i,this.#$l=m,this.#zl=performance.now(),this.#qe.transitionAlphaTexture=g}render(i){const{currentRenderPassEncoder:m,startTime:g}=i;if(this.#Kl(),this.gpuRenderInfo||this.#qo(this.#b),this.#Nl&&(this.gpuRenderInfo.pipeline=this.#Wl(),this.#Nl=!1,i.numDirtyPipelines++),this.#zl)if(this.#ql=Math.max(g-this.#zl,0),this.#ql>this.#$l)this.#zl=0,this.#qe.transitionProgress=0,this.skyboxTexture=this.#Hl,this.#qe.transitionTexture=null,this.#Nl=!0;else{const i=this.#ql/this.#$l;this.#qe.transitionProgress=i<0?0:i>1?1:i}const{gpuRenderInfo:x}=this,{vertexUniformBindGroup:_,pipeline:b}=x,{indexBuffer:y}=this.#Gl,{triangleCount:T,indexNum:w}=y;m.setPipeline(b),m.setVertexBuffer(0,this.#Gl.vertexBuffer.gpuBuffer),m.setBindGroup(1,_),m.setBindGroup(2,this.#qe.gpuRenderInfo.fragmentUniformBindGroup),m.setIndexBuffer(y.gpuBuffer,"uint32"),m.drawIndexed(y.indexNum,1,0,0,0),i.num3DObjects++,i.numDrawCalls++,i.numTriangles+=T,i.numPoints+=w}#Kl(){const{changedMSAA:i}=this.#b.antialiasingManager;i&&(this.#Nl=!0)}#qo(i){const{resourceManager:m}=this.#b,g=m.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||m.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(na,1)),x=new ArrayBuffer(ra.arrayBufferByteLength),_=new UniformBuffer(i,x);identity$2(this.modelMatrix),scale$5(this.modelMatrix,this.modelMatrix,[1e4,1e4,1e4]),_.writeBuffer(ra.members.modelMatrix,this.modelMatrix);const b={layout:g,label:"VERTEX_BIND_GROUP_DESCRIPTOR_SKYBOX",entries:[{binding:0,resource:{buffer:_.gpuBuffer,offset:0,size:_.size}}]},y=i.gpuDevice.createBindGroup(b);this.gpuRenderInfo=new VertexGPURenderInfo(null,ra,g,_,y,this.#Wl())}#Wl(){const{resourceManager:i,gpuDevice:m,antialiasingManager:g}=this.#b,x={code:ea},_={module:i.createGPUShaderModule("VERTEX_MODULE_SKYBOX",x),entryPoint:"main",buffers:this.#Gl.gpuRenderInfo.buffers},b=i.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||i.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(na,1)),y={bindGroupLayouts:[i.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),b,this.#qe.gpuRenderInfo.fragmentBindGroupLayout]},T={label:"PIPELINE_DESCRIPTOR_SKYBOX",layout:m.createPipelineLayout(y),vertex:_,fragment:this.#qe.gpuRenderInfo.fragmentState,primitive:this.#An.state,depthStencil:this.#kn.state,multisample:{count:g.useMSAA?4:1}};return m.createRenderPipeline(T)}},Sprite2D:Sprite2D,Sprite3D:Sprite3D,SpriteSheet2D:SpriteSheet2D,SpriteSheet3D:SpriteSheet3D,SpriteSheetInfo:SpriteSheetInfo,TextField2D:TextField2D,TextField3D:TextField3D,View2D:View2D,View3D:View3D}),La=Object.freeze({__proto__:null,AmbientLight:AmbientLight,DirectionalLight:DirectionalLight,PointLight:PointLight,SpotLight:SpotLight});function calculatePositionOnCurve(i,m,g,x,_){const b=Math.cos(i),y=Math.sin(i),T=g/m*i,w=Math.cos(T);_[0]=x*(2+w)*.5*b,_[1]=x*(2+w)*y*.5,_[2]=x*Math.sin(T)*.5}var Da=Object.freeze({__proto__:null,Box:Box,Circle:class extends Primitive{#xa=function(){return function(i,m,g,x,_,b){const y=[],T=[];let w,P,H;y.push(0,0,0,0,0,1,.5,.5);let z=0,$=3;for(;z<=x;)w=_+z/x*b,P=Math.cos(w),H=Math.sin(w),y.push(g*P,g*H,0,0,0,1,(P/g+1)/2,(H/g+1)/2),z++,$+=3;for($=1;$<=x;)T.push($,$+1,0),$++;return createPrimitiveGeometry(m,y,T,i)}}();constructor(i,m=1,g=32,x=0,_=2*Math.PI){super(i);const b=`PRIMITIVE_CIRCLE_R${m}_S${g}_TS${x}_TL${_}`,y=i.resourceManager.cachedBufferState;let T=y[b];T||(T=y[b]=this.#xa(b,i,m,g,x,_)),this._setData(T)}},Cylinder:Cylinder,Plane:Plane,Primitive:Primitive,Sphere:Sphere,Torus:class extends Primitive{#xa=function(){return function(i,m,g,x,_,b,y,T){y=y||0;const w=(T=T||2*Math.PI)-y,P=_+1,H=b+1,z=[],$=[];for(let i=0;i<H;++i){const m=i/b,T=m*Math.PI*2,H=Math.sin(T),$=g+H*x,q=Math.cos(T),W=q*x;for(let i=0;i<P;++i){const g=i/_,x=y+g*w,b=Math.sin(x),T=Math.cos(x),P=b*$,ye=T*$,Ge=b*H,Ke=T*H;z.push(P,W,ye,Ge,q,Ke,g,1-m)}}for(let i=0;i<b;++i)for(let m=0;m<_;++m){const g=1+m,x=1+i;$.push(P*i+m,P*x+m,P*i+g),$.push(P*x+m,P*x+g,P*i+g)}return createPrimitiveGeometry(m,z,$,i)}}();constructor(i,m=1,g=.5,x=16,_=16,b=0,y=2*Math.PI){if(super(i),x<3)throw new Error("radialSubdivisions must be 3 or greater");if(_<3)throw new Error("verticalSubdivisions must be 3 or greater");const T=`PRIMITIVE_TORUS_R${m}_T${g}_RSD${x}_BSD${_}_SA${b}_EA${y}`,w=i.resourceManager.cachedBufferState;let P=w[T];P||(P=w[T]=this.#xa(T,i,m,g,x,_,b,y)),this._setData(P)}},TorusKnot:class extends Primitive{#xa=function(){return function(i,m,g,x,_,b,y,T){_=Math.floor(_),b=Math.floor(b);const w=[],P=[],H=[],z=[],$=[0,0,0],q=[0,0,0],W=[0,0,0],ye=[0,0,0],Ge=[0,0,0];for(let i=0;i<=_;++i){const m=i/_*y*Math.PI*2;calculatePositionOnCurve(m,y,T,g,$),calculatePositionOnCurve(m+.01,y,T,g,q),ye[0]=q[0]-$[0],ye[1]=q[1]-$[1],ye[2]=q[2]-$[2],Ge[0]=q[0]+$[0],Ge[1]=q[1]+$[1],Ge[2]=q[2]+$[2];{const i=ye[0],m=ye[1],g=ye[2],x=Ge[0],_=Ge[1],b=Ge[2];W[0]=m*b-g*_,W[1]=g*x-i*b,W[2]=i*_-m*x}{const i=W[0],m=W[1],g=W[2],x=ye[0],_=ye[1],b=ye[2];Ge[0]=m*b-g*_,Ge[1]=g*x-i*b,Ge[2]=i*_-m*x}{let i=W[0],m=W[1],g=W[2],x=i*i+m*m+g*g;x>0&&(x=1/Math.sqrt(x||1)),W[0]=W[0]*x,W[1]=W[1]*x,W[2]=W[2]*x}{let i=Ge[0],m=Ge[1],g=Ge[2],x=i*i+m*m+g*g;x>0&&(x=1/Math.sqrt(x)),Ge[0]=Ge[0]*x,Ge[1]=Ge[1]*x,Ge[2]=Ge[2]*x}for(let m=0;m<=b;++m){const g=m/b*Math.PI*2,y=-x*Math.cos(g),T=x*Math.sin(g);H[0]=$[0]+(y*Ge[0]+T*W[0]),H[1]=$[1]+(y*Ge[1]+T*W[1]),H[2]=$[2]+(y*Ge[2]+T*W[2]),w.push(H[0],H[1],H[2]);{z[0]=H[0]-$[0],z[1]=H[1]-$[1],z[2]=H[2]-$[2];let i=z[0],m=z[1],g=z[2],x=i*i+m*m+g*g;x>0&&(x=1/Math.sqrt(x)),z[0]=z[0]*x,z[1]=z[1]*x,z[2]=z[2]*x}w.push(z[0],z[1],z[2],i/_,m/b)}}for(let i=1;i<=_;i++)for(let m=1;m<=b;m++){const g=(b+1)*(i-1)+(m-1),x=(b+1)*i+(m-1),_=(b+1)*i+m,y=(b+1)*(i-1)+m;P.push(g,x,y),P.push(x,_,y)}return createPrimitiveGeometry(m,w,P,i)}}();constructor(i,m=1,g=.4,x=64,_=8,b=2,y=3){super(i);const T=`PRIMITIVE_TORUS_NUT_R${m}_T${g}_TS${x}_RS${_}_P${b}_Q${y}`,w=i.resourceManager.cachedBufferState;let P=w[T];P||(P=w[T]=this.#xa(T,i,m,g,x,_,b,y)),this._setData(P)}}});class IBL{#b;#Xl;#Yl;#jl;#Zl;#Jl;#Ql;#v=createUUID();#ie="rgba8unorm";#ec;#tc;#nc;get exposure(){if(this.#ec instanceof HDRTexture)return this.#ec.exposure}set exposure(i){validatePositiveNumberRange(i),this.#ec instanceof HDRTexture&&(this.#ec.exposure=i)}constructor(i,m,g=1024,x=512){this.#nc=x,this.#tc=g,this.#b=i,this.#Yl=new CubeTexture(i,[],!1,void 0,void 0,this.#ie),this.#Zl=new CubeTexture(i,[],!1,void 0,void 0,this.#ie),this.#jl=new CubeTexture(i,[],!1,void 0,void 0,this.#ie),this.#ec="string"==typeof m?new HDRTexture(i,m,i=>{this.#Xl=i.gpuTexture,this.#sa()},void 0,g,!0):new CubeTexture(i,m,!0,i=>{this.#Xl=i.gpuTexture,this.#sa()})}get envCubeSize(){return this.#tc}get iblCubeSize(){return this.#nc}get irradianceTexture(){return this.#jl}get environmentTexture(){return this.#Yl}get iblTexture(){return this.#Zl}async#sa(){const{mipmapGenerator:i}=this.#b.resourceManager,m=await i.downsampleCubemap(this.#Xl,this.#nc);this.#Zl.setGPUTextureDirectly(m,`${this.#v}_iblTexture`),this.#Yl.setGPUTextureDirectly(this.#Xl,`${this.#v}_environmentTexture`);const g=await this.#rc(this.#Xl);this.#jl.setGPUTextureDirectly(g,`${this.#v}_irradianceTexture`,!1)}async#rc(i){const{gpuDevice:m}=this.#b,g=m.createTexture({size:[32,32,6],format:this.#ie,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:1,label:`${this.#v}_irradianceTexture`}),x=m.createShaderModule({code:"struct VertexOutput {@builtin(position) position:vec4<f32>,@location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput {var pos=array<vec2<f32>,6>(vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0),vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0));var texCoord=array<vec2<f32>,6>(vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0),vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0));var output:VertexOutput;output.position=vec4<f32>(pos[vertexIndex],0.0,1.0);output.texCoord=texCoord[vertexIndex];return output;\n}\n@group(0) @binding(0) var environmentTexture:texture_cube<f32>;\n@group(0) @binding(1) var environmentSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\nconst PI=3.14159265359;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> {let ndc=vec2<f32>(input.texCoord.x * 2.0 - 1.0,1.0 - input.texCoord.y * 2.0 );let localDirection=vec3<f32>(ndc.x,ndc.y,1.0);let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz);let normal=worldDirection;var irradiance=vec3<f32>(0.0);var up=vec3<f32>(0.0,1.0,0.0);let tangent=normalize(cross(up,normal));let bitangent=normalize(cross(normal,tangent));let sampleCount=32u;let invSampleCount=1.0/f32(sampleCount);for (var i=0u;i < sampleCount;i++) {for (var j=0u;j < sampleCount;j++) {let u1=(f32(i) + 0.5) * invSampleCount;let u2=(f32(j) + 0.5) * invSampleCount;let cosTheta=sqrt(u1);let sinTheta=sqrt(1.0 - u1);let phi=2.0 * PI * u2;let cosPhi=cos(phi);let sinPhi=sin(phi);let sampleVec=vec3<f32>(sinTheta * cosPhi,sinTheta * sinPhi,cosTheta);let worldSample=sampleVec.x * tangent +sampleVec.y * bitangent +sampleVec.z * normal;let sampleColor=textureSample(environmentTexture,environmentSampler,worldSample);irradiance +=sampleColor.rgb * cosTheta;}}irradiance=irradiance * PI * invSampleCount * invSampleCount;return vec4<f32>(irradiance,1.0);\n}\n"}),_=m.createRenderPipeline({layout:"auto",vertex:{module:x,entryPoint:"vs_main"},fragment:{module:x,entryPoint:"fs_main",targets:[{format:this.#ie}]}}),b=new Sampler(this.#b,{magFilter:yr.LINEAR,minFilter:yr.LINEAR,mipmapFilter:Tr.LINEAR,addressModeU:br.CLAMP_TO_EDGE,addressModeV:br.CLAMP_TO_EDGE,addressModeW:br.CLAMP_TO_EDGE}),y=this.#gu();for(let m=0;m<6;m++)await this.#ic(_,b,m,y[m],i,g);return g}async#ic(i,m,g,x,_,b){const{gpuDevice:y}=this.#b,T=y.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`irradiance_face_${g}_uniform`});y.queue.writeBuffer(T,0,x);const w=y.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:_.createView({dimension:"cube"})},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:T}}]}),P=y.createCommandEncoder({label:`ibl_irradiance_face_${g}_encoder`}),H=P.beginRenderPass({colorAttachments:[{view:b.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],label:`irradiance_face_${g}_renderpass`});H.setPipeline(i),H.setBindGroup(0,w),H.draw(6,1,0,0),H.end(),y.queue.submit([P.finish()]),T.destroy()}#gu(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}}Object.freeze(IBL);const Ua={animationSpeed:1,animationX:.1,animationY:.1};class ANoiseTexture extends ManagedResourceBase{cacheKey;mipLevelCount;videoMemorySize;useMipmap;src;#Z;#Ot=8;#Ft=8;#Zi=1;#Qi;#ea;#ta;#na;#Ri;#ac;#Dr;#Ur;#sc;#oc=0;#uc=1;#lc=Ua.animationX;#cc=Ua.animationY;constructor(i,m=1024,g=1024,x){super(i,"managedBitmapTextureState"),validateUintRange(m,2,2048),validateUintRange(g,2,2048),this.#Dr=m,this.#Ur=g,this.#sc=x,this.#sa(i),this.#Z=this.#fa(i,m,g),this.#ma(),this.#oe()}get animationSpeed(){return this.#uc}set animationSpeed(i){validatePositiveNumberRange(i),this.#uc=i,this.updateUniform("animationSpeed",i)}get animationX(){return this.#lc}set animationX(i){validateNumber(i),this.#lc=i,this.updateUniform("animationX",i)}get animationY(){return this.#cc}set animationY(i){validateNumber(i),this.#cc=i,this.updateUniform("animationY",i)}get uniformInfo(){return this.#ac}get gpuTexture(){return this.#Z}get time(){return this.#oc}set time(i){validatePositiveNumberRange(i),this.#oc=i,this.updateUniform("time",i/1e3)}updateUniform(i,m){this.#ac.members[i]&&(this.#Ri.writeBuffer(this.#ac.members[i],m),this.#sc[i]=m),this.#ma()}updateUniforms(i){Object.entries(i).forEach(([i,m])=>{this.#ac.members[i]&&(this.#Ri.writeBuffer(this.#ac.members[i],m),this.#sc[i]=m)}),this.#ma()}render(i){this.updateUniform("time",i),this.#ma()}#sa(i){const{gpuDevice:m}=i,g=this.#hc();this.cacheKey=createUUID(),this.#Qi=m.createShaderModule({code:g}),this.#ta=this.#ca(i),this.#na=this.#ha(m,this.#Qi,this.#ta);const x=parseWGSL(g);this.#ac=x.uniforms.uniforms;const _=new ArrayBuffer(this.#ac.arrayBufferByteLength);this.#Ri=new UniformBuffer(i,_,`${this.constructor.name}_UniformBuffer`),this.#sc.uniformDefaults&&this.updateUniforms({...Ua,...this.#sc.uniformDefaults})}#hc(){return`${`struct Uniforms {time:f32,animationSpeed:f32,animationX:f32,animationY:f32,${this.#sc.uniformStruct||""}};`}@group(0) @binding(0) var<uniform> uniforms:Uniforms;@group(0) @binding(1) var outputTexture:texture_storage_2d<rgba8unorm,write>;${this.#sc.helperFunctions||""}@compute @workgroup_size(${this.#Ot},${this.#Ft},${this.#Zi})fn main (@builtin(global_invocation_id) global_id:vec3<u32>,){let index=vec2<u32>(global_id.xy);let dimensions:vec2<u32>=textureDimensions(outputTexture);/* 경계 체크 */if (index.x >=dimensions.x || index.y >=dimensions.y) {return;}let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let base_uv=vec2<f32>((f32(index.x) + 0.5)/dimW,(f32(index.y) + 0.5)/dimH);${this.#sc.mainLogic}textureStore(outputTexture,index,finalColor);}`}#ma(){if(!this.#ea)return;const i=this.redGPUContext.gpuDevice.createCommandEncoder(),m=i.beginComputePass();m.setPipeline(this.#na),m.setBindGroup(0,this.#ea),m.dispatchWorkgroups(Math.ceil(this.#Dr/this.#Ot),Math.ceil(this.#Ur/this.#Ft)),m.end(),this.redGPUContext.gpuDevice.queue.submit([i.finish()])}#ca(i){return i.resourceManager.createBindGroupLayout("NoiseTextureBindGroupLayout",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#fa(i,m,g){const x=i.gpuDevice.createTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`NoiseTexture_${m}x${g}_${Date.now()}`}),_=x.createView();return this.#ea=this.#da(i,this.#ta,_),x}#da(i,m,g){return i.gpuDevice.createBindGroup({layout:m,entries:[{binding:0,resource:{buffer:this.#Ri.gpuBuffer,offset:0,size:this.#Ri.gpuBuffer.size}},{binding:1,resource:g}]})}#ha(i,m,g){return i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#oe(){basicRegisterResource(this,new gr(this))}#he(){basicUnregisterResource(this)}}const Aa={MODE_1D:1,MODE_2D:2,MODE_3D:3};Object.freeze(Aa);const mergerNoiseUniformStruct=(i,m)=>[i,m].filter(Boolean).join("\n"),mergerNoiseUniformDefault=(i,m)=>({...i,...m||{}}),mergerNoiseHelperFunctions=(i,m)=>[i,m].filter(Boolean).join("\n");const ka=Object.values(Aa),Oa={frequency:8,amplitude:1,octaves:1,persistence:.5,lacunarity:2,seed:0,noiseDimension:Aa.MODE_2D};const Fa={EUCLIDEAN:0,MANHATTAN:1,CHEBYSHEV:2};Object.freeze(Fa);const Na={F1:0,F2:1,F2_MINUS_F1:2,F1_PLUS_F2:3,CELL_ID:4,CELL_ID_COLOR:5};Object.freeze(Na);const Ga=Object.values(Fa),Va=Object.values(Na),Ha={frequency:8,distanceScale:1,octaves:1,persistence:.5,lacunarity:2,seed:0,distanceType:Fa.EUCLIDEAN,outputType:Na.F1,jitter:1,cellIdColorIntensity:1};var za=Object.freeze({__proto__:null,ANoiseTexture:ANoiseTexture,AUniformBaseBuffer:AUniformBaseBuffer,BitmapTexture:BitmapTexture,CubeTexture:CubeTexture,HDRTexture:HDRTexture,IBL:IBL,IndexBuffer:IndexBuffer,InterleavedStructElement:InterleavedStructElement,NOISE_DIMENSION:Aa,ResourceBase:ResourceBase,ResourceManager:ResourceManager,ResourceState:ResourceState,Sampler:Sampler,SimplexTexture:class extends ANoiseTexture{#fc=Oa.frequency;#dc=Oa.amplitude;#mc=Oa.octaves;#pc=Oa.persistence;#gc=Oa.lacunarity;#xc=Oa.seed;#_c=Oa.noiseDimension;constructor(i,m=1024,g=1024,x){super(i,m,g,{...x,mainLogic:x?.mainLogic||"let uv=vec2<f32>((base_uv.x + uniforms.time * ( uniforms.animationX * uniforms.animationSpeed )),(base_uv.y + uniforms.time * ( uniforms.animationY * uniforms.animationSpeed )) );let noise=getSimplexNoiseByDimension( uv,uniforms );/* 최종 색상 (그레이스케일) */let finalColor=vec4<f32>(noise,noise,noise,1.0);",uniformStruct:mergerNoiseUniformStruct("noiseDimension:f32,frequency:f32,amplitude:f32,octaves:i32,persistence:f32,lacunarity:f32,seed:f32,",x?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(Oa,x?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("\nfn mod289_vec3(x:vec3<f32>) -> vec3<f32> {return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec2(x:vec2<f32>) -> vec2<f32> {return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec4(x:vec4<f32>) -> vec4<f32> {return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_f32(x:f32) -> f32 {return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn permute(x:vec3<f32>) -> vec3<f32> {return mod289_vec3(((x * 34.0) + 1.0) * x);\n}\nfn permute4(x:vec4<f32>) -> vec4<f32> {return mod289_vec4(((x * 34.0) + 1.0) * x);\n}\nfn permute_f32(x:f32) -> f32 {return mod289_f32(((x * 34.0) + 1.0) * x);\n}\nfn taylorInvSqrt4(r:vec4<f32>) -> vec4<f32> {return 1.79284291400159 - 0.85373472095314 * r;\n}\nfn simplex1D(x:f32) -> f32 {var i=floor(x);let f=fract(x);let g0=select(-1.0,1.0,(permute_f32(i) * 0.024390243902439) >=0.5);let g1=select(-1.0,1.0,(permute_f32(i + 1.0) * 0.024390243902439) >=0.5);let d0=f;let d1=f - 1.0;let t=f * f * f * (f * (f * 6.0 - 15.0) + 10.0);let n0=g0 * d0;let n1=g1 * d1;return mix(n0,n1,t) * 0.395;\n}\nfn simplex2D(v:vec2<f32>) -> f32 {let C=vec4<f32>(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);var i=floor(v + dot(v,C.yy));let x0=v - i + dot(i,C.xx);let i1=select(vec2<f32>(0.0,1.0),vec2<f32>(1.0,0.0),x0.x > x0.y);var x12=x0.xyxy + C.xxzz;x12.x=x12.x - i1.x;x12.y=x12.y - i1.y;i=mod289_vec2(i);let p=permute(permute(i.y + vec3<f32>(0.0,i1.y,1.0)) + i.x + vec3<f32>(0.0,i1.x,1.0));var m=max(0.5 - vec3<f32>(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),vec3<f32>(0.0));m=m * m;m=m * m;let x=2.0 * fract(p * C.www) - 1.0;let h=abs(x) - 0.5;let ox=floor(x + 0.5);let a0=x - ox;m=m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h));let g=vec3<f32>(a0.x * x0.x + h.x * x0.y,a0.y * x12.x + h.y * x12.y,a0.z * x12.z + h.z * x12.w);return 130.0 * dot(m,g);\n}\nfn simplex3D(v:vec3<f32>) -> f32 {let C=vec2<f32>(1.0/6.0,1.0/3.0);let D=vec4<f32>(0.0,0.5,1.0,2.0);var i=floor(v + dot(v,C.yyy));let x0=v - i + dot(i,C.xxx);let g=step(x0.yzx,x0.xyz);let l=1.0 - g;let i1=min(g.xyz,l.zxy);let i2=max(g.xyz,l.zxy);let x1=x0 - i1 + C.xxx;let x2=x0 - i2 + C.yyy;let x3=x0 - D.yyy;i=mod289_vec3(i);let p=permute4(permute4(permute4(i.z + vec4<f32>(0.0,i1.z,i2.z,1.0 )) +i.y + vec4<f32>(0.0,i1.y,i2.y,1.0 )) +i.x + vec4<f32>(0.0,i1.x,i2.x,1.0 ));let n_=0.142857142857;let ns=n_ * D.wyz - D.xzx;let j=p - 49.0 * floor(p * ns.z * ns.z);let x_=floor(j * ns.z);let y_=floor(j - 7.0 * x_ );let x=x_ *ns.x + ns.yyyy;let y=y_ *ns.x + ns.yyyy;let h=1.0 - abs(x) - abs(y);let b0=vec4<f32>( x.xy,y.xy );let b1=vec4<f32>( x.zw,y.zw );let s0=floor(b0)*2.0 + 1.0;let s1=floor(b1)*2.0 + 1.0;let sh=-step(h,vec4<f32>(0.0));let a0=b0.xzyw + s0.xzyw*sh.xxyy;let a1=b1.xzyw + s1.xzyw*sh.zzww;var p0=vec3<f32>(a0.xy,h.x);var p1=vec3<f32>(a0.zw,h.y);var p2=vec3<f32>(a1.xy,h.z);var p3=vec3<f32>(a1.zw,h.w);let norm=taylorInvSqrt4(vec4<f32>(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0 *=norm.x;p1 *=norm.y;p2 *=norm.z;p3 *=norm.w;var m=max(0.6 - vec4<f32>(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),vec4<f32>(0.0));m=m * m;return 42.0 * dot( m*m,vec4<f32>( dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3) ) );\n}\nfn fbm1D(pos:f32,octaves:i32) -> f32 {var value=0.0;var amplitude=0.5;var frequency=1.0;var max_value=0.0;for (var i=0;i < octaves;i++) {if (i >=octaves) { break;}value +=simplex1D(pos * frequency) * amplitude;max_value +=amplitude;amplitude *=0.5;frequency *=2.0;}return value/max_value;\n}\nfn fbm(pos:vec2<f32>,octaves:i32) -> f32 {var value=0.0;var amplitude=0.5;var frequency=1.0;var max_value=0.0;for (var i=0;i < octaves;i++) {if (i >=octaves) { break;}value +=simplex2D(pos * frequency) * amplitude;max_value +=amplitude;amplitude *=0.5;frequency *=2.0;}return value/max_value;\n}\nfn fbm3D(pos:vec3<f32>,octaves:i32) -> f32 {var value=0.0;var amplitude=0.5;var frequency=1.0;var max_value=0.0;for (var i=0;i < octaves;i++) {if (i >=octaves) { break;}value +=simplex3D(pos * frequency) * amplitude;max_value +=amplitude;amplitude *=0.5;frequency *=2.0;}return value/max_value;\n}\nfn getSimplexNoise1D(pos:f32,uniforms:Uniforms) -> f32 {var total_amplitude:f32=0.0;var noise_value:f32=0.0;var current_amplitude:f32=1.0;var current_frequency:f32=uniforms.frequency;for (var i:i32=0;i < uniforms.octaves;i++) {let noise_pos=(pos + uniforms.seed) * current_frequency;let octave_noise=simplex1D(noise_pos);noise_value +=octave_noise * current_amplitude;total_amplitude +=current_amplitude;current_amplitude *=uniforms.persistence;current_frequency *=uniforms.lacunarity;}noise_value/=total_amplitude;noise_value *=uniforms.amplitude;let normalized_noise=(noise_value + 1.0) * 0.5;return normalized_noise;\n}\nfn getSimplexNoise2D(uv:vec2<f32>,uniforms:Uniforms) -> f32 {var total_amplitude:f32=0.0;var noise_value:f32=0.0;var current_amplitude:f32=1.0;var current_frequency:f32=uniforms.frequency;for (var i:i32=0;i < uniforms.octaves;i++) {let noise_pos=(uv + uniforms.seed) * current_frequency;let octave_noise=simplex2D(noise_pos);noise_value +=octave_noise * current_amplitude;total_amplitude +=current_amplitude;current_amplitude *=uniforms.persistence;current_frequency *=uniforms.lacunarity;}noise_value/=total_amplitude;noise_value *=uniforms.amplitude;let normalized_noise=(noise_value + 1.0) * 0.5;return normalized_noise;\n}\nfn getSimplexNoise3D(pos:vec3<f32>,uniforms:Uniforms) -> f32 {var total_amplitude:f32=0.0;var noise_value:f32=0.0;var current_amplitude:f32=1.0;var current_frequency:f32=uniforms.frequency;for (var i:i32=0;i < uniforms.octaves;i++) {let noise_pos=(pos + vec3<f32>(uniforms.seed)) * current_frequency;let octave_noise=simplex3D(noise_pos);noise_value +=octave_noise * current_amplitude;total_amplitude +=current_amplitude;current_amplitude *=uniforms.persistence;current_frequency *=uniforms.lacunarity;}noise_value/=total_amplitude;noise_value *=uniforms.amplitude;let normalized_noise=(noise_value + 1.0) * 0.5;return normalized_noise;\n}\nfn getSimplexNoiseByDimension(uv:vec2<f32>,uniforms:Uniforms) -> f32 {if (uniforms.noiseDimension < 1.1) {return getSimplexNoise1D(uv.x,uniforms);} else if (uniforms.noiseDimension < 2.1) {return getSimplexNoise2D(uv,uniforms);} else if (uniforms.noiseDimension < 3.1) {return getSimplexNoise3D(vec3<f32>(uv.x,uv.y,uniforms.seed * 0.1),uniforms);} else {return getSimplexNoise2D(uv,uniforms);}\n}\n",x?.helperFunctions)})}get noiseDimension(){return this.#_c}set noiseDimension(i){ka.includes(i)?(this.#_c=i,this.updateUniform("noiseDimension",i)):consoleAndThrowError(`Invalid value for noiseDimension. Received ${i}. Expected one of:${ka.join(",")}`)}get frequency(){return this.#fc}set frequency(i){validatePositiveNumberRange(i),this.#fc=i,this.updateUniform("frequency",i)}get amplitude(){return this.#dc}set amplitude(i){validatePositiveNumberRange(i),this.#dc=i,this.updateUniform("amplitude",i)}get octaves(){return this.#mc}set octaves(i){validateUintRange(i,1,8),this.#mc=i,this.updateUniform("octaves",i)}get persistence(){return this.#pc}set persistence(i){validatePositiveNumberRange(i,0,1),this.#pc=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#gc}set lacunarity(i){validatePositiveNumberRange(i),this.#gc=i,this.updateUniform("lacunarity",i)}get seed(){return this.#xc}set seed(i){this.#xc=i,this.updateUniform("seed",i)}randomizeSeed(){this.seed=1e3*Math.random()}getSettings(){return{frequency:this.#fc,amplitude:this.#dc,octaves:this.#mc,persistence:this.#pc,lacunarity:this.#gc,seed:this.#xc}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.amplitude&&(this.amplitude=i.amplitude),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed)}},StorageBuffer:StorageBuffer,UniformBuffer:UniformBuffer,UniformType:UniformType,VORONOI_DISTANCE_TYPE:Fa,VORONOI_OUTPUT_TYPE:Na,VertexBuffer:VertexBuffer,VoronoiTexture:class extends ANoiseTexture{#fc=Ha.frequency;#vc=Ha.distanceScale;#mc=Ha.octaves;#pc=Ha.persistence;#gc=Ha.lacunarity;#xc=Ha.seed;#bc=Ha.distanceType;#yc=Ha.outputType;#Tc=Ha.jitter;#Sc=Ha.cellIdColorIntensity;constructor(i,m=1024,g=1024,x){super(i,m,g,{...x,mainLogic:x?.mainLogic||"let uv=vec2<f32>((base_uv.x + uniforms.time * (uniforms.animationX * uniforms.animationSpeed)),(base_uv.y + uniforms.time * (uniforms.animationY * uniforms.animationSpeed)));var finalColor:vec4<f32>;if (uniforms.outputType==5) {let colorNoise=getVoronoiColorNoise(uv,uniforms);finalColor=vec4<f32>(colorNoise,1.0);} else {let noise=getVoronoiNoise(uv,uniforms);finalColor=vec4<f32>(noise,noise,noise,1.0);}",uniformStruct:mergerNoiseUniformStruct("frequency:f32,distanceScale:f32,octaves:i32,persistence:f32,lacunarity:f32,seed:f32,distanceType:i32,outputType:i32,jitter:f32,cellIdColorIntensity:f32,",x?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(Ha,x?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("fn hash22(p:vec2<f32>) -> vec2<f32> {var p3=fract(vec3<f32>(p.xyx) * vec3<f32>(0.1031,0.1030,0.0973));p3 +=dot(p3,p3.yzx + 33.33);return fract((p3.xx + p3.yz) * p3.zy);\n}\nfn hash12(p:vec2<f32>) -> f32 {var p3=fract(vec3<f32>(p.xyx) * 0.1031);p3 +=dot(p3,p3.yzx + 33.33);return fract((p3.x + p3.y) * p3.z);\n}\nfn euclideanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 {let d=a - b;return sqrt(d.x * d.x + d.y * d.y);\n}\nfn manhattanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 {let d=abs(a - b);return d.x + d.y;\n}\nfn chebyshevDistance(a:vec2<f32>,b:vec2<f32>) -> f32 {let d=abs(a - b);return max(d.x,d.y);\n}\nfn calculateDistance(a:vec2<f32>,b:vec2<f32>,distanceType:i32) -> f32 {switch (distanceType) {case 0:{ return euclideanDistance(a,b);}case 1:{ return manhattanDistance(a,b);}case 2:{ return chebyshevDistance(a,b);}default:{ return euclideanDistance(a,b);}}\n}\nfn cellIdToColor(cellId:f32,intensity:f32) -> vec3<f32> {let h=cellId * 6.28318;let s=0.7 + 0.3 * fract(cellId * 7.0);let v=0.6 + 0.4 * fract(cellId * 13.0);let c=v * s;let x=c * (1.0 - abs(((h/1.047198) % 2.0) - 1.0));let m=v - c;var rgb:vec3<f32>;let sector=i32(h/1.047198) % 6;switch (sector) {case 0:{ rgb=vec3<f32>(c,x,0.0);}case 1:{ rgb=vec3<f32>(x,c,0.0);}case 2:{ rgb=vec3<f32>(0.0,c,x);}case 3:{ rgb=vec3<f32>(0.0,x,c);}case 4:{ rgb=vec3<f32>(x,0.0,c);}default:{ rgb=vec3<f32>(c,0.0,x);}}return (rgb + m) * intensity;\n}\nstruct VoronoiResult {f1:f32,f2:f32,cellId:f32,\n}\nfn voronoiSingle(pos:vec2<f32>,frequency:f32,seed:f32,jitter:f32,distanceType:i32) -> VoronoiResult {let scaledPos=pos * frequency;let gridPos=floor(scaledPos);let localPos=fract(scaledPos);var minDist1=999.0;var minDist2=999.0;var closestCellId=0.0;for (var y=-1;y <=1;y++) {for (var x=-1;x <=1;x++) {let neighborGrid=gridPos + vec2<f32>(f32(x),f32(y));let randomOffset=hash22(neighborGrid + seed);let jitteredOffset=mix(vec2<f32>(0.5),randomOffset,jitter);let cellPoint=vec2<f32>(f32(x),f32(y)) + jitteredOffset;let dist=calculateDistance(localPos,cellPoint,distanceType);if (dist < minDist1) {minDist2=minDist1;minDist1=dist;closestCellId=hash12(neighborGrid + seed);} else if (dist < minDist2) {minDist2=dist;}}}return VoronoiResult(minDist1,minDist2,closestCellId);\n}\nfn getVoronoiNoise(uv:vec2<f32>,uniforms:Uniforms) -> f32 {var total=0.0;var frequency=uniforms.frequency;var amplitude=1.0;var maxValue=0.0;for (var i=0;i < uniforms.octaves;i++) {let voronoiResult=voronoiSingle(uv,frequency,uniforms.seed + f32(i) * 100.0,uniforms.jitter,uniforms.distanceType);let F1=voronoiResult.f1 * uniforms.distanceScale;let F2=voronoiResult.f2 * uniforms.distanceScale;let cellId=voronoiResult.cellId;var octaveValue:f32;switch (uniforms.outputType) {case 0:{ octaveValue=F1;}case 1:{ octaveValue=F2;}case 2:{ octaveValue=F2 - F1;}case 3:{ octaveValue=(F1 + F2) * 0.5;}case 4:{ octaveValue=cellId;} case 5:{let colorRGB=cellIdToColor(cellId,uniforms.cellIdColorIntensity);octaveValue=(colorRGB.r + colorRGB.g + colorRGB.b)/3.0;}default:{ octaveValue=F1;}}total +=octaveValue * amplitude;maxValue +=amplitude;frequency *=uniforms.lacunarity;amplitude *=uniforms.persistence;}return clamp(total/maxValue,0.0,1.0);\n}\nfn getVoronoiColorNoise(uv:vec2<f32>,uniforms:Uniforms) -> vec3<f32> {if (uniforms.outputType==5) { let voronoiResult=voronoiSingle(uv,uniforms.frequency,uniforms.seed,uniforms.jitter,uniforms.distanceType);return cellIdToColor(voronoiResult.cellId,uniforms.cellIdColorIntensity);} else {let grayValue=getVoronoiNoise(uv,uniforms);return vec3<f32>(grayValue,grayValue,grayValue);}\n}\n",x?.helperFunctions)})}get frequency(){return this.#fc}set frequency(i){validatePositiveNumberRange(i),this.#fc=i,this.updateUniform("frequency",i)}get distanceScale(){return this.#vc}set distanceScale(i){validatePositiveNumberRange(i),this.#vc=i,this.updateUniform("distanceScale",i)}get octaves(){return this.#mc}set octaves(i){validateUintRange(i,1,8),this.#mc=i,this.updateUniform("octaves",i)}get persistence(){return this.#pc}set persistence(i){validatePositiveNumberRange(i,0,1),this.#pc=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#gc}set lacunarity(i){validatePositiveNumberRange(i),this.#gc=i,this.updateUniform("lacunarity",i)}get seed(){return this.#xc}set seed(i){this.#xc=i,this.updateUniform("seed",i)}get distanceType(){return this.#bc}set distanceType(i){Ga.includes(i)?(this.#bc=i,this.updateUniform("distanceType",i)):consoleAndThrowError(`Invalid value for distanceType. Received ${i}. Expected one of:${Ga.join(",")}`)}get outputType(){return this.#yc}set outputType(i){Va.includes(i)?(this.#yc=i,this.updateUniform("outputType",i)):consoleAndThrowError(`Invalid value for outputType. Received ${i}. Expected one of:${Va.join(",")}`)}get jitter(){return this.#Tc}set jitter(i){(i<0||i>1)&&consoleAndThrowError(`Jitter must be between 0 and 1. Received:${i}`),validatePositiveNumberRange(i,0,1),this.#Tc=i,this.updateUniform("jitter",i)}get cellIdColorIntensity(){return this.#Sc}set cellIdColorIntensity(i){validatePositiveNumberRange(i),this.#Sc=i,this.updateUniform("cellIdColorIntensity",i)}randomizeSeed(){this.seed=1e3*Math.random()}setEuclideanDistance(){this.distanceType=Fa.EUCLIDEAN}setManhattanDistance(){this.distanceType=Fa.MANHATTAN}setChebyshevDistance(){this.distanceType=Fa.CHEBYSHEV}setF1Output(){this.outputType=Na.F1}setF2Output(){this.outputType=Na.F2}setCrackPattern(){this.outputType=Na.F2_MINUS_F1}setSmoothBlend(){this.outputType=Na.F1_PLUS_F2}setCellIdOutput(){this.outputType=Na.CELL_ID}setCellIdColorOutput(){this.outputType=Na.CELL_ID_COLOR}setCellularPattern(){this.outputType=Na.F1,this.distanceType=Fa.EUCLIDEAN,this.jitter=1}setStonePattern(){this.outputType=Na.F2_MINUS_F1,this.distanceType=Fa.EUCLIDEAN,this.jitter=.8}setOrganicPattern(){this.distanceType=Fa.MANHATTAN,this.jitter=.6}setGridPattern(){this.jitter=0,this.distanceType=Fa.EUCLIDEAN}setCrystalPattern(){this.outputType=Na.F2_MINUS_F1,this.distanceType=Fa.CHEBYSHEV,this.jitter=.9}setStainedGlassPattern(){this.outputType=Na.CELL_ID_COLOR,this.distanceType=Fa.EUCLIDEAN,this.jitter=.7,this.cellIdColorIntensity=.8}setMosaicPattern(){this.outputType=Na.CELL_ID_COLOR,this.distanceType=Fa.MANHATTAN,this.jitter=.3,this.cellIdColorIntensity=1}setBiomeMapPattern(){this.outputType=Na.CELL_ID,this.distanceType=Fa.EUCLIDEAN,this.jitter=.8,this.frequency=4}getSettings(){return{frequency:this.#fc,distanceScale:this.#vc,octaves:this.#mc,persistence:this.#pc,lacunarity:this.#gc,seed:this.#xc,distanceType:this.#bc,outputType:this.#yc,jitter:this.#Tc,cellIdColorIntensity:this.#Sc}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.distanceScale&&(this.distanceScale=i.distanceScale),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed),void 0!==i.distanceType&&(this.distanceType=i.distanceType),void 0!==i.outputType&&(this.outputType=i.outputType),void 0!==i.jitter&&(this.jitter=i.jitter),void 0!==i.cellIdColorIntensity&&(this.cellIdColorIntensity=i.cellIdColorIntensity)}getDistanceTypeName(){return{[Fa.EUCLIDEAN]:"Euclidean",[Fa.MANHATTAN]:"Manhattan",[Fa.CHEBYSHEV]:"Chebyshev"}[this.#bc]||"Unknown"}getOutputTypeName(){return{[Na.F1]:"F1",[Na.F2]:"F2",[Na.F2_MINUS_F1]:"F2-F1 (Crack)",[Na.F1_PLUS_F2]:"F1+F2 (Blend)",[Na.CELL_ID]:"Cell ID",[Na.CELL_ID_COLOR]:"Cell ID Color"}[this.#yc]||"Unknown"}},getUniformOffsetByRoundUp:(i,m)=>((i+m-1)/m|0)*m,loadAndCreateBitmapImage:loadAndCreateBitmapImage,parseIncludeWGSL:parseIncludeWGSL,parseWGSL:parseWGSL}),$a=Object.freeze({__proto__:null,BlendState:BlendState,DepthStencilState:DepthStencilState,PrimitiveState:PrimitiveState}),qa="\n@group(1) @binding(0)\nvar _sampler:sampler;\n@group(1) @binding(1)\nvar _texture:texture_2d<f32>;\n@fragment\nfn main(@location(0) fragUV:vec2<f32>) -> @location(0) vec4<f32> {var diffuseColor:vec4<f32>=textureSample(_texture,_sampler,fragUV);diffuseColor=vec4<f32>(diffuseColor.rgb,diffuseColor.a);return diffuseColor;\n}\n",Ka="\nstruct VertexUniforms {modelMatrix:mat4x4<f32>,\n};\n@group(0) @binding(0)\nvar<uniform> vertexUniforms:VertexUniforms;\nstruct VertexOutput {@builtin(position) Position:vec4<f32>,@location(0) fragUV:vec2<f32>,\n};\n@vertex\nfn main(@builtin(vertex_index) VertexIndex:u32) -> VertexOutput {var pos=array<vec2<f32>,6>(vec2( 1.0,1.0),vec2( 1.0,-1.0),vec2(-1.0,-1.0),vec2( 1.0,1.0),vec2(-1.0,-1.0),vec2(-1.0,1.0),);var uv=array<vec2<f32>,6>(vec2(1.0,0.0),vec2(1.0,1.0),vec2(0.0,1.0),vec2(1.0,0.0),vec2(0.0,1.0),vec2(0.0,0.0),);var output:VertexOutput;output.Position=vertexUniforms.modelMatrix * vec4<f32>(pos[VertexIndex],0.0,1.0);output.fragUV=uv[VertexIndex];return output;\n}\n";const Wa=parseWGSL(Ka),Xa=parseWGSL(qa),Ya=Wa.uniforms.vertexUniforms;class FinalRender{#wc=[];#Mc=[];#Rc;#Cc;#Pc;#Ec;#Ic;#Bc=[];#fe;#Lc=[];#Dc=[];#de;constructor(){}render(i,m){const{sizeManager:g,gpuDevice:x,antialiasingManager:_}=i,{changedMSAA:b,useMSAA:y}=_,{pixelRectObject:T}=g,{width:w,height:P}=T;if(0===w||0===P)return;const H=this.#Uc(i),z=x.createCommandEncoder(),$=z.beginRenderPass(H);$.setViewport(0,0,w,P,0,1),$.setScissorRect(0,0,w,P),this.#Rc&&!b||this.#Ac(i),this.#kc(i,$,m.map(i=>{const m=i.colorAttachments[0];return m.postEffectView||m.pickingView||m.resolveTarget||m.view}),w,P,y),$.end(),x.queue.submit([z.finish()])}#kc(i,m,g,x,_,b){const{gpuDevice:y}=i;g.forEach((g,b)=>{const T=i.viewList[b],{x:w,y:P,width:H,height:z}=T.pixelRectObject,$=create$5();ye($,0,1,0,1,-1e3,1e3),scale$5($,$,[1/x,1/_,1]),translate$1($,$,[H/2+w,_-z/2-P,0]),scale$5($,$,[H/2,z/2,1]),this.#Oc(i,b);const q=this.#wc[b],W=this.#Mc[b];y.queue.writeBuffer(q.gpuBuffer,Ya.members.modelMatrix.uniformOffset,new Ya.members.modelMatrix.View($));if(i.antialiasingManager.changedMSAA||!this.#Lc[b]||this.#Lc[b].width!==H||this.#Lc[b].height!==z||this.#Dc[b]!==g){const i={layout:this.#Ec,label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:this.#de.gpuSampler},{binding:1,resource:g}]};this.#Bc[b]=y.createBindGroup(i),this.#Lc[b]={width:H||1,height:z||1},this.#Dc[b]=g}m.setPipeline(this.#Fc(i)),m.setBindGroup(0,W),m.setBindGroup(1,this.#Bc[b]),m.draw(6,1,0,0)})}#Ac(i){const{resourceManager:m}=i;this.#Rc=m.createBindGroupLayout("FINAL_RENDER_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(Wa,0)),this.#Cc=m.createGPUShaderModule("VERTEX_MODULE_FINAL_RENDER",{code:Ka}),this.#Pc={module:this.#Cc,entryPoint:"main"},this.#Ic=m.createGPUShaderModule("FRAGMENT_MODULE_FINAL_RENDER",{code:qa}),this.#Ec=m.createBindGroupLayout("FINAL_RENDER_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Xa,1)),this.#de=new Sampler(i,{minFilter:"linear"})}#Oc(i,m){const{gpuDevice:g}=i;if(!this.#wc[m]){const x=new ArrayBuffer(Ya.arrayBufferByteLength),_=this.#wc[m]=new UniformBuffer(i,x,`FinalRender_View(${m})_VertexUniform`),b={layout:this.#Rc,label:"VERTEX_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:{buffer:_.gpuBuffer,offset:0,size:_.size}}]};this.#Mc[m]=g.createBindGroup(b)}}#Uc(i){const{backgroundColor:m,gpuContext:g}=i,x=m.rgbaNormal;return{colorAttachments:[{view:g.getCurrentTexture().createView({label:"finalRenderTextureView"}),clearValue:{r:x[0]*x[3],g:x[1]*x[3],b:x[2]*x[3],a:x[3]},loadOp:Cr.CLEAR,storeOp:Pr.STORE}]}}#Fc(i){if(!this.#fe||i.antialiasingManager.changedMSAA){const{gpuDevice:m}=i,g={label:"PIPELINE_DESCRIPTOR_FINAL_RENDER",layout:m.createPipelineLayout({bindGroupLayouts:[this.#Rc,this.#Ec]}),vertex:this.#Pc,fragment:{module:this.#Ic,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:{srcFactor:fr.ONE,dstFactor:fr.ONE_MINUS_SRC_ALPHA,operation:dr.ADD},alpha:{srcFactor:fr.ONE,dstFactor:fr.ONE_MINUS_SRC_ALPHA,operation:dr.ADD}}}]}};this.#fe=m.createRenderPipeline(g)}return this.#fe}}!function(i,m){void 0===m&&(m={});var g=m.insertAt;if("undefined"!=typeof document){var x=document.head||document.getElementsByTagName("head")[0],_=document.createElement("style");_.type="text/css","top"===g&&x.firstChild?x.insertBefore(_,x.firstChild):x.appendChild(_),_.styleSheet?_.styleSheet.cssText=i:_.appendChild(document.createTextNode(i))}}(".RedGPUDebugPanel{background:rgba(0,0,0,.8);bottom:0;color:#fff;font-size:11px;left:0;line-height:1;max-height:100%;min-width:250px;overflow-y:auto;position:fixed;transform:translateZ(0);will-change:transform;z-index:2}.RedGPUDebugPanel::-webkit-scrollbar{width:6px}.RedGPUDebugPanel::-webkit-scrollbar-track{background:#000}.RedGPUDebugPanel::-webkit-scrollbar-thumb{background:#333}.RedGPUDebugPanel::-webkit-scrollbar-thumb:hover{background:#444}.debug-group{line-height:1.4;padding:10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group{background:linear-gradient(90deg,hsla(0,0%,100%,.1),rgba(0,0,0,.01));border:1px solid hsla(0,0%,100%,.16);border-radius:6px;box-shadow:0 0 10px rgba(0,0,0,.16);line-height:1.4;margin:8px 0;padding:6px 10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group-title{color:#e3b096}.debug-item{align-items:center;color:#ccc;display:flex;font-weight:400;gap:10px;justify-content:space-between;transform:translateZ(0);width:100%;will-change:transform;b{color:#fdb48d;font-weight:700}}.boolean-true{background:green}.boolean-false,.boolean-true{border-radius:2px;line-height:1;margin:2px 0;padding:2px 4px}.boolean-false{background:red}.debug-folder{background:rgba(0,0,0,.5);border-bottom:1px solid hsla(0,0%,100%,.05);display:flex;flex-direction:column;width:100%}.debug-folder-title{align-items:center;background:linear-gradient(0deg,rgba(0,0,0,.95),hsla(0,0%,100%,.055));border-bottom:1px solid hsla(0,0%,100%,.025);border-top:1px solid hsla(0,0%,100%,.05);cursor:pointer;display:flex;font-size:12px;justify-content:space-between;line-height:1;padding:10px 8px;width:100%;b{color:#fdb48d;font-size:11px;font-weight:700}}.debug-item-title{color:#888}.debug-item-cache-key,.debug-item-title{font-weight:500;max-width:250px;overflow:hidden;text-overflow:ellipsis;text-shadow:1px 1px 0 rgba(0,0,0,.3)}.debug-item-cache-key{color:#fff;white-space:nowrap}.div-line{background:hsla(0,0%,100%,.06);border-bottom:1px solid transparent;height:1px;margin:10px 0;width:100%}.root-padding{padding:6px;width:100%}.color-box{border:1px solid hsla(0,0%,100%,.2);border-radius:4px;margin:2px;padding:3px}");const createDebugTitle=i=>`<div>${i}</div>`,makeColorDebug=(i,m)=>`\n<div class='debug-item'>\n\x3c!--\t<span class='debug-item-title'>${i}</span> --\x3e\n\t<span class='debug-item-title'></span> \n\t<div style="border:1px solid rgba(255,255,255,0.2);border-radius:4px;background:rgba(${m.rgba});padding:3px;margin:2px">${m.rgba}\n\t</div>\n</div>\n`,makeBooleanDebug=(i,m)=>`<span class="${m?"boolean-true":"boolean-false"}">${m?"true":"false"}</span>`,getDebugFormatValue=i=>"boolean"==typeof i?i.toString():"number"==typeof i?i.toLocaleString():i,updateDebugItemValue=(i,m,g,x,_="")=>{const b=i.querySelector(`.${m}`);if(!b)return;const y=`${getDebugFormatValue(g)}${_}`;b.innerHTML!==y&&(b.innerHTML=y,x&&(b.style.background=g?"green":"rgba(255,255,255,0.1)"))};let ja=class{dom;#Nc;#Gc=!1;constructor(i){this.#Nc=i,this.dom=document.createElement("div"),this.dom.innerHTML=`<div class="debug-folder">\t<div class="debug-folder-title" style="display:flex;align-items:center;justify-content:space-between;cursor:pointer;">${createDebugTitle(`${i} Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)`)}<div class="onoff">${this.#Gc?"close":"open"}</div></div><div class="item-container" style="display:none"></div></div>\n`;const m=this.dom.querySelector(".debug-folder"),g=this.dom.querySelector(".item-container");m.addEventListener("click",()=>{this.openYn=!this.openYn,g.style.display=this.#Gc?"":"none"})}get openYn(){return this.#Gc}set openYn(i){this.#Gc=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}update(i,m){const{resourceManager:g}=m,x=g[`managed${this.#Nc}State`],{table:_,videoMemory:b,length:y}=x;let T;switch(i.totalUsedVideoMemory+=b,updateDebugItemValue(this.dom,"totalCount",y),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(b)),this.#Nc){case"VertexBuffer":if(T=ResourceStateVertexBuffer,T){const{dirtyList:i}=T;i.length&&(this.#Vc(i),i.length=0)}break;case"IndexBuffer":if(T=ResourceStateIndexBuffer,T){const{dirtyList:i}=T;i.length&&(this.#Vc(i),i.length=0)}break;case"UniformBuffer":T=ResourceStateUniformBuffer,this.#Vc(Object.values(_));break;case"StorageBuffer":T=ResourceStateStorageBuffer,this.#Vc(Object.values(_))}}#Vc(i){const m=this.dom.querySelector(".item-container"),g=new Set,x=this.#Nc,_=new Map;m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${x}_`,"");g.add(m),_.set(m,i)}),i.map((i,b)=>{const{useNum:y,buffer:T}=i,{uuid:w,size:P,name:H}=T,z=`${x}_${w}`;let $=_.get(w);$?g.delete(w):($=document.createElement("div"),$.className=`debug-group ${z}`,$.innerHTML=`<div class='debug-item'><div><div class='debug-item-title'><span style="white-space:nowrap">${b} <span class="name"></span></span></div><div style="font-size:10px">${w}</div></div><div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"><span class='useNum' style="padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span><span style="white-space:nowrap"><b class="videoMemorySize"></b></span></div></div>`,m.appendChild($)),updateDebugItemValue($,"name",H),updateDebugItemValue($,"useNum",y,!0),updateDebugItemValue($,"videoMemorySize",formatBytes(P))});for(let i of g)_.get(i).remove()}};class DebugBufferList{debugStatisticsDomService;constructor(i){this.debugStatisticsDomService=new ja(i)}get dom(){return this.debugStatisticsDomService.dom}update(i,m){this.debugStatisticsDomService.update(i,m)}}class ADebugItem{debugStatisticsDomService;constructor(){}get dom(){return this.debugStatisticsDomService.dom}update(i,m,g){this.debugStatisticsDomService.update(i,m)}}class ADebugStatisticsDomService{dom;#Gc=!1;constructor(){}get openYn(){return this.#Gc}set openYn(i){this.#Gc=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}init(i,m=!1){this.#Gc=m,this.dom=document.createElement("div"),this.dom.innerHTML=`<div class="debug-folder">\t<div class="debug-folder-title">${i}<div class="onoff">${this.openYn?"close":"open"}</div></div><div class="item-container" style="display:${m?"":"none"}"></div></div>\n`;const g=this.dom.querySelector(".debug-folder-title"),x=this.dom.querySelector(".item-container");g.addEventListener("click",i=>{this.openYn=!this.openYn,x.style.display=this.openYn?"":"none"})}update(i,m){}}const Za=["useMSAA","alphaMode","renderScale"];let Ja=class extends ADebugStatisticsDomService{constructor(){super(),this.init(`${createDebugTitle("RedGPUContext")}`,!0),this.#Vc()}update(i,m){Za.forEach(i=>this.#Hc(m,i)),this.#zc(m)}#Vc(){const i=this.dom.querySelector(".item-container"),m=['<div class="debug-group">',...Za.map(i=>this.#$c(i)),this.#$c("width_height"),this.#$c("pixelRectArray"),this.#$c("backgroundColor"),"</div>"];i.innerHTML=m.join("")}#$c(i){return`<div class='debug-item'>${i}<span class='debug-item-title redGPUContext_${i}'/></div>`}#Hc(i,m){const g=i[m];updateDebugItemValue(this.dom,`redGPUContext_${m}`,"useMSAA"===m?makeBooleanDebug(0,g):getDebugFormatValue(g))}#zc(i){const{sizeManager:m,width:g,height:x,backgroundColor:_}=i,{pixelRectArray:b}=m;updateDebugItemValue(this.dom,"redGPUContext_width_height",`${g},${x}`),updateDebugItemValue(this.dom,"redGPUContext_pixelRectArray",b),updateDebugItemValue(this.dom,"redGPUContext_backgroundColor",makeColorDebug("backgroundColor",_))}};class DebugRedGPUContext extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new Ja}}let Qa=class extends ADebugStatisticsDomService{#qc;constructor(i){super(),this.#qc=i,this.init(`${createDebugTitle((i?"CubeTexture":"BitmapTexture")+' Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)')}`)}update(i,m){const{resourceManager:g}=m,{managedBitmapTextureState:x,managedCubeTextureState:_}=g,{table:b,videoMemory:y,length:T}=this.#qc?_:x;i.totalUsedVideoMemory+=y;const w=Object.values(b);updateDebugItemValue(this.dom,"totalCount",T),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(y)),this.#Vc(w)}getTargetSrc(i){if(i instanceof gr){const{src:m}=i;return m?m.startsWith("data:")?"base64 texture":m:"null"}{const{srcList:m}=i;return`${m[0]}...`}}getUpdatedTdom(i,m,g,x,_,b){return i||((i=document.createElement("div")).className=`debug-group ${g}`,i.innerHTML=`<div class='debug-item'><div><div class='debug-item-title'>${x} <span class="targetSrc">${_}</span></div> <div class='debug-item-cache-key'>cacheKey:<span class="cacheKey">Place holder for cacheKey</span></div><div>mipLevelCount:<span class="mipLevelCount"></span>/useMipmap:<span class="useMipmap"></span></div><div>width:<span class="width"></span>/height:<span class="height"></span></div></div><div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"><span class='useNum' style="padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span><span><b class="videoMemorySize"></b></span></div></div><div style="font-size:10px">${b}</div>`,m.appendChild(i)),i}updateDebugItems(i,m,g,x,_,b,y,T,w){updateDebugItemValue(i,"mipLevelCount",m),updateDebugItemValue(i,"useMipmap",g),updateDebugItemValue(i,"width",x),updateDebugItemValue(i,"height",_),updateDebugItemValue(i,"useNum",b,!0),updateDebugItemValue(i,"cacheKey",y),updateDebugItemValue(i,"targetSrc",T),updateDebugItemValue(i,"videoMemorySize",formatBytes(w))}#Vc(i){const m=this.dom.querySelector(".item-container"),g=new Set,x=this.#qc?"cube_texture":"bitmap_texture";m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${x}_`,"");g.add(m)}),i.map((i,_)=>{const{useNum:b,cacheKey:y,texture:T}=i;let w=this.getTargetSrc(i);const{mipLevelCount:P,useMipmap:H,gpuTexture:z,uuid:$,videoMemorySize:q}=T,{width:W,height:ye}=z||{},Ge=`${x}_${T.uuid}`;let Ke=m.querySelector(`.${Ge}`);Ke=this.getUpdatedTdom(Ke,m,Ge,_,w,$),g.delete(T.uuid),this.updateDebugItems(Ke,P,H,W,ye,b,y,w,q)});for(let i of g)m.querySelector(`.${x}_${i}`).remove()}};class DebugTextureList extends ADebugItem{constructor(i=!1){super(),this.debugStatisticsDomService=new Qa(i)}}const es=["totalNum3DGroups","totalNum3DObjects","totalNumInstances","totalNumDrawCalls","totalNumTriangles","totalNumPoints","totalUsedVideoMemory"];let ts=class{dom;constructor(){this.dom=document.createElement("div"),this.#Kc()}update(i){es.forEach(m=>{const g=i[m],x="totalUsedVideoMemory"===m?`<b>${formatBytes(g)}</b>`:g;updateDebugItemValue(this.dom,m,x)})}#Kc(){const i=this.#Vc();this.dom.innerHTML=`<div class="debug-group">${createDebugTitle("Total State")}<div>${i}</div> </div>`}#Vc(){return es.map(i=>"totalUsedVideoMemory"===i?`<div class='debug-item'>${i}<span class='debug-item-title'/><b class="${i}"></b></div>`:`<div class='debug-item'>${i}<span class='debug-item-title ${i}'/></div>`).join("")}};class DebugTotalState extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new ts}}const ns=["usedVideoMemory","viewRenderTime","num3DGroups","num3DObjects","numInstances","numDrawCalls","numTriangles","numPoints"],rs={viewRenderTime:"ms"},is={camera:"camera.name",scene:"scene.name",useBackgroundColor:"scene.useBackgroundColor",backgroundColor:"scene.backgroundColor",x_y:"x,y",width_height:"width,height"};let as=class extends ADebugStatisticsDomService{#Wc=0;constructor(){super(),this.init(`${createDebugTitle("ViewList")}`,!0)}update(i,m){const{viewList:g,numViews:x}=m;this.#Wc!==x&&(this.#Xc(g),this.#Wc=x),g.forEach((m,g)=>{ns.forEach(x=>this.#Hc(m,g,x,i)),this.#zc(m,g)})}#$c(i,m){return`<div class='debug-item'>${is[m]||m}<span class='debug-item-title view${i}_${m}'/></div>`}#Xc(i){const m=this.dom.querySelector(".item-container"),g=i.map((i,m)=>{const{name:g}=i,x=ns.map(i=>this.#$c(m,i));return x.push('<div class="debug-sub-group">',this.#$c(m,"x_y"),this.#$c(m,"width_height"),this.#$c(m,"pixelRectArray"),this.#$c(m,"camera"),this.#$c(m,"scene"),this.#$c(m,"useBackgroundColor"),this.#$c(m,"backgroundColor"),"</div>"),`${createDebugTitle(`<div class="debug-sub-group-title">${g}</div>`)}${x.join("")}`});return m.innerHTML=`<div class="debug-group">${g.join('<div class="div-line"></div>')}</div>`}#Hc(i,m,g,x){const{debugViewRenderState:_}=i,b=`total${g.charAt(0).toUpperCase()}${g.substring(1)}`,y=_[g],T="usedVideoMemory"===g?`<b>${formatBytes(y)}</b>`:y,w=rs[g];x[b]+=y,updateDebugItemValue(this.dom,`view${m}_${g}`,T,!1,w)}#zc(i,m){const{debugViewRenderState:g,rawCamera:x,scene:_}=i,{backgroundColor:b,useBackgroundColor:y}=_,{viewportSize:T}=g,{pixelRectArray:w,x:P,y:H,width:z,height:$}=T;updateDebugItemValue(this.dom,`view${m}_x_y`,`${P},${H}`),updateDebugItemValue(this.dom,`view${m}_width_height`,`${z},${$}`),updateDebugItemValue(this.dom,`view${m}_pixelRectArray`,w),updateDebugItemValue(this.dom,`view${m}_useBackgroundColor`,makeBooleanDebug(0,y)),updateDebugItemValue(this.dom,`view${m}_backgroundColor`,makeColorDebug("backgroundColor",b)),updateDebugItemValue(this.dom,`view${m}_camera`,x.name),updateDebugItemValue(this.dom,`view${m}_scene`,_.name)}};class DebugViewList extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new as}}class DebugStatisticsDomService{dom;constructor(){this.dom=document.createElement("div"),this.dom.style.cssText="z-index:1;position:sticky;top:0;background:#000;border-bottom:1px solid rgba(255,255,255,0.06);box-shadow:0 10px 10px rgba(0,0,0,0.5)",this.#Kc()}update(i,m,g){const x={elapsedSeconds:i,currentFps:m,averageFps:g};Object.entries(x).forEach(([i,m])=>this.#Yc(i,m))}#Kc(){this.dom.innerHTML='<div class="debug-group" ><div class=\'debug-item\'><span class=\'debug-item-title\'>Frame</span><span style="text-align:right"><div class="elapsedSeconds">elapsedSeconds</div><div class="currentFps">currentFps</div><div style="color:#fff" class="averageFps">averageFps</div></span></div></div>'}#Yc(i,m){const g=this.dom.querySelector(`.${i}`);if(g){const i=m.toLocaleString();g.innerHTML!==i&&(g.innerHTML=i)}}}class Fps extends ADebugItem{#jc;#Zc;#Jc=0;#Qc=0;constructor(){super(),this.debugStatisticsDomService=new DebugStatisticsDomService,this.#Zc=performance.now()}update(i,m,g){this.#eh(g);const x=this.#th(),{elapsedSeconds:_,currentFps:b,averageFps:y}=x;this.debugStatisticsDomService.update(`${_.toLocaleString()}ms`,`${b.toLocaleString()} fps`,`AVG:${y} fps`)}#eh(i){this.#jc=i-this.#Zc||16,this.#Zc=i,this.#Jc++}#th(){const i=1/(this.#jc/1e3),m=Math.round(i);this.#Qc+=i;return{currentFps:m,averageFps:Math.round(this.#Qc/this.#Jc),elapsedSeconds:this.#jc}}}class DebugRender{fps;debugTotalState;debugViewList;debugRedGPUContext;debugBitmapTextureList;debugCubeTextureList;debugIndexBufferList;debugVertexBufferList;debugUniformBufferList;debugStorageBufferList;totalNum3DGroups;totalNum3DObjects;totalNumDrawCalls;totalNumInstances;totalNumTriangles;totalNumPoints;totalUsedVideoMemory;#nh;constructor(){this.fps=new Fps,this.debugTotalState=new DebugTotalState,this.debugRedGPUContext=new DebugRedGPUContext,this.debugViewList=new DebugViewList,this.debugBitmapTextureList=new DebugTextureList,this.debugCubeTextureList=new DebugTextureList(!0),this.debugIndexBufferList=new DebugBufferList("IndexBuffer"),this.debugVertexBufferList=new DebugBufferList("VertexBuffer"),this.debugUniformBufferList=new DebugBufferList("UniformBuffer"),this.debugStorageBufferList=new DebugBufferList("StorageBuffer"),this.#rh()}render(i,m){i.useDebugPanel?(this.#ih(),this.fps.update(this,i,m),this.debugRedGPUContext.update(this,i,m),this.debugViewList.update(this,i,m),this.debugBitmapTextureList.update(this,i,m),this.debugCubeTextureList.update(this,i,m),this.debugIndexBufferList.update(this,i),this.debugVertexBufferList.update(this,i),this.debugUniformBufferList.update(this,i),this.debugStorageBufferList.update(this,i),this.debugTotalState.update(this,i,m)):this.#ah(),this.#rh()}#rh(){this.totalNum3DGroups=0,this.totalNum3DObjects=0,this.totalNumInstances=0,this.totalNumDrawCalls=0,this.totalNumTriangles=0,this.totalNumPoints=0,this.totalUsedVideoMemory=0}#ih(){this.#nh||(this.#nh=document.createElement("div"),this.#nh.className="RedGPUDebugPanel",document.body.appendChild(this.#nh),[this.fps.debugStatisticsDomService,this.debugTotalState.debugStatisticsDomService,this.debugRedGPUContext.debugStatisticsDomService,this.debugViewList.debugStatisticsDomService,this.debugVertexBufferList.debugStatisticsDomService,this.debugIndexBufferList.debugStatisticsDomService,this.debugUniformBufferList.debugStatisticsDomService,this.debugStorageBufferList.debugStatisticsDomService,this.debugBitmapTextureList.debugStatisticsDomService,this.debugCubeTextureList.debugStatisticsDomService].forEach(i=>this.#nh.appendChild(i.dom)))}#ah(){this.#nh&&(this.#nh.remove(),this.#nh=null)}}Object.freeze(DebugRender);const renderListForLayer=(i,m,g="pipeline")=>{let x=0;const _=i.length,{currentRenderPassEncoder:b}=m;for(;x<_;x++){const _=i[x];if(_.gpuRenderInfo){const i=_._geometry,x=_._material;i?m.num3DObjects++:m.num3DGroups++;const{gpuRenderInfo:y}=_,{vertexUniformBindGroup:T}=y;if(i&&y[g]){b.setPipeline(y[g]);const{gpuBuffer:w}=i.vertexBuffer,{fragmentUniformBindGroup:P}=x.gpuRenderInfo;if(m.prevVertexGpuBuffer!==w&&(b.setVertexBuffer(0,w),m.prevVertexGpuBuffer=w,_.particleBuffers&&(_.particleBuffers.forEach((i,m)=>{b.setVertexBuffer(m+1,i)}),m.prevVertexGpuBuffer=null)),b.setBindGroup(1,T),m.prevFragmentUniformBindGroup!==P&&(b.setBindGroup(2,P),m.prevFragmentUniformBindGroup=P),m.numDrawCalls++,i.indexBuffer){const{indexBuffer:g}=i,{indexNum:x,triangleCount:y,gpuBuffer:T}=g;b.setIndexBuffer(T,"uint32"),_.particleBuffers?b.drawIndexed(x,_.particleNum,0,0,0):b.drawIndexed(x,1,0,0,0),m.numTriangles+=y,m.numPoints+=x}else{const{vertexBuffer:g}=i,{vertexCount:x,triangleCount:_}=g;b.draw(x,1,0,0),m.numTriangles+=_,m.numPoints+=x}}}}m.prevVertexGpuBuffer=null,m.prevFragmentUniformBindGroup=null,m.prevVertexGpuBuffer=null},renderList=(i,m)=>{let g=0;const x=i.length;for(;g<x;g++)i[g].render(m);m.prevVertexGpuBuffer=null,m.prevFragmentUniformBindGroup=null,m.prevVertexGpuBuffer=null};class Renderer{#sh;#oh;#uh=new DebugRender;constructor(){}renderFrame(i,m){this.#oh||(this.#oh=new FinalRender);const g=[];{let x=0;const _=i.viewList.length;for(;x<_;x++){const _=i.viewList[x];g.push(this.renderView(_,m))}}this.#oh.render(i,g),i.antialiasingManager.changedMSAA=!1}start(i,m){cancelAnimationFrame(i.currentRequestAnimationFrame);const HD_render=g=>{m?.(g),this.renderFrame(i,g),this.#uh.render(i,g),i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)};i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)}stop(i){cancelAnimationFrame(i.currentRequestAnimationFrame)}renderView(i,m){const{redGPUContext:g,camera:x,scene:_,pickingManager:b,pixelRectObject:y,axis:T,grid:w,skybox:P,debugViewRenderState:H}=i,{antialiasingManager:z}=g,{useMSAA:$}=z,{shadowManager:q}=_,{directionalShadowManager:W}=q,{colorAttachment:ye,depthStencilAttachment:Ge}=this.#lh(i),Ke={colorAttachments:[ye],depthStencilAttachment:Ge};x.update?.(i,m);const Xe=g.gpuDevice.createCommandEncoder();if(i.debugViewRenderState.reset(null,m),y.width&&y.height){if(W.shadowDepthTextureView){const m={colorAttachments:[],depthStencilAttachment:{view:W.shadowDepthTextureView,depthClearValue:1,depthLoadOp:Cr.CLEAR,depthStoreOp:Pr.STORE}},g=Xe.beginRenderPass(m);this.#ch(i,g,!0,!1),((i,m)=>{const{debugViewRenderState:g,scene:x}=i;g.currentRenderPassEncoder=m;const{shadowManager:_}=x,{directionalShadowManager:b}=_,{castingList:y}=b;renderListForLayer(y,g,"shadowPipeline")})(i,g),g.end(),W.resetCastingList()}{const m=Xe.beginRenderPass(Ke);this.#ch(i,m,!1,!0),H.currentRenderPassEncoder=m,P&&P.render(H),((i,m)=>{const{debugViewRenderState:g,skybox:x,scene:_}=i;g.currentRenderPassEncoder=m;const{instanceMeshLayer:b}=g,{children:y}=_;x&&x.render(g),renderList(y,g),renderList(b,g)})(i,m),T&&T.render(H),w&&w.render(H),((i,m)=>{const{debugViewRenderState:g,rawCamera:x}=i;g.currentRenderPassEncoder=m;const{alphaLayer:_,transparentLayer:b,particleLayer:y}=g;renderListForLayer(_,g);const{x:T,y:w,z:P}=x;sortTransparentObjects({x:T,y:w,z:P},b),renderListForLayer(b,g),renderListForLayer(y,g)})(i,m),m.end()}if(i.debugViewRenderState.render2PathLayer.length){const{mipmapGenerator:m}=g.resourceManager;let x=i.viewRenderTextureManager.renderPath1ResultTexture,_=$?i.viewRenderTextureManager.colorResolveTexture:i.viewRenderTextureManager.colorTexture;_||($?console.error("MSAA가 활성화되어 있지만 colorResolveTexture가 정의되지 않았습니다"):console.error("colorTexture가 정의되지 않았습니다")),x||console.error("renderPath1ResultTexture가 정의되지 않았습니다"),Xe.copyTextureToTexture({texture:_},{texture:x},{width:i.pixelRectObject.width,height:i.pixelRectObject.height,depthOrArrayLayers:1}),m.generateMipmap(x,i.viewRenderTextureManager.renderPath1ResultTextureDescriptor);const b=Xe.beginRenderPass({colorAttachments:[{...ye,loadOp:"load"}],depthStencilAttachment:{...Ge,depthLoadOp:Cr.LOAD}});let y=i.viewRenderTextureManager.renderPath1ResultTextureView;this.#ch(i,b,!1,!1,y),((i,m)=>{const{debugViewRenderState:g}=i;g.currentRenderPassEncoder=m;const{render2PathLayer:x}=g;renderListForLayer(x,g)})(i,b),b.end()}if(Ke.colorAttachments[0].postEffectView=i.postEffectManager.render(),b){b.checkTexture(i);const m={colorAttachments:[{view:b.pickingGPUTextureView,clearValue:{r:0,g:0,b:0,a:0},loadOp:Cr.CLEAR,storeOp:Pr.STORE}],depthStencilAttachment:{view:b.pickingDepthGPUTextureView,depthClearValue:1,depthLoadOp:Cr.CLEAR,depthStoreOp:Pr.STORE}},g=Xe.beginRenderPass(m);this.#ch(i,g,!1,!1),((i,m)=>{const{debugViewRenderState:g,pickingManager:x}=i;g.currentRenderPassEncoder=m;const{castingList:_}=x;renderListForLayer(_,g,"pickingPipeline")})(i,g),g.end()}}return g.gpuDevice.queue.submit([Xe.finish()]),i.debugViewRenderState.viewRenderTime=performance.now()-i.debugViewRenderState.startTime,b.checkEvents(i,m),Ke}#lh(i){const{scene:m,redGPUContext:g,viewRenderTextureManager:x}=i,{depthTextureView:_,colorTextureView:b,colorResolveTextureView:y}=x,{useBackgroundColor:T,backgroundColor:w}=m,{antialiasingManager:P}=g,{useMSAA:H}=P,z=w.rgbaNormal,$={view:b,clearValue:T?{r:z[0]*z[3],g:z[1]*z[3],b:z[2]*z[3],a:z[3]}:{r:0,g:0,b:0,a:0},loadOp:Cr.CLEAR,storeOp:Pr.STORE};H&&($.resolveTarget=y);return{colorAttachment:$,depthStencilAttachment:{view:_,depthClearValue:1,depthLoadOp:Cr.CLEAR,depthStoreOp:Pr.STORE}}}#ch(i,m,g=!1,x=!0,_=null){const{inverseProjectionMatrix:b,pixelRectObject:y,projectionMatrix:T,rawCamera:w,redGPUContext:P,scene:H}=i,{gpuDevice:z}=P,{modelMatrix:$,position:q}=w,W=i.systemUniform_Vertex_StructInfo,ye=i.systemUniform_Vertex_UniformBuffer.gpuBuffer,{shadowManager:Ge,lightManager:Ke}=H,{directionalShadowManager:Xe}=Ge,Ye=w instanceof Camera2D;if(g){const i=Xe.shadowDepthTextureSize,g=Xe.shadowDepthTextureSize;m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g)}else{const{width:i,height:g}=y;this.#sh&&this.#sh.width===i&&this.#sh.height===g||(m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g),this.#sh={width:i,height:g})}Ke.updateViewSystemUniforms(i),Xe.updateViewSystemUniforms(P),i.update(i,g,x,_),m.setBindGroup(0,i.systemUniform_Vertex_UniformBindGroup),[{key:"projectionMatrix",value:T},{key:"projectionCameraMatrix",value:multiply$5(ss,T,$)},{key:"inverseProjectionMatrix",value:b},{key:"resolution",value:[i.pixelRectObject.width,i.pixelRectObject.height]}].forEach(({key:i,value:m})=>{z.queue.writeBuffer(ye,W.members[i].uniformOffset,new W.members[i].View(m))}),[{key:"cameraMatrix",value:$},{key:"cameraPosition",value:q},{key:"nearClipping",value:[Ye?0:w.nearClipping]},{key:"farClipping",value:[Ye?0:w.farClipping]}].forEach(({key:i,value:m})=>{z.queue.writeBuffer(ye,W.members.camera.members[i].uniformOffset,new W.members.camera.members[i].View(m))})}}let ss=create$5();var os=Object.freeze({__proto__:null,isHexColor:isHexColor,isUint:isUint,validateNumber:validateNumber,validateNumberRange:validateNumberRange,validatePositiveNumberRange:validatePositiveNumberRange,validateRedGPUContext:validateRedGPUContext,validateUintRange:validateUintRange});class MeshInfo_OBJ{name;groupName;materialKey;index;position;resultPosition;resultNormal;resultUV;resultInterleave;use;childrenInfo;ableUV;ableNormal;ableLight;mesh;constructor(i,m){this.name=i,this.groupName=m,this.index=[],this.position=[],this.resultPosition=[],this.resultNormal=[],this.resultUV=[],this.resultInterleave=[],this.use=!0,this.childrenInfo={}}createVertexBuffer(i,m){let g={};return this.resultPosition.length&&(g.aVertexPosition=InterleaveType.float32x3),this.resultNormal.length&&(g.aVertexNormal=InterleaveType.float32x3),this.resultUV.length&&(g.aTexcoord=InterleaveType.float32x2),new VertexBuffer(i,new Float32Array(this.resultInterleave.length?this.resultInterleave:this.resultPosition),new InterleavedStruct(g,`InterleavedStruct_${m}}`),void 0,`VertexBuffer_${m}`)}createBufferIndex(i,m){if(this.index.length)return new IndexBuffer(i,this.index,void 0,`IndexBuffer_${m}`)}createColorMaterial(i){return this.resultUV.length&&this.resultNormal.length||this.resultNormal.length?new ColorMaterial(i,"#00ff00"):new ColorMaterial(i,"#0000ff")}}Object.freeze(MeshInfo_OBJ);class TotalPointInfo_OBJ{position=[];normal=[];uv=[];points=[];normalPoints=[];uvPoints=[];constructor(){}}Object.freeze(TotalPointInfo_OBJ);class OBJMTLLoader{complete;parseData;#hh;#fh;#dh;constructor(i,m,g){this.#hh=getFilePath(m),this.#fh=getFileName(m),this.#dh=m,this.#mh(m,g)}get path(){return this.#hh}get fileName(){return this.#fh}get url(){return this.#dh}#mh(i,m){fetch(i,{method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded;charset=UTF-8"}}).then(i=>{if(!i.ok)throw new Error(`HTTP 오류! 상태값:${i.status}`);return i.text()}).then(i=>{this.complete=!0,this.parseData=function(i,m){let g;const x={},_={single:["newmtl","Ns","Ni","d","illum"],multi:["Ka","Kd","Ks"],maps:["map_Kd","map_Ns","map_bump"]};return(m=m.replace(/^\#[\s\S]+?\n/g,"")).split("\n").forEach(m=>{for(const b in _)for(const y of _[b])if(new RegExp(`^(${y} )`).test(m))switch(b){case"single":if("newmtl"===y){const i=m.replace("newmtl ","").trim();g={name:i},x[i]=g}else g[y]=+m.replace(`${y} `,"").trim();break;case"multi":g[y]=m.replace(`${y} `,"").split(" ");break;case"maps":g[y]=i.path+m.replace(`${y} `,"").trim()}}),x}(this,i),m?.(this.parseData)}).catch(i=>{this.complete=!0,this.parseData={},m?.(this.parseData)})}}Object.freeze(OBJMTLLoader);const us=/^o/,ls=/v( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,cs=/f\s+(([\d]{1,}[\s]?){3,})+/,hs=/f\s+((([\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,fs=/f\s+((([\d]{1,}\/[\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,ds=/f\s+((([\d]{1,}\/\/[\d]{1,}[\s]?){3,})+)/;let ms,ps;function processMaterialLibrary(i,m,g,x,_){_=new OBJMTLLoader(g,`${m.path}${i.split(" ")[1]}`,i=>{m.mtlLoader=i,m.modelParsingComplete&&(((i,m,g)=>{let x,_,b,y;for(x in y={},m){let T,w;b=m[x];const{use:P,materialKey:H,mesh:z}=b,{ableLight:$,ableNormal:q}=b,{resultInterleave:W}=b;if(P&&W.length){let m,x,b;_=g.parseData[H],_&&(_.map_Kd?(y[_.map_Kd]?w=y[_.map_Kd]:(w=new BitmapTexture(i,_.map_Kd),y[_.map_Kd]=w),T=new BitmapMaterial(i,w)):_.Kd&&(m=255*_.Kd[0],x=255*_.Kd[1],b=255*_.Kd[2],T=new ColorMaterial(i,convertRgbToHex(m,x,b))),T&&(_.map_Ns&&(y[_.map_Ns]?w=y[_.map_Ns]:(w=new BitmapTexture(i,_.map_Ns),y[_.map_Ns]=w),T.specularTexture=w),_.map_bump&&(y[_.map_bump]?w=y[_.map_bump]:(w=new BitmapTexture(i,_.map_bump),y[_.map_bump]=w),T.normalTexture=w),void 0!==_.Ns&&(T.shininess=_.Ns),z.material=T))}}})(g,x,_),m.callback&&m.callback(m.result))}),m.mtlLoader=_}function processMaterialUsage(i,m,g){m[g].materialKey=i.split(" ").slice(1).join("").trim()}function processGroup(i,m,g,x){const _=i.split(" ").slice(1).join("").trim();m[g].use=!1;const b=new MeshInfo_OBJ(_,g);b.groupName=g,b.materialKey=_.replace(`${g}_`,""),b.position=ms.position,x[_]=ms=b,m[g].childrenInfo[_]=ms}function processNewObject(i,m,g){const x=i.split(" ").slice(1).join("").trim(),_=new MeshInfo_OBJ(x,x);_.groupName=x,_.materialKey=x,m[x]=ms=_,g[x]=ms,ps=x}function processVertexNormals(i,m,g){const x=i.split(" ");m.push(+x[1],+x[2],+x[3]),g[g.length]=[+x[1],+x[2],+x[3]]}function processTextureCoordinates(i,m,g){const x=i.split(" ");m.push(+x[1],1-x[2]),g[g.length]=[+x[1],1-x[2]]}function processVertex(i,m,g){const x=i.split(" ");m.push(+x[1],+x[2],+x[3]),ms.position.push(+x[1],+x[2],+x[3]),g[g.length]=[+x[1],+x[2],+x[3]]}function processFaceVertexNormal(i,m,g,x,_){const b=3*(m.length+g.length);i.split(" ").slice(1,4).forEach(i=>{const[m,,g]=i.split("/").map(i=>Number(i)-1),y=x[m],T=_[g],{index:w,resultInterleave:P}=ms,{resultPosition:H,resultNormal:z,resultUV:$}=ms;w.push(P.length/b),H.push(...y),z.push(...T),P.push(...y,...T)})}function processFaceVertexTextureNormal(i,m,g,x,_,b,y){let T=i.split(" ").slice(1,5);if(4===T.length){let i=T[3];T[3]=T[0],T[4]=T[2],T[5]=i}T.forEach(i=>{const[T,w,P]=i.split("/").map(Number).map(i=>i-1),H=_[T],z=y[w],$=b[P],q=(m.length?3:0)+(g.length?3:0)+(x.length?2:0),{index:W,resultInterleave:ye}=ms,{resultPosition:Ge,resultNormal:Ke,resultUV:Xe}=ms;W.push(ye.length/q),m.length&&(Ge.push(...H),ye.push(...H)),g.length&&(Ke.push(...$),ye.push(...$)),x.length&&(Xe.push(...z),ye.push(...z))})}function processFaceVertexTexture(i,m,g,x,_){i.split(" ").slice(1,4).forEach(i=>{const[b,y]=i.split("/").map(Number).map(i=>i-1),T=x[b];let w;0!==_.length&&(w=_[y]);const P=(m.length?3:0)+(g.length?2:0);ms.index.push(ms.resultInterleave.length/P),m.length&&(ms.resultPosition.push(...T),ms.resultInterleave.push(...T)),g.length&&(ms.resultUV.push(...w),ms.resultInterleave.push(...w))})}function processFaceVertex(i,m){let g=i.split(" ");ms.resultInterleave=ms.resultPosition=ms.position,ms.index.push(+g[1]-1,+g[2]-1,+g[3]-1),ms.index.push(+g[1]-1,+g[3]-1,+g[4]-1)}const parserMesh_OBJ=(i,m,g)=>{for(let x in g){const _=g[x];let b;if(_.use){const m=_.createVertexBuffer(i,x),g=_.createBufferIndex(i,x),y=_.createColorMaterial(i);b=new Mesh(i,new Geometry(i,m,g),y),_.ableUV=Boolean(_.resultUV.length),_.ableNormal=Boolean(_.resultNormal.length),_.ableLight=_.ableUV&&_.ableNormal}else b=new Mesh(i);b.name=x,_.mesh=b,m.addChild(b),parserMesh_OBJ(i,b,_.childrenInfo)}},parserOBJ=(i,m,g)=>{const x=((i,m,g)=>{let x,_;const b=new TotalPointInfo_OBJ,{points:y,normalPoints:T,uvPoints:w}=b,{position:P,normal:H,uv:z}=b;let $,q;_={},x={};const W=g.length;for($=0;$<W;$++)if(us.test(g[$])){q=!0;break}if(!q){const i="objModel"+createUUID();_[i]=ms=new MeshInfo_OBJ(i,i),x[i]=ms,ps=i}const ye=g.length;for(let b=0;b<ye;b++){const $=g[b];$.startsWith("mtllib ")?processMaterialLibrary($,m,i,x,void 0):$.startsWith("usemtl ")?processMaterialUsage($,x,ps):$.startsWith("g ")?processGroup($,_,ps,x):$.startsWith("o ")?processNewObject($,_,x):$.startsWith("vn ")?processVertexNormals($,H,T):$.startsWith("vt ")?processTextureCoordinates($,z,w):ls.test($)?processVertex($,P,y):ds.test($)?processFaceVertexNormal($,P,H,y,T):fs.test($)?processFaceVertexTextureNormal($,P,H,z,y,T,w):hs.test($)?processFaceVertexTexture($,P,z,y,w):cs.test($)&&processFaceVertex($)}return{info:x,infoHierarchy:_}})(i,m,(g=g.replace(/^\#[\s\S]+?\n/g,"")).split("\n")),_=x.infoHierarchy;return parserMesh_OBJ(i,m.resultMesh,_),{...m,...x,parseInfoMaterial:m.mtlLoader}};class OBJLoader{modelParsingComplete=!1;resultMesh;result;callback;mtlLoader;#hh;#fh;#dh;constructor(i,m,g){validateRedGPUContext(i),m&&(fetch(m).then(i=>i.text()).then(m=>{this.result=parserOBJ(i,this,m),this.modelParsingComplete=!0,this.resultMesh=m,g&&(this.mtlLoader?this.mtlLoader.complete&&g(this.result):g(this.result))}).catch(i=>console.error("Error:",i)),this.#hh=getFilePath(m),this.#fh=getFileName(m),this.#dh=m,this.mtlLoader=null,this.callback=g,this.resultMesh=new Mesh(i),this.resultMesh.name="instanceOfOBJLoader_"+createUUID(),this.result=null)}get path(){return this.#hh}get fileName(){return this.#fh}get url(){return this.#dh}}Object.freeze(OBJLoader);class AMultiPassPostEffect extends ASinglePassPostEffect{#ph=[];constructor(i,m){super(i),this.#ph.push(...m)}get passList(){return this.#ph}clear(){this.#ph.forEach(i=>i.clear())}render(i,m,g,x){let _;return this.#ph.forEach((b,y)=>{y&&(x=_),_=b.render(i,m,g,x)}),_}}Object.freeze(AMultiPassPostEffect);class BrightnessContrast extends ASinglePassPostEffect{#gh=0;#xh=0;constructor(i){super(i),this.init(i,"POST_EFFECT_BRIGHTNESS_CONTRAST",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet brightness_value:f32=uniforms.brightness/255.0;\nlet contrast_value:f32=uniforms.contrast/255.0;\nvar tempColor:vec3<f32>;\nif ( contrast_value > 0.0 ) {tempColor=( color.rgb - 0.5 )/( 1.0 - contrast_value ) + 0.5;\n}else {tempColor=( color.rgb - 0.5 ) * ( 1.0 + contrast_value ) + 0.5;\n}\ncolor=vec4<f32>(tempColor + brightness_value,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms {brightness:f32,contrast:f32\n};\n"))}get brightness(){return this.#gh}set brightness(i){validateNumberRange(i,-150,150),this.#gh=i,this.updateUniform("brightness",i)}get contrast(){return this.#xh}set contrast(i){validateNumberRange(i,-50,100),this.#xh=i,this.updateUniform("contrast",i)}}Object.freeze(BrightnessContrast);class ColorBalance extends ASinglePassPostEffect{#_h=0;#vh=0;#bh=0;#yh=0;#Th=0;#Sh=0;#wh=0;#Mh=0;#Rh=0;#Ch=!0;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_BALANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet original_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nlet shadow_weight=1.0 - smoothstep(0.0,0.5,original_luminance);\nlet highlight_weight=smoothstep(0.5,1.0,original_luminance);\nlet midtone_weight=1.0 - shadow_weight - highlight_weight;\nlet cyan_red=shadow_weight * uniforms.shadowCyanRed +\nmidtone_weight * uniforms.midtoneCyanRed +\nhighlight_weight * uniforms.highlightCyanRed;\nlet magenta_green=shadow_weight * uniforms.shadowMagentaGreen +\nmidtone_weight * uniforms.midtoneMagentaGreen +\nhighlight_weight * uniforms.highlightMagentaGreen;\nlet yellow_blue=shadow_weight * uniforms.shadowYellowBlue +\nmidtone_weight * uniforms.midtoneYellowBlue +\nhighlight_weight * uniforms.highlightYellowBlue;\ncolor.r +=cyan_red * 0.01;\ncolor.g +=magenta_green * 0.01;\ncolor.b +=yellow_blue * 0.01;\nlet adjusted_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nif (uniforms.preserveLuminosity==1 && adjusted_luminance > 0.0) {let ratio=original_luminance/adjusted_luminance;color=color * ratio;\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms {shadowCyanRed:f32,shadowMagentaGreen:f32,shadowYellowBlue:f32,midtoneCyanRed:f32,midtoneMagentaGreen:f32,midtoneYellowBlue:f32,highlightCyanRed:f32,highlightMagentaGreen:f32,highlightYellowBlue:f32,preserveLuminosity:u32\n};\n"))}get shadowCyanRed(){return this.#_h}set shadowCyanRed(i){validateNumberRange(i,-100,100),this.#_h=i,this.updateUniform("shadowCyanRed",i)}get shadowMagentaGreen(){return this.#vh}set shadowMagentaGreen(i){validateNumberRange(i,-100,100),this.#vh=i,this.updateUniform("shadowMagentaGreen",i)}get shadowYellowBlue(){return this.#bh}set shadowYellowBlue(i){validateNumberRange(i,-100,100),this.#bh=i,this.updateUniform("shadowYellowBlue",i)}get midtoneCyanRed(){return this.#yh}set midtoneCyanRed(i){validateNumberRange(i,-100,100),this.#yh=i,this.updateUniform("midtoneCyanRed",i)}get midtoneMagentaGreen(){return this.#Th}set midtoneMagentaGreen(i){validateNumberRange(i,-100,100),this.#Th=i,this.updateUniform("midtoneMagentaGreen",i)}get midtoneYellowBlue(){return this.#Sh}set midtoneYellowBlue(i){validateNumberRange(i,-100,100),this.#Sh=i,this.updateUniform("midtoneYellowBlue",i)}get highlightCyanRed(){return this.#wh}set highlightCyanRed(i){validateNumberRange(i,-100,100),this.#wh=i,this.updateUniform("highlightCyanRed",i)}get highlightMagentaGreen(){return this.#Mh}set highlightMagentaGreen(i){validateNumberRange(i,-100,100),this.#Mh=i,this.updateUniform("highlightMagentaGreen",i)}get highlightYellowBlue(){return this.#Rh}set highlightYellowBlue(i){validateNumberRange(i,-100,100),this.#Rh=i,this.updateUniform("highlightYellowBlue",i)}get preserveLuminosity(){return this.#Ch}set preserveLuminosity(i){this.#Ch=i,this.updateUniform("preserveLuminosity",i)}}Object.freeze(ColorBalance);class ColorTemperatureTint extends ASinglePassPostEffect{#Ph=6500;#Eh=0;#Ih=100;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_TEMPERATURE_TINT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet temp=uniforms.temperature;\nvar tempRGB:vec3<f32>;\nif (temp <=6600.0) {tempRGB.r=1.0;\n} else {let t=temp - 6600.0;tempRGB.r=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp <=6600.0) {let t=temp;tempRGB.g=clamp(0.39008157 * log(t) - 0.63184144,0.0,1.0);\n} else {let t=temp - 6600.0;tempRGB.g=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp >=6600.0) {tempRGB.b=1.0;\n} else if (temp <=1900.0) {tempRGB.b=0.0;\n} else {let t=temp - 1000.0;tempRGB.b=clamp(0.543206789 * log(t) - 1.19625408,0.0,1.0);\n}\nlet neutralTemp:vec3<f32>=vec3<f32>(1.0,1.0,1.0);\nlet tempAdjust:vec3<f32>=tempRGB/neutralTemp;\nlet tintValue=uniforms.tint * 0.01;\nvar tintRGB:vec3<f32>;\nif (tintValue >=0.0) {tintRGB=vec3<f32>(1.0 - tintValue * 0.2,1.0,1.0 - tintValue * 0.2);\n} else {let mag=-tintValue;tintRGB=vec3<f32>(1.0,1.0 - mag * 0.2,1.0);\n}\nlet colorAdjust=tempAdjust * tintRGB;\nlet strength=uniforms.strength * 0.01;\nlet finalAdjust=mix(vec3<f32>(1.0,1.0,1.0),colorAdjust,strength);\ncolor=vec4<f32>(color.rgb * finalAdjust,color.a);\ncolor=vec4<f32>(clamp(color.rgb,vec3<f32>(0.0),vec3<f32>(1.0)),color.a);\ntextureStore(outputTexture,index,color);\n","struct Uniforms {temperature:f32,tint:f32,strength:f32\n};\n")),this.strength=this.#Ih,this.tint=this.#Eh,this.temperature=this.#Ph}get temperature(){return this.#Ph}set temperature(i){validateNumberRange(i,1e3,2e4),this.#Ph=i,this.updateUniform("temperature",i)}get tint(){return this.#Eh}set tint(i){validateNumberRange(i,-100,100),this.#Eh=i,this.updateUniform("tint",i)}get strength(){return this.#Ih}set strength(i){validateNumberRange(i,0,100),this.#Ih=i,this.updateUniform("strength",i)}setWarmTone(){this.temperature=3200,this.tint=-10}setCoolTone(){this.temperature=8e3,this.tint=10}setNeutral(){this.temperature=6500,this.tint=0}setCandleLight(){this.temperature=1900,this.tint=-5}setDaylight(){this.temperature=5600,this.tint=0}setCloudyDay(){this.temperature=7500,this.tint=5}setNeonLight(){this.temperature=9e3,this.tint=15}}Object.freeze(ColorTemperatureTint);class Grayscale extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_GRAYSCALE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index );\nlet gray=(color.r + color.g + color.b)/3.0;\ntextureStore(outputTexture,index,vec4<f32>( gray,gray,gray,1.0) );\n",""))}}Object.freeze(Grayscale);class HueSaturation extends ASinglePassPostEffect{#Bh=0;#Lh=0;constructor(i){super(i),this.init(i,"POST_EFFECT_HUE_SATURATION",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet hue_value:f32=uniforms.hue/180.0;\nlet saturation_value:f32=uniforms.saturation/100.0;\nlet angle:f32=hue_value * 3.1415926535897932384626433832795;\nlet s:f32=sin(angle);\nlet c:f32=cos(angle);\nvar weights:vec3<f32>=(vec3<f32>(2.0 * c,-sqrt(3.0) * s - c,sqrt(3.0) * s - c) + 1.0)/3.0;\nlet len:f32=length(color.rgb);\ncolor=vec4<f32>(vec3<f32>(dot(color.rgb,weights.xyz),dot(color.rgb,weights.zxy),dot(color.rgb,weights.yzx)),color.a\n);\nlet average:f32=(color.r + color.g + color.b)/3.0;\nif (saturation_value > 0.0) {color=vec4<f32>(color.rgb + (average - color.rgb) * (1.0 - 1.0/(1.001 - saturation_value)),color.a);\n} else {color=vec4<f32>(color.rgb + (average - color.rgb) * (-saturation_value),color.a);\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms {hue:f32,saturation:f32\n};\n"))}get hue(){return this.#Bh}set hue(i){validateNumberRange(i,-180,180),this.#Bh=i,this.updateUniform("hue",i)}get saturation(){return this.#Lh}set saturation(i){validateNumberRange(i,-100,100),this.#Lh=i,this.updateUniform("saturation",i)}}Object.freeze(HueSaturation);class Invert extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_INVERT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\ncolor.r=1.0 - color.r;\ncolor.g=1.0 - color.g;\ncolor.b=1.0 - color.b;\ntextureStore(outputTexture,index,color );\n",""))}}Object.freeze(Invert);class Threshold extends ASinglePassPostEffect{#Dh=128;constructor(i){super(i),this.init(i,"POST_EFFECT_THRESHOLD",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet threshold_value:f32=uniforms.threshold/255.0;\nvar v=0.0;\nif( 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b >=threshold_value) {v=1.0;\n}\ncolor=vec4<f32>(v,v,v,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms {threshold:f32\n};\n")),this.threshold=this.#Dh}get threshold(){return this.#Dh}set threshold(i){validateNumberRange(i,1,255),this.#Dh=i,this.updateUniform("threshold",i)}}Object.freeze(Threshold);class Vibrance extends ASinglePassPostEffect{#Uh=0;#Lh=0;constructor(i){super(i),this.init(i,"POST_EFFECT_VIBRANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet originalColor=color;\nlet luminance=0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\nif (uniforms.saturation !=0.0) {let saturationFactor=1.0 + uniforms.saturation * 0.01;color=vec4<f32>(mix(luminance,color.r,saturationFactor),mix(luminance,color.g,saturationFactor),mix(luminance,color.b,saturationFactor),color.a);\n}\nif (uniforms.vibrance !=0.0) {let maxComponent=max(max(color.r,color.g),color.b);let minComponent=min(min(color.r,color.g),color.b);let currentSaturation=maxComponent - minComponent;let protectionFactor=1.0/(1.0 + exp(6.0 * (currentSaturation - 0.6)));var skinToneProtection=1.0;if (color.r > color.g && color.g > color.b) {let skinToneAmount=(color.r - color.b)/max(color.r,0.001);skinToneProtection=1.0 - smoothstep(0.3,0.8,skinToneAmount) * 0.7;}let finalProtection=protectionFactor * skinToneProtection;let vibranceStrength=uniforms.vibrance * 0.01 * finalProtection;let vibranceFactor=1.0 + vibranceStrength;color=vec4<f32>(mix(luminance,color.r,vibranceFactor),mix(luminance,color.g,vibranceFactor),mix(luminance,color.b,vibranceFactor),color.a);\n}\ncolor=clamp(color,vec4<f32>(0.0),vec4<f32>(1.0));\ntextureStore(outputTexture,index,color);\n","struct Uniforms {vibrance:f32,saturation:f32\n};\n"))}get vibrance(){return this.#Uh}set vibrance(i){validateNumberRange(i,-100,100),this.#Uh=i,this.updateUniform("vibrance",i)}get saturation(){return this.#Lh}set saturation(i){validateNumberRange(i,-100,100),this.#Lh=i,this.updateUniform("saturation",i)}}Object.freeze(Vibrance);const gs=[0,0,0,0,0,1,0,0,0,0,0,0],xs=[0,-1,0,0,-1,5,-1,0,0,-1,0,0],_s=[1,1,1,0,1,1,1,0,1,1,1,0],vs=[0,1,0,0,1,-4,1,0,0,1,0,0],bs=[-2,-1,0,0,-1,1,1,0,0,1,2,0];class Convolution extends ASinglePassPostEffect{static NORMAL=gs;static SHARPEN=xs;static BLUR=_s;static EDGE=vs;static EMBOSE=bs;#Ah=_s;constructor(i){super(i),this.init(i,"POST_EFFECT_CONVOLUTION",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet perPX=vec2<f32>(1.0/dimW,1.0/dimH);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=vec4<f32>(0.0);\nlet kernelWeight_value:f32=uniforms.kernelWeight;\nlet kernel_value:mat3x3<f32>=uniforms.kernel;\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,-1)) * kernel_value[0][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,-1)) * kernel_value[0][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,-1)) * kernel_value[0][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,0)) * kernel_value[1][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,0)) * kernel_value[1][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,0)) * kernel_value[1][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,1)) * kernel_value[2][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,1)) * kernel_value[2][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,1)) * kernel_value[2][2];\ntextureStore(outputTexture,index,vec4<f32>((color/kernelWeight_value).rgb,1.0) );\n","struct Uniforms {kernelWeight:f32,kernel:mat3x3<f32>\n};\n")),this.kernel=this.#Ah}get kernel(){return this.#Ah}set kernel(i){this.#Ah=i;let m=0;for(const i in this.#Ah)m+=this.#Ah[i];this.updateUniform("kernelWeight",m),this.updateUniform("kernel",i)}}Object.freeze(Convolution);class Blur extends AMultiPassPostEffect{#kh;constructor(i){super(i,[new Convolution(i)]),this.#kh=this.passList[0],this.#kh.kernel=Convolution.BLUR}render(i,m,g,x){return this.#kh.render(i,m,g,x)}}Object.freeze(Blur);class BlurX extends ASinglePassPostEffect{#X=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_X",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=(t + offset - 0.5)/loopSize;var weight=1.0 - abs(percent);var ix=clamp((f32(global_id.x) + f32(size_value * percent)),0.0,dimW - 1.0);let delta=vec2<i32>(i32(ix),i32(global_id.y));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms {size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 {let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#X}get size(){return this.#X}set size(i){validateNumberRange(i,0),this.#X=i,this.updateUniform("size",i)}}Object.freeze(BlurX);class BlurY extends ASinglePassPostEffect{#X=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_Y",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimH=f32(dimensions.y);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=(t + offset - 0.5)/loopSize;var weight=1.0 - abs(percent);var iy=clamp((f32(global_id.y) + f32(size_value * percent)),0.0,dimH - 1.0);let delta=vec2<i32>(i32(global_id.x),i32(iy));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms {size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 {let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#X}get size(){return this.#X}set size(i){validateNumberRange(i,0),this.#X=i,this.updateUniform("size",i)}}Object.freeze(BlurY);class DirectionalBlur extends ASinglePassPostEffect{#Oh=15;#Fh=0;constructor(i){super(i),this.init(i,"POST_EFFECT_DIRECTIONAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet direction=vec2<f32>(uniforms.directionX,uniforms.directionY);\nlet dirLength=length(direction);\nlet normalizedDir=select(vec2<f32>(0.0),direction/dirLength,dirLength > 0.0);\nlet dir=normalizedDir * uniforms.amount;\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=1.0 - (t + offset - 0.5)/loopSize;var weight=3.0 * (percent - percent * percent);let deltaPercent=dir * percent;let delta=vec2<i32>(i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)),i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms {amount:f32,directionX:f32,directionY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 {let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#Oh,this.angle=this.#Fh}get angle(){return this.#Fh}set angle(i){validateNumber(i),this.#Fh=i%360,this.#Nh()}get amount(){return this.#Oh}set amount(i){validateNumberRange(i,0),this.#Oh=i,this.updateUniform("amount",i)}#Nh(){const i=this.#Fh*Math.PI/180,m=Math.cos(i),g=Math.sin(i);this.updateUniform("directionX",m),this.updateUniform("directionY",g)}}Object.freeze(DirectionalBlur);class GaussianBlur extends AMultiPassPostEffect{#X=32;constructor(i){super(i,[new BlurX(i),new BlurY(i)])}get size(){return this.#X}set size(i){this.#X=i,this.passList.forEach(m=>m.size=i)}}Object.freeze(GaussianBlur);class RadialBlur extends ASinglePassPostEffect{#Oh=50;#xr=0;#_r=0;#Gh=16;constructor(i){super(i),this.init(i,"POST_EFFECT_RADIAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet toPixel=global_id_vec - center;\nlet distance=length(toPixel);\nlet angle=atan2(toPixel.y,toPixel.x);\nlet maxDist=min(dimW,dimH) * 0.5;\nlet normalizedDistance=distance/maxDist;\nlet rotationAngle=uniforms.amount * normalizedDistance * 0.001;\nlet sampleCount=i32(uniforms.sampleCount);\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar totalWeight=0.0;\nfor (var i=0;i < sampleCount;i=i + 1) {let t=f32(i)/f32(sampleCount - 1);let sampleAngle=angle + (t - 0.5) * rotationAngle;let samplePos=center + vec2<f32>(cos(sampleAngle) * distance,sin(sampleAngle) * distance);var weight=1.0 - abs(t - 0.5) * 1.5;weight=max(weight,0.1);let sampleCoord=vec2<i32>(i32(clamp(samplePos.x,0.0,dimW - 1.0)),i32(clamp(samplePos.y,0.0,dimH - 1.0)));sum +=textureLoad(sourceTexture,sampleCoord).xyzw * weight;totalWeight +=weight;\n}\nlet centerFalloff=smoothstep(0.0,maxDist * 0.2,distance);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).xyzw;\nlet blurredColor=sum/totalWeight;\nlet finalColor=mix(originalColor,blurredColor,centerFalloff);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),finalColor);\n","struct Uniforms {amount:f32,centerX:f32,centerY:f32,sampleCount:f32\n};\n")),this.amount=this.#Oh,this.sampleCount=this.#Gh}get centerX(){return this.#xr}set centerX(i){validateNumber(i),this.#xr=i,this.updateUniform("centerX",i)}get centerY(){return this.#_r}set centerY(i){validateNumber(i),this.#_r=i,this.updateUniform("centerY",i)}get amount(){return this.#Oh}set amount(i){validateNumberRange(i,0),this.#Oh=i,this.updateUniform("amount",i)}get sampleCount(){return this.#Gh}set sampleCount(i){validateNumberRange(i,4),this.#Gh=i,this.updateUniform("sampleCount",i)}}Object.freeze(RadialBlur);class ZoomBlur extends ASinglePassPostEffect{#Oh=64;#xr=0;#_r=0;constructor(i){super(i),this.init(i,"POST_EFFECT_ZOOM_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet dimensionsVec=vec2<f32>(dimW,dimH);\nlet amount=uniforms.amount/min(dimW,dimH);\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet dir=(center - global_id_vec) * amount;\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=1.0 - (t + offset - 0.5)/loopSize;var weight=3.0 * (percent - percent * percent);let deltaPercent=dir * percent;let delta=vec2<i32>(i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)),i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms {amount:f32,centerX:f32,centerY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 {let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#Oh}get centerX(){return this.#xr}set centerX(i){validateNumber(i),this.#xr=i,this.updateUniform("centerX",i)}get centerY(){return this.#_r}set centerY(i){validateNumber(i),this.#_r=i,this.updateUniform("centerY",i)}get amount(){return this.#Oh}set amount(i){validateNumberRange(i,0),this.#Oh=i,this.updateUniform("amount",i)}}Object.freeze(ZoomBlur);const ys={filmGrainIntensity:.02,filmGrainResponse:.9,filmGrainScale:2.5,coloredGrain:.3,grainSaturation:.4},Ts={filmGrainIntensity:.05,filmGrainResponse:.8,filmGrainScale:3,coloredGrain:.5,grainSaturation:.6},Ss={filmGrainIntensity:.12,filmGrainResponse:.6,filmGrainScale:4,coloredGrain:.7,grainSaturation:.8},ws={filmGrainIntensity:.08,filmGrainResponse:.7,filmGrainScale:5,coloredGrain:.9,grainSaturation:1};class FilmGrain extends ASinglePassPostEffect{static SUBTLE=ys;static MEDIUM=Ts;static HEAVY=Ss;static VINTAGE=ws;#Vh=Ss.filmGrainIntensity;#Hh=Ss.filmGrainResponse;#zh=Ss.filmGrainScale;#$h=Ss.coloredGrain;#qh=Ss.grainSaturation;#oc=0;#Kh=1;constructor(i){super(i),this.#Kh=window?.devicePixelRatio||1,this.init(i,"POST_EFFECT_FILM_GRAIN",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet originalColor=textureLoad(sourceTexture,index);\nlet filmGrainIntensity_value:f32=uniforms.filmGrainIntensity;\nlet filmGrainResponse_value:f32=uniforms.filmGrainResponse;\nlet filmGrainScale_value:f32=uniforms.filmGrainScale;\nlet coloredGrain_value:f32=uniforms.coloredGrain;\nlet grainSaturation_value:f32=uniforms.grainSaturation;\nlet time_value:f32=uniforms.time;\nlet devicePixelRatio_value:f32=uniforms.devicePixelRatio;\nif (filmGrainIntensity_value <=0.0) {textureStore(outputTexture,index,originalColor);return;\n}\nlet baseScale=max(filmGrainScale_value,0.1);\nlet scaledUV=uv * vec2<f32>(dimW,dimH) * devicePixelRatio_value/baseScale;\nlet timeOffset=vec2<f32>(fract(time_value * 0.0317) * 100.0,fract(time_value * 0.0271) * 100.0\n);\nlet grainCoord=scaledUV + timeOffset;\nlet sampleOffset=1.0/baseScale;\nlet noiseR=(filmGrainNoise(grainCoord) +filmGrainNoise(grainCoord + vec2<f32>(sampleOffset,0.0)) +filmGrainNoise(grainCoord + vec2<f32>(0.0,sampleOffset)))/3.0;\nlet noiseG=filmGrainNoise(grainCoord + vec2<f32>(127.1,311.7));\nlet noiseB=filmGrainNoise(grainCoord + vec2<f32>(269.5,183.3));\nlet monoGrain=(noiseR + noiseG + noiseB)/3.0;\nlet colorGrain=vec3<f32>(noiseR,noiseG,noiseB);\nvar grainColor=mix(vec3<f32>(monoGrain),colorGrain,coloredGrain_value);\nlet grainLuminance=dot(grainColor,vec3<f32>(0.299,0.587,0.114));\ngrainColor=mix(vec3<f32>(grainLuminance),grainColor,grainSaturation_value);\nlet luminance=dot(originalColor.rgb,vec3<f32>(0.299,0.587,0.114));\nlet luminanceWeight=pow(max(luminance,0.01),filmGrainResponse_value);\nlet grainIntensity=filmGrainIntensity_value * luminanceWeight;\nlet grain=grainColor * grainIntensity;\nlet finalColor=originalColor.rgb + grain;\nlet outputColor=vec4<f32>(clamp(finalColor,vec3<f32>(0.0),vec3<f32>(1.0)),originalColor.a);\ntextureStore(outputTexture,index,outputColor);\n","struct Uniforms {filmGrainIntensity:f32,filmGrainResponse:f32,filmGrainScale:f32,coloredGrain:f32,grainSaturation:f32,time:f32,devicePixelRatio:f32\n};\nfn filmGrainNoise(coord:vec2<f32>) -> f32 {let p=floor(coord);let f=fract(coord);let u=f * f * f * (f * (f * 6.0 - 15.0) + 10.0);let a=hash(p);let b=hash(p + vec2<f32>(1.0,0.0));let c=hash(p + vec2<f32>(0.0,1.0));let d=hash(p + vec2<f32>(1.0,1.0));let noise=mix(mix(a,b,u.x),mix(c,d,u.x),u.y);return (noise - 0.5) * 2.0;\n}\nfn hash(p:vec2<f32>) -> f32 {var p3=fract(vec3<f32>(p.xyx) * 0.1031);p3 +=dot(p3,p3.yzx + 33.33);return fract((p3.x + p3.y) * p3.z);\n}\n")),this.#Wh()}get filmGrainIntensity(){return this.#Vh}set filmGrainIntensity(i){this.#Vh=Math.max(0,Math.min(1,i)),this.updateUniform("filmGrainIntensity",this.#Vh)}get filmGrainResponse(){return this.#Hh}set filmGrainResponse(i){this.#Hh=Math.max(0,Math.min(2,i)),this.updateUniform("filmGrainResponse",this.#Hh)}get filmGrainScale(){return this.#zh}set filmGrainScale(i){this.#zh=Math.max(.1,Math.min(20,i)),this.updateUniform("filmGrainScale",this.#zh)}get coloredGrain(){return this.#$h}set coloredGrain(i){this.#$h=Math.max(0,Math.min(1,i)),this.updateUniform("coloredGrain",this.#$h)}get grainSaturation(){return this.#qh}set grainSaturation(i){this.#qh=Math.max(0,Math.min(2,i)),this.updateUniform("grainSaturation",this.#qh)}applyPreset(i){this.#Vh=i.filmGrainIntensity,this.#Hh=i.filmGrainResponse,this.#zh=i.filmGrainScale,this.#$h=i.coloredGrain,this.#qh=i.grainSaturation,this.#Wh()}update(i){this.#oc+=i,this.updateUniform("time",this.#oc)}#Wh(){this.updateUniform("filmGrainIntensity",this.#Vh),this.updateUniform("filmGrainResponse",this.#Hh),this.updateUniform("filmGrainScale",this.#zh),this.updateUniform("coloredGrain",this.#$h),this.updateUniform("grainSaturation",this.#qh),this.updateUniform("time",this.#oc),this.updateUniform("devicePixelRatio",this.#Kh)}}Object.freeze(FilmGrain);class Fog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#Xh=Fog.EXPONENTIAL;#Yh=.05;#jh=4.5;#Zh=50;#Jh;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_FOG",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nvar sceneColor:vec4<f32>=textureLoad(sourceTexture,coord);\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth,systemUniforms.camera.nearClipping,systemUniforms.camera.farClipping);\nlet fogFactor=calculateFogFactor(linearDepth,systemUniforms.camera.farClipping);\nlet finalColor=mix(uniforms.fogColor.rgb,sceneColor.rgb,fogFactor);\ntextureStore(outputTexture,coord,vec4<f32>(finalColor,sceneColor.a));\n","struct Uniforms {fogType:u32,density:f32,nearDistance:f32,farDistance:f32,fogColor:vec3<f32>,padding1:f32,\n};\nfn linearizeDepth(depth:f32,cameraNear:f32,cameraFar:f32) -> f32 {let z=depth * 2.0 - 1.0;return (2.0 * cameraNear * cameraFar)/(cameraFar + cameraNear - z * (cameraFar - cameraNear));\n}\nfn calculateFogFactor(linearDepth:f32,cameraFar:f32) -> f32 {let u_density=uniforms.density;let u_fogType=uniforms.fogType;let u_nearDistance=uniforms.nearDistance;let u_farDistance=uniforms.farDistance;let isBackground=linearDepth >=(cameraFar * 0.99);if (isBackground) {return 1.0 - u_density;}let distance=max(0.0,linearDepth - u_nearDistance);let maxDistance=u_farDistance - u_nearDistance;let normalizedDistance=clamp(distance/max(0.1,maxDistance),0.0,1.0);var fogFactor:f32;if (u_fogType==0u) {fogFactor=exp(-u_density * normalizedDistance * 10.0);} else {let expValue=u_density * normalizedDistance * 5.0;fogFactor=exp(-(expValue * expValue));}return clamp(fogFactor,0.0,1.0);\n}\n")),this.#Jh=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#Jh.rgbNormal)}),this.fogType=this.#Xh,this.density=this.#Yh,this.nearDistance=this.#jh,this.farDistance=this.#Zh}get fogType(){return this.#Xh}set fogType(i){validateNumberRange(i,0,1),this.#Xh=Math.floor(i),this.updateUniform("fogType",this.#Xh)}get density(){return this.#Yh}set density(i){validateNumberRange(i,0,1),this.#Yh=Math.max(0,Math.min(1,i)),this.updateUniform("density",this.#Yh)}get nearDistance(){return this.#jh}set nearDistance(i){validateNumberRange(i,0),this.#jh=Math.max(.1,i),this.#Zh<=this.#jh&&(this.#Zh=this.#jh+.1,this.updateUniform("farDistance",this.#Zh)),this.updateUniform("nearDistance",this.#jh)}get farDistance(){return this.#Zh}set farDistance(i){validateNumberRange(i,0),this.#Zh=Math.max(this.#jh+.1,i),this.updateUniform("farDistance",this.#Zh)}get fogColor(){return this.#Jh}render(i,m,g,x){return super.render(i,m,g,x)}}Object.freeze(Fog);class HeightFog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#Xh=HeightFog.EXPONENTIAL;#Yh=1;#Jh;#Qh=0;#ef=100;#tf=.1;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_HEIGHT_FOG",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet screenCoord=vec2<f32>( global_id_vec.x/dimW,global_id_vec.y/dimH );\nvar depth:f32=1.0;\nif (dimensions.x > u32(global_id.x) && dimensions.y > u32(global_id.y)) {depth=textureLoad(depthTexture,vec2<i32>(global_id.xy),0);\n}\nlet fogFactor=calculateHeightFogFactor(screenCoord,depth);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).rgb;\nlet foggedColor=mix(uniforms.fogColor,originalColor,fogFactor);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(foggedColor,1.0));\n","struct Uniforms {fogType:u32,density:f32,baseHeight:f32,falloff:f32,maxHeight:f32,fogColor:vec3<f32>,padding1:f32,padding2:f32,\n};\nfn isFiniteValue(value:f32) -> bool {return value==value;\n}\nfn isFiniteVec3(v:vec3<f32>) -> bool {return isFiniteValue(v.x) && isFiniteValue(v.y) && isFiniteValue(v.z);\n}\nfn reconstructWorldPositionUltraPrecise(screenCoord:vec2<f32>,depth:f32) -> vec3<f32> {let ndcX=fma(screenCoord.x,2.0,-1.0);let ndcY=fma(-screenCoord.y,2.0,1.0);let safeDepth=clamp(depth,1e-7,1.0 - 1e-7);let ndc=vec3<f32>(ndcX,ndcY,safeDepth);let clipPos=vec4<f32>(ndc,1.0);let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos;let epsilon=1e-6;let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon);let worldPos=worldPos4.xyz/w;let maxCoord=1e6;let stabilizedX=clamp(worldPos.x,-maxCoord,maxCoord);let stabilizedY=clamp(worldPos.y,-maxCoord,maxCoord);let stabilizedZ=clamp(worldPos.z,-maxCoord,maxCoord);let finalPos=vec3<f32>(stabilizedX,stabilizedY,stabilizedZ);return select(vec3<f32>(0.0,0.0,0.0),finalPos,isFiniteVec3(finalPos));\n}\nfn calculateHeightFogFactor(screenCoord:vec2<f32>,depth:f32) -> f32 {let backgroundThreshold=1.0 - 1e-5;let isBackground=depth >=backgroundThreshold;var pixelWorldHeight:f32;if (isBackground) {let rayDirection=getRayDirectionMaxPrecision(screenCoord);pixelWorldHeight=getSkyboxHeightMaxPrecision(rayDirection);} else {let worldPos=reconstructWorldPositionUltraPrecise(screenCoord,depth);pixelWorldHeight=worldPos.y;}return calculateAbsoluteHeightFogMaxPrecision(pixelWorldHeight);\n}\nfn getSkyboxHeightMaxPrecision(rayDirection:vec3<f32>) -> f32 {let u_baseHeight=uniforms.baseHeight;let u_maxHeight=uniforms.maxHeight;let rayY=clamp(rayDirection.y,-0.999,0.999);let upThreshold=0.08;let downThreshold=-0.015;let transitionRange=upThreshold - downThreshold;let safeTransitionRange=max(transitionRange,1e-6);if (rayY > upThreshold) {return u_maxHeight + 25.0;} else if (rayY < downThreshold) {return fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight);} else {let normalizedT=(rayY - downThreshold)/safeTransitionRange;let smoothT=smoothstep(0.0,1.0,normalizedT);let lowValue=fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight);let highValue=u_maxHeight + 25.0;return fma(smoothT,highValue - lowValue,lowValue);}\n}\nfn calculateAbsoluteHeightFogMaxPrecision(worldHeight:f32) -> f32 {let u_baseHeight=uniforms.baseHeight;let u_maxHeight=uniforms.maxHeight;let u_density=uniforms.density;let u_falloff=uniforms.falloff;let u_fogType=uniforms.fogType;if (!isFiniteValue(worldHeight)) {return 1.0;}let heightRange=u_maxHeight - u_baseHeight;let safeHeightRange=max(heightRange,1e-3);let margin=fma(safeHeightRange,0.18,1.2);let extendedBaseHeight=u_baseHeight - margin;let extendedMaxHeight=u_maxHeight + margin;let extendedRange=extendedMaxHeight - extendedBaseHeight;if (worldHeight <=extendedBaseHeight || worldHeight >=extendedMaxHeight) {return 1.0;}let safeExtendedRange=max(extendedRange,1e-3);if (safeExtendedRange <=0.3) {return 1.0;}let normalizedHeight=clamp((worldHeight - extendedBaseHeight)/safeExtendedRange,0.0,1.0);let centerOffset=normalizedHeight - 0.5;let edgeFactor=fma(-abs(centerOffset),0.25,1.0);let heightFactor=1.0 - normalizedHeight;let safeHeightFactor=max(heightFactor,1e-4);let safeFalloff=clamp(u_falloff,0.05,1.8);let expPower=fma(safeFalloff,0.73,1.05);var fogDensity:f32;if (u_fogType==0u) {fogDensity=pow(safeHeightFactor,expPower);fogDensity=smoothstep(0.0,1.0,fogDensity);} else {let expResult=pow(safeHeightFactor,expPower);fogDensity=expResult * expResult;fogDensity=smoothstep(0.0,1.0,fogDensity);}let densityWithEdge=fogDensity * edgeFactor;let safeDensity=clamp(u_density,0.0,4.0);let finalFogAmount=fma(densityWithEdge,safeDensity,0.0) * 0.42;let result=clamp(1.0 - finalFogAmount,0.0,1.0);return select(1.0,result,isFiniteValue(result));\n}\nfn getRayDirectionMaxPrecision(screenCoord:vec2<f32>) -> vec3<f32> {let centeredX=fma(screenCoord.x,1.0,-0.5);let centeredY=fma(screenCoord.y,1.0,-0.5);let ndcX=centeredX * 2.0;let ndcY=-(centeredY * 2.0);let ndc=vec3<f32>(ndcX,ndcY,1.0);let clipPos=vec4<f32>(ndc,1.0);let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos;let epsilon=1e-6;let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon);let worldPos=worldPos4.xyz/w;let cameraPos=systemUniforms.camera.cameraPosition;let rayDir=worldPos - cameraPos;let rayLength=length(rayDir);let minLength=1e-6;if (rayLength < minLength) {return vec3<f32>(0.0,0.0,1.0);}let normalizedRay=rayDir/rayLength;let safeRayX=clamp(normalizedRay.x,-0.999,0.999);let safeRayY=clamp(normalizedRay.y,-0.999,0.999);let safeRayZ=clamp(normalizedRay.z,-0.999,0.999);let safeRay=vec3<f32>(safeRayX,safeRayY,safeRayZ);let finalRayLength=length(safeRay);let isValidRay=finalRayLength > 1e-6 && isFiniteValue(finalRayLength);if (isValidRay) {let finalRay=safeRay/finalRayLength;return select(vec3<f32>(0.0,0.0,1.0),finalRay,isFiniteVec3(finalRay));}return vec3<f32>(0.0,0.0,1.0);\n}\n")),this.#Jh=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#Jh.rgbNormal)}),this.fogType=this.#Xh,this.density=this.#Yh,this.baseHeight=this.#Qh,this.thickness=this.#ef,this.falloff=this.#tf}get fogType(){return this.#Xh}set fogType(i){validateNumberRange(i,0,1),this.#Xh=Math.floor(i),this.updateUniform("fogType",this.#Xh)}get density(){return this.#Yh}set density(i){validateNumberRange(i,0,5),this.#Yh=Math.max(0,Math.min(5,i)),this.updateUniform("density",this.#Yh)}get fogColor(){return this.#Jh}get baseHeight(){return this.#Qh}set baseHeight(i){validateNumberRange(i),this.#Qh=i,this.updateUniform("baseHeight",this.#Qh),this.updateUniform("maxHeight",this.maxHeight)}get maxHeight(){return this.#Qh+this.#ef}get thickness(){return this.#ef}set thickness(i){validateNumberRange(i,.1),this.#ef=Math.max(.1,i),this.updateUniform("maxHeight",this.#Qh+this.#ef)}get falloff(){return this.#tf}set falloff(i){validateNumberRange(i,0,2),this.#tf=Math.max(.001,Math.min(2,i)),this.updateUniform("falloff",this.#tf)}render(i,m,g,x){return super.render(i,m,g,x)}}Object.freeze(HeightFog);class ChromaticAberration extends ASinglePassPostEffect{#Ih=.015;#xr=.5;#_r=.5;#tf=1;constructor(i){super(i),this.init(i,"POST_EFFECT_CHROMATIC_ABERRATION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(global_id.x),f32(global_id.y))/vec2<f32>(dimW,dimH);\nlet center=vec2<f32>(uniforms.centerX,uniforms.centerY);\nlet offset=uv - center;\nlet distance=length(offset);\nlet distortion=uniforms.strength * pow(distance,uniforms.falloff);\nlet redOffset=uv + offset * distortion * vec2<f32>(-1.0,-1.0);\nlet greenOffset=uv;\nlet blueOffset=uv + offset * distortion * vec2<f32>(1.0,1.0);\nvar finalColor=vec3<f32>(0.0);\nif (redOffset.x >=0.0 && redOffset.x <=1.0 &&redOffset.y >=0.0 && redOffset.y <=1.0) {let redCoord=vec2<i32>(i32(clamp(redOffset.x * dimW,0.0,dimW - 1.0)),i32(clamp(redOffset.y * dimH,0.0,dimH - 1.0)));finalColor.r=textureLoad(sourceTexture,redCoord).r;\n}\nlet greenCoord=vec2<i32>(i32(clamp(greenOffset.x * dimW,0.0,dimW - 1.0)),i32(clamp(greenOffset.y * dimH,0.0,dimH - 1.0))\n);\nfinalColor.g=textureLoad(sourceTexture,greenCoord).g;\nif (blueOffset.x >=0.0 && blueOffset.x <=1.0 &&blueOffset.y >=0.0 && blueOffset.y <=1.0) {let blueCoord=vec2<i32>(i32(clamp(blueOffset.x * dimW,0.0,dimW - 1.0)),i32(clamp(blueOffset.y * dimH,0.0,dimH - 1.0)));finalColor.b=textureLoad(sourceTexture,blueCoord).b;\n}\nlet originalAlpha=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).a;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(finalColor,originalAlpha));\n","struct Uniforms {strength:f32,centerX:f32,centerY:f32,falloff:f32\n};\n")),this.strength=this.#Ih,this.centerX=this.#xr,this.centerY=this.#_r,this.falloff=this.#tf}get strength(){return this.#Ih}set strength(i){validateNumberRange(i,0),this.#Ih=i,this.updateUniform("strength",i)}get centerX(){return this.#xr}set centerX(i){validateNumberRange(i,0,1),this.#xr=i,this.updateUniform("centerX",i)}get centerY(){return this.#_r}set centerY(i){validateNumberRange(i,0,1),this.#_r=i,this.updateUniform("centerY",i)}get falloff(){return this.#tf}set falloff(i){validateNumberRange(i,0,5),this.#tf=i,this.updateUniform("falloff",i)}}Object.freeze(ChromaticAberration);class DOFCoC extends ASinglePassPostEffect{#nf=15;#rf=1.4;#if=32;#af=.1;#sf=1e3;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_DOF_COC",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nlet originalColor=textureLoad(sourceTexture,coord).xyzw;\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth);\nlet coc=calculateCoC(linearDepth);\nlet encodedCoC=encodeCoC(coc);\ntextureStore(outputTexture,coord,vec4<f32>(originalColor.rgb,encodedCoC));\n","struct Uniforms {focusDistance:f32,aperture:f32,maxCoC:f32,nearPlane:f32,farPlane:f32,\n};\nfn linearizeDepth(depth:f32) -> f32 {let z=depth * 2.0 - 1.0;return (2.0 * uniforms.nearPlane * uniforms.farPlane)/(uniforms.farPlane + uniforms.nearPlane - z * (uniforms.farPlane - uniforms.nearPlane));\n}\nfn encodeCoC(coc:f32) -> f32 {return (coc + 1.0) * 0.5;\n}\nfn calculateCoC(linearDepth:f32) -> f32 {let subjectDistance=linearDepth;let focalLength=50.0;let focusRange=uniforms.focusDistance * 0.15;let transitionRange=uniforms.focusDistance * 0.35;let distanceFromFocus=abs(subjectDistance - uniforms.focusDistance);if (distanceFromFocus < focusRange) {let focusFactor=smoothstep(0.0,focusRange,distanceFromFocus);return mix(0.0,0.02,focusFactor);}var rawCoC:f32;var signedCoC:f32;if (subjectDistance < uniforms.focusDistance) {let nearDistance=uniforms.focusDistance - subjectDistance;let nearFactor=nearDistance/uniforms.focusDistance;rawCoC=(uniforms.aperture * focalLength * nearDistance)/(subjectDistance * (uniforms.focusDistance - focalLength));rawCoC=rawCoC * (1.0 + nearFactor * 1.5);signedCoC=-(rawCoC/uniforms.maxCoC);let absCoC=abs(signedCoC);if (absCoC > 0.05) {signedCoC=-min(1.0,absCoC * smoothstep(0.05,0.3,absCoC) * 1.5);}if (distanceFromFocus < transitionRange) {let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus);signedCoC=mix(0.0,signedCoC,transitionFactor);}return clamp(signedCoC,-1.0,0.0);} else {let farDistance=subjectDistance - uniforms.focusDistance;rawCoC=(uniforms.aperture * focalLength * farDistance)/(subjectDistance * (uniforms.focusDistance + focalLength));rawCoC=rawCoC * (1.0 + farDistance * 0.08);signedCoC=rawCoC/uniforms.maxCoC;let absCoC=abs(signedCoC);if (absCoC > 0.1) {signedCoC=min(1.0,absCoC * smoothstep(0.1,0.5,absCoC) * 1.2);}if (distanceFromFocus < transitionRange) {let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus);signedCoC=mix(0.0,signedCoC,transitionFactor);}return clamp(signedCoC,0.0,1.0);}\n}\n")),this.focusDistance=this.#nf,this.aperture=this.#rf,this.maxCoC=this.#if,this.nearPlane=this.#af,this.farPlane=this.#sf}get focusDistance(){return this.#nf}set focusDistance(i){validateNumberRange(i),this.#nf=i,this.updateUniform("focusDistance",i)}get aperture(){return this.#rf}set aperture(i){validateNumberRange(i),this.#rf=i,this.updateUniform("aperture",i)}get maxCoC(){return this.#if}set maxCoC(i){validateNumberRange(i),this.#if=i,this.updateUniform("maxCoC",i)}get nearPlane(){return this.#af}set nearPlane(i){validateNumberRange(i),this.#af=i,this.updateUniform("nearPlane",i)}get farPlane(){return this.#sf}set farPlane(i){validateNumberRange(i),this.#sf=i,this.updateUniform("farPlane",i)}}Object.freeze(DOFCoC);class DOFUnified extends ASinglePassPostEffect{#of=16;#uf=24;#lf=1;#cf=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:x}=this,_=`struct Uniforms {nearBlurSize:f32,farBlurSize:f32,nearStrength:f32,farStrength:f32,};@group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>;@group(0) @binding(1) var cocTexture:texture_storage_2d<rgba8unorm,read>;@group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>;@group(1) @binding(1) var<uniform> uniforms:Uniforms;/* CoC 디코딩 함수 */fn decodeCoC(encoded:f32) -> f32 {/* 0~1 범위를 -1~1 범위로 복원 */return encoded * 2.0 - 1.0;}@compute @workgroup_size(${m},${g},${x})fn main (@builtin(global_invocation_id) global_id:vec3<u32>) {let index=vec2<u32>(global_id.xy);let dimensions:vec2<u32>=textureDimensions(sourceTexture);if (index.x >=dimensions.x || index.y >=dimensions.y) {return;}let originalColor=textureLoad(sourceTexture,index).rgb;let encodedCoC=textureLoad(cocTexture,index).a;/* CoC 값 디코딩 */let cocValue=decodeCoC(encodedCoC);/* CoC 임계값 체크 */if (abs(cocValue) < 0.005) {textureStore(outputTexture,index,vec4<f32>(originalColor,1.0));return;}var finalColor=originalColor;/* Near blur 처리 (CoC < 0) */if (cocValue < 0.0) {let nearBlur=calculateBlur(index,abs(cocValue),uniforms.nearBlurSize,true);/* Near strength 블렌딩 개선 - 더 강한 효과 */let nearBlend=saturate(pow(abs(cocValue) * uniforms.nearStrength,0.7));finalColor=mix(originalColor,nearBlur,nearBlend);}/* Far blur 처리 (CoC > 0) */else if (cocValue > 0.0) {let farBlur=calculateBlur(index,cocValue,uniforms.farBlurSize,false);let rawBlend=cocValue * uniforms.farStrength;let farBlend=saturate(smoothstep(0.0,0.8,rawBlend));finalColor=mix(originalColor,farBlur,farBlend);}textureStore(outputTexture,index,vec4<f32>(finalColor,1.0));}fn calculateBlur(center:vec2<u32>,intensity:f32,maxBlurSize:f32,isNear:bool) -> vec3<f32> {let dimensions:vec2<u32>=textureDimensions(sourceTexture);let blurRadius=intensity * maxBlurSize;/* 최소 블러 반경 조정 */if (blurRadius < 0.3) {return textureLoad(sourceTexture,center).rgb;}var sum:vec3<f32>=vec3<f32>(0.0);var totalWeight=0.0;let maxRadius=min(blurRadius,maxBlurSize);/* Near blur에 더 많은 샘플 적용 */let samples=select(8,16,isNear);/* near=16,far=8 */let angleStep=6.28318530718/f32(samples);let originalColor=textureLoad(sourceTexture,center).rgb;/* Near blur에 더 강한 중앙 가중치 */let centerWeight=select(0.4,0.2,isNear);/* near=0.2,far=0.4 */sum +=originalColor * centerWeight;totalWeight +=centerWeight;/* 방사형 샘플링 */for (var i=0;i < samples;i=i + 1) {for (var r=1.0;r <=maxRadius;r=r + 1.0) {let angle=f32(i) * angleStep;let offset=vec2<f32>(cos(angle) * r,sin(angle) * r);let samplePos=vec2<i32>(clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1),clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1));let sampleColor=textureLoad(sourceTexture,vec2<u32>(samplePos)).rgb;let sampleEncodedCoC=textureLoad(cocTexture,vec2<u32>(samplePos)).a;let sampleCoC=decodeCoC(sampleEncodedCoC);/* 디코딩 추가 *//* 가우시안 가중치 */var weight=exp(-r * r/(maxRadius * maxRadius * 0.5));/* CoC 기반 가중치 조정 */if (isNear) {/* Near blur:더 강한 조건으로 가중치 증가 */if (sampleCoC < 0.0 && abs(sampleCoC) >=intensity * 0.5) {weight *=1.5;}} else {/* Far blur:기존 조건 유지 */if (sampleCoC > 0.0 && sampleCoC >=intensity * 0.7) {weight *=1.2;}}sum +=sampleColor * weight;totalWeight +=weight;}}/* 추가 근거리 샘플링 (near blur만) */if (isNear && maxRadius > 2.0) {let additionalSamples=8;let innerRadius=maxRadius * 0.3;let innerAngleStep=6.28318530718/f32(additionalSamples);for (var i=0;i < additionalSamples;i=i + 1) {let angle=f32(i) * innerAngleStep + 0.5;/* 약간의 오프셋 */let offset=vec2<f32>(cos(angle) * innerRadius,sin(angle) * innerRadius);let samplePos=vec2<i32>(clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1),clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1));let sampleColor=textureLoad(sourceTexture,vec2<u32>(samplePos)).rgb;let weight=0.8;sum +=sampleColor * weight;totalWeight +=weight;}}if (totalWeight > 0.0) {return sum/totalWeight;} else {return originalColor;}}`;this.init(i,"POST_EFFECT_DOF_UNIFIED",{msaa:_,nonMsaa:_}),this.nearBlurSize=this.#of,this.farBlurSize=this.#uf,this.nearStrength=this.#lf,this.farStrength=this.#cf}get nearBlurSize(){return this.#of}set nearBlurSize(i){validateNumberRange(i),this.#of=i,this.updateUniform("nearBlurSize",i)}get farBlurSize(){return this.#uf}set farBlurSize(i){validateNumberRange(i),this.#uf=i,this.updateUniform("farBlurSize",i)}get nearStrength(){return this.#lf}set nearStrength(i){validateNumberRange(i),this.#lf=i,this.updateUniform("nearStrength",i)}get farStrength(){return this.#cf}set farStrength(i){validateNumberRange(i),this.#cf=i,this.updateUniform("farStrength",i)}render(i,m,g,x,_){return super.render(i,m,g,x,_)}}Object.freeze(DOFUnified);class DOF extends AMultiPassPostEffect{#hf;#ff;#nf=15;#rf=2.8;#if=25;#af=.1;#sf=1e3;#of=15;#uf=15;#lf=1;#cf=1;constructor(i){super(i,[new DOFCoC(i),new DOFUnified(i)]),this.#hf=this.passList[0],this.#ff=this.passList[1],this.#hf.focusDistance=this.#nf,this.#hf.aperture=this.#rf,this.#hf.maxCoC=this.#if,this.#hf.nearPlane=this.#af,this.#hf.farPlane=this.#sf,this.#ff.nearBlurSize=this.#of,this.#ff.farBlurSize=this.#uf,this.#ff.nearStrength=this.#lf,this.#ff.farStrength=this.#cf}get focusDistance(){return this.#nf}set focusDistance(i){this.#nf=i,this.#hf.focusDistance=i}get aperture(){return this.#rf}set aperture(i){this.#rf=i,this.#hf.aperture=i}get maxCoC(){return this.#if}set maxCoC(i){this.#if=i,this.#hf.maxCoC=i}get nearPlane(){return this.#af}set nearPlane(i){this.#af=i,this.#hf.nearPlane=i}get farPlane(){return this.#sf}set farPlane(i){this.#sf=i,this.#hf.farPlane=i}get nearBlurSize(){return this.#of}set nearBlurSize(i){this.#of=i,this.#ff.nearBlurSize=i}get farBlurSize(){return this.#uf}set farBlurSize(i){this.#uf=i,this.#ff.farBlurSize=i}get nearStrength(){return this.#lf}set nearStrength(i){this.#lf=i,this.#ff.nearStrength=i}get farStrength(){return this.#cf}set farStrength(i){this.#cf=i,this.#ff.farStrength=i}setGameDefault(){this.focusDistance=15,this.aperture=2.8,this.maxCoC=25,this.nearBlurSize=15,this.farBlurSize=15,this.nearStrength=1,this.farStrength=1}setCinematic(){this.focusDistance=20,this.aperture=1.4,this.maxCoC=40,this.nearBlurSize=25,this.farBlurSize=30,this.nearStrength=1.2,this.farStrength=1.3}setPortrait(){this.focusDistance=8,this.aperture=1.8,this.maxCoC=35,this.nearBlurSize=12,this.farBlurSize=25,this.nearStrength=.8,this.farStrength=1.4}setLandscape(){this.focusDistance=50,this.aperture=8,this.maxCoC=20,this.nearBlurSize=20,this.farBlurSize=10,this.nearStrength=1.1,this.farStrength=.6}setMacro(){this.focusDistance=2,this.aperture=1,this.maxCoC=50,this.nearBlurSize=30,this.farBlurSize=35,this.nearStrength=1.5,this.farStrength=1.6}setSports(){this.focusDistance=25,this.aperture=4,this.maxCoC=18,this.nearBlurSize=10,this.farBlurSize=12,this.nearStrength=.8,this.farStrength=.9}setNightMode(){this.focusDistance=12,this.aperture=2,this.maxCoC=30,this.nearBlurSize=18,this.farBlurSize=20,this.nearStrength=1.1,this.farStrength=1.2}render(i,m,g,x){const _=this.#hf.render(i,m,g,x);return this.#ff.render(i,m,g,x,_)}}Object.freeze(DOF);class LensDistortion extends ASinglePassPostEffect{#df=.1;#mf=0;#xr=0;#_r=0;constructor(i){super(i),this.init(i,"POST_EFFECT_LENS_DISTORTION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet uv=global_id_vec/vec2<f32>(dimW,dimH);\nlet uvCenter=center/vec2<f32>(dimW,dimH);\nlet offset=uv - uvCenter;\nlet distance=length(offset);\nlet barrelFactor=1.0 + uniforms.barrelStrength * distance * distance;\nlet pincushionFactor=1.0 - uniforms.pincushionStrength * distance * distance;\nlet distortionFactor=barrelFactor * pincushionFactor;\nlet distortedUV=uvCenter + offset * distortionFactor;\nif (distortedUV.x < 0.0 || distortedUV.x > 1.0 ||distortedUV.y < 0.0 || distortedUV.y > 1.0) {textureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(0.0,0.0,0.0,1.0));\n} else {let sampleCoord=vec2<i32>(i32(clamp(distortedUV.x * dimW,0.0,dimW - 1.0)),i32(clamp(distortedUV.y * dimH,0.0,dimH - 1.0)));let sampledColor=textureLoad(sourceTexture,sampleCoord).xyzw;textureStore(outputTexture,vec2<i32>(global_id.xy),sampledColor);\n}\n","struct Uniforms {barrelStrength:f32,pincushionStrength:f32,centerX:f32,centerY:f32\n};\n")),this.barrelStrength=this.#df,this.pincushionStrength=this.#mf,this.centerX=this.#xr,this.centerY=this.#_r}get barrelStrength(){return this.#df}set barrelStrength(i){validateNumberRange(i,0),this.#df=i,this.updateUniform("barrelStrength",i)}get pincushionStrength(){return this.#mf}set pincushionStrength(i){validateNumberRange(i,0),this.#mf=i,this.updateUniform("pincushionStrength",i)}get centerX(){return this.#xr}set centerX(i){validateNumber(i),this.#xr=i,this.updateUniform("centerX",i)}get centerY(){return this.#_r}set centerY(i){validateNumber(i),this.#_r=i,this.updateUniform("centerY",i)}}Object.freeze(LensDistortion);class Vignetting extends ASinglePassPostEffect{#pf=.2;#X=.5;constructor(i){super(i),this.init(i,"POST_EFFECT_VIGNETTING",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet index=vec2<u32>(global_id.xy);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet smoothness=uniforms.smoothness;\nlet size=uniforms.size;\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nvar diff=size - distance(uv,vec2<f32>(0.5));\nlet vignette=smoothstep(-smoothness,smoothness,diff);\ncolor.r *=vignette;\ncolor.g *=vignette;\ncolor.b *=vignette;\ntextureStore(outputTexture,index,color);\n","struct Uniforms {smoothness:f32,size:f32,\n};\n")),this.smoothness=this.#pf,this.size=this.#X}get size(){return this.#X}set size(i){validateNumberRange(i,0),this.#X=i,this.updateUniform("size",i)}get smoothness(){return this.#pf}set smoothness(i){validateNumberRange(i,0,1),this.#pf=i,this.updateUniform("smoothness",i)}}Object.freeze(Vignetting);class OldBloomBlend extends ASinglePassPostEffect{#gf=1;#su=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:x}=this,_=`struct Uniforms {bloomStrength:f32,exposure:f32};@group(0) @binding(0) var sourceTexture0:texture_storage_2d<rgba8unorm,read>;@group(0) @binding(1) var sourceTexture1:texture_storage_2d<rgba8unorm,read>;@group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>;@group(1) @binding(1) var<uniform> uniforms:Uniforms;@compute @workgroup_size(${m},${g},${x})fn main (@builtin(global_invocation_id) global_id:vec3<u32>,){let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture0);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var diffuse:vec4<f32>=textureLoad(sourceTexture0,index,);var blur:vec4<f32>=textureLoad(sourceTexture1,index,);let finalColor=vec4<f32>((diffuse.rgb + blur.rgb * uniforms.bloomStrength ) * uniforms.exposure,diffuse.a);textureStore(outputTexture,index,finalColor );};`;this.init(i,"POST_EFFECT_OLD_BLOOM",{msaa:_,nonMsaa:_}),this.exposure=this.#su,this.bloomStrength=this.#gf}get bloomStrength(){return this.#gf}set bloomStrength(i){this.#gf=i,this.updateUniform("bloomStrength",i)}get exposure(){return this.#su}set exposure(i){this.#su=i,this.updateUniform("exposure",i)}render(i,m,g,x,_){return super.render(i,m,g,x,_)}}Object.freeze(OldBloomBlend);class OldBloom extends AMultiPassPostEffect{#xf;#_f;#vf;#Dh=156;#bf=32;#su=1;#gf=1.2;constructor(i){super(i,[new Threshold(i),new GaussianBlur(i),new OldBloomBlend(i)]),this.#xf=this.passList[0],this.#_f=this.passList[1],this.#vf=this.passList[2],this.#xf.threshold=this.#Dh,this.#_f.size=this.#bf,this.#vf.exposure=this.#su,this.#vf.bloomStrength=this.#gf}get threshold(){return this.#Dh}set threshold(i){this.#Dh=i,this.#xf.threshold=i}get gaussianBlurSize(){return this.#bf}set gaussianBlurSize(i){this.#bf=i,this.#_f.size=i}get exposure(){return this.#su}set exposure(i){this.#su=i,this.#vf.exposure=i}get bloomStrength(){return this.#gf}set bloomStrength(i){this.#gf=i,this.#vf.bloomStrength=i}render(i,m,g,x){const _=this.#xf.render(i,m,g,x),b=this.#_f.render(i,m,g,_);return this.#vf.render(i,m,g,x,b)}}Object.freeze(OldBloom);class Sharpen extends AMultiPassPostEffect{#kh;constructor(i){super(i,[new Convolution(i)]),this.#kh=this.passList[0],this.#kh.kernel=Convolution.SHARPEN}render(i,m,g,x){return this.#kh.render(i,m,g,x)}}Object.freeze(Sharpen);var Ms=Object.freeze({__proto__:null,AMultiPassPostEffect:AMultiPassPostEffect,ASinglePassPostEffect:ASinglePassPostEffect,Blur:Blur,BlurX:BlurX,BlurY:BlurY,BrightnessContrast:BrightnessContrast,ChromaticAberration:ChromaticAberration,ColorBalance:ColorBalance,ColorTemperatureTint:ColorTemperatureTint,Convolution:Convolution,DOF:DOF,DirectionalBlur:DirectionalBlur,FilmGrain:FilmGrain,Fog:Fog,GaussianBlur:GaussianBlur,Grayscale:Grayscale,HeightFog:HeightFog,HueSaturation:HueSaturation,Invert:Invert,LensDistortion:LensDistortion,OldBloom:OldBloom,PostEffectManager:PostEffectManager,RadialBlur:RadialBlur,Sharpen:Sharpen,Threshold:Threshold,Vibrance:Vibrance,Vignetting:Vignetting,ZoomBlur:ZoomBlur}),Rs=Object.freeze({__proto__:null,PICKING_EVENT_TYPE:pi,PickingEvent:PickingEvent,PickingManager:PickingManager});const init=async(i,m,g,x,_="premultiplied",b={powerPreference:"high-performance",forceFallbackAdapter:!1})=>{const{gpu:y}=navigator,errorHandler=(i,m)=>{const x=generateErrorMessage(i,m);console.error("\n============\n",x,"\n============\n"),g?.(x)},validateAndRequestDevice=async m=>{const g=[];m.features.has("texture-compression-astc")&&g.push("texture-compression-astc");const x={requiredFeatures:g};try{const g=await m.requestDevice(x);validateAndInitializeContext(i,m,g)}catch(i){errorHandler(null,`Failed to request device. Adapter was ${m},error message is ${i.message}`)}},validateAndInitializeContext=(i,b,y)=>{const T=i.getContext("webgpu");if(T)try{const g=new RedGPUContext(i,b,y,T,_);m(g),y.addEventListener("uncapturederror",i=>{console.warn("TODO A WebGPU error was not captured:",i),console.warn(i.error?.message),window.cancelAnimationFrame(g.currentRequestAnimationFrame)}),y.lost.then(i=>{console.warn(i),console.warn(`Device lost occurred:${i.message}`),"destroyed"===i.reason&&x?.(i)})}catch(i){g(errorHandler(i,""))}else errorHandler(new Error(`Failed to get context from canvas:${i.id||i}`),"Failed to get webgpu initialize from canvas")},initializeWebGPU=async()=>{m instanceof Function?i instanceof HTMLCanvasElement?await(async i=>{i||errorHandler(null,"Cannot find navigator.gpu");try{const m=await i.requestAdapter(b);await validateAndRequestDevice(m)}catch(m){errorHandler(m,`Failed to request adapter or validate device with target GPU:${i},error message is ${m.message}`)}})(y):errorHandler(null,`Expected HTMLCanvasElement,but received:${i}`):errorHandler(null,`Expected onWebGPUInitialized,but received:${m}`)};try{await initializeWebGPU()}catch(i){errorHandler(i,`Unexpected error occurred during WebGPU initialization:${i.message}`)}},generateErrorMessage=(i,m)=>{let g=m;return i instanceof Error?(g=i.message??m,"string"==typeof i.stack&&(g+=`\nStack Trace:${i.stack}`)):console.warn("generateErrorMessage function expected an Error instance,but got:",i),g};class TextureLoaderData{src;texture;loadEnd;loadSuccess;srcInfo;idx;constructor(i,m,g){this.src=i,this.texture=null,this.loadEnd=!1,this.loadSuccess=!1,this.srcInfo=m,this.idx=g}}class TextureLoader{textures=[];#yf=0;#b;#Tf;#Sf;#wf;constructor(i,m=[],g,x){this.#b=i,this.#Tf=m,this.#Sf=g,this.#wf=x,this.#Tf.length?this.#Tf.forEach((i,m)=>this.#Mf(i,m)):this.#Rf()}getTextureByIndex(i){if(this.textures[i])return this.textures[i].texture}#Mf(i,m){let g,x,_=BitmapTexture;x=i.hasOwnProperty("src")?i.src:i,x instanceof Array&&(_=CubeTexture),g=new TextureLoaderData(x,i,m);const onLoadHandler=()=>{g.loadSuccess=!0,g.loadEnd=!0,this.#Cf()},onErrorHandler=()=>{g.loadSuccess=!1,g.loadEnd=!0,this.#Cf()};g.texture=_===BitmapTexture?new _(this.#b,i,!0,onLoadHandler,onErrorHandler,i.format,!1):new _(this.#b,i,!0,onLoadHandler,onErrorHandler,i.format),this.textures.push(g)}#Cf(){this.#yf++,this.#wf&&this.#wf.call(this,{totalNum:this.#Tf.length,loaded:this.#yf}),this.#yf===this.#Tf.length&&this.#Rf()}#Rf(){requestAnimationFrame(()=>{this.#Sf&&this.#Sf.call(this,this)})}}const arrayBufferLoader=(i,m,g)=>{fetch(i).then(i=>{if(!i.ok)throw new Error(`Network response was not ok ${i.statusText}`);return i.arrayBuffer()}).then(i=>{m&&m(i)}).catch(i=>{})},Cs={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};Object.freeze(Cs);class AccessorInfo_GLTF{accessor;bufferView;bufferGlTfId;buffer;bufferURIDataView;componentType;componentType_BYTES_PER_ELEMENT;getMethod;accessorBufferOffset;bufferViewOffset;bufferViewByteStride;startIndex;constructor(i,m,g){switch(this.accessor=m.accessors[g],this.bufferView=m.bufferViews[this.accessor.bufferView],this.bufferGlTfId=this.bufferView.buffer,this.buffer=m.buffers[this.bufferGlTfId],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=i.parsingResult.uris.buffers[this.bufferGlTfId]),this.componentType=Cs[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:consoleAndThrowError("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}class AnimationData_GLTF{gltfLoader;scenesData;accessorGlTfId;dataList;constructor(i,m,g){this.gltfLoader=i,this.scenesData=m,this.accessorGlTfId=g;const x=new AccessorInfo_GLTF(this.gltfLoader,this.scenesData,this.accessorGlTfId),{accessor:_,startIndex:b,componentType_BYTES_PER_ELEMENT:y,bufferURIDataView:T,getMethod:w}=x,{type:P,count:H}=_;let z=b,$=1;switch(P){case"SCALAR":$=1;break;case"VEC4":$=4;break;case"VEC3":$=3}this.dataList=[];let q=0;for(;q<H*$;z++,q++)this.dataList[q]=T[w](z*y,!0)}}class AniTrack_GLTF{key;timeAnimationInfo;aniDataAnimationInfo;interpolation;animationTargetMesh;weightMeshes;constructor(i,m,g,x,_,b){this.key=i,this.timeAnimationInfo=m,this.aniDataAnimationInfo=g,this.interpolation=x,this.animationTargetMesh=_,this.weightMeshes=b}}const parseAnimations=(i,m)=>new Promise(async g=>{m.animations||(m.animations=[]);const{parsingResult:x}=i,{animations:_}=x,{animations:b}=m;if(b.length){const g=b.map(async g=>{const{samplers:x,channels:b}=g,y=[];y.minTime=1e7,y.maxTime=-1,y.name=g.name,_.push(y),await Promise.all(b.map(async g=>((i,m,g,x,_)=>{let b,y;const{nodes:T,meshes:w}=_,P=[],{sampler:H,target:z}=g,$=x[H],{node:q,path:W}=z,ye=T[q];if("mesh"in ye){b=ye.Mesh;const{primitives:i}=w[ye.mesh];let m=i.length;for(;m--;)P.push(i[m].Mesh)}else{let m;if(!i.parsingResult.groups[q])return;m=i.parsingResult.groups[q],b=m}if("scale"!=W&&"rotation"!=W&&"translation"!=W&&"weights"!=W||(y=new AniTrack_GLTF(W,new AnimationData_GLTF(i,_,$.input),new AnimationData_GLTF(i,_,$.output),$.interpolation,b,P),m.push(y)),y){const{timeAnimationInfo:i}=y,{dataList:g}=i;m.minTime>g[0]&&(m.minTime=g[0]),m.maxTime<g[g.length-1]&&(m.maxTime=g[g.length-1])}})(i,y,g,x,m)))});await Promise.all(g),_.length&&_.forEach(m=>i.playAnimation(m))}g()});let Ps=new Float32Array(16),Es=new Float32Array(16);class ParsedSkinInfo_GLTF{joints;inverseBindMatrices;skeletonMesh;isInverseBindMatrixUpdated=!1;vertexStorageInfo;vertexStorageBuffer;#Pf;#Ef;constructor(){this.joints=[],this.inverseBindMatrices=null,this.skeletonMesh=null}update(i,m){const g=this.#If(m.modelMatrix),x=this.#Bf(this.joints,g);this.#Lf(i,m.animationInfo.skinInfo,x)}#If(i){return this.#Pf=this.#Pf||new Float32Array(i.length),this.#Pf.set(i),invert$2(this.#Pf,this.#Pf),this.#Pf}#Bf(i,m){const g=16*i.length;this.#Ef&&this.#Ef.length==g||(this.#Ef=new Float32Array(g));for(let g=0;g<i.length;g++){const x=multiply$5(Ps,m,i[g].modelMatrix),_=multiply$5(Es,x,this.inverseBindMatrices[g]);this.#Ef.set(_,16*g)}return this.#Ef}#Lf(i,m,g){const{vertexStorageBuffer:x,vertexStorageInfo:_}=m,{gpuBuffer:b}=x,{jointMatrix:y}=_.members;i.gpuDevice.queue.writeBuffer(b,y.uniformOffset,g)}}const parseJoint_GLTF=(i,m,g,x)=>{const _=g[x].Mesh;_?(m.joints.push(_),_.depthCompare=Fr.NEVER):requestAnimationFrame(function(){parseJoint_GLTF(i,m,g,x)})},parseAttributeInfo_GLTF=function(i,m,g,x,_,b,y,T,w,P,H){const{accessor:z,startIndex:$,getMethod:q,bufferViewByteStride:W,bufferURIDataView:ye,componentType_BYTES_PER_ELEMENT:Ge}=m,{type:Ke,count:Xe}=z;let Ye=0;const je=W/Ge;let Ze,Je=$;switch(Ke){case"VEC4":if(W)for(Ze=Je+Xe*(W/Ge);Je<Ze;Je++)Ye%je<4&&("WEIGHTS_0"==i?T.push(ye[q](Je*Ge,!0)):"JOINTS_0"==i?w.push(ye[q](Je*Ge,!0)):"COLOR_0"==i?P.push(ye[q](Je*Ge,!0)):"TANGENT"==i?H.push(ye[q](Je*Ge,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i)),Ye++;else for(Ze=Je+4*Xe;Je<Ze;Je++)"WEIGHTS_0"==i?T.push(ye[q](Je*Ge,!0)):"JOINTS_0"==i?w.push(ye[q](Je*Ge,!0)):"COLOR_0"==i?P.push(ye[q](Je*Ge,!0)):"TANGENT"==i?H.push(ye[q](Je*Ge,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i),Ye++;break;case"VEC3":if(W)for(Ze=Je+Xe*(W/Ge);Je<Ze;Je++)Ye%je<3&&("NORMAL"==i?y.push(ye[q](Je*Ge,!0)):"POSITION"==i?g.push(ye[q](Je*Ge,!0)):"COLOR_0"==i?(P.push(ye[q](Je*Ge,!0)),Ye%je==2&&P.push(1)):"TANGENT"==i?H.push(ye[q](Je*Ge,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i)),Ye++;else for(Ze=Je+3*Xe;Je<Ze;Je++)"NORMAL"==i?y.push(ye[q](Je*Ge,!0)):"POSITION"==i?g.push(ye[q](Je*Ge,!0)):"COLOR_0"==i?(P.push(ye[q](Je*Ge,!0)),Ye%3==2&&P.push(1)):"TANGENT"==i?H.push(ye[q](Je*Ge,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i),Ye++;break;case"VEC2":if(W)for(Ze=Je+Xe*(W/Ge);Je<Ze;Je++)Ye%je<2&&("TEXCOORD_0"==i?x.push(ye[q](Je*Ge,!0)):"TEXCOORD_1"==i?_.push(ye[q](Je*Ge,!0)):"TEXCOORD_2"==i?b.push(ye[q](Je*Ge,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i)),Ye++;else for(Ze=Je+2*Xe;Je<Ze;Je++)"TEXCOORD_0"==i?x.push(ye[q](Je*Ge,!0)):"TEXCOORD_1"==i?_.push(ye[q](Je*Ge,!0)):"TEXCOORD_2"==i?b.push(ye[q](Je*Ge,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i),Ye++}},parseSparse_GLTF=(i,m,g,x,_)=>{const b=g.sparse;if(!b)return;const{values:y,indices:T,count:w}=b,P=x.bufferViews,H=P[y.bufferView],z=H.buffer,$=x.buffers,q=$[z],W=[],ye=[],Ge=P[T.bufferView],Ke=Ge.buffer,Xe=$[Ke];let Ye;q.uri&&(Ye=i.parsingResult.uris.buffers[z]);const je=Cs[g.componentType],{BYTES_PER_ELEMENT:Ze}=je;let Je;switch(je){case Float32Array:Je="getFloat32";break;case Uint32Array:Je="getUint32";break;case Uint16Array:Je="getUint16";break;case Int16Array:Je="getInt16";break;case Uint8Array:Je="getUint8";break;case Int8Array:Je="getInt8"}const Qe=g.byteOffset||0;let et,at,ht=((H.byteOffset||0)+Qe)/Ze;switch(g.type){case"VEC3":for(et=ht+Ze*w/Ze*3;ht<et;ht++){const i=Ye[Je](ht*Ze,!0);"NORMAL"==m||"POSITION"==m&&W.push(i)}break;case"VEC2":for(et=ht+Ze*w/Ze*2;ht<et;ht++)"TEXCOORD_0"==m&&ye.push(Ye[Je](ht*Ze,!0))}Xe.uri&&(at=i.parsingResult.uris.buffers[Ke]);const ft=Cs[T.componentType],gt=ft.BYTES_PER_ELEMENT,xt=ft===Uint16Array?"getUint16":"getUint8",vt=T.byteOffset||0;let bt=((Ge.byteOffset||0)+vt)/gt;const yt=bt+gt*w/gt;let Tt=0;for(;bt<yt;bt++){const i=at[xt](bt*gt,!0);_[3*i]=W[3*Tt],_[3*i+1]=W[3*Tt+1],_[3*i+2]=W[3*Tt+2],Tt++}};class MorphInfoData_GLTF{vertices=[];verticesColor_0=[];normals=[];uvs=[];uvs1=[];uvs2=[];jointWeights=[];joints=[];tangents=[];interleaveData;constructor(i=[],m=[],g=[],x=[],_=[],b=[],y=[],T=[],w=[]){this.vertices=i,this.verticesColor_0=m,this.normals=g,this.uvs=x,this.uvs1=_,this.uvs2=_,this.jointWeights=y,this.joints=T,this.tangents=w}}class MorphInfo_GLTF{morphInfoDataList=[];weights;cacheData={};origin;constructor(i,m,g,x){g.targets&&(this.morphInfoDataList=g.targets.map(g=>{const x=new MorphInfoData_GLTF;for(let _ in g){const{vertices:b,verticesColor_0:y,normals:T,uvs:w,uvs1:P,uvs2:H,jointWeights:z,joints:$,tangents:q}=x,W=g[_],ye=new AccessorInfo_GLTF(i,m,W),{accessor:Ge}=ye;parseAttributeInfo_GLTF(_,ye,b,w,P,H,T,z,$,y,q),Ge.sparse&&parseSparse_GLTF(i,_,Ge,m,b)}return x})),this.weights=x||[],this.origin=null}}const parseMaterialTexture=(i,m,g,x,_)=>{const{redGPUContext:b,gltfData:y}=i,{textureRawList:T}=i.parsingResult,w=g.index,P=y.textures[w],H=P.extensions?.EXT_texture_webp?.source||P.source,z=getURL(i,y,H);if(z){const w=P.sampler,$=getSamplerInfo(i,y,w),{parsedURI:q,cacheKey:W}=z,ye=`${x}SourceGlTfId_${H}`;if(T[ye]?(T[ye].materialList.push(m),T[ye].samplerList.push(new Sampler(b,$))):T[ye]={src:q,cacheKey:W,targetTextureKey:x,targetSamplerKey:`${x}Sampler`,materialList:[m],samplerList:[new Sampler(b,$)],format:_||navigator.gpu.getPreferredCanvasFormat()},m[`${x}_texCoord_index`]=g.texCoord||0,"extensions"in g){const{extensions:i}=g,{KHR_texture_transform:_}=i;_&&((i,m,g)=>{i[`${m}_KHR_texture_transform_offset`]=g.offset||[0,0],i[`${m}_KHR_texture_transform_scale`]=g.scale||[1,1],i[`${m}_KHR_texture_transform_rotation`]=g.rotation||0,i[`use_${m}_KHR_texture_transform`]=!0})(m,x,_)}}},getURL=function(i,m,g){if(!m.images[g])return null;const{uri:x}=m.images[g];let _;const b=`${i.url}_${g}`;return _=x.indexOf("blob:http")>-1?x:(x.indexOf(";base64,")>-1?"":i.filePath)+x,{parsedURI:_,cacheKey:b}},getSamplerInfo=function(i,m,g){const x={magFilter:Tr.LINEAR,minFilter:Tr.LINEAR,mipmapFilter:Tr.LINEAR,addressModeU:br.REPEAT,addressModeV:br.REPEAT,addressModeW:br.REPEAT},_={33071:br.CLAMP_TO_EDGE,33648:br.MIRRORED_REPEAT,10497:br.REPEAT},b={9728:Tr.NEAREST,9729:Tr.LINEAR},y={9728:Tr.NEAREST,9729:Tr.LINEAR};if(m.samplers){let i=m.samplers[g];i&&("magFilter"in i&&(x.magFilter=b[i.magFilter]||Tr.LINEAR),"minFilter"in i&&(x.minFilter=y[i.minFilter]||Tr.LINEAR),"wrapS"in i&&(x.addressModeU=_[i.wrapS]),"wrapT"in i&&(x.addressModeV=_[i.wrapT]))}return x.string=JSON.stringify(x),x},parseMaterialInfo_GLTF=(i,m,g)=>{const{redGPUContext:x}=i;let _,b=!1,y="OPAQUE",T=.5;if("material"in g){_=new PBRMaterial(x);const w=g.material,P=m.materials[w];b=!!P.doubleSided,y=P.alphaMode??y,T=P.alphaCutoff??T;const{pbrMetallicRoughness:H,normalTexture:z,emissiveTexture:$,occlusionTexture:q}=P;if(_.emissiveFactor=P.emissiveFactor||[0,0,0],H){const{metallicRoughnessTexture:m,baseColorTexture:g}=H;let x,b;_.baseColorFactor=H.baseColorFactor||[1,1,1,1],"metallicFactor"in H&&(x=H.metallicFactor),"roughnessFactor"in H&&(b=H.roughnessFactor),_.metallicFactor=null!=x?x:1,_.roughnessFactor=null!=b?b:1,g&&parseMaterialTexture(i,_,g,"baseColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),m&&parseMaterialTexture(i,_,m,"metallicRoughnessTexture")}if(z){parseMaterialTexture(i,_,z,"normalTexture");const{scale:m}=z;_.normalScale=null!=m?m:1}if($&&parseMaterialTexture(i,_,$,"emissiveTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),q&&(parseMaterialTexture(i,_,q,"occlusionTexture"),_.occlusionStrength=P.occlusionTexture.strength||1),"extensions"in P){const{extensions:m}=P,{KHR_materials_clearcoat:g,KHR_materials_emissive_strength:x,KHR_materials_transmission:b,KHR_materials_diffuse_transmission:T,KHR_materials_volume:w,KHR_materials_unlit:H,KHR_materials_ior:z,KHR_materials_sheen:$,KHR_materials_specular:q,KHR_materials_dispersion:W,KHR_materials_anisotropy:ye,KHR_materials_iridescence:Ge}=m;if(Ge&&((i,m,g)=>{i.useKHR_materials_iridescence=!0,i.KHR_iridescenceFactor=m.iridescenceFactor||0,i.KHR_iridescenceIor=m.iridescenceIor||1.3,i.KHR_iridescenceThicknessMinimum=m.iridescenceThicknessMinimum||100,i.KHR_iridescenceThicknessMaximum=m.iridescenceThicknessMaximum||400,i.transparent=!0;{const{iridescenceTexture:x,iridescenceThicknessTexture:_}=m;x&&parseMaterialTexture(g,i,x,"KHR_iridescenceTexture"),_&&parseMaterialTexture(g,i,_,"KHR_iridescenceThicknessTexture")}})(_,Ge,i),ye&&((i,m,g)=>{i.useKHR_materials_anisotropy=!0,i.KHR_anisotropyStrength=m.anisotropyStrength||0,i.KHR_anisotropyRotation=m.anisotropyRotation||0;const{anisotropyTexture:x}=m;x&&parseMaterialTexture(g,i,x,"KHR_anisotropyTexture")})(_,ye,i),g&&((i,m,g)=>{i.KHR_clearcoatFactor=m.clearcoatFactor||0,i.KHR_clearcoatRoughnessFactor=m.clearcoatRoughnessFactor||0,i.useKHR_materials_clearcoat=!0;const{clearcoatTexture:x,clearcoatNormalTexture:_,clearcoatRoughnessTexture:b}=m;x&&parseMaterialTexture(g,i,x,"KHR_clearcoatTexture"),_&&parseMaterialTexture(g,i,_,"KHR_clearcoatNormalTexture"),b&&parseMaterialTexture(g,i,b,"KHR_clearcoatRoughnessTexture")})(_,g,i),x){const{emissiveStrength:i}=x;_.emissiveStrength=null!=i?i:1}if(b&&(((i,m,g)=>{i.useKHR_materials_transmission=!0,i.KHR_transmissionFactor=m.transmissionFactor||0,i.use2PathRender=!0;{const x=m.transmissionTexture;x&&parseMaterialTexture(g,i,x,"KHR_transmissionTexture")}})(_,b,i),_.transparent="BLEND"===y),T&&((i,m,g)=>{i.useKHR_materials_diffuse_transmission=!0,i.KHR_diffuseTransmissionFactor=m.diffuseTransmissionFactor||0,i.KHR_diffuseTransmissionColorFactor=m.diffuseTransmissionColorFactor||[1,1,1],i.transparent=!0;{const x=m.diffuseTransmissionTexture;x&&parseMaterialTexture(g,i,x,"KHR_diffuseTransmissionTexture");const _=m.diffuseTransmissionColorTexture;_&&parseMaterialTexture(g,i,_,"KHR_diffuseTransmissionColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`)}})(_,T,i),w&&(((i,m,g)=>{i.useKHR_materials_volume=!0,i.KHR_thicknessFactor=m.thicknessFactor||1,i.KHR_attenuationDistance=m.attenuationDistance||1,i.KHR_attenuationColor=m.attenuationColor||[1,1,1],i.use2PathRender=!0,i.transparent=!0;{const x=m.thicknessTexture;x&&parseMaterialTexture(g,i,x,"KHR_thicknessTexture")}})(_,w,i),y="BLEND"),H&&(_.useKHR_materials_unlit=!0),z){const{ior:i}=z;_.KHR_materials_ior=null!=i?i:1.5,_.use2PathRender=!0,_.transparent=!0}if(W){const{dispersion:i}=W;_.KHR_dispersion=i||0,_.use2PathRender=!0,_.transparent=!0}$&&((i,m,g)=>{i.KHR_sheenColorFactor=m.sheenColorFactor||[0,0,0],i.KHR_sheenRoughnessFactor=m.sheenRoughnessFactor||0,i.useKHR_materials_sheen=!0;const{sheenColorTexture:x,sheenRoughnessTexture:_}=m;x&&parseMaterialTexture(g,i,x,"KHR_sheenColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),_&&parseMaterialTexture(g,i,_,"KHR_sheenRoughnessTexture")})(_,$,i),q&&((i,m,g)=>{i.useKHR_materials_specular=!0,i.KHR_specularFactor=m.specularFactor??1,i.KHR_specularColorFactor=m.specularColorFactor||[1,1,1];const{specularTexture:x,specularColorTexture:_}=m;x&&parseMaterialTexture(g,i,x,"KHR_specularTexture"),_&&parseMaterialTexture(g,i,_,"KHR_specularColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`)})(_,q,i)}}else _=new PBRMaterial(x);Object.hasOwn(g.attributes,"COLOR_0")&&(_.useVertexColor=!0),_.doubleSided=b,_.cutOff=T;const{blendColorState:w,blendAlphaState:P}=_;switch(y){case"BLEND":_.alphaBlend=2,w.srcFactor=fr.SRC_ALPHA,w.dstFactor=fr.ONE_MINUS_SRC_ALPHA,P.srcFactor=fr.SRC_ALPHA,P.dstFactor=fr.ONE_MINUS_SRC_ALPHA,_.transparent=!0;break;case"MASK":_.alphaBlend=1,_.useCutOff=!0,w.srcFactor=fr.ONE,w.dstFactor=fr.ZERO,P.srcFactor=fr.ONE,P.dstFactor=fr.ZERO;break;default:w.srcFactor=fr.ONE,w.dstFactor=fr.ZERO,P.srcFactor=fr.ONE,P.dstFactor=fr.ZERO,_.alphaBlend=0}return _},parseIndicesInfo_GLTF=(i,m)=>{const{accessor:g,startIndex:x,getMethod:_,bufferURIDataView:b,componentType_BYTES_PER_ELEMENT:y}=i,{type:T,count:w}=g;let P,H=x;if("SCALAR"===T)for(P=H+w;H<P;H++)m.push(b[_](H*y,!0))},parseInterleaveData_GLTF=(i,m,g,x,_,b,y,T,w,P)=>{let H,z,$,q,W,ye,Ge,Ke,Xe,Ye=0,je=m.length/3,Ze=0;const Je=m.length,Qe=x.length,et=b.length,at=y.length,ht=g.length,ft=T.length,gt=w.length,xt=P.length;for(H=$=ye=0,z=q=Ge=1,W=Ke=2,Xe=3;Ye<je;Ye++)Je&&(i[Ze++]=m[$],i[Ze++]=m[q],i[Ze++]=m[W]),Qe?(i[Ze++]=x[$],i[Ze++]=x[q],i[Ze++]=x[W]):(i[Ze++]=0,i[Ze++]=0,i[Ze++]=0),_.length||_.push(0,0),_.length&&(i[Ze++]=_[H],i[Ze++]=_[z]),at?(i[Ze++]=y[H],i[Ze++]=y[z]):et?(i[Ze++]=b[H],i[Ze++]=b[z]):_.length&&(i[Ze++]=_[H],i[Ze++]=_[z]),ht?(i[Ze++]=g[ye],i[Ze++]=g[Ge],i[Ze++]=g[Ke],i[Ze++]=g[Xe]):(i[Ze++]=0,i[Ze++]=0,i[Ze++]=0,i[Ze++]=0),ft?(i[Ze++]=T[ye],i[Ze++]=T[Ge],i[Ze++]=T[Ke],i[Ze++]=T[Xe]):(i[Ze++]=0,i[Ze++]=0,i[Ze++]=0,i[Ze++]=0),gt?(i[Ze++]=w[ye],i[Ze++]=w[Ge],i[Ze++]=w[Ke],i[Ze++]=w[Xe]):(i[Ze++]=0,i[Ze++]=0,i[Ze++]=0,i[Ze++]=0),xt?(i[Ze++]=P[ye],i[Ze++]=P[Ge],i[Ze++]=P[Ke],i[Ze++]=P[Xe]):(i[Ze++]=0,i[Ze++]=0,i[Ze++]=0,i[Ze++]=0),H+=2,z+=2,$+=3,q+=3,W+=3,ye+=4,Ge+=4,Ke+=4,Xe+=4},Is=180/Math.PI,setMeshRotation=(i,m)=>{m.setRotation(-i[0]*Is,-i[1]*Is,-i[2]*Is)},parseTRSAndMATRIX_GLTF=(i,m)=>{const{matrix:g,rotation:x,translation:_,scale:b}=m;let y,T;if("matrix"in m){y=create$5(),T=create$4(),mat4ToEuler(g,T),setMeshRotation(T,i),i.setPosition(g[12],g[13],g[14]);const m=fromValues$4(1,1,1);getScaling(m,g),i.setScale(m[0],m[1],m[2])}"rotation"in m&&(y=create$5(),T=create$4(),quaternionToRotationMat4(x,y),mat4ToEuler(y,T),setMeshRotation(T,i)),"translation"in m&&i.setPosition(_[0],_[1],_[2]),"scale"in m&&(i.setScale(b[0],b[1],b[2]),(b[0]<0||b[1]<0||b[2]<0)&&(i.primitiveState.frontFace=zr.CW))},parseChildrenAndSkin=(i,m,g,x,_)=>{if("children"in x){const _=x.children,b=_.length;for(let x=0;x<b;x++)parseNode_GLTF(i,m,_[x],g)}"skin"in x&&((i,m,g,x)=>{const _=new ParsedSkinInfo_GLTF,b=[],{nodes:y}=m,{joints:T,skeleton:w}=g;{let m=0;const g=T.length;for(;m<g;m++){const g=T[m];parseJoint_GLTF(i,_,y,g)}}w&&(_.skeletonMesh=y[w].Mesh);const P=g.inverseBindMatrices,H=new AccessorInfo_GLTF(i,m,P),{startIndex:z,accessor:$,componentType_BYTES_PER_ELEMENT:q,bufferViewByteStride:W,bufferURIDataView:ye,getMethod:Ge}=H,{type:Ke,count:Xe}=$;let Ye=0;const je=W/q;let Ze,Je=z;if("MAT4"===Ke)if(W)for(Ze=Je+Xe*(W/q);Je<Ze;Je++)Ye%je<16&&b.push(ye[Ge](Je*q,!0)),Ye++;else for(Ze=Je+16*Xe;Je<Ze;Je++)b.push(ye[Ge](Je*q,!0)),Ye++;_.inverseBindMatrices=[];for(let i=0;i<T.length;i++)_.inverseBindMatrices.push(new Float32Array([b[16*i],b[16*i+1],b[16*i+2],b[16*i+3],b[16*i+4],b[16*i+5],b[16*i+6],b[16*i+7],b[16*i+8],b[16*i+9],b[16*i+10],b[16*i+11],b[16*i+12],b[16*i+13],b[16*i+14],b[16*i+15]]));x.animationInfo.skinInfo=_,x.material.useSkin=!!x.animationInfo.skinInfo})(i,m,_[x.skin],g)},parseNode_GLTF=(i,m,g,x)=>{const{redGPUContext:_,parsingResult:b}=i,{nodes:y,meshes:T,skins:w}=m,{groups:P,cameras:H}=b,z=y[g];if("mesh"in z){const g=function(i,m,g){const{redGPUContext:x}=i;let _;g.name&&(_=g.name);const b=[],{primitives:y}=g;let T=0;const w=y.length;for(;T<w;T++){const w=y[T];let P,H,z,$=[],q=[],W=[],ye=[],Ge=[],Ke=[],Xe=[],Ye=[],je=[],Ze=[];const{attributes:Je}=w;if(Je)for(const g in Je){const x=Je[g],_=new AccessorInfo_GLTF(i,m,x);parseAttributeInfo_GLTF(g,_,q,ye,Ge,Ke,Xe,Ye,je,W,Ze),_.accessor.sparse&&parseSparse_GLTF(i,g,_.accessor,m,q)}if("indices"in w){let g=w.indices,x=new AccessorInfo_GLTF(i,m,g);parseIndicesInfo_GLTF(x,$)}H=parseMaterialInfo_GLTF(i,m,w),H instanceof PBRMaterial&&i.parsingResult.materials.push(H);let Qe,et=!1;if("mode"in w)switch(w.mode){case 0:z=Mn.POINT_LIST;break;case 1:case 2:z=Mn.LINE_LIST;break;case 3:z=Mn.LINE_STRIP,et=!0;break;case 4:case 6:z=Mn.TRIANGLE_LIST;break;case 5:z=Mn.TRIANGLE_STRIP,et=!0}W.length&&(H.useVertexColor_0=!0),Ze.length&&(H.useVertexTangent=!0),Qe=Xe.length?Xe:calculateNormals(q,$);let at,ht=[];parseInterleaveData_GLTF(ht,q,W,Qe,ye,Ge,Ke,Ye,je,Ze);let ft={};if(q.length&&(ft.aVertexPosition=InterleaveType.float32x3),Qe.length&&(ft.aVertexNormal=InterleaveType.float32x3),ye.length&&(ft.aTexcoord=InterleaveType.float32x2),(Ke.length||Ge.length||ye.length)&&(ft.aTexcoord1=InterleaveType.float32x2),ft.aVertexColor_0=InterleaveType.float32x4,ft.aVertexWeight=InterleaveType.float32x4,ft.aVertexJoint=InterleaveType.float32x4,ft.aVertexTangent=InterleaveType.float32x4,at=new Geometry(x,new VertexBuffer(x,ht,new InterleavedStruct(ft)),!et&&$.length?new IndexBuffer(x,new Uint32Array($)):null),H||consoleAndThrowError("재질을 파싱할수없는경우 ",w),P=new Mesh(x,at,H),_&&(P.name=_,i.parsingOption))for(let m in i.parsingOption)_.toLowerCase().indexOf(m)>-1&&i.parsingOption[m](P);P.primitiveState.topology=z||Mn.TRIANGLE_LIST,P.material.doubleSided&&(P.primitiveState.cullMode=Hr.NONE),P.material.use2PathRender&&(P.primitiveState.cullMode=Hr.NONE,P.depthStencilState.depthCompare=Fr.LESS),2===P.material.alphaBlend&&(P.depthStencilState.depthCompare=Fr.LESS);{let x=new MorphInfo_GLTF(i,m,w,g.weights),_=0,b=x.morphInfoDataList;const y=b.length;for(;_<y;){const i=b[_],m=i.normals.length?i.normals:calculateNormals(i.vertices,$),g=[];parseInterleaveData_GLTF(g,i.vertices,i.verticesColor_0,m,i.uvs,i.uvs1,i.uvs2,i.jointWeights,i.joints,i.tangents),i.interleaveData=g,_++}P.animationInfo.morphInfo=x,P.animationInfo.morphInfo.origin=new Float32Array(ht)}let gt=P.geometry.vertexBuffer.data;P.gpuRenderInfo||P.initGPURenderInfos();let xt=0;for(const i in ft)xt+=ft[i].numElements;{const i=P.animationInfo.morphInfo.morphInfoDataList;let m=0;const g=i.length,x=gt.length;for(;m<g;){const g=i[m].vertices;let _=0,b=x/xt,y=null==P.animationInfo.morphInfo.weights[m]?.5:P.animationInfo.morphInfo.weights[m];for(;_<b;)gt[_*xt]+=g[3*_]*y,gt[_*xt+1]+=g[3*_+1]*y,gt[_*xt+2]+=g[3*_+2]*y,_++;m++}}P.geometry.vertexBuffer.updateAllData(gt),P.animationInfo.morphInfo.origin=new Float32Array(gt),w.Mesh=P,b.push(P)}return b}(i,m,T[z.mesh]),_=g.length;for(let b=0;b<_;b++){let _=g[b];x.addChild(z.Mesh=_),parseTRSAndMATRIX_GLTF(_,z),parseChildrenAndSkin(i,m,_,z,w)}}else{let b;P[g]?(b=P[g],z.Mesh=b):(b=new Mesh(_),x.addChild(b),z.Mesh=b,b.name=z.name,P[g]=b),parseTRSAndMATRIX_GLTF(b,z),parseChildrenAndSkin(i,m,b,z,w)}},parseGLTF=(i,m,g)=>{(i=>{const m=i?.asset;m||consoleAndThrowError("GLTFLoader - asset must be defined"),m.version||consoleAndThrowError("GLTFLoader - asset version must be defined");const g=parseFloat(m.version);isNaN(g)&&consoleAndThrowError("GLTFLoader - asset version must be a numerical value"),g<2&&consoleAndThrowError("GLTFLoader - asset version must be 2.0 or higher")})(m),((i,m,g)=>{const{parsingResult:x}=i,{uris:_}=x,b="buffers",y=_[b],T=m.buffers,w=T.length;let P=0;T.forEach((m,x)=>{var _;function checkLoadingStatus(){P===w&&g&&g()}m._redURIkey=b,m._redURIIndex=x,m.uri instanceof ArrayBuffer?(_=new DataView(m.uri),P++,y[x]=_,checkLoadingStatus()):function(m){const g=m.startsWith("data:")?m:i.filePath+m;arrayBufferLoader(g,function(i){P++,y[x]=new DataView(i),checkLoadingStatus()})}(m.uri)})})(i,m,()=>{((i,m,g)=>{const{scenes:x}=m;x[0].nodes.forEach(g=>{parseNode_GLTF(i,m,g,i.resultMesh)}),g?.()})(i,m,()=>{((i,m)=>{const{cameras:g}=m;g&&g.forEach(function(m){let g=new PerspectiveCamera;"orthographic"==m.type||(g.fieldOfView=180*m.perspective.yfieldOfView/Math.PI,g.farClipping=m.perspective.zfar,g.nearClipping=m.perspective.znear),i.parsingResult.cameras.push(g)})})(i,m),new TextureLoader(i.redGPUContext,Object.values(i.parsingResult.textureRawList),x=>{x.textures.forEach(i=>{const{targetTextureKey:m,targetSamplerKey:g,samplerList:x}=i.srcInfo;i.srcInfo.materialList.forEach((_,b)=>{_[m]=i.texture,x[b]&&(_[g]=x[b])})}),parseAnimations(i,m).then(i=>{g&&g()})})})})},parseFileGLB=async(i,m)=>{const g=i.filePath+i.fileName;await(async(i,m,g=()=>{})=>{try{const g=await fetch(i);m(await g.arrayBuffer())}catch(i){g(i)}})(g,async g=>{const{content:x,binaryChunk:_}=parseBuffer(g);if(null===x)throw new Error("JSON content not found");const b=JSON.parse(x);processImagesIfExist(b,_),b.buffers[0].uri=_,i.gltfData=b,parseGLTF(i,b,m)},i=>{})},parseBuffer=i=>{let m=null,g=null;const x=new DataView(i,12),_=x.byteLength;for(let b=0;b<_;){const _=x.getUint32(b,!0);b+=4;const y=x.getUint32(b,!0);switch(b+=4,y){case 1313821514:const x=new Uint8Array(i,12+b,_);m=convertUint8ArrayToString(x);break;case 5130562:const y=12+b;g=i.slice(y,y+_)}b+=_}return{content:m,binaryChunk:g}},processImagesIfExist=(i,m)=>{const{images:g,bufferViews:x}=i,_=["image/png","image/jpeg","image/gif","image/webp"];if(g)for(let i=0;i<g.length;i++){const b=g[i],{mimeType:y,bufferView:T}=b;if(_.includes(y)){const i=x[T].byteOffset||0,g=m.slice(i,i+x[T].byteLength),_=new Blob([new Uint8Array(g)],{type:y});b.uri=URL.createObjectURL(_)}}},convertUint8ArrayToString=i=>{let m="";for(let g of i)m+=String.fromCharCode(g);return m};class GLTFLoader{parsingResult;resultMesh;parsingOption;activeAnimations=[];#b;#Df;#fh;#dh;#Uf;#Af;#ae;#se;#kf;constructor(i,m,g,x){validateRedGPUContext(i),this.#b=i,this.#dh=m,this.#Df=getFilePath(m),this.#fh=getFileName(m),this.#Uf=getFileExtension(m),this.#ae=g,this.#se=x,this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.resultMesh=new Mesh(this.#b),this.resultMesh.gltfLoaderInfo=this,this.resultMesh.animationInfo.animationsList=this.parsingResult.animations,this.#Of()}get redGPUContext(){return this.#b}get filePath(){return this.#Df}get gltfData(){return this.#Af}set gltfData(i){this.#Af=i}get fileName(){return this.#fh}get url(){return this.#dh}stopAnimation(){const{activeAnimations:i}=this;let m=i.indexOf(this.#kf);m>-1&&i.splice(m,1)}playAnimation(i){const{activeAnimations:m}=this;m.push(this.#kf=new PlayAnimationInfo(performance.now(),i))}async#Of(){try{"glb"===this.#Uf?await parseFileGLB(this,()=>this.#ae(this)):"gltf"===this.#Uf?await(async(i,m)=>{const g=await fetch(i.url);i.gltfData=await g.json(),parseGLTF(i,i.gltfData,m)})(this,()=>this.#ae(this)):consoleAndThrowError("Unknown file extension:"+this.#Uf)}catch(i){this.#se?.(i)}}}Object.freeze(GLTFLoader);class PlayAnimationInfo{startTime;targetAniTrackList;constructor(i,m){this.startTime=i,this.targetAniTrackList=m}}export{di as Camera,ColorRGB,ColorRGBA,Ba as Display,FinalRender,GLTFLoader,br as GPU_ADDRESS_MODE,fr as GPU_BLEND_FACTOR,dr as GPU_BLEND_OPERATION,Fr as GPU_COMPARE_FUNCTION,Hr as GPU_CULL_MODE,yr as GPU_FILTER_MODE,zr as GPU_FRONT_FACE,$r as GPU_INDEX_FORMAT,Cr as GPU_LOAD_OP,Tr as GPU_MIPMAP_FILTER_MODE,Mn as GPU_PRIMITIVE_TOPOLOGY,Pr as GPU_STORE_OP,Geometry,La as Light,bi as Material,OBJLoader,OBJMTLLoader,Rs as Picking,Ms as PostEffect,Da as Primitive,RedGPUContext,RedGPUContextDetector,RedGPUContextSizeManager,RedGPUContextViewContainer,$a as RenderState,Renderer,za as Resource,os as RuntimeChecker,lr as SystemCode,$i as Util,xn as glMatrix,init};