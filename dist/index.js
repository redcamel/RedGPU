var i=1e-6,g="undefined"!=typeof Float32Array?Float32Array:Array;function multiply$1(i,g,x){var _=g[0],v=g[1],b=g[2],y=g[3],S=g[4],w=g[5],L=g[6],k=g[7],H=g[8],z=x[0],W=x[1],q=x[2],be=x[3],Ke=x[4],Xe=x[5],je=x[6],Ye=x[7],Ze=x[8];return i[0]=z*_+W*y+q*L,i[1]=z*v+W*S+q*k,i[2]=z*b+W*w+q*H,i[3]=be*_+Ke*y+Xe*L,i[4]=be*v+Ke*S+Xe*k,i[5]=be*b+Ke*w+Xe*H,i[6]=je*_+Ye*y+Ze*L,i[7]=je*v+Ye*S+Ze*k,i[8]=je*b+Ye*w+Ze*H,i}function subtract$2(i,g,x){return i[0]=g[0]-x[0],i[1]=g[1]-x[1],i[2]=g[2]-x[2],i[3]=g[3]-x[3],i[4]=g[4]-x[4],i[5]=g[5]-x[5],i[6]=g[6]-x[6],i[7]=g[7]-x[7],i[8]=g[8]-x[8],i}Math.hypot||(Math.hypot=function(){for(var i=0,g=arguments.length;g--;)i+=arguments[g]*arguments[g];return Math.sqrt(i)});var x=multiply$1,_=subtract$2,v=Object.freeze({__proto__:null,add:function(i,g,x){return i[0]=g[0]+x[0],i[1]=g[1]+x[1],i[2]=g[2]+x[2],i[3]=g[3]+x[3],i[4]=g[4]+x[4],i[5]=g[5]+x[5],i[6]=g[6]+x[6],i[7]=g[7]+x[7],i[8]=g[8]+x[8],i},adjoint:function(i,g){var x=g[0],_=g[1],v=g[2],b=g[3],y=g[4],S=g[5],w=g[6],L=g[7],k=g[8];return i[0]=y*k-S*L,i[1]=v*L-_*k,i[2]=_*S-v*y,i[3]=S*w-b*k,i[4]=x*k-v*w,i[5]=v*b-x*S,i[6]=b*L-y*w,i[7]=_*w-x*L,i[8]=x*y-_*b,i},clone:function(i){var x=new g(9);return x[0]=i[0],x[1]=i[1],x[2]=i[2],x[3]=i[3],x[4]=i[4],x[5]=i[5],x[6]=i[6],x[7]=i[7],x[8]=i[8],x},copy:function(i,g){return i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8],i},create:function(){var i=new g(9);return g!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[5]=0,i[6]=0,i[7]=0),i[0]=1,i[4]=1,i[8]=1,i},determinant:function(i){var g=i[0],x=i[1],_=i[2],v=i[3],b=i[4],y=i[5],S=i[6],w=i[7],L=i[8];return g*(L*b-y*w)+x*(-L*v+y*S)+_*(w*v-b*S)},equals:function(g,x){var _=g[0],v=g[1],b=g[2],y=g[3],S=g[4],w=g[5],L=g[6],k=g[7],H=g[8],z=x[0],W=x[1],q=x[2],be=x[3],Ke=x[4],Xe=x[5],je=x[6],Ye=x[7],Ze=x[8];return Math.abs(_-z)<=i*Math.max(1,Math.abs(_),Math.abs(z))&&Math.abs(v-W)<=i*Math.max(1,Math.abs(v),Math.abs(W))&&Math.abs(b-q)<=i*Math.max(1,Math.abs(b),Math.abs(q))&&Math.abs(y-be)<=i*Math.max(1,Math.abs(y),Math.abs(be))&&Math.abs(S-Ke)<=i*Math.max(1,Math.abs(S),Math.abs(Ke))&&Math.abs(w-Xe)<=i*Math.max(1,Math.abs(w),Math.abs(Xe))&&Math.abs(L-je)<=i*Math.max(1,Math.abs(L),Math.abs(je))&&Math.abs(k-Ye)<=i*Math.max(1,Math.abs(k),Math.abs(Ye))&&Math.abs(H-Ze)<=i*Math.max(1,Math.abs(H),Math.abs(Ze))},exactEquals:function(i,g){return i[0]===g[0]&&i[1]===g[1]&&i[2]===g[2]&&i[3]===g[3]&&i[4]===g[4]&&i[5]===g[5]&&i[6]===g[6]&&i[7]===g[7]&&i[8]===g[8]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8])},fromMat2d:function(i,g){return i[0]=g[0],i[1]=g[1],i[2]=0,i[3]=g[2],i[4]=g[3],i[5]=0,i[6]=g[4],i[7]=g[5],i[8]=1,i},fromMat4:function(i,g){return i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[4],i[4]=g[5],i[5]=g[6],i[6]=g[8],i[7]=g[9],i[8]=g[10],i},fromQuat:function(i,g){var x=g[0],_=g[1],v=g[2],b=g[3],y=x+x,S=_+_,w=v+v,L=x*y,k=_*y,H=_*S,z=v*y,W=v*S,q=v*w,be=b*y,Ke=b*S,Xe=b*w;return i[0]=1-H-q,i[3]=k-Xe,i[6]=z+Ke,i[1]=k+Xe,i[4]=1-L-q,i[7]=W-be,i[2]=z-Ke,i[5]=W+be,i[8]=1-L-H,i},fromRotation:function(i,g){var x=Math.sin(g),_=Math.cos(g);return i[0]=_,i[1]=x,i[2]=0,i[3]=-x,i[4]=_,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromScaling:function(i,g){return i[0]=g[0],i[1]=0,i[2]=0,i[3]=0,i[4]=g[1],i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromTranslation:function(i,g){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=g[0],i[7]=g[1],i[8]=1,i},fromValues:function(i,x,_,v,b,y,S,w,L){var k=new g(9);return k[0]=i,k[1]=x,k[2]=_,k[3]=v,k[4]=b,k[5]=y,k[6]=S,k[7]=w,k[8]=L,k},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},invert:function(i,g){var x=g[0],_=g[1],v=g[2],b=g[3],y=g[4],S=g[5],w=g[6],L=g[7],k=g[8],H=k*y-S*L,z=-k*b+S*w,W=L*b-y*w,q=x*H+_*z+v*W;return q?(q=1/q,i[0]=H*q,i[1]=(-k*_+v*L)*q,i[2]=(S*_-v*y)*q,i[3]=z*q,i[4]=(k*x-v*w)*q,i[5]=(-S*x+v*b)*q,i[6]=W*q,i[7]=(-L*x+_*w)*q,i[8]=(y*x-_*b)*q,i):null},mul:x,multiply:multiply$1,multiplyScalar:function(i,g,x){return i[0]=g[0]*x,i[1]=g[1]*x,i[2]=g[2]*x,i[3]=g[3]*x,i[4]=g[4]*x,i[5]=g[5]*x,i[6]=g[6]*x,i[7]=g[7]*x,i[8]=g[8]*x,i},multiplyScalarAndAdd:function(i,g,x,_){return i[0]=g[0]+x[0]*_,i[1]=g[1]+x[1]*_,i[2]=g[2]+x[2]*_,i[3]=g[3]+x[3]*_,i[4]=g[4]+x[4]*_,i[5]=g[5]+x[5]*_,i[6]=g[6]+x[6]*_,i[7]=g[7]+x[7]*_,i[8]=g[8]+x[8]*_,i},normalFromMat4:function(i,g){var x=g[0],_=g[1],v=g[2],b=g[3],y=g[4],S=g[5],w=g[6],L=g[7],k=g[8],H=g[9],z=g[10],W=g[11],q=g[12],be=g[13],Ke=g[14],Xe=g[15],je=x*S-_*y,Ye=x*w-v*y,Ze=x*L-b*y,Je=_*w-v*S,Qe=_*L-b*S,et=v*L-b*w,tt=k*be-H*q,it=k*Ke-z*q,ft=k*Xe-W*q,pt=H*Ke-z*be,xt=H*Xe-W*be,vt=z*Xe-W*Ke,bt=je*vt-Ye*xt+Ze*pt+Je*ft-Qe*it+et*tt;return bt?(bt=1/bt,i[0]=(S*vt-w*xt+L*pt)*bt,i[1]=(w*ft-y*vt-L*it)*bt,i[2]=(y*xt-S*ft+L*tt)*bt,i[3]=(v*xt-_*vt-b*pt)*bt,i[4]=(x*vt-v*ft+b*it)*bt,i[5]=(_*ft-x*xt-b*tt)*bt,i[6]=(be*et-Ke*Qe+Xe*Je)*bt,i[7]=(Ke*Ze-q*et-Xe*Ye)*bt,i[8]=(q*Qe-be*Ze+Xe*je)*bt,i):null},projection:function(i,g,x){return i[0]=2/g,i[1]=0,i[2]=0,i[3]=0,i[4]=-2/x,i[5]=0,i[6]=-1,i[7]=1,i[8]=1,i},rotate:function(i,g,x){var _=g[0],v=g[1],b=g[2],y=g[3],S=g[4],w=g[5],L=g[6],k=g[7],H=g[8],z=Math.sin(x),W=Math.cos(x);return i[0]=W*_+z*y,i[1]=W*v+z*S,i[2]=W*b+z*w,i[3]=W*y-z*_,i[4]=W*S-z*v,i[5]=W*w-z*b,i[6]=L,i[7]=k,i[8]=H,i},scale:function(i,g,x){var _=x[0],v=x[1];return i[0]=_*g[0],i[1]=_*g[1],i[2]=_*g[2],i[3]=v*g[3],i[4]=v*g[4],i[5]=v*g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8],i},set:function(i,g,x,_,v,b,y,S,w,L){return i[0]=g,i[1]=x,i[2]=_,i[3]=v,i[4]=b,i[5]=y,i[6]=S,i[7]=w,i[8]=L,i},str:function(i){return"mat3("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+")"},sub:_,subtract:subtract$2,translate:function(i,g,x){var _=g[0],v=g[1],b=g[2],y=g[3],S=g[4],w=g[5],L=g[6],k=g[7],H=g[8],z=x[0],W=x[1];return i[0]=_,i[1]=v,i[2]=b,i[3]=y,i[4]=S,i[5]=w,i[6]=z*_+W*y+L,i[7]=z*v+W*S+k,i[8]=z*b+W*w+H,i},transpose:function(i,g){if(i===g){var x=g[1],_=g[2],v=g[5];i[1]=g[3],i[2]=g[6],i[3]=x,i[5]=g[7],i[6]=_,i[7]=v}else i[0]=g[0],i[1]=g[3],i[2]=g[6],i[3]=g[1],i[4]=g[4],i[5]=g[7],i[6]=g[2],i[7]=g[5],i[8]=g[8];return i}});function create$2(){var i=new g(16);return g!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0),i[0]=1,i[5]=1,i[10]=1,i[15]=1,i}function clone(i){var x=new g(16);return x[0]=i[0],x[1]=i[1],x[2]=i[2],x[3]=i[3],x[4]=i[4],x[5]=i[5],x[6]=i[6],x[7]=i[7],x[8]=i[8],x[9]=i[9],x[10]=i[10],x[11]=i[11],x[12]=i[12],x[13]=i[13],x[14]=i[14],x[15]=i[15],x}function copy(i,g){return i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8],i[9]=g[9],i[10]=g[10],i[11]=g[11],i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15],i}function fromValues$1(i,x,_,v,b,y,S,w,L,k,H,z,W,q,be,Ke){var Xe=new g(16);return Xe[0]=i,Xe[1]=x,Xe[2]=_,Xe[3]=v,Xe[4]=b,Xe[5]=y,Xe[6]=S,Xe[7]=w,Xe[8]=L,Xe[9]=k,Xe[10]=H,Xe[11]=z,Xe[12]=W,Xe[13]=q,Xe[14]=be,Xe[15]=Ke,Xe}function identity(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i}function invert(i,g){var x=g[0],_=g[1],v=g[2],b=g[3],y=g[4],S=g[5],w=g[6],L=g[7],k=g[8],H=g[9],z=g[10],W=g[11],q=g[12],be=g[13],Ke=g[14],Xe=g[15],je=x*S-_*y,Ye=x*w-v*y,Ze=x*L-b*y,Je=_*w-v*S,Qe=_*L-b*S,et=v*L-b*w,tt=k*be-H*q,it=k*Ke-z*q,ft=k*Xe-W*q,pt=H*Ke-z*be,xt=H*Xe-W*be,vt=z*Xe-W*Ke,bt=je*vt-Ye*xt+Ze*pt+Je*ft-Qe*it+et*tt;return bt?(bt=1/bt,i[0]=(S*vt-w*xt+L*pt)*bt,i[1]=(v*xt-_*vt-b*pt)*bt,i[2]=(be*et-Ke*Qe+Xe*Je)*bt,i[3]=(z*Qe-H*et-W*Je)*bt,i[4]=(w*ft-y*vt-L*it)*bt,i[5]=(x*vt-v*ft+b*it)*bt,i[6]=(Ke*Ze-q*et-Xe*Ye)*bt,i[7]=(k*et-z*Ze+W*Ye)*bt,i[8]=(y*xt-S*ft+L*tt)*bt,i[9]=(_*ft-x*xt-b*tt)*bt,i[10]=(q*Qe-be*Ze+Xe*je)*bt,i[11]=(H*Ze-k*Qe-W*je)*bt,i[12]=(S*it-y*pt-w*tt)*bt,i[13]=(x*pt-_*it+v*tt)*bt,i[14]=(be*Ye-q*Je-Ke*je)*bt,i[15]=(k*Je-H*Ye+z*je)*bt,i):null}function multiply(i,g,x){var _=g[0],v=g[1],b=g[2],y=g[3],S=g[4],w=g[5],L=g[6],k=g[7],H=g[8],z=g[9],W=g[10],q=g[11],be=g[12],Ke=g[13],Xe=g[14],je=g[15],Ye=x[0],Ze=x[1],Je=x[2],Qe=x[3];return i[0]=Ye*_+Ze*S+Je*H+Qe*be,i[1]=Ye*v+Ze*w+Je*z+Qe*Ke,i[2]=Ye*b+Ze*L+Je*W+Qe*Xe,i[3]=Ye*y+Ze*k+Je*q+Qe*je,Ye=x[4],Ze=x[5],Je=x[6],Qe=x[7],i[4]=Ye*_+Ze*S+Je*H+Qe*be,i[5]=Ye*v+Ze*w+Je*z+Qe*Ke,i[6]=Ye*b+Ze*L+Je*W+Qe*Xe,i[7]=Ye*y+Ze*k+Je*q+Qe*je,Ye=x[8],Ze=x[9],Je=x[10],Qe=x[11],i[8]=Ye*_+Ze*S+Je*H+Qe*be,i[9]=Ye*v+Ze*w+Je*z+Qe*Ke,i[10]=Ye*b+Ze*L+Je*W+Qe*Xe,i[11]=Ye*y+Ze*k+Je*q+Qe*je,Ye=x[12],Ze=x[13],Je=x[14],Qe=x[15],i[12]=Ye*_+Ze*S+Je*H+Qe*be,i[13]=Ye*v+Ze*w+Je*z+Qe*Ke,i[14]=Ye*b+Ze*L+Je*W+Qe*Xe,i[15]=Ye*y+Ze*k+Je*q+Qe*je,i}function translate(i,g,x){var _,v,b,y,S,w,L,k,H,z,W,q,be=x[0],Ke=x[1],Xe=x[2];return g===i?(i[12]=g[0]*be+g[4]*Ke+g[8]*Xe+g[12],i[13]=g[1]*be+g[5]*Ke+g[9]*Xe+g[13],i[14]=g[2]*be+g[6]*Ke+g[10]*Xe+g[14],i[15]=g[3]*be+g[7]*Ke+g[11]*Xe+g[15]):(_=g[0],v=g[1],b=g[2],y=g[3],S=g[4],w=g[5],L=g[6],k=g[7],H=g[8],z=g[9],W=g[10],q=g[11],i[0]=_,i[1]=v,i[2]=b,i[3]=y,i[4]=S,i[5]=w,i[6]=L,i[7]=k,i[8]=H,i[9]=z,i[10]=W,i[11]=q,i[12]=_*be+S*Ke+H*Xe+g[12],i[13]=v*be+w*Ke+z*Xe+g[13],i[14]=b*be+L*Ke+W*Xe+g[14],i[15]=y*be+k*Ke+q*Xe+g[15]),i}function scale(i,g,x){var _=x[0],v=x[1],b=x[2];return i[0]=g[0]*_,i[1]=g[1]*_,i[2]=g[2]*_,i[3]=g[3]*_,i[4]=g[4]*v,i[5]=g[5]*v,i[6]=g[6]*v,i[7]=g[7]*v,i[8]=g[8]*b,i[9]=g[9]*b,i[10]=g[10]*b,i[11]=g[11]*b,i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15],i}function rotateX(i,g,x){var _=Math.sin(x),v=Math.cos(x),b=g[4],y=g[5],S=g[6],w=g[7],L=g[8],k=g[9],H=g[10],z=g[11];return g!==i&&(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15]),i[4]=b*v+L*_,i[5]=y*v+k*_,i[6]=S*v+H*_,i[7]=w*v+z*_,i[8]=L*v-b*_,i[9]=k*v-y*_,i[10]=H*v-S*_,i[11]=z*v-w*_,i}function rotateY(i,g,x){var _=Math.sin(x),v=Math.cos(x),b=g[0],y=g[1],S=g[2],w=g[3],L=g[8],k=g[9],H=g[10],z=g[11];return g!==i&&(i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15]),i[0]=b*v-L*_,i[1]=y*v-k*_,i[2]=S*v-H*_,i[3]=w*v-z*_,i[8]=b*_+L*v,i[9]=y*_+k*v,i[10]=S*_+H*v,i[11]=w*_+z*v,i}function rotateZ(i,g,x){var _=Math.sin(x),v=Math.cos(x),b=g[0],y=g[1],S=g[2],w=g[3],L=g[4],k=g[5],H=g[6],z=g[7];return g!==i&&(i[8]=g[8],i[9]=g[9],i[10]=g[10],i[11]=g[11],i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15]),i[0]=b*v+L*_,i[1]=y*v+k*_,i[2]=S*v+H*_,i[3]=w*v+z*_,i[4]=L*v-b*_,i[5]=k*v-y*_,i[6]=H*v-S*_,i[7]=z*v-w*_,i}function fromRotationTranslation(i,g,x){var _=g[0],v=g[1],b=g[2],y=g[3],S=_+_,w=v+v,L=b+b,k=_*S,H=_*w,z=_*L,W=v*w,q=v*L,be=b*L,Ke=y*S,Xe=y*w,je=y*L;return i[0]=1-(W+be),i[1]=H+je,i[2]=z-Xe,i[3]=0,i[4]=H-je,i[5]=1-(k+be),i[6]=q+Ke,i[7]=0,i[8]=z+Xe,i[9]=q-Ke,i[10]=1-(k+W),i[11]=0,i[12]=x[0],i[13]=x[1],i[14]=x[2],i[15]=1,i}function getScaling(i,g){var x=g[0],_=g[1],v=g[2],b=g[4],y=g[5],S=g[6],w=g[8],L=g[9],k=g[10];return i[0]=Math.hypot(x,_,v),i[1]=Math.hypot(b,y,S),i[2]=Math.hypot(w,L,k),i}function perspectiveNO(i,g,x,_,v){var b,y=1/Math.tan(g/2);return i[0]=y/x,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=y,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=v&&v!==1/0?(b=1/(_-v),i[10]=(v+_)*b,i[14]=2*v*_*b):(i[10]=-1,i[14]=-2*_),i}var b=perspectiveNO;function orthoNO(i,g,x,_,v,b,y){var S=1/(g-x),w=1/(_-v),L=1/(b-y);return i[0]=-2*S,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*w,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=2*L,i[11]=0,i[12]=(g+x)*S,i[13]=(v+_)*w,i[14]=(y+b)*L,i[15]=1,i}var y=orthoNO;function orthoZO(i,g,x,_,v,b,y){var S=1/(g-x),w=1/(_-v),L=1/(b-y);return i[0]=-2*S,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*w,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=L,i[11]=0,i[12]=(g+x)*S,i[13]=(v+_)*w,i[14]=b*L,i[15]=1,i}function lookAt(g,x,_,v){var b,y,S,w,L,k,H,z,W,q,be=x[0],Ke=x[1],Xe=x[2],je=v[0],Ye=v[1],Ze=v[2],Je=_[0],Qe=_[1],et=_[2];return Math.abs(be-Je)<i&&Math.abs(Ke-Qe)<i&&Math.abs(Xe-et)<i?identity(g):(H=be-Je,z=Ke-Qe,W=Xe-et,b=Ye*(W*=q=1/Math.hypot(H,z,W))-Ze*(z*=q),y=Ze*(H*=q)-je*W,S=je*z-Ye*H,(q=Math.hypot(b,y,S))?(b*=q=1/q,y*=q,S*=q):(b=0,y=0,S=0),w=z*S-W*y,L=W*b-H*S,k=H*y-z*b,(q=Math.hypot(w,L,k))?(w*=q=1/q,L*=q,k*=q):(w=0,L=0,k=0),g[0]=b,g[1]=w,g[2]=H,g[3]=0,g[4]=y,g[5]=L,g[6]=z,g[7]=0,g[8]=S,g[9]=k,g[10]=W,g[11]=0,g[12]=-(b*be+y*Ke+S*Xe),g[13]=-(w*be+L*Ke+k*Xe),g[14]=-(H*be+z*Ke+W*Xe),g[15]=1,g)}function targetTo(i,g,x,_){var v=g[0],b=g[1],y=g[2],S=_[0],w=_[1],L=_[2],k=v-x[0],H=b-x[1],z=y-x[2],W=k*k+H*H+z*z;W>0&&(k*=W=1/Math.sqrt(W),H*=W,z*=W);var q=w*z-L*H,be=L*k-S*z,Ke=S*H-w*k;return(W=q*q+be*be+Ke*Ke)>0&&(q*=W=1/Math.sqrt(W),be*=W,Ke*=W),i[0]=q,i[1]=be,i[2]=Ke,i[3]=0,i[4]=H*Ke-z*be,i[5]=z*q-k*Ke,i[6]=k*be-H*q,i[7]=0,i[8]=k,i[9]=H,i[10]=z,i[11]=0,i[12]=v,i[13]=b,i[14]=y,i[15]=1,i}function subtract$1(i,g,x){return i[0]=g[0]-x[0],i[1]=g[1]-x[1],i[2]=g[2]-x[2],i[3]=g[3]-x[3],i[4]=g[4]-x[4],i[5]=g[5]-x[5],i[6]=g[6]-x[6],i[7]=g[7]-x[7],i[8]=g[8]-x[8],i[9]=g[9]-x[9],i[10]=g[10]-x[10],i[11]=g[11]-x[11],i[12]=g[12]-x[12],i[13]=g[13]-x[13],i[14]=g[14]-x[14],i[15]=g[15]-x[15],i}var S=multiply,w=subtract$1,L=Object.freeze({__proto__:null,add:function(i,g,x){return i[0]=g[0]+x[0],i[1]=g[1]+x[1],i[2]=g[2]+x[2],i[3]=g[3]+x[3],i[4]=g[4]+x[4],i[5]=g[5]+x[5],i[6]=g[6]+x[6],i[7]=g[7]+x[7],i[8]=g[8]+x[8],i[9]=g[9]+x[9],i[10]=g[10]+x[10],i[11]=g[11]+x[11],i[12]=g[12]+x[12],i[13]=g[13]+x[13],i[14]=g[14]+x[14],i[15]=g[15]+x[15],i},adjoint:function(i,g){var x=g[0],_=g[1],v=g[2],b=g[3],y=g[4],S=g[5],w=g[6],L=g[7],k=g[8],H=g[9],z=g[10],W=g[11],q=g[12],be=g[13],Ke=g[14],Xe=g[15];return i[0]=S*(z*Xe-W*Ke)-H*(w*Xe-L*Ke)+be*(w*W-L*z),i[1]=-(_*(z*Xe-W*Ke)-H*(v*Xe-b*Ke)+be*(v*W-b*z)),i[2]=_*(w*Xe-L*Ke)-S*(v*Xe-b*Ke)+be*(v*L-b*w),i[3]=-(_*(w*W-L*z)-S*(v*W-b*z)+H*(v*L-b*w)),i[4]=-(y*(z*Xe-W*Ke)-k*(w*Xe-L*Ke)+q*(w*W-L*z)),i[5]=x*(z*Xe-W*Ke)-k*(v*Xe-b*Ke)+q*(v*W-b*z),i[6]=-(x*(w*Xe-L*Ke)-y*(v*Xe-b*Ke)+q*(v*L-b*w)),i[7]=x*(w*W-L*z)-y*(v*W-b*z)+k*(v*L-b*w),i[8]=y*(H*Xe-W*be)-k*(S*Xe-L*be)+q*(S*W-L*H),i[9]=-(x*(H*Xe-W*be)-k*(_*Xe-b*be)+q*(_*W-b*H)),i[10]=x*(S*Xe-L*be)-y*(_*Xe-b*be)+q*(_*L-b*S),i[11]=-(x*(S*W-L*H)-y*(_*W-b*H)+k*(_*L-b*S)),i[12]=-(y*(H*Ke-z*be)-k*(S*Ke-w*be)+q*(S*z-w*H)),i[13]=x*(H*Ke-z*be)-k*(_*Ke-v*be)+q*(_*z-v*H),i[14]=-(x*(S*Ke-w*be)-y*(_*Ke-v*be)+q*(_*w-v*S)),i[15]=x*(S*z-w*H)-y*(_*z-v*H)+k*(_*w-v*S),i},clone:clone,copy:copy,create:create$2,determinant:function(i){var g=i[0],x=i[1],_=i[2],v=i[3],b=i[4],y=i[5],S=i[6],w=i[7],L=i[8],k=i[9],H=i[10],z=i[11],W=i[12],q=i[13],be=i[14],Ke=i[15];return(g*y-x*b)*(H*Ke-z*be)-(g*S-_*b)*(k*Ke-z*q)+(g*w-v*b)*(k*be-H*q)+(x*S-_*y)*(L*Ke-z*W)-(x*w-v*y)*(L*be-H*W)+(_*w-v*S)*(L*q-k*W)},equals:function(g,x){var _=g[0],v=g[1],b=g[2],y=g[3],S=g[4],w=g[5],L=g[6],k=g[7],H=g[8],z=g[9],W=g[10],q=g[11],be=g[12],Ke=g[13],Xe=g[14],je=g[15],Ye=x[0],Ze=x[1],Je=x[2],Qe=x[3],et=x[4],tt=x[5],it=x[6],ft=x[7],pt=x[8],xt=x[9],vt=x[10],bt=x[11],yt=x[12],Tt=x[13],St=x[14],Mt=x[15];return Math.abs(_-Ye)<=i*Math.max(1,Math.abs(_),Math.abs(Ye))&&Math.abs(v-Ze)<=i*Math.max(1,Math.abs(v),Math.abs(Ze))&&Math.abs(b-Je)<=i*Math.max(1,Math.abs(b),Math.abs(Je))&&Math.abs(y-Qe)<=i*Math.max(1,Math.abs(y),Math.abs(Qe))&&Math.abs(S-et)<=i*Math.max(1,Math.abs(S),Math.abs(et))&&Math.abs(w-tt)<=i*Math.max(1,Math.abs(w),Math.abs(tt))&&Math.abs(L-it)<=i*Math.max(1,Math.abs(L),Math.abs(it))&&Math.abs(k-ft)<=i*Math.max(1,Math.abs(k),Math.abs(ft))&&Math.abs(H-pt)<=i*Math.max(1,Math.abs(H),Math.abs(pt))&&Math.abs(z-xt)<=i*Math.max(1,Math.abs(z),Math.abs(xt))&&Math.abs(W-vt)<=i*Math.max(1,Math.abs(W),Math.abs(vt))&&Math.abs(q-bt)<=i*Math.max(1,Math.abs(q),Math.abs(bt))&&Math.abs(be-yt)<=i*Math.max(1,Math.abs(be),Math.abs(yt))&&Math.abs(Ke-Tt)<=i*Math.max(1,Math.abs(Ke),Math.abs(Tt))&&Math.abs(Xe-St)<=i*Math.max(1,Math.abs(Xe),Math.abs(St))&&Math.abs(je-Mt)<=i*Math.max(1,Math.abs(je),Math.abs(Mt))},exactEquals:function(i,g){return i[0]===g[0]&&i[1]===g[1]&&i[2]===g[2]&&i[3]===g[3]&&i[4]===g[4]&&i[5]===g[5]&&i[6]===g[6]&&i[7]===g[7]&&i[8]===g[8]&&i[9]===g[9]&&i[10]===g[10]&&i[11]===g[11]&&i[12]===g[12]&&i[13]===g[13]&&i[14]===g[14]&&i[15]===g[15]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11],i[12],i[13],i[14],i[15])},fromQuat:function(i,g){var x=g[0],_=g[1],v=g[2],b=g[3],y=x+x,S=_+_,w=v+v,L=x*y,k=_*y,H=_*S,z=v*y,W=v*S,q=v*w,be=b*y,Ke=b*S,Xe=b*w;return i[0]=1-H-q,i[1]=k+Xe,i[2]=z-Ke,i[3]=0,i[4]=k-Xe,i[5]=1-L-q,i[6]=W+be,i[7]=0,i[8]=z+Ke,i[9]=W-be,i[10]=1-L-H,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromQuat2:function(i,x){var _=new g(3),v=-x[0],b=-x[1],y=-x[2],S=x[3],w=x[4],L=x[5],k=x[6],H=x[7],z=v*v+b*b+y*y+S*S;return z>0?(_[0]=2*(w*S+H*v+L*y-k*b)/z,_[1]=2*(L*S+H*b+k*v-w*y)/z,_[2]=2*(k*S+H*y+w*b-L*v)/z):(_[0]=2*(w*S+H*v+L*y-k*b),_[1]=2*(L*S+H*b+k*v-w*y),_[2]=2*(k*S+H*y+w*b-L*v)),fromRotationTranslation(i,x,_),i},fromRotation:function(g,x,_){var v,b,y,S=_[0],w=_[1],L=_[2],k=Math.hypot(S,w,L);return k<i?null:(S*=k=1/k,w*=k,L*=k,v=Math.sin(x),y=1-(b=Math.cos(x)),g[0]=S*S*y+b,g[1]=w*S*y+L*v,g[2]=L*S*y-w*v,g[3]=0,g[4]=S*w*y-L*v,g[5]=w*w*y+b,g[6]=L*w*y+S*v,g[7]=0,g[8]=S*L*y+w*v,g[9]=w*L*y-S*v,g[10]=L*L*y+b,g[11]=0,g[12]=0,g[13]=0,g[14]=0,g[15]=1,g)},fromRotationTranslation:fromRotationTranslation,fromRotationTranslationScale:function(i,g,x,_){var v=g[0],b=g[1],y=g[2],S=g[3],w=v+v,L=b+b,k=y+y,H=v*w,z=v*L,W=v*k,q=b*L,be=b*k,Ke=y*k,Xe=S*w,je=S*L,Ye=S*k,Ze=_[0],Je=_[1],Qe=_[2];return i[0]=(1-(q+Ke))*Ze,i[1]=(z+Ye)*Ze,i[2]=(W-je)*Ze,i[3]=0,i[4]=(z-Ye)*Je,i[5]=(1-(H+Ke))*Je,i[6]=(be+Xe)*Je,i[7]=0,i[8]=(W+je)*Qe,i[9]=(be-Xe)*Qe,i[10]=(1-(H+q))*Qe,i[11]=0,i[12]=x[0],i[13]=x[1],i[14]=x[2],i[15]=1,i},fromRotationTranslationScaleOrigin:function(i,g,x,_,v){var b=g[0],y=g[1],S=g[2],w=g[3],L=b+b,k=y+y,H=S+S,z=b*L,W=b*k,q=b*H,be=y*k,Ke=y*H,Xe=S*H,je=w*L,Ye=w*k,Ze=w*H,Je=_[0],Qe=_[1],et=_[2],tt=v[0],it=v[1],ft=v[2],pt=(1-(be+Xe))*Je,xt=(W+Ze)*Je,vt=(q-Ye)*Je,bt=(W-Ze)*Qe,yt=(1-(z+Xe))*Qe,Tt=(Ke+je)*Qe,St=(q+Ye)*et,Mt=(Ke-je)*et,wt=(1-(z+be))*et;return i[0]=pt,i[1]=xt,i[2]=vt,i[3]=0,i[4]=bt,i[5]=yt,i[6]=Tt,i[7]=0,i[8]=St,i[9]=Mt,i[10]=wt,i[11]=0,i[12]=x[0]+tt-(pt*tt+bt*it+St*ft),i[13]=x[1]+it-(xt*tt+yt*it+Mt*ft),i[14]=x[2]+ft-(vt*tt+Tt*it+wt*ft),i[15]=1,i},fromScaling:function(i,g){return i[0]=g[0],i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=g[1],i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=g[2],i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromTranslation:function(i,g){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i},fromValues:fromValues$1,fromXRotation:function(i,g){var x=Math.sin(g),_=Math.cos(g);return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=_,i[6]=x,i[7]=0,i[8]=0,i[9]=-x,i[10]=_,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromYRotation:function(i,g){var x=Math.sin(g),_=Math.cos(g);return i[0]=_,i[1]=0,i[2]=-x,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=x,i[9]=0,i[10]=_,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromZRotation:function(i,g){var x=Math.sin(g),_=Math.cos(g);return i[0]=_,i[1]=x,i[2]=0,i[3]=0,i[4]=-x,i[5]=_,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},frustum:function(i,g,x,_,v,b,y){var S=1/(x-g),w=1/(v-_),L=1/(b-y);return i[0]=2*b*S,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*b*w,i[6]=0,i[7]=0,i[8]=(x+g)*S,i[9]=(v+_)*w,i[10]=(y+b)*L,i[11]=-1,i[12]=0,i[13]=0,i[14]=y*b*2*L,i[15]=0,i},getRotation:function(i,x){var _=new g(3);getScaling(_,x);var v=1/_[0],b=1/_[1],y=1/_[2],S=x[0]*v,w=x[1]*b,L=x[2]*y,k=x[4]*v,H=x[5]*b,z=x[6]*y,W=x[8]*v,q=x[9]*b,be=x[10]*y,Ke=S+H+be,Xe=0;return Ke>0?(Xe=2*Math.sqrt(Ke+1),i[3]=.25*Xe,i[0]=(z-q)/Xe,i[1]=(W-L)/Xe,i[2]=(w-k)/Xe):S>H&&S>be?(Xe=2*Math.sqrt(1+S-H-be),i[3]=(z-q)/Xe,i[0]=.25*Xe,i[1]=(w+k)/Xe,i[2]=(W+L)/Xe):H>be?(Xe=2*Math.sqrt(1+H-S-be),i[3]=(W-L)/Xe,i[0]=(w+k)/Xe,i[1]=.25*Xe,i[2]=(z+q)/Xe):(Xe=2*Math.sqrt(1+be-S-H),i[3]=(w-k)/Xe,i[0]=(W+L)/Xe,i[1]=(z+q)/Xe,i[2]=.25*Xe),i},getScaling:getScaling,getTranslation:function(i,g){return i[0]=g[12],i[1]=g[13],i[2]=g[14],i},identity:identity,invert:invert,lookAt:lookAt,mul:S,multiply:multiply,multiplyScalar:function(i,g,x){return i[0]=g[0]*x,i[1]=g[1]*x,i[2]=g[2]*x,i[3]=g[3]*x,i[4]=g[4]*x,i[5]=g[5]*x,i[6]=g[6]*x,i[7]=g[7]*x,i[8]=g[8]*x,i[9]=g[9]*x,i[10]=g[10]*x,i[11]=g[11]*x,i[12]=g[12]*x,i[13]=g[13]*x,i[14]=g[14]*x,i[15]=g[15]*x,i},multiplyScalarAndAdd:function(i,g,x,_){return i[0]=g[0]+x[0]*_,i[1]=g[1]+x[1]*_,i[2]=g[2]+x[2]*_,i[3]=g[3]+x[3]*_,i[4]=g[4]+x[4]*_,i[5]=g[5]+x[5]*_,i[6]=g[6]+x[6]*_,i[7]=g[7]+x[7]*_,i[8]=g[8]+x[8]*_,i[9]=g[9]+x[9]*_,i[10]=g[10]+x[10]*_,i[11]=g[11]+x[11]*_,i[12]=g[12]+x[12]*_,i[13]=g[13]+x[13]*_,i[14]=g[14]+x[14]*_,i[15]=g[15]+x[15]*_,i},ortho:y,orthoNO:orthoNO,orthoZO:orthoZO,perspective:b,perspectiveFromFieldOfView:function(i,g,x,_){var v=Math.tan(g.upDegrees*Math.PI/180),b=Math.tan(g.downDegrees*Math.PI/180),y=Math.tan(g.leftDegrees*Math.PI/180),S=Math.tan(g.rightDegrees*Math.PI/180),w=2/(y+S),L=2/(v+b);return i[0]=w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=L,i[6]=0,i[7]=0,i[8]=-(y-S)*w*.5,i[9]=(v-b)*L*.5,i[10]=_/(x-_),i[11]=-1,i[12]=0,i[13]=0,i[14]=_*x/(x-_),i[15]=0,i},perspectiveNO:perspectiveNO,perspectiveZO:function(i,g,x,_,v){var b,y=1/Math.tan(g/2);return i[0]=y/x,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=y,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=v&&v!==1/0?(b=1/(_-v),i[10]=v*b,i[14]=v*_*b):(i[10]=-1,i[14]=-_),i},rotate:function(g,x,_,v){var b,y,S,w,L,k,H,z,W,q,be,Ke,Xe,je,Ye,Ze,Je,Qe,et,tt,it,ft,pt,xt,vt=v[0],bt=v[1],yt=v[2],Tt=Math.hypot(vt,bt,yt);return Tt<i?null:(vt*=Tt=1/Tt,bt*=Tt,yt*=Tt,b=Math.sin(_),S=1-(y=Math.cos(_)),w=x[0],L=x[1],k=x[2],H=x[3],z=x[4],W=x[5],q=x[6],be=x[7],Ke=x[8],Xe=x[9],je=x[10],Ye=x[11],Ze=vt*vt*S+y,Je=bt*vt*S+yt*b,Qe=yt*vt*S-bt*b,et=vt*bt*S-yt*b,tt=bt*bt*S+y,it=yt*bt*S+vt*b,ft=vt*yt*S+bt*b,pt=bt*yt*S-vt*b,xt=yt*yt*S+y,g[0]=w*Ze+z*Je+Ke*Qe,g[1]=L*Ze+W*Je+Xe*Qe,g[2]=k*Ze+q*Je+je*Qe,g[3]=H*Ze+be*Je+Ye*Qe,g[4]=w*et+z*tt+Ke*it,g[5]=L*et+W*tt+Xe*it,g[6]=k*et+q*tt+je*it,g[7]=H*et+be*tt+Ye*it,g[8]=w*ft+z*pt+Ke*xt,g[9]=L*ft+W*pt+Xe*xt,g[10]=k*ft+q*pt+je*xt,g[11]=H*ft+be*pt+Ye*xt,x!==g&&(g[12]=x[12],g[13]=x[13],g[14]=x[14],g[15]=x[15]),g)},rotateX:rotateX,rotateY:rotateY,rotateZ:rotateZ,scale:scale,set:function(i,g,x,_,v,b,y,S,w,L,k,H,z,W,q,be,Ke){return i[0]=g,i[1]=x,i[2]=_,i[3]=v,i[4]=b,i[5]=y,i[6]=S,i[7]=w,i[8]=L,i[9]=k,i[10]=H,i[11]=z,i[12]=W,i[13]=q,i[14]=be,i[15]=Ke,i},str:function(i){return"mat4("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+","+i[9]+","+i[10]+","+i[11]+","+i[12]+","+i[13]+","+i[14]+","+i[15]+")"},sub:w,subtract:subtract$1,targetTo:targetTo,translate:translate,transpose:function(i,g){if(i===g){var x=g[1],_=g[2],v=g[3],b=g[6],y=g[7],S=g[11];i[1]=g[4],i[2]=g[8],i[3]=g[12],i[4]=x,i[6]=g[9],i[7]=g[13],i[8]=_,i[9]=b,i[11]=g[14],i[12]=v,i[13]=y,i[14]=S}else i[0]=g[0],i[1]=g[4],i[2]=g[8],i[3]=g[12],i[4]=g[1],i[5]=g[5],i[6]=g[9],i[7]=g[13],i[8]=g[2],i[9]=g[6],i[10]=g[10],i[11]=g[14],i[12]=g[3],i[13]=g[7],i[14]=g[11],i[15]=g[15];return i}});function create$1(){var i=new g(3);return g!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i}function length(i){var g=i[0],x=i[1],_=i[2];return Math.hypot(g,x,_)}function fromValues(i,x,_){var v=new g(3);return v[0]=i,v[1]=x,v[2]=_,v}function set(i,g,x,_){return i[0]=g,i[1]=x,i[2]=_,i}function subtract(i,g,x){return i[0]=g[0]-x[0],i[1]=g[1]-x[1],i[2]=g[2]-x[2],i}function distance(i,g){var x=g[0]-i[0],_=g[1]-i[1],v=g[2]-i[2];return Math.hypot(x,_,v)}function normalize(i,g){var x=g[0],_=g[1],v=g[2],b=x*x+_*_+v*v;return b>0&&(b=1/Math.sqrt(b)),i[0]=g[0]*b,i[1]=g[1]*b,i[2]=g[2]*b,i}function dot(i,g){return i[0]*g[0]+i[1]*g[1]+i[2]*g[2]}function lerp$1(i,g,x,_){var v=g[0],b=g[1],y=g[2];return i[0]=v+_*(x[0]-v),i[1]=b+_*(x[1]-b),i[2]=y+_*(x[2]-y),i}function transformMat4(i,g,x){var _=g[0],v=g[1],b=g[2],y=x[3]*_+x[7]*v+x[11]*b+x[15];return y=y||1,i[0]=(x[0]*_+x[4]*v+x[8]*b+x[12])/y,i[1]=(x[1]*_+x[5]*v+x[9]*b+x[13])/y,i[2]=(x[2]*_+x[6]*v+x[10]*b+x[14])/y,i}create$1();var sqrDist=function(i,g){var x=g[0]-i[0],_=g[1]-i[1];return x*x+_*_};!function(){var i,x=(i=new g(2),g!=Float32Array&&(i[0]=0,i[1]=0),i)}();class InstanceIdGenerator{static idMaps=new Map;static getNextId(i){let g=this.idMaps.get(i)||0;return this.idMaps.set(i,g+1),g}}Object.freeze(InstanceIdGenerator);class Camera2D{#e;#t=create$2();#n=0;#r=0;#i=0;#a;constructor(){}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get modelMatrix(){return this.#t}get z(){return this.#i}get x(){return this.#n}set x(i){this.#n=i,this.#t[12]=i}get y(){return this.#r}set y(i){this.#r=i,this.#t[13]=i}get position(){return[this.#n,this.#r]}setPosition(i,g){Array.isArray(i)?[this.#n,this.#r]=i:(this.#n=i,this.#r=g),[this.#t[12],this.#t[13],this.#t[14]]=[this.#n,this.#r,0]}}const consoleAndThrowError=(...i)=>{const g=Array.prototype.slice.call(i).join(" ");throw new Error(g)},validateNumber=i=>"number"==typeof i||(consoleAndThrowError("Only numbers allowed."),!1);class PerspectiveCamera{#e;#s=new Float32Array([0,1,0]);#t=create$2();#n=0;#i=0;#r=0;#o=0;#u=0;#l=0;#c=60;#h=.01;#f=1e4;#a;constructor(){}get rotationX(){return this.#o}set rotationX(i){this.#o=i}get rotationY(){return this.#u}set rotationY(i){this.#u=i}get rotationZ(){return this.#l}set rotationZ(i){this.#l=i}get fieldOfView(){return this.#c}set fieldOfView(i){validateNumber(i),this.#c=i}get nearClipping(){return this.#h}set nearClipping(i){validateNumber(i),this.#h=i}get farClipping(){return this.#f}set farClipping(i){validateNumber(i),this.#f=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get modelMatrix(){return this.#t}get x(){return this.#n}set x(i){this.#n=i,this.#t[12]=i}get y(){return this.#r}set y(i){this.#r=i,this.#t[13]=i}get z(){return this.#i}set z(i){this.#i=i,this.#t[14]=i}get position(){return[this.#n,this.#r,this.#i]}setPosition(i,g,x){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=g,this.#i=x),[this.#t[12],this.#t[13],this.#t[14]]=[this.#n,this.#r,this.#i]}lookAt(i,g,x){lookAt(this.#t,[this.#n,this.#r,this.#i],[i,g,x],this.#s)}}class OrthographicCamera extends PerspectiveCamera{#e;#a;#d=1;#m=-1;#p=-1;#g=1;constructor(){super(),this.nearClipping=.01,this.farClipping=2e3}get top(){return this.#d}set top(i){validateNumber(i),this.#d=i}get bottom(){return this.#m}set bottom(i){validateNumber(i),this.#m=i}get left(){return this.#p}set left(i){validateNumber(i),this.#p=i}get right(){return this.#g}set right(i){validateNumber(i),this.#g=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}}const gltfAnimationLooper_rotation=(g,x,_,v,b,y,S,w,L,k,H)=>{let z,W,q,be,Ke,Xe,je,Ye,Ze,Je,Qe,et,tt,it,ft,pt,xt,vt,bt,yt,Tt,St,Mt,wt,Rt,Ct,Pt=!0;if("CUBICSPLINE"==g)y!=v-1?(Ct=12*y,Tt=_[Ct+4],St=_[Ct+5],Mt=_[Ct+6],wt=_[Ct+7],Rt=Tt*Tt+St*St+Mt*Mt+wt*wt,Rt>0&&(Rt=1/Math.sqrt(Rt)),Ze=Tt*Rt,Je=St*Rt,Qe=Mt*Rt,et=wt*Rt,Tt=_[Ct+8],St=_[Ct+9],Mt=_[Ct+10],wt=_[Ct+11],Rt=Tt*Tt+St*St+Mt*Mt+wt*wt,Rt>0&&(Rt=1/Math.sqrt(Rt)),tt=Tt*Rt,it=St*Rt,ft=Mt*Rt,pt=wt*Rt,Tt=_[Ct],St=_[Ct+1],Mt=_[Ct+2],wt=_[Ct+3],Rt=Tt*Tt+St*St+Mt*Mt+wt*wt,Rt>0&&(Rt=1/Math.sqrt(Rt)),Ke=Tt*Rt,Xe=St*Rt,je=Mt*Rt,Ye=wt*Rt,Ct=12*S,Tt=_[Ct+4],St=_[Ct+5],Mt=_[Ct+6],wt=_[Ct+7],Rt=Tt*Tt+St*St+Mt*Mt+wt*wt,Rt>0&&(Rt=1/Math.sqrt(Rt)),z=Tt*Rt,W=St*Rt,q=Mt*Rt,be=wt*Rt,xt=Ze,vt=tt*b,bt=z,yt=Ke*b,Tt=w*xt+L*vt+k*bt+H*yt,xt=Je,vt=it*b,bt=W,yt=Xe*b,St=w*xt+L*vt+k*bt+H*yt,xt=Qe,vt=ft*b,bt=q,yt=je*b,Mt=w*xt+L*vt+k*bt+H*yt,xt=et,vt=pt*b,bt=be,yt=Ye*b,wt=w*xt+L*vt+k*bt+H*yt):Pt=!1;else{let g,x,v,w,L;Ct=4*y,Tt=_[Ct],St=_[Ct+1],Mt=_[Ct+2],wt=_[Ct+3],Rt=Tt*Tt+St*St+Mt*Mt+wt*wt,Rt>0&&(Rt=1/Math.sqrt(Rt)),Ze=Tt*Rt,Je=St*Rt,Qe=Mt*Rt,et=wt*Rt,Ct=4*S,Tt=_[Ct],St=_[Ct+1],Mt=_[Ct+2],wt=_[Ct+3],Rt=Tt*Tt+St*St+Mt*Mt+wt*wt,Rt>0&&(Rt=1/Math.sqrt(Rt)),z=Tt*Rt,W=St*Rt,q=Mt*Rt,be=wt*Rt,x=Ze*z+Je*W+Qe*q+et*be,x<0&&(x=-x,z=-z,W=-W,q=-q,be=-be),1-x>i?(g=Math.acos(x),v=Math.sin(g),w=Math.sin((1-b)*g)/v,L=Math.sin(b*g)/v):(w=1-b,L=b),Tt=w*Ze+L*z,St=w*Je+L*W,Mt=w*Qe+L*q,wt=w*et+L*be}if(Pt){let i=[],g=[0,0,0],_=Tt+Tt,v=St+St,b=Mt+Mt,y=Tt*_,S=Tt*v,w=Tt*b,L=St*v,k=St*b,H=Mt*b,z=wt*_,W=wt*v,q=wt*b;i[0]=1-(L+H),i[4]=S-q,i[8]=w+W,i[1]=S+q,i[5]=1-(y+H),i[9]=k-z,i[2]=w-W,i[6]=k+z,i[10]=1-(y+L),i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1;let be=i[0],Ke=i[4],Xe=i[8],je=i[5],Ye=i[9],Ze=i[6],Je=i[10];g[1]=Math.asin(Math.max(-1,Math.min(1,Xe))),Math.abs(Xe)<.99999?(g[0]=Math.atan2(-Ye,Je),g[2]=Math.atan2(-Ke,be)):(g[0]=Math.atan2(Ze,je),g[2]=0),g[0]=-180*g[0]/Math.PI,g[1]=-180*g[1]/Math.PI,g[2]=-180*g[2]/Math.PI,x.rotationX=g[0],x.rotationY=g[1],x.rotationZ=g[2]}},gltfAnimationLooper_scale=(i,g,x,_,v,b,y,S,w,L,k)=>{let H,z,W,q,be,Ke,Xe,je,Ye,Ze,Je,Qe,et,tt,it,ft,pt;"CUBICSPLINE"==i?b!=_-1&&(pt=9*b,H=x[pt+3],z=x[pt+4],W=x[pt+5],Ze=x[pt+6],Je=x[pt+7],Qe=x[pt+8],pt=9*y,q=x[pt+0],be=x[pt+1],Ke=x[pt+2],Xe=x[pt+3],je=x[pt+4],Ye=x[pt+5],et=Xe,tt=Ze*v,it=H,ft=q*v,g.scaleX=S*et+w*tt+L*it+k*ft,et=je,tt=Je*v,it=z,ft=be*v,g.scaleY=S*et+w*tt+L*it+k*ft,et=Ye,tt=Qe*v,it=W,ft=Ke*v,g.scaleZ=S*et+w*tt+L*it+k*ft):(pt=3*y,H=x[pt],z=x[pt+1],W=x[pt+2],pt=3*b,Xe=x[pt],je=x[pt+1],Ye=x[pt+2],g.scaleX=Xe+v*(H-Xe),g.scaleY=je+v*(z-je),g.scaleZ=Ye+v*(W-Ye))},gltfAnimationLooper_transition=(i,g,x,_,v,b,y,S,w,L,k)=>{let H,z,W,q,be,Ke,Xe,je,Ye,Ze,Je,Qe,et,tt,it,ft,pt;"CUBICSPLINE"==i?b!=_-1&&(pt=9*b,H=x[pt+3],z=x[pt+4],W=x[pt+5],Ze=x[pt+6],Je=x[pt+7],Qe=x[pt+8],pt=9*y,q=x[pt+0],be=x[pt+1],Ke=x[pt+2],Xe=x[pt+3],je=x[pt+4],Ye=x[pt+5],et=Xe,tt=Ze*v,it=H,ft=q*v,g.x=S*et+w*tt+L*it+k*ft,et=je,tt=Je*v,it=z,ft=be*v,g.y=S*et+w*tt+L*it+k*ft,et=Ye,tt=Qe*v,it=W,ft=Ke*v,g.z=S*et+w*tt+L*it+k*ft):(pt=3*y,H=x[pt],z=x[pt+1],W=x[pt+2],pt=3*b,Xe=x[pt],je=x[pt+1],Ye=x[pt+2],g.x=Xe+v*(H-Xe),g.y=je+v*(z-je),g.z=Ye+v*(W-Ye))},gltfAnimationLooper_weight=(i,g,x,_,v)=>{let b,y,S,w,L,k,H,z,W,q,be,Ke,Xe,je,Ye,Ze,Je,Qe,et,tt,it,ft;const pt=9999991;for(b=i.length;b--;){let xt;for(y=i[b],S=y.geometry.vertexBuffer.data,L=y.geometry.vertexBuffer.stride,H=S.length/L,Ze=y.animationInfo.morphInfo,w=Ze.origin,Je=Ze.morphInfoDataList,Ye=Je.length,k=0;k<H;k++){je=k*L;let i=je*pt+_*pt+v;if(ft=Ze.cacheData[i],ft)[z,W,q,be,Ke,Xe]=ft;else{for(z=w[je],W=w[je],q=w[je+1],be=w[je+1],Ke=w[je+2],Xe=w[je+2],Qe=Ye;Qe--;)et=g[_*Ye+Qe],tt=g[v*Ye+Qe],it=Je[Qe].interleaveData,xt=it[je],z+=et*xt,W+=tt*xt,xt=it[je+1],q+=et*xt,be+=tt*xt,xt=it[je+2],Ke+=et*xt,Xe+=tt*xt;Ze.cacheData[i]=[z,W,q,be,Ke,Xe]}S[je]=z+x*(W-z),S[je+1]=q+x*(be-q),S[je+2]=Ke+x*(Xe-Ke)}y.geometry.vertexBuffer.updateAllData(S)}};class VertexGPURenderInfo{vertexShaderModule;vertexShaderSourceVariant;vertexShaderVariantConditionalBlocks;vertexStructInfo;vertexUniformInfo;vertexBindGroupLayout;vertexUniformBindGroup;vertexUniformBuffer;pipeline;shadowPipeline;pickingPipeline;constructor(i,g,x,_,v,b,y,S,w,L){this.vertexShaderModule=i,this.vertexShaderSourceVariant=g,this.vertexShaderVariantConditionalBlocks=x,this.vertexUniformInfo=_,this.vertexBindGroupLayout=v,this.vertexUniformBindGroup=y,this.vertexUniformBuffer=b,this.pipeline=S,this.shadowPipeline=w,this.pickingPipeline=L}}Object.freeze(VertexGPURenderInfo);const defineProperty=(i,g,x,_,...v)=>{Object.defineProperty(i.prototype,g,x(g,_,...v))},defineProperties=i=>(g,x)=>{x.forEach(x=>{if(Array.isArray(x)){const[_,v,...b]=x;defineProperty(g,_,i,v,...b)}else defineProperty(g,x,i)})},createDefineByPreset=i=>{const g={};return Object.keys(i).forEach(x=>{const[_,v]=i[x];Object.assign(g,(i=>g=>g.reduce((g,x)=>({...g,[x]:i}),{}))(_)(Object.values(v)))}),{defineByPreset:(i,x)=>((i,g,x)=>{g.forEach(g=>{if(Array.isArray(g)){const[_,v,...b]=g,y=x[_];y||consoleAndThrowError(_,"is a key not defined in Define Preset."),defineProperty(i,_,y,v,...b)}else{const _=x[g];_||consoleAndThrowError(g,"is a key not defined in Define Preset."),defineProperty(i,g,_)}})})(i,x,g)}},k={enumerable:!0,configurable:!1};function createSetter$5(i,g,x){return function(_){this[g]=_;const{gpuRenderInfo:v}=this;if(x){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=v;x.writeBuffer(g.members[i],_?1:0),this.dirtyPipeline=!0}else if(v){const{vertexUniformInfo:g,vertexUniformBuffer:x}=v;g.members[i]&&(x.writeBuffer(g.members[i],_?1:0),this.dirtyPipeline=!0)}}}function defineBoolean(i,g=!1,x=!0){const _=Symbol(i);return{get:function(){return void 0===this[_]&&(this[_]=g),this[_]},set:createSetter$5(i,_,x),...k}}Object.freeze(k),Object.freeze(defineBoolean);const validatePositiveNumberRange=(i,g=0,x=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof x&&consoleAndThrowError("Only numbers allowed."),(g<0||i<0||i<g||i>x)&&consoleAndThrowError(`Only numbers within the range of [${g},${x}] are allowed.`),!0);function createSetter$4(i,g,x,_=0,v){return function(b){void 0!==_&&b<_&&(console.warn(`Value for ${i} is below the minimum (${_}). Received:${b}. Adjusted to ${_}.`),b=_),void 0!==v&&b>v&&(console.warn(`Value for ${i} exceeds the maximum (${v}). Received:${b}. Adjusted to ${v}.`),b=v),validatePositiveNumberRange(b),this[g]=b;const{gpuRenderInfo:y}=this;if(x){const{fragmentUniformInfo:x,fragmentUniformBuffer:_}=y;_.writeBuffer(x.members[i],this[g])}else if(y){const{vertexUniformInfo:x,vertexUniformBuffer:_}=y;_.writeBuffer(x.members[i],this[g])}}}function definePositiveNumberRange(i,g=1,x=!0,_=0,v){const b=Symbol(i);return{get:function(){return void 0===this[b]&&(this[b]=g),this[b]},set:createSetter$4(i,b,x,_,v),...k}}Object.freeze(definePositiveNumberRange);const isUint=i=>Number.isInteger(i)&&i>=0,validateUintRange=(i,g=0,x=4503599627370496)=>{const _=isUint(i),v=isUint(g),b=isUint(x),y="is not Uint!/value:",S=`(check range:${g}u ~ ${x}u)`;return _||consoleAndThrowError(`value ${y}${i}/${S}`),v||consoleAndThrowError(`min ${y}${g}/${S}`),b||consoleAndThrowError(`max ${y}${x}/${S}`),g>=x&&consoleAndThrowError(`maximum value is bigger than minimum value./${S}`),g>i&&consoleAndThrowError(`value is smaller than minimum value./value:${i}/${S}`),x<i&&consoleAndThrowError(`value is bigger than maximum value./value:${i}/${S}`),!0};function createSetter$3(i,g,x,_=0,v){return function(b){validateUintRange(b),void 0!==_&&b<_&&(console.warn(`Value for ${i} is below the minimum (${_}). Received:${b}. Adjusted to ${_}.`),b=_),void 0!==v&&b>v&&(console.warn(`Value for ${i} exceeds the maximum (${v}). Received:${b}. Adjusted to ${v}.`),b=v),this[g]=b;const{gpuRenderInfo:y}=this;if(x){const{fragmentUniformInfo:x,fragmentUniformBuffer:_}=y;_.writeBuffer(x.members[i],this[g])}else if(y){const{vertexUniformInfo:x,vertexUniformBuffer:_}=y;_.writeBuffer(x.members[i],this[g])}}}function defineUintRange(i,g=0,x=!0,_=0,v){const b=Symbol(i);return{get:function(){return void 0===this[b]&&(this[b]=g),this[b]},set:createSetter$3(i,b,x,_,v),...k}}function createSetter$2(i,g,x){return function(_){this[g]=_;const{gpuRenderInfo:v}=this;if(x){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=v;x.writeBuffer(g.members[i],_)}else if(v){const{vertexUniformInfo:g,vertexUniformBuffer:x}=v;x.writeBuffer(g.members[i],_)}}}function defineVector(i,g,x=!0){const _=Symbol(i);return{get:function(){return void 0===this[_]&&(this[_]=g),this[_]},set:createSetter$2(i,_,x),...k}}function defineProperty_boolean(i,g=!1){return defineBoolean(i,g,!1)}function defineProperty_uintRange(i,g=0,x,_){return defineUintRange(i,g,!1,x,_)}function defineProperty_PositiveNumberRange$1(i,g=1,x,_){return definePositiveNumberRange(i,g,!1,x,_)}Object.freeze(defineUintRange),Object.freeze(defineVector);const H={USE_BILLBOARD_PERSPECTIVE:"useBillboardPerspective",USE_BILLBOARD:"useBillboard",RECEIVE_SHADOW:"receiveShadow"},z={BILLBOARD_FIXED_SCALE:"billboardFixedScale"},W={},q={...createDefineByPreset({defineBoolean:[defineProperty_boolean,H],defineUint:[defineProperty_uintRange,W],definePositiveNumber:[defineProperty_PositiveNumberRange$1,z]}),defineBoolean:defineProperties(defineProperty_boolean),defineUint:defineProperties(defineProperty_uintRange),definePositiveNumber:defineProperties(defineProperty_PositiveNumberRange$1),defineVec4:defineProperties(function(i,g=[0,0,0,0]){return defineVector(i,g,!1)}),defineVec3:defineProperties(function(i,g=[0,0,0]){return defineVector(i,g,!1)}),defineVec2:defineProperties(function(i,g=[0,0]){return defineVector(i,g,!1)}),PRESET_BOOLEAN:H,PRESET_POSITIVE_NUMBER:z,PRESET_UINT:W,PRESET_SAMPLER:{},PRESET_TEXTURE:{},PRESET_CUBE_TEXTURE:{},PRESET_VEC2:{},PRESET_VEC3:{},PRESET_VEC4:{},PRESET_COLOR_RGB:{}};Object.freeze(q);class AABB{minX;maxX;minY;maxY;minZ;maxZ;centerX;centerY;centerZ;xSize;ySize;zSize;geometryRadius;constructor(i,g,x,_,v,b){this.minX=i,this.maxX=g,this.minY=x,this.maxY=_,this.minZ=v,this.maxZ=b,this.centerX=(g+i)/2,this.centerY=(_+x)/2,this.centerZ=(b+v)/2,this.xSize=g-i,this.ySize=_-x,this.zSize=b-v,this.geometryRadius=Math.sqrt((this.xSize/2)**2+(this.ySize/2)**2+(this.zSize/2)**2)}intersects(i){return i instanceof AABB||consoleAndThrowError("allow only AABB instance"),this.minX<=i.maxX&&this.maxX>=i.minX&&this.minY<=i.maxY&&this.maxY>=i.minY&&this.minZ<=i.maxZ&&this.maxZ>=i.minZ}contains(i,g,x){if(Array.isArray(i)){const[g,x,_]=i;return g>=this.minX&&g<=this.maxX&&x>=this.minY&&x<=this.maxY&&_>=this.minZ&&_<=this.maxZ}return i>=this.minX&&i<=this.maxX&&g>=this.minY&&g<=this.maxY&&x>=this.minZ&&x<=this.maxZ}clone(){return new AABB(this.minX,this.maxX,this.minY,this.maxY,this.minZ,this.maxZ)}}const be=create$1(),Ke=create$1(),calculateMeshAABB=i=>{if(!i||!i._geometry)return new AABB(0,0,0,0,0,0);const g=i._geometry.volume,{minX:x,maxX:_,minY:v,maxY:b,minZ:y,maxZ:S}=g;if(0===x&&0===_&&0===v&&0===b&&0===y&&0===S)return new AABB(0,0,0,0,0,0);let w=1/0,L=1/0,k=1/0,H=-1/0,z=-1/0,W=-1/0;const q=[[x,v,y],[_,v,y],[_,b,y],[x,b,y],[x,v,S],[_,v,S],[_,b,S],[x,b,S]];for(let g=0;g<8;g++){const x=q[g];set(be,x[0],x[1],x[2]),transformMat4(Ke,be,i.modelMatrix);const _=Ke[0],v=Ke[1],b=Ke[2];_<w&&(w=_),v<L&&(L=v),b<k&&(k=b),_>H&&(H=_),v>z&&(z=v),b>W&&(W=b)}return new AABB(w,H,L,z,k,W)},calculateMeshCombinedAABB=i=>{const g=[];return collectRecursive(i,g),0===g.length?new AABB(0,0,0,0,0,0):calculateCombinedAABBFromAABBs(g)},collectRecursive=(i,g)=>{if(i._geometry){const x=i.boundingAABB;0===x.minX&&0===x.maxX&&0===x.minY&&0===x.maxY&&0===x.minZ&&0===x.maxZ||g.push(x)}if(i.children)for(let x=0;x<i.children.length;x++){const _=i.children[x];_ instanceof Mesh&&collectRecursive(_,g)}},calculateCombinedAABBFromAABBs=i=>{if(0===i.length)return new AABB(0,0,0,0,0,0);if(1===i.length)return i[0];let g=1/0,x=1/0,_=1/0,v=-1/0,b=-1/0,y=-1/0;for(let S=0;S<i.length;S++){const w=i[S];w.minX<g&&(g=w.minX),w.minY<x&&(x=w.minY),w.minZ<_&&(_=w.minZ),w.maxX>v&&(v=w.maxX),w.maxY>b&&(b=w.maxY),w.maxZ>y&&(y=w.maxZ)}return new AABB(g,v,x,b,_,y)};class OBB{centerX;centerY;centerZ;halfExtentX;halfExtentY;halfExtentZ;orientation;center;halfExtents;geometryRadius;constructor(i,g,x){this.centerX=i[0],this.centerY=i[1],this.centerZ=i[2],this.halfExtentX=g[0],this.halfExtentY=g[1],this.halfExtentZ=g[2],this.center=[this.centerX,this.centerY,this.centerZ],this.halfExtents=[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation=clone(x),this.geometryRadius=Math.sqrt(this.halfExtentX**2+this.halfExtentY**2+this.halfExtentZ**2)}intersects(i){i instanceof OBB||consoleAndThrowError("allow only OBB instance");const g=subtract(create$1(),this.center,i.center);if(length(g)>this.geometryRadius+i.geometryRadius)return!1;const x=[...this.#x(),...i.#x()];for(const _ of x){const x=this.#_(_),v=i.#_(_);if(Math.abs(dot(g,_))>x+v)return!1}return!0}contains(i,g,x){let _;_=Array.isArray(i)?fromValues(i[0],i[1],i[2]):fromValues(i,g,x);const v=subtract(create$1(),_,this.center),b=this.#x();for(let i=0;i<3;i++){const g=dot(v,b[i]);if(Math.abs(g)>this.halfExtents[i])return!1}return!0}clone(){return new OBB([this.centerX,this.centerY,this.centerZ],[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation)}#x(){return[fromValues(this.orientation[0],this.orientation[1],this.orientation[2]),fromValues(this.orientation[4],this.orientation[5],this.orientation[6]),fromValues(this.orientation[8],this.orientation[9],this.orientation[10])]}#_(i){const g=this.#x();return Math.abs(dot(g[0],i))*this.halfExtentX+Math.abs(dot(g[1],i))*this.halfExtentY+Math.abs(dot(g[2],i))*this.halfExtentZ}}const calculateMeshOBB=i=>{if(!i||!i._geometry){const i=create$2();return new OBB([0,0,0],[0,0,0],i)}const g=i._geometry.volume;if(0===g.minX&&0===g.maxX&&0===g.minY&&0===g.maxY&&0===g.minZ&&0===g.maxZ){const i=create$2();return new OBB([0,0,0],[0,0,0],i)}const x=[g.centerX,g.centerY,g.centerZ],_=[(g.maxX-g.minX)/2,(g.maxY-g.minY)/2,(g.maxZ-g.minZ)/2],v=create$1();transformMat4(v,x,i.modelMatrix);const b=create$2();copy(b,i.modelMatrix),b[12]=0,b[13]=0,b[14]=0;const y=[create$1(),create$1(),create$1()],S=[0,0,0];for(let i=0;i<3;i++){const g=[0,0,0];g[i]=_[i],transformMat4(y[i],g,b),S[i]=length(y[i]),normalize(y[i],y[i])}const w=create$2();return w[0]=y[0][0],w[1]=y[0][1],w[2]=y[0][2],w[3]=0,w[4]=y[1][0],w[5]=y[1][1],w[6]=y[1][2],w[7]=0,w[8]=y[2][0],w[9]=y[2][1],w[10]=y[2][2],w[11]=0,w[12]=0,w[13]=0,w[14]=0,w[15]=1,new OBB([v[0],v[1],v[2]],S,w)},mat4ToEuler=(i,g,x)=>{g=g||[0,0,0],x=x||"XYZ";let _=i[0],v=i[4],b=i[8],y=i[1],S=i[5],w=i[9],L=i[2],k=i[6],H=i[10];return"XYZ"===x?(g[1]=Math.asin(clamp(b,-1,1)),Math.abs(b)<.99999?(g[0]=Math.atan2(-w,H),g[2]=Math.atan2(-v,_)):(g[0]=Math.atan2(k,S),g[2]=0)):"YXZ"===x?(g[0]=Math.asin(-clamp(w,-1,1)),Math.abs(w)<.99999?(g[1]=Math.atan2(b,H),g[2]=Math.atan2(y,S)):(g[1]=Math.atan2(-L,_),g[2]=0)):"ZXY"===x?(g[0]=Math.asin(clamp(k,-1,1)),Math.abs(k)<.99999?(g[1]=Math.atan2(-L,H),g[2]=Math.atan2(-v,S)):(g[1]=0,g[2]=Math.atan2(y,_))):"ZYX"===x?(g[1]=Math.asin(-clamp(L,-1,1)),Math.abs(L)<.99999?(g[0]=Math.atan2(k,H),g[2]=Math.atan2(y,_)):(g[0]=0,g[2]=Math.atan2(-v,S))):"YZX"===x?(g[2]=Math.asin(clamp(y,-1,1)),Math.abs(y)<.99999?(g[0]=Math.atan2(-w,S),g[1]=Math.atan2(-L,_)):(g[0]=0,g[1]=Math.atan2(b,H))):"XZY"===x&&(g[2]=Math.asin(-clamp(v,-1,1)),Math.abs(v)<.99999?(g[0]=Math.atan2(k,S),g[1]=Math.atan2(b,_)):(g[0]=Math.atan2(-w,H),g[1]=0)),g};let clamp=function(i,g,x){return Math.max(g,Math.min(x,i))};const uuidToUint=i=>{const g=i.replace(/-/g,"").substring(0,8);return parseInt(g,16)};class GeometryGPURenderInfo{buffers;constructor(i){this.buffers=i}}Object.freeze(GeometryGPURenderInfo);const validateRedGPUContext=i=>{if("RedGPUContext"!==i?.constructor?.name){return consoleAndThrowError(`from ${i?.constructor?.name}:requires a RedGPUContext instance,but received:${i}`),!1}return!0},createUUID=()=>{const i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let g,x=0,_=["","","","","-","","","","-","4","","","-","","","","-","","","","","","-","","","","","","","","","","","",""];for(;x<36;)""===_[x]&&(g=16*Math.random()|0,_[x]=i[19===x?3&g|8:15&g]),x++;return _.join("")};class ResourceBase{#v=createUUID();#b;#y;#a="";#e;#T;#S=[];#M;constructor(i,g){validateRedGPUContext(i),this.#M=g,this.#b=i,this.#y=i.gpuDevice}get cacheKey(){return this.#T}set cacheKey(i){this.#T=i}get resourceManagerKey(){return this.#M}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get uuid(){return this.#v}get gpuDevice(){return this.#y}get redGPUContext(){return this.#b}__addDirtyPipelineListener(i){this.#w(!0),this.#S.push(i)}__removeDirtyPipelineListener(i){const g=this.#S.indexOf(i);g>-1&&(this.#S.splice(g,1),this.#w(!1))}__fireListenerList(i=!1){for(const i of this.#S)i(this);i&&(this.#S.length=0)}#w(i){const{resourceManager:g}=this.#b;if("Sampler"!==this.constructor.name&&g){const x=g[this.#M];x||consoleAndThrowError("need managedStateKey",this.constructor.name);const _=x?.table.get(this.cacheKey);_&&(i?_.useNum++:_.useNum--)}}}const calculateGeometryAABB=i=>{if(!i||!i.data||0===i.vertexCount)return new AABB(0,0,0,0,0,0);const g=i.stride,x=i.data,_=i.vertexCount;let v=1/0,b=1/0,y=1/0,S=-1/0,w=-1/0,L=-1/0,k=0;for(;k<=_-4;k+=4){let i=k*g;const _=x[i],H=x[i+1],z=x[i+2];i=(k+1)*g;const W=x[i],q=x[i+1],be=x[i+2];i=(k+2)*g;const Ke=x[i],Xe=x[i+1],je=x[i+2];i=(k+3)*g;const Ye=x[i],Ze=x[i+1],Je=x[i+2];_<v&&(v=_),W<v&&(v=W),Ke<v&&(v=Ke),Ye<v&&(v=Ye),_>S&&(S=_),W>S&&(S=W),Ke>S&&(S=Ke),Ye>S&&(S=Ye),H<b&&(b=H),q<b&&(b=q),Xe<b&&(b=Xe),Ze<b&&(b=Ze),H>w&&(w=H),q>w&&(w=q),Xe>w&&(w=Xe),Ze>w&&(w=Ze),z<y&&(y=z),be<y&&(y=be),je<y&&(y=je),Je<y&&(y=Je),z>L&&(L=z),be>L&&(L=be),je>L&&(L=je),Je>L&&(L=Je)}for(;k<_;k++){const i=k*g,_=x[i],H=x[i+1],z=x[i+2];_<v&&(v=_),H<b&&(b=H),z<y&&(y=z),_>S&&(S=_),H>w&&(w=H),z>L&&(L=z)}return new AABB(v,S,b,w,y,L)};class Geometry extends ResourceBase{gpuRenderInfo;#R;#C;#P;constructor(i,g,x){super(i),this.#B(g),this.#E(x);const{interleavedStruct:_}=this.#R;this.gpuRenderInfo=new GeometryGPURenderInfo([{arrayStride:_.arrayStride,attributes:_.attributes}])}get vertexBuffer(){return this.#R}get indexBuffer(){return this.#C}get volume(){return this.#P||(this.#P=calculateGeometryAABB(this.#R)),this.#P}#B(i){const g=this.#R;this.#R=i,g&&g.__removeDirtyPipelineListener(this.#I),i&&i.__addDirtyPipelineListener(this.#I),this.#P=null}#E(i){const g=this.#C;this.#C=i,g&&g.__removeDirtyPipelineListener(this.#L),i&&i.__addDirtyPipelineListener(this.#L)}#I(){this.__fireListenerList()}#L(){this.__fireListenerList()}}Object.freeze(Geometry);const Xe={POINT_LIST:"point-list",LINE_LIST:"line-list",LINE_STRIP:"line-strip",TRIANGLE_LIST:"triangle-list",TRIANGLE_STRIP:"triangle-strip"};Object.freeze(Xe);const isHexColor=i=>{const g=/^([A-Fa-f0-9]{3}){1,2}$/;return i.startsWith("#")?g.test(i.substring(1)):!!i.startsWith("0x")&&g.test(i.substring(2))},convertHexToRgb=(i,g=!1)=>{if("number"==typeof i&&(i=`#${i.toString(16)}`),isHexColor(i)){"#"===i.charAt(0)&&(i=i.substring(1)),3===i.length&&(i=i.charAt(0)+i.charAt(0)+i.charAt(1)+i.charAt(1)+i.charAt(2)+i.charAt(2));const x=parseInt("0x"+i),_=x>>16&255,v=x>>8&255,b=255&x;return g?[_,v,b]:{r:_,g:v,b:b}}throw Error(`from ${convertHexToRgb.constructor.name}:input value - ${i}/Only hex string allowed`)},convertRgbToHex=(i,g,x)=>{validateUintRange(i,0,255),validateUintRange(g,0,255),validateUintRange(x,0,255);return`#${i.toString(16).padStart(2,"0").toUpperCase()}${g.toString(16).padStart(2,"0").toUpperCase()}${x.toString(16).padStart(2,"0").toUpperCase()}`};class ColorRGB{#U;#D;#A;#k;constructor(i=255,g=255,x=255,_=void 0){this.#O(i,g,x),this.#G(i,g,x),_&&(this.#k=_)}get r(){return this.#U}set r(i){validateUintRange(i,0,255),this.#U=i,this.#k?.()}get g(){return this.#D}set g(i){validateUintRange(i,0,255),this.#D=i,this.#k?.()}get b(){return this.#A}set b(i){validateUintRange(i,0,255),this.#A=i,this.#k?.()}get rgb(){return[this.#U,this.#D,this.#A]}get rgbNormal(){return[this.#U/255,this.#D/255,this.#A/255]}get hex(){return convertRgbToHex(this.#U,this.#D,this.#A)}setColorByRGB(i,g,x){this.#O(i,g,x),this.#G(i,g,x)}setColorByHEX(i){const{r:g,g:x,b:_}=convertHexToRgb(i);this.#G(g,x,_)}setColorByRGBString(i){const g=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(i);g||consoleAndThrowError(`Invalid rgb color value:${i}`);const[,x,_,v]=g.map(Number);this.#O(x,_,v),this.#G(x,_,v)}#G(i,g,x){this.#U=i,this.#D=g,this.#A=x,this.#k?.()}#O(i,g,x){validateUintRange(i,0,255),validateUintRange(g,0,255),validateUintRange(x,0,255)}}function defineColorRGB(i,g="#fff",x=!0){const _=Symbol(i);return{get:function(){if(void 0===this[_]){let v=255,b=255,y=255;if(isHexColor(g)){const i=convertHexToRgb(g);v=i.r,b=i.g,y=i.b}this[_]=new ColorRGB(v,b,y,()=>{const{gpuRenderInfo:g}=this;if(g)if(x){const{fragmentUniformInfo:x,fragmentUniformBuffer:v}=g;v.writeBuffer(x.members[i],this[_].rgbNormal)}else{const{vertexUniformInfo:x,vertexUniformBuffer:v}=g;v.writeBuffer(x.members[i],this[_].rgbNormal)}})}return this[_]},...k}}Object.freeze(defineColorRGB);class ColorRGBA extends ColorRGB{#N;#k;constructor(i=255,g=255,x=255,_=1,v=void 0){super(i,g,x,v),validatePositiveNumberRange(_,0,1),this.#N=_,v&&(this.#k=v)}get a(){return this.#N}set a(i){validatePositiveNumberRange(i,0,1),this.#N=i,this.#k?.()}get rgba(){return[this.r,this.g,this.b,this.#N]}get rgbaNormal(){return[this.r/255,this.g/255,this.b/255,this.#N]}setColorByRGBA(i,g,x,_){this.#V(i,g,x,_),this.r=i,this.g=g,this.b=x,this.#N=_,this.#k?.()}setColorByRGBAString(i){const g=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d*(?:\.\d+)?)\s*\)/.exec(i);if(!g)throw new Error(`Invalid rgba color value:${i}`);const[,x,_,v,b]=g.map(Number);this.#V(x,_,v,b),this.r=x,this.g=_,this.b=v,this.#N=b,this.#k?.()}#V(i,g,x,_){validateUintRange(i,0,255),validateUintRange(g,0,255),validateUintRange(x,0,255),validatePositiveNumberRange(_,0,1)}}function defineColorRGBA(i,g="#fff",x=!0){const _=Symbol(i);return{get:function(){if(void 0===this[_]){let v=255,b=255,y=255,S=1;if(isHexColor(g)){const i=convertHexToRgb(g);v=i.r,b=i.g,y=i.b}this[_]=new ColorRGBA(v,b,y,S,()=>{const{gpuRenderInfo:g}=this;if(g)if(x){const{fragmentUniformInfo:x,fragmentUniformBuffer:v}=g;v.writeBuffer(x.members[i],this[_].rgbaNormal)}else{const{vertexUniformInfo:x,vertexUniformBuffer:v}=g;v.writeBuffer(x.members[i],this[_].rgbaNormal)}})}return this[_]},...k}}function createSetter$1(i,g,x){const _=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const v=this[g];this[g]=i,this.updateTexture(v,i);const{gpuRenderInfo:b}=this;if(x){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=b;_ in this?this[_]=!!i:g.members[_]&&x.writeBuffer(g.members[_],i?1:0)}else if(b){const{vertexUniformInfo:g,vertexUniformBuffer:x}=b;g.members[_]&&x.writeBuffer(x.members[_],i?1:0)}}}function defineCubeTexture(i,g=!0){const x=Symbol(i);return{get:function(){return this[x]},set:createSetter$1(i,x,g),...k}}function defineSampler(i){const g=Symbol(i);return{get:function(){return this[g]},set:function(i){const x=this[g];this[g]=i,this.updateSampler(x,i)},...k}}function createSetter(i,g,x){const _=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const v=this[g];this[g]=i,this.updateTexture(v,i);const{gpuRenderInfo:b}=this;if(x){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=b;_ in this?this[_]=!!i:g.members[_]&&x.writeBuffer(g.members[_],i?1:0)}else if(b){const{vertexUniformInfo:g,vertexUniformBuffer:x}=b;g.members[_]&&x.writeBuffer(x.members[_],i?1:0)}}}function defineTexture$1(i,g=!0){const x=Symbol(i);return{get:function(){return this[x]},set:createSetter(i,x,g),...k}}function defineProperty_vec4(i,g=[0,0,0,0]){return defineVector(i,g)}function defineProperty_vec3(i,g=[0,0,0]){return defineVector(i,g)}function defineProperty_vec2(i,g=[0,0]){return defineVector(i,g)}function defineProperty_PositiveNumberRange(i,g=1,x,_){return definePositiveNumberRange(i,g,!0,x,_)}Object.freeze(defineColorRGBA),Object.freeze(defineCubeTexture),Object.freeze(defineSampler),Object.freeze(defineTexture$1);const je={},Ye={AO_STRENGTH:"aoStrength",SPECULAR_STRENGTH:"specularStrength",EMISSIVE_STRENGTH:"emissiveStrength",OPACITY:"opacity",SHININESS:"shininess",NORMAL_SCALE:"normalScale"},Ze={},Je={ALPHA_TEXTURE_SAMPLER:"alphaTextureSampler",AO_TEXTURE_SAMPLER:"aoTextureSampler",DIFFUSE_TEXTURE_SAMPLER:"diffuseTextureSampler",EMISSIVE_TEXTURE_SAMPLER:"emissiveTextureSampler",ENVIRONMENT_TEXTURE_SAMPLER:"environmentTextureSampler",NORMAL_TEXTURE_SAMPLER:"normalTextureSampler",SPECULAR_TEXTURE_SAMPLER:"specularTextureSampler"},Qe={ENVIRONMENT_TEXTURE:"environmentTexture"},et={},tt={},it={},ft={ALPHA_TEXTURE:"alphaTexture",AO_TEXTURE:"aoTexture",DIFFUSE_TEXTURE:"diffuseTexture",EMISSIVE_TEXTURE:"emissiveTexture",NORMAL_TEXTURE:"normalTexture",SPECULAR_TEXTURE:"specularTexture"},pt={COLOR:"color",EMISSIVE_COLOR:"emissiveColor",SPECULAR_COLOR:"specularColor"},xt={...createDefineByPreset({defineBoolean:[defineBoolean,je],definePositiveNumber:[defineProperty_PositiveNumberRange,Ye],defineUint:[defineUintRange,Ze],defineVec2:[defineProperty_vec2,et],defineVec3:[defineProperty_vec3,tt],defineVec4:[defineProperty_vec4,it],defineColorRGB:[defineColorRGB,pt],defineSampler:[defineSampler,Je],defineTexture:[defineTexture$1,ft],defineCubeTexture:[defineCubeTexture,Qe]}),defineBoolean:defineProperties(defineBoolean),definePositiveNumber:defineProperties(defineProperty_PositiveNumberRange),defineUint:defineProperties(defineUintRange),defineVec2:defineProperties(defineProperty_vec2),defineVec3:defineProperties(defineProperty_vec3),defineVec4:defineProperties(defineProperty_vec4),defineColorRGB:defineProperties(defineColorRGB),defineColorRGBA:defineProperties(defineColorRGBA),defineSampler:defineProperties(defineSampler),defineTexture:defineProperties(defineTexture$1),defineCubeTexture:defineProperties(defineCubeTexture),PRESET_BOOLEAN:je,PRESET_POSITIVE_NUMBER:Ye,PRESET_UINT:Ze,PRESET_SAMPLER:Je,PRESET_TEXTURE:ft,PRESET_CUBE_TEXTURE:Qe,PRESET_VEC2:et,PRESET_VEC3:tt,PRESET_VEC4:it,PRESET_COLOR_RGB:pt};Object.freeze(xt);class e{constructor(i,g){this.name=i,this.attributes=g,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}get isPointer(){return!1}getTypeName(){return this.name}}class t{constructor(i,g,x){this.name=i,this.type=g,this.attributes=x,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class n extends e{constructor(i,g){super(i,g),this.members=[],this.align=0,this.startLine=-1,this.endLine=-1,this.inUse=!1}get isStruct(){return!0}}class s extends e{constructor(i,g){super(i,g),this.count=0,this.stride=0}get isArray(){return!0}getTypeName(){return`array<${this.format.getTypeName()},${this.count}>`}}class r extends e{constructor(i,g,x){super(i,x),this.format=g}get isPointer(){return!0}getTypeName(){return`&${this.format.getTypeName()}`}}class a extends e{constructor(i,g,x,_){super(i,x),this.format=g,this.access=_}get isTemplate(){return!0}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}var vt;(i=>{i[i.Uniform=0]="Uniform",i[i.Storage=1]="Storage",i[i.Texture=2]="Texture",i[i.Sampler=3]="Sampler",i[i.StorageTexture=4]="StorageTexture"})(vt||(vt={}));class o{constructor(i,g,x,_,v,b,y){this.name=i,this.type=g,this.group=x,this.binding=_,this.attributes=v,this.resourceType=b,this.access=y}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class c{constructor(i,g){this.name=i,this.type=g}}class l{constructor(i,g,x,_){this.name=i,this.type=g,this.locationType=x,this.location=_,this.interpolation=null}}class u{constructor(i,g,x,_){this.name=i,this.type=g,this.locationType=x,this.location=_}}class h{constructor(i,g,x,_){this.name=i,this.type=g,this.attributes=x,this.id=_}}class f{constructor(i,g,x){this.name=i,this.type=g,this.attributes=x}}class p{constructor(i,g=null,x){this.stage=null,this.inputs=[],this.outputs=[],this.arguments=[],this.returnType=null,this.resources=[],this.overrides=[],this.startLine=-1,this.endLine=-1,this.inUse=!1,this.calls=new Set,this.name=i,this.stage=g,this.attributes=x}}class d{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}function m(i){var g=(32768&i)>>15,x=(31744&i)>>10,_=1023&i;return 0==x?(g?-1:1)*Math.pow(2,-14)*(_/Math.pow(2,10)):31==x?_?NaN:1/0*(g?-1:1):(g?-1:1)*Math.pow(2,x-15)*(1+_/Math.pow(2,10))}const bt=new Float32Array(1),yt=new Int32Array(bt.buffer),Tt=new Uint16Array(1);function y$1(i){bt[0]=i;const g=yt[0],x=g>>31&1;let _=g>>23&255,v=8388607&g;if(255===_)return Tt[0]=x<<15|31744|(0!==v?512:0),Tt[0];if(0===_){if(0===v)return Tt[0]=x<<15,Tt[0];v|=8388608;let i=113;for(;!(8388608&v);)v<<=1,i--;return _=127-i,v&=8388607,_>0?(v=(v>>126-_)+(v>>127-_&1),Tt[0]=x<<15|_<<10|v>>13,Tt[0]):(Tt[0]=x<<15,Tt[0])}return _=_-127+15,_>=31?(Tt[0]=x<<15|31744,Tt[0]):_<=0?_<-10?(Tt[0]=x<<15,Tt[0]):(v=(8388608|v)>>1-_,Tt[0]=x<<15|v>>13,Tt[0]):(v>>=13,Tt[0]=x<<15|_<<10|v,Tt[0])}const St=new Uint32Array(1),Mt=new Float32Array(St.buffer,0,1);function w$1(i){const g=112+(i>>6&31)<<23|(63&i)<<17;return St[0]=g,Mt[0]}function I(i,g,x,_){const v=[0,0,0,0];for(let b=0;b<_;++b)switch(x){case"8unorm":v[b]=i[g]/255,g++;break;case"8snorm":v[b]=i[g]/255*2-1,g++;break;case"8uint":v[b]=i[g],g++;break;case"8sint":v[b]=i[g]-127,g++;break;case"16uint":v[b]=i[g]|i[g+1]<<8,g+=2;break;case"16sint":v[b]=(i[g]|i[g+1]<<8)-32768,g+=2;break;case"16float":v[b]=m(i[g]|i[g+1]<<8),g+=2;break;case"32uint":case"32sint":v[b]=i[g]|i[g+1]<<8|i[g+2]<<16|i[g+3]<<24,g+=4;break;case"32float":v[b]=new Float32Array(i.buffer,g,1)[0],g+=4}return v}function T(i,g,x,_,v){for(let b=0;b<_;++b)switch(x){case"8unorm":i[g]=255*v[b],g++;break;case"8snorm":i[g]=.5*(v[b]+1)*255,g++;break;case"8uint":i[g]=v[b],g++;break;case"8sint":i[g]=v[b]+127,g++;break;case"16uint":new Uint16Array(i.buffer,g,1)[0]=v[b],g+=2;break;case"16sint":new Int16Array(i.buffer,g,1)[0]=v[b],g+=2;break;case"16float":{const x=y$1(v[b]);new Uint16Array(i.buffer,g,1)[0]=x,g+=2;break}case"32uint":new Uint32Array(i.buffer,g,1)[0]=v[b],g+=4;break;case"32sint":new Int32Array(i.buffer,g,1)[0]=v[b],g+=4;break;case"32float":new Float32Array(i.buffer,g,1)[0]=v[b],g+=4}return v}const wt={r8unorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8snorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8uint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8sint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg8unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8snorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"rgba8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8snorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},bgra8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bgra8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r16uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16float:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg16uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba16uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r32uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg32uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba32uint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32sint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32float:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rg11b10ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},stencil8:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!1,hasStencil:!0,channels:1},depth16unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},depth24plus:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,depthOnlyFormat:"depth32float",channels:1},"depth24plus-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,depthOnlyFormat:"depth32float",channels:1},depth32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},"depth32float-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,stencilOnlyFormat:"depth32float",channels:1},rgb9e5ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bc1-rgba-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc1-rgba-unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc4-r-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc4-r-snorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc5-rg-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc5-rg-snorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc6h-rgb-ufloat":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc6h-rgb-float":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"eac-r11unorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-r11snorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-rg11unorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"eac-rg11snorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"astc-4x4-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-4x4-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x5-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-5x5-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x6-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-6x6-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-8x5-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x5-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x6-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x6-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x8-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-8x8-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-10x5-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x5-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x6-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x6-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x8-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x8-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x10-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-10x10-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x12-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4},"astc-12x12-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4}};class A{constructor(){this.id=A._id++,this.line=0}get isAstNode(){return!0}get astNodeType(){return""}search(i){i(this)}searchBlock(i,g){if(i){g(E.instance);for(const x of i)x instanceof Array?this.searchBlock(x,g):x.search(g);g($.instance)}}constEvaluate(i,g){throw new Error("Cannot evaluate node")}constEvaluateString(i){return this.constEvaluate(i).toString()}}A._id=0;class E extends A{}E.instance=new E;class $ extends A{}$.instance=new $;const Rt=new Set(["all","all","any","select","arrayLength","abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","clamp","cos","cosh","countLeadingZeros","countOneBits","countTrailingZeros","cross","degrees","determinant","distance","dot","dot4U8Packed","dot4I8Packed","exp","exp2","extractBits","faceForward","firstLeadingBit","firstTrailingBit","floor","fma","fract","frexp","insertBits","inverseSqrt","ldexp","length","log","log2","max","min","mix","modf","normalize","pow","quantizeToF16","radians","reflect","refract","reverseBits","round","saturate","sign","sin","sinh","smoothStep","sqrt","step","tan","tanh","transpose","trunc","dpdx","dpdxCoarse","dpdxFine","dpdy","dpdyCoarse","dpdyFine","fwidth","fwidthCoarse","fwidthFine","textureDimensions","textureGather","textureGatherCompare","textureLoad","textureNumLayers","textureNumLevels","textureNumSamples","textureSample","textureSampleBias","textureSampleCompare","textureSampleCompareLevel","textureSampleGrad","textureSampleLevel","textureSampleBaseClampToEdge","textureStore","atomicLoad","atomicStore","atomicAdd","atomicSub","atomicMax","atomicMin","atomicAnd","atomicOr","atomicXor","atomicExchange","atomicCompareExchangeWeak","pack4x8snorm","pack4x8unorm","pack4xI8","pack4xU8","pack4x8Clamp","pack4xU8Clamp","pack2x16snorm","pack2x16unorm","pack2x16float","unpack4x8snorm","unpack4x8unorm","unpack4xI8","unpack4xU8","unpack2x16snorm","unpack2x16unorm","unpack2x16float","storageBarrier","textureBarrier","workgroupBarrier","workgroupUniformLoad","subgroupAdd","subgroupExclusiveAdd","subgroupInclusiveAdd","subgroupAll","subgroupAnd","subgroupAny","subgroupBallot","subgroupBroadcast","subgroupBroadcastFirst","subgroupElect","subgroupMax","subgroupMin","subgroupMul","subgroupExclusiveMul","subgroupInclusiveMul","subgroupOr","subgroupShuffle","subgroupShuffleDown","subgroupShuffleUp","subgroupShuffleXor","subgroupXor","quadBroadcast","quadSwapDiagonal","quadSwapX","quadSwapY"]);class C extends A{constructor(){super()}}class D extends C{constructor(i,g,x,_,v,b){super(),this.calls=new Set,this.name=i,this.args=g,this.returnType=x,this.body=_,this.startLine=v,this.endLine=b}get astNodeType(){return"function"}search(i){if(this.attributes)for(const g of this.attributes)i(g);i(this);for(const g of this.args)i(g);this.searchBlock(this.body,i)}}class N extends C{constructor(i){super(),this.expression=i}get astNodeType(){return"staticAssert"}search(i){this.expression.search(i)}}class V extends C{constructor(i,g){super(),this.condition=i,this.body=g}get astNodeType(){return"while"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class O extends C{constructor(i,g){super(),this.body=i,this.loopId=g}get astNodeType(){return"continuing"}search(i){this.searchBlock(this.body,i)}}class B extends C{constructor(i,g,x,_){super(),this.init=i,this.condition=g,this.increment=x,this.body=_}get astNodeType(){return"for"}search(i){var g,x,_;null===(g=this.init)||void 0===g||g.search(i),null===(x=this.condition)||void 0===x||x.search(i),null===(_=this.increment)||void 0===_||_.search(i),this.searchBlock(this.body,i)}}class F extends C{constructor(i,g,x,_,v){super(),this.attributes=null,this.name=i,this.type=g,this.storage=x,this.access=_,this.value=v}get astNodeType(){return"var"}search(i){var g;i(this),null===(g=this.value)||void 0===g||g.search(i)}}class M extends C{constructor(i,g,x){super(),this.attributes=null,this.name=i,this.type=g,this.value=x}get astNodeType(){return"override"}search(i){var g;null===(g=this.value)||void 0===g||g.search(i)}}class U extends C{constructor(i,g,x,_,v){super(),this.attributes=null,this.name=i,this.type=g,this.storage=x,this.access=_,this.value=v}get astNodeType(){return"let"}search(i){var g;i(this),null===(g=this.value)||void 0===g||g.search(i)}}class P extends C{constructor(i,g,x,_,v){super(),this.attributes=null,this.name=i,this.type=g,this.storage=x,this.access=_,this.value=v}get astNodeType(){return"const"}constEvaluate(i,g){return this.value.constEvaluate(i,g)}search(i){var g;i(this),null===(g=this.value)||void 0===g||g.search(i)}}var Ct,Pt,Bt,Et;(i=>{i.increment="++",i.decrement="--"})(Ct||(Ct={})),(i=>{i.parse=function(g){const x=g;if("parse"==x)throw new Error("Invalid value for IncrementOperator");return i[x]}})(Ct||(Ct={}));class R extends C{constructor(i,g){super(),this.operator=i,this.variable=g}get astNodeType(){return"increment"}search(i){this.variable.search(i)}}(i=>{i.assign="=",i.addAssign="+=",i.subtractAssin="-=",i.multiplyAssign="*=",i.divideAssign="/=",i.moduloAssign="%=",i.andAssign="&=",i.orAssign="|=",i.xorAssign="^=",i.shiftLeftAssign="<<=",i.shiftRightAssign=">>="})(Pt||(Pt={})),(Pt||(Pt={})).parse=function(i){const g=i;if("parse"==g)throw new Error("Invalid value for AssignOperator");return g};class G extends C{constructor(i,g,x){super(),this.operator=i,this.variable=g,this.value=x}get astNodeType(){return"assign"}search(i){this.variable.search(i),this.value.search(i)}}class X extends C{constructor(i,g){super(),this.name=i,this.args=g}get astNodeType(){return"call"}isBuiltin(){return Rt.has(this.name)}search(i){for(const g of this.args)g.search(i);i(this)}}class j extends C{constructor(i,g){super(),this.body=i,this.continuing=g}get astNodeType(){return"loop"}search(i){var g;this.searchBlock(this.body,i),null===(g=this.continuing)||void 0===g||g.search(i)}}class Z extends C{constructor(i,g){super(),this.condition=i,this.cases=g}get astNodeType(){return"switch"}search(i){i(this);for(const g of this.cases)g.search(i)}}class Q extends C{constructor(i,g,x,_){super(),this.condition=i,this.body=g,this.elseif=x,this.else=_}get astNodeType(){return"if"}search(i){this.condition.search(i),this.searchBlock(this.body,i),this.searchBlock(this.elseif,i),this.searchBlock(this.else,i)}}class Y extends C{constructor(i){super(),this.value=i}get astNodeType(){return"return"}search(i){var g;null===(g=this.value)||void 0===g||g.search(i)}}class K extends C{constructor(i){super(),this.name=i}get astNodeType(){return"enable"}}class J extends C{constructor(i){super(),this.extensions=i}get astNodeType(){return"requires"}}class ee extends C{constructor(i,g){super(),this.severity=i,this.rule=g}get astNodeType(){return"diagnostic"}}class te extends C{constructor(i,g){super(),this.name=i,this.type=g}get astNodeType(){return"alias"}}class ne extends C{constructor(){super()}get astNodeType(){return"discard"}}class se extends C{constructor(){super(),this.condition=null,this.loopId=-1}get astNodeType(){return"break"}}class re extends C{constructor(){super(),this.loopId=-1}get astNodeType(){return"continue"}}class ae extends C{constructor(i){super(),this.attributes=null,this.name=i}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}static maxFormatType(i){let g=i[0];if("f32"===g.name)return g;for(let x=1;x<i.length;++x){const _=ae._priority.get(g.name);ae._priority.get(i[x].name)<_&&(g=i[x])}return"x32"===g.name?ae.i32:g}getTypeName(){return this.name}}ae.x32=new ae("x32"),ae.f32=new ae("f32"),ae.i32=new ae("i32"),ae.u32=new ae("u32"),ae.f16=new ae("f16"),ae.bool=new ae("bool"),ae.void=new ae("void"),ae._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class ie extends ae{constructor(i){super(i)}}class oe extends ae{constructor(i,g,x,_){super(i),this.members=g,this.startLine=x,this.endLine=_}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(i){for(let g=0;g<this.members.length;g++)if(this.members[g].name==i)return g;return-1}search(i){for(const g of this.members)i(g)}}class ce extends ae{constructor(i,g,x){super(i),this.format=g,this.access=x}get astNodeType(){return"template"}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}ce.vec2f=new ce("vec2",ae.f32,null),ce.vec3f=new ce("vec3",ae.f32,null),ce.vec4f=new ce("vec4",ae.f32,null),ce.vec2i=new ce("vec2",ae.i32,null),ce.vec3i=new ce("vec3",ae.i32,null),ce.vec4i=new ce("vec4",ae.i32,null),ce.vec2u=new ce("vec2",ae.u32,null),ce.vec3u=new ce("vec3",ae.u32,null),ce.vec4u=new ce("vec4",ae.u32,null),ce.vec2h=new ce("vec2",ae.f16,null),ce.vec3h=new ce("vec3",ae.f16,null),ce.vec4h=new ce("vec4",ae.f16,null),ce.vec2b=new ce("vec2",ae.bool,null),ce.vec3b=new ce("vec3",ae.bool,null),ce.vec4b=new ce("vec4",ae.bool,null),ce.mat2x2f=new ce("mat2x2",ae.f32,null),ce.mat2x3f=new ce("mat2x3",ae.f32,null),ce.mat2x4f=new ce("mat2x4",ae.f32,null),ce.mat3x2f=new ce("mat3x2",ae.f32,null),ce.mat3x3f=new ce("mat3x3",ae.f32,null),ce.mat3x4f=new ce("mat3x4",ae.f32,null),ce.mat4x2f=new ce("mat4x2",ae.f32,null),ce.mat4x3f=new ce("mat4x3",ae.f32,null),ce.mat4x4f=new ce("mat4x4",ae.f32,null),ce.mat2x2h=new ce("mat2x2",ae.f16,null),ce.mat2x3h=new ce("mat2x3",ae.f16,null),ce.mat2x4h=new ce("mat2x4",ae.f16,null),ce.mat3x2h=new ce("mat3x2",ae.f16,null),ce.mat3x3h=new ce("mat3x3",ae.f16,null),ce.mat3x4h=new ce("mat3x4",ae.f16,null),ce.mat4x2h=new ce("mat4x2",ae.f16,null),ce.mat4x3h=new ce("mat4x3",ae.f16,null),ce.mat4x4h=new ce("mat4x4",ae.f16,null),ce.mat2x2i=new ce("mat2x2",ae.i32,null),ce.mat2x3i=new ce("mat2x3",ae.i32,null),ce.mat2x4i=new ce("mat2x4",ae.i32,null),ce.mat3x2i=new ce("mat3x2",ae.i32,null),ce.mat3x3i=new ce("mat3x3",ae.i32,null),ce.mat3x4i=new ce("mat3x4",ae.i32,null),ce.mat4x2i=new ce("mat4x2",ae.i32,null),ce.mat4x3i=new ce("mat4x3",ae.i32,null),ce.mat4x4i=new ce("mat4x4",ae.i32,null),ce.mat2x2u=new ce("mat2x2",ae.u32,null),ce.mat2x3u=new ce("mat2x3",ae.u32,null),ce.mat2x4u=new ce("mat2x4",ae.u32,null),ce.mat3x2u=new ce("mat3x2",ae.u32,null),ce.mat3x3u=new ce("mat3x3",ae.u32,null),ce.mat3x4u=new ce("mat3x4",ae.u32,null),ce.mat4x2u=new ce("mat4x2",ae.u32,null),ce.mat4x3u=new ce("mat4x3",ae.u32,null),ce.mat4x4u=new ce("mat4x4",ae.u32,null);class le extends ae{constructor(i,g,x,_){super(i),this.storage=g,this.type=x,this.access=_}get astNodeType(){return"pointer"}}class ue extends ae{constructor(i,g,x,_){super(i),this.attributes=g,this.format=x,this.count=_}get astNodeType(){return"array"}get isArray(){return!0}}class he extends ae{constructor(i,g,x){super(i),this.format=g,this.access=x}get astNodeType(){return"sampler"}}class fe extends A{constructor(){super(),this.postfix=null}}class pe extends fe{constructor(i){super(),this.value=i}get astNodeType(){return"stringExpr"}toString(){return this.value}constEvaluateString(){return this.value}}class de extends fe{constructor(i,g){super(),this.type=i,this.args=g}get astNodeType(){return"createExpr"}search(i){if(i(this),this.args)for(const g of this.args)g.search(i)}constEvaluate(i,g){return g&&(g[0]=this.type),i.evalExpression(this,i.context)}}class me extends fe{constructor(i,g){super(),this.cachedReturnValue=null,this.name=i,this.args=g}get astNodeType(){return"callExpr"}setCachedReturnValue(i){this.cachedReturnValue=i}get isBuiltin(){return Rt.has(this.name)}constEvaluate(i,g){return i.evalExpression(this,i.context)}search(i){for(const g of this.args)g.search(i);i(this)}}class ge extends fe{constructor(i){super(),this.name=i}get astNodeType(){return"varExpr"}search(i){i(this),this.postfix&&this.postfix.search(i)}constEvaluate(i,g){return i.evalExpression(this,i.context)}}class _e extends fe{constructor(i,g){super(),this.name=i,this.initializer=g}get astNodeType(){return"constExpr"}constEvaluate(i,g){if(this.initializer){const g=i.evalExpression(this.initializer,i.context);return null!==g&&this.postfix?g.getSubData(i,this.postfix,i.context):g}return null}search(i){this.initializer.search(i)}}class xe extends fe{constructor(i,g){super(),this.value=i,this.type=g}get astNodeType(){return"literalExpr"}constEvaluate(i,g){return void 0!==g&&(g[0]=this.type),this.value}get isScalar(){return this.value instanceof Be}get isVector(){return this.value instanceof Me||this.value instanceof Ue}get scalarValue(){return this.value instanceof Be?this.value.value:(console.error("Value is not scalar."),0)}get vectorValue(){return this.value instanceof Me||this.value instanceof Ue?this.value.data:(console.error("Value is not a vector or matrix."),new Float32Array(0))}}class ye extends fe{constructor(i,g){super(),this.type=i,this.value=g}get astNodeType(){return"bitcastExpr"}search(i){this.value.search(i)}}class ve extends fe{constructor(i){super(),this.index=i}search(i){this.index.search(i)}}class we extends fe{constructor(){super()}}class ke extends we{constructor(i,g){super(),this.operator=i,this.right=g}get astNodeType(){return"unaryOp"}constEvaluate(i,g){return i.evalExpression(this,i.context)}search(i){this.right.search(i)}}class Ie extends we{constructor(i,g,x){super(),this.operator=i,this.left=g,this.right=x}get astNodeType(){return"binaryOp"}_getPromotedType(i,g){return i.name===g.name?i:"f32"===i.name||"f32"===g.name?ae.f32:"u32"===i.name||"u32"===g.name?ae.u32:ae.i32}constEvaluate(i,g){return i.evalExpression(this,i.context)}search(i){this.left.search(i),this.right.search(i)}}class Te extends A{constructor(i){super(),this.body=i}search(i){i(this),this.searchBlock(this.body,i)}}class Se extends fe{constructor(){super()}get astNodeType(){return"default"}}class Ae extends Te{constructor(i,g){super(g),this.selectors=i}get astNodeType(){return"case"}search(i){this.searchBlock(this.body,i)}}class Ee extends Te{constructor(i){super(i)}get astNodeType(){return"default"}search(i){this.searchBlock(this.body,i)}}class $e extends A{constructor(i,g,x){super(),this.name=i,this.type=g,this.attributes=x}get astNodeType(){return"argument"}}class Le extends A{constructor(i,g){super(),this.condition=i,this.body=g}get astNodeType(){return"elseif"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class Ce extends A{constructor(i,g,x){super(),this.name=i,this.type=g,this.attributes=x}get astNodeType(){return"member"}}class De extends A{constructor(i,g){super(),this.name=i,this.value=g}get astNodeType(){return"attribute"}}class Ne{constructor(i,g){this.parent=null,this.typeInfo=i,this.parent=g,this.id=Ne._id++}clone(){throw`Clone:Not implemented for ${this.constructor.name}`}setDataValue(i,g,x,_){console.error(`SetDataValue:Not implemented for ${this.constructor.name}`)}getSubData(i,g,x){return console.error(`GetDataValue:Not implemented for ${this.constructor.name}`),null}toString(){return`<${this.typeInfo.getTypeName()}>`}}Ne._id=0;class Ve extends Ne{constructor(){super(new e("void",null),null)}toString(){return"void"}}Ve.void=new Ve;class Oe extends Ne{constructor(i){super(new r("pointer",i.typeInfo,null),null),this.reference=i}clone(){return this}setDataValue(i,g,x,_){this.reference.setDataValue(i,g,x,_)}getSubData(i,g,x){return g?this.reference.getSubData(i,g,x):this}toString(){return`&${this.reference.toString()}`}}class Be extends Ne{constructor(i,g,x=null){super(g,x),i instanceof Int32Array||i instanceof Uint32Array||i instanceof Float32Array?this.data=i:"x32"===this.typeInfo.name?i-Math.floor(i)!==0?this.data=new Float32Array([i]):this.data=i>=0?new Uint32Array([i]):new Int32Array([i]):"i32"===this.typeInfo.name||"bool"===this.typeInfo.name?this.data=new Int32Array([i]):"u32"===this.typeInfo.name?this.data=new Uint32Array([i]):"f32"===this.typeInfo.name||"f16"===this.typeInfo.name?this.data=new Float32Array([i]):console.error("ScalarData2:Invalid type",g)}clone(){if(this.data instanceof Float32Array)return new Be(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Be(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Be(new Uint32Array(this.data),this.typeInfo,null);throw"ScalarData:Invalid data type"}get value(){return this.data[0]}set value(i){this.data[0]=i}setDataValue(i,g,x,_){if(x)return void console.error("SetDataValue:Scalar data does not support postfix",x);if(!(g instanceof Be))return void console.error("SetDataValue:Invalid value",g);let v=g.data[0];"i32"===this.typeInfo.name||"u32"===this.typeInfo.name?v=Math.floor(v):"bool"===this.typeInfo.name&&(v=v?1:0),this.data[0]=v}getSubData(i,g,x){return g?(console.error("getSubData:Scalar data does not support postfix",g),null):this}toString(){return`${this.value}`}}function Fe(i,g,x){const _=g.length;return 2===_?"f32"===x?new Me(new Float32Array(g),i.getTypeInfo("vec2f")):"i32"===x||"bool"===x?new Me(new Int32Array(g),i.getTypeInfo("vec2i")):"u32"===x?new Me(new Uint32Array(g),i.getTypeInfo("vec2u")):"f16"===x?new Me(new Float32Array(g),i.getTypeInfo("vec2h")):(console.error(`getSubData:Unknown format ${x}`),null):3===_?"f32"===x?new Me(new Float32Array(g),i.getTypeInfo("vec3f")):"i32"===x||"bool"===x?new Me(new Int32Array(g),i.getTypeInfo("vec3i")):"u32"===x?new Me(new Uint32Array(g),i.getTypeInfo("vec3u")):"f16"===x?new Me(new Float32Array(g),i.getTypeInfo("vec3h")):(console.error(`getSubData:Unknown format ${x}`),null):4===_?"f32"===x?new Me(new Float32Array(g),i.getTypeInfo("vec4f")):"i32"===x||"bool"===x?new Me(new Int32Array(g),i.getTypeInfo("vec4i")):"u32"===x?new Me(new Uint32Array(g),i.getTypeInfo("vec4u")):"f16"===x?new Me(new Float32Array(g),i.getTypeInfo("vec4h")):(console.error(`getSubData:Unknown format ${x}`),null):(console.error(`getSubData:Invalid vector size ${g.length}`),null)}class Me extends Ne{constructor(i,g,x=null){if(super(g,x),i instanceof Float32Array||i instanceof Uint32Array||i instanceof Int32Array)this.data=i;else{const g=this.typeInfo.name;"vec2f"===g||"vec3f"===g||"vec4f"===g?this.data=new Float32Array(i):"vec2i"===g||"vec3i"===g||"vec4i"===g?this.data=new Int32Array(i):"vec2u"===g||"vec3u"===g||"vec4u"===g?this.data=new Uint32Array(i):"vec2h"===g||"vec3h"===g||"vec4h"===g?this.data=new Float32Array(i):"vec2b"===g||"vec3b"===g||"vec4b"===g?this.data=new Int32Array(i):"vec2"===g||"vec3"===g||"vec4"===g?this.data=new Float32Array(i):console.error(`VectorData:Invalid type ${g}`)}}clone(){if(this.data instanceof Float32Array)return new Me(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Me(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Me(new Uint32Array(this.data),this.typeInfo,null);throw"VectorData:Invalid data type"}setDataValue(i,g,x,_){x instanceof pe?console.error("TODO:Set vector postfix"):g instanceof Me?this.data=g.data:console.error("SetDataValue:Invalid value",g)}getSubData(i,g,x){if(null===g)return this;let _=i.getTypeInfo("f32");if(this.typeInfo instanceof a)_=this.typeInfo.format||_;else{const g=this.typeInfo.name;"vec2f"===g||"vec3f"===g||"vec4f"===g?_=i.getTypeInfo("f32"):"vec2i"===g||"vec3i"===g||"vec4i"===g?_=i.getTypeInfo("i32"):"vec2b"===g||"vec3b"===g||"vec4b"===g?_=i.getTypeInfo("bool"):"vec2u"===g||"vec3u"===g||"vec4u"===g?_=i.getTypeInfo("u32"):"vec2h"===g||"vec3h"===g||"vec4h"===g?_=i.getTypeInfo("f16"):console.error(`GetSubData:Unknown type ${g}`)}let v=this;for(;null!==g&&null!==v;){if(g instanceof ve){const b=g.index;let y=-1;if(b instanceof xe){if(!(b.value instanceof Be))return console.error(`GetSubData:Invalid array index ${b.value}`),null;y=b.value.value}else{const g=i.evalExpression(b,x);if(!(g instanceof Be))return console.error("GetSubData:Unknown index type",b),null;y=g.value}if(y<0||y>=v.data.length)return console.error("GetSubData:Index out of range",y),null;if(v.data instanceof Float32Array){const i=new Float32Array(v.data.buffer,v.data.byteOffset+4*y,1);return new Be(i,_)}if(v.data instanceof Int32Array){const i=new Int32Array(v.data.buffer,v.data.byteOffset+4*y,1);return new Be(i,_)}if(v.data instanceof Uint32Array){const i=new Uint32Array(v.data.buffer,v.data.byteOffset+4*y,1);return new Be(i,_)}throw"GetSubData:Invalid data type"}if(!(g instanceof pe))return console.error("GetSubData:Unknown postfix",g),null;{const x=g.value.toLowerCase();if(1===x.length){let i=0;if("x"===x||"r"===x)i=0;else if("y"===x||"g"===x)i=1;else if("z"===x||"b"===x)i=2;else{if("w"!==x&&"a"!==x)return console.error(`GetSubData:Unknown member ${x}`),null;i=3}if(this.data instanceof Float32Array){let g=new Float32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Be(g,_,this)}if(this.data instanceof Int32Array){let g=new Int32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Be(g,_,this)}if(this.data instanceof Uint32Array){let g=new Uint32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Be(g,_,this)}}const b=[];for(const i of x)"x"===i||"r"===i?b.push(this.data[0]):"y"===i||"g"===i?b.push(this.data[1]):"z"===i||"b"===i?b.push(this.data[2]):"w"===i||"a"===i?b.push(this.data[3]):console.error(`GetDataValue:Unknown member ${i}`);v=Fe(i,b,_.name)}g=g.postfix}return v}toString(){let i=`${this.data[0]}`;for(let g=1;g<this.data.length;++g)i+=`,${this.data[g]}`;return i}}class Ue extends Ne{constructor(i,g,x=null){super(g,x),i instanceof Float32Array?this.data=i:this.data=new Float32Array(i)}clone(){return new Ue(new Float32Array(this.data),this.typeInfo,null)}setDataValue(i,g,x,_){x instanceof pe?console.error("TODO:Set matrix postfix"):g instanceof Ue?this.data=g.data:console.error("SetDataValue:Invalid value",g)}getSubData(i,g,x){if(null===g)return this;const _=this.typeInfo.name;if(i.getTypeInfo("f32"),this.typeInfo instanceof a)this.typeInfo.format;else if(_.endsWith("f"))i.getTypeInfo("f32");else if(_.endsWith("i"))i.getTypeInfo("i32");else if(_.endsWith("u"))i.getTypeInfo("u32");else{if(!_.endsWith("h"))return console.error(`GetDataValue:Unknown type ${_}`),null;i.getTypeInfo("f16")}if(g instanceof ve){const v=g.index;let b=-1;if(v instanceof xe){if(!(v.value instanceof Be))return console.error(`GetDataValue:Invalid array index ${v.value}`),null;b=v.value.value}else{const g=i.evalExpression(v,x);if(!(g instanceof Be))return console.error("GetDataValue:Unknown index type",v),null;b=g.value}if(b<0||b>=this.data.length)return console.error("GetDataValue:Index out of range",b),null;const y=_.endsWith("h")?"h":"f";let S;if("mat2x2"===_||"mat2x2f"===_||"mat2x2h"===_||"mat3x2"===_||"mat3x2f"===_||"mat3x2h"===_||"mat4x2"===_||"mat4x2f"===_||"mat4x2h"===_)S=new Me(new Float32Array(this.data.buffer,this.data.byteOffset+2*b*4,2),i.getTypeInfo(`vec2${y}`));else if("mat2x3"===_||"mat2x3f"===_||"mat2x3h"===_||"mat3x3"===_||"mat3x3f"===_||"mat3x3h"===_||"mat4x3"===_||"mat4x3f"===_||"mat4x3h"===_)S=new Me(new Float32Array(this.data.buffer,this.data.byteOffset+3*b*4,3),i.getTypeInfo(`vec3${y}`));else{if("mat2x4"!==_&&"mat2x4f"!==_&&"mat2x4h"!==_&&"mat3x4"!==_&&"mat3x4f"!==_&&"mat3x4h"!==_&&"mat4x4"!==_&&"mat4x4f"!==_&&"mat4x4h"!==_)return console.error(`GetDataValue:Unknown type ${_}`),null;S=new Me(new Float32Array(this.data.buffer,this.data.byteOffset+4*b*4,4),i.getTypeInfo(`vec4${y}`))}return g.postfix?S.getSubData(i,g.postfix,x):S}return console.error("GetDataValue:Invalid postfix",g),null}toString(){let i=`${this.data[0]}`;for(let g=1;g<this.data.length;++g)i+=`,${this.data[g]}`;return i}}class Pe extends Ne{constructor(i,g,x=0,_=null){super(g,_),this.buffer=i instanceof ArrayBuffer?i:i.buffer,this.offset=x}clone(){const i=new Uint8Array(new Uint8Array(this.buffer,this.offset,this.typeInfo.size));return new Pe(i.buffer,this.typeInfo,0,null)}setDataValue(i,g,x,_){if(null===g)return void console.log("setDataValue:NULL data.");let v=this.offset,b=this.typeInfo;for(;x;){if(x instanceof ve)if(b instanceof s){const g=x.index;if(g instanceof xe){if(!(g.value instanceof Be))return void console.error(`SetDataValue:Invalid index type ${g.value}`);v+=g.value.value*b.stride}else{const x=i.evalExpression(g,_);if(!(x instanceof Be))return void console.error("SetDataValue:Unknown index type",g);v+=x.value*b.stride}b=b.format}else console.error(`SetDataValue:Type ${b.getTypeName()} is not an array`);else{if(!(x instanceof pe))return void console.error("SetDataValue:Unknown postfix type",x);{const i=x.value;if(b instanceof n){let g=!1;for(const x of b.members)if(x.name===i){v+=x.offset,b=x.type,g=!0;break}if(!g)return void console.error(`SetDataValue:Member ${i} not found`)}else if(b instanceof e){const x=b.getTypeName();let _=0;if("x"===i||"r"===i)_=0;else if("y"===i||"g"===i)_=1;else if("z"===i||"b"===i)_=2;else{if("w"!==i&&"a"!==i)return void console.error(`SetDataValue:Unknown member ${i}`);_=3}if(!(g instanceof Be))return void console.error("SetDataValue:Invalid value",g);const y=g.value;return"vec2f"===x?void(new Float32Array(this.buffer,v,2)[_]=y):"vec3f"===x?void(new Float32Array(this.buffer,v,3)[_]=y):"vec4f"===x?void(new Float32Array(this.buffer,v,4)[_]=y):"vec2i"===x?void(new Int32Array(this.buffer,v,2)[_]=y):"vec3i"===x?void(new Int32Array(this.buffer,v,3)[_]=y):"vec4i"===x?void(new Int32Array(this.buffer,v,4)[_]=y):"vec2u"===x?void(new Uint32Array(this.buffer,v,2)[_]=y):"vec3u"===x?void(new Uint32Array(this.buffer,v,3)[_]=y):"vec4u"===x?void(new Uint32Array(this.buffer,v,4)[_]=y):void console.error(`SetDataValue:Type ${x} is not a struct`)}}}x=x.postfix}this.setData(i,g,b,v,_)}setData(i,g,x,_,v){const b=x.getTypeName();if("f32"!==b&&"f16"!==b)if("i32"!==b&&"atomic<i32>"!==b&&"x32"!==b)if("u32"!==b&&"atomic<u32>"!==b)if("bool"!==b){if("vec2f"===b||"vec2h"===b){const i=new Float32Array(this.buffer,_,2);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1]):(i[0]=g[0],i[1]=g[1]))}if("vec3f"===b||"vec3h"===b){const i=new Float32Array(this.buffer,_,3);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2]):(i[0]=g[0],i[1]=g[1],i[2]=g[2]))}if("vec4f"===b||"vec4h"===b){const i=new Float32Array(this.buffer,_,4);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3]))}if("vec2i"===b){const i=new Int32Array(this.buffer,_,2);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1]):(i[0]=g[0],i[1]=g[1]))}if("vec3i"===b){const i=new Int32Array(this.buffer,_,3);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2]):(i[0]=g[0],i[1]=g[1],i[2]=g[2]))}if("vec4i"===b){const i=new Int32Array(this.buffer,_,4);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3]))}if("vec2u"===b){const i=new Uint32Array(this.buffer,_,2);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1]):(i[0]=g[0],i[1]=g[1]))}if("vec3u"===b){const i=new Uint32Array(this.buffer,_,3);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2]):(i[0]=g[0],i[1]=g[1],i[2]=g[2]))}if("vec4u"===b){const i=new Uint32Array(this.buffer,_,4);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3]))}if("vec2b"===b){const i=new Uint32Array(this.buffer,_,2);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1]):(i[0]=g[0],i[1]=g[1]))}if("vec3b"===b){const i=new Uint32Array(this.buffer,_,3);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2]):(i[0]=g[0],i[1]=g[1],i[2]=g[2]))}if("vec4b"===b){const i=new Uint32Array(this.buffer,_,4);return void(g instanceof Me?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3]))}if("mat2x2f"===b||"mat2x2h"===b){const i=new Float32Array(this.buffer,_,4);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3]))}if("mat2x3f"===b||"mat2x3h"===b){const i=new Float32Array(this.buffer,_,6);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5]))}if("mat2x4f"===b||"mat2x4h"===b){const i=new Float32Array(this.buffer,_,8);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5],i[6]=g.data[6],i[7]=g.data[7]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7]))}if("mat3x2f"===b||"mat3x2h"===b){const i=new Float32Array(this.buffer,_,6);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5]))}if("mat3x3f"===b||"mat3x3h"===b){const i=new Float32Array(this.buffer,_,9);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5],i[6]=g.data[6],i[7]=g.data[7],i[8]=g.data[8]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8]))}if("mat3x4f"===b||"mat3x4h"===b){const i=new Float32Array(this.buffer,_,12);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5],i[6]=g.data[6],i[7]=g.data[7],i[8]=g.data[8],i[9]=g.data[9],i[10]=g.data[10],i[11]=g.data[11]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8],i[9]=g[9],i[10]=g[10],i[11]=g[11]))}if("mat4x2f"===b||"mat4x2h"===b){const i=new Float32Array(this.buffer,_,8);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5],i[6]=g.data[6],i[7]=g.data[7]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7]))}if("mat4x3f"===b||"mat4x3h"===b){const i=new Float32Array(this.buffer,_,12);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5],i[6]=g.data[6],i[7]=g.data[7],i[8]=g.data[8],i[9]=g.data[9],i[10]=g.data[10],i[11]=g.data[11]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8],i[9]=g[9],i[10]=g[10],i[11]=g[11]))}if("mat4x4f"===b||"mat4x4h"===b){const i=new Float32Array(this.buffer,_,16);return void(g instanceof Ue?(i[0]=g.data[0],i[1]=g.data[1],i[2]=g.data[2],i[3]=g.data[3],i[4]=g.data[4],i[5]=g.data[5],i[6]=g.data[6],i[7]=g.data[7],i[8]=g.data[8],i[9]=g.data[9],i[10]=g.data[10],i[11]=g.data[11],i[12]=g.data[12],i[13]=g.data[13],i[14]=g.data[14],i[15]=g.data[15]):(i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8],i[9]=g[9],i[10]=g[10],i[11]=g[11],i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15]))}if(g instanceof Pe){if(x===g.typeInfo)return void new Uint8Array(this.buffer,_,g.buffer.byteLength).set(new Uint8Array(g.buffer));console.error("SetDataValue:Type mismatch",b,g.typeInfo.getTypeName())}else console.error(`SetData:Unknown type ${b}`)}else g instanceof Be&&(new Int32Array(this.buffer,_,1)[0]=g.value);else g instanceof Be&&(new Uint32Array(this.buffer,_,1)[0]=g.value);else g instanceof Be&&(new Int32Array(this.buffer,_,1)[0]=g.value);else g instanceof Be&&(new Float32Array(this.buffer,_,1)[0]=g.value)}getSubData(i,g,x){var _,v,b;if(null===g)return this;let y=this.offset,S=this.typeInfo;for(;g;){if(g instanceof ve){const _=g.index,v=_ instanceof fe?i.evalExpression(_,x):_;let b=0;if(v instanceof Be?b=v.value:"number"==typeof v?b=v:console.error("GetDataValue:Invalid index type",_),S instanceof s)y+=b*S.stride,S=S.format;else{const g=S.getTypeName();"mat4x4"===g||"mat4x4f"===g||"mat4x4h"===g?(y+=16*b,S=i.getTypeInfo("vec4f")):console.error(`getDataValue:Type ${S.getTypeName()} is not an array`)}}else{if(!(g instanceof pe))return console.error("GetDataValue:Unknown postfix type",g),null;{const x=g.value;if(S instanceof n){let i=!1;for(const g of S.members)if(g.name===x){y+=g.offset,S=g.type,i=!0;break}if(!i)return console.error(`GetDataValue:Member ${x} not found`),null}else if(S instanceof e){const g=S.getTypeName();if("vec2f"===g||"vec3f"===g||"vec4f"===g||"vec2i"===g||"vec3i"===g||"vec4i"===g||"vec2u"===g||"vec3u"===g||"vec4u"===g||"vec2b"===g||"vec3b"===g||"vec4b"===g||"vec2h"===g||"vec3h"===g||"vec4h"===g||"vec2"===g||"vec3"===g||"vec4"===g){if(x.length>0&&x.length<5){let _="f";const v=[];for(let b=0;b<x.length;++b){const S=x[b].toLowerCase();let w=0;if("x"===S||"r"===S)w=0;else if("y"===S||"g"===S)w=1;else if("z"===S||"b"===S)w=2;else{if("w"!==S&&"a"!==S)return console.error(`Unknown member ${x}`),null;w=3}if(1===x.length){if(g.endsWith("f"))return this.buffer.byteLength<y+4*w+4?(console.log("Insufficient buffer data"),null):new Be(new Float32Array(this.buffer,y+4*w,1),i.getTypeInfo("f32"),this);if(g.endsWith("h"))return new Be(new Float32Array(this.buffer,y+4*w,1),i.getTypeInfo("f16"),this);if(g.endsWith("i"))return new Be(new Int32Array(this.buffer,y+4*w,1),i.getTypeInfo("i32"),this);if(g.endsWith("b"))return new Be(new Int32Array(this.buffer,y+4*w,1),i.getTypeInfo("bool"),this);if(g.endsWith("u"))return new Be(new Uint32Array(this.buffer,y+4*w,1),i.getTypeInfo("i32"),this)}if("vec2f"===g)v.push(new Float32Array(this.buffer,y,2)[w]);else if("vec3f"===g){if(y+12>=this.buffer.byteLength)return console.log("Insufficient buffer data"),null;const i=new Float32Array(this.buffer,y,3);v.push(i[w])}else if("vec4f"===g)v.push(new Float32Array(this.buffer,y,4)[w]);else if("vec2i"===g)_="i",v.push(new Int32Array(this.buffer,y,2)[w]);else if("vec3i"===g)_="i",v.push(new Int32Array(this.buffer,y,3)[w]);else if("vec4i"===g)_="i",v.push(new Int32Array(this.buffer,y,4)[w]);else if("vec2u"===g){_="u";const i=new Uint32Array(this.buffer,y,2);v.push(i[w])}else"vec3u"===g?(_="u",v.push(new Uint32Array(this.buffer,y,3)[w])):"vec4u"===g&&(_="u",v.push(new Uint32Array(this.buffer,y,4)[w]))}return 2===v.length?S=i.getTypeInfo(`vec2${_}`):3===v.length?S=i.getTypeInfo(`vec3${_}`):4===v.length?S=i.getTypeInfo(`vec4${_}`):console.error(`GetDataValue:Invalid vector length ${v.length}`),new Me(v,S,null)}return console.error(`GetDataValue:Unknown member ${x}`),null}return console.error(`GetDataValue:Type ${g} is not a struct`),null}}}g=g.postfix}const w=S.getTypeName();return"f32"===w?new Be(new Float32Array(this.buffer,y,1),S,this):"i32"===w?new Be(new Int32Array(this.buffer,y,1),S,this):"u32"===w?new Be(new Uint32Array(this.buffer,y,1),S,this):"vec2f"===w?new Me(new Float32Array(this.buffer,y,2),S,this):"vec3f"===w?new Me(new Float32Array(this.buffer,y,3),S,this):"vec4f"===w?new Me(new Float32Array(this.buffer,y,4),S,this):"vec2i"===w?new Me(new Int32Array(this.buffer,y,2),S,this):"vec3i"===w?new Me(new Int32Array(this.buffer,y,3),S,this):"vec4i"===w?new Me(new Int32Array(this.buffer,y,4),S,this):"vec2u"===w?new Me(new Uint32Array(this.buffer,y,2),S,this):"vec3u"===w?new Me(new Uint32Array(this.buffer,y,3),S,this):"vec4u"===w?new Me(new Uint32Array(this.buffer,y,4),S,this):S instanceof a&&"atomic"===S.name?"u32"===(null===(_=S.format)||void 0===_?void 0:_.name)?new Be(new Uint32Array(this.buffer,y,1)[0],S.format,this):"i32"===(null===(v=S.format)||void 0===v?void 0:v.name)?new Be(new Int32Array(this.buffer,y,1)[0],S.format,this):(console.error(`GetDataValue:Invalid atomic format ${null===(b=S.format)||void 0===b?void 0:b.name}`),null):new Pe(this.buffer,S,y,this)}toString(){let i="";if(this.typeInfo instanceof s)if("f32"===this.typeInfo.format.name){const g=new Float32Array(this.buffer,this.offset);i=`[${g[0]}`;for(let x=1;x<g.length;++x)i+=`,${g[x]}`}else if("i32"===this.typeInfo.format.name){const g=new Int32Array(this.buffer,this.offset);i=`[${g[0]}`;for(let x=1;x<g.length;++x)i+=`,${g[x]}`}else if("u32"===this.typeInfo.format.name){const g=new Uint32Array(this.buffer,this.offset);i=`[${g[0]}`;for(let x=1;x<g.length;++x)i+=`,${g[x]}`}else if("vec2f"===this.typeInfo.format.name){const g=new Float32Array(this.buffer,this.offset);i=`[${g[0]},${g[1]}]`;for(let x=1;x<g.length/2;++x)i+=`,[${g[2*x]},${g[2*x+1]}]`}else if("vec3f"===this.typeInfo.format.name){const g=new Float32Array(this.buffer,this.offset);i=`[${g[0]},${g[1]},${g[2]}]`;for(let x=4;x<g.length;x+=4)i+=`,[${g[x]},${g[x+1]},${g[x+2]}]`}else if("vec4f"===this.typeInfo.format.name){const g=new Float32Array(this.buffer,this.offset);i=`[${g[0]},${g[1]},${g[2]},${g[3]}]`;for(let x=4;x<g.length;x+=4)i+=`,[${g[x]},${g[x+1]},${g[x+2]},${g[x+3]}]`}else i="[...]";else this.typeInfo instanceof n?i+="{...}":i="[...]";return i}}class We extends Ne{constructor(i,g,x,_){super(g,null),this.data=i,this.descriptor=x,this.view=_}clone(){return new We(this.data,this.typeInfo,this.descriptor,this.view)}get width(){var i,g;const x=this.descriptor.size;return x instanceof Array&&x.length>0?null!==(i=x[0])&&void 0!==i?i:0:x instanceof Object&&null!==(g=x.width)&&void 0!==g?g:0}get height(){var i,g;const x=this.descriptor.size;return x instanceof Array&&x.length>1?null!==(i=x[1])&&void 0!==i?i:0:x instanceof Object&&null!==(g=x.height)&&void 0!==g?g:0}get depthOrArrayLayers(){var i,g;const x=this.descriptor.size;return x instanceof Array&&x.length>2?null!==(i=x[2])&&void 0!==i?i:0:x instanceof Object&&null!==(g=x.depthOrArrayLayers)&&void 0!==g?g:0}get format(){var i;return this.descriptor&&null!==(i=this.descriptor.format)&&void 0!==i?i:"rgba8unorm"}get sampleCount(){var i;return this.descriptor&&null!==(i=this.descriptor.sampleCount)&&void 0!==i?i:1}get mipLevelCount(){var i;return this.descriptor&&null!==(i=this.descriptor.mipLevelCount)&&void 0!==i?i:1}get dimension(){var i;return this.descriptor&&null!==(i=this.descriptor.dimension)&&void 0!==i?i:"2d"}getMipLevelSize(i){if(i>=this.mipLevelCount)return[0,0,0];const g=[this.width,this.height,this.depthOrArrayLayers];for(let x=0;x<g.length;++x)g[x]=Math.max(1,g[x]>>i);return g}get texelByteSize(){const i=this.format,g=wt[i];return g?g.isDepthStencil?4:g.bytesPerBlock:0}get bytesPerRow(){return this.width*this.texelByteSize}get isDepthStencil(){const i=this.format,g=wt[i];return!!g&&g.isDepthStencil}getGpuSize(){const i=this.format,g=wt[i],x=this.width;if(!i||x<=0||!g)return-1;const _=this.height,v=this.depthOrArrayLayers,b=this.dimension;return x/g.blockWidth*("1d"===b?1:_/g.blockHeight)*g.bytesPerBlock*v}getPixel(i,g,x=0,_=0){const v=this.texelByteSize,b=this.bytesPerRow,y=this.height,S=this.data[_];return function(i,g,x,_,v,b,y,S,w){const L=_*(y>>=v)*(b>>=v)+x*y+g*S;switch(w){case"r8unorm":return[I(i,L,"8unorm",1)[0]];case"r8snorm":return[I(i,L,"8snorm",1)[0]];case"r8uint":return[I(i,L,"8uint",1)[0]];case"r8sint":return[I(i,L,"8sint",1)[0]];case"rg8unorm":{const g=I(i,L,"8unorm",2);return[g[0],g[1]]}case"rg8snorm":{const g=I(i,L,"8snorm",2);return[g[0],g[1]]}case"rg8uint":{const g=I(i,L,"8uint",2);return[g[0],g[1]]}case"rg8sint":{const g=I(i,L,"8sint",2);return[g[0],g[1]]}case"rgba8unorm-srgb":case"rgba8unorm":{const g=I(i,L,"8unorm",4);return[g[0],g[1],g[2],g[3]]}case"rgba8snorm":{const g=I(i,L,"8snorm",4);return[g[0],g[1],g[2],g[3]]}case"rgba8uint":{const g=I(i,L,"8uint",4);return[g[0],g[1],g[2],g[3]]}case"rgba8sint":{const g=I(i,L,"8sint",4);return[g[0],g[1],g[2],g[3]]}case"bgra8unorm-srgb":case"bgra8unorm":{const g=I(i,L,"8unorm",4);return[g[2],g[1],g[0],g[3]]}case"r16uint":return[I(i,L,"16uint",1)[0]];case"r16sint":return[I(i,L,"16sint",1)[0]];case"r16float":return[I(i,L,"16float",1)[0]];case"rg16uint":{const g=I(i,L,"16uint",2);return[g[0],g[1]]}case"rg16sint":{const g=I(i,L,"16sint",2);return[g[0],g[1]]}case"rg16float":{const g=I(i,L,"16float",2);return[g[0],g[1]]}case"rgba16uint":{const g=I(i,L,"16uint",4);return[g[0],g[1],g[2],g[3]]}case"rgba16sint":{const g=I(i,L,"16sint",4);return[g[0],g[1],g[2],g[3]]}case"rgba16float":{const g=I(i,L,"16float",4);return[g[0],g[1],g[2],g[3]]}case"r32uint":return[I(i,L,"32uint",1)[0]];case"r32sint":return[I(i,L,"32sint",1)[0]];case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return[I(i,L,"32float",1)[0]];case"rg32uint":{const g=I(i,L,"32uint",2);return[g[0],g[1]]}case"rg32sint":{const g=I(i,L,"32sint",2);return[g[0],g[1]]}case"rg32float":{const g=I(i,L,"32float",2);return[g[0],g[1]]}case"rgba32uint":{const g=I(i,L,"32uint",4);return[g[0],g[1],g[2],g[3]]}case"rgba32sint":{const g=I(i,L,"32sint",4);return[g[0],g[1],g[2],g[3]]}case"rgba32float":{const g=I(i,L,"32float",4);return[g[0],g[1],g[2],g[3]]}case"rg11b10ufloat":{const g=new Uint32Array(i.buffer,L,1)[0],x=(4192256&g)>>11,_=(4290772992&g)>>22;return[w$1(2047&g),w$1(x),function(i){const g=112+(i>>5&31)<<23|(31&i)<<18;return St[0]=g,Mt[0]}(_),1]}}return null}(new Uint8Array(S),i,g,x,_,y,b,v,this.format)}setPixel(i,g,x,_,v){const b=this.texelByteSize,y=this.bytesPerRow,S=this.height,w=this.data[_];!function(i,g,x,_,v,b,y,S,w,L){const k=_*(y>>=v)*(b>>=v)+x*y+g*S;switch(w){case"r8unorm":return void T(i,k,"8unorm",1,L);case"r8snorm":return void T(i,k,"8snorm",1,L);case"r8uint":return void T(i,k,"8uint",1,L);case"r8sint":return void T(i,k,"8sint",1,L);case"rg8unorm":return void T(i,k,"8unorm",2,L);case"rg8snorm":return void T(i,k,"8snorm",2,L);case"rg8uint":return void T(i,k,"8uint",2,L);case"rg8sint":return void T(i,k,"8sint",2,L);case"rgba8unorm-srgb":case"rgba8unorm":case"bgra8unorm-srgb":case"bgra8unorm":return void T(i,k,"8unorm",4,L);case"rgba8snorm":return void T(i,k,"8snorm",4,L);case"rgba8uint":return void T(i,k,"8uint",4,L);case"rgba8sint":return void T(i,k,"8sint",4,L);case"r16uint":return void T(i,k,"16uint",1,L);case"r16sint":return void T(i,k,"16sint",1,L);case"r16float":return void T(i,k,"16float",1,L);case"rg16uint":return void T(i,k,"16uint",2,L);case"rg16sint":return void T(i,k,"16sint",2,L);case"rg16float":return void T(i,k,"16float",2,L);case"rgba16uint":return void T(i,k,"16uint",4,L);case"rgba16sint":return void T(i,k,"16sint",4,L);case"rgba16float":return void T(i,k,"16float",4,L);case"r32uint":return void T(i,k,"32uint",1,L);case"r32sint":return void T(i,k,"32sint",1,L);case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return void T(i,k,"32float",1,L);case"rg32uint":return void T(i,k,"32uint",2,L);case"rg32sint":return void T(i,k,"32sint",2,L);case"rg32float":return void T(i,k,"32float",2,L);case"rgba32uint":return void T(i,k,"32uint",4,L);case"rgba32sint":return void T(i,k,"32sint",4,L);case"rgba32float":return void T(i,k,"32float",4,L);case"rg11b10ufloat":console.error("TODO:rg11b10ufloat not supported for writing")}}(new Uint8Array(w),i,g,x,_,S,y,b,this.format,v)}}(i=>{i[i.token=0]="token",i[i.keyword=1]="keyword",i[i.reserved=2]="reserved"})(Et||(Et={}));class qe{constructor(i,g,x){this.name=i,this.type=g,this.rule=x}toString(){return this.name}}class He{}Bt=He,He.none=new qe("",Et.reserved,""),He.eof=new qe("EOF",Et.token,""),He.reserved={asm:new qe("asm",Et.reserved,"asm"),bf16:new qe("bf16",Et.reserved,"bf16"),do:new qe("do",Et.reserved,"do"),enum:new qe("enum",Et.reserved,"enum"),f16:new qe("f16",Et.reserved,"f16"),f64:new qe("f64",Et.reserved,"f64"),handle:new qe("handle",Et.reserved,"handle"),i8:new qe("i8",Et.reserved,"i8"),i16:new qe("i16",Et.reserved,"i16"),i64:new qe("i64",Et.reserved,"i64"),mat:new qe("mat",Et.reserved,"mat"),premerge:new qe("premerge",Et.reserved,"premerge"),regardless:new qe("regardless",Et.reserved,"regardless"),typedef:new qe("typedef",Et.reserved,"typedef"),u8:new qe("u8",Et.reserved,"u8"),u16:new qe("u16",Et.reserved,"u16"),u64:new qe("u64",Et.reserved,"u64"),unless:new qe("unless",Et.reserved,"unless"),using:new qe("using",Et.reserved,"using"),vec:new qe("vec",Et.reserved,"vec"),void:new qe("void",Et.reserved,"void")},He.keywords={array:new qe("array",Et.keyword,"array"),atomic:new qe("atomic",Et.keyword,"atomic"),bool:new qe("bool",Et.keyword,"bool"),f32:new qe("f32",Et.keyword,"f32"),i32:new qe("i32",Et.keyword,"i32"),mat2x2:new qe("mat2x2",Et.keyword,"mat2x2"),mat2x3:new qe("mat2x3",Et.keyword,"mat2x3"),mat2x4:new qe("mat2x4",Et.keyword,"mat2x4"),mat3x2:new qe("mat3x2",Et.keyword,"mat3x2"),mat3x3:new qe("mat3x3",Et.keyword,"mat3x3"),mat3x4:new qe("mat3x4",Et.keyword,"mat3x4"),mat4x2:new qe("mat4x2",Et.keyword,"mat4x2"),mat4x3:new qe("mat4x3",Et.keyword,"mat4x3"),mat4x4:new qe("mat4x4",Et.keyword,"mat4x4"),ptr:new qe("ptr",Et.keyword,"ptr"),sampler:new qe("sampler",Et.keyword,"sampler"),sampler_comparison:new qe("sampler_comparison",Et.keyword,"sampler_comparison"),struct:new qe("struct",Et.keyword,"struct"),texture_1d:new qe("texture_1d",Et.keyword,"texture_1d"),texture_2d:new qe("texture_2d",Et.keyword,"texture_2d"),texture_2d_array:new qe("texture_2d_array",Et.keyword,"texture_2d_array"),texture_3d:new qe("texture_3d",Et.keyword,"texture_3d"),texture_cube:new qe("texture_cube",Et.keyword,"texture_cube"),texture_cube_array:new qe("texture_cube_array",Et.keyword,"texture_cube_array"),texture_multisampled_2d:new qe("texture_multisampled_2d",Et.keyword,"texture_multisampled_2d"),texture_storage_1d:new qe("texture_storage_1d",Et.keyword,"texture_storage_1d"),texture_storage_2d:new qe("texture_storage_2d",Et.keyword,"texture_storage_2d"),texture_storage_2d_array:new qe("texture_storage_2d_array",Et.keyword,"texture_storage_2d_array"),texture_storage_3d:new qe("texture_storage_3d",Et.keyword,"texture_storage_3d"),texture_depth_2d:new qe("texture_depth_2d",Et.keyword,"texture_depth_2d"),texture_depth_2d_array:new qe("texture_depth_2d_array",Et.keyword,"texture_depth_2d_array"),texture_depth_cube:new qe("texture_depth_cube",Et.keyword,"texture_depth_cube"),texture_depth_cube_array:new qe("texture_depth_cube_array",Et.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new qe("texture_depth_multisampled_2d",Et.keyword,"texture_depth_multisampled_2d"),texture_external:new qe("texture_external",Et.keyword,"texture_external"),u32:new qe("u32",Et.keyword,"u32"),vec2:new qe("vec2",Et.keyword,"vec2"),vec3:new qe("vec3",Et.keyword,"vec3"),vec4:new qe("vec4",Et.keyword,"vec4"),bitcast:new qe("bitcast",Et.keyword,"bitcast"),block:new qe("block",Et.keyword,"block"),break:new qe("break",Et.keyword,"break"),case:new qe("case",Et.keyword,"case"),continue:new qe("continue",Et.keyword,"continue"),continuing:new qe("continuing",Et.keyword,"continuing"),default:new qe("default",Et.keyword,"default"),diagnostic:new qe("diagnostic",Et.keyword,"diagnostic"),discard:new qe("discard",Et.keyword,"discard"),else:new qe("else",Et.keyword,"else"),enable:new qe("enable",Et.keyword,"enable"),fallthrough:new qe("fallthrough",Et.keyword,"fallthrough"),false:new qe("false",Et.keyword,"false"),fn:new qe("fn",Et.keyword,"fn"),for:new qe("for",Et.keyword,"for"),function:new qe("function",Et.keyword,"function"),if:new qe("if",Et.keyword,"if"),let:new qe("let",Et.keyword,"let"),const:new qe("const",Et.keyword,"const"),loop:new qe("loop",Et.keyword,"loop"),while:new qe("while",Et.keyword,"while"),private:new qe("private",Et.keyword,"private"),read:new qe("read",Et.keyword,"read"),read_write:new qe("read_write",Et.keyword,"read_write"),return:new qe("return",Et.keyword,"return"),requires:new qe("requires",Et.keyword,"requires"),storage:new qe("storage",Et.keyword,"storage"),switch:new qe("switch",Et.keyword,"switch"),true:new qe("true",Et.keyword,"true"),alias:new qe("alias",Et.keyword,"alias"),type:new qe("type",Et.keyword,"type"),uniform:new qe("uniform",Et.keyword,"uniform"),var:new qe("var",Et.keyword,"var"),override:new qe("override",Et.keyword,"override"),workgroup:new qe("workgroup",Et.keyword,"workgroup"),write:new qe("write",Et.keyword,"write"),r8unorm:new qe("r8unorm",Et.keyword,"r8unorm"),r8snorm:new qe("r8snorm",Et.keyword,"r8snorm"),r8uint:new qe("r8uint",Et.keyword,"r8uint"),r8sint:new qe("r8sint",Et.keyword,"r8sint"),r16uint:new qe("r16uint",Et.keyword,"r16uint"),r16sint:new qe("r16sint",Et.keyword,"r16sint"),r16float:new qe("r16float",Et.keyword,"r16float"),rg8unorm:new qe("rg8unorm",Et.keyword,"rg8unorm"),rg8snorm:new qe("rg8snorm",Et.keyword,"rg8snorm"),rg8uint:new qe("rg8uint",Et.keyword,"rg8uint"),rg8sint:new qe("rg8sint",Et.keyword,"rg8sint"),r32uint:new qe("r32uint",Et.keyword,"r32uint"),r32sint:new qe("r32sint",Et.keyword,"r32sint"),r32float:new qe("r32float",Et.keyword,"r32float"),rg16uint:new qe("rg16uint",Et.keyword,"rg16uint"),rg16sint:new qe("rg16sint",Et.keyword,"rg16sint"),rg16float:new qe("rg16float",Et.keyword,"rg16float"),rgba8unorm:new qe("rgba8unorm",Et.keyword,"rgba8unorm"),rgba8unorm_srgb:new qe("rgba8unorm_srgb",Et.keyword,"rgba8unorm_srgb"),rgba8snorm:new qe("rgba8snorm",Et.keyword,"rgba8snorm"),rgba8uint:new qe("rgba8uint",Et.keyword,"rgba8uint"),rgba8sint:new qe("rgba8sint",Et.keyword,"rgba8sint"),bgra8unorm:new qe("bgra8unorm",Et.keyword,"bgra8unorm"),bgra8unorm_srgb:new qe("bgra8unorm_srgb",Et.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new qe("rgb10a2unorm",Et.keyword,"rgb10a2unorm"),rg11b10float:new qe("rg11b10float",Et.keyword,"rg11b10float"),rg32uint:new qe("rg32uint",Et.keyword,"rg32uint"),rg32sint:new qe("rg32sint",Et.keyword,"rg32sint"),rg32float:new qe("rg32float",Et.keyword,"rg32float"),rgba16uint:new qe("rgba16uint",Et.keyword,"rgba16uint"),rgba16sint:new qe("rgba16sint",Et.keyword,"rgba16sint"),rgba16float:new qe("rgba16float",Et.keyword,"rgba16float"),rgba32uint:new qe("rgba32uint",Et.keyword,"rgba32uint"),rgba32sint:new qe("rgba32sint",Et.keyword,"rgba32sint"),rgba32float:new qe("rgba32float",Et.keyword,"rgba32float"),static_assert:new qe("static_assert",Et.keyword,"static_assert")},He.tokens={decimal_float_literal:new qe("decimal_float_literal",Et.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/),hex_float_literal:new qe("hex_float_literal",Et.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/),int_literal:new qe("int_literal",Et.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new qe("uint_literal",Et.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),name:new qe("name",Et.token,/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u),ident:new qe("ident",Et.token,/[_a-zA-Z][0-9a-zA-Z_]*/),and:new qe("and",Et.token,"&"),and_and:new qe("and_and",Et.token,"&&"),arrow:new qe("arrow ",Et.token,"->"),attr:new qe("attr",Et.token,"@"),forward_slash:new qe("forward_slash",Et.token,"/"),bang:new qe("bang",Et.token,"!"),bracket_left:new qe("bracket_left",Et.token,"["),bracket_right:new qe("bracket_right",Et.token,"]"),brace_left:new qe("brace_left",Et.token,"{"),brace_right:new qe("brace_right",Et.token,"}"),colon:new qe("colon",Et.token,":"),comma:new qe("comma",Et.token,","),equal:new qe("equal",Et.token,"="),equal_equal:new qe("equal_equal",Et.token,"=="),not_equal:new qe("not_equal",Et.token,"!="),greater_than:new qe("greater_than",Et.token,">"),greater_than_equal:new qe("greater_than_equal",Et.token,">="),shift_right:new qe("shift_right",Et.token,">>"),less_than:new qe("less_than",Et.token,"<"),less_than_equal:new qe("less_than_equal",Et.token,"<="),shift_left:new qe("shift_left",Et.token,"<<"),modulo:new qe("modulo",Et.token,"%"),minus:new qe("minus",Et.token,"-"),minus_minus:new qe("minus_minus",Et.token,"--"),period:new qe("period",Et.token,"."),plus:new qe("plus",Et.token,"+"),plus_plus:new qe("plus_plus",Et.token,"++"),or:new qe("or",Et.token,"|"),or_or:new qe("or_or",Et.token,"||"),paren_left:new qe("paren_left",Et.token,"("),paren_right:new qe("paren_right",Et.token,")"),semicolon:new qe("semicolon",Et.token,";"),star:new qe("star",Et.token,"*"),tilde:new qe("tilde",Et.token,"~"),underscore:new qe("underscore",Et.token,"_"),xor:new qe("xor",Et.token,"^"),plus_equal:new qe("plus_equal",Et.token,"+="),minus_equal:new qe("minus_equal",Et.token,"-="),times_equal:new qe("times_equal",Et.token,"*="),division_equal:new qe("division_equal",Et.token,"/="),modulo_equal:new qe("modulo_equal",Et.token,"%="),and_equal:new qe("and_equal",Et.token,"&="),or_equal:new qe("or_equal",Et.token,"|="),xor_equal:new qe("xor_equal",Et.token,"^="),shift_right_equal:new qe("shift_right_equal",Et.token,">>="),shift_left_equal:new qe("shift_left_equal",Et.token,"<<=")},He.simpleTokens={"@":Bt.tokens.attr,"{":Bt.tokens.brace_left,"}":Bt.tokens.brace_right,":":Bt.tokens.colon,",":Bt.tokens.comma,"(":Bt.tokens.paren_left,")":Bt.tokens.paren_right,";":Bt.tokens.semicolon},He.literalTokens={"&":Bt.tokens.and,"&&":Bt.tokens.and_and,"->":Bt.tokens.arrow,"/":Bt.tokens.forward_slash,"!":Bt.tokens.bang,"[":Bt.tokens.bracket_left,"]":Bt.tokens.bracket_right,"=":Bt.tokens.equal,"==":Bt.tokens.equal_equal,"!=":Bt.tokens.not_equal,">":Bt.tokens.greater_than,">=":Bt.tokens.greater_than_equal,">>":Bt.tokens.shift_right,"<":Bt.tokens.less_than,"<=":Bt.tokens.less_than_equal,"<<":Bt.tokens.shift_left,"%":Bt.tokens.modulo,"-":Bt.tokens.minus,"--":Bt.tokens.minus_minus,".":Bt.tokens.period,"+":Bt.tokens.plus,"++":Bt.tokens.plus_plus,"|":Bt.tokens.or,"||":Bt.tokens.or_or,"*":Bt.tokens.star,"~":Bt.tokens.tilde,_:Bt.tokens.underscore,"^":Bt.tokens.xor,"+=":Bt.tokens.plus_equal,"-=":Bt.tokens.minus_equal,"*=":Bt.tokens.times_equal,"/=":Bt.tokens.division_equal,"%=":Bt.tokens.modulo_equal,"&=":Bt.tokens.and_equal,"|=":Bt.tokens.or_equal,"^=":Bt.tokens.xor_equal,">>=":Bt.tokens.shift_right_equal,"<<=":Bt.tokens.shift_left_equal},He.regexTokens={decimal_float_literal:Bt.tokens.decimal_float_literal,hex_float_literal:Bt.tokens.hex_float_literal,int_literal:Bt.tokens.int_literal,uint_literal:Bt.tokens.uint_literal,ident:Bt.tokens.ident},He.storage_class=[Bt.keywords.function,Bt.keywords.private,Bt.keywords.workgroup,Bt.keywords.uniform,Bt.keywords.storage],He.access_mode=[Bt.keywords.read,Bt.keywords.write,Bt.keywords.read_write],He.sampler_type=[Bt.keywords.sampler,Bt.keywords.sampler_comparison],He.sampled_texture_type=[Bt.keywords.texture_1d,Bt.keywords.texture_2d,Bt.keywords.texture_2d_array,Bt.keywords.texture_3d,Bt.keywords.texture_cube,Bt.keywords.texture_cube_array],He.multisampled_texture_type=[Bt.keywords.texture_multisampled_2d],He.storage_texture_type=[Bt.keywords.texture_storage_1d,Bt.keywords.texture_storage_2d,Bt.keywords.texture_storage_2d_array,Bt.keywords.texture_storage_3d],He.depth_texture_type=[Bt.keywords.texture_depth_2d,Bt.keywords.texture_depth_2d_array,Bt.keywords.texture_depth_cube,Bt.keywords.texture_depth_cube_array,Bt.keywords.texture_depth_multisampled_2d],He.texture_external_type=[Bt.keywords.texture_external],He.any_texture_type=[...Bt.sampled_texture_type,...Bt.multisampled_texture_type,...Bt.storage_texture_type,...Bt.depth_texture_type,...Bt.texture_external_type],He.texel_format=[Bt.keywords.r8unorm,Bt.keywords.r8snorm,Bt.keywords.r8uint,Bt.keywords.r8sint,Bt.keywords.r16uint,Bt.keywords.r16sint,Bt.keywords.r16float,Bt.keywords.rg8unorm,Bt.keywords.rg8snorm,Bt.keywords.rg8uint,Bt.keywords.rg8sint,Bt.keywords.r32uint,Bt.keywords.r32sint,Bt.keywords.r32float,Bt.keywords.rg16uint,Bt.keywords.rg16sint,Bt.keywords.rg16float,Bt.keywords.rgba8unorm,Bt.keywords.rgba8unorm_srgb,Bt.keywords.rgba8snorm,Bt.keywords.rgba8uint,Bt.keywords.rgba8sint,Bt.keywords.bgra8unorm,Bt.keywords.bgra8unorm_srgb,Bt.keywords.rgb10a2unorm,Bt.keywords.rg11b10float,Bt.keywords.rg32uint,Bt.keywords.rg32sint,Bt.keywords.rg32float,Bt.keywords.rgba16uint,Bt.keywords.rgba16sint,Bt.keywords.rgba16float,Bt.keywords.rgba32uint,Bt.keywords.rgba32sint,Bt.keywords.rgba32float],He.const_literal=[Bt.tokens.int_literal,Bt.tokens.uint_literal,Bt.tokens.decimal_float_literal,Bt.tokens.hex_float_literal,Bt.keywords.true,Bt.keywords.false],He.literal_or_ident=[Bt.tokens.ident,Bt.tokens.int_literal,Bt.tokens.uint_literal,Bt.tokens.decimal_float_literal,Bt.tokens.hex_float_literal,Bt.tokens.name],He.element_count_expression=[Bt.tokens.int_literal,Bt.tokens.uint_literal,Bt.tokens.ident],He.template_types=[Bt.keywords.vec2,Bt.keywords.vec3,Bt.keywords.vec4,Bt.keywords.mat2x2,Bt.keywords.mat2x3,Bt.keywords.mat2x4,Bt.keywords.mat3x2,Bt.keywords.mat3x3,Bt.keywords.mat3x4,Bt.keywords.mat4x2,Bt.keywords.mat4x3,Bt.keywords.mat4x4,Bt.keywords.atomic,Bt.keywords.bitcast,...Bt.any_texture_type],He.attribute_name=[Bt.tokens.ident,Bt.keywords.block,Bt.keywords.diagnostic],He.assignment_operators=[Bt.tokens.equal,Bt.tokens.plus_equal,Bt.tokens.minus_equal,Bt.tokens.times_equal,Bt.tokens.division_equal,Bt.tokens.modulo_equal,Bt.tokens.and_equal,Bt.tokens.or_equal,Bt.tokens.xor_equal,Bt.tokens.shift_right_equal,Bt.tokens.shift_left_equal],He.increment_operators=[Bt.tokens.plus_plus,Bt.tokens.minus_minus];class ze{constructor(i,g,x,_,v){this.type=i,this.lexeme=g,this.line=x,this.start=_,this.end=v}toString(){return this.lexeme}isTemplateType(){return-1!=He.template_types.indexOf(this.type)}isArrayType(){return this.type==He.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class Re{constructor(i){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=i?i:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new ze(He.eof,"",this._line,this._current,this._current)),this._tokens}scanToken(){let i=this._advance();if("\n"==i)return this._line++,!0;if(this._isWhitespace(i))return!0;if("/"==i){if("/"==this._peekAhead()){for(;"\n"!=i;){if(this._isAtEnd())return!0;i=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let g=1;for(;g>0;){if(this._isAtEnd())return!0;if(i=this._advance(),"\n"==i)this._line++;else if("*"==i){if("/"==this._peekAhead()&&(this._advance(),g--,0==g))return!0}else"/"==i&&"*"==this._peekAhead()&&(this._advance(),g++)}return!0}}const g=He.simpleTokens[i];if(g)return this._addToken(g),!0;let x=He.none;const _=this._isAlpha(i),v="_"===i;if(this._isAlphaNumeric(i)){let g=this._peekAhead();for(;this._isAlphaNumeric(g);)i+=this._advance(),g=this._peekAhead()}if(_){const g=He.keywords[i];if(g)return this._addToken(g),!0}if(_||v)return this._addToken(He.tokens.ident),!0;for(;;){let g=this._findType(i);const _=this._peekAhead();if("-"==i&&this._tokens.length>0){if("="==_)return this._current++,i+=_,this._addToken(He.tokens.minus_equal),!0;if("-"==_)return this._current++,i+=_,this._addToken(He.tokens.minus_minus),!0;const x=this._tokens.length-1;if((-1!=He.literal_or_ident.indexOf(this._tokens[x].type)||this._tokens[x].type==He.tokens.paren_right)&&">"!=_)return this._addToken(g),!0}if(">"==i&&(">"==_||"="==_)){let i=!1,x=this._tokens.length-1;for(let g=0;g<5&&x>=0&&-1===He.assignment_operators.indexOf(this._tokens[x].type);++g,--x)if(this._tokens[x].type===He.tokens.less_than){x>0&&this._tokens[x-1].isArrayOrTemplateType()&&(i=!0);break}if(i)return this._addToken(g),!0}if(g===He.none){let _=i,v=0;const b=2;for(let i=0;i<b;++i)if(_+=this._peekAhead(i),g=this._findType(_),g!==He.none){v=i;break}if(g===He.none)return x!==He.none&&(this._current--,this._addToken(x),!0);i=_,this._current+=v+1}if(x=g,this._isAtEnd())break;i+=this._advance()}return x!==He.none&&(this._addToken(x),!0)}_findType(i){for(const g in He.regexTokens){const x=He.regexTokens[g];if(this._match(i,x.rule))return x}return He.literalTokens[i]||He.none}_match(i,g){const x=g.exec(i);return x&&0==x.index&&x[0]==i}_isAtEnd(){return this._current>=this._source.length}_isAlpha(i){return!this._isNumeric(i)&&!this._isWhitespace(i)&&"_"!==i&&"."!==i&&"("!==i&&")"!==i&&"["!==i&&"]"!==i&&"{"!==i&&"}"!==i&&","!==i&&";"!==i&&":"!==i&&"="!==i&&"!"!==i&&"<"!==i&&">"!==i&&"+"!==i&&"-"!==i&&"*"!==i&&"/"!==i&&"%"!==i&&"&"!==i&&"|"!==i&&"^"!==i&&"~"!==i&&"@"!==i&&"#"!==i&&"?"!==i&&"'"!==i&&"`"!==i&&'"'!==i&&"\\"!==i&&"\n"!==i&&"\r"!==i&&"\t"!==i&&"\0"!==i}_isNumeric(i){return i>="0"&&i<="9"}_isAlphaNumeric(i){return this._isAlpha(i)||this._isNumeric(i)||"_"===i}_isWhitespace(i){return" "==i||"\t"==i||"\r"==i}_advance(i=0){let g=this._source[this._current];return i=i||0,i++,this._current+=i,g}_peekAhead(i=0){return i=i||0,this._current+i>=this._source.length?"\0":this._source[this._current+i]}_addToken(i){const g=this._source.substring(this._start,this._current);this._tokens.push(new ze(i,g,this._line,this._start,this._current))}}function Ge(i){return Array.isArray(i)||(null==i?void 0:i.buffer)instanceof ArrayBuffer}const It=new Float32Array(1),Lt=new Uint32Array(It.buffer),Ut=new Uint32Array(It.buffer),Dt=new Int32Array(1),At=new Float32Array(Dt.buffer),kt=new Uint32Array(Dt.buffer),Ot=new Uint32Array(1),Gt=new Float32Array(Ot.buffer),Nt=new Int32Array(Ot.buffer);function nt(i,g,x){if(g===x)return i;if("f32"===g){if("i32"===x||"x32"===x)return It[0]=i,Lt[0];if("u32"===x)return It[0]=i,Ut[0]}else if("i32"===g||"x32"===g){if("f32"===x)return Dt[0]=i,At[0];if("u32"===x)return Dt[0]=i,kt[0]}else if("u32"===g){if("f32"===x)return Ot[0]=i,Gt[0];if("i32"===x||"x32"===x)return Ot[0]=i,Nt[0]}return console.error(`Unsupported cast from ${g} to ${x}`),i}class st{constructor(i){this.resources=null,this.inUse=!1,this.info=null,this.node=i}}class rt{constructor(i,g){this.align=i,this.size=g}}class at{constructor(){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new d,this.functions=[],this._types=new Map,this._functions=new Map}_isStorageTexture(i){return"texture_storage_1d"==i.name||"texture_storage_2d"==i.name||"texture_storage_2d_array"==i.name||"texture_storage_3d"==i.name}updateAST(i){for(const g of i)g instanceof D&&this._functions.set(g.name,new st(g));for(const g of i)if(g instanceof oe){const i=this.getTypeInfo(g,null);i instanceof n&&this.structs.push(i)}for(const g of i)if(g instanceof te)this.aliases.push(this._getAliasInfo(g));else{if(g instanceof M){const i=g,x=this._getAttributeNum(i.attributes,"id",0),_=null!=i.type?this.getTypeInfo(i.type,i.attributes):null;this.overrides.push(new h(i.name,_,i.attributes,x));continue}if(this._isUniformVar(g)){const i=g,x=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),v=this.getTypeInfo(i.type,i.attributes),b=new o(i.name,v,x,_,i.attributes,vt.Uniform,i.access);b.access||(b.access="read"),this.uniforms.push(b);continue}if(this._isStorageVar(g)){const i=g,x=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),v=this.getTypeInfo(i.type,i.attributes),b=this._isStorageTexture(v),y=new o(i.name,v,x,_,i.attributes,b?vt.StorageTexture:vt.Storage,i.access);y.access||(y.access="read"),this.storage.push(y);continue}if(this._isTextureVar(g)){const i=g,x=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),v=this.getTypeInfo(i.type,i.attributes),b=this._isStorageTexture(v),y=new o(i.name,v,x,_,i.attributes,b?vt.StorageTexture:vt.Texture,i.access);y.access||(y.access="read"),b?this.storage.push(y):this.textures.push(y);continue}if(this._isSamplerVar(g)){const i=g,x=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),v=this.getTypeInfo(i.type,i.attributes),b=new o(i.name,v,x,_,i.attributes,vt.Sampler,i.access);this.samplers.push(b);continue}}for(const g of i)if(g instanceof D){const i=this._getAttribute(g,"vertex"),x=this._getAttribute(g,"fragment"),_=this._getAttribute(g,"compute"),v=i||x||_,b=new p(g.name,null==v?void 0:v.name,g.attributes);b.attributes=g.attributes,b.startLine=g.startLine,b.endLine=g.endLine,this.functions.push(b),this._functions.get(g.name).info=b,v&&(this._functions.get(g.name).inUse=!0,b.inUse=!0,b.resources=this._findResources(g,!!v),b.inputs=this._getInputs(g.args),b.outputs=this._getOutputs(g.returnType),this.entry[v.name].push(b)),b.arguments=g.args.map(i=>new f(i.name,this.getTypeInfo(i.type,i.attributes),i.attributes)),b.returnType=g.returnType?this.getTypeInfo(g.returnType,g.attributes):null;continue}for(const i of this._functions.values())i.info&&(i.info.inUse=i.inUse,this._addCalls(i.node,i.info.calls));for(const i of this._functions.values())i.node.search(g=>{var x,_,v;if(g instanceof De){if(g.value)if(Ge(g.value))for(const _ of g.value)for(const g of this.overrides)_===g.name&&(null===(x=i.info)||void 0===x||x.overrides.push(g));else for(const x of this.overrides)g.value===x.name&&(null===(_=i.info)||void 0===_||_.overrides.push(x))}else if(g instanceof ge)for(const x of this.overrides)g.name===x.name&&(null===(v=i.info)||void 0===v||v.overrides.push(x))});for(const i of this.uniforms)this._markStructsInUse(i.type);for(const i of this.storage)this._markStructsInUse(i.type)}getFunctionInfo(i){for(const g of this.functions)if(g.name==i)return g;return null}getStructInfo(i){for(const g of this.structs)if(g.name==i)return g;return null}getOverrideInfo(i){for(const g of this.overrides)if(g.name==i)return g;return null}_markStructsInUse(i){if(i)if(i.isStruct){if(i.inUse=!0,i.members)for(const g of i.members)this._markStructsInUse(g.type)}else if(i.isArray)this._markStructsInUse(i.format);else if(i.isTemplate)i.format&&this._markStructsInUse(i.format);else{const g=this._getAlias(i.name);g&&this._markStructsInUse(g)}}_addCalls(i,g){var x;for(const _ of i.calls){const i=null===(x=this._functions.get(_.name))||void 0===x?void 0:x.info;i&&g.add(i)}}findResource(i,g,x){if(x){for(const _ of this.entry.compute)if(_.name===x)for(const x of _.resources)if(x.group==i&&x.binding==g)return x;for(const _ of this.entry.vertex)if(_.name===x)for(const x of _.resources)if(x.group==i&&x.binding==g)return x;for(const _ of this.entry.fragment)if(_.name===x)for(const x of _.resources)if(x.group==i&&x.binding==g)return x}for(const x of this.uniforms)if(x.group==i&&x.binding==g)return x;for(const x of this.storage)if(x.group==i&&x.binding==g)return x;for(const x of this.textures)if(x.group==i&&x.binding==g)return x;for(const x of this.samplers)if(x.group==i&&x.binding==g)return x;return null}_findResource(i){for(const g of this.uniforms)if(g.name==i)return g;for(const g of this.storage)if(g.name==i)return g;for(const g of this.textures)if(g.name==i)return g;for(const g of this.samplers)if(g.name==i)return g;return null}_markStructsFromAST(i){const g=this.getTypeInfo(i,null);this._markStructsInUse(g)}_findResources(i,g){const x=[],_=this,v=[];return i.search(b=>{if(b instanceof E)v.push({});else if(b instanceof $)v.pop();else if(b instanceof F){const i=b;g&&null!==i.type&&this._markStructsFromAST(i.type),v.length>0&&(v[v.length-1][i.name]=i)}else if(b instanceof de){const i=b;g&&null!==i.type&&this._markStructsFromAST(i.type)}else if(b instanceof U){const i=b;g&&null!==i.type&&this._markStructsFromAST(i.type),v.length>0&&(v[v.length-1][i.name]=i)}else if(b instanceof ge){const i=b;if(v.length>0&&v[v.length-1][i.name])return;const g=_._findResource(i.name);g&&x.push(g)}else if(b instanceof me){const v=b,y=_._functions.get(v.name);y&&(g&&(y.inUse=!0),i.calls.add(y.node),null===y.resources&&(y.resources=_._findResources(y.node,g)),x.push(...y.resources))}else if(b instanceof X){const v=b,y=_._functions.get(v.name);y&&(g&&(y.inUse=!0),i.calls.add(y.node),null===y.resources&&(y.resources=_._findResources(y.node,g)),x.push(...y.resources))}}),[...new Map(x.map(i=>[i.name,i])).values()]}getBindGroups(){const i=[];function t(g,x){g>=i.length&&(i.length=g+1),void 0===i[g]&&(i[g]=[]),x>=i[g].length&&(i[g].length=x+1)}for(const g of this.uniforms)t(g.group,g.binding),i[g.group][g.binding]=g;for(const g of this.storage)t(g.group,g.binding),i[g.group][g.binding]=g;for(const g of this.textures)t(g.group,g.binding),i[g.group][g.binding]=g;for(const g of this.samplers)t(g.group,g.binding),i[g.group][g.binding]=g;return i}_getOutputs(i,g=void 0){if(void 0===g&&(g=[]),i instanceof oe)this._getStructOutputs(i,g);else{const x=this._getOutputInfo(i);null!==x&&g.push(x)}return g}_getStructOutputs(i,g){for(const x of i.members)if(x.type instanceof oe)this._getStructOutputs(x.type,g);else{const i=this._getAttribute(x,"location")||this._getAttribute(x,"builtin");if(null!==i){const _=this.getTypeInfo(x.type,x.type.attributes),v=this._parseInt(i.value),b=new u(x.name,_,i.name,v);g.push(b)}}}_getOutputInfo(i){const g=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==g){const x=this.getTypeInfo(i,i.attributes),_=this._parseInt(g.value);return new u("",x,g.name,_)}return null}_getInputs(i,g=void 0){void 0===g&&(g=[]);for(const x of i)if(x.type instanceof oe)this._getStructInputs(x.type,g);else{const i=this._getInputInfo(x);null!==i&&g.push(i)}return g}_getStructInputs(i,g){for(const x of i.members)if(x.type instanceof oe)this._getStructInputs(x.type,g);else{const i=this._getInputInfo(x);null!==i&&g.push(i)}}_getInputInfo(i){const g=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==g){const x=this._getAttribute(i,"interpolation"),_=this.getTypeInfo(i.type,i.attributes),v=this._parseInt(g.value),b=new l(i.name,_,g.name,v);return null!==x&&(b.interpolation=this._parseString(x.value)),b}return null}_parseString(i){return i instanceof Array&&(i=i[0]),i}_parseInt(i){i instanceof Array&&(i=i[0]);const g=parseInt(i);return isNaN(g)?i:g}_getAlias(i){for(const g of this.aliases)if(g.name==i)return g.type;return null}_getAliasInfo(i){return new c(i.name,this.getTypeInfo(i.type,null))}getTypeInfoByName(i){for(const g of this.structs)if(g.name==i)return g;for(const g of this.aliases)if(g.name==i)return g.type;return null}getTypeInfo(i,g=null){if(this._types.has(i))return this._types.get(i);if(i instanceof le){const x=i.type?this.getTypeInfo(i.type,i.attributes):null,_=new r(i.name,x,g);return this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof ue){const x=i,_=x.format?this.getTypeInfo(x.format,x.attributes):null,v=new s(x.name,g);return v.format=_,v.count=x.count,this._types.set(i,v),this._updateTypeInfo(v),v}if(i instanceof oe){const x=i,_=new n(x.name,g);_.startLine=x.startLine,_.endLine=x.endLine;for(const i of x.members){const g=this.getTypeInfo(i.type,i.attributes);_.members.push(new t(i.name,g,i.attributes))}return this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof he){const x=i,_=x.format instanceof ae,v=x.format?_?this.getTypeInfo(x.format,null):new e(x.format,null):null,b=new a(x.name,v,g,x.access);return this._types.set(i,b),this._updateTypeInfo(b),b}if(i instanceof ce){const x=i,_=x.format?this.getTypeInfo(x.format,null):null,v=new a(x.name,_,g,x.access);return this._types.set(i,v),this._updateTypeInfo(v),v}const x=new e(i.name,g);return this._types.set(i,x),this._updateTypeInfo(x),x}_updateTypeInfo(i){var g,x,_;const v=this._getTypeSize(i);if(i.size=null!==(g=null==v?void 0:v.size)&&void 0!==g?g:0,i instanceof s&&i.format){const g=this._getTypeSize(i.format);i.stride=Math.max(null!==(x=null==g?void 0:g.size)&&void 0!==x?x:0,null!==(_=null==g?void 0:g.align)&&void 0!==_?_:0),this._updateTypeInfo(i.format)}i instanceof r&&this._updateTypeInfo(i.format),i instanceof n&&this._updateStructInfo(i)}_updateStructInfo(i){var g;let x=0,_=0,v=0,b=0;for(let y=0,S=i.members.length;y<S;++y){const S=i.members[y],w=this._getTypeSize(S);if(!w)continue;null!==(g=this._getAlias(S.type.name))&&void 0!==g||S.type;const L=w.align,k=w.size;x=this._roundUp(L,x+_),_=k,v=x,b=Math.max(b,L),S.offset=x,S.size=k,this._updateTypeInfo(S.type)}i.size=this._roundUp(b,v+_),i.align=b}_getTypeSize(i){var g,x;if(null==i)return null;const _=this._getAttributeNum(i.attributes,"size",0),v=this._getAttributeNum(i.attributes,"align",0);if(i instanceof t&&(i=i.type),i instanceof e){const g=this._getAlias(i.name);null!==g&&(i=g)}{const x=at._typeInfo[i.name];if(void 0!==x){const b="f16"===(null===(g=i.format)||void 0===g?void 0:g.name)?2:1;return new rt(Math.max(v,x.align/b),Math.max(_,x.size/b))}}{const g=at._typeInfo[i.name.substring(0,i.name.length-1)];if(g){const x="h"===i.name[i.name.length-1]?2:1;return new rt(Math.max(v,g.align/x),Math.max(_,g.size/x))}}if(i instanceof s){let g=i,b=8,y=8;const S=this._getTypeSize(g.format);return null!==S&&(y=S.size,b=S.align),y=g.count*this._getAttributeNum(null!==(x=null==i?void 0:i.attributes)&&void 0!==x?x:null,"stride",this._roundUp(b,y)),_&&(y=_),new rt(Math.max(v,b),Math.max(_,y))}if(i instanceof n){let g=0,x=0,b=0,y=0,S=0;for(const x of i.members){const i=this._getTypeSize(x.type);null!==i&&(g=Math.max(i.align,g),b=this._roundUp(i.align,b+y),y=i.size,S=b)}return x=this._roundUp(g,S+y),new rt(Math.max(v,g),Math.max(_,x))}return null}_isUniformVar(i){return i instanceof F&&"uniform"==i.storage}_isStorageVar(i){return i instanceof F&&"storage"==i.storage}_isTextureVar(i){return i instanceof F&&null!==i.type&&-1!=at._textureTypes.indexOf(i.type.name)}_isSamplerVar(i){return i instanceof F&&null!==i.type&&-1!=at._samplerTypes.indexOf(i.type.name)}_getAttribute(i,g){const x=i;if(!x||!x.attributes)return null;const _=x.attributes;for(let i of _)if(i.name==g)return i;return null}_getAttributeNum(i,g,x){if(null===i)return x;for(let _ of i)if(_.name==g){let i=null!==_&&null!==_.value?_.value:x;return i instanceof Array&&(i=i[0]),"number"==typeof i?i:"string"==typeof i?parseInt(i):x}return x}_roundUp(i,g){return Math.ceil(g/i)*i}}at._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},at._textureTypes=He.any_texture_type.map(i=>i.name),at._samplerTypes=He.sampler_type.map(i=>i.name);let Vt=0;class ot{constructor(i,g,x){this.id=Vt++,this.name=i,this.value=g,this.node=x}clone(){return new ot(this.name,this.value,this.node)}}class ct{constructor(i){this.id=Vt++,this.name=i.name,this.node=i}clone(){return new ct(this.node)}}class lt{constructor(i){this.parent=null,this.variables=new Map,this.functions=new Map,this.currentFunctionName="",this.id=Vt++,i&&(this.parent=i,this.currentFunctionName=i.currentFunctionName)}getVariable(i){var g;return this.variables.has(i)?null!==(g=this.variables.get(i))&&void 0!==g?g:null:this.parent?this.parent.getVariable(i):null}getFunction(i){var g;return this.functions.has(i)?null!==(g=this.functions.get(i))&&void 0!==g?g:null:this.parent?this.parent.getFunction(i):null}createVariable(i,g,x){this.variables.set(i,new ot(i,g,null!=x?x:null))}setVariable(i,g,x){const _=this.getVariable(i);null!==_?_.value=g:this.createVariable(i,g,x)}getVariableValue(i){var g;const x=this.getVariable(i);return null!==(g=null==x?void 0:x.value)&&void 0!==g?g:null}clone(){return new lt(this)}}class ut{evalExpression(i,g){return null}getTypeInfo(i){return null}getVariableName(i,g){return""}}class ht{constructor(i){this.exec=i}getTypeInfo(i){return this.exec.getTypeInfo(i)}All(i,g){const x=this.exec.evalExpression(i.args[0],g);let _=!0;if(x instanceof Me)return x.data.forEach(i=>{i||(_=!1)}),new Be(_?1:0,this.getTypeInfo("bool"));throw new Error(`All() expects a vector argument. Line ${i.line}`)}Any(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me){const i=x.data.some(i=>i);return new Be(i?1:0,this.getTypeInfo("bool"))}throw new Error(`Any() expects a vector argument. Line ${i.line}`)}Select(i,g){const x=this.exec.evalExpression(i.args[2],g);if(!(x instanceof Be))throw new Error(`Select() expects a bool condition. Line ${i.line}`);return x.value?this.exec.evalExpression(i.args[1],g):this.exec.evalExpression(i.args[0],g)}ArrayLength(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.evalExpression(x,g);if(_ instanceof Pe&&0===_.typeInfo.size){const i=_.typeInfo,g=_.buffer.byteLength/i.stride;return new Be(g,this.getTypeInfo("u32"))}return new Be(_.typeInfo.size,this.getTypeInfo("u32"))}Abs(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.abs(i)),x.typeInfo);const _=x;return new Be(Math.abs(_.value),_.typeInfo)}Acos(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.acos(i)),x.typeInfo);const _=x;return new Be(Math.acos(_.value),x.typeInfo)}Acosh(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.acosh(i)),x.typeInfo);const _=x;return new Be(Math.acosh(_.value),x.typeInfo)}Asin(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.asin(i)),x.typeInfo);const _=x;return new Be(Math.asin(_.value),x.typeInfo)}Asinh(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.asinh(i)),x.typeInfo);const _=x;return new Be(Math.asinh(_.value),x.typeInfo)}Atan(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.atan(i)),x.typeInfo);const _=x;return new Be(Math.atan(_.value),x.typeInfo)}Atanh(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.atanh(i)),x.typeInfo);const _=x;return new Be(Math.atanh(_.value),x.typeInfo)}Atan2(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me)return new Me(x.data.map((i,g)=>Math.atan2(i,_.data[g])),x.typeInfo);const v=x,b=_;return new Be(Math.atan2(v.value,b.value),x.typeInfo)}Ceil(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.ceil(i)),x.typeInfo);const _=x;return new Be(Math.ceil(_.value),x.typeInfo)}_clamp(i,g,x){return Math.min(Math.max(i,g),x)}Clamp(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g);if(x instanceof Me&&_ instanceof Me&&v instanceof Me)return new Me(x.data.map((i,g)=>this._clamp(i,_.data[g],v.data[g])),x.typeInfo);const b=x,y=_,S=v;return new Be(this._clamp(b.value,y.value,S.value),x.typeInfo)}Cos(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.cos(i)),x.typeInfo);const _=x;return new Be(Math.cos(_.value),x.typeInfo)}Cosh(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.cosh(i)),x.typeInfo);const _=x;return new Be(Math.cos(_.value),x.typeInfo)}CountLeadingZeros(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.clz32(i)),x.typeInfo);const _=x;return new Be(Math.clz32(_.value),x.typeInfo)}_countOneBits(i){let g=0;for(;0!==i;)1&i&&g++,i>>=1;return g}CountOneBits(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>this._countOneBits(i)),x.typeInfo);const _=x;return new Be(this._countOneBits(_.value),x.typeInfo)}_countTrailingZeros(i){if(0===i)return 32;let g=0;for(;!(1&i);)i>>=1,g++;return g}CountTrailingZeros(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>this._countTrailingZeros(i)),x.typeInfo);const _=x;return new Be(this._countTrailingZeros(_.value),x.typeInfo)}Cross(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me){if(3!==x.data.length||3!==_.data.length)return console.error(`Cross() expects 3D vectors. Line ${i.line}`),null;const g=x.data,v=_.data;return new Me([g[1]*v[2]-v[1]*g[2],g[2]*v[0]-v[2]*g[0],g[0]*v[1]-v[0]*g[1]],x.typeInfo)}return console.error(`Cross() expects vector arguments. Line ${i.line}`),null}Degrees(i,g){const x=this.exec.evalExpression(i.args[0],g),_=180/Math.PI;return x instanceof Me?new Me(x.data.map(i=>i*_),x.typeInfo):new Be(x.value*_,this.getTypeInfo("f32"))}Determinant(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Ue){const i=x.data,g=x.typeInfo.getTypeName(),_=g.endsWith("h")?this.getTypeInfo("f16"):this.getTypeInfo("f32");if("mat2x2"===g||"mat2x2f"===g||"mat2x2h"===g)return new Be(i[0]*i[3]-i[1]*i[2],_);if("mat2x3"===g||"mat2x3f"===g||"mat2x3h"===g)return new Be(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),_);if("mat2x4"===g||"mat2x4f"===g||"mat2x4h"===g)console.error(`TODO:Determinant for ${g}`);else if("mat3x2"===g||"mat3x2f"===g||"mat3x2h"===g)console.error(`TODO:Determinant for ${g}`);else{if("mat3x3"===g||"mat3x3f"===g||"mat3x3h"===g)return new Be(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),_);"mat3x4"===g||"mat3x4f"===g||"mat3x4h"===g||"mat4x2"===g||"mat4x2f"===g||"mat4x2h"===g||"mat4x3"===g||"mat4x3f"===g||"mat4x3h"===g?console.error(`TODO:Determinant for ${g}`):"mat4x4"!==g&&"mat4x4f"!==g&&"mat4x4h"!==g||console.error(`TODO:Determinant for ${g}`)}}return console.error(`Determinant expects a matrix argument. Line ${i.line}`),null}Distance(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me){let i=0;for(let g=0;g<x.data.length;++g)i+=(x.data[g]-_.data[g])*(x.data[g]-_.data[g]);return new Be(Math.sqrt(i),this.getTypeInfo("f32"))}const v=x,b=_;return new Be(Math.abs(v.value-b.value),x.typeInfo)}_dot(i,g){let x=0;for(let _=0;_<i.length;++_)x+=g[_]*i[_];return x}Dot(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);return x instanceof Me&&_ instanceof Me?new Be(this._dot(x.data,_.data),this.getTypeInfo("f32")):(console.error(`Dot() expects vector arguments. Line ${i.line}`),null)}Dot4U8Packed(i,g){return console.error(`TODO:dot4U8Packed. Line ${i.line}`),null}Dot4I8Packed(i,g){return console.error(`TODO:dot4I8Packed. Line ${i.line}`),null}Exp(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.exp(i)),x.typeInfo);const _=x;return new Be(Math.exp(_.value),x.typeInfo)}Exp2(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.pow(2,i)),x.typeInfo);const _=x;return new Be(Math.pow(2,_.value),x.typeInfo)}ExtractBits(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g);if("u32"!==_.typeInfo.name&&"x32"!==_.typeInfo.name)return console.error(`ExtractBits() expects an i32 offset argument. Line ${i.line}`),null;if("u32"!==v.typeInfo.name&&"x32"!==v.typeInfo.name)return console.error(`ExtractBits() expects an i32 count argument. Line ${i.line}`),null;const b=_.value,y=v.value;if(x instanceof Me)return new Me(x.data.map(i=>i>>b&(1<<y)-1),x.typeInfo);if("i32"!==x.typeInfo.name&&"x32"!==x.typeInfo.name)return console.error(`ExtractBits() expects an i32 argument. Line ${i.line}`),null;const S=x.value;return new Be(S>>b&(1<<y)-1,this.getTypeInfo("i32"))}FaceForward(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g);if(x instanceof Me&&_ instanceof Me&&v instanceof Me){const i=this._dot(_.data,v.data);return new Me(i<0?Array.from(x.data):x.data.map(i=>-i),x.typeInfo)}return console.error(`FaceForward() expects vector arguments. Line ${i.line}`),null}_firstLeadingBit(i){return 0===i?-1:31-Math.clz32(i)}FirstLeadingBit(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>this._firstLeadingBit(i)),x.typeInfo);const _=x;return new Be(this._firstLeadingBit(_.value),x.typeInfo)}_firstTrailingBit(i){return 0===i?-1:Math.log2(i&-i)}FirstTrailingBit(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>this._firstTrailingBit(i)),x.typeInfo);const _=x;return new Be(this._firstTrailingBit(_.value),x.typeInfo)}Floor(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.floor(i)),x.typeInfo);const _=x;return new Be(Math.floor(_.value),x.typeInfo)}Fma(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g);if(x instanceof Me&&_ instanceof Me&&v instanceof Me)return x.data.length!==_.data.length||x.data.length!==v.data.length?(console.error(`Fma() expects vectors of the same length. Line ${i.line}`),null):new Me(x.data.map((i,g)=>i*_.data[g]+v.data[g]),x.typeInfo);const b=x,y=_,S=v;return new Be(b.value*y.value+S.value,b.typeInfo)}Fract(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>i-Math.floor(i)),x.typeInfo);const _=x;return new Be(_.value-Math.floor(_.value),x.typeInfo)}Frexp(i,g){return console.error(`TODO:frexp. Line ${i.line}`),null}InsertBits(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g),b=this.exec.evalExpression(i.args[3],g);if("u32"!==v.typeInfo.name&&"x32"!==v.typeInfo.name)return console.error(`InsertBits() expects an i32 offset argument. Line ${i.line}`),null;const y=v.value,S=(1<<b.value)-1<<y,w=~S;if(x instanceof Me&&_ instanceof Me)return new Me(x.data.map((i,g)=>i&w|_.data[g]<<y&S),x.typeInfo);const L=x.value,k=_.value;return new Be(L&w|k<<y&S,x.typeInfo)}InverseSqrt(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>1/Math.sqrt(i)),x.typeInfo);const _=x;return new Be(1/Math.sqrt(_.value),x.typeInfo)}Ldexp(i,g){return console.error(`TODO:ldexp. Line ${i.line}`),null}Length(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me){let i=0;return x.data.forEach(g=>{i+=g*g}),new Be(Math.sqrt(i),this.getTypeInfo("f32"))}const _=x;return new Be(Math.abs(_.value),x.typeInfo)}Log(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.log(i)),x.typeInfo);const _=x;return new Be(Math.log(_.value),x.typeInfo)}Log2(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.log2(i)),x.typeInfo);const _=x;return new Be(Math.log2(_.value),x.typeInfo)}Max(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me)return new Me(x.data.map((i,g)=>Math.max(i,_.data[g])),x.typeInfo);const v=x,b=_;return new Be(Math.max(v.value,b.value),x.typeInfo)}Min(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me)return new Me(x.data.map((i,g)=>Math.min(i,_.data[g])),x.typeInfo);const v=x,b=_;return new Be(Math.min(v.value,b.value),x.typeInfo)}Mix(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g);if(x instanceof Me&&_ instanceof Me&&v instanceof Me)return new Me(x.data.map((i,g)=>x.data[g]*(1-v.data[g])+_.data[g]*v.data[g]),x.typeInfo);const b=_,y=v;return new Be(x.value*(1-y.value)+b.value*y.value,x.typeInfo)}Modf(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me)return new Me(x.data.map((i,g)=>i%_.data[g]),x.typeInfo);const v=_;return new Be(x.value%v.value,x.typeInfo)}Normalize(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me){const _=this.Length(i,g).value;return new Me(x.data.map(i=>i/_),x.typeInfo)}return console.error(`Normalize() expects a vector argument. Line ${i.line}`),null}Pow(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me)return new Me(x.data.map((i,g)=>Math.pow(i,_.data[g])),x.typeInfo);const v=x,b=_;return new Be(Math.pow(v.value,b.value),x.typeInfo)}QuantizeToF16(i,g){const x=this.exec.evalExpression(i.args[0],g);return x instanceof Me?new Me(x.data.map(i=>i),x.typeInfo):new Be(x.value,x.typeInfo)}Radians(i,g){const x=this.exec.evalExpression(i.args[0],g);return x instanceof Me?new Me(x.data.map(i=>i*Math.PI/180),x.typeInfo):new Be(x.value*Math.PI/180,this.getTypeInfo("f32"))}Reflect(i,g){let x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(x instanceof Me&&_ instanceof Me){const i=this._dot(x.data,_.data);return new Me(x.data.map((g,x)=>g-2*i*_.data[x]),x.typeInfo)}return console.error(`Reflect() expects vector arguments. Line ${i.line}`),null}Refract(i,g){let x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g);if(x instanceof Me&&_ instanceof Me&&v instanceof Be){const i=this._dot(_.data,x.data);return new Me(x.data.map((g,x)=>{const b=1-v.value*v.value*(1-i*i);if(b<0)return 0;const y=Math.sqrt(b);return v.value*g-(v.value*i+y)*_.data[x]}),x.typeInfo)}return console.error(`Refract() expects vector arguments and a scalar argument. Line ${i.line}`),null}ReverseBits(i,g){return console.error(`TODO:reverseBits. Line ${i.line}`),null}Round(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.round(i)),x.typeInfo);const _=x;return new Be(Math.round(_.value),x.typeInfo)}Saturate(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.min(Math.max(i,0),1)),x.typeInfo);const _=x;return new Be(Math.min(Math.max(_.value,0),1),x.typeInfo)}Sign(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.sign(i)),x.typeInfo);const _=x;return new Be(Math.sign(_.value),x.typeInfo)}Sin(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.sin(i)),x.typeInfo);const _=x;return new Be(Math.sin(_.value),x.typeInfo)}Sinh(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.sinh(i)),x.typeInfo);const _=x;return new Be(Math.sinh(_.value),x.typeInfo)}_smoothstep(i,g,x){const _=Math.min(Math.max((x-i)/(g-i),0),1);return _*_*(3-2*_)}SmoothStep(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g),v=this.exec.evalExpression(i.args[2],g);if(v instanceof Me&&x instanceof Me&&_ instanceof Me)return new Me(v.data.map((i,g)=>this._smoothstep(x.data[g],_.data[g],i)),v.typeInfo);const b=x,y=_,S=v;return new Be(this._smoothstep(b.value,y.value,S.value),v.typeInfo)}Sqrt(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.sqrt(i)),x.typeInfo);const _=x;return new Be(Math.sqrt(_.value),x.typeInfo)}Step(i,g){const x=this.exec.evalExpression(i.args[0],g),_=this.exec.evalExpression(i.args[1],g);if(_ instanceof Me&&x instanceof Me)return new Me(_.data.map((i,g)=>i<x.data[g]?0:1),_.typeInfo);const v=x;return new Be(_.value<v.value?0:1,v.typeInfo)}Tan(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.tan(i)),x.typeInfo);const _=x;return new Be(Math.tan(_.value),x.typeInfo)}Tanh(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.tanh(i)),x.typeInfo);const _=x;return new Be(Math.tanh(_.value),x.typeInfo)}_getTransposeType(i){const g=i.getTypeName();return"mat2x2f"===g||"mat2x2h"===g?i:"mat2x3f"===g?this.getTypeInfo("mat3x2f"):"mat2x3h"===g?this.getTypeInfo("mat3x2h"):"mat2x4f"===g?this.getTypeInfo("mat4x2f"):"mat2x4h"===g?this.getTypeInfo("mat4x2h"):"mat3x2f"===g?this.getTypeInfo("mat2x3f"):"mat3x2h"===g?this.getTypeInfo("mat2x3h"):"mat3x3f"===g||"mat3x3h"===g?i:"mat3x4f"===g?this.getTypeInfo("mat4x3f"):"mat3x4h"===g?this.getTypeInfo("mat4x3h"):"mat4x2f"===g?this.getTypeInfo("mat2x4f"):"mat4x2h"===g?this.getTypeInfo("mat2x4h"):"mat4x3f"===g?this.getTypeInfo("mat3x4f"):"mat4x3h"===g?this.getTypeInfo("mat3x4h"):("mat4x4f"===g||"mat4x4h"===g||console.error(`Invalid matrix type ${g}`),i)}Transpose(i,g){const x=this.exec.evalExpression(i.args[0],g);if(!(x instanceof Ue))return console.error(`Transpose() expects a matrix argument. Line ${i.line}`),null;const _=this._getTransposeType(x.typeInfo);if("mat2x2"===x.typeInfo.name||"mat2x2f"===x.typeInfo.name||"mat2x2h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[2],i[1],i[3]],_)}if("mat2x3"===x.typeInfo.name||"mat2x3f"===x.typeInfo.name||"mat2x3h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[3],i[6],i[1],i[4],i[7]],_)}if("mat2x4"===x.typeInfo.name||"mat2x4f"===x.typeInfo.name||"mat2x4h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13]],_)}if("mat3x2"===x.typeInfo.name||"mat3x2f"===x.typeInfo.name||"mat3x2h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[3],i[1],i[4],i[2],i[5]],_)}if("mat3x3"===x.typeInfo.name||"mat3x3f"===x.typeInfo.name||"mat3x3h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[3],i[6],i[1],i[4],i[7],i[2],i[5],i[8]],_)}if("mat3x4"===x.typeInfo.name||"mat3x4f"===x.typeInfo.name||"mat3x4h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14]],_)}if("mat4x2"===x.typeInfo.name||"mat4x2f"===x.typeInfo.name||"mat4x2h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[4],i[1],i[5],i[2],i[6]],_)}if("mat4x3"===x.typeInfo.name||"mat4x3f"===x.typeInfo.name||"mat4x3h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]],_)}if("mat4x4"===x.typeInfo.name||"mat4x4f"===x.typeInfo.name||"mat4x4h"===x.typeInfo.name){const i=x.data;return new Ue([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14],i[3],i[7],i[11],i[15]],_)}return console.error(`Invalid matrix type ${x.typeInfo.name}`),null}Trunc(i,g){const x=this.exec.evalExpression(i.args[0],g);if(x instanceof Me)return new Me(x.data.map(i=>Math.trunc(i)),x.typeInfo);const _=x;return new Be(Math.trunc(_.value),x.typeInfo)}Dpdx(i,g){return console.error(`TODO:dpdx. Line ${i.line}`),null}DpdxCoarse(i,g){return console.error(`TODO:dpdxCoarse. Line ${i.line}`),null}DpdxFine(i,g){return console.error("TODO:dpdxFine"),null}Dpdy(i,g){return console.error("TODO:dpdy"),null}DpdyCoarse(i,g){return console.error("TODO:dpdyCoarse"),null}DpdyFine(i,g){return console.error("TODO:dpdyFine"),null}Fwidth(i,g){return console.error("TODO:fwidth"),null}FwidthCoarse(i,g){return console.error("TODO:fwidthCoarse"),null}FwidthFine(i,g){return console.error("TODO:fwidthFine"),null}TextureDimensions(i,g){const x=i.args[0],_=i.args.length>1?this.exec.evalExpression(i.args[1],g).value:0;if(x instanceof ge){const v=x.name,b=g.getVariableValue(v);if(b instanceof We){if(_<0||_>=b.mipLevelCount)return console.error(`Invalid mip level for textureDimensions. Line ${i.line}`),null;const g=b.getMipLevelSize(_),x=b.dimension;return"1d"===x?new Be(g[0],this.getTypeInfo("u32")):"3d"===x?new Me(g,this.getTypeInfo("vec3u")):"2d"===x?new Me(g.slice(0,2),this.getTypeInfo("vec2u")):(console.error(`Invalid texture dimension ${x} not found. Line ${i.line}`),null)}return console.error(`Texture ${v} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureDimensions. Line ${i.line}`),null}TextureGather(i,g){return console.error("TODO:textureGather"),null}TextureGatherCompare(i,g){return console.error("TODO:textureGatherCompare"),null}TextureLoad(i,g){const x=i.args[0],_=this.exec.evalExpression(i.args[1],g),v=i.args.length>2?this.exec.evalExpression(i.args[2],g).value:0;if(!(_ instanceof Me)||2!==_.data.length)return console.error(`Invalid UV argument for textureLoad. Line ${i.line}`),null;if(x instanceof ge){const b=x.name,y=g.getVariableValue(b);if(y instanceof We){const g=Math.floor(_.data[0]),x=Math.floor(_.data[1]);if(g<0||g>=y.width||x<0||x>=y.height)return console.error(`Texture ${b} out of bounds. Line ${i.line}`),null;const S=y.getPixel(g,x,0,v);return null===S?(console.error(`Invalid texture format for textureLoad. Line ${i.line}`),null):new Me(S,this.getTypeInfo("vec4f"))}return console.error(`Texture ${b} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureLoad. Line ${i.line}`),null}TextureNumLayers(i,g){const x=i.args[0];if(x instanceof ge){const _=x.name,v=g.getVariableValue(_);return v instanceof We?new Be(v.depthOrArrayLayers,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLayers. Line ${i.line}`),null}TextureNumLevels(i,g){const x=i.args[0];if(x instanceof ge){const _=x.name,v=g.getVariableValue(_);return v instanceof We?new Be(v.mipLevelCount,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLevels. Line ${i.line}`),null}TextureNumSamples(i,g){const x=i.args[0];if(x instanceof ge){const _=x.name,v=g.getVariableValue(_);return v instanceof We?new Be(v.sampleCount,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumSamples. Line ${i.line}`),null}TextureSample(i,g){return console.error("TODO:textureSample"),null}TextureSampleBias(i,g){return console.error("TODO:textureSampleBias"),null}TextureSampleCompare(i,g){return console.error("TODO:textureSampleCompare"),null}TextureSampleCompareLevel(i,g){return console.error("TODO:textureSampleCompareLevel"),null}TextureSampleGrad(i,g){return console.error("TODO:textureSampleGrad"),null}TextureSampleLevel(i,g){return console.error("TODO:textureSampleLevel"),null}TextureSampleBaseClampToEdge(i,g){return console.error("TODO:textureSampleBaseClampToEdge"),null}TextureStore(i,g){const x=i.args[0],_=this.exec.evalExpression(i.args[1],g),v=4===i.args.length?this.exec.evalExpression(i.args[2],g).value:0,b=4===i.args.length?this.exec.evalExpression(i.args[3],g).data:this.exec.evalExpression(i.args[2],g).data;if(4!==b.length)return console.error(`Invalid value argument for textureStore. Line ${i.line}`),null;if(!(_ instanceof Me)||2!==_.data.length)return console.error(`Invalid UV argument for textureStore. Line ${i.line}`),null;if(x instanceof ge){const y=x.name,S=g.getVariableValue(y);if(S instanceof We){const g=S.getMipLevelSize(0),x=Math.floor(_.data[0]),w=Math.floor(_.data[1]);return x<0||x>=g[0]||w<0||w>=g[1]?(console.error(`Texture ${y} out of bounds. Line ${i.line}`),null):(S.setPixel(x,w,0,v,Array.from(b)),null)}return console.error(`Texture ${y} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureStore. Line ${i.line}`),null}AtomicLoad(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g);return g.getVariable(_).value.getSubData(this.exec,x.postfix,g)}AtomicStore(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g);return S instanceof Be&&y instanceof Be&&(S.value=y.value),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),null}AtomicAdd(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value+=y.value),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicSub(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value-=y.value),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicMax(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value=Math.max(S.value,y.value)),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicMin(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value=Math.min(S.value,y.value)),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicAnd(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value=S.value&y.value),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicOr(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value=S.value|y.value),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicXor(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value=S.value^y.value),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicExchange(i,g){let x=i.args[0];x instanceof ke&&(x=x.right);const _=this.exec.getVariableName(x,g),v=g.getVariable(_);let b=i.args[1];const y=this.exec.evalExpression(b,g),S=v.value.getSubData(this.exec,x.postfix,g),w=new Be(S.value,S.typeInfo);return S instanceof Be&&y instanceof Be&&(S.value=y.value),v.value instanceof Pe&&v.value.setDataValue(this.exec,S,x.postfix,g),w}AtomicCompareExchangeWeak(i,g){return console.error("TODO:atomicCompareExchangeWeak"),null}Pack4x8snorm(i,g){return console.error("TODO:pack4x8snorm"),null}Pack4x8unorm(i,g){return console.error("TODO:pack4x8unorm"),null}Pack4xI8(i,g){return console.error("TODO:pack4xI8"),null}Pack4xU8(i,g){return console.error("TODO:pack4xU8"),null}Pack4x8Clamp(i,g){return console.error("TODO:pack4x8Clamp"),null}Pack4xU8Clamp(i,g){return console.error("TODO:pack4xU8Clamp"),null}Pack2x16snorm(i,g){return console.error("TODO:pack2x16snorm"),null}Pack2x16unorm(i,g){return console.error("TODO:pack2x16unorm"),null}Pack2x16float(i,g){return console.error("TODO:pack2x16float"),null}Unpack4x8snorm(i,g){return console.error("TODO:unpack4x8snorm"),null}Unpack4x8unorm(i,g){return console.error("TODO:unpack4x8unorm"),null}Unpack4xI8(i,g){return console.error("TODO:unpack4xI8"),null}Unpack4xU8(i,g){return console.error("TODO:unpack4xU8"),null}Unpack2x16snorm(i,g){return console.error("TODO:unpack2x16snorm"),null}Unpack2x16unorm(i,g){return console.error("TODO:unpack2x16unorm"),null}Unpack2x16float(i,g){return console.error("TODO:unpack2x16float"),null}StorageBarrier(i,g){return null}TextureBarrier(i,g){return null}WorkgroupBarrier(i,g){return null}WorkgroupUniformLoad(i,g){return null}SubgroupAdd(i,g){return console.error("TODO:subgroupAdd"),null}SubgroupExclusiveAdd(i,g){return console.error("TODO:subgroupExclusiveAdd"),null}SubgroupInclusiveAdd(i,g){return console.error("TODO:subgroupInclusiveAdd"),null}SubgroupAll(i,g){return console.error("TODO:subgroupAll"),null}SubgroupAnd(i,g){return console.error("TODO:subgroupAnd"),null}SubgroupAny(i,g){return console.error("TODO:subgroupAny"),null}SubgroupBallot(i,g){return console.error("TODO:subgroupBallot"),null}SubgroupBroadcast(i,g){return console.error("TODO:subgroupBroadcast"),null}SubgroupBroadcastFirst(i,g){return console.error("TODO:subgroupBroadcastFirst"),null}SubgroupElect(i,g){return console.error("TODO:subgroupElect"),null}SubgroupMax(i,g){return console.error("TODO:subgroupMax"),null}SubgroupMin(i,g){return console.error("TODO:subgroupMin"),null}SubgroupMul(i,g){return console.error("TODO:subgroupMul"),null}SubgroupExclusiveMul(i,g){return console.error("TODO:subgroupExclusiveMul"),null}SubgroupInclusiveMul(i,g){return console.error("TODO:subgroupInclusiveMul"),null}SubgroupOr(i,g){return console.error("TODO:subgroupOr"),null}SubgroupShuffle(i,g){return console.error("TODO:subgroupShuffle"),null}SubgroupShuffleDown(i,g){return console.error("TODO:subgroupShuffleDown"),null}SubgroupShuffleUp(i,g){return console.error("TODO:subgroupShuffleUp"),null}SubgroupShuffleXor(i,g){return console.error("TODO:subgroupShuffleXor"),null}SubgroupXor(i,g){return console.error("TODO:subgroupXor"),null}QuadBroadcast(i,g){return console.error("TODO:quadBroadcast"),null}QuadSwapDiagonal(i,g){return console.error("TODO:quadSwapDiagonal"),null}QuadSwapX(i,g){return console.error("TODO:quadSwapX"),null}QuadSwapY(i,g){return console.error("TODO:quadSwapY"),null}}const Ft={vec2:2,vec2f:2,vec2i:2,vec2u:2,vec2b:2,vec2h:2,vec3:3,vec3f:3,vec3i:3,vec3u:3,vec3b:3,vec3h:3,vec4:4,vec4f:4,vec4i:4,vec4u:4,vec4b:4,vec4h:4},Ht={mat2x2:[2,2,4],mat2x2f:[2,2,4],mat2x2h:[2,2,4],mat2x3:[2,3,6],mat2x3f:[2,3,6],mat2x3h:[2,3,6],mat2x4:[2,4,8],mat2x4f:[2,4,8],mat2x4h:[2,4,8],mat3x2:[3,2,6],mat3x2f:[3,2,6],mat3x2h:[3,2,6],mat3x3:[3,3,9],mat3x3f:[3,3,9],mat3x3h:[3,3,9],mat3x4:[3,4,12],mat3x4f:[3,4,12],mat3x4h:[3,4,12],mat4x2:[4,2,8],mat4x2f:[4,2,8],mat4x2h:[4,2,8],mat4x3:[4,3,12],mat4x3f:[4,3,12],mat4x3h:[4,3,12],mat4x4:[4,4,16],mat4x4f:[4,4,16],mat4x4h:[4,4,16]};class dt extends ut{constructor(i,g){var x;super(),this.ast=null!=i?i:[],this.reflection=new at,this.reflection.updateAST(this.ast),this.context=null!==(x=null==g?void 0:g.clone())&&void 0!==x?x:new lt,this.builtins=new ht(this),this.typeInfo={bool:this.getTypeInfo(ae.bool),i32:this.getTypeInfo(ae.i32),u32:this.getTypeInfo(ae.u32),f32:this.getTypeInfo(ae.f32),f16:this.getTypeInfo(ae.f16),vec2f:this.getTypeInfo(ce.vec2f),vec2u:this.getTypeInfo(ce.vec2u),vec2i:this.getTypeInfo(ce.vec2i),vec2h:this.getTypeInfo(ce.vec2h),vec3f:this.getTypeInfo(ce.vec3f),vec3u:this.getTypeInfo(ce.vec3u),vec3i:this.getTypeInfo(ce.vec3i),vec3h:this.getTypeInfo(ce.vec3h),vec4f:this.getTypeInfo(ce.vec4f),vec4u:this.getTypeInfo(ce.vec4u),vec4i:this.getTypeInfo(ce.vec4i),vec4h:this.getTypeInfo(ce.vec4h),mat2x2f:this.getTypeInfo(ce.mat2x2f),mat2x3f:this.getTypeInfo(ce.mat2x3f),mat2x4f:this.getTypeInfo(ce.mat2x4f),mat3x2f:this.getTypeInfo(ce.mat3x2f),mat3x3f:this.getTypeInfo(ce.mat3x3f),mat3x4f:this.getTypeInfo(ce.mat3x4f),mat4x2f:this.getTypeInfo(ce.mat4x2f),mat4x3f:this.getTypeInfo(ce.mat4x3f),mat4x4f:this.getTypeInfo(ce.mat4x4f)}}getVariableValue(i){var g,x;const _=null!==(x=null===(g=this.context.getVariable(i))||void 0===g?void 0:g.value)&&void 0!==x?x:null;if(null===_)return null;if(_ instanceof Be)return _.value;if(_ instanceof Me)return Array.from(_.data);if(_ instanceof Ue)return Array.from(_.data);if(_ instanceof Pe&&_.typeInfo instanceof s){if("u32"===_.typeInfo.format.name)return Array.from(new Uint32Array(_.buffer,_.offset,_.typeInfo.count));if("i32"===_.typeInfo.format.name)return Array.from(new Int32Array(_.buffer,_.offset,_.typeInfo.count));if("f32"===_.typeInfo.format.name)return Array.from(new Float32Array(_.buffer,_.offset,_.typeInfo.count))}return console.error(`Unsupported return variable type ${_.typeInfo.name}`),null}execute(i){(i=null!=i?i:{}).constants&&this._setOverrides(i.constants,this.context),this._execStatements(this.ast,this.context)}dispatchWorkgroups(i,g,x,_){const v=this.context.clone();(_=null!=_?_:{}).constants&&this._setOverrides(_.constants,v),this._execStatements(this.ast,v);const b=v.getFunction(i);if(!b)return void console.error(`Function ${i} not found`);if("number"==typeof g)g=[g,1,1];else{if(0===g.length)return void console.error("Invalid dispatch count");1===g.length?g=[g[0],1,1]:2===g.length?g=[g[0],g[1],1]:g.length>3&&(g=[g[0],g[1],g[2]])}const y=g[0],S=g[1],w=g[2],L=this.getTypeInfo("vec3u");v.setVariable("@num_workgroups",new Me(g,L));const k=this.reflection.getFunctionInfo(i);null===k&&console.error(`Function ${i} not found in reflection data`);for(const i in x)for(const g in x[i]){const _=x[i][g];v.variables.forEach(x=>{var v;const b=x.node;if(null==b?void 0:b.attributes){let y=null,S=null;for(const i of b.attributes)"binding"===i.name?y=i.value:"group"===i.name&&(S=i.value);if(g==y&&i==S){let y=!1;for(const _ of k.resources)if(_.name===x.name&&_.group===parseInt(i)&&_.binding===parseInt(g)){y=!0;break}if(y)if(void 0!==_.texture&&void 0!==_.descriptor){const i=new We(_.texture,this.getTypeInfo(b.type),_.descriptor,null!==(v=_.texture.view)&&void 0!==v?v:null);x.value=i}else void 0!==_.uniform?x.value=new Pe(_.uniform,this.getTypeInfo(b.type)):x.value=new Pe(_,this.getTypeInfo(b.type))}}})}for(let i=0;i<w;++i)for(let g=0;g<S;++g)for(let x=0;x<y;++x)v.setVariable("@workgroup_id",new Me([x,g,i],this.getTypeInfo("vec3u"))),this._dispatchWorkgroup(b,[x,g,i],v)}execStatement(i,g){if(i instanceof Y)return this.evalExpression(i.value,g);if(i instanceof se){if(i.condition){const x=this.evalExpression(i.condition,g);if(!(x instanceof Be))throw new Error("Invalid break-if condition");if(!x.value)return null}return dt._breakObj}if(i instanceof re)return dt._continueObj;if(i instanceof U)this._let(i,g);else if(i instanceof F)this._var(i,g);else if(i instanceof P)this._const(i,g);else if(i instanceof D)this._function(i,g);else{if(i instanceof Q)return this._if(i,g);if(i instanceof Z)return this._switch(i,g);if(i instanceof B)return this._for(i,g);if(i instanceof V)return this._while(i,g);if(i instanceof j)return this._loop(i,g);if(i instanceof O){const x=g.clone();return x.currentFunctionName=g.currentFunctionName,this._execStatements(i.body,x)}if(i instanceof G)this._assign(i,g);else if(i instanceof R)this._increment(i,g);else{if(i instanceof oe)return null;if(i instanceof M){const x=i.name;null===g.getVariable(x)&&g.setVariable(x,new Be(0,this.getTypeInfo("u32")))}else if(i instanceof X)this._call(i,g);else{if(i instanceof ee)return null;if(i instanceof te)return null;console.error("Invalid statement type.",i,`Line ${i.line}`)}}}return null}evalExpression(i,g){return i instanceof Ie?this._evalBinaryOp(i,g):i instanceof xe?this._evalLiteral(i,g):i instanceof ge?this._evalVariable(i,g):i instanceof me?this._evalCall(i,g):i instanceof de?this._evalCreate(i,g):i instanceof _e?this._evalConst(i,g):i instanceof ye?this._evalBitcast(i,g):i instanceof ke?this._evalUnaryOp(i,g):(console.error("Invalid expression type",i,`Line ${i.line}`),null)}getTypeInfo(i){var g;if(i instanceof ae){const g=this.reflection.getTypeInfo(i);if(null!==g)return g}let x=null!==(g=this.typeInfo[i])&&void 0!==g?g:null;return null!==x||(x=this.reflection.getTypeInfoByName(i)),x}_setOverrides(i,g){for(const x in i){const _=i[x],v=this.reflection.getOverrideInfo(x);null!==v?(null===v.type&&(v.type=this.getTypeInfo("u32")),"u32"===v.type.name||"i32"===v.type.name||"f32"===v.type.name||"f16"===v.type.name?g.setVariable(x,new Be(_,v.type)):"bool"===v.type.name?g.setVariable(x,new Be(_?1:0,v.type)):"vec2"===v.type.name||"vec3"===v.type.name||"vec4"===v.type.name||"vec2f"===v.type.name||"vec3f"===v.type.name||"vec4f"===v.type.name||"vec2i"===v.type.name||"vec3i"===v.type.name||"vec4i"===v.type.name||"vec2u"===v.type.name||"vec3u"===v.type.name||"vec4u"===v.type.name||"vec2h"===v.type.name||"vec3h"===v.type.name||"vec4h"===v.type.name?g.setVariable(x,new Me(_,v.type)):console.error(`Invalid constant type for ${x}`)):console.error(`Override ${x} does not exist in the shader.`)}}_dispatchWorkgroup(i,g,x){const _=[1,1,1];for(const g of i.node.attributes)if("workgroup_size"===g.name){if(g.value.length>0){const i=x.getVariableValue(g.value[0]);_[0]=i instanceof Be?i.value:parseInt(g.value[0])}if(g.value.length>1){const i=x.getVariableValue(g.value[1]);_[1]=i instanceof Be?i.value:parseInt(g.value[1])}if(g.value.length>2){const i=x.getVariableValue(g.value[2]);_[2]=i instanceof Be?i.value:parseInt(g.value[2])}}const v=this.getTypeInfo("vec3u"),b=this.getTypeInfo("u32");x.setVariable("@workgroup_size",new Me(_,v));const y=_[0],S=_[1],w=_[2];for(let L=0,k=0;L<w;++L)for(let w=0;w<S;++w)for(let S=0;S<y;++S,++k){const y=[S,w,L],H=[S+g[0]*_[0],w+g[1]*_[1],L+g[2]*_[2]];x.setVariable("@local_invocation_id",new Me(y,v)),x.setVariable("@global_invocation_id",new Me(H,v)),x.setVariable("@local_invocation_index",new Be(k,b)),this._dispatchExec(i,x)}}_dispatchExec(i,g){for(const x of i.node.args)for(const i of x.attributes)if("builtin"===i.name){const _=`@${i.value}`,v=g.getVariable(_);void 0!==v&&g.variables.set(x.name,v)}this._execStatements(i.node.body,g)}getVariableName(i,g){for(;i instanceof ke;)i=i.right;return i instanceof ge?i.name:(console.error("Unknown variable type",i,"Line",i.line),null)}_execStatements(i,g){for(const x of i){if(x instanceof Array){const i=g.clone(),_=this._execStatements(x,i);if(_)return _;continue}const i=this.execStatement(x,g);if(i)return i}return null}_call(i,g){const x=g.clone();x.currentFunctionName=i.name;const _=g.getFunction(i.name);if(_){for(let g=0;g<_.node.args.length;++g){const v=_.node.args[g],b=this.evalExpression(i.args[g],x);x.setVariable(v.name,b,v)}this._execStatements(_.node.body,x)}else i.isBuiltin?this._callBuiltinFunction(i,x):this.getTypeInfo(i.name)&&this._evalCreate(i,g)}_increment(i,g){const x=this.getVariableName(i.variable,g),_=g.getVariable(x);_?"++"===i.operator?_.value instanceof Be?_.value.value++:console.error(`Variable ${x} is not a scalar. Line ${i.line}`):"--"===i.operator?_.value instanceof Be?_.value.value--:console.error(`Variable ${x} is not a scalar. Line ${i.line}`):console.error(`Unknown increment operator ${i.operator}. Line ${i.line}`):console.error(`Variable ${x} not found. Line ${i.line}`)}_getVariableData(i,g){if(i instanceof ge){const x=this.getVariableName(i,g),_=g.getVariable(x);return null===_?(console.error(`Variable ${x} not found. Line ${i.line}`),null):_.value.getSubData(this,i.postfix,g)}if(i instanceof ke){if("*"===i.operator){const x=this._getVariableData(i.right,g);return x instanceof Oe?x.reference.getSubData(this,i.postfix,g):(console.error(`Variable ${i.right} is not a pointer. Line ${i.line}`),null)}if("&"===i.operator){const x=this._getVariableData(i.right,g);return new Oe(x)}}return null}_assign(i,g){let x=null,_="<var>",v=null;if(i.variable instanceof ke){const x=this._getVariableData(i.variable,g),_=this.evalExpression(i.value,g),v=i.operator;if("="===v){if(x instanceof Be||x instanceof Me||x instanceof Ue){if(_ instanceof Be||_ instanceof Me||_ instanceof Ue&&x.data.length===_.data.length)return void x.data.set(_.data);console.error(`Invalid assignment. Line ${i.line}`)}else if(x instanceof Pe&&_ instanceof Pe&&x.buffer.byteLength-x.offset>=_.buffer.byteLength-_.offset)return void(x.buffer.byteLength%4==0?new Uint32Array(x.buffer,x.offset,x.typeInfo.size/4).set(new Uint32Array(_.buffer,_.offset,_.typeInfo.size/4)):new Uint8Array(x.buffer,x.offset,x.typeInfo.size).set(new Uint8Array(_.buffer,_.offset,_.typeInfo.size)));return console.error(`Invalid assignment. Line ${i.line}`),null}if("+="===v)return x instanceof Be||x instanceof Me||x instanceof Ue?_ instanceof Be||_ instanceof Me||_ instanceof Ue?void x.data.set(_.data.map((i,g)=>x.data[g]+i)):void console.error(`Invalid assignment . Line ${i.line}`):void console.error(`Invalid assignment. Line ${i.line}`);if("-="===v)return(x instanceof Be||x instanceof Me||x instanceof Ue)&&(_ instanceof Be||_ instanceof Me||_ instanceof Ue)?void x.data.set(_.data.map((i,g)=>x.data[g]-i)):void console.error(`Invalid assignment. Line ${i.line}`)}if(i.variable instanceof ke){if("*"===i.variable.operator){_=this.getVariableName(i.variable.right,g);const v=g.getVariable(_);if(!(v&&v.value instanceof Oe))return void console.error(`Variable ${_} is not a pointer. Line ${i.line}`);x=v.value.reference;let b=i.variable.postfix;if(!b){let g=i.variable.right;for(;g instanceof ke;){if(g.postfix){b=g.postfix;break}g=g.right}}b&&(x=x.getSubData(this,b,g))}}else{v=i.variable.postfix,_=this.getVariableName(i.variable,g);const b=g.getVariable(_);if(null===b)return void console.error(`Variable ${_} not found. Line ${i.line}`);x=b.value}if(x instanceof Oe&&(x=x.reference),null===x)return void console.error(`Variable ${_} not found. Line ${i.line}`);const b=this.evalExpression(i.value,g),y=i.operator;if("="!==y){const _=x.getSubData(this,v,g);if(_ instanceof Me&&b instanceof Be){const g=_.data,x=b.value;if("+="===y)for(let i=0;i<g.length;++i)g[i]+=x;else if("-="===y)for(let i=0;i<g.length;++i)g[i]-=x;else if("*="===y)for(let i=0;i<g.length;++i)g[i]*=x;else if("/="===y)for(let i=0;i<g.length;++i)g[i]/=x;else if("%="===y)for(let i=0;i<g.length;++i)g[i]%=x;else if("&="===y)for(let i=0;i<g.length;++i)g[i]&=x;else if("|="===y)for(let i=0;i<g.length;++i)g[i]|=x;else if("^="===y)for(let i=0;i<g.length;++i)g[i]^=x;else if("<<="===y)for(let i=0;i<g.length;++i)g[i]<<=x;else if(">>="===y)for(let i=0;i<g.length;++i)g[i]>>=x;else console.error(`Invalid operator ${y}. Line ${i.line}`)}else if(_ instanceof Me&&b instanceof Me){const g=_.data,x=b.data;if(g.length!==x.length)return void console.error(`Vector length mismatch. Line ${i.line}`);if("+="===y)for(let i=0;i<g.length;++i)g[i]+=x[i];else if("-="===y)for(let i=0;i<g.length;++i)g[i]-=x[i];else if("*="===y)for(let i=0;i<g.length;++i)g[i]*=x[i];else if("/="===y)for(let i=0;i<g.length;++i)g[i]/=x[i];else if("%="===y)for(let i=0;i<g.length;++i)g[i]%=x[i];else if("&="===y)for(let i=0;i<g.length;++i)g[i]&=x[i];else if("|="===y)for(let i=0;i<g.length;++i)g[i]|=x[i];else if("^="===y)for(let i=0;i<g.length;++i)g[i]^=x[i];else if("<<="===y)for(let i=0;i<g.length;++i)g[i]<<=x[i];else if(">>="===y)for(let i=0;i<g.length;++i)g[i]>>=x[i];else console.error(`Invalid operator ${y}. Line ${i.line}`)}else{if(!(_ instanceof Be&&b instanceof Be))return void console.error(`Invalid type for ${i.operator} operator. Line ${i.line}`);"+="===y?_.value+=b.value:"-="===y?_.value-=b.value:"*="===y?_.value*=b.value:"/="===y?_.value/=b.value:"%="===y?_.value%=b.value:"&="===y?_.value&=b.value:"|="===y?_.value|=b.value:"^="===y?_.value^=b.value:"<<="===y?_.value<<=b.value:">>="===y?_.value>>=b.value:console.error(`Invalid operator ${y}. Line ${i.line}`)}return void(x instanceof Pe&&x.setDataValue(this,_,v,g))}if(x instanceof Pe)x.setDataValue(this,b,v,g);else if(v){if(!(x instanceof Me||x instanceof Ue))return void console.error(`Variable ${_} is not a vector or matrix. Line ${i.line}`);if(v instanceof ve){const y=this.evalExpression(v.index,g).value;if(x instanceof Me){if(!(b instanceof Be))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[y]=b.value}else{if(!(x instanceof Ue))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);{const y=this.evalExpression(v.index,g).value;if(y<0)return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(!(b instanceof Me))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);{const g=x.typeInfo.getTypeName();if("mat2x2"===g||"mat2x2f"===g||"mat2x2h"===g){if(!(y<2&&2===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[2*y]=b.data[0],x.data[2*y+1]=b.data[1]}else if("mat2x3"===g||"mat2x3f"===g||"mat2x3h"===g){if(!(y<2&&3===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[3*y]=b.data[0],x.data[3*y+1]=b.data[1],x.data[3*y+2]=b.data[2]}else if("mat2x4"===g||"mat2x4f"===g||"mat2x4h"===g){if(!(y<2&&4===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[4*y]=b.data[0],x.data[4*y+1]=b.data[1],x.data[4*y+2]=b.data[2],x.data[4*y+3]=b.data[3]}else if("mat3x2"===g||"mat3x2f"===g||"mat3x2h"===g){if(!(y<3&&2===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[2*y]=b.data[0],x.data[2*y+1]=b.data[1]}else if("mat3x3"===g||"mat3x3f"===g||"mat3x3h"===g){if(!(y<3&&3===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[3*y]=b.data[0],x.data[3*y+1]=b.data[1],x.data[3*y+2]=b.data[2]}else if("mat3x4"===g||"mat3x4f"===g||"mat3x4h"===g){if(!(y<3&&4===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[4*y]=b.data[0],x.data[4*y+1]=b.data[1],x.data[4*y+2]=b.data[2],x.data[4*y+3]=b.data[3]}else if("mat4x2"===g||"mat4x2f"===g||"mat4x2h"===g){if(!(y<4&&2===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[2*y]=b.data[0],x.data[2*y+1]=b.data[1]}else if("mat4x3"===g||"mat4x3f"===g||"mat4x3h"===g){if(!(y<4&&3===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[3*y]=b.data[0],x.data[3*y+1]=b.data[1],x.data[3*y+2]=b.data[2]}else{if("mat4x4"!==g&&"mat4x4f"!==g&&"mat4x4h"!==g)return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(!(y<4&&4===b.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);x.data[4*y]=b.data[0],x.data[4*y+1]=b.data[1],x.data[4*y+2]=b.data[2],x.data[4*y+3]=b.data[3]}}}}}else if(v instanceof pe){const g=v.value;if(!(x instanceof Me))return void console.error(`Invalid assignment to ${g}. Variable ${_} is not a vector. Line ${i.line}`);if(b instanceof Be){if(g.length>1)return void console.error(`Invalid assignment to ${g} for variable ${_}. Line ${i.line}`);if("x"===g)x.data[0]=b.value;else if("y"===g){if(x.data.length<2)return void console.error(`Invalid assignment to ${g} for variable ${_}. Line ${i.line}`);x.data[1]=b.value}else if("z"===g){if(x.data.length<3)return void console.error(`Invalid assignment to ${g} for variable ${_}. Line ${i.line}`);x.data[2]=b.value}else if("w"===g){if(x.data.length<4)return void console.error(`Invalid assignment to ${g} for variable ${_}. Line ${i.line}`);x.data[3]=b.value}}else{if(!(b instanceof Me))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(g.length!==b.data.length)return void console.error(`Invalid assignment to ${g} for variable ${_}. Line ${i.line}`);for(let v=0;v<g.length;++v){const y=g[v];if("x"===y||"r"===y)x.data[0]=b.data[v];else if("y"===y||"g"===y){if(b.data.length<2)return void console.error(`Invalid assignment to ${y} for variable ${_}. Line ${i.line}`);x.data[1]=b.data[v]}else if("z"===y||"b"===y){if(b.data.length<3)return void console.error(`Invalid assignment to ${y} for variable ${_}. Line ${i.line}`);x.data[2]=b.data[v]}else{if("w"!==y&&"a"!==y)return void console.error(`Invalid assignment to ${y} for variable ${_}. Line ${i.line}`);if(b.data.length<4)return void console.error(`Invalid assignment to ${y} for variable ${_}. Line ${i.line}`);x.data[3]=b.data[v]}}}}}else x instanceof Be&&b instanceof Be?x.value=b.value:x instanceof Me&&b instanceof Me||x instanceof Ue&&b instanceof Ue?x.data.set(b.data):console.error(`Invalid assignment to ${_}. Line ${i.line}`)}_function(i,g){const x=new ct(i);g.functions.set(i.name,x)}_const(i,g){let x=null;null!==i.value&&(x=this.evalExpression(i.value,g)),g.createVariable(i.name,x,i)}_let(i,g){let x=null;if(null!==i.value){if(x=this.evalExpression(i.value,g),null===x)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof ke||(x=x.clone())}else{const _=i.type.name;if("f32"===_||"i32"===_||"u32"===_||"bool"===_||"f16"===_||"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2b"===_||"vec3b"===_||"vec4b"===_||"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_||"array"===_){const _=new de(i.type,[]);x=this._evalCreate(_,g)}}g.createVariable(i.name,x,i)}_var(i,g){let x=null;if(null!==i.value){if(x=this.evalExpression(i.value,g),null===x)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof ke||(x=x.clone())}else{if(null===i.type)return void console.error(`Variable ${i.name} has no type. Line ${i.line}`);const _=i.type.name;if("f32"===_||"i32"===_||"u32"===_||"bool"===_||"f16"===_||"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2b"===_||"vec3b"===_||"vec4b"===_||"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_||i.type instanceof ue||i.type instanceof oe||i.type instanceof ce){const _=new de(i.type,[]);x=this._evalCreate(_,g)}}g.createVariable(i.name,x,i)}_switch(i,g){g=g.clone();const x=this.evalExpression(i.condition,g);if(!(x instanceof Be))return console.error(`Invalid if condition. Line ${i.line}`),null;let _=null;for(const v of i.cases)if(v instanceof Ae)for(const b of v.selectors){if(b instanceof Se){_=v;continue}const y=this.evalExpression(b,g);if(!(y instanceof Be))return console.error(`Invalid case selector. Line ${i.line}`),null;if(y.value===x.value)return this._execStatements(v.body,g)}else v instanceof Ee&&(_=v);return _?this._execStatements(_.body,g):null}_if(i,g){g=g.clone();const x=this.evalExpression(i.condition,g);if(!(x instanceof Be))return console.error(`Invalid if condition. Line ${i.line}`),null;if(x.value)return this._execStatements(i.body,g);for(const x of i.elseif){const _=this.evalExpression(x.condition,g);if(!(_ instanceof Be))return console.error(`Invalid if condition. Line ${i.line}`),null;if(_.value)return this._execStatements(x.body,g)}return i.else?this._execStatements(i.else,g):null}_getScalarValue(i){return i instanceof Be?i.value:(console.error("Expected scalar value.",i),0)}_for(i,g){for(g=g.clone(),this.execStatement(i.init,g);this._getScalarValue(this.evalExpression(i.condition,g));){const x=this._execStatements(i.body,g);if(x===dt._breakObj)break;if(null!==x&&x!==dt._continueObj)return x;this.execStatement(i.increment,g)}return null}_loop(i,g){for(g=g.clone();;){const x=this._execStatements(i.body,g);if(x===dt._breakObj)break;if(x===dt._continueObj){if(i.continuing&&this._execStatements(i.continuing.body,g)===dt._breakObj)break}else if(null!==x)return x}return null}_while(i,g){for(g=g.clone();this._getScalarValue(this.evalExpression(i.condition,g));){const x=this._execStatements(i.body,g);if(x===dt._breakObj)break;if(x!==dt._continueObj&&null!==x)return x}return null}_evalBitcast(i,g){const x=this.evalExpression(i.value,g),_=i.type;if(x instanceof Be){const i=nt(x.value,x.typeInfo.name,_.name);return new Be(i,this.getTypeInfo(_))}if(x instanceof Me){const g=x.typeInfo.getTypeName();let v="";if(g.endsWith("f"))v="f32";else if(g.endsWith("i"))v="i32";else if(g.endsWith("u"))v="u32";else if(g.endsWith("b"))v="bool";else{if(!g.endsWith("h"))return console.error(`Unknown vector type ${g}. Line ${i.line}`),null;v="f16"}const b=_.getTypeName();let y="";if(b.endsWith("f"))y="f32";else if(b.endsWith("i"))y="i32";else if(b.endsWith("u"))y="u32";else if(b.endsWith("b"))y="bool";else{if(!b.endsWith("h"))return console.error(`Unknown vector type ${y}. Line ${i.line}`),null;y="f16"}const S=function(i,g,x){if(g===x)return i;const _=new Array(i.length);for(let v=0;v<i.length;v++)_[v]=nt(i[v],g,x);return _}(Array.from(x.data),v,y);return new Me(S,this.getTypeInfo(_))}return console.error(`TODO:bitcast for ${x.typeInfo.name}. Line ${i.line}`),null}_evalConst(i,g){return g.getVariableValue(i.name).clone().getSubData(this,i.postfix,g)}_evalCreate(i,g){var x;if(i instanceof de){if(null===i.type)return Ve.void;switch(i.type.getTypeName()){case"bool":case"i32":case"u32":case"f32":case"f16":return this._callConstructorValue(i,g);case"vec2":case"vec3":case"vec4":case"vec2f":case"vec3f":case"vec4f":case"vec2h":case"vec3h":case"vec4h":case"vec2i":case"vec3i":case"vec4i":case"vec2u":case"vec3u":case"vec4u":case"vec2b":case"vec3b":case"vec4b":return this._callConstructorVec(i,g);case"mat2x2":case"mat2x2f":case"mat2x2h":case"mat2x3":case"mat2x3f":case"mat2x3h":case"mat2x4":case"mat2x4f":case"mat2x4h":case"mat3x2":case"mat3x2f":case"mat3x2h":case"mat3x3":case"mat3x3f":case"mat3x3h":case"mat3x4":case"mat3x4f":case"mat3x4h":case"mat4x2":case"mat4x2f":case"mat4x2h":case"mat4x3":case"mat4x3f":case"mat4x3h":case"mat4x4":case"mat4x4f":case"mat4x4h":return this._callConstructorMatrix(i,g)}}const _=i instanceof de?i.type.name:i.name,v=i instanceof de?this.getTypeInfo(i.type):this.getTypeInfo(i.name);if(null===v)return console.error(`Unknown type ${_}. Line ${i.line}`),null;if(0===v.size)return null;const b=new Pe(new ArrayBuffer(v.size),v,0);if(v instanceof n){if(i.args)for(let x=0;x<i.args.length;++x){const _=v.members[x],y=i.args[x],S=this.evalExpression(y,g);b.setData(this,S,_.type,_.offset,g)}}else if(v instanceof s){let _=0;if(i.args)for(let y=0;y<i.args.length;++y){const S=i.args[y],w=this.evalExpression(S,g);null===v.format&&("x32"===(null===(x=w.typeInfo)||void 0===x?void 0:x.name)?v.format=this.getTypeInfo("i32"):v.format=w.typeInfo),b.setData(this,w,v.format,_,g),_+=v.stride}}else console.error(`Unknown type "${_}". Line ${i.line}`);return i instanceof de?b.getSubData(this,i.postfix,g):b}_evalLiteral(i,g){const x=this.getTypeInfo(i.type),_=x.name;return"x32"===_||"u32"===_||"f32"===_||"f16"===_||"i32"===_||"bool"===_?new Be(i.scalarValue,x):"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_?this._callConstructorVec(i,g):"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_?this._callConstructorMatrix(i,g):i.value}_evalVariable(i,g){const x=g.getVariableValue(i.name);return null===x?x:x.getSubData(this,i.postfix,g)}_maxFormatTypeInfo(i){let g=i[0];if("f32"===g.name)return g;for(let x=1;x<i.length;++x){const _=dt._priority.get(g.name);dt._priority.get(i[x].name)<_&&(g=i[x])}return"x32"===g.name?this.getTypeInfo("i32"):g}_evalUnaryOp(i,g){const x=this.evalExpression(i.right,g);if("&"===i.operator)return new Oe(x);if("*"===i.operator)return x instanceof Oe?x.reference.getSubData(this,i.postfix,g):(console.error(`Invalid dereference. Line ${i.line}`),null);const _=x instanceof Be?x.value:x instanceof Me?Array.from(x.data):null;switch(i.operator){case"+":{if(Ge(_)){const i=_.map((i,g)=>+i);return new Me(i,x.typeInfo)}const i=_,g=this._maxFormatTypeInfo([x.typeInfo,x.typeInfo]);return new Be(+i,g)}case"-":{if(Ge(_)){const i=_.map((i,g)=>-i);return new Me(i,x.typeInfo)}const i=_,g=this._maxFormatTypeInfo([x.typeInfo,x.typeInfo]);return new Be(-i,g)}case"!":{if(Ge(_)){const i=_.map((i,g)=>i?0:1);return new Me(i,x.typeInfo)}const i=_,g=this._maxFormatTypeInfo([x.typeInfo,x.typeInfo]);return new Be(i?0:1,g)}case"~":{if(Ge(_)){const i=_.map((i,g)=>~i);return new Me(i,x.typeInfo)}const i=_,g=this._maxFormatTypeInfo([x.typeInfo,x.typeInfo]);return new Be(~i,g)}}return console.error(`Invalid unary operator ${i.operator}. Line ${i.line}`),null}_evalBinaryOp(i,g){const x=this.evalExpression(i.left,g),_=this.evalExpression(i.right,g),v=x instanceof Be?x.value:x instanceof Me||x instanceof Ue?Array.from(x.data):null,b=_ instanceof Be?_.value:_ instanceof Me||_ instanceof Ue?Array.from(_.data):null;switch(i.operator){case"+":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i+_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g+i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i+g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g+y,S)}case"-":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i-_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g-i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i-g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g-y,S)}case"*":{if(Ge(v)&&Ge(b)){const g=v,y=b;if(x instanceof Ue&&_ instanceof Ue){const v=function(i,g,x,_){if(void 0===Ht[g.name]||void 0===Ht[_.name])return null;const v=Ht[g.name][0],b=Ht[g.name][1],y=Ht[_.name][0];if(v!==Ht[_.name][1])return null;const S=new Array(y*b);for(let g=0;g<b;g++)for(let _=0;_<y;_++){let w=0;for(let y=0;y<v;y++)w+=i[y*b+g]*x[_*v+y];S[g*y+_]=w}return S}(g,x.typeInfo,y,_.typeInfo);if(null===v)return console.error(`Matrix multiplication failed. Line ${i.line}.`),null;const b=Ht[_.typeInfo.name][0],S=Ht[x.typeInfo.name][1],w=this.getTypeInfo(`mat${b}x${S}f`);return new Ue(v,w)}if(x instanceof Ue&&_ instanceof Me){const v=function(i,g,x,_){if(void 0===Ht[g.name]||void 0===Ft[_.name])return null;const v=Ht[g.name][0],b=Ht[g.name][1];if(v!==x.length)return null;const y=new Array(b);for(let g=0;g<b;g++){let _=0;for(let y=0;y<v;y++)_+=i[y*b+g]*x[y];y[g]=_}return y}(g,x.typeInfo,y,_.typeInfo);return null===v?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Me(v,_.typeInfo)}if(x instanceof Me&&_ instanceof Ue){const v=function(i,g,x,_){if(void 0===Ft[g.name]||void 0===Ht[_.name])return null;const v=Ht[_.name][0],b=Ht[_.name][1];if(b!==i.length)return null;const y=[];for(let g=0;g<v;g++){let _=0;for(let y=0;y<b;y++)_+=i[y]*x[y*v+g];y[g]=_}return y}(g,x.typeInfo,y,_.typeInfo);return null===v?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Me(v,x.typeInfo)}{if(g.length!==y.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const _=g.map((i,g)=>i*y[g]);return new Me(_,x.typeInfo)}}if(Ge(v)){const i=b,g=v.map((g,x)=>g*i);return x instanceof Ue?new Ue(g,x.typeInfo):new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i*g);return _ instanceof Ue?new Ue(g,_.typeInfo):new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g*y,S)}case"%":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i%_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g%i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i%g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g%y,S)}case"/":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i/_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g/i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i/g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g/y,S)}case"&":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i&_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g&i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i&g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g&y,S)}case"|":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i|_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g|i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i|g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g|y,S)}case"^":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i^_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g^i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i^g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g^y,S)}case"<<":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i<<_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g<<i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i<<g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g<<y,S)}case">>":{if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i>>_[g]);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g>>i);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i>>g);return new Me(g,_.typeInfo)}const g=v,y=b,S=this._maxFormatTypeInfo([x.typeInfo,_.typeInfo]);return new Be(g>>y,S)}case">":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i>_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g>i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i>g?1:0);return new Me(g,_.typeInfo)}return new Be(v>b?1:0,this.getTypeInfo("bool"));case"<":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i<_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g<i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i<g?1:0);return new Me(g,_.typeInfo)}return new Be(v<b?1:0,this.getTypeInfo("bool"));case"==":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i===_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g==i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i==g?1:0);return new Me(g,_.typeInfo)}return new Be(v===b?1:0,this.getTypeInfo("bool"));case"!=":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i!==_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g!==i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i!==g?1:0);return new Me(g,_.typeInfo)}return new Be(v!==b?1:0,this.getTypeInfo("bool"));case">=":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i>=_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g>=i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i>=g?1:0);return new Me(g,_.typeInfo)}return new Be(v>=b?1:0,this.getTypeInfo("bool"));case"<=":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i<=_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g<=i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i<=g?1:0);return new Me(g,_.typeInfo)}return new Be(v<=b?1:0,this.getTypeInfo("bool"));case"&&":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i&&_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g&&i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i&&g?1:0);return new Me(g,_.typeInfo)}return new Be(v&&b?1:0,this.getTypeInfo("bool"));case"||":if(Ge(v)&&Ge(b)){const g=v,_=b;if(g.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=g.map((i,g)=>i||_[g]?1:0);return new Me(y,x.typeInfo)}if(Ge(v)){const i=b,g=v.map((g,x)=>g||i?1:0);return new Me(g,x.typeInfo)}if(Ge(b)){const i=v,g=b.map((g,x)=>i||g?1:0);return new Me(g,_.typeInfo)}return new Be(v||b?1:0,this.getTypeInfo("bool"))}return console.error(`Unknown operator ${i.operator}. Line ${i.line}`),null}_evalCall(i,g){if(null!==i.cachedReturnValue)return i.cachedReturnValue;const x=g.clone();x.currentFunctionName=i.name;const _=g.getFunction(i.name);if(!_)return i.isBuiltin?this._callBuiltinFunction(i,x):this.getTypeInfo(i.name)?this._evalCreate(i,g):(console.error(`Unknown function "${i.name}". Line ${i.line}`),null);for(let g=0;g<_.node.args.length;++g){const v=_.node.args[g],b=this.evalExpression(i.args[g],x);x.createVariable(v.name,b,v)}return this._execStatements(_.node.body,x)}_callBuiltinFunction(i,g){switch(i.name){case"all":return this.builtins.All(i,g);case"any":return this.builtins.Any(i,g);case"select":return this.builtins.Select(i,g);case"arrayLength":return this.builtins.ArrayLength(i,g);case"abs":return this.builtins.Abs(i,g);case"acos":return this.builtins.Acos(i,g);case"acosh":return this.builtins.Acosh(i,g);case"asin":return this.builtins.Asin(i,g);case"asinh":return this.builtins.Asinh(i,g);case"atan":return this.builtins.Atan(i,g);case"atanh":return this.builtins.Atanh(i,g);case"atan2":return this.builtins.Atan2(i,g);case"ceil":return this.builtins.Ceil(i,g);case"clamp":return this.builtins.Clamp(i,g);case"cos":return this.builtins.Cos(i,g);case"cosh":return this.builtins.Cosh(i,g);case"countLeadingZeros":return this.builtins.CountLeadingZeros(i,g);case"countOneBits":return this.builtins.CountOneBits(i,g);case"countTrailingZeros":return this.builtins.CountTrailingZeros(i,g);case"cross":return this.builtins.Cross(i,g);case"degrees":return this.builtins.Degrees(i,g);case"determinant":return this.builtins.Determinant(i,g);case"distance":return this.builtins.Distance(i,g);case"dot":return this.builtins.Dot(i,g);case"dot4U8Packed":return this.builtins.Dot4U8Packed(i,g);case"dot4I8Packed":return this.builtins.Dot4I8Packed(i,g);case"exp":return this.builtins.Exp(i,g);case"exp2":return this.builtins.Exp2(i,g);case"extractBits":return this.builtins.ExtractBits(i,g);case"faceForward":return this.builtins.FaceForward(i,g);case"firstLeadingBit":return this.builtins.FirstLeadingBit(i,g);case"firstTrailingBit":return this.builtins.FirstTrailingBit(i,g);case"floor":return this.builtins.Floor(i,g);case"fma":return this.builtins.Fma(i,g);case"fract":return this.builtins.Fract(i,g);case"frexp":return this.builtins.Frexp(i,g);case"insertBits":return this.builtins.InsertBits(i,g);case"inverseSqrt":return this.builtins.InverseSqrt(i,g);case"ldexp":return this.builtins.Ldexp(i,g);case"length":return this.builtins.Length(i,g);case"log":return this.builtins.Log(i,g);case"log2":return this.builtins.Log2(i,g);case"max":return this.builtins.Max(i,g);case"min":return this.builtins.Min(i,g);case"mix":return this.builtins.Mix(i,g);case"modf":return this.builtins.Modf(i,g);case"normalize":return this.builtins.Normalize(i,g);case"pow":return this.builtins.Pow(i,g);case"quantizeToF16":return this.builtins.QuantizeToF16(i,g);case"radians":return this.builtins.Radians(i,g);case"reflect":return this.builtins.Reflect(i,g);case"refract":return this.builtins.Refract(i,g);case"reverseBits":return this.builtins.ReverseBits(i,g);case"round":return this.builtins.Round(i,g);case"saturate":return this.builtins.Saturate(i,g);case"sign":return this.builtins.Sign(i,g);case"sin":return this.builtins.Sin(i,g);case"sinh":return this.builtins.Sinh(i,g);case"smoothstep":return this.builtins.SmoothStep(i,g);case"sqrt":return this.builtins.Sqrt(i,g);case"step":return this.builtins.Step(i,g);case"tan":return this.builtins.Tan(i,g);case"tanh":return this.builtins.Tanh(i,g);case"transpose":return this.builtins.Transpose(i,g);case"trunc":return this.builtins.Trunc(i,g);case"dpdx":return this.builtins.Dpdx(i,g);case"dpdxCoarse":return this.builtins.DpdxCoarse(i,g);case"dpdxFine":return this.builtins.DpdxFine(i,g);case"dpdy":return this.builtins.Dpdy(i,g);case"dpdyCoarse":return this.builtins.DpdyCoarse(i,g);case"dpdyFine":return this.builtins.DpdyFine(i,g);case"fwidth":return this.builtins.Fwidth(i,g);case"fwidthCoarse":return this.builtins.FwidthCoarse(i,g);case"fwidthFine":return this.builtins.FwidthFine(i,g);case"textureDimensions":return this.builtins.TextureDimensions(i,g);case"textureGather":return this.builtins.TextureGather(i,g);case"textureGatherCompare":return this.builtins.TextureGatherCompare(i,g);case"textureLoad":return this.builtins.TextureLoad(i,g);case"textureNumLayers":return this.builtins.TextureNumLayers(i,g);case"textureNumLevels":return this.builtins.TextureNumLevels(i,g);case"textureNumSamples":return this.builtins.TextureNumSamples(i,g);case"textureSample":return this.builtins.TextureSample(i,g);case"textureSampleBias":return this.builtins.TextureSampleBias(i,g);case"textureSampleCompare":return this.builtins.TextureSampleCompare(i,g);case"textureSampleCompareLevel":return this.builtins.TextureSampleCompareLevel(i,g);case"textureSampleGrad":return this.builtins.TextureSampleGrad(i,g);case"textureSampleLevel":return this.builtins.TextureSampleLevel(i,g);case"textureSampleBaseClampToEdge":return this.builtins.TextureSampleBaseClampToEdge(i,g);case"textureStore":return this.builtins.TextureStore(i,g);case"atomicLoad":return this.builtins.AtomicLoad(i,g);case"atomicStore":return this.builtins.AtomicStore(i,g);case"atomicAdd":return this.builtins.AtomicAdd(i,g);case"atomicSub":return this.builtins.AtomicSub(i,g);case"atomicMax":return this.builtins.AtomicMax(i,g);case"atomicMin":return this.builtins.AtomicMin(i,g);case"atomicAnd":return this.builtins.AtomicAnd(i,g);case"atomicOr":return this.builtins.AtomicOr(i,g);case"atomicXor":return this.builtins.AtomicXor(i,g);case"atomicExchange":return this.builtins.AtomicExchange(i,g);case"atomicCompareExchangeWeak":return this.builtins.AtomicCompareExchangeWeak(i,g);case"pack4x8snorm":return this.builtins.Pack4x8snorm(i,g);case"pack4x8unorm":return this.builtins.Pack4x8unorm(i,g);case"pack4xI8":return this.builtins.Pack4xI8(i,g);case"pack4xU8":return this.builtins.Pack4xU8(i,g);case"pack4x8Clamp":return this.builtins.Pack4x8Clamp(i,g);case"pack4xU8Clamp":return this.builtins.Pack4xU8Clamp(i,g);case"pack2x16snorm":return this.builtins.Pack2x16snorm(i,g);case"pack2x16unorm":return this.builtins.Pack2x16unorm(i,g);case"pack2x16float":return this.builtins.Pack2x16float(i,g);case"unpack4x8snorm":return this.builtins.Unpack4x8snorm(i,g);case"unpack4x8unorm":return this.builtins.Unpack4x8unorm(i,g);case"unpack4xI8":return this.builtins.Unpack4xI8(i,g);case"unpack4xU8":return this.builtins.Unpack4xU8(i,g);case"unpack2x16snorm":return this.builtins.Unpack2x16snorm(i,g);case"unpack2x16unorm":return this.builtins.Unpack2x16unorm(i,g);case"unpack2x16float":return this.builtins.Unpack2x16float(i,g);case"storageBarrier":return this.builtins.StorageBarrier(i,g);case"textureBarrier":return this.builtins.TextureBarrier(i,g);case"workgroupBarrier":return this.builtins.WorkgroupBarrier(i,g);case"workgroupUniformLoad":return this.builtins.WorkgroupUniformLoad(i,g);case"subgroupAdd":return this.builtins.SubgroupAdd(i,g);case"subgroupExclusiveAdd":return this.builtins.SubgroupExclusiveAdd(i,g);case"subgroupInclusiveAdd":return this.builtins.SubgroupInclusiveAdd(i,g);case"subgroupAll":return this.builtins.SubgroupAll(i,g);case"subgroupAnd":return this.builtins.SubgroupAnd(i,g);case"subgroupAny":return this.builtins.SubgroupAny(i,g);case"subgroupBallot":return this.builtins.SubgroupBallot(i,g);case"subgroupBroadcast":return this.builtins.SubgroupBroadcast(i,g);case"subgroupBroadcastFirst":return this.builtins.SubgroupBroadcastFirst(i,g);case"subgroupElect":return this.builtins.SubgroupElect(i,g);case"subgroupMax":return this.builtins.SubgroupMax(i,g);case"subgroupMin":return this.builtins.SubgroupMin(i,g);case"subgroupMul":return this.builtins.SubgroupMul(i,g);case"subgroupExclusiveMul":return this.builtins.SubgroupExclusiveMul(i,g);case"subgroupInclusiveMul":return this.builtins.SubgroupInclusiveMul(i,g);case"subgroupOr":return this.builtins.SubgroupOr(i,g);case"subgroupShuffle":return this.builtins.SubgroupShuffle(i,g);case"subgroupShuffleDown":return this.builtins.SubgroupShuffleDown(i,g);case"subgroupShuffleUp":return this.builtins.SubgroupShuffleUp(i,g);case"subgroupShuffleXor":return this.builtins.SubgroupShuffleXor(i,g);case"subgroupXor":return this.builtins.SubgroupXor(i,g);case"quadBroadcast":return this.builtins.QuadBroadcast(i,g);case"quadSwapDiagonal":return this.builtins.QuadSwapDiagonal(i,g);case"quadSwapX":return this.builtins.QuadSwapX(i,g);case"quadSwapY":return this.builtins.QuadSwapY(i,g)}const x=g.getFunction(i.name);if(x){const _=g.clone();for(let g=0;g<x.node.args.length;++g){const v=x.node.args[g],b=this.evalExpression(i.args[g],_);_.setVariable(v.name,b,v)}return this._execStatements(x.node.body,_)}return null}_callConstructorValue(i,g){if(!i.args||0===i.args.length)return new Be(0,this.getTypeInfo(i.type));const x=this.evalExpression(i.args[0],g);return x.typeInfo=this.getTypeInfo(i.type),x.getSubData(this,i.postfix,g).clone()}_callConstructorVec(i,g){const x=this.getTypeInfo(i.type),_=i.type.getTypeName(),v=Ft[_];if(void 0===v)return console.error(`Invalid vec constructor ${_}. Line ${i.line}`),null;const b=[];if(i instanceof xe)if(i.isVector){const g=i.vectorValue;for(const i of g)b.push(i)}else b.push(i.scalarValue);else if(i.args)for(const x of i.args){const i=this.evalExpression(x,g);if(i instanceof Me){const g=i.data;for(let i=0;i<g.length;++i){let x=g[i];b.push(x)}}else if(i instanceof Be){let g=i.value;b.push(g)}}if(i.type instanceof ce&&null===i.type.format&&(i.type.format=ce.f32),0===b.length){const _=new Array(v).fill(0);return new Me(_,x).getSubData(this,i.postfix,g)}if(1===b.length)for(;b.length<v;)b.push(b[0]);return b.length<v?(console.error(`Invalid vec constructor. Line ${i.line}`),null):new Me(b.length>v?b.slice(0,v):b,x).getSubData(this,i.postfix,g)}_callConstructorMatrix(i,g){const x=this.getTypeInfo(i.type),_=i.type.getTypeName(),v=Ht[_];if(void 0===v)return console.error(`Invalid matrix constructor ${_}. Line ${i.line}`),null;const b=[];if(i instanceof xe)if(i.isVector){const g=i.vectorValue;for(const i of g)b.push(i)}else b.push(i.scalarValue);else if(i.args)for(const x of i.args){const i=this.evalExpression(x,g);i instanceof Me?b.push(...i.data):i instanceof Be?b.push(i.value):i instanceof Ue&&b.push(...i.data)}if(x instanceof a&&null===x.format&&(x.format=this.getTypeInfo("f32")),0===b.length){const _=new Array(v[2]).fill(0);return new Ue(_,x).getSubData(this,i.postfix,g)}return b.length!==v[2]?(console.error(`Invalid matrix constructor. Line ${i.line}`),null):new Ue(b,x).getSubData(this,i.postfix,g)}}dt._breakObj=new Ne(new e("BREAK",null),null),dt._continueObj=new Ne(new e("CONTINUE",null),null),dt._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class mt{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class gt{constructor(){this._tokens=[],this._current=0,this._currentLine=1,this._deferArrayCountEval=[],this._currentLoop=[],this._context=new mt,this._exec=new dt,this._forwardTypeCount=0}parse(i){this._initialize(i),this._deferArrayCountEval.length=0;const g=[];for(;!this._isAtEnd();){const i=this._global_decl_or_directive();if(!i)break;g.push(i)}if(this._deferArrayCountEval.length>0){for(const g of this._deferArrayCountEval){const x=g.arrayType,_=g.countNode;if(_ instanceof ge){const g=_.name,v=this._context.constants.get(g);if(v)try{const i=v.constEvaluate(this._exec);x.count=i}catch(i){}}}this._deferArrayCountEval.length=0}if(this._forwardTypeCount>0)for(const i of g)i.search(i=>{i instanceof Ce||i instanceof le?i.type=this._forwardType(i.type):i instanceof ue?i.format=this._forwardType(i.format):i instanceof F||i instanceof U||i instanceof P?i.type=this._forwardType(i.type):i instanceof D?i.returnType=this._forwardType(i.returnType):i instanceof $e&&(i.type=this._forwardType(i.type))});return g}_forwardType(i){if(i instanceof ie){const g=this._getType(i.name);if(g)return g}else i instanceof le?i.type=this._forwardType(i.type):i instanceof ue&&(i.format=this._forwardType(i.format));return i}_initialize(i){if(i)if("string"==typeof i){const g=new Re(i);this._tokens=g.scanTokens()}else this._tokens=i;else this._tokens=[];this._current=0}_updateNode(i,g){return i.line=null!=g?g:this._currentLine,i}_error(i,g){return{token:i,message:g,toString:()=>`${g}`}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==He.eof}_match(i){if(i instanceof qe)return!!this._check(i)&&(this._advance(),!0);for(let g=0,x=i.length;g<x;++g){const x=i[g];if(this._check(x))return this._advance(),!0}return!1}_consume(i,g){if(this._check(i))return this._advance();throw this._error(this._peek(),`${g}. Line:${this._currentLine}`)}_check(i){if(this._isAtEnd())return!1;const g=this._peek();if(i instanceof Array){const x=g.type;let _=!1;for(const g of i){if(x===g)return!0;g===He.tokens.name&&(_=!0)}if(_){const i=He.tokens.name.rule.exec(g.lexeme);if(i&&0==i.index&&i[0]==g.lexeme)return!0}return!1}if(g.type===i)return!0;if(i===He.tokens.name){const i=He.tokens.name.rule.exec(g.lexeme);return i&&0==i.index&&i[0]==g.lexeme}return!1}_advance(){var i,g;return this._currentLine=null!==(g=null===(i=this._peek())||void 0===i?void 0:i.line)&&void 0!==g?g:-1,this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(He.tokens.semicolon)&&!this._isAtEnd(););if(this._match(He.keywords.alias)){const i=this._type_alias();return this._consume(He.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(He.keywords.diagnostic)){const i=this._diagnostic();return this._consume(He.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(He.keywords.requires)){const i=this._requires_directive();return this._consume(He.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(He.keywords.enable)){const i=this._enable_directive();return this._consume(He.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}const i=this._attribute();if(this._check(He.keywords.var)){const g=this._global_variable_decl();return null!=g&&(g.attributes=i),this._consume(He.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([g]),g}if(this._check(He.keywords.override)){const g=this._override_variable_decl();return null!=g&&(g.attributes=i),this._consume(He.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([g]),g}if(this._check(He.keywords.let)){const g=this._global_let_decl();return null!=g&&(g.attributes=i),this._consume(He.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([g]),g}if(this._check(He.keywords.const)){const g=this._global_const_decl();return null!=g&&(g.attributes=i),this._consume(He.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([g]),g}if(this._check(He.keywords.struct)){const g=this._struct_decl();return null!=g&&(g.attributes=i),this._exec.reflection.updateAST([g]),g}if(this._check(He.keywords.fn)){const g=this._function_decl();return null!=g&&(g.attributes=i),this._exec.reflection.updateAST([g]),g}return null}_function_decl(){if(!this._match(He.keywords.fn))return null;const i=this._currentLine,g=this._consume(He.tokens.ident,"Expected function name.").toString();this._consume(He.tokens.paren_left,"Expected '(' for function arguments.");const x=[];if(!this._check(He.tokens.paren_right))do{if(this._check(He.tokens.paren_right))break;const i=this._attribute(),g=this._consume(He.tokens.name,"Expected argument name.").toString();this._consume(He.tokens.colon,"Expected ':' for argument type.");const _=this._attribute(),v=this._type_decl();null!=v&&(v.attributes=_,x.push(this._updateNode(new $e(g,v,i))))}while(this._match(He.tokens.comma));this._consume(He.tokens.paren_right,"Expected ')' after function arguments.");let _=null;if(this._match(He.tokens.arrow)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}const v=this._compound_statement(),b=this._currentLine;return this._updateNode(new D(g,x,_,v,i,b),i)}_compound_statement(){const i=[];for(this._consume(He.tokens.brace_left,"Expected '{' for block.");!this._check(He.tokens.brace_right);){const g=this._statement();null!==g&&i.push(g)}return this._consume(He.tokens.brace_right,"Expected '}' for block."),i}_statement(){for(;this._match(He.tokens.semicolon)&&!this._isAtEnd(););if(this._check(He.tokens.attr)&&this._attribute(),this._check(He.keywords.if))return this._if_statement();if(this._check(He.keywords.switch))return this._switch_statement();if(this._check(He.keywords.loop))return this._loop_statement();if(this._check(He.keywords.for))return this._for_statement();if(this._check(He.keywords.while))return this._while_statement();if(this._check(He.keywords.continuing))return this._continuing_statement();if(this._check(He.keywords.static_assert))return this._static_assert_statement();if(this._check(He.tokens.brace_left))return this._compound_statement();let i=null;if(this._check(He.keywords.return))i=this._return_statement();else if(this._check([He.keywords.var,He.keywords.let,He.keywords.const]))i=this._variable_statement();else if(this._match(He.keywords.discard))i=this._updateNode(new ne);else if(this._match(He.keywords.break)){const g=this._updateNode(new se);if(this._currentLoop.length>0){const i=this._currentLoop[this._currentLoop.length-1];g.loopId=i.id}i=g,this._check(He.keywords.if)&&(this._advance(),g.condition=this._optional_paren_expression())}else if(this._match(He.keywords.continue)){const g=this._updateNode(new re);if(!(this._currentLoop.length>0))throw this._error(this._peek(),`Continue statement must be inside a loop. Line:${g.line}`);{const i=this._currentLoop[this._currentLoop.length-1];g.loopId=i.id}i=g}else i=this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement();return null!=i&&this._consume(He.tokens.semicolon,"Expected ';' after statement."),i}_static_assert_statement(){if(!this._match(He.keywords.static_assert))return null;const i=this._currentLine,g=this._optional_paren_expression();return this._updateNode(new N(g),i)}_while_statement(){if(!this._match(He.keywords.while))return null;const i=this._updateNode(new V(null,null));return this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(He.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_continuing_statement(){const i=this._currentLoop.length>0?this._currentLoop[this._currentLoop.length-1].id:-1;if(!this._match(He.keywords.continuing))return null;const g=this._currentLine,x=this._compound_statement();return this._updateNode(new O(x,i),g)}_for_statement(){if(!this._match(He.keywords.for))return null;this._consume(He.tokens.paren_left,"Expected '('.");const i=this._updateNode(new B(null,null,null,null));return this._currentLoop.push(i),i.init=this._check(He.tokens.semicolon)?null:this._for_init(),this._consume(He.tokens.semicolon,"Expected ';'."),i.condition=this._check(He.tokens.semicolon)?null:this._short_circuit_or_expression(),this._consume(He.tokens.semicolon,"Expected ';'."),i.increment=this._check(He.tokens.paren_right)?null:this._for_increment(),this._consume(He.tokens.paren_right,"Expected ')'."),this._check(He.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(He.keywords.var)){const i=this._variable_decl();if(null===i)throw this._error(this._peek(),"Variable declaration expected.");let g=null;return this._match(He.tokens.equal)&&(g=this._short_circuit_or_expression()),this._updateNode(new F(i.name,i.type,i.storage,i.access,g),i.line)}if(this._match(He.keywords.let)){const i=this._currentLine,g=this._consume(He.tokens.name,"Expected name for let.").toString();let x=null;if(this._match(He.tokens.colon)){const i=this._attribute();x=this._type_decl(),null!=x&&(x.attributes=i)}this._consume(He.tokens.equal,"Expected '=' for let.");const _=this._short_circuit_or_expression();return this._updateNode(new U(g,x,null,null,_),i)}if(this._match(He.keywords.const)){const i=this._currentLine,g=this._consume(He.tokens.name,"Expected name for const.").toString();let x=null;if(this._match(He.tokens.colon)){const i=this._attribute();x=this._type_decl(),null!=x&&(x.attributes=i)}this._consume(He.tokens.equal,"Expected '=' for const.");const _=this._short_circuit_or_expression();return null===x&&_ instanceof xe&&(x=_.type),this._updateNode(new P(g,x,null,null,_),i)}return null}_increment_decrement_statement(){const i=this._current,g=this._unary_expression();if(null==g)return null;if(!this._check(He.increment_operators))return this._current=i,null;const x=this._consume(He.increment_operators,"Expected increment operator");return this._updateNode(new R(x.type===He.tokens.plus_plus?Ct.increment:Ct.decrement,g))}_assignment_statement(){let i=null;const g=this._currentLine;if(this._check(He.tokens.brace_right))return null;let x=this._match(He.tokens.underscore);if(x||(i=this._unary_expression()),!x&&null==i)return null;const _=this._consume(He.assignment_operators,"Expected assignment operator."),v=this._short_circuit_or_expression();return this._updateNode(new G(Pt.parse(_.lexeme),i,v),g)}_func_call_statement(){if(!this._check(He.tokens.ident))return null;const i=this._currentLine,g=this._current,x=this._consume(He.tokens.ident,"Expected function name."),_=this._argument_expression_list();return null===_?(this._current=g,null):this._updateNode(new X(x.lexeme,_),i)}_loop_statement(){if(!this._match(He.keywords.loop))return null;this._check(He.tokens.attr)&&this._attribute(),this._consume(He.tokens.brace_left,"Expected '{' for loop.");const i=this._updateNode(new j([],null));this._currentLoop.push(i);let g=this._statement();for(;null!==g;){if(Array.isArray(g))for(let x of g)i.body.push(x);else i.body.push(g);if(g instanceof O){i.continuing=g;break}g=this._statement()}return this._currentLoop.pop(),this._consume(He.tokens.brace_right,"Expected '}' for loop."),i}_switch_statement(){if(!this._match(He.keywords.switch))return null;const i=this._updateNode(new Z(null,[]));if(this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(He.tokens.attr)&&this._attribute(),this._consume(He.tokens.brace_left,"Expected '{' for switch."),i.cases=this._switch_body(),null==i.cases||0==i.cases.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(He.tokens.brace_right,"Expected '}' for switch."),this._currentLoop.pop(),i}_switch_body(){const i=[];let g=!1;for(;this._check([He.keywords.default,He.keywords.case]);){if(this._match(He.keywords.case)){const x=this._case_selectors();for(const i of x)if(i instanceof Se){if(g)throw this._error(this._previous(),"Multiple default cases in switch statement.");g=!0;break}this._match(He.tokens.colon),this._check(He.tokens.attr)&&this._attribute(),this._consume(He.tokens.brace_left,"Exected '{' for switch case.");const _=this._case_body();this._consume(He.tokens.brace_right,"Exected '}' for switch case."),i.push(this._updateNode(new Ae(x,_)))}if(this._match(He.keywords.default)){if(g)throw this._error(this._previous(),"Multiple default cases in switch statement.");this._match(He.tokens.colon),this._check(He.tokens.attr)&&this._attribute(),this._consume(He.tokens.brace_left,"Exected '{' for switch default.");const x=this._case_body();this._consume(He.tokens.brace_right,"Exected '}' for switch default."),i.push(this._updateNode(new Ee(x)))}}return i}_case_selectors(){const i=[];for(this._match(He.keywords.default)?i.push(this._updateNode(new Se)):i.push(this._shift_expression());this._match(He.tokens.comma);)this._match(He.keywords.default)?i.push(this._updateNode(new Se)):i.push(this._shift_expression());return i}_case_body(){if(this._match(He.keywords.fallthrough))return this._consume(He.tokens.semicolon,"Expected ';'"),[];let i=this._statement();if(null==i)return[];i instanceof Array||(i=[i]);const g=this._case_body();return 0==g.length?i:[...i,g[0]]}_if_statement(){if(!this._match(He.keywords.if))return null;const i=this._currentLine,g=this._optional_paren_expression();this._check(He.tokens.attr)&&this._attribute();const x=this._compound_statement();let _=[];this._match_elseif()&&(this._check(He.tokens.attr)&&this._attribute(),_=this._elseif_statement(_));let v=null;return this._match(He.keywords.else)&&(this._check(He.tokens.attr)&&this._attribute(),v=this._compound_statement()),this._updateNode(new Q(g,x,_,v),i)}_match_elseif(){return this._tokens[this._current].type===He.keywords.else&&this._tokens[this._current+1].type===He.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(i=[]){const g=this._optional_paren_expression(),x=this._compound_statement();return i.push(this._updateNode(new Le(g,x))),this._match_elseif()&&(this._check(He.tokens.attr)&&this._attribute(),this._elseif_statement(i)),i}_return_statement(){if(!this._match(He.keywords.return))return null;const i=this._short_circuit_or_expression();return this._updateNode(new Y(i))}_short_circuit_or_expression(){let i=this._short_circuit_and_expr();for(;this._match(He.tokens.or_or);)i=this._updateNode(new Ie(this._previous().toString(),i,this._short_circuit_and_expr()));return i}_short_circuit_and_expr(){let i=this._inclusive_or_expression();for(;this._match(He.tokens.and_and);)i=this._updateNode(new Ie(this._previous().toString(),i,this._inclusive_or_expression()));return i}_inclusive_or_expression(){let i=this._exclusive_or_expression();for(;this._match(He.tokens.or);)i=this._updateNode(new Ie(this._previous().toString(),i,this._exclusive_or_expression()));return i}_exclusive_or_expression(){let i=this._and_expression();for(;this._match(He.tokens.xor);)i=this._updateNode(new Ie(this._previous().toString(),i,this._and_expression()));return i}_and_expression(){let i=this._equality_expression();for(;this._match(He.tokens.and);)i=this._updateNode(new Ie(this._previous().toString(),i,this._equality_expression()));return i}_equality_expression(){const i=this._relational_expression();return this._match([He.tokens.equal_equal,He.tokens.not_equal])?this._updateNode(new Ie(this._previous().toString(),i,this._relational_expression())):i}_relational_expression(){let i=this._shift_expression();for(;this._match([He.tokens.less_than,He.tokens.greater_than,He.tokens.less_than_equal,He.tokens.greater_than_equal]);)i=this._updateNode(new Ie(this._previous().toString(),i,this._shift_expression()));return i}_shift_expression(){let i=this._additive_expression();for(;this._match([He.tokens.shift_left,He.tokens.shift_right]);)i=this._updateNode(new Ie(this._previous().toString(),i,this._additive_expression()));return i}_additive_expression(){let i=this._multiplicative_expression();for(;this._match([He.tokens.plus,He.tokens.minus]);)i=this._updateNode(new Ie(this._previous().toString(),i,this._multiplicative_expression()));return i}_multiplicative_expression(){let i=this._unary_expression();for(;this._match([He.tokens.star,He.tokens.forward_slash,He.tokens.modulo]);)i=this._updateNode(new Ie(this._previous().toString(),i,this._unary_expression()));return i}_unary_expression(){return this._match([He.tokens.minus,He.tokens.bang,He.tokens.tilde,He.tokens.star,He.tokens.and])?this._updateNode(new ke(this._previous().toString(),this._unary_expression())):this._singular_expression()}_singular_expression(){const i=this._primary_expression(),g=this._postfix_expression();return g&&(i.postfix=g),i}_postfix_expression(){if(this._match(He.tokens.bracket_left)){const i=this._short_circuit_or_expression();this._consume(He.tokens.bracket_right,"Expected ']'.");const g=this._updateNode(new ve(i)),x=this._postfix_expression();return x&&(g.postfix=x),g}if(this._match(He.tokens.period)){const i=this._consume(He.tokens.name,"Expected member name."),g=this._postfix_expression(),x=this._updateNode(new pe(i.lexeme));return g&&(x.postfix=g),x}return null}_getStruct(i){return this._context.aliases.has(i)?this._context.aliases.get(i).type:this._context.structs.has(i)?this._context.structs.get(i):null}_getType(i){const g=this._getStruct(i);if(null!==g)return g;switch(i){case"void":return ae.void;case"bool":return ae.bool;case"i32":return ae.i32;case"u32":return ae.u32;case"f32":return ae.f32;case"f16":return ae.f16;case"vec2f":return ce.vec2f;case"vec3f":return ce.vec3f;case"vec4f":return ce.vec4f;case"vec2i":return ce.vec2i;case"vec3i":return ce.vec3i;case"vec4i":return ce.vec4i;case"vec2u":return ce.vec2u;case"vec3u":return ce.vec3u;case"vec4u":return ce.vec4u;case"vec2h":return ce.vec2h;case"vec3h":return ce.vec3h;case"vec4h":return ce.vec4h;case"mat2x2f":return ce.mat2x2f;case"mat2x3f":return ce.mat2x3f;case"mat2x4f":return ce.mat2x4f;case"mat3x2f":return ce.mat3x2f;case"mat3x3f":return ce.mat3x3f;case"mat3x4f":return ce.mat3x4f;case"mat4x2f":return ce.mat4x2f;case"mat4x3f":return ce.mat4x3f;case"mat4x4f":return ce.mat4x4f;case"mat2x2h":return ce.mat2x2h;case"mat2x3h":return ce.mat2x3h;case"mat2x4h":return ce.mat2x4h;case"mat3x2h":return ce.mat3x2h;case"mat3x3h":return ce.mat3x3h;case"mat3x4h":return ce.mat3x4h;case"mat4x2h":return ce.mat4x2h;case"mat4x3h":return ce.mat4x3h;case"mat4x4h":return ce.mat4x4h;case"mat2x2i":return ce.mat2x2i;case"mat2x3i":return ce.mat2x3i;case"mat2x4i":return ce.mat2x4i;case"mat3x2i":return ce.mat3x2i;case"mat3x3i":return ce.mat3x3i;case"mat3x4i":return ce.mat3x4i;case"mat4x2i":return ce.mat4x2i;case"mat4x3i":return ce.mat4x3i;case"mat4x4i":return ce.mat4x4i;case"mat2x2u":return ce.mat2x2u;case"mat2x3u":return ce.mat2x3u;case"mat2x4u":return ce.mat2x4u;case"mat3x2u":return ce.mat3x2u;case"mat3x3u":return ce.mat3x3u;case"mat3x4u":return ce.mat3x4u;case"mat4x2u":return ce.mat4x2u;case"mat4x3u":return ce.mat4x3u;case"mat4x4u":return ce.mat4x4u}return null}_validateTypeRange(i,g){if("i32"===g.name){if(i<-2147483648||i>2147483647)throw this._error(this._previous(),`Value out of range for i32:${i}. Line:${this._currentLine}.`)}else if("u32"===g.name&&(i<0||i>4294967295))throw this._error(this._previous(),`Value out of range for u32:${i}. Line:${this._currentLine}.`)}_primary_expression(){if(this._match(He.tokens.ident)){const i=this._previous().toString();if(this._check(He.tokens.paren_left)){const g=this._argument_expression_list(),x=this._getType(i);return null!==x?this._updateNode(new de(x,g)):this._updateNode(new me(i,g))}if(this._context.constants.has(i)){const g=this._context.constants.get(i);return this._updateNode(new _e(i,g.value))}return this._updateNode(new ge(i))}if(this._match(He.tokens.int_literal)){const i=this._previous().toString();let g=i.endsWith("i")||i.endsWith("i")?ae.i32:i.endsWith("u")||i.endsWith("U")?ae.u32:ae.x32;const x=parseInt(i);return this._validateTypeRange(x,g),this._updateNode(new xe(new Be(x,this._exec.getTypeInfo(g)),g))}if(this._match(He.tokens.uint_literal)){const i=parseInt(this._previous().toString());return this._validateTypeRange(i,ae.u32),this._updateNode(new xe(new Be(i,this._exec.getTypeInfo(ae.u32)),ae.u32))}if(this._match([He.tokens.decimal_float_literal,He.tokens.hex_float_literal])){let i=this._previous().toString(),g=i.endsWith("h");g&&(i=i.substring(0,i.length-1));const x=parseFloat(i);this._validateTypeRange(x,g?ae.f16:ae.f32);const _=g?ae.f16:ae.f32;return this._updateNode(new xe(new Be(x,this._exec.getTypeInfo(_)),_))}if(this._match([He.keywords.true,He.keywords.false])){let i=this._previous().toString()===He.keywords.true.rule;return this._updateNode(new xe(new Be(i?1:0,this._exec.getTypeInfo(ae.bool)),ae.bool))}if(this._check(He.tokens.paren_left))return this._paren_expression();if(this._match(He.keywords.bitcast)){this._consume(He.tokens.less_than,"Expected '<'.");const i=this._type_decl();this._consume(He.tokens.greater_than,"Expected '>'.");const g=this._paren_expression();return this._updateNode(new ye(i,g))}const i=this._type_decl(),g=this._argument_expression_list();return this._updateNode(new de(i,g))}_argument_expression_list(){if(!this._match(He.tokens.paren_left))return null;const i=[];do{if(this._check(He.tokens.paren_right))break;const g=this._short_circuit_or_expression();i.push(g)}while(this._match(He.tokens.comma));return this._consume(He.tokens.paren_right,"Expected ')' for agument list"),i}_optional_paren_expression(){this._match(He.tokens.paren_left);const i=this._short_circuit_or_expression();return this._match(He.tokens.paren_right),i}_paren_expression(){this._consume(He.tokens.paren_left,"Expected '('.");const i=this._short_circuit_or_expression();return this._consume(He.tokens.paren_right,"Expected ')'."),i}_struct_decl(){if(!this._match(He.keywords.struct))return null;const i=this._currentLine,g=this._consume(He.tokens.ident,"Expected name for struct.").toString();this._consume(He.tokens.brace_left,"Expected '{' for struct body.");const x=[];for(;!this._check(He.tokens.brace_right);){const i=this._attribute(),g=this._consume(He.tokens.name,"Expected variable name.").toString();this._consume(He.tokens.colon,"Expected ':' for struct member type.");const _=this._attribute(),v=this._type_decl();null!=v&&(v.attributes=_),this._check(He.tokens.brace_right)?this._match(He.tokens.comma):this._consume(He.tokens.comma,"Expected ',' for struct member."),x.push(this._updateNode(new Ce(g,v,i)))}this._consume(He.tokens.brace_right,"Expected '}' after struct body.");const _=this._currentLine,v=this._updateNode(new oe(g,x,i,_),i);return this._context.structs.set(g,v),v}_global_variable_decl(){const i=this._variable_decl();if(!i)return null;if(this._match(He.tokens.equal)){const g=this._const_expression();i.value=g}if(null!==i.type&&i.value instanceof xe){if("x32"!==i.value.type.name&&i.type.getTypeName()!==i.value.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${i.value.type.name} to ${i.type.name}. Line:${this._currentLine}`);i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type),i.value.type=i.type}else null===i.type&&i.value instanceof xe&&(i.type="x32"===i.value.type.name?ae.i32:i.value.type,i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type));return i}_override_variable_decl(){const i=this._override_decl();return i&&this._match(He.tokens.equal)&&(i.value=this._const_expression()),i}_global_const_decl(){var i;if(!this._match(He.keywords.const))return null;const g=this._consume(He.tokens.name,"Expected variable name"),x=this._currentLine;let _=null;if(this._match(He.tokens.colon)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}let v=null;this._consume(He.tokens.equal,"const declarations require an assignment");const b=this._short_circuit_or_expression();try{let i=[ae.f32],x=b.constEvaluate(this._exec,i);x instanceof Be&&this._validateTypeRange(x.value,i[0]),i[0]instanceof ce&&null===i[0].format&&x.typeInfo instanceof a&&null!==x.typeInfo.format&&("f16"===x.typeInfo.format.name?i[0].format=ae.f16:"f32"===x.typeInfo.format.name?i[0].format=ae.f32:"i32"===x.typeInfo.format.name?i[0].format=ae.i32:"u32"===x.typeInfo.format.name?i[0].format=ae.u32:"bool"===x.typeInfo.format.name?i[0].format=ae.bool:console.error(`TODO:impelement template format type ${x.typeInfo.format.name}`)),v=this._updateNode(new xe(x,i[0])),this._exec.context.setVariable(g.toString(),x)}catch(i){v=b}if(null!==_&&v instanceof xe){if("x32"!==v.type.name&&_.getTypeName()!==v.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${v.type.name} to ${_.name}. Line:${this._currentLine}`);v.type=_,v.isScalar&&this._validateTypeRange(v.scalarValue,v.type)}else null===_&&v instanceof xe&&(_=null!==(i=null==v?void 0:v.type)&&void 0!==i?i:ae.f32,_===ae.x32&&(_=ae.i32));const y=this._updateNode(new P(g.toString(),_,"","",v),x);return this._context.constants.set(y.name,y),y}_global_let_decl(){if(!this._match(He.keywords.let))return null;const i=this._currentLine,g=this._consume(He.tokens.name,"Expected variable name");let x=null;if(this._match(He.tokens.colon)){const i=this._attribute();x=this._type_decl(),null!=x&&(x.attributes=i)}let _=null;if(this._match(He.tokens.equal)&&(_=this._const_expression()),null!==x&&_ instanceof xe){if("x32"!==_.type.name&&x.getTypeName()!==_.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${_.type.name} to ${x.name}. Line:${this._currentLine}`);_.type=x}else null===x&&_ instanceof xe&&(x="x32"===_.type.name?ae.i32:_.type);return _ instanceof xe&&_.isScalar&&this._validateTypeRange(_.scalarValue,x),this._updateNode(new U(g.toString(),x,"","",_),i)}_const_expression(){return this._short_circuit_or_expression()}_variable_decl(){if(!this._match(He.keywords.var))return null;const i=this._currentLine;let g="",x="";this._match(He.tokens.less_than)&&(g=this._consume(He.storage_class,"Expected storage_class.").toString(),this._match(He.tokens.comma)&&(x=this._consume(He.access_mode,"Expected access_mode.").toString()),this._consume(He.tokens.greater_than,"Expected '>'."));const _=this._consume(He.tokens.name,"Expected variable name");let v=null;if(this._match(He.tokens.colon)){const i=this._attribute();v=this._type_decl(),null!=v&&(v.attributes=i)}return this._updateNode(new F(_.toString(),v,g,x,null),i)}_override_decl(){if(!this._match(He.keywords.override))return null;const i=this._consume(He.tokens.name,"Expected variable name");let g=null;if(this._match(He.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}return this._updateNode(new M(i.toString(),g,null))}_diagnostic(){this._consume(He.tokens.paren_left,"Expected '('");const i=this._consume(He.tokens.ident,"Expected severity control name.");this._consume(He.tokens.comma,"Expected ','");let g=this._consume(He.tokens.ident,"Expected diagnostic rule name.").toString();return this._match(He.tokens.period)&&(g+=`.${this._consume(He.tokens.ident,"Expected diagnostic message.").toString()}`),this._consume(He.tokens.paren_right,"Expected ')'"),this._updateNode(new ee(i.toString(),g))}_enable_directive(){const i=this._consume(He.tokens.ident,"identity expected.");return this._updateNode(new K(i.toString()))}_requires_directive(){const i=[this._consume(He.tokens.ident,"identity expected.").toString()];for(;this._match(He.tokens.comma);){const g=this._consume(He.tokens.ident,"identity expected.");i.push(g.toString())}return this._updateNode(new J(i))}_type_alias(){const i=this._consume(He.tokens.ident,"identity expected.");this._consume(He.tokens.equal,"Expected '=' for type alias.");let g=this._type_decl();if(null===g)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(g.name)&&(g=this._context.aliases.get(g.name).type);const x=this._updateNode(new te(i.toString(),g));return this._context.aliases.set(x.name,x),x}_type_decl(){if(this._check([He.tokens.ident,...He.texel_format,He.keywords.bool,He.keywords.f32,He.keywords.i32,He.keywords.u32])){const i=this._advance().toString();if(this._context.structs.has(i))return this._context.structs.get(i);if(this._context.aliases.has(i))return this._context.aliases.get(i).type;if(!this._getType(i)){const g=this._updateNode(new ie(i));return this._forwardTypeCount++,g}return this._updateNode(new ae(i))}let i=this._texture_sampler_types();if(i)return i;if(this._check(He.template_types)){let i=this._advance().toString(),g=null,x=null;return this._match(He.tokens.less_than)&&(g=this._type_decl(),x=null,this._match(He.tokens.comma)&&(x=this._consume(He.access_mode,"Expected access_mode for pointer").toString()),this._consume(He.tokens.greater_than,"Expected '>' for type.")),this._updateNode(new ce(i,g,x))}if(this._match(He.keywords.ptr)){let i=this._previous().toString();this._consume(He.tokens.less_than,"Expected '<' for pointer.");const g=this._consume(He.storage_class,"Expected storage_class for pointer");this._consume(He.tokens.comma,"Expected ',' for pointer.");const x=this._type_decl();let _=null;return this._match(He.tokens.comma)&&(_=this._consume(He.access_mode,"Expected access_mode for pointer").toString()),this._consume(He.tokens.greater_than,"Expected '>' for pointer."),this._updateNode(new le(i,g.toString(),x,_))}const g=this._attribute();if(this._match(He.keywords.array)){let x=null,_=-1;const v=this._previous();let b=null;if(this._match(He.tokens.less_than)){x=this._type_decl(),this._context.aliases.has(x.name)&&(x=this._context.aliases.get(x.name).type);let g="";if(this._match(He.tokens.comma)){b=this._shift_expression();try{g=b.constEvaluate(this._exec).toString(),b=null}catch(i){g="1"}}this._consume(He.tokens.greater_than,"Expected '>' for array."),_=g?parseInt(g):0}const y=this._updateNode(new ue(v.toString(),g,x,_));return b&&this._deferArrayCountEval.push({arrayType:y,countNode:b}),y}return null}_texture_sampler_types(){if(this._match(He.sampler_type))return this._updateNode(new he(this._previous().toString(),null,null));if(this._match(He.depth_texture_type))return this._updateNode(new he(this._previous().toString(),null,null));if(this._match(He.sampled_texture_type)||this._match(He.multisampled_texture_type)){const i=this._previous();this._consume(He.tokens.less_than,"Expected '<' for sampler type.");const g=this._type_decl();return this._consume(He.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new he(i.toString(),g,null))}if(this._match(He.storage_texture_type)){const i=this._previous();this._consume(He.tokens.less_than,"Expected '<' for sampler type.");const g=this._consume(He.texel_format,"Invalid texel format.").toString();this._consume(He.tokens.comma,"Expected ',' after texel format.");const x=this._consume(He.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(He.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new he(i.toString(),g,x))}return null}_attribute(){let i=[];for(;this._match(He.tokens.attr);){const g=this._consume(He.attribute_name,"Expected attribute name"),x=this._updateNode(new De(g.toString(),null));if(this._match(He.tokens.paren_left)){if(x.value=this._consume(He.literal_or_ident,"Expected attribute value").toString(),this._check(He.tokens.comma)){this._advance();do{const i=this._consume(He.literal_or_ident,"Expected attribute value").toString();x.value instanceof Array||(x.value=[x.value]),x.value.push(i)}while(this._match(He.tokens.comma))}this._consume(He.tokens.paren_right,"Expected ')'")}i.push(x)}return 0==i.length?null:i}}class _t extends at{constructor(i){super(),i&&this.update(i)}update(i){const g=(new gt).parse(i);this.updateAST(g)}}class UniformType{static get i32(){return{numElements:1,align:4,size:4,type:"i32",wgslType:"i32",View:Int32Array}}static get u32(){return{numElements:1,align:4,size:4,type:"u32",wgslType:"u32",View:Uint32Array}}static get f32(){return{numElements:1,align:4,size:4,type:"f32",wgslType:"f32",View:Float32Array}}static get f16(){return{numElements:1,align:2,size:2,type:"f16",wgslType:"f16",View:Uint16Array}}static get vec2f32(){return{numElements:2,align:8,size:8,type:"f32",wgslType:"vec2<f32>",View:Float32Array}}static get vec2i32(){return{numElements:2,align:8,size:8,type:"i32",wgslType:"vec2<i32>",View:Int32Array}}static get vec2u32(){return{numElements:2,align:8,size:8,type:"u32",wgslType:"vec2<u32>",View:Uint32Array}}static get vec2u16(){return{numElements:2,align:4,size:4,type:"u16",wgslType:"vec2<u16>",View:Uint16Array}}static get vec3i32(){return{numElements:3,align:16,size:12,type:"i32",wgslType:"vec3<i32>",View:Int32Array}}static get vec3u32(){return{numElements:3,align:16,size:12,type:"u32",wgslType:"vec3<u32>",View:Uint32Array}}static get vec3f32(){return{numElements:3,align:16,size:12,type:"f32",wgslType:"vec3<f32>",View:Float32Array}}static get vec3u16(){return{numElements:3,align:8,size:6,type:"u16",wgslType:"vec3<u16>",View:Uint16Array}}static get vec4i32(){return{numElements:4,align:16,size:16,type:"i32",wgslType:"vec4<i32>",View:Int32Array}}static get vec4u32(){return{numElements:4,align:16,size:16,type:"u32",wgslType:"vec4<u32>",View:Uint32Array}}static get vec4f32(){return{numElements:4,align:16,size:16,type:"f32",wgslType:"vec4<f32>",View:Float32Array}}static get vec4u16(){return{numElements:4,align:8,size:8,type:"u16",wgslType:"vec4<u16>",View:Uint16Array}}static get mat2x2f32(){return{numElements:4,align:8,size:16,type:"f32",wgslType:"mat2x2<f32>",View:Float32Array}}static get mat2x2u16(){return{numElements:4,align:4,size:8,type:"u16",wgslType:"mat2x2<u16>",View:Uint16Array}}static get mat3x2f32(){return{numElements:6,align:8,size:24,type:"f32",wgslType:"mat3x2<f32>",View:Float32Array}}static get mat3x2u16(){return{numElements:6,align:4,size:12,type:"u16",wgslType:"mat3x2<u16>",View:Uint16Array}}static get mat3x3f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat3x3<f32>",View:Float32Array}}static get mat4x2f32(){return{numElements:8,align:8,size:32,type:"f32",wgslType:"mat4x2<f32>",View:Float32Array}}static get mat4x2u16(){return{numElements:8,align:4,size:16,type:"u16",wgslType:"mat4x2<u16>",View:Uint16Array}}static get mat2x3f32(){return{numElements:8,align:16,size:32,type:"f32",wgslType:"mat2x3<f32>",View:Float32Array}}static get mat2x3u16(){return{numElements:8,align:8,size:16,type:"u16",wgslType:"mat2x3<u16>",View:Uint16Array}}static get mat4x4f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat4x4<f32>",View:Float32Array}}static get mat4x4u16(){return{numElements:16,align:8,size:32,type:"u16",wgslType:"mat4x4<u16>",View:Uint16Array}}}Object.freeze(UniformType);const zt={TILE_COUNT_X:32,TILE_COUNT_Y:32,TILE_COUNT_Z:48,WORKGROUP_SIZE_X:8,WORKGROUP_SIZE_Y:4,WORKGROUP_SIZE_Z:8,MAX_LIGHTS_PER_CLUSTER:100,MAX_CLUSTER_LIGHTS:1024,getTotalTileSize:()=>zt.TILE_COUNT_X*zt.TILE_COUNT_Y*zt.TILE_COUNT_Z,getClusterLightsBufferSize:()=>{const i=zt.getTotalTileSize();return 8*i+8*zt.MAX_LIGHTS_PER_CLUSTER*i+4},getDispatchSize:()=>[Math.ceil(zt.TILE_COUNT_X/zt.WORKGROUP_SIZE_X),Math.ceil(zt.TILE_COUNT_Y/zt.WORKGROUP_SIZE_Y),Math.ceil(zt.TILE_COUNT_Z/zt.WORKGROUP_SIZE_Z)]};Object.freeze(zt);const $t=Object.freeze({calcTintBlendMode:"\nfn rgbToHsl(rgb:vec3<f32>) -> vec3<f32> { let maxVal:f32=max(max(rgb.r,rgb.g),rgb.b); let minVal:f32=min(min(rgb.r,rgb.g),rgb.b); let delta:f32=maxVal - minVal; let eps=1e-6; let lightness:f32=(maxVal + minVal) * 0.5; if (delta < eps) { return vec3<f32>(0.0,0.0,lightness); } var saturation:f32; if (lightness < 0.5) { saturation=delta/(maxVal + minVal + eps); } else { saturation=delta/(2.0 - maxVal - minVal + eps); } var hue:f32=0.0; if (abs(rgb.r - maxVal) < eps) { hue=(rgb.g - rgb.b)/delta; if (rgb.g < rgb.b) { hue +=6.0; } } else if (abs(rgb.g - maxVal) < eps) { hue=(rgb.b - rgb.r)/delta + 2.0; } else { hue=(rgb.r - rgb.g)/delta + 4.0; } hue=hue/6.0; return vec3<f32>(hue,saturation,lightness);\n}\nfn hslToRgb(hsl:vec3<f32>) -> vec3<f32> { let h=hsl.x; let s=hsl.y; let l=hsl.z; if (s==0.0) { return vec3<f32>(l,l,l); } var q:f32; if (l < 0.5) { q=l * (1.0 + s); } else { q=l + s - l * s; } let p=2.0 * l - q; var r:f32; var g:f32; var b:f32; for (var i:i32=0;i < 3;i=i + 1) { var t:f32; if (i==0) { t=h + 1.0/3.0; } else if (i==1) { t=h; } else { t=h - 1.0/3.0; } if (t < 0.0) { t=t + 1.0; } if (t > 1.0) { t=t - 1.0; } var color:f32; if (t < 1.0/6.0) { color=p + (q - p) * 6.0 * t; } else if (t < 1.0/2.0) { color=q; } else if (t < 2.0/3.0) { color=p + (q - p) * (2.0/3.0 - t) * 6.0; } else { color=p; } if (i==0) { r=color; } else if (i==1) { g=color; } else { b=color; } } return vec3<f32>(r,g,b);\n}\nfn calcTintBlendMode(baseColor:vec4<f32>,tintBlendMode:u32,tint:vec4<f32>) -> vec4<f32> { var tintedColor:vec3<f32>; let eps=1e-6; switch (tintBlendMode) { case 0u:{  tintedColor=mix(baseColor.rgb,tint.rgb,tint.a); } case 1u:{  tintedColor=baseColor.rgb * tint.rgb; } case 2u:{  tintedColor=max(baseColor.rgb,tint.rgb); } case 3u:{  tintedColor=1.0 - (1.0 - baseColor.rgb) * (1.0 - tint.rgb); } case 4u:{  tintedColor=clamp(baseColor.rgb + tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0)); } case 5u:{  tintedColor=clamp(baseColor.rgb - tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0)); } case 6u:{  tintedColor=min(baseColor.rgb,tint.rgb); } case 7u:{  tintedColor=mix( 2.0 * baseColor.rgb * tint.rgb, 1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb), step(vec3<f32>(0.5),baseColor.rgb) ); } case 8u:{  tintedColor=clamp(baseColor.rgb/(1.0 - tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 9u:{  tintedColor=1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 10u:{  tintedColor=mix( 2.0 * baseColor.rgb * tint.rgb, 1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb), step(vec3<f32>(0.5),tint.rgb) ); } case 11u:{  tintedColor=mix( baseColor.rgb * (tint.rgb + tint.rgb - vec3<f32>(1.0)), baseColor.rgb + tint.rgb - baseColor.rgb * tint.rgb, step(vec3<f32>(0.5),tint.rgb) ); } case 12u:{  tintedColor=abs(baseColor.rgb - tint.rgb); } case 13u:{  tintedColor=baseColor.rgb + tint.rgb - 2.0 * baseColor.rgb * tint.rgb; } case 14u:{  tintedColor=clamp(baseColor.rgb/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 15u:{  tintedColor=mix( clamp(baseColor.rgb/(1.0 - (tint.rgb - vec3<f32>(0.5)) * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)), 1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)), step(vec3<f32>(0.5),tint.rgb) ); } case 16u:{  tintedColor=clamp(baseColor.rgb + tint.rgb - vec3<f32>(1.0),vec3<f32>(0.0),vec3<f32>(1.0)); } case 17u:{  tintedColor=mix( min(baseColor.rgb,2.0 * tint.rgb), max(baseColor.rgb,2.0 * tint.rgb - vec3<f32>(1.0)), step(vec3<f32>(0.5),tint.rgb) ); } case 18u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(baseHsl.x,tintHsl.y,baseHsl.z)); } case 19u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(tintHsl.x,baseHsl.y,baseHsl.z)); } case 20u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(baseHsl.x,baseHsl.y,tintHsl.z)); } case 21u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(tintHsl.x,tintHsl.y,baseHsl.z)); } case 22u:{  tintedColor=1.0 - abs(1.0 - baseColor.rgb - tint.rgb); } default:{ tintedColor=baseColor.rgb; } } return vec4<f32>(tintedColor,baseColor.a * tint.a);\n}\n",calcDirectionalShadowVisibility:"fn calcDirectionalShadowVisibility( directionalShadowMap:texture_depth_2d, directionalShadowMapSampler:sampler_comparison, shadowDepthTextureSize:u32, bias:f32, shadowPos:vec3<f32>\n) -> f32 { let oneOverShadowDepthTextureSize=1.0/f32(shadowDepthTextureSize); let shadowDepth=clamp(shadowPos.z,0.0,1.0); var visibility:f32=0.0; for (var y=-1;y <=1;y++) { for (var x=-1;x <=1;x++) { let offset=vec2f(vec2(x,y)) * oneOverShadowDepthTextureSize; let tUV=shadowPos.xy + offset; let sampleVisibility=textureSampleCompare( directionalShadowMap, directionalShadowMapSampler, tUV, shadowDepth - bias ); if (tUV.x < 0.0 || tUV.x > 1.0 || tUV.y < 0.0 || tUV.y > 1.0) { visibility +=1.0; } else { visibility +=sampleVisibility; } } } visibility/=9.0; let depthFactor=shadowDepth; let minVisibility=0.2 + depthFactor * 0.6; return max(visibility,minVisibility);\n}\n",drawDirectionalShadowDepth:"struct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); #redgpu_if useDisplacementTexture { let distance=distance(position.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition( input_position, input_vertexNormal, displacementTexture, displacementTextureSampler, vertexUniforms.displacementScale, input_uv, mipLevel ); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } #redgpu_endIf output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n",normalFunctions:"\nfn cotangent_frame( N:vec3<f32>,p:vec3<f32>,uv:vec2<f32>) -> mat3x3<f32>{ let dp1:vec3<f32>=dpdx( p ); let dp2:vec3<f32>=dpdy( p ); let duv1:vec2<f32>=dpdx( uv ); let duv2:vec2<f32>=dpdy( uv ); let dp2perp:vec3<f32>=cross( dp2,N ); let dp1perp:vec3<f32>=cross( N,dp1 ); let T:vec3<f32>=dp2perp * duv1.x + dp1perp * duv2.x; let B:vec3<f32>=dp2perp * duv1.y + dp1perp * duv2.y; let invmax:f32=inverseSqrt( max( dot(T,T),dot(B,B) ) ); return mat3x3<f32>( T * invmax,B * invmax,N );\n}\nfn perturb_normal( N:vec3<f32>,V:vec3<f32>,texcoord:vec2<f32>,normalColor:vec3<f32>,normalPower:f32 ) -> vec3<f32> { var map:vec3<f32>=normalColor; map=map * 255./127. - 128./127.; map=vec3<f32>(map.xy * -normalPower,map.z); let TBN:mat3x3<f32>=cotangent_frame(N,V,texcoord); return normalize(TBN * map);\n}\n",calcPrePathBackground:"fn calcPrePathBackground( u_useKHR_materials_volume:bool,thicknessParameter:f32,u_KHR_dispersion:f32,u_KHR_attenuationDistance:f32,u_KHR_attenuationColor:vec3<f32>, ior:f32,roughnessParameter:f32,albedo:vec3<f32>, projectionCameraMatrix:mat4x4<f32>,input_vertexPosition:vec3<f32>,input_ndcPosition:vec3<f32>, V:vec3<f32>,N:vec3<f32>, renderPath1ResultTexture:texture_2d<f32>,renderPath1ResultTextureSampler:sampler\n) -> vec3<f32> { var prePathBackground=vec3<f32>(0.0); let transmissionMipLevel:f32=roughnessParameter * f32(textureNumLevels(renderPath1ResultTexture) - 1); if(u_useKHR_materials_volume){ var iorR:f32=ior; var iorG:f32=ior; var iorB:f32=ior; if(u_KHR_dispersion>0.0){ let halfSpread:f32=(ior - 1.0) * 0.025 * u_KHR_dispersion; iorR=ior + halfSpread; iorG=ior; iorB=ior - halfSpread; } let refractedVecR:vec3<f32>=refract(-V,N,1.0/iorR); let refractedVecG:vec3<f32>=refract(-V,N,1.0/iorG); let refractedVecB:vec3<f32>=refract(-V,N,1.0/iorB); let worldPosR:vec3<f32>=input_vertexPosition + refractedVecR * thicknessParameter; let worldPosG:vec3<f32>=input_vertexPosition + refractedVecG * thicknessParameter; let worldPosB:vec3<f32>=input_vertexPosition + refractedVecB * thicknessParameter; let clipPosR:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosR,1.0); let clipPosG:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosG,1.0); let clipPosB:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosB,1.0); let ndcR:vec2<f32>=clipPosR.xy/clipPosR.w * 0.5 + 0.5; let ndcG:vec2<f32>=clipPosG.xy/clipPosG.w * 0.5 + 0.5; let ndcB:vec2<f32>=clipPosB.xy/clipPosB.w * 0.5 + 0.5; let finalUV_R:vec2<f32>=vec2<f32>(ndcR.x,1.0 - ndcR.y); let finalUV_G:vec2<f32>=vec2<f32>(ndcG.x,1.0 - ndcG.y); let finalUV_B:vec2<f32>=vec2<f32>(ndcB.x,1.0 - ndcB.y); prePathBackground.r=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_R,transmissionMipLevel).r; prePathBackground.g=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_G,transmissionMipLevel).g; prePathBackground.b=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_B,transmissionMipLevel).b; } else { let refractedVec:vec3<f32>=refract(-V,N,1.0/ior); let worldPos:vec3<f32>=input_vertexPosition + refractedVec * thicknessParameter; let clipPos:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPos,1.0); let ndc:vec2<f32>=clipPos.xy/clipPos.w * 0.5 + 0.5; let finalUV:vec2<f32>=vec2<f32>(ndc.x,1.0 - ndc.y); prePathBackground=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV,transmissionMipLevel).rgb; } prePathBackground *=albedo; return prePathBackground;\n}\n",FragmentOutput:"struct FragmentOutput { @location(0) color:vec4<f32>, @location(1) gBufferNormal:vec4<f32>, @location(2) gBufferMotionVector:vec4<f32>,\n}\n",picking:"@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let input_position=inputData.position; let u_modelMatrix=vertexUniforms.modelMatrix; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0); output.position=u_projectionCameraMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n",drawPicking:"\n@fragment\nfn picking(inputData:InputData) -> @location(0) vec4<f32> { var finalColor:vec4<f32>=inputData.pickingId; return finalColor;\n}\n"});Object.freeze($t);const Kt=Object.freeze({calcDisplacements:"fn calcDisplacementPosition(input_position:vec3<f32>,input_vertexNormal:vec3<f32>,displacementTexture:texture_2d<f32>,displacementTextureSampler:sampler,displacementScale:f32,input_uv:vec2<f32>,mipLevel:f32) -> vec3<f32> { let displacementSample=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,mipLevel).r; let scaledDisplacement=(displacementSample - 0.5) * displacementScale; let displacedPosition=input_position + input_vertexNormal * scaledDisplacement; return displacedPosition;\n}\nfn calcDisplacementNormal( input_vertexNormal:vec3<f32>, displacementTexture:texture_2d<f32>, displacementTextureSampler:sampler, displacementScale:f32, input_uv:vec2<f32>, mipLevel:f32\n) -> vec3<f32> { let textureDimensions=vec2<f32>(textureDimensions(displacementTexture,0)); let adaptiveOffset=vec2<f32>(1.0)/textureDimensions; let actualMipLevel=mipLevel; let center=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,actualMipLevel).r; let left=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(adaptiveOffset.x,0.0),actualMipLevel).r; let right=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(adaptiveOffset.x,0.0),actualMipLevel).r; let down=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(0.0,adaptiveOffset.y),actualMipLevel).r; let up=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(0.0,adaptiveOffset.y),actualMipLevel).r; let ddx=((right - 0.5) - (left - 0.5)) * displacementScale/(2.0 * adaptiveOffset.x); let ddy=((up - 0.5) - (down - 0.5)) * displacementScale/(2.0 * adaptiveOffset.y); let tangentSpaceNormal=normalize(vec3<f32>(-ddx,-ddy,1.0)); let worldNormal=normalize(input_vertexNormal); let normalStrength=clamp(1.0 - mipLevel * 0.1,0.2,1.0); let blendedNormal=normalize(mix(worldNormal,tangentSpaceNormal,normalStrength * 0.3)); return blendedNormal;\n}\n",calculateMotionVector:"fn calculateMotionVector( currentClipPos:vec4<f32>, prevClipPos:vec4<f32>, resolution:vec2<f32>\n) -> vec2<f32> { let currentW=max(currentClipPos.w,0.000001); let prevW=max(prevClipPos.w,0.000001); let currentNDC=currentClipPos.xy/currentW; let prevNDC=prevClipPos.xy/prevW; let motionVectorNDC=currentNDC - prevNDC; let screenMotionVector=motionVectorNDC * resolution * 0.5; let maxMotionPixels=16.0; let motionMagnitude=length(screenMotionVector); let clampedMotionVector=screenMotionVector * min(1.0,maxMotionPixels/max(motionMagnitude,0.000001)); return clampedMotionVector;\n}\n",getBillboardMatrix:"fn getBillboardMatrix(cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>) -> mat4x4<f32> { let scaleX=length(vec3<f32>(modelMatrix[0].xyz)); let scaleY=length(vec3<f32>(modelMatrix[1].xyz)); let scaleZ=length(vec3<f32>(modelMatrix[2].xyz)); let scaleMatrix=mat4x4<f32>( vec4<f32>(scaleX,0.0,0.0,0.0), vec4<f32>(0.0,scaleY,0.0,0.0), vec4<f32>(0.0,0.0,scaleZ,0.0), vec4<f32>(0.0,0.0,0.0,1.0) ); var resultMatrix=cameraMatrix * modelMatrix; resultMatrix[0][0]=1.0;resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0; resultMatrix[1][0]=0.0;resultMatrix[1][1]=1.0;resultMatrix[1][2]=0.0; resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=1.0; return resultMatrix * scaleMatrix;\n}\nfn getBillboardMatrixNoScaleRatio( cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>)-> mat4x4<f32>{ var resultMatrix=cameraMatrix * modelMatrix; resultMatrix[0][0]=modelMatrix[0][0];resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0; resultMatrix[1][0]=0.0;resultMatrix[1][1]=modelMatrix[1][1];resultMatrix[1][2]=0.0; resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=modelMatrix[2][2]; return resultMatrix;\n}\n",extractScaleAndTranslation:"fn extractScaleAndTranslation(modelMatrix:mat4x4<f32>) -> mat4x4<f32> { let scaleX=length(vec3<f32>(modelMatrix[0].xyz)); let scaleY=length(vec3<f32>(modelMatrix[1].xyz)); let scaleZ=length(vec3<f32>(modelMatrix[2].xyz)); let scaleMatrix=mat4x4<f32>( vec4<f32>(scaleX,0.0,0.0,0.0), vec4<f32>(0.0,scaleY,0.0,0.0), vec4<f32>(0.0,0.0,scaleZ,0.0), vec4<f32>(0.0,0.0,0.0,1.0) ); return mat4x4<f32>( scaleMatrix[0], scaleMatrix[1], scaleMatrix[2], modelMatrix[3]  );\n}\n"});Object.freeze(Kt);const Xt=Object.freeze({SYSTEM_UNIFORM:"struct DirectionalLight { direction:vec3<f32>, color:vec3<f32>, intensity:f32,\n};\nstruct AmbientLight { color:vec3<f32>, intensity:f32\n};\nstruct Camera { cameraMatrix:mat4x4<f32>, cameraPosition:vec3<f32>, nearClipping:f32, farClipping:f32\n};\nstruct SystemUniform { projectionMatrix:mat4x4<f32>, projectionCameraMatrix:mat4x4<f32>, noneJitterProjectionMatrix:mat4x4<f32>, noneJitterProjectionCameraMatrix:mat4x4<f32>, inverseProjectionMatrix:mat4x4<f32>, prevProjectionCameraMatrix:mat4x4<f32>, resolution:vec2<f32>, camera:Camera, viewPosition:vec2<f32>, directionalLightCount:u32, directionalLights:array<DirectionalLight,3>, directionalLightProjectionViewMatrix:mat4x4<f32>, directionalLightProjectionMatrix:mat4x4<f32>, directionalLightViewMatrix:mat4x4<f32>, shadowDepthTextureSize:u32, bias:f32, ambientLight:AmbientLight, time:f32, useIblTexture:u32, isView3D:u32,\n};\n@group(0) @binding(0) var<uniform> systemUniforms:SystemUniform;\n@group(0) @binding(1) var directionalShadowMapSampler:sampler_comparison;\n@group(0) @binding(2) var directionalShadowMap:texture_depth_2d;\n@group(0) @binding(3) var iblTextureSampler:sampler;\n@group(0) @binding(7) var renderPath1ResultTextureSampler:sampler;\n@group(0) @binding(8) var renderPath1ResultTexture:texture_2d<f32>;\n@group(0) @binding(9) var packedTextureSampler:sampler;\n@group(0) @binding(10) var ibl_environmentTexture:texture_cube<f32>;\n@group(0) @binding(11) var ibl_irradianceTexture:texture_cube<f32>;\nconst clusterLight_indicesLength:u32=u32(REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu * REDGPU_DEFINE_TOTAL_TILESu);\nconst clusterLight_tileCount=vec3<u32>(REDGPU_DEFINE_TILE_COUNT_Xu,REDGPU_DEFINE_TILE_COUNT_Yu,REDGPU_DEFINE_TILE_COUNT_Zu);\nstruct ClusterLights { offset:u32, count:u32\n};\nstruct ClusterLightsGroup { offset:atomic<u32>, lights:array<ClusterLights,REDGPU_DEFINE_TOTAL_TILES>, indices:array<u32,clusterLight_indicesLength>\n};\nstruct ClusterLight_ClusterCube { minAABB:vec4<f32>, maxAABB:vec4<f32> };\nstruct ClusterLight_Clusters { cubeList:array<ClusterLight_ClusterCube,REDGPU_DEFINE_TOTAL_TILES>\n};\nfn linearDepth(depthSample:f32) -> f32 { return systemUniforms.camera.farClipping*systemUniforms.camera.nearClipping/fma(depthSample,systemUniforms.camera.nearClipping-systemUniforms.camera.farClipping,systemUniforms.camera.farClipping);\n}\nfn getClusterLightClusterIndex(fragCoord:vec4<f32>) -> u32 { let tile=getClusterLightTile(fragCoord); return tile.x + tile.y * clusterLight_tileCount.x + tile.z * clusterLight_tileCount.x * clusterLight_tileCount.y;\n}\nfn getClusterLightTile(fragCoord:vec4<f32>) -> vec3<u32> { let sliceScale=f32(clusterLight_tileCount.z)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping); let sliceBias=-(f32(clusterLight_tileCount.z) * log2(systemUniforms.camera.nearClipping)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping)); let zTile=u32(max(log2(linearDepth(fragCoord.z)) * sliceScale + sliceBias,0.0)); return vec3<u32>(u32(fragCoord.x/(systemUniforms.resolution.x/f32(clusterLight_tileCount.x))), u32(fragCoord.y/(systemUniforms.resolution.y/f32(clusterLight_tileCount.y))), zTile);\n}\nstruct ClusterLight { position:vec3<f32>,radius:f32, color:vec3<f32>,intensity:f32, isSpotLight:f32,directionX:f32,directionY:f32,directionZ:f32, outerCutoff:f32,innerCutoff:f32,\n};\nstruct ClusterLightList { count:vec4<f32>, lights:array<ClusterLight>\n};\n@group(0) @binding(5) var<storage> clusterLightList:ClusterLightList;\n@group(0) @binding(6) var<storage,read_write> clusterLightGroup:ClusterLightsGroup;\n",...Kt,...$t});Object.freeze(Xt);class ShaderVariantGenerator{#F=new Map;#H;#z;constructor(i,g){this.#H=i,this.#z=g}getVariant(i){if(this.#F.has(i))return this.#F.get(i);const g="none"===i?[]:i.split("+"),x=this.#$(g);return this.#F.set(i,x),x}getCachedVariants(){return Array.from(this.#F.keys())}#$(i){let g=this.#H;for(let x=this.#z.length-1;x>=0;x--){const _=this.#z[x];g=i.includes(_.uniformName)?g.replace(_.fullMatch,_.ifBlock):g.replace(_.fullMatch,_.elseBlock||"")}return g}}const Wt=Object.keys(Xt).join("|"),jt=new RegExp(`#redgpu_include (${Wt})`,"g"),Yt=/REDGPU_DEFINE_(?:TILE_COUNT_[XYZ]|TOTAL_TILES|WORKGROUP_SIZE_[XYZ]|MAX_LIGHTS_PER_CLUSTER)/g,qt={REDGPU_DEFINE_TILE_COUNT_X:zt.TILE_COUNT_X.toString(),REDGPU_DEFINE_TILE_COUNT_Y:zt.TILE_COUNT_Y.toString(),REDGPU_DEFINE_TILE_COUNT_Z:zt.TILE_COUNT_Z.toString(),REDGPU_DEFINE_TOTAL_TILES:zt.getTotalTileSize().toString(),REDGPU_DEFINE_WORKGROUP_SIZE_X:zt.WORKGROUP_SIZE_X.toString(),REDGPU_DEFINE_WORKGROUP_SIZE_Y:zt.WORKGROUP_SIZE_Y.toString(),REDGPU_DEFINE_WORKGROUP_SIZE_Z:zt.WORKGROUP_SIZE_Z.toString(),REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTER:zt.MAX_LIGHTS_PER_CLUSTER.toString()},Zt=/#redgpu_if\s+(\w+)\b([\s\S]*?)(?:#redgpu_else([\s\S]*?))?#redgpu_endIf/g,Jt=new Map,preprocessWGSL=i=>{const g=(i=>{let g=0;for(let x=0;x<i.length;x++)g=(g<<5)-g+i.charCodeAt(x),g&=g;return g.toString(36)})(i),x=Jt.get(g);if(x)return x;const _=(i=>i.replace(jt,(i,g)=>Xt[g]||i))(i),v=(i=>i.replace(Yt,i=>qt[i]||i))(_),b=(i=>{const g=[];let x,_=0;for(Zt.lastIndex=0;null!==(x=Zt.exec(i));){const[i,v,b,y]=x;g.push({uniformName:v,ifBlock:b.trim(),elseBlock:y?.trim(),fullMatch:i,blockIndex:_++})}return g})(v);(i=>{if(!i.length)return;const g=new Map;i.forEach(i=>{g.set(i.uniformName,(g.get(i.uniformName)||0)+1)}),Array.from(g.entries()).filter(([i,g])=>g>1).length})(b);const y=((i,g)=>{let x=i;for(let i=g.length-1;i>=0;i--){const _=g[i];x=x.replace(_.fullMatch,_.ifBlock)}return x})(v,b),S=[...new Set(b.map(i=>i.uniformName))],w={cacheKey:g,defaultSource:y,shaderSourceVariant:new ShaderVariantGenerator(v,b),conditionalBlocks:S};return Math.pow(2,S.length),Jt.set(g,w),w},processMembers=(i,g=0,x=0)=>{let _=0,v=x;const b=i?.reduce((i,x,b)=>{const{type:y,offset:S,size:w,stride:L,count:k,isArray:H}=x,{format:z}=y,W="array"===y.name?`${z.name}${z.format?`${z.format.name}`:""}`:`${y.name}${z?`${z.name}`:""}`;if(0===b&&(_=S),v=S+w,i[x.name]=((i,g,x)=>{const _=UniformType[x];return{uniformOffset:i.offset+g,stride:i.stride,isArray:i.isArray,typeInfo:_,View:_?.View}})(x,g,W),H&&z.members){const g=processMembers(z.members).members;i[x.name].memberList=Array.from({length:k},(i,x)=>{const _={};for(const i in g){const v=_[i]={...g[i]};v.uniformOffset=v.uniformOffset+S+L*x}return _})}else y.members&&(i[x.name]=processMembers(y.members,S+g,v));return i},{});return{members:b,startOffset:_,endOffset:v}},Qt=new Map,parseWGSL=i=>{const{defaultSource:g,shaderSourceVariant:x,conditionalBlocks:_,cacheKey:v}=preprocessWGSL(i),b=Qt.get(v);let y;if(b)y=b;else{const i=new _t(g);y={uniforms:{...(w=i.uniforms,w.reduce((i,g)=>(i[g.name]={name:g.name,...processMembers(g.members),arrayBufferByteLength:g.size,stride:g.stride},g.attributes?.forEach(x=>i[g.name][x.name]=+x.value),i),{}))},storage:{...(S=i.storage,S.reduce((i,g)=>(i[g.name]={name:g.name,...processMembers(g.members),arrayBufferByteLength:g.size,stride:g.stride,acccess:g.access,type:g.type},g.attributes?.forEach(x=>i[g.name][x.name]=+x.value),i),{}))},samplers:i.samplers,textures:i.textures,vertexEntries:i.entry.vertex.map(i=>i.name),fragmentEntries:i.entry.fragment.map(i=>i.name),computeEntries:i.entry.compute.map(i=>i.name)},Qt.set(v,y)}var S,w;return{...y,defaultSource:g,shaderSourceVariant:x,conditionalBlocks:_}},en={ZERO:"zero",ONE:"one",SRC:"src",ONE_MINUS_SRC:"one-minus-src",SRC_ALPHA:"src-alpha",ONE_MINUS_SRC_ALPHA:"one-minus-src-alpha",DST:"dst",ONE_MINUS_DST:"one-minus-dst",DST_ALPHA:"dst-alpha",ONE_MINUS_DST_ALPHA:"one-minus-dst-alpha",SRC_ALPHA_SATURATED:"src-alpha-saturated",CONSTANT:"constant",ONE_MINUS_CONSTANT:"one-minus-constant",SRC1:"src1",ONE_MINUS_SRC1:"one-minus-src1",SRC1_ALPHA:"src1-alpha",ONE_MINUS_SRC1_ALPHA:"one-minus-src1-alpha"};Object.freeze(en);const tn={ADD:"add",SUBTRACT:"subtract",REVERSE_SUBTRACT:"reverse-subtract",MIN:"min",MAX:"max"};Object.freeze(tn);class FragmentGPURenderInfo{fragmentShaderModule;fragmentShaderSourceVariant;fragmentShaderVariantConditionalBlocks;fragmentUniformInfo;fragmentBindGroupLayout;fragmentUniformBuffer;fragmentUniformBindGroup;fragmentState;constructor(i,g,x,_,v,b,y,S){this.fragmentShaderModule=i,this.fragmentShaderSourceVariant=g,this.fragmentShaderVariantConditionalBlocks=x,this.fragmentUniformInfo=_,this.fragmentBindGroupLayout=v,this.fragmentUniformBuffer=b,this.fragmentUniformBindGroup=y,this.fragmentState=S}}Object.freeze(FragmentGPURenderInfo);const nn=Object.values(en),rn=Object.values(tn);class BlendState{state;#K;#X;#W;#j;constructor(i,g,x,_){this.#j=i,this.srcFactor=g,this.dstFactor=x,this.operation=_}get operation(){return this.#W}set operation(i){rn.includes(i)||consoleAndThrowError(`Invalid GPUBlendOperation:${i}. Valid operations are ${rn.join(",")}`),this.#W=i,this.#Y()}get srcFactor(){return this.#K}set srcFactor(i){nn.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid srcFactor factors are ${nn.join(",")}`),this.#K=i,this.#Y()}get dstFactor(){return this.#X}set dstFactor(i){nn.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid dstFactor factors are ${nn.join(",")}`),this.#X=i,this.#Y()}#Y(){const i=this.#W?{operation:this.#W}:{},g=this.#K?{srcFactor:this.#K}:{},x=this.#X?{dstFactor:this.#X}:{};this.state={...i,...g,...x},this.#j.dirtyPipeline=!0}}class ResourceStateUniformBuffer{static dirtyList=[];buffer;uuid;#q=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#q}set useNum(i){this.#q=i,ResourceStateUniformBuffer.dirtyList.push(this)}}class ManagementResourceBase extends ResourceBase{#Z;constructor(i,g){super(i,g),g||consoleAndThrowError("need managedStateKey",this.constructor.name),this.#Z=i.resourceManager[g],this.#Z||consoleAndThrowError(g,"is not exist in RedGPUContext.resourceManager",this.constructor.name)}get targetResourceManagedState(){return this.#Z}}const an=Symbol("gpuBuffer"),sn=Symbol("gpuBufferData"),on=Symbol("gpuBufferCacheKey");class ABaseBuffer extends ManagementResourceBase{[an];[on];#J;constructor(i,g,x){super(i,g),this.#J=x}get cacheKey(){return this[on]||this.uuid}get gpuBuffer(){return this[an]}get usage(){return this.#J}get data(){return this[sn]}get size(){return this[sn].byteLength||0}get videoMemorySize(){return this.size}destroy(){const i=this[an];i&&(this[an]=null,this.__fireListenerList(!0),this.redGPUContext.resourceManager.unregisterManagementResource(this),i&&i.destroy())}}class AUniformBaseBuffer extends ABaseBuffer{[sn];#Q;#ee;constructor(i,g,x,_,v=""){super(i,g,x),this.#ee=_.byteLength,this.#Q={size:this.#ee,usage:this.usage,label:v};try{this[an]=i.gpuDevice.createBuffer(this.#Q)}catch(i){console.error("GPU 버퍼 생성에 실패했습니다:",i)}i.gpuDevice.queue.writeBuffer(this[an],0,_)}get size(){return this.#ee}get uniformBufferDescriptor(){return this.#Q}writeBuffers(i){const{gpuDevice:g}=this.redGPUContext;let x=i.length;for(;x--;){const[_,v]=i[x];g.queue.writeBuffer(this.gpuBuffer,_.uniformOffset,new _.View("number"==typeof v?[v]:v))}}writeBuffer(i,g){this.redGPUContext.gpuDevice.queue.writeBuffer(this.gpuBuffer,i.uniformOffset,new i.View("number"==typeof g?[g]:g))}}class UniformBuffer extends AUniformBaseBuffer{constructor(i,g,x="",_=""){super(i,"managedUniformBufferState",GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,g,x);const{table:v}=this.targetResourceManagedState,b=v.get(_);if(b)return b.buffer;_&&(this.name=_,this[on]=_),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateUniformBuffer(this))}}Object.freeze(UniformBuffer);const getMipLevelCount=(i,g)=>Math.floor(Math.log2(Math.max(i,g)))+1,un={CLAMP_TO_EDGE:"clamp-to-edge",REPEAT:"repeat",MIRRORED_REPEAT:"mirror-repeat"};Object.freeze(un);const ln={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(ln);const cn={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(cn);const hn=new Map,fn=Object.values(ln),dn=Object.values(un),mn=Object.values(cn);class Sampler extends ResourceBase{#te;#ne=ln.LINEAR;#re=ln.LINEAR;#ie=cn.LINEAR;#ae=un.CLAMP_TO_EDGE;#se=un.CLAMP_TO_EDGE;#oe=un.REPEAT;#ue;#le;#ce;#he=1;constructor(i,g){super(i),this.#fe(g)}get addressModeU(){return this.#ae}set addressModeU(i){this.#de(i,"addressModeU")}get addressModeV(){return this.#se}set addressModeV(i){this.#de(i,"addressModeV")}get addressModeW(){return this.#oe}set addressModeW(i){this.#de(i,"addressModeW")}get mipmapFilter(){return this.#ie}set mipmapFilter(i){this.#me(i,mn,"mipmapFilter")}get gpuSampler(){return this.#te}get magFilter(){return this.#ne}set magFilter(i){this.#me(i,fn,"magFilter")}get minFilter(){return this.#re}set minFilter(i){this.#me(i,fn,"minFilter")}get maxAnisotropy(){return this.#he}set maxAnisotropy(i){validateUintRange(i,1,16),this.#he=i,this.#fe()}get isAnisotropyValid(){return!this.#he||"linear"===this.#ne&&"linear"===this.#re&&"linear"===this.#ie}#pe(){this.__fireListenerList()}#de(i,g){if(dn.includes(i)){switch(g){case"addressModeU":this.#ae=i;break;case"addressModeV":this.#se=i;break;case"addressModeW":this.#oe=i}this.#fe()}else consoleAndThrowError(`Invalid ${g} value. Must be one of ${dn.join(",")},but received:${i}.`)}#me(i,g,x){if(g.includes(i)||null===i){switch(x){case"mipmapFilter":this.#ie=i;break;case"magFilter":this.#ne=i;break;case"minFilter":this.#re=i}this.#fe()}else consoleAndThrowError(`Invalid ${x} value. Must be one of ${g.join(",")},but received:${i}.`)}#ge(){return`${this.#ne}:${this.#re}:${this.#ie}:${this.#ae}:${this.#se}:${this.#oe}:${this.#ue}:${this.#le}:${this.#ce}:${this.#he}`}#fe(i){i&&(i.magFilter&&(this.#ne=i.magFilter),i.minFilter&&(this.#re=i.minFilter),i.mipmapFilter&&(this.#ie=i.mipmapFilter),i.addressModeU&&(this.#ae=i.addressModeU),i.addressModeV&&(this.#se=i.addressModeV),i.addressModeW&&(this.#oe=i.addressModeW),void 0!==i.lodMinClamp&&(this.#ue=i.lodMinClamp),void 0!==i.lodMaxClamp&&(this.#le=i.lodMaxClamp),i.compare&&(this.#ce=i.compare),i.maxAnisotropy&&(this.#he=i.maxAnisotropy)),this.isAnisotropyValid||1===this.#he||(console.warn(`Invalid maxAnisotropy setting (${this.#he}) detected:magFilter(${this.#ne}),minFilter(${this.#re}),mipmapFilter(${this.#ie}) must all be set to 'linear' for anisotropic filtering to work. Falling back to default (1).`),this.#he=1);const g=this.#ge();if(!hn.has(g)){let i={};this.#ne&&(i.magFilter=this.#ne),this.#re&&(i.minFilter=this.#re),this.#ie&&(i.mipmapFilter=this.#ie),this.#ae&&(i.addressModeU=this.#ae),this.#se&&(i.addressModeV=this.#se),this.#oe&&(i.addressModeW=this.#oe),void 0!==this.#ue&&(i.lodMinClamp=this.#ue),void 0!==this.#le&&(i.lodMaxClamp=this.#le),this.#ce&&(i.compare=this.#ce),this.#he&&(i.maxAnisotropy=this.#he),hn.set(g,this.redGPUContext.gpuDevice.createSampler(i))}this.#te=hn.get(g),this.#pe()}}Object.freeze(Sampler);const pn=new Map,gn=new WeakMap;let xn,_n,vn;class PackedTexture{#v=createUUID();#b;#xe;#_e;#y;#ve;#be=new Map;constructor(i){this.#b=i,this.#y=i.gpuDevice,this.#ye(),this.#xe=this.#Te()}get uuid(){return this.#v}get gpuTexture(){return this.#_e}static getCacheMap(){return pn}async packing(i,g,x,_,v){const b={r:"r",g:"g",b:"b",a:"a",...v},y=`${i.r?.label||""}_${i.g?.label||""}_${i.b?.label||""}_${i.a?.label||""}`,S=`${JSON.stringify(b)}_${y}`;if(!(i.r||i.g||i.b||i.a))return;this.#Se(S);pn.get(S)||await this.#Me(i,g,x,_,b,S)}destroy(){const i=gn.get(this);if(i){const g=pn.get(i);g&&(g.useNum--,0===g.useNum&&(g.gpuTexture?.destroy(),pn.delete(i))),gn.delete(this)}}#ye(){vn=this.#b.resourceManager.createGPUBuffer("PACK_TEXTURE_MAPPING_BUFFER",{size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),_n||(_n=this.#b.resourceManager.createBindGroupLayout("PACK_TEXTURE_BIND_GROUP_LAYOUT",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]})),xn||(xn=this.#we())}#Re(i){const g=`${i.r?.label||"empty"}_${i.g?.label||"empty"}_${i.b?.label||"empty"}_${i.a?.label||"empty"}`,{resourceManager:x}=this.#b;if(!this.#be.has(g)){const _=[{binding:0,resource:x.getGPUResourceBitmapTextureView(i.r)},{binding:1,resource:x.getGPUResourceBitmapTextureView(i.g)},{binding:2,resource:x.getGPUResourceBitmapTextureView(i.b)},{binding:3,resource:x.getGPUResourceBitmapTextureView(i.a)},{binding:4,resource:this.#xe},{binding:5,resource:{buffer:vn}}],v=this.#y.createBindGroup({label:`PACK_TEXTURE_BIND_GROUP_${g}`,layout:_n,entries:_});this.#be.set(g,v)}this.#ve=this.#be.get(g)}#Se(i){const g=gn.get(this);if(g&&g!==i){const i=pn.get(g);i&&(i.useNum--,0===i.useNum&&(i.gpuTexture?.destroy(),pn.delete(g)))}const x=pn.get(i);x&&(this.#_e=x.gpuTexture,x.useNum++),gn.set(this,i)}async#Me(i,g,x,_,v,b){const y={size:[g,x,1],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,label:_||`PACK_TEXTURE_${createUUID()}`,mipLevelCount:getMipLevelCount(g,x)};this.#_e&&(this.#_e=null);const S=this.#b.resourceManager.createManagedTexture(y),w=new Uint32Array([["r","g","b","a"].indexOf(v.r),["r","g","b","a"].indexOf(v.g),["r","g","b","a"].indexOf(v.b),["r","g","b","a"].indexOf(v.a)]);this.#y.queue.writeBuffer(vn,0,w),this.#Re(i),this.#Ce(S),this.#_e=y.mipLevelCount>1?this.#b.resourceManager.mipmapGenerator.generateMipmap(S,y):S,pn.set(b,{gpuTexture:this.#_e,useNum:1,mappingKey:b,uuid:this.#v}),this.#ve=null}#Ce(i){const{resourceManager:g}=this.#b,x=this.#y.createCommandEncoder(),_=x.beginRenderPass({colorAttachments:[{view:g.getGPUResourceBitmapTextureView(i,{baseMipLevel:0,mipLevelCount:1,dimension:"2d",label:`${i.label}_RENDER_TARGET`}),loadOp:"clear",storeOp:"store",clearValue:[0,0,0,0]}]});_.setPipeline(xn),_.setBindGroup(0,this.#ve),_.draw(6,1,0,0),_.end(),this.#y.queue.submit([x.finish()])}#we(){const i="struct VertexOut { @builtin(position) position:vec4<f32>, @location(0) uv:vec2<f32>,\n};\n@vertex\nfn vertexMain(@builtin(vertex_index) VertexIndex:u32) -> VertexOut { var pos=array<vec2<f32>,6>( vec2(-1.0,-1.0), vec2( 1.0,-1.0), vec2(-1.0,1.0), vec2(-1.0,1.0), vec2( 1.0,-1.0), vec2( 1.0,1.0) ); var uv=array<vec2<f32>,6>( vec2(0.0,1.0), vec2(1.0,1.0), vec2(0.0,0.0), vec2(0.0,0.0), vec2(1.0,1.0), vec2(1.0,0.0) ); var output:VertexOut; output.position=vec4(pos[VertexIndex],0.0,1.0); output.uv=uv[VertexIndex]; return output;\n}\nstruct ComponentMapping { r_component:u32, g_component:u32, b_component:u32, a_component:u32,\n};\n@group(0) @binding(0) var textureR:texture_2d<f32>;\n@group(0) @binding(1) var textureG:texture_2d<f32>;\n@group(0) @binding(2) var textureB:texture_2d<f32>;\n@group(0) @binding(3) var textureA:texture_2d<f32>;\n@group(0) @binding(4) var sampler0:sampler;\n@group(0) @binding(5) var<uniform> mapping:ComponentMapping;\nfn getComponent(color:vec4<f32>,componentIndex:u32) -> f32 { switch componentIndex { case 0u:{ return color.r;} case 1u:{ return color.g;} case 2u:{ return color.b;} case 3u:{ return color.a;} default:{ return 0.0;} }\n}\n@fragment\nfn fragmentMain(input:VertexOut) -> @location(0) vec4<f32> { let colorR=textureSample(textureR,sampler0,input.uv); let colorG=textureSample(textureG,sampler0,input.uv); let colorB=textureSample(textureB,sampler0,input.uv); let colorA=textureSample(textureA,sampler0,input.uv); let r=getComponent(colorR,mapping.r_component); let g=getComponent(colorG,mapping.g_component); let b=getComponent(colorB,mapping.b_component); let a=getComponent(colorA,mapping.a_component); return vec4(r,g,b,a);\n}\n",{resourceManager:g}=this.#b,x=this.#y.createPipelineLayout({label:"PACK_TEXTURE_PIPELINE_LAYOUT",bindGroupLayouts:[_n]});return this.#y.createRenderPipeline({label:"PACK_TEXTURE_PIPELINE",layout:x,vertex:{module:g.createGPUShaderModule("PACK_TEXTURE_SHADER_MODULE",{code:i}),entryPoint:"vertexMain"},fragment:{module:g.createGPUShaderModule("PACK_TEXTURE_SHADER_MODULE",{code:i}),entryPoint:"fragmentMain",targets:[{format:"rgba8unorm"}]},primitive:{topology:"triangle-list"}})}#Te(){return new Sampler(this.#b).gpuSampler}}const bn={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DARKEN:6,OVERLAY:7,COLOR_DODGE:8,COLOR_BURN:9,HARD_LIGHT:10,SOFT_LIGHT:11,DIFFERENCE:12,EXCLUSION:13,DIVIDE:14,VIVID_LIGHT:15,LINEAR_BURN:16,PIN_LIGHT:17,SATURATION:18,HUE:19,LUMINOSITY:20,COLOR:21,NEGATION:22},getBindGroupLayoutDescriptorFromShaderInfo=(i,g,x,_=!0)=>{const{textures:v,samplers:b,uniforms:y,storage:S}=i,w=[];for(const i in S){const _=S[i],{binding:v,name:b,group:y,type:L}=_;if(_.access){const i={write:"write-only-storage",read:"read-only-storage",read_write:"read-write-storage"}[_.access];g===y&&w.push({binding:v,visibility:x,buffer:{type:i}})}else if(g===y){const{access:i,format:g}=L,_={write:"write-only",read:"read-only",read_write:"read-write"}[i],b=g.name;w.push({binding:v,visibility:x,storageTexture:{access:_,format:b}})}}for(const i in v){const b=v[i],{binding:y,name:S,group:L,type:k}=b,{name:H}=k;g===L&&w.push({binding:y,visibility:x,texture:"texture_depth_2d"===H||"texture_depth_multisampled_2d"===H?{viewDimension:"2d",sampleType:"depth",multisampled:_}:"texture_cube"===H?{viewDimension:"cube"}:"texture_2d_array"===H?{viewDimension:"2d-array",sampleType:"float",multisampled:!1}:{}})}for(const i in b){const _=b[i],{binding:v,name:y,group:S}=_;g===S&&w.push({binding:v,visibility:x,sampler:{type:"filtering"}})}for(const i in y){const _=y[i],{binding:v,name:b,group:S}=_;g===S&&w.push({binding:v,visibility:x,buffer:{type:"uniform"}})}return{entries:w}},getFragmentBindGroupLayoutDescriptorFromShaderInfo=(i,g)=>getBindGroupLayoutDescriptorFromShaderInfo(i,g,GPUShaderStage.FRAGMENT),getVertexBindGroupLayoutDescriptorFromShaderInfo=(i,g)=>getBindGroupLayoutDescriptorFromShaderInfo(i,g,GPUShaderStage.VERTEX),getComputeBindGroupLayoutDescriptorFromShaderInfo=(i,g,x)=>getBindGroupLayoutDescriptorFromShaderInfo(i,g,GPUShaderStage.COMPUTE,x);class ABaseMaterial extends ResourceBase{use2PathRender;gpuRenderInfo;dirtyPipeline=!1;transparent=!1;#Pe=GPUColorWrite.ALL;#Be;#Ee;#Ie;#Le;#Ue;#De;#Ae;#ke;#Oe;#Ge;#Ne;#Ve;#Fe;#He;#ze;#$e;#Ke=bn.MULTIPLY;constructor(i,g,x,_){super(i),this.#ze=g,this.#Ae=`FRAGMENT_MODULE_${this.#ze}`,this.#ke=`FRAGMENT_BIND_GROUP_DESCRIPTOR_${g}`,this.#Oe=`FRAGMENT_BIND_GROUP_LAYOUT_${g}`,this.#Ge=x,this.#Ne=x?.storage,this.#Ve=x?.uniforms.uniforms,this.#Fe=x?.textures,this.#He=x?.samplers,this.#$e=i.resourceManager.getGPUBindGroupLayout(this.#Oe)||i.resourceManager.createBindGroupLayout(this.#Oe,getFragmentBindGroupLayoutDescriptorFromShaderInfo(x,_)),this.#Be=new BlendState(this,en.SRC_ALPHA,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#Ee=new BlendState(this,en.SRC_ALPHA,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#Ie=i.resourceManager,this.#Le=this.#Ie.basicSampler.gpuSampler,this.#Ue=this.#Ie.emptyBitmapTextureView,this.#De=this.#Ie.emptyCubeTextureView}get tintBlendMode(){const i=Object.entries(bn).find(([,i])=>i===this.#Ke);if(!i)throw new Error(`Invalid tint mode value:${this.#Ke}`);return i[0]}set tintBlendMode(i){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=this.gpuRenderInfo;let _;if("string"==typeof i){if(!(i in bn))throw new Error(`Invalid tint mode key:${i}`);_=bn[i]}else{if("number"!=typeof i||!Object.values(bn).includes(i))throw new Error(`Invalid tint mode:${i}`);_=i}x.writeBuffer(g.members.tintBlendMode,_),this.#Ke=_}get MODULE_NAME(){return this.#ze}get FRAGMENT_SHADER_MODULE_NAME(){return this.#Ae}get FRAGMENT_BIND_GROUP_DESCRIPTOR_NAME(){return this.#ke}get STORAGE_STRUCT(){return this.#Ne}get UNIFORM_STRUCT(){return this.#Ve}get blendColorState(){return this.#Be}get blendAlphaState(){return this.#Ee}get writeMaskState(){return this.#Pe}set writeMaskState(i){this.#Pe=i}initGPURenderInfos(){const{redGPUContext:i}=this,{resourceManager:g}=i,x=g.createGPUShaderModule(this.#Ae,{code:this.#Ge.defaultSource}),_=new ArrayBuffer(Math.max(this.#Ve.arrayBufferByteLength,16)),v=new UniformBuffer(i,_,`UniformBuffer_${this.#ze}_${this.uuid}`);this.gpuRenderInfo=new FragmentGPURenderInfo(x,this.#Ge.shaderSourceVariant,this.#Ge.conditionalBlocks,this.#Ve,this.#$e,v,null,null),this._updateBaseProperty(),this._updateFragmentState()}_updateFragmentState(){const{gpuDevice:i,resourceManager:g}=this.redGPUContext;this.#Xe();const x=[];for(const i in this.#Fe){const _=this.#Fe[i],{binding:v,name:b,group:y,type:S}=_,{name:w}=S;let L;L="texture_cube"===w?g.getGPUResourceCubeTextureView(this[b]):this[b]instanceof PackedTexture?g.getGPUResourceBitmapTextureView(this[b]):g.getGPUResourceBitmapTextureView(this[b])||this.#Ue,2===y&&x.push({binding:v,resource:L})}for(const i in this.#He){const g=this.#He[i],{binding:_,name:v,group:b}=g;2===b&&x.push({binding:_,resource:this.getGPUResourceSampler(this[v])})}this.#Ve&&x.push({binding:this.#Ve.binding,resource:{buffer:this.gpuRenderInfo.fragmentUniformBuffer.gpuBuffer,offset:0,size:this.gpuRenderInfo.fragmentUniformBuffer.size}});const _={layout:this.gpuRenderInfo.fragmentBindGroupLayout,label:this.#ke,entries:x},v=i.createBindGroup(_);this.gpuRenderInfo.fragmentState=this.getFragmentRenderState(),this.gpuRenderInfo.fragmentUniformBindGroup=v}getFragmentRenderState(i="main"){return{module:this.gpuRenderInfo.fragmentShaderModule,entryPoint:i,targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.blendColorState.state,alpha:this.blendAlphaState.state},writeMask:this.writeMaskState},{format:navigator.gpu.getPreferredCanvasFormat(),blend:void 0,writeMask:this.writeMaskState},{format:"rgba16float",blend:void 0,writeMask:this.writeMaskState}]}}_updateBaseProperty(){const{fragmentUniformInfo:i,fragmentUniformBuffer:g}=this.gpuRenderInfo,{members:x}=i;for(const _ in x){const x=this[_];x instanceof ColorRGBA?g.writeBuffer(i.members[_],x.rgbaNormal):x instanceof ColorRGB?g.writeBuffer(i.members[_],x.rgbNormal):yn.test(_)||(this[_]=x)}}getGPUResourceSampler(i){return i?.gpuSampler||this.#Le}#Xe(){const{gpuDevice:i,resourceManager:g}=this.redGPUContext,x=this.#We(),_=`${this.#Ae}_${x}`;let v=g.getGPUShaderModule(_);if(!v){const i=this.gpuRenderInfo.fragmentShaderSourceVariant.getVariant(x);i?v=g.createGPUShaderModule(_,{code:i}):(console.warn("⚠️ 바리안트 소스를 찾을 수 없음:",x),v=this.gpuRenderInfo.fragmentShaderModule)}this.gpuRenderInfo.fragmentShaderModule=v}#We(){const{fragmentShaderVariantConditionalBlocks:i}=this.gpuRenderInfo,g=new Set;for(const x of i)this[x]&&g.add(x);const x=g.size>0?Array.from(g).sort().join("+"):"none";return g.size,x}}const yn=/^use\w+Texture$/;xt.defineByPreset(ABaseMaterial,[xt.PRESET_POSITIVE_NUMBER.OPACITY]),xt.defineBoolean(ABaseMaterial,[["useTint",!1]]),xt.defineColorRGBA(ABaseMaterial,["tint","#ff0000"]),Object.freeze(ABaseMaterial);const Tn=parseWGSL("#redgpu_include drawPicking;\n#redgpu_include calcTintBlendMode;\n#redgpu_include FragmentOutput;\nstruct Uniforms { color:vec3<f32>, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; var finalColor=vec4<f32>( uniforms.color.r,uniforms.color.g,uniforms.color.b,uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf output.color=finalColor; output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n}\n");class ColorMaterial extends ABaseMaterial{constructor(i,g="#fff"){super(i,"COLOR_MATERIAL",Tn,2),this.initGPURenderInfos(),this.color.setColorByHEX(g)}}xt.defineByPreset(ColorMaterial,[xt.PRESET_COLOR_RGB.COLOR]),Object.freeze(ColorMaterial);class InterleaveType{static get float32(){return{numElements:1,stride:Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32",offset:0}}static get float32x2(){return{numElements:2,stride:2*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x2",offset:0}}static get float32x3(){return{numElements:3,stride:3*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x3",offset:0}}static get float32x4(){return{numElements:4,stride:4*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x4",offset:0}}}Object.freeze(InterleaveType);class InterleavedStructElement{attributeName;attributeStride;interleaveType;constructor(i,g,x){this.attributeName=i,this.attributeStride=g,this.interleaveType=x}}class InterleavedStruct{#je;#a="";#Ye=[];#qe=0;constructor(i,g=""){this.#a=g,this.#Ze(i),this.#Je()}get label(){return this.#a}get attributes(){return this.#Ye}get arrayStride(){return this.#qe}get define(){return{...this.#je}}#Ze(i){let g={};for(const x in i){const _=i[x],v=_.stride;g[x]=new InterleavedStructElement(x,v,_),v%4!=0&&consoleAndThrowError(`Invalid attribute stride:${v}`)}this.#je=g}#Je(){this.#qe=0,this.#Ye=[];for(const[i,{attributeStride:g,interleaveType:x}]of Object.entries(this.#je))this.#Ye.push({attributeName:i,shaderLocation:this.#Ye.length,offset:this.#qe,format:x.gpuVertexFormat}),this.#qe+=g}}class ResourceStateVertexBuffer{static dirtyList=[];buffer;label;uuid;#q=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#q}set useNum(i){this.#q=i,ResourceStateVertexBuffer.dirtyList.push(this)}}class VertexBuffer extends ABaseBuffer{[sn];#Qe=0;#et=0;#tt;#nt=0;constructor(i,g,x,_=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,v=""){super(i,"managedVertexBufferState",_);const{table:b}=this.targetResourceManagedState,y=b.get(v);if(y)return y.buffer;this.#tt=x,v&&(this.name=v,this[on]=v),this.changeData(g,this.#tt),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateVertexBuffer(this))}get stride(){return this.#et}get interleavedStruct(){return this.#tt}get vertexCount(){return this.#Qe}get triangleCount(){return this.#nt}changeData(i,g){const{gpuDevice:x}=this;if(Array.isArray(i)&&(i=new Float32Array(i)),this[sn]=i,g&&this.#rt(g),this[an]){this.targetResourceManagedState.videoMemory-=this[sn].byteLength||0;let i=this[an];requestAnimationFrame(()=>{i.destroy()}),this[an]=null}const _={size:this[sn].byteLength,usage:this.usage,label:this.name};this[an]=x.createBuffer(_),this.targetResourceManagedState.videoMemory+=this[sn].byteLength||0,this.#nt=this[sn].length/this.#et,x.queue.writeBuffer(this[an],0,this[sn])}updateAllData(i){const{gpuDevice:g}=this;g.queue.writeBuffer(this[an],0,this[sn])}#rt(i){this.#tt=i,this.#Qe=0,this.#et=0;for(const i in this.#tt.define){const g=this.#tt.define[i].attributeStride/Float32Array.BYTES_PER_ELEMENT;this.#Qe+=g,this.#et+=g}this.#Qe=this[sn].length/this.#Qe}}Object.freeze(VertexBuffer);class DrawDebuggerMesh{#b;#it;#R;#at;#st;#ot="AABB";#ut;#lt;#ct=null;#ht=null;constructor(i,g){this.#b=i,this.#it=g;const x=this.#ft(i);this.#R=x.vertexBuffer,this.#at=new ColorMaterial(i),this.#at.color.setColorByRGB(255,0,0),this.#st=new Mesh(i,x,this.#at),this.#st.primitiveState.cullMode="none",this.#st.primitiveState.topology=Xe.LINE_LIST,this.#st.depthStencilState.depthWriteEnabled=!1;const _=this.#ft(i);this.#ut=new ColorMaterial(i),this.#ut.color.setColorByRGB(0,255,0),this.#lt=new Mesh(i,_,this.#ut),this.#lt.primitiveState.cullMode="none",this.#lt.primitiveState.topology=Xe.LINE_LIST,this.#lt.depthStencilState.depthWriteEnabled=!1}get debugMode(){return this.#ot}set debugMode(i){this.#ot=i,"OBB"===i?this.#at.color.setColorByRGB(255,0,0):"AABB"===i||"COMBINED_AABB"===i?this.#at.color.setColorByRGB(0,255,0):"BOTH"===i&&(this.#at.color.setColorByRGB(255,0,0),this.#ut.color.setColorByRGB(0,255,0)),this.#ct=null,this.#ht=null}render(i){if(this.#it.enableDebugger)if("OBB"===this.#ot){const g=this.#it.boundingOBB;this.#dt(g)&&(this.#mt(g,this.#R),this.#pt(g)),this.#st.setPosition(0,0,0),this.#st.setRotation(0,0,0),this.#st.setScale(1,1,1),this.#st.render(i)}else if("AABB"===this.#ot||"COMBINED_AABB"===this.#ot){const g="COMBINED_AABB"===this.#ot?this.#it.combinedBoundingAABB:this.#it.boundingAABB;this.#gt(g)&&(this.#xt(g,this.#R),this.#_t(g)),this.#st.setPosition(0,0,0),this.#st.setRotation(0,0,0),this.#st.setScale(1,1,1),this.#st.render(i)}else if("BOTH"===this.#ot){const g=this.#it.boundingOBB,x=this.#it.boundingAABB;this.#dt(g)&&(this.#mt(g,this.#R),this.#pt(g)),this.#st.setPosition(0,0,0),this.#st.setRotation(0,0,0),this.#st.setScale(1,1,1),this.#st.render(i),this.#gt(x)&&(this.#xt(x,this.#lt.geometry.vertexBuffer),this.#_t(x)),this.#lt.setPosition(0,0,0),this.#lt.setRotation(0,0,0),this.#lt.setScale(1,1,1),this.#lt.render(i)}}#ft(i){const g=new Float32Array(192),x=new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},`wireframeBoxStruct_${Math.random()}`),_=new VertexBuffer(i,g,x);return new Geometry(i,_)}#dt(i){if(!this.#ct)return!0;const g=this.#ct;return g.center[0]!==i.center[0]||g.center[1]!==i.center[1]||g.center[2]!==i.center[2]||g.halfExtents[0]!==i.halfExtents[0]||g.halfExtents[1]!==i.halfExtents[1]||g.halfExtents[2]!==i.halfExtents[2]||!this.#vt(g.orientation,i.orientation)}#gt(i){if(!this.#ht)return!0;const g=this.#ht;return g.minX!==i.minX||g.maxX!==i.maxX||g.minY!==i.minY||g.maxY!==i.maxY||g.minZ!==i.minZ||g.maxZ!==i.maxZ}#vt(i,g){if(i.length!==g.length)return!1;for(let x=0;x<i.length;x++)if(Math.abs(i[x]-g[x])>1e-4)return!1;return!0}#pt(i){this.#ct=new OBB(i.center,i.halfExtents,i.orientation)}#_t(i){this.#ht=i.clone()}#mt(i,g){const{center:x,halfExtents:_,orientation:v}=i,b=[[-1,-1,-1],[1,-1,-1],[1,1,-1],[-1,1,-1],[-1,-1,1],[1,-1,1],[1,1,1],[-1,1,1]].map(i=>{const g=[i[0]*_[0],i[1]*_[1],i[2]*_[2]],b=[v[0]*g[0]+v[4]*g[1]+v[8]*g[2],v[1]*g[0]+v[5]*g[1]+v[9]*g[2],v[2]*g[0]+v[6]*g[1]+v[10]*g[2]];return[b[0]+x[0],b[1]+x[1],b[2]+x[2]]});this.#B(b,g)}#xt(i,g){const{minX:x,maxX:_,minY:v,maxY:b,minZ:y,maxZ:S}=i,w=[[x,v,y],[_,v,y],[_,b,y],[x,b,y],[x,v,S],[_,v,S],[_,b,S],[x,b,S]];this.#B(w,g)}#B(i,g){const x=g.data;let _=0;[[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]].forEach(([g,v])=>{x[_++]=i[g][0],x[_++]=i[g][1],x[_++]=i[g][2],x[_++]=0,x[_++]=0,x[_++]=1,x[_++]=0,x[_++]=0,x[_++]=i[v][0],x[_++]=i[v][1],x[_++]=i[v][2],x[_++]=0,x[_++]=0,x[_++]=1,x[_++]=0,x[_++]=0}),g.updateAllData(x)}}function getAbsoluteURL(i,g){try{return new URL(g,i).href}catch(i){return g}}Object.freeze(DrawDebuggerMesh);const getFileExtension=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");const g=i.split("/"),x=g[g.length-1],_=x.lastIndexOf(".");return-1===_?"":x.substring(_+1).toLowerCase()},getFileName=(i,g=!0)=>{const x=i.substring(i.lastIndexOf("/")+1);return g?x:x.split(".").slice(0,-1).join(".")},getFilePath=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");return i.substring(0,i.lastIndexOf("/")+1)},calculateNormals=(i,g)=>{let x,_,v=[];for(x=0;x<i.length;x+=3)v[x+0]=0,v[x+1]=0,v[x+2]=0;for(x=0;x<g.length;x+=3){let b,y,S,w,L=[],k=[],H=[];for(b=3*g[x],y=3*g[x+1],S=3*g[x+2],L[0]=i[S+0]-i[y+0],L[1]=i[S+1]-i[y+1],L[2]=i[S+2]-i[y+2],k[0]=i[b+0]-i[y+0],k[1]=i[b+1]-i[y+1],k[2]=i[b+2]-i[y+2],H[0]=L[1]*k[2]-L[2]*k[1],H[1]=L[2]*k[0]-L[0]*k[2],H[2]=L[0]*k[1]-L[1]*k[0],_=0;_<3;_++)w=3*g[x+_],v[w+0]=v[w+0]+H[0],v[w+1]=v[w+1]+H[1],v[w+2]=v[w+2]+H[2]}for(x=0;x<i.length;x+=3){let i=[];i[0]=v[x+0],i[1]=v[x+1],i[2]=v[x+2];let g=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);0===g&&(g=1),i[0]=i[0]/g,i[1]=i[1]/g,i[2]=i[2]/g,v[x+0]=i[0],v[x+1]=i[1],v[x+2]=i[2]}return v};function calculateTextureByteSize(i){const g={size:[i.width,i.height,i.depthOrArrayLayers],format:i.format,sampleCount:i.sampleCount,usage:i.usage};return function(i){switch(i){case"r8unorm":case"r8snorm":case"r8uint":case"r8sint":return 1;case"r16uint":case"r16sint":case"r16float":case"rg8unorm":case"rg8snorm":case"rg8uint":case"rg8sint":case"depth16unorm":return 2;case"r32uint":case"r32sint":case"r32float":case"rg16uint":case"rg16sint":case"rg16float":case"rgba8unorm":case"rgba8unorm-srgb":case"rgba8snorm":case"rgba8uint":case"rgba8sint":case"bgra8unorm":case"bgra8unorm-srgb":case"depth24plus":case"depth32float":return 4;case"rg32uint":case"rg32sint":case"rg32float":case"rgba16uint":case"rgba16sint":case"rgba16float":return 8;case"rgba32uint":case"rgba32sint":case"rgba32float":return 16;default:throw new Error(`Unrecognized texture format:${i}`)}}(g.format)*(g.size[0]*g.size[1]*(g.size[2]||1))*(g.sampleCount?g.sampleCount:1)}const Sn=create$2(),computeViewFrustumPlanes=(i,g)=>{multiply(Sn,i,g);const x=[[Sn[3]-Sn[0],Sn[7]-Sn[4],Sn[11]-Sn[8],Sn[15]-Sn[12]],[Sn[3]+Sn[0],Sn[7]+Sn[4],Sn[11]+Sn[8],Sn[15]+Sn[12]],[Sn[3]+Sn[1],Sn[7]+Sn[5],Sn[11]+Sn[9],Sn[15]+Sn[13]],[Sn[3]-Sn[1],Sn[7]-Sn[5],Sn[11]-Sn[9],Sn[15]-Sn[13]],[Sn[3]-Sn[2],Sn[7]-Sn[6],Sn[11]-Sn[10],Sn[15]-Sn[14]],[Sn[3]+Sn[2],Sn[7]+Sn[6],Sn[11]+Sn[10],Sn[15]+Sn[14]]];for(let i=0;i<6;i++){const g=x[i],_=Math.sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2]);g[0]/=_,g[1]/=_,g[2]/=_,g[3]/=_}return x},formatBytes=(i,g=2)=>{if(("number"!=typeof i||i<0||Number.isNaN(i)||!Number.isInteger(i))&&consoleAndThrowError("Invalid input:'bytes' must be a uint"),0===i)return"0 Bytes";const x=g<0?0:g,_=Math.floor(Math.log(i)/Math.log(1024));return parseFloat((i/Math.pow(1024,_)).toFixed(x))+" "+["Bytes","KB","MB","GB"][_]},Mn=create$2(),wn={x:0,y:0,z:0,w:0},getScreenPoint=(i,g)=>{"View3D"!==i?.constructor?.name&&consoleAndThrowError("allow only View3D instance"),identity(Mn);const{noneJitterProjectionMatrix:x,rawCamera:_,pixelRectArray:v}=i;return multiply(Mn,x,_.modelMatrix),multiply(Mn,Mn,g),wn.z=Mn[14],wn.w=Mn[15],wn.x=.5*Mn[12]/wn.w+.5,wn.y=.5*Mn[13]/wn.w+.5,[(v[0]+wn.x*v[2])/window.devicePixelRatio,(v[1]+(1-wn.y)*v[3])/window.devicePixelRatio]},Rn=create$2(),localToWorld=(i,g,x,_)=>(validateNumber(g),validateNumber(x),validateNumber(_),identity(Rn),translate(Rn,Rn,[g,x,_]),multiply(Rn,i,Rn),[Rn[12],Rn[13],Rn[14]]),quaternionToRotationMat4=(i,g)=>{let x=i[0],_=i[1],v=i[2],b=i[3],y=x+x,S=_+_,w=v+v,L=x*y,k=x*S,H=x*w,z=_*S,W=_*w,q=v*w,be=b*y,Ke=b*S,Xe=b*w;return g[0]=1-(z+q),g[4]=k-Xe,g[8]=H+Ke,g[1]=k+Xe,g[5]=1-(L+q),g[9]=W-be,g[2]=H-Ke,g[6]=W+be,g[10]=1-(L+z),g[3]=0,g[7]=0,g[11]=0,g[12]=0,g[13]=0,g[14]=0,g[15]=1,g};let Cn,Pn,Bn,En,In,Ln,Un=create$1(),Dn=create$2(),An=create$2();const screenToWorld=(i,g,x)=>{const{rawCamera:_,pixelRectArray:v}=x;return Cn=2*(i*window.devicePixelRatio+v[0])/v[2]-1,Pn=-2*(g*window.devicePixelRatio+v[1])/v[3]+1,Bn=1,multiply(An,x.noneJitterProjectionMatrix,_.modelMatrix),Ln=clone(An),invert(Ln,Ln),Un=fromValues(Cn,Pn,1),identity(Dn),translate(Dn,Dn,Un),multiply(Ln,Ln,Dn),Un[0]=Ln[12],Un[1]=Ln[13],Un[2]=Ln[14],En=An[12]*Cn+An[13]*Pn+An[15],0!==En&&(In=1/En,Un[0]/=In,Un[1]/=In,Un[2]/=In,Un[0]=Un[0]+_.x,Un[1]=Un[1]+_.y,Un[2]=Un[2]+_.z),[Un[0],Un[1],Un[2]]};function sortTransparentObjects(i,g){const x={},{x:_,y:v,z:b}=i;return g.sort((i,g)=>{if(!x[i.uuid]){const g=i.x-_,y=i.y-v,S=i.z-b;x[i.uuid]=g*g+y*y+S*S}if(!x[g.uuid]){const i=g.x-_,y=g.y-v,S=g.z-b;x[g.uuid]=i*i+y*y+S*S}return x[g.uuid]-x[i.uuid]})}const kn=create$2(),On=create$1(),worldToLocal=(i,g,x,_)=>(validateNumber(g),validateNumber(x),validateNumber(_),invert(kn,i),set(On,g,x,_),transformMat4(On,On,kn),[On[0],On[1],On[2]]),Gn=console.log.bind(console);var Nn=Object.freeze({__proto__:null,AABB:AABB,OBB:OBB,calculateGeometryAABB:calculateGeometryAABB,calculateMeshAABB:calculateMeshAABB,calculateMeshCombinedAABB:calculateMeshCombinedAABB,calculateMeshOBB:calculateMeshOBB,calculateNormals:calculateNormals,calculateTextureByteSize:calculateTextureByteSize,computeViewFrustumPlanes:computeViewFrustumPlanes,convertHexToRgb:convertHexToRgb,convertRgbToHex:convertRgbToHex,copyToTextureArray:function(i,g,x,_){const v=i.createCommandEncoder({label:"COPY_TO_TEXTURE_ARRAY"});v.copyTextureToTexture({texture:g},{texture:x,origin:[0,0,_]},[g.width,g.height,1]),i.queue.submit([v.finish()])},createUUID:createUUID,formatBytes:formatBytes,getAbsoluteURL:getAbsoluteURL,getFileExtension:getFileExtension,getFileName:getFileName,getFilePath:getFilePath,getMipLevelCount:getMipLevelCount,getScreenPoint:getScreenPoint,keepLog:Gn,localToWorld:localToWorld,matToEuler:mat4ToEuler,quaternionToRotationMat4:quaternionToRotationMat4,screenToWorld:screenToWorld,sortTransparentObjects:sortTransparentObjects,uuidToUint:uuidToUint,worldToLocal:worldToLocal});class ResourceStateBitmapTexture{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}const imageBitmapToGPUTexture=(i,g,x,_=!0)=>{const v=i.createTexture(x);for(let b=0;b<g.length;b++){const y=g[b],S={source:y},w={texture:v,origin:[0,0,b],premultipliedAlpha:_};x.format.includes("srgb")&&(w.colorSpace="srgb");const L=[y.width,y.height];i.queue.copyExternalImageToTexture(S,w,L)}return v};async function loadAndCreateBitmapImage(i,g="none",x="premultiply"){const _=await fetch(i),v=await _.blob();return createImageBitmap(v,{colorSpaceConversion:g,premultiplyAlpha:x})}class BitmapTexture extends ManagementResourceBase{#_e;#bt;#yt;#Tt;#St;#Mt=0;#wt=!0;#Rt;#Ct;#Pt;constructor(i,g,x=!0,_,v,b,y=!1){if(super(i,"managedBitmapTextureState"),this.#Ct=_,this.#Pt=v,this.#wt=y,this.#Tt=x,this.#Rt=b||navigator.gpu.getPreferredCanvasFormat(),g){this.#bt=this.#Bt(g),this.cacheKey=this.#Et(g);const{table:i}=this.targetResourceManagedState;let x=i.get(this.cacheKey);if(x){const i=x.texture;return this.#Ct?.(i),i}this.src=g,this.#It()}}get width(){return this.#St?.width||0}get height(){return this.#St?.height||0}get usePremultiplyAlpha(){return this.#wt}get videoMemorySize(){return this.#Mt}get gpuTexture(){return this.#_e}get mipLevelCount(){return this.#yt}get src(){return this.#bt}set src(i){this.#bt=this.#Bt(i),this.cacheKey=this.#Et(i),this.#bt&&this.#Lt(this.#bt)}get useMipmap(){return this.#Tt}set useMipmap(i){this.#Tt=i,this.#Ut()}destroy(){const i=this.#_e;this.#Dt(null),this.__fireListenerList(!0),this.#At(),this.cacheKey=null,this.#bt=null,i&&i.destroy()}#Et(i){return i?"string"==typeof i?getAbsoluteURL(window.location.href,i):i.cacheKey||getAbsoluteURL(window.location.href,i.src):this.uuid}#Bt(i){return"string"==typeof i?i:i.src}#Dt(i){this.#_e=i,i||(this.#St=null),this.__fireListenerList()}#It(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateBitmapTexture(this))}#At(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}#Ut(){const{gpuDevice:i,resourceManager:g}=this.redGPUContext,{mipmapGenerator:x}=g;this.#_e&&(this.#_e.destroy(),this.#_e=null),this.targetResourceManagedState.videoMemory-=this.#Mt,this.#Mt=0;const{width:_,height:v}=this.#St;this.#yt=1;const b={size:[_,v],format:this.#Rt,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:this.#bt};this.#Tt&&(this.#yt=getMipLevelCount(_,v),b.mipLevelCount=this.#yt,b.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const y=imageBitmapToGPUTexture(i,[this.#St],b,this.#wt);this.#Mt=calculateTextureByteSize(y),this.targetResourceManagedState.videoMemory+=this.#Mt,this.#Tt&&x.generateMipmap(y,b),this.#Dt(y)}async#kt(i){return new Promise((g,x)=>{const _=new Image;_.src=i,_.onload=()=>{const i=document.createElement("canvas");i.width=_.width||512,i.height=_.height||512;const v=i.getContext("2d");v?(v.fillStyle="rgba(0,0,0,0)",v.fillRect(0,0,i.width,i.height),v.drawImage(_,0,0,i.width,i.height),createImageBitmap(i,{colorSpaceConversion:"none",premultiplyAlpha:this.#wt?"premultiply":"none"}).then(g).catch(x)):x(new Error("Canvas context could not be created."))},_.onerror=i=>{x(new Error(`Failed to load SVG:${i}`))}})}async#Lt(i){try{i.endsWith(".svg")?this.#St=await this.#kt(i):this.#St=await loadAndCreateBitmapImage(i,"none",this.#wt?"premultiply":"none"),this.#Ut(),this.#Ct?.(this)}catch(i){console.error(i),this.#Pt?.(i)}}}Object.freeze(BitmapTexture);class DownSampleCubeMapGenerator{#b;#Ot=new Map;#Gt=new Map;#Nt=null;#Vt=null;#Ft=null;#Ht=null;#zt=8;#$t=8;#Kt=new Map;#be=new Map;constructor(i){this.#b=i}createSourceTextureView(i,g){const x=`DOWN_SAMPLE_CUBE_GENERATOR_SOURCE_VIEW_${i.label}_${g}`;if(!this.#Kt.has(x)){const _=i.createView({label:x,dimension:"cube",baseMipLevel:g,mipLevelCount:1});this.#Kt.set(x,_)}return this.#Kt.get(x)}createTargetTextureView(i,g){const x=`DOWN_SAMPLE_CUBE_GENERATOR_TARGET_VIEW_${i.label}_${g}`;if(!this.#Kt.has(x)){const _=i.createView({label:x,dimension:"2d-array",baseMipLevel:g,mipLevelCount:1,arrayLayerCount:6});this.#Kt.set(x,_)}return this.#Kt.get(x)}createBindGroup(i,g,x){const _=`DOWN_SAMPLE_CUBE_GENERATOR_BIND_GROUP_${g.label}_${x.label}`;if(!this.#be.has(_)){const{gpuDevice:v}=this.#b,b=v.createBindGroup({label:_,layout:i,entries:[{binding:0,resource:g},{binding:1,resource:x},{binding:2,resource:this.#Ht},{binding:3,resource:{buffer:this.#Vt}}]});this.#be.set(_,b)}return this.#be.get(_)}async downsampleCubemap(i,g=256,x="rgba8unorm"){try{this.#Xt(),this.#Wt();const{gpuDevice:_,resourceManager:v}=this.#b;if(!i)throw new Error("Invalid source cubemap texture");if(g<=0||!Number.isInteger(g))throw new Error("Target size must be a positive integer");const b=i.mipLevelCount,y=getMipLevelCount(g,g),S=v.createManagedTexture({size:[g,g,6],format:x,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:y,label:`DOWN_SAMPLE_CUBE_GENERATOR_TEXTURE_${g}x${g}_${y}mips_${Date.now()}`});for(let _=0;_<y;_++){const v=Math.max(1,g>>_),y=this.#jt(i.width,g,_,b);await this.#Yt(i,S,y,_,v,x)}return this.#Xt(),S}catch(i){throw console.error("큐브맵 다운샘플링 실패:",i),this.#Xt(),i}}destroy(){this.#Xt(),this.#Vt&&(this.#Vt.destroy(),this.#Vt=null),this.#Ot.clear(),this.#Gt.clear(),this.#Nt=null,this.#Ht=null}#Xt(){this.#Kt.clear(),this.#be.clear()}#Wt(){if(this.#Nt)return;const{gpuDevice:i,resourceManager:g}=this.#b;this.#Ht=new Sampler(this.#b,{minFilter:"linear",magFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}).gpuSampler,this.#Nt=g.createGPUShaderModule("DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_SHADER",{code:"\nstruct Uniforms { targetSize:f32, sourceMipLevel:f32, targetMipLevel:f32, padding:f32,\n};\n@group(0) @binding(0) var sourceCubemap:texture_cube<f32>;\n@group(0) @binding(1) var targetCubemap:texture_storage_2d_array<rgba8unorm,write>;\n@group(0) @binding(2) var cubemapSampler:sampler;\n@group(0) @binding(3) var<uniform> uniforms:Uniforms;\nfn cubemapUVToDirection(uv:vec2<f32>,face:u32) -> vec3<f32> { let u=uv.x * 2.0 - 1.0; let v=uv.y * 2.0 - 1.0; switch face { case 0u:{ return vec3<f32>(1.0,-v,-u); } case 1u:{ return vec3<f32>(-1.0,-v,u); } case 2u:{ return vec3<f32>(u,1.0,v); } case 3u:{ return vec3<f32>(u,-1.0,-v); } case 4u:{ return vec3<f32>(u,-v,1.0); } case 5u:{ return vec3<f32>(-u,-v,-1.0); } default:{ return vec3<f32>(0.0,0.0,1.0); } }\n}\nfn gaussianWeight(x:f32,y:f32,sigma:f32) -> f32 { let sigmaSq=sigma * sigma; return exp(-(x * x + y * y)/(2.0 * sigmaSq))/(2.0 * 3.14159265359 * sigmaSq);\n}\nfn clampCubemapUV(uv:vec2<f32>) -> vec2<f32> { return clamp(uv,vec2<f32>(0.0),vec2<f32>(1.0));\n}\n@compute @workgroup_size(8,8,1)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let face=global_id.z; let coord=vec2<u32>(global_id.xy); let targetSize=u32(uniforms.targetSize); if (coord.x >=targetSize || coord.y >=targetSize || face >=6u) { return; } let uv=(vec2<f32>(coord) + 0.5)/f32(targetSize); let direction=normalize(cubemapUVToDirection(uv,face)); let sourceMipLevel=uniforms.sourceMipLevel; let targetMipLevel=uniforms.targetMipLevel; var color=vec4<f32>(0.0); if (sourceMipLevel==0.0 && targetSize > 64u) { let sampleCount=16u; let sampleRadius=1.0/f32(targetSize); var totalWeight=0.0; for (var i=0u;i < sampleCount;i++) { let angle=2.0 * 3.14159265359 * f32(i)/f32(sampleCount); let radius=sampleRadius * (0.5 + 0.5 * f32(i % 4u)/4.0); let offsetUV=clampCubemapUV(uv + vec2<f32>( cos(angle) * radius, sin(angle) * radius )); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); let sampleColor=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); let weight=gaussianWeight( cos(angle) * radius * f32(targetSize), sin(angle) * radius * f32(targetSize), 0.8 ); color +=sampleColor * weight; totalWeight +=weight; } if (totalWeight > 0.0) { color=color/totalWeight; } } else if (sourceMipLevel==0.0 && targetSize > 16u) { let sampleCount=4u; let invSampleCount=1.0/f32(sampleCount * sampleCount); let sampleOffset=0.5/f32(targetSize); for (var x=0u;x < sampleCount;x++) { for (var y=0u;y < sampleCount;y++) { let offset=vec2<f32>( (f32(x) - 1.5) * sampleOffset, (f32(y) - 1.5) * sampleOffset ); let offsetUV=clampCubemapUV(uv + offset); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); } } color *=invSampleCount; } else if (targetSize > 4u) { let sampleCount=2u; let invSampleCount=1.0/f32(sampleCount * sampleCount); let sampleOffset=0.25/f32(targetSize); for (var x=0u;x < sampleCount;x++) { for (var y=0u;y < sampleCount;y++) { let offset=vec2<f32>( (f32(x) - 0.5) * sampleOffset, (f32(y) - 0.5) * sampleOffset ); let offsetUV=clampCubemapUV(uv + offset); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); } } color *=invSampleCount; } else { color=textureSampleLevel(sourceCubemap,cubemapSampler,direction,sourceMipLevel); } if (targetMipLevel > 0.0) { let luminance=dot(color.rgb,vec3<f32>(0.299,0.587,0.114)); let saturation=0.9 + 0.1/(1.0 + targetMipLevel * 0.1); color=vec4<f32>(mix(vec3<f32>(luminance),color.rgb,saturation),color.a); } textureStore(targetCubemap,vec2<i32>(coord),i32(face),color);\n}\n"}),this.#qt()}#Zt(i){if(!this.#Ot.has(i)){const{gpuDevice:g,resourceManager:x}=this.#b,_=x.createBindGroupLayout(`DOWN_SAMPLE_CUBE_GENERATOR_BIND_GROUP_LAYOUT_${i}`,{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{viewDimension:"cube",sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:i,viewDimension:"2d-array"}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),v=g.createComputePipeline({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_PIPELINE_${i}`,layout:g.createPipelineLayout({label:`DOWN_SAMPLE_CUBE_GENERATOR_PIPELINE_LAYOUT_${i}`,bindGroupLayouts:[_]}),compute:{module:this.#Nt,entryPoint:"main"}});this.#Gt.set(i,_),this.#Ot.set(i,v)}return this.#Ot.get(i)}#qt(){const{gpuDevice:i,resourceManager:g}=this.#b;this.#Ft={arrayBufferByteLength:16,properties:{targetSize:{byteOffset:0,size:4},sourceMipLevel:{byteOffset:4,size:4},targetMipLevel:{byteOffset:8,size:4},padding:{byteOffset:12,size:4}}},this.#Vt=i.createBuffer({size:this.#Ft.arrayBufferByteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"DOWN_SAMPLE_CUBE_GENERATOR_UNIFORM_BUFFER"})}#jt(i,g,x,_){const v=i/Math.max(1,g>>x),b=Math.max(0,Math.floor(Math.log2(v)));return Math.min(b,_-1)}async#Yt(i,g,x,_,v,b){const{gpuDevice:y}=this.#b,S=this.#Zt(b),w=this.#Gt.get(b),L=this.createSourceTextureView(i,x),k=this.createTargetTextureView(g,_),H=this.createBindGroup(w,L,k);this.#Jt(x,_,v);const z=y.createCommandEncoder({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMMAND_ENCODER_MIP${_}`}),W=z.beginComputePass({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_PASS_MIP${_}`});W.setPipeline(S),W.setBindGroup(0,H),W.dispatchWorkgroups(Math.ceil(v/this.#zt),Math.ceil(v/this.#$t),6),W.end();const q=z.finish();y.queue.submit([q]),await y.queue.onSubmittedWorkDone()}#Jt(i,g,x){const{gpuDevice:_}=this.#b,v=new Float32Array([x,i,g,0]);_.queue.writeBuffer(this.#Vt,0,v)}}Object.freeze(DownSampleCubeMapGenerator);const Vn={LOAD:"load",CLEAR:"clear"};Object.freeze(Vn);const Fn={STORE:"store",DISCARD:"discard"};Object.freeze(Fn);class MipmapGenerator{#b;#xe;#Qt;#en;#$e;#tn;#Kt=new Map;#be=new Map;#nn=new WeakMap;#rn=new WeakMap;constructor(i){this.#b=i,this.#xe=new Sampler(i,{minFilter:"linear"}).gpuSampler,this.#en={}}createTextureView(i,g,x,_=!1){const v=`${g}_${x}`;if(_){let _=this.#rn.get(i);if(_||(_=new Map,this.#rn.set(i,_)),_.has(v))return _.get(v);const b=i.createView({baseMipLevel:g,mipLevelCount:1,dimension:"2d",baseArrayLayer:x,arrayLayerCount:1,label:`MIPMAP_GENERATOR_CACHED_${i.label}_${v}`});return _.set(v,b),b}{const _=`MIPMAP_GENERATOR_${i.label}_${g}_${x}`;if(!this.#Kt.has(_)){const v=i.createView({baseMipLevel:g,mipLevelCount:1,dimension:"2d",baseArrayLayer:x,arrayLayerCount:1,label:_});this.#Kt.set(_,v)}return this.#Kt.get(_)}}createBindGroup(i,g,x=!1){const{gpuDevice:_}=this.#b;if(x){let x=this.#nn.get(i);x||(x=new Map,this.#nn.set(i,x));const v=g.label||"unlabeled";if(x.has(v))return x.get(v);const b=_.createBindGroup({label:`MIPMAP_GENERATOR_BIND_GROUP_CACHED_${i.label}_${v}`,layout:this.#$e,entries:[{binding:0,resource:this.#xe},{binding:1,resource:g}]});return x.set(v,b),b}{const x=`${i.label}_${g.label}`;if(this.#be.has(x))return this.#be.get(x);const v=_.createBindGroup({label:`MIPMAP_GENERATOR_BIND_GROUP_TEMP_${x}`,layout:this.#$e,entries:[{binding:0,resource:this.#xe},{binding:1,resource:g}]});return this.#be.set(x,v),v}}getMipmapPipeline(i){const{gpuDevice:g,resourceManager:x}=this.#b;let _=this.#en[i];return _||(this.#tn||(this.#tn=x.createGPUShaderModule("MIPMAP_GENERATOR_SHADER_MODULE",{code:"\nvar<private> pos:array<vec2<f32>,3>=array<vec2<f32>,3>( vec2<f32>(-1.0,-1.0), vec2<f32>(-1.0,3.0), vec2<f32>(3.0,-1.0)\n);\nstruct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n};\n@vertex\nfn vertexMain(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var output:VertexOutput; output.texCoord=pos[vertexIndex] * vec2<f32>(0.5,-0.5) + vec2<f32>(0.5); output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); return output;\n}\n@group(0) @binding(0)\nvar imgSampler:sampler;\n@group(0) @binding(1)\nvar img:texture_2d<f32>;\n@fragment\nfn fragmentMain(@location(0) texCoord:vec2<f32>) -> @location(0) vec4<f32> { return textureSample(img,imgSampler,texCoord);\n}\n"}),this.#$e=x.createBindGroupLayout("MIPMAP_GENERATOR_FRAGMENT_BIND_GROUP_LAYOUT",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]}),this.#Qt=x.createGPUPipelineLayout("MIPMAP_GENERATOR_PIPELINE_LAYOUT",{bindGroupLayouts:[this.#$e]})),_=g.createRenderPipeline({label:`MIPMAP_GENERATOR_PIPELINE_${i}`,layout:this.#Qt,vertex:{module:this.#tn,entryPoint:"vertexMain"},fragment:{module:this.#tn,entryPoint:"fragmentMain",targets:[{format:i}]}}),this.#en[i]=_),_}generateMipmap(i,g,x=!1){x||this.#Xt();const{gpuDevice:_,resourceManager:v}=this.#b,b=this.getMipmapPipeline(g.format);if("3d"==g.dimension||"1d"==g.dimension)throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");let y=i;const S=g.size[0],w=g.size[1],L=g.size[2]||1,k=g.usage&GPUTextureUsage.RENDER_ATTACHMENT;if(!k){const i={size:{width:Math.max(1,S>>>1),height:Math.max(1,w>>>1),depthOrArrayLayers:L},format:g.format,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,mipLevelCount:g.mipLevelCount-1};y=v.createManagedTexture(i)}const H=_.createCommandEncoder({});for(let _=0;_<L;++_){let v=this.createTextureView(i,0,_,x),S=k?1:0;for(let w=1;w<g.mipLevelCount;++w){const g=this.createTextureView(y,S++,_,x),w=H.beginRenderPass({colorAttachments:[{view:g,clearValue:{r:0,g:0,b:0,a:0},loadOp:Vn.CLEAR,storeOp:Fn.STORE}]}),L=this.createBindGroup(i,v,x);w.setPipeline(b),w.setBindGroup(0,L),w.draw(3,1,0,0),w.end(),v=g}}if(!k){const x={width:Math.max(1,S>>>1),height:Math.max(1,w>>>1),depthOrArrayLayers:L};for(let _=1;_<g.mipLevelCount;++_)H.copyTextureToTexture({texture:y,mipLevel:_-1},{texture:i,mipLevel:_},x),x.width=Math.max(1,x.width>>>1),x.height=Math.max(1,x.height>>>1)}return _.queue.submit([H.finish()]),k||y.destroy(),x||this.#Xt(),i}destroy(){this.#Xt()}#Xt(){this.#Kt.clear(),this.#be.clear()}}Object.freeze(MipmapGenerator);class ResourceStateCubeTexture{texture;srcList;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.srcList=i instanceof CubeTexture?i.srcList:void 0,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class CubeTexture extends ManagementResourceBase{static defaultViewDescriptor={dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6};#_e;#in;#yt;#Tt;#an;#Mt=0;#Rt;#Ct;#Pt;constructor(i,g,x=!0,_,v,b){super(i,"managedCubeTextureState"),this.#Ct=_,this.#Pt=v,this.#Tt=x,this.#Rt=b||navigator.gpu.getPreferredCanvasFormat(),this.#in=this.#Bt(g),this.cacheKey=this.#Et(g);const{table:y}=this.targetResourceManagedState;if(g){let i=y.get(this.cacheKey);if(i){const g=i.texture;return this.#Ct?.(g),g}this.srcList=g,this.#It()}}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#yt}}get videoMemorySize(){return this.#Mt}get gpuTexture(){return this.#_e}get mipLevelCount(){return this.#yt}get srcList(){return this.#in}set srcList(i){this.#in=this.#Bt(i),this.cacheKey=this.#Et(i),this.#in?.length&&this.#Lt(this.#in)}get useMipmap(){return this.#Tt}set useMipmap(i){this.#Tt=i,this.#Ut()}destroy(){const i=this.#_e;this.#Dt(null),this.__fireListenerList(!0),this.#At(),this.#in=null,this.cacheKey=null,i&&i.destroy()}setGPUTextureDirectly(i,g,x=!0){this.#_e&&(this.#_e.destroy(),this.targetResourceManagedState.videoMemory-=this.#Mt),this.#_e=i,this.#Tt=x,this.#yt=i.mipLevelCount,this.cacheKey=g||`direct_${this.uuid}`,this.#Mt=calculateTextureByteSize(i),this.targetResourceManagedState.videoMemory+=this.#Mt,this.__fireListenerList()}#Et(i){return i?i instanceof Array?i.length?i.toString():this.uuid:i.cacheKey||i.srcList.toString():this.uuid}#Bt(i){return i instanceof Array?i:i?.srcList}#Dt(i){this.#_e=i,i||(this.#an=null),this.__fireListenerList()}#It(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateCubeTexture(this))}#At(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}#Ut(){const{gpuDevice:i,resourceManager:g}=this.redGPUContext,{mipmapGenerator:x}=g;this.#_e&&(this.#_e.destroy(),this.#_e=null),this.#yt=1;{const g=this.#an,_=g[0],{width:v,height:b}=_,y={size:[v,b,6],format:this.#Rt,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`cubeTexture_${this.#in?.toString()||this.uuid}`};this.#Tt&&(this.#yt=getMipLevelCount(v,b),y.mipLevelCount=this.#yt,y.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const S=imageBitmapToGPUTexture(i,g,y);this.targetResourceManagedState.videoMemory-=this.#Mt,this.#Mt=calculateTextureByteSize(S),this.targetResourceManagedState.videoMemory+=this.#Mt,this.#Tt&&x.generateMipmap(S,y),this.#Dt(S)}}async#Lt(i){this.#an=await async function(i){const g=i.map(i=>loadAndCreateBitmapImage(i));return await Promise.all(g)}(i);try{this.#Ut(),this.#Ct?.(this)}catch(i){console.error(i),this.#Pt?.(i)}}}Object.freeze(CubeTexture);class ResourceStatusInfo{table=new Map;videoMemory=0;constructor(){}}var Hn;Object.freeze(ResourceStatusInfo),function(i){i.GPUShaderModule="GPUShaderModule",i.GPUBindGroupLayout="GPUBindGroupLayout",i.GPUPipelineLayout="GPUPipelineLayout",i.GPUBuffer="GPUBuffer"}(Hn||(Hn={}));class ResourceManager{static PRESET_GPUBindGroupLayout_System="PRESET_GPUBindGroupLayout_System";static PRESET_VERTEX_GPUBindGroupLayout_Instancing="PRESET_VERTEX_GPUBindGroupLayout_Instancing";static PRESET_VERTEX_GPUBindGroupLayout="PRESET_VERTEX_GPUBindGroupLayout";static PRESET_VERTEX_GPUBindGroupLayout_SKIN="PRESET_VERTEX_GPUBindGroupLayout_SKIN";#sn=0;#on=new ImmutableKeyMap([[Hn.GPUShaderModule,new Map],[Hn.GPUBindGroupLayout,new Map],[Hn.GPUPipelineLayout,new Map],[Hn.GPUBuffer,new MemoryTrackingMap]]);#un=new ResourceStatusInfo;#ln=new ResourceStatusInfo;#cn=new ResourceStatusInfo;#hn=new ResourceStatusInfo;#fn=new ResourceStatusInfo;#dn=new ResourceStatusInfo;#mn=new ResourceStatusInfo;#pn={};#gn;#De;#xn;#_n;#vn;#bn=new WeakMap;#yn=new WeakMap;#b;#y;constructor(i){this.#b=i,this.#y=i.gpuDevice,this.#xn=new MipmapGenerator(i),this.#_n=new DownSampleCubeMapGenerator(i),this.#Tn()}get redGPUContext(){return this.#b}get gpuDevice(){return this.#y}get basicSampler(){return this.#vn}get mipmapGenerator(){return this.#xn}get downSampleCubeMapGenerator(){return this.#_n}get cachedBufferState(){return this.#pn}get emptyBitmapTextureView(){return this.#gn}get emptyCubeTextureView(){return this.#De}get managedBitmapTextureState(){return this.#un}get managedCubeTextureState(){return this.#ln}get managedHDRTextureState(){return this.#cn}get managedUniformBufferState(){return this.#hn}get managedVertexBufferState(){return this.#fn}get managedIndexBufferState(){return this.#dn}get managedStorageBufferState(){return this.#mn}get resources(){return this.#on}registerManagementResource(i,g){const{cacheKey:x,targetResourceManagedState:_}=i,{table:v}=_;v.get(x)?Gn(`Resource with cacheKey ${x} is already registered.`):(v.set(x,g),_.videoMemory+=i.videoMemorySize)}unregisterManagementResource(i){const{cacheKey:g,targetResourceManagedState:x}=i,{table:_}=x;_.get(g)&&(x.videoMemory-=i.videoMemorySize,_.delete(g))}createManagedTexture(i){const g=this.gpuDevice.createTexture(i),x=g.destroy.bind(g);return g.destroy=()=>{this.#Sn(g,i),x()},g}getGPUResourceBitmapTextureView(i,g){const x=i instanceof GPUTexture?i:i?.gpuTexture;if(!x)return this.#gn;let _=this.#bn.get(x);_||(_=new Map,this.#bn.set(x,_));const v=this.#Mn(g);let b=_.get(v);if(!b){const i=g?{...g,label:g.label||x.label}:{label:x.label};b=x.createView(i),_.set(v,b)}return b}getGPUResourceCubeTextureView(i,g){const x=i instanceof GPUTexture?i:i?.gpuTexture;if(!x)return this.#De;let _=this.#yn.get(x);_||(_=new Map,this.#yn.set(x,_)),i instanceof GPUTexture||g||(g=i.viewDescriptor);const v=g||CubeTexture.defaultViewDescriptor,b=this.#Mn(v);let y=_.get(b);if(!y){const i={...v,label:x.label};y=x.createView(i),_.set(b,y)}return y}createGPUShaderModule(i,g){return this.#wn(i,g,g=>this.#Rn(i,g),Hn.GPUShaderModule)}getGPUShaderModule(i){return this.#Cn(i,Hn.GPUShaderModule)}deleteGPUShaderModule(i){this.#Pn(i,Hn.GPUShaderModule)}createBindGroupLayout(i,g){return this.#wn(i,g,g=>(g.label||(g.label=i),this.redGPUContext.gpuDevice.createBindGroupLayout(g)),Hn.GPUBindGroupLayout)}getGPUBindGroupLayout(i){return this.#Cn(i,Hn.GPUBindGroupLayout)}deleteGPUBindGroupLayout(i){this.#Pn(i,Hn.GPUBindGroupLayout)}createGPUPipelineLayout(i,g){return this.#wn(i,g,g=>(g.label||(g.label=i),this.redGPUContext.gpuDevice.createPipelineLayout(g)),Hn.GPUPipelineLayout)}createGPUBuffer(i,g){return this.#wn(i,g,g=>(g.label||(g.label=i),this.gpuDevice.createBuffer(g)),Hn.GPUBuffer)}#Sn(i,g){const x="3d"===g.dimension?this.#yn:this.#bn;x.get(i)?.clear(),x.delete(i)&&g.dimension}#Mn(i){return i?JSON.stringify(i):"default"}#Tn(){const{gpuDevice:i}=this.redGPUContext;{const g=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING,label:"EMPTY_BITMAP_TEXTURE"});this.#gn=g.createView({label:g.label});const x=new Uint8Array([0,0,0,0]);i.queue.writeTexture({texture:g},x,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});const _=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:6},format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"EMPTY_CUBE_TEXTURE"});this.#De=_.createView(CubeTexture.defaultViewDescriptor);const v=new Uint8Array([0,0,0,0]);for(let g=0;g<6;g++)i.queue.writeTexture({texture:_,origin:{x:0,y:0,z:g}},v,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});this.#vn=new Sampler(this.redGPUContext)}this.createBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:6,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:9,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}},{binding:3,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]})}#Bn(i){return this.#on.get(i)}#Rn(i,g){const{code:x}=g,_=preprocessWGSL(x).defaultSource,v=this.redGPUContext.gpuDevice.createShaderModule({...g,code:_});return this.#Bn(Hn.GPUShaderModule).set(i,v),v}#En(i,g){if(!i)throw new Error("Name is required");return this.#Bn(g)}#wn(i,g,x,_){const v=this.#En(i,_);if(v.has(i))return v.get(i);g.label||(g.label=i);const b=x(g);return v.set(i,b),b}#Cn(i,g){return this.#En(i,g).get(i)}#Pn(i,g){const x=this.#En(i,g);if(!x.has(i))throw new Error(`${g} with name ${i} doesn't exist.`);x.delete(i)}}Object.freeze(BitmapTexture);class ImmutableKeyMap extends Map{constructor(i=[]){super(),i?.forEach(([i,g])=>super.set(i,g))}set(i,g){if(this.has(i))throw new Error("Cannot change the value of an existing key");return super.set(i,g)}}class MemoryTrackingMap extends Map{#In=0;constructor(){super()}get videoMemory(){return this.#In}set(i,g){const x=g&&"videoMemorySize"in g?"videoMemorySize":g&&"size"in g?"size":void 0;if(this.has(i)){const g=this.get(i);g&&g[x]&&(this.#In-=g[x])}g&&g&&(this.#In+=g[x]);return super.set(i,g)}delete(i){if(this.has(i)){const g=this.get(i),x=g&&"videoMemorySize"in g?"videoMemorySize":g&&"size"in g?"size":void 0;g&&g[x]&&(this.#In-=g[x])}return super.delete(i)}clear(){this.#In=0,super.clear()}}const createMeshVertexUniformBuffers=(i,g=!1)=>{const{gpuRenderInfo:x,redGPUContext:_}=i,{resourceManager:v}=_,b=v.getGPUBindGroupLayout(g?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout),y=new ArrayBuffer(x.vertexUniformInfo.arrayBufferByteLength),S=new UniformBuffer(_,y,i.name);x.vertexBindGroupLayout=b,x.vertexUniformBuffer=S};class ABitmapBaseMaterial extends ABaseMaterial{__packingList;constructor(i,g,x,_){super(i,g,x,_)}updateTexture(i,g){i&&i.__removeDirtyPipelineListener(this.#Ln),g&&g.__addDirtyPipelineListener(this.#Ln),this.#Ln()}updateSampler(i,g){i&&i.__removeDirtyPipelineListener(this.#Ln),g&&g.__addDirtyPipelineListener(this.#Ln),this.#Ln()}#Ln=()=>{this.dirtyPipeline=!0;{let i=(this.__packingList||[]).length;for(;i--;)this.__packingList[i]()}this.gpuRenderInfo?.fragmentShaderModule?this._updateFragmentState():this.initGPURenderInfos()}}Object.freeze(ABitmapBaseMaterial);const zn=[{textureList:["baseColorTexture"],vec4List:[["baseColorFactor",[1,1,1,1]]]},{textureList:["normalTexture"]},{textureList:["metallicRoughnessTexture"],positiveNumberList:["metallicFactor","roughnessFactor"]},{textureList:["emissiveTexture"],vec3List:["emissiveFactor"]},{textureList:["occlusionTexture"],positiveNumberList:["occlusionStrength"]},{extensionName:"KHR_materials_clearcoat",textureList:["KHR_clearcoatTexture","KHR_clearcoatNormalTexture","KHR_clearcoatRoughnessTexture"],positiveNumberList:[["KHR_clearcoatFactor",0],["KHR_clearcoatRoughnessFactor",0],"KHR_clearcoatNormalScale"]},{extensionName:"KHR_materials_sheen",textureList:["KHR_sheenColorTexture","KHR_sheenRoughnessTexture"],positiveNumberList:[["KHR_sheenRoughnessFactor",0]],vec3List:[["KHR_sheenColorFactor",[0,0,0]]]},{extensionName:"KHR_materials_specular",textureList:["KHR_specularTexture","KHR_specularColorTexture"],positiveNumberList:["KHR_specularFactor"],vec3List:[["KHR_specularColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_transmission",textureList:["KHR_transmissionTexture"],positiveNumberList:[["KHR_transmissionFactor",0]]},{extensionName:"KHR_materials_volume",textureList:["KHR_thicknessTexture"],positiveNumberList:[["KHR_thicknessFactor",0],["KHR_attenuationDistance",1]],vec3List:[["KHR_attenuationColor",[1,1,1]]]},{extensionName:"KHR_materials_diffuse_transmission",textureList:["KHR_diffuseTransmissionTexture","KHR_diffuseTransmissionColorTexture"],positiveNumberList:[["KHR_diffuseTransmissionFactor",0]],vec3List:[["KHR_diffuseTransmissionColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_anisotropy",textureList:["KHR_anisotropyTexture"],positiveNumberList:[["KHR_anisotropyStrength",0],["KHR_anisotropyRotation",0]]},{extensionName:"KHR_materials_iridescence",textureList:["KHR_iridescenceTexture","KHR_iridescenceThicknessTexture"],positiveNumberList:[["KHR_iridescenceFactor",0],["KHR_iridescenceIor",1.3],["KHR_iridescenceThicknessMinimum",100],["KHR_iridescenceThicknessMaximum",400]]}],$n=parseWGSL((i=>{const g=zn.map(i=>{const{textureList:g,positiveNumberList:x}=i,_=g?.map(i=>` use${i.charAt(0).toUpperCase()}${i.substring(1)}:u32, ${i}_texCoord_index:u32, use_${i}_KHR_texture_transform:u32, ${i}_KHR_texture_transform_offset:vec2<f32>, ${i}_KHR_texture_transform_scale:vec2<f32>, ${i}_KHR_texture_transform_rotation:f32,`).join("");return[_].join("\n")}).join("");return i.replace(/#redgpu_include KHR_texture_transform/g,g)})("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include calcTintBlendMode;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\n#redgpu_include calcPrePathBackground\n#redgpu_include FragmentOutput\nstruct Uniforms { useVertexColor:u32, useCutOff:u32, cutOff:f32, alphaBlend:u32, doubleSided:u32, useVertexTangent:u32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32, baseColorFactor:vec4<f32>, emissiveFactor:vec3<f32>, emissiveStrength:f32, occlusionStrength:f32, metallicFactor:f32, roughnessFactor:f32, normalScale:f32, useKHR_materials_unlit:u32, KHR_materials_ior:f32, useKHR_materials_transmission:u32, KHR_transmissionFactor:f32, useKHR_materials_diffuse_transmission:u32, KHR_diffuseTransmissionFactor:f32, KHR_diffuseTransmissionColorFactor:vec3<f32>, KHR_dispersion:f32, useKHR_materials_volume:u32, KHR_thicknessFactor:f32, KHR_attenuationDistance:f32, KHR_attenuationColor:vec3<f32>, useKHR_materials_specular:u32, KHR_specularFactor:f32, KHR_specularColorFactor:vec3<f32>, useKHR_materials_anisotropy:u32, KHR_anisotropyStrength:f32, KHR_anisotropyRotation:f32, useKHR_materials_iridescence:u32, KHR_iridescenceFactor:f32, KHR_iridescenceIor:f32, KHR_iridescenceThicknessMinimum:f32, KHR_iridescenceThicknessMaximum:f32, useKHR_materials_sheen:u32, KHR_sheenColorFactor:vec3<f32>, KHR_sheenRoughnessFactor:f32, useKHR_materials_clearcoat:u32, KHR_clearcoatFactor:f32, KHR_clearcoatRoughnessFactor:f32, KHR_clearcoatNormalScale:f32, #redgpu_include KHR_texture_transform\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var baseColorTextureSampler:sampler;\n@group(2) @binding(2) var baseColorTexture:texture_2d<f32>;\n@group(2) @binding(3) var emissiveTextureSampler:sampler;\n@group(2) @binding(4) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(5) var normalTextureSampler:sampler;\n@group(2) @binding(6) var normalTexture:texture_2d<f32>;\n@group(2) @binding(7) var packedORMTexture:texture_2d<f32>;\n@group(2) @binding(8) var KHR_specularTextureSampler:sampler;\n@group(2) @binding(9) var KHR_specularTexture:texture_2d<f32>;\n@group(2) @binding(10) var KHR_specularColorTextureSampler:sampler;\n@group(2) @binding(11) var KHR_specularColorTexture:texture_2d<f32>;\n@group(2) @binding(12) var KHR_clearcoatNormalTexture:texture_2d<f32>;\n@group(2) @binding(13) var packedKHR_clearcoatTexture_transmission:texture_2d<f32>;\n@group(2) @binding(14) var packedKHR_diffuse_transmission:texture_2d<f32>;\n@group(2) @binding(15) var packedKHR_sheen:texture_2d<f32>;\n@group(2) @binding(16) var KHR_anisotropyTexture:texture_2d<f32>;\n@group(2) @binding(17) var packedKHR_iridescence:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32, @location(12) motionVector:vec3<f32>,\n}\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; let input_vertexNormal=(inputData.vertexNormal.xyz); let input_vertexPosition=inputData.vertexPosition.xyz; let input_vertexColor_0=inputData.vertexColor_0; let input_vertexTangent=inputData.vertexTangent; let input_ndcPosition=inputData.ndcPosition; let input_uv=inputData.uv; let input_uv1=inputData.uv1; let u_ambientLight=systemUniforms.ambientLight; let u_ambientLightColor=u_ambientLight.color; let u_ambientLightIntensity=u_ambientLight.intensity; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize; let u_bias=systemUniforms.bias; let u_useIblTexture=systemUniforms.useIblTexture==1u; let receiveShadowYn=inputData.receiveShadow !=.0; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_opacity=uniforms.opacity; let u_cutOff=uniforms.cutOff; let u_useVertexColor=uniforms.useVertexColor==1u; let u_useVertexTangent=uniforms.useVertexTangent==1u; let u_baseColorFactor=uniforms.baseColorFactor; let u_metallicFactor=uniforms.metallicFactor; let u_roughnessFactor=uniforms.roughnessFactor; let u_normalScale=uniforms.normalScale; let u_occlusionStrength=uniforms.occlusionStrength; let u_emissiveFactor=uniforms.emissiveFactor; let u_emissiveStrength=uniforms.emissiveStrength; let u_useKHR_materials_unlit=uniforms.useKHR_materials_unlit==1u; let u_KHR_materials_ior=uniforms.KHR_materials_ior; let u_KHR_dispersion=uniforms.KHR_dispersion; let u_KHR_transmissionFactor=uniforms.KHR_transmissionFactor; var u_useKHR_materials_volume=uniforms.useKHR_materials_volume==1u; var u_KHR_thicknessFactor=uniforms.KHR_thicknessFactor; var u_KHR_attenuationColor=uniforms.KHR_attenuationColor; var u_KHR_attenuationDistance=uniforms.KHR_attenuationDistance; let u_useKHR_materials_diffuse_transmission=uniforms.useKHR_materials_diffuse_transmission==1u; let u_KHR_diffuseTransmissionFactor=uniforms.KHR_diffuseTransmissionFactor; let u_KHR_diffuseTransmissionColorFactor=uniforms.KHR_diffuseTransmissionColorFactor; let u_KHR_specularFactor=uniforms.KHR_specularFactor; let u_KHR_specularColorFactor=uniforms.KHR_specularColorFactor; let u_KHR_anisotropyStrength=uniforms.KHR_anisotropyStrength; let u_KHR_anisotropyRotation=uniforms.KHR_anisotropyRotation; let u_useKHR_anisotropyTexture=uniforms.useKHR_anisotropyTexture==1u; let u_KHR_sheenColorFactor=uniforms.KHR_sheenColorFactor; let u_KHR_sheenRoughnessFactor=uniforms.KHR_sheenRoughnessFactor; let u_useKHR_materials_iridescence=uniforms.useKHR_materials_iridescence==1u; let u_KHR_iridescenceFactor=uniforms.KHR_iridescenceFactor; let u_KHR_iridescenceIor=uniforms.KHR_iridescenceIor; let u_KHR_iridescenceThicknessMinimum=uniforms.KHR_iridescenceThicknessMinimum; let u_KHR_iridescenceThicknessMaximum=uniforms.KHR_iridescenceThicknessMaximum; let u_KHR_clearcoatFactor=uniforms.KHR_clearcoatFactor; let u_KHR_clearcoatRoughnessFactor=uniforms.KHR_clearcoatRoughnessFactor; let u_KHR_clearcoatNormalScale=uniforms.KHR_clearcoatNormalScale; let diffuseUV=get_transformed_uv( input_uv,input_uv1, uniforms.baseColorTexture_texCoord_index, uniforms.use_baseColorTexture_KHR_texture_transform, uniforms.baseColorTexture_KHR_texture_transform_offset, uniforms.baseColorTexture_KHR_texture_transform_rotation, uniforms.baseColorTexture_KHR_texture_transform_scale ); let emissiveUV=get_transformed_uv( input_uv,input_uv1, uniforms.emissiveTexture_texCoord_index, uniforms.use_emissiveTexture_KHR_texture_transform, uniforms.emissiveTexture_KHR_texture_transform_offset, uniforms.emissiveTexture_KHR_texture_transform_rotation, uniforms.emissiveTexture_KHR_texture_transform_scale ); let occlusionUV=get_transformed_uv( input_uv,input_uv1, uniforms.occlusionTexture_texCoord_index, uniforms.use_occlusionTexture_KHR_texture_transform, uniforms.occlusionTexture_KHR_texture_transform_offset, uniforms.occlusionTexture_KHR_texture_transform_rotation, uniforms.occlusionTexture_KHR_texture_transform_scale ); let metallicRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.metallicRoughnessTexture_texCoord_index, uniforms.use_metallicRoughnessTexture_KHR_texture_transform, uniforms.metallicRoughnessTexture_KHR_texture_transform_offset, uniforms.metallicRoughnessTexture_KHR_texture_transform_rotation, uniforms.metallicRoughnessTexture_KHR_texture_transform_scale ); let normalUV=get_transformed_uv( input_uv,input_uv1, uniforms.normalTexture_texCoord_index, uniforms.use_normalTexture_KHR_texture_transform, uniforms.normalTexture_KHR_texture_transform_offset, uniforms.normalTexture_KHR_texture_transform_rotation, uniforms.normalTexture_KHR_texture_transform_scale ); let KHR_clearcoatUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatTexture_texCoord_index, uniforms.use_KHR_clearcoatTexture_KHR_texture_transform, uniforms.KHR_clearcoatTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatTexture_KHR_texture_transform_scale ); let KHR_clearcoatNormalUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatNormalTexture_texCoord_index, uniforms.use_KHR_clearcoatNormalTexture_KHR_texture_transform, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_scale ); let KHR_clearcoatRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatRoughnessTexture_texCoord_index, uniforms.use_KHR_clearcoatRoughnessTexture_KHR_texture_transform, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_scale ); let KHR_sheenColorUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_sheenColorTexture_texCoord_index, uniforms.use_KHR_sheenColorTexture_KHR_texture_transform, uniforms.KHR_sheenColorTexture_KHR_texture_transform_offset, uniforms.KHR_sheenColorTexture_KHR_texture_transform_rotation, uniforms.KHR_sheenColorTexture_KHR_texture_transform_scale ); let KHR_sheenRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_sheenRoughnessTexture_texCoord_index, uniforms.use_KHR_sheenRoughnessTexture_KHR_texture_transform, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_offset, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_rotation, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_scale ); let KHR_specularTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_specularTexture_texCoord_index, uniforms.use_KHR_specularTexture_KHR_texture_transform, uniforms.KHR_specularTexture_KHR_texture_transform_offset, uniforms.KHR_specularTexture_KHR_texture_transform_rotation, uniforms.KHR_specularTexture_KHR_texture_transform_scale ); let KHR_specularColorTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_specularColorTexture_texCoord_index, uniforms.use_KHR_specularColorTexture_KHR_texture_transform, uniforms.KHR_specularColorTexture_KHR_texture_transform_offset, uniforms.KHR_specularColorTexture_KHR_texture_transform_rotation, uniforms.KHR_specularColorTexture_KHR_texture_transform_scale ); let KHR_iridescenceTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_iridescenceTexture_texCoord_index, uniforms.use_KHR_iridescenceTexture_KHR_texture_transform, uniforms.KHR_iridescenceTexture_KHR_texture_transform_offset, uniforms.KHR_iridescenceTexture_KHR_texture_transform_rotation, uniforms.KHR_iridescenceTexture_KHR_texture_transform_scale ); let KHR_iridescenceThicknessTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_iridescenceThicknessTexture_texCoord_index, uniforms.use_KHR_iridescenceThicknessTexture_KHR_texture_transform, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_offset, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_rotation, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_scale ); let KHR_transmissionUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_transmissionTexture_texCoord_index, uniforms.use_KHR_transmissionTexture_KHR_texture_transform, uniforms.KHR_transmissionTexture_KHR_texture_transform_offset, uniforms.KHR_transmissionTexture_KHR_texture_transform_rotation, uniforms.KHR_transmissionTexture_KHR_texture_transform_scale ); let KHR_diffuseTransmissionUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_diffuseTransmissionTexture_texCoord_index, uniforms.use_KHR_diffuseTransmissionTexture_KHR_texture_transform, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_offset, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_rotation, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_scale ); let KHR_diffuseTransmissionColorUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_diffuseTransmissionColorTexture_texCoord_index, uniforms.use_KHR_diffuseTransmissionColorTexture_KHR_texture_transform, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_offset, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_rotation, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_scale ); let KHR_anisotropyUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_anisotropyTexture_texCoord_index, uniforms.use_KHR_anisotropyTexture_KHR_texture_transform, uniforms.KHR_anisotropyTexture_KHR_texture_transform_offset, uniforms.KHR_anisotropyTexture_KHR_texture_transform_rotation, uniforms.KHR_anisotropyTexture_KHR_texture_transform_scale ); var N:vec3<f32>=normalize(input_vertexNormal.xyz); var backFaceYn:bool=false; #redgpu_if doubleSided { var fdx:vec3<f32>=dpdx(input_vertexPosition); var fdy:vec3<f32>=dpdy(input_vertexPosition); var faceNormal:vec3<f32>=normalize(cross(fdy,fdx)); if (dot(N,faceNormal) < 0.0) { N=-N; backFaceYn=true; }; } #redgpu_endIf #redgpu_if normalTexture { var targetUv=select(normalUV,1.0 - normalUV,backFaceYn); let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,normalUV).rgb; N=perturb_normal( N, input_vertexPosition, targetUv, vec3<f32>(normalSamplerColor.r,1.0 - normalSamplerColor.g,normalSamplerColor.b), u_normalScale ); N=select(N,select(N,-N,backFaceYn),u_useVertexTangent); } #redgpu_else { N=N * u_normalScale; } #redgpu_endIf let V:vec3<f32>=normalize(u_cameraPosition - input_vertexPosition); let NdotV=max(dot(N,V),0.04); let VdotN=max(dot(V,N),0.0); var visibility:f32=1.0; visibility=calcDirectionalShadowVisibility( directionalShadowMap, directionalShadowMapSampler, u_shadowDepthTextureSize, u_bias, inputData.shadowPos ); if(!receiveShadowYn){ visibility=1.0; } var finalColor:vec4<f32>; var ior:f32=u_KHR_materials_ior; var baseColor=u_baseColorFactor; var resultAlpha:f32=u_opacity * baseColor.a; baseColor *=select(vec4<f32>(1.0),input_vertexColor_0,u_useVertexColor); #redgpu_if baseColorTexture let diffuseSampleColor=(textureSample(baseColorTexture,baseColorTextureSampler,diffuseUV)); baseColor *=diffuseSampleColor; resultAlpha *=diffuseSampleColor.a; #redgpu_endIf let albedo:vec3<f32>=baseColor.rgb; #redgpu_if useKHR_materials_unlit if(u_useKHR_materials_unlit){ output.color=baseColor; return output; } #redgpu_endIf var occlusionParameter:f32=1; #redgpu_if useOcclusionTexture occlusionParameter=textureSample(packedORMTexture,packedTextureSampler,occlusionUV).r * u_occlusionStrength; #redgpu_endIf var metallicParameter:f32=u_metallicFactor; var roughnessParameter:f32=u_roughnessFactor; #redgpu_if useMetallicRoughnessTexture let metallicRoughnessSample=(textureSample(packedORMTexture,packedTextureSampler,metallicRoughnessUV)); metallicParameter=metallicRoughnessSample.b * metallicParameter; roughnessParameter=metallicRoughnessSample.g * roughnessParameter; #redgpu_endIf roughnessParameter=max(roughnessParameter,0.045); if (abs(ior - 1.0) < 0.0001) { roughnessParameter=0;} var clearcoatParameter=u_KHR_clearcoatFactor; var clearcoatRoughnessParameter=u_KHR_clearcoatRoughnessFactor; var clearcoatNormal:vec3<f32>=N; if(clearcoatParameter !=0.0){ #redgpu_if useKHR_clearcoatTexture let clearcoatSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatUV); clearcoatParameter *=clearcoatSample.r; #redgpu_endIf #redgpu_if useKHR_clearcoatRoughnessTexture let clearcoatRoughnesstSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatRoughnessUV); clearcoatRoughnessParameter *=clearcoatRoughnesstSample.g; #redgpu_endIf var clearcoatNormalSampler=textureSample(KHR_clearcoatNormalTexture,baseColorTextureSampler,KHR_clearcoatNormalUV); #redgpu_if useKHR_clearcoatNormalTexture { var targetUv=KHR_clearcoatNormalUV; if(backFaceYn){ targetUv=1.0 - targetUv; } clearcoatNormal=clearcoatNormalSampler.rgb; clearcoatNormal=perturb_normal( N, input_vertexPosition, targetUv, clearcoatNormal, u_normalScale ); if(u_useVertexTangent){ if(backFaceYn ){ clearcoatNormal=-clearcoatNormal;} } clearcoatNormal=normalize(clearcoatNormal); } #redgpu_endIf } var specularParameter=u_KHR_specularFactor; var specularColor=u_KHR_specularColorFactor; #redgpu_if KHR_specularColorTexture let specularColorTextureSample=textureSample( KHR_specularColorTexture, KHR_specularColorTextureSampler, KHR_specularColorTextureUV ); specularColor *=specularColorTextureSample.rgb; #redgpu_endIf #redgpu_if KHR_specularTexture let specularTextureSample=textureSample( KHR_specularTexture, KHR_specularTextureSampler, KHR_specularTextureUV ); specularParameter *=specularTextureSample.a; #redgpu_endIf var transmissionParameter:f32=u_KHR_transmissionFactor; #redgpu_if useKHR_transmissionTexture let transmissionSample:vec4<f32>=textureSample( packedKHR_clearcoatTexture_transmission, packedTextureSampler, KHR_transmissionUV ); transmissionParameter *=transmissionSample.b; #redgpu_endIf var thicknessParameter:f32=u_KHR_thicknessFactor; #redgpu_if useKHR_thicknessTexture let thicknessSample:vec4<f32>=textureSample( packedKHR_clearcoatTexture_transmission, packedTextureSampler, KHR_transmissionUV ); thicknessParameter *=thicknessSample.a; #redgpu_endIf var diffuseTransmissionColor:vec3<f32>=u_KHR_diffuseTransmissionColorFactor; var diffuseTransmissionParameter:f32=u_KHR_diffuseTransmissionFactor; #redgpu_if useKHR_diffuseTransmissionTexture let diffuseTransmissionTextureSample=textureSample( packedKHR_diffuse_transmission, packedTextureSampler, KHR_diffuseTransmissionUV ); diffuseTransmissionParameter *=diffuseTransmissionTextureSample.a; #redgpu_endIf #redgpu_if useKHR_diffuseTransmissionColorTexture let diffuseTransmissionColorTextureSample=textureSample( packedKHR_diffuse_transmission, packedTextureSampler, KHR_diffuseTransmissionColorUV ); diffuseTransmissionColor *=diffuseTransmissionColorTextureSample.rgb; #redgpu_endIf var sheenColor=u_KHR_sheenColorFactor; var sheenRoughnessParameter=u_KHR_sheenRoughnessFactor; #redgpu_if useKHR_sheenColorTexture let sheenColorSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenColorUV)); sheenColor *=sheenColorSample.rgb; #redgpu_endIf #redgpu_if useKHR_sheenRoughnessTexture let sheenRoughnessSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenRoughnessUV)); sheenRoughnessParameter *=sheenRoughnessSample.a; #redgpu_endIf var iridescenceParameter=u_KHR_iridescenceFactor; var iridescenceThickness=u_KHR_iridescenceThicknessMaximum; #redgpu_if useKHR_iridescenceTexture let iridescenceTextureSample:vec4<f32>=textureSample( packedKHR_iridescence, packedTextureSampler, KHR_iridescenceTextureUV ); iridescenceParameter *=iridescenceTextureSample.r; #redgpu_endIf #redgpu_if useKHR_iridescenceThicknessTexture let iridescenceThicknessTextureSample:vec4<f32>=textureSample( packedKHR_iridescence, packedTextureSampler, KHR_iridescenceThicknessTextureUV ); iridescenceThickness=mix(u_KHR_iridescenceThicknessMinimum,u_KHR_iridescenceThicknessMaximum,iridescenceThicknessTextureSample.g); #redgpu_endIf var anisotropy:f32=u_KHR_anisotropyStrength; var anisotropicT:vec3<f32>=vec3<f32>(1.0); var anisotropicB:vec3<f32>=vec3<f32>(1.0); #redgpu_if useKHR_materials_anisotropy { var anisotropicDirection:vec2<f32>=vec2<f32>(1.0,0.0); if(u_useKHR_anisotropyTexture){ let anisotropyTex=textureSample(KHR_anisotropyTexture,baseColorTextureSampler,KHR_anisotropyUV).rgb; anisotropicDirection=anisotropyTex.rg * 2.0 - vec2<f32>(1.0,1.0); var anisotropyRotation:vec2<f32>; if( u_KHR_anisotropyRotation < 0.0001 ){ anisotropyRotation=vec2<f32>(1.0,0.0);} else{ anisotropyRotation=vec2<f32>( cos(u_KHR_anisotropyRotation),sin(u_KHR_anisotropyRotation) );} let rotationMtx:mat2x2<f32>=mat2x2<f32>( anisotropyRotation.x,anisotropyRotation.y, -anisotropyRotation.y,anisotropyRotation.x ); anisotropicDirection=rotationMtx * normalize(anisotropicDirection); anisotropy *=anisotropyTex.b; } var T:vec3<f32>; var B:vec3<f32>; if (u_useVertexTangent) { if (length(input_vertexTangent.xyz) > 0.0) { T=normalize(input_vertexTangent.xyz); B=normalize(cross(T,N) * input_vertexTangent.w); } else { T=vec3<f32>(1.0,0.0,0.0); B=normalize(cross(T,N) * 1.0); } } else { T=vec3<f32>(1.0,0.0,0.0); B=normalize(cross(T,N) * 1.0); } let TBN:mat3x3<f32>=mat3x3<f32>(T,B,N); anisotropicT=normalize(TBN * vec3<f32>(anisotropicDirection,0.0)); anisotropicB=normalize(cross(N,anisotropicT)); } #redgpu_endIf var prePathBackground=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission prePathBackground=calcPrePathBackground( u_useKHR_materials_volume,thicknessParameter * inputData.volumeScale,u_KHR_dispersion,u_KHR_attenuationDistance,u_KHR_attenuationColor, ior,roughnessParameter,albedo, systemUniforms.projectionCameraMatrix,input_vertexPosition,input_ndcPosition, V,N, renderPath1ResultTexture,renderPath1ResultTextureSampler ); #redgpu_endIf let F0_dielectric:vec3<f32>=vec3(pow((1.0 - ior)/(1.0 + ior),2.0)); let F0_metal=baseColor.rgb; var F0=mix(F0_dielectric,F0_metal,metallicParameter); #redgpu_if useKHR_materials_iridescence if (iridescenceParameter > 0.0) { F0=iridescent_fresnel(1.0,u_KHR_iridescenceIor,F0,iridescenceThickness,iridescenceParameter,NdotV); } #redgpu_endIf var totalDirectLighting=vec3<f32>(0.0); for (var i=0u;i < u_directionalLightCount;i++) { totalDirectLighting +=calcLight( u_directionalLights[i].color,u_directionalLights[i].intensity * visibility, N,V,-normalize(u_directionalLights[i].direction), VdotN, roughnessParameter,metallicParameter,albedo, F0,ior, prePathBackground, specularColor,specularParameter, u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor, transmissionParameter, sheenColor,sheenRoughnessParameter, anisotropy,anisotropicT,anisotropicB, clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal ); } { let clusterIndex=getClusterLightClusterIndex(inputData.position); let lightOffset=clusterLightGroup.lights[clusterIndex].offset; let lightCount:u32=clusterLightGroup.lights[clusterIndex].count; for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) { let i=clusterLightGroup.indices[lightOffset + lightIndex]; let targetLight=clusterLightList.lights[i]; let u_clusterLightPosition=targetLight.position; let u_clusterLightRadius=targetLight.radius; let u_isSpotLight=targetLight.isSpotLight; let lightDistance=length(u_clusterLightPosition - input_vertexPosition); if (lightDistance > u_clusterLightRadius) { continue; } let lightDir=normalize(u_clusterLightPosition - input_vertexPosition);\nlet Lvec=u_clusterLightPosition - input_vertexPosition;\nlet dist2=max(dot(Lvec,Lvec),0.0001);\nlet d=sqrt(dist2);\nlet rangePart=pow(clamp(1.0 - d/u_clusterLightRadius,0.0,1.0),2.0);\nlet invSquare=(u_clusterLightRadius * u_clusterLightRadius)/dist2;\nlet attenuation=rangePart * invSquare; var finalAttenuation=attenuation; if (u_isSpotLight > 0.0) { let u_clusterLightDirection=normalize(vec3<f32>( targetLight.directionX, targetLight.directionY, targetLight.directionZ )); let u_clusterLightInnerAngle=targetLight.innerCutoff; let u_clusterLightOuterCutoff=targetLight.outerCutoff; let lightToVertex=normalize(-lightDir); let cosTheta=dot(lightToVertex,u_clusterLightDirection); let cosOuter=cos(radians(u_clusterLightOuterCutoff)); let cosInner=cos(radians(u_clusterLightInnerAngle)); if (cosTheta < cosOuter) { continue; } let epsilon=cosInner - cosOuter; let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0); finalAttenuation *=spotIntensity; } totalDirectLighting +=calcLight( targetLight.color,targetLight.intensity * finalAttenuation, N,V,lightDir, VdotN, roughnessParameter,metallicParameter,albedo, F0,ior, prePathBackground, specularColor,specularParameter, u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor, transmissionParameter, sheenColor,sheenRoughnessParameter, anisotropy,anisotropicT,anisotropicB, clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal ); } } if (u_useIblTexture) { let R=normalize(reflect(-V,N)); let NdotV=max(dot(N,V),0.04); let NdotV_fresnel=max(dot(N,V),0.04); let fresnel=pow(1.0 - NdotV_fresnel,5.0); let F_IBL_dielectric=F0_dielectric + (vec3<f32>(1.0) - F0_dielectric) * fresnel; let F_IBL_metal=F0_metal + (vec3<f32>(1.0) - F0_metal) * fresnel; var F_IBL=F0 + (vec3<f32>(1.0) - F0) * fresnel; #redgpu_if useKHR_materials_iridescence if (iridescenceParameter > 0.0) { let base_f0=mix(F0_dielectric,baseColor.rgb,metallicParameter); let iridescence_effect=iridescent_fresnel( 1.0, u_KHR_iridescenceIor, base_f0, iridescenceThickness, iridescenceParameter, NdotV  ); F_IBL=iridescence_effect; } #redgpu_endIf let K=(roughnessParameter + 1.0) * (roughnessParameter + 1.0)/8.0; let G=NdotV/(NdotV * (1.0 - K) + K); let a2=roughnessParameter * roughnessParameter; let G_smith=NdotV/(NdotV * (1.0 - a2) + a2); let iblMipmapCount:f32=f32(textureNumLevels(ibl_environmentTexture) - 1); let mipLevel=pow(roughnessParameter,0.4) * iblMipmapCount; var reflectedColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,R,mipLevel).rgb; let effectiveTransmission=transmissionParameter * (1.0 - metallicParameter); let iblDiffuseColor=textureSampleLevel(ibl_irradianceTexture,iblTextureSampler,N,0).rgb; var envIBL_DIFFUSE:vec3<f32>=albedo * iblDiffuseColor * (vec3<f32>(1.0) - F_IBL_dielectric); #redgpu_if useKHR_materials_diffuse_transmission { var backScatteringColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,-N,mipLevel).rgb; let transmittedIBL=backScatteringColor * diffuseTransmissionColor * (vec3<f32>(1.0) - F_IBL); envIBL_DIFFUSE=mix(envIBL_DIFFUSE,transmittedIBL,diffuseTransmissionParameter); } #redgpu_endIf var envIBL_SPECULAR:vec3<f32>; let specularColorCorrected=max(vec3<f32>(0.04),specularColor); envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter; #redgpu_if useKHR_materials_anisotropy { var bentNormal=cross(anisotropicB,V); bentNormal=normalize(cross(bentNormal,anisotropicB)); let temp=1.0 - anisotropy * (1.0 - roughnessParameter); let tempSquared=temp * temp; var a=tempSquared * tempSquared; bentNormal=normalize(mix(bentNormal,N,a)); var reflectVec=reflect(-V,bentNormal); reflectVec=normalize(mix(reflectVec,bentNormal,roughnessParameter * roughnessParameter)); let roughnessT=roughnessParameter * (1.0 + anisotropy); let roughnessB=roughnessParameter * (1.0 - anisotropy); let TdotR=dot(anisotropicT,reflectVec); let BdotR=dot(anisotropicB,reflectVec); let TdotV=dot(anisotropicT,V); let BdotV=dot(anisotropicB,V); let anisotropicR=normalize(reflectVec - anisotropy * (TdotR * anisotropicT - BdotR * anisotropicB)); let VdotN=max(0.04,dot(V,N)); let oneMinusVdotN=1.0 - VdotN; let directionFactor=oneMinusVdotN * oneMinusVdotN * oneMinusVdotN; let VdotT_abs=abs(TdotV); let VdotB_abs=abs(BdotV); let totalWeight=max(0.0001,VdotT_abs + VdotB_abs); let weightedRoughness=(roughnessT * VdotT_abs + roughnessB * VdotB_abs)/totalWeight; let anisotropyFactor=max(0.0,min(1.0,anisotropy)); let finalRoughness=mix( roughnessParameter,weightedRoughness,anisotropyFactor * directionFactor ); let anistropyMipmap=pow(finalRoughness,0.4) * iblMipmapCount; reflectedColor=textureSampleLevel( ibl_environmentTexture,iblTextureSampler,anisotropicR,anistropyMipmap ).rgb; let a2=finalRoughness * finalRoughness; let G_smith=NdotV/(NdotV * (1.0 - a2) + a2); envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter; } #redgpu_endIf var envIBL_SPECULAR_BTDF=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission var refractedDir:vec3<f32>; let eta=1.0/ior; if (abs(ior - 1.0) < 0.0001) { refractedDir=V;} else { refractedDir=refract(-V,-N,eta);} if(length(refractedDir) > 0.0001) { let NdotT=abs(dot(N,normalize(refractedDir))); let F_transmission=vec3<f32>(1.0) - F_IBL_dielectric; var attenuatedBackground=prePathBackground; if (u_useKHR_materials_volume) { let localNodeScale=inputData.localNodeScale; let volumeScale=inputData.volumeScale; let scaledThickness=thicknessParameter * localNodeScale; let safeAttenuationColor=clamp(u_KHR_attenuationColor,vec3<f32>(0.0001),vec3<f32>(1.0)); let safeAttenuationDistance=max(u_KHR_attenuationDistance,0.0001); let attenuationCoefficient=-log(safeAttenuationColor)/safeAttenuationDistance; let cosTheta=max(NdotT,0.001); let pathLength=scaledThickness/cosTheta; let transmittance=exp(-attenuationCoefficient * pathLength); attenuatedBackground *=transmittance; }else{ attenuatedBackground *=albedo; } envIBL_SPECULAR_BTDF=attenuatedBackground * F_transmission * transmissionParameter + reflectedColor * G_smith * F_IBL * NdotT; } #redgpu_endIf let envIBL_DIELECTRIC=mix(envIBL_DIFFUSE,envIBL_SPECULAR_BTDF,transmissionParameter) + envIBL_SPECULAR; var envIBL_SHEEN=vec3<f32>(0.0); var sheen_albedo_scaling:f32=1.0; let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z)); #redgpu_if useKHR_materials_sheen let sheenResult=calcIBLSheen( N, V, sheenColor, maxSheenColor, sheenRoughnessParameter, iblMipmapCount ); envIBL_SHEEN=sheenResult.envIBL_SHEEN; sheen_albedo_scaling=sheenResult.sheen_albedo_scaling; #redgpu_endIf let envIBL_METAL=select(reflectedColor * max(baseColor.rgb,vec3<f32>(0.04)),reflectedColor * F_IBL,iridescenceParameter>0.0); let metallicPart=envIBL_METAL * metallicParameter * sheen_albedo_scaling; let dielectricPart=envIBL_DIELECTRIC * (1.0 - metallicParameter); var indirectLighting=metallicPart + dielectricPart + envIBL_SHEEN; #redgpu_if useKHR_materials_clearcoat if (clearcoatParameter > 0.0) { let clearcoatR=reflect(-V,clearcoatNormal); let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04); let clearcoatMipLevel=pow(clearcoatRoughnessParameter,0.4) * iblMipmapCount; let clearcoatPrefilteredColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,clearcoatR,clearcoatMipLevel).rgb; let clearcoatF0=F0; let clearcoatF=clearcoatF0 + (vec3<f32>(1.0) - clearcoatF0) * pow(1.0 - clearcoatNdotV,5.0); let clearcoatK=(clearcoatRoughnessParameter + 1.0) * (clearcoatRoughnessParameter + 1.0)/8.0; let clearcoatG=clearcoatNdotV/(clearcoatNdotV * (1.0 - clearcoatK) + clearcoatK); let clearcoatBRDF=clearcoatF * clearcoatG; let clearcoatSpecularIBL=clearcoatPrefilteredColor * clearcoatBRDF * clearcoatParameter; let clearcoatFresnel=clearcoatF; indirectLighting=clearcoatSpecularIBL + (vec3<f32>(1.0) - clearcoatFresnel) * indirectLighting; } #redgpu_endIf let environmentIntensity=1.0; let surfaceColor=totalDirectLighting + indirectLighting * environmentIntensity * occlusionParameter; finalColor=vec4<f32>(surfaceColor,resultAlpha); } else { let ambientContribution=albedo * u_ambientLightColor * u_ambientLightIntensity * occlusionParameter; finalColor=vec4<f32>(totalDirectLighting + ambientContribution,resultAlpha); } var emissiveSamplerColor=vec3<f32>(1.0); #redgpu_if emissiveTexture emissiveSamplerColor=textureSample(emissiveTexture,emissiveTextureSampler,emissiveUV).rgb; #redgpu_endIf finalColor +=vec4<f32>( emissiveSamplerColor.rgb * u_emissiveFactor * u_emissiveStrength,0); finalColor=linear_to_srgb(finalColor); #redgpu_if useCutOff if (resultAlpha <=u_cutOff) { discard;} #redgpu_endIf output.color=finalColor; #redgpu_if useSSR { let smoothness=1.0 - roughnessParameter; let smoothnessCurved=smoothness * smoothness * (3.0 - 2.0 * smoothness); let metallicWeight=metallicParameter * metallicParameter; let baseReflection=0.04 + 0.96 * metallicWeight; let baseReflectionStrength=smoothnessCurved * baseReflection; output.gBufferNormal=vec4<f32>(N * 0.5 + 0.5,baseReflectionStrength); } #redgpu_endIf output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n};\nstruct SheenResult { envIBL_SHEEN:vec3<f32>, sheen_albedo_scaling:f32\n}\nfn calcIBLSheen( N:vec3<f32>, V:vec3<f32>, sheenColor:vec3<f32>, maxSheenColor:f32, sheenRoughnessParameter:f32, iblMipmapCount:f32\n) -> SheenResult { let NdotV=max(dot(N,V),0.0001); let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter; let R=reflect(-V,N); let sheenLobe=sheenRoughnessParameter * sheenRoughnessParameter; let sheenSamplingDir=normalize(mix(R,N,sheenLobe)); var sheenMipLevel=log2(sheenRoughnessParameter) * 1.2 + iblMipmapCount - 1.0; sheenMipLevel=clamp(sheenMipLevel,0.0,iblMipmapCount - 1.0); let sheenRadiance=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,sheenSamplingDir,sheenMipLevel).rgb; let F0=0.04; let sheenFresnel=F0 + (1.0 - F0) * pow(1.0 - NdotV,5.0); let E_VdotN=1.0 - pow(1.0 - NdotV,5.0); let sheen_albedo_scaling=max(1.0 - maxSheenColor * E_VdotN,0.04); let envIBL_SHEEN=sheenColor * sheenFresnel; return SheenResult(envIBL_SHEEN,sheen_albedo_scaling);\n}\nfn calcLight( lightColor:vec3<f32>,lightIntensity:f32, N:vec3<f32>,V:vec3<f32>,L:vec3<f32>, VdotN:f32, roughnessParameter:f32,metallicParameter:f32,albedo:vec3<f32>, F0:vec3<f32>,ior:f32, prePathBackground:vec3<f32>, specularColor:vec3<f32>,specularParameter:f32, u_useKHR_materials_diffuse_transmission:bool,diffuseTransmissionParameter:f32,diffuseTransmissionColor:vec3<f32>, transmissionParameter:f32, sheenColor:vec3<f32>,sheenRoughnessParameter:f32, anisotropy:f32,anisotropicT:vec3<f32>,anisotropicB:vec3<f32>, clearcoatParameter:f32,clearcoatRoughnessParameter:f32,clearcoatNormal:vec3<f32>\n) -> vec3<f32>{ let dLight=lightColor * lightIntensity; let NdotL=max(dot(N,L),0.04); let NdotV=max(dot(N,V),0.04); let H=normalize(L + V); let LdotH=max(dot(L,H),0.0); let NdotH=max(dot(N,H),0.0); let VdotH=max(dot(V,H),0.0); var DIFFUSE_BRDF:vec3<f32>=diffuse_brdf_disney(NdotL,NdotV,LdotH,roughnessParameter,albedo); #redgpu_if useKHR_materials_diffuse_transmission DIFFUSE_BRDF=mix(DIFFUSE_BRDF,diffuse_btdf(N,L,diffuseTransmissionColor),diffuseTransmissionParameter); #redgpu_endIf var SPECULAR_BRDF:vec3<f32>; if (anisotropy > 0.0) { #redgpu_if useKHR_materials_anisotropy var TdotL=dot(anisotropicT,L); var TdotV=dot(anisotropicT,V); var BdotL=dot(anisotropicB,L); var TdotH=dot(anisotropicT,H); var BdotH=dot(anisotropicB,H); var BdotV=dot(anisotropicB,V); SPECULAR_BRDF=BRDF_specularAnisotropicGGX( albedo, vec3<f32>(1.0), roughnessParameter * roughnessParameter, VdotH,NdotL,NdotV,NdotH,BdotV,TdotV,TdotL,BdotL,TdotH,BdotH, anisotropy ); #redgpu_endIf }else{ SPECULAR_BRDF=specular_brdf( albedo,roughnessParameter,NdotH,NdotV,NdotL,LdotH); } let METAL_BRDF=conductor_fresnel( albedo,SPECULAR_BRDF,VdotH);; var SPECULAR_BTDF=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission if(transmissionParameter > 0.0){ SPECULAR_BTDF=specular_btdf( NdotV,NdotL,NdotH,VdotH,LdotH,roughnessParameter,albedo,ior); } #redgpu_endIf let DIELECTRIC_BRDF=fresnel_mix( F0, specularParameter, mix(DIFFUSE_BRDF,SPECULAR_BTDF,transmissionParameter), SPECULAR_BRDF, VdotH ); var SHEEN_BRDF:vec3<f32>=vec3<f32>(0.0); var sheen_albedo_scaling:f32=1.0; #redgpu_if useKHR_materials_sheen let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z)); if(sheenRoughnessParameter > 0.0 && maxSheenColor > 0.001 && dot(N,V) > 0) { let NdotV=dot(N,V); let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter; let invR=1/sheenRoughnessAlpha; let cos2h=NdotH * NdotH; let sin2h=1 - cos2h; let sheenDistribution=(2 + invR) * pow(sin2h,invR * 0.5)/(2 * pi); let sheen_visibility=1.0/((1.0 + lambda_sheen(NdotV,sheenRoughnessAlpha) + lambda_sheen(NdotL,sheenRoughnessAlpha)) * (4.0 * NdotV * NdotL)); let LdotN=max(dot(L,N),0.04); let E_LdotN=1.0 - pow(1.0 - LdotN,5.0); let E_VdotN=1.0 - pow(1.0 - VdotN,5.0); sheen_albedo_scaling=max(min(1.0 - maxSheenColor * E_VdotN,1.0 - maxSheenColor * E_LdotN),0.04); SHEEN_BRDF=sheenColor * sheenDistribution * sheen_visibility; } #redgpu_endIf let metallicPart=METAL_BRDF * metallicParameter * sheen_albedo_scaling; let dielectricPart=DIELECTRIC_BRDF * sheen_albedo_scaling; let sheenPart=SHEEN_BRDF; var directLighting=(metallicPart + dielectricPart + sheenPart); #redgpu_if useKHR_materials_transmission if(transmissionParameter > 0.0) { let transmissionWeight=transmissionParameter * (vec3<f32>(1.0) - F0); directLighting=mix(directLighting,prePathBackground,transmissionWeight); } #redgpu_endIf #redgpu_if useKHR_materials_clearcoat if(clearcoatParameter > 0.0){ let clearcoatNdotL=max(dot(clearcoatNormal,L),0.04); let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04); let clearcoatNdotH=max(dot(clearcoatNormal,H),0.0); let CLEARCOAT_BRDF=specular_brdf( F0,clearcoatRoughnessParameter,clearcoatNdotH,clearcoatNdotV,clearcoatNdotL,LdotH); directLighting=fresnel_coat(clearcoatNdotV,ior,clearcoatParameter,directLighting,CLEARCOAT_BRDF); } #redgpu_endIf var lightDirection:f32; #redgpu_if useKHR_materials_diffuse_transmission lightDirection=mix(abs(dot(N,L)),1.0,diffuseTransmissionParameter); #redgpu_else lightDirection=NdotL; #redgpu_endIf let lightContribution=directLighting * dLight * lightDirection; return lightContribution;\n}\nconst pi:f32=3.14159265359;\nfn BRDF_specularAnisotropicGGX( f0:vec3<f32>,f90:vec3<f32>,alphaRoughness:f32,VdotH:f32,NdotL:f32,NdotV:f32,NdotH:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,TdotH:f32,BdotH:f32,anisotropy:f32 ) -> vec3<f32> { var at=mix(alphaRoughness,1.0,anisotropy * anisotropy); var ab=alphaRoughness; var F:vec3<f32>=fresnel_schlick(VdotH,f0); var V:f32=V_GGX_anisotropic(NdotL,NdotV,BdotV,TdotV,TdotL,BdotL,at,ab); var D:f32=D_GGX_anisotropic(NdotH,TdotH,BdotH,at,ab); return F * (V * D);\n}\nfn D_GGX_anisotropic( NdotH:f32,TdotH:f32,BdotH:f32,at:f32,ab:f32 ) -> f32 { let a2:f32=at * ab; let f:vec3<f32>=vec3<f32>(ab * TdotH,at * BdotH,a2 * NdotH); let denominator:f32=dot(f,f); let w2:f32=a2/denominator; return a2 * w2 * w2/pi;\n}\nfn V_GGX_anisotropic( NdotL:f32,NdotV:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,at:f32,ab:f32 ) -> f32 { let GGXV=NdotL * length(vec3<f32>(at * TdotV,ab * BdotV,NdotV)); let GGXL=NdotV * length(vec3<f32>(at * TdotL,ab * BdotL,NdotL)); let v=0.5/(GGXV + GGXL); return clamp(v,0.0,1.0);\n}\nfn iridescent_fresnel(outside_ior:f32,iridescence_ior:f32,base_f0:vec3<f32>, iridescence_thickness:f32,iridescence_factor:f32,cos_theta1:f32) -> vec3<f32> { if (iridescence_thickness <=0.0 || iridescence_factor <=0.0) { return base_f0; } let cos_theta1_abs=abs(cos_theta1); let safe_iridescence_ior=max(iridescence_ior,1.01); let sin_theta1=sqrt(max(0.0,1.0 - cos_theta1_abs * cos_theta1_abs)); let sin_theta2=(outside_ior/safe_iridescence_ior) * sin_theta1; if (sin_theta2 >=1.0) { return base_f0 + iridescence_factor * (vec3<f32>(1.0) - base_f0); } let cos_theta2=sqrt(max(0.0,1.0 - sin_theta2 * sin_theta2)); let wavelengths=vec3<f32>(650.0,510.0,475.0); let effective_thickness=max(iridescence_thickness,10.0); let ior_scale=max(1.0,1.5 - 0.5 * (safe_iridescence_ior/1.5)); let optical_thickness=2.0 * effective_thickness * safe_iridescence_ior * cos_theta2 * ior_scale; let phase=(2.0 * 3.14159265359 * optical_thickness)/wavelengths; let cos_phase=cos(phase); let sin_phase=sin(phase); let outside_cos1=outside_ior * cos_theta1_abs; let iridescence_cos2=safe_iridescence_ior * cos_theta2; let iridescence_cos1=safe_iridescence_ior * cos_theta1_abs; let outside_cos2=outside_ior * cos_theta2; let r12_s=(outside_cos1 - iridescence_cos2)/(outside_cos1 + iridescence_cos2); let r12_p=(iridescence_cos1 - outside_cos2)/(iridescence_cos1 + outside_cos2); let sqrt_f0=sqrt(clamp(base_f0,vec3<f32>(0.01),vec3<f32>(0.99))); let safe_n3=max((1.0 + sqrt_f0)/(1.0 - sqrt_f0),vec3<f32>(1.2)); let iridescence_cos2_vec=vec3<f32>(iridescence_cos2); let cos_theta1_abs_vec=vec3<f32>(cos_theta1_abs); let iridescence_cos1_vec=vec3<f32>(iridescence_cos1); let cos_theta2_vec=vec3<f32>(cos_theta2); let r23_s=(iridescence_cos2_vec - safe_n3 * cos_theta1_abs_vec)/ (iridescence_cos2_vec + safe_n3 * cos_theta1_abs_vec); let r23_p=(safe_n3 * cos_theta2_vec - iridescence_cos1_vec)/ (safe_n3 * cos_theta2_vec + iridescence_cos1_vec); let r12_s_vec=vec3<f32>(r12_s); let r12_p_vec=vec3<f32>(r12_p); let num_s_real=r12_s_vec + r23_s * cos_phase; let num_s_imag=r23_s * sin_phase; let den_s_real=vec3<f32>(1.0) + r12_s_vec * r23_s * cos_phase; let den_s_imag=r12_s_vec * r23_s * sin_phase; let num_p_real=r12_p_vec + r23_p * cos_phase; let num_p_imag=r23_p * sin_phase; let den_p_real=vec3<f32>(1.0) + r12_p_vec * r23_p * cos_phase; let den_p_imag=r12_p_vec * r23_p * sin_phase; let den_s_squared=den_s_real * den_s_real + den_s_imag * den_s_imag + vec3<f32>(0.001); let rs_real=(num_s_real * den_s_real + num_s_imag * den_s_imag)/den_s_squared; let rs_imag=(num_s_imag * den_s_real - num_s_real * den_s_imag)/den_s_squared; let Rs=rs_real * rs_real + rs_imag * rs_imag; let den_p_squared=den_p_real * den_p_real + den_p_imag * den_p_imag + vec3<f32>(0.001); let rp_real=(num_p_real * den_p_real + num_p_imag * den_p_imag)/den_p_squared; let rp_imag=(num_p_imag * den_p_real - num_p_real * den_p_imag)/den_p_squared; let Rp=rp_real * rp_real + rp_imag * rp_imag; let reflectance=0.5 * (Rs + Rp); let ior_influence=smoothstep(1.0,2.0,safe_iridescence_ior); let enhanced_reflectance=mix( pow(reflectance,vec3<f32>(0.8)) * 1.2, reflectance, ior_influence ); let clamped_reflectance=clamp(enhanced_reflectance,vec3<f32>(0.0),vec3<f32>(1.0)); return mix(base_f0,clamped_reflectance,iridescence_factor);\n}\nfn specular_btdf( NdotV:f32, NdotL:f32, NdotH:f32, VdotH:f32, LdotH:f32, roughness:f32, F0:vec3<f32>, ior:f32\n) -> vec3<f32> { let eta:f32=1.0/ior; let D_rough:f32=distribution_ggx(NdotH,roughness * roughness); let t:f32=clamp((ior - 1.0) * 100.0,0.0,1.0); let D:f32=mix(1.0,D_rough,t); let G:f32=min(1.0,min((2.0 * NdotH * NdotV)/VdotH,(2.0 * NdotH * NdotL)/VdotH)); let F:vec3<f32>=fresnel_schlick(VdotH,F0); let denom:f32=(eta * VdotH + LdotH) * (eta * VdotH + LdotH); let btdf:vec3<f32>= (vec3<f32>(1.0) - F) *  abs(VdotH * LdotH) *  (eta * eta) *  D *  G/ (NdotV * denom + 0.001); return btdf;\n}\nfn lambda_sheen_calc_l(x:f32,alpha_g:f32) -> f32 { let one_minus_alpha_sq=(1.0 - alpha_g) * (1.0 - alpha_g); let a=mix(21.5473,25.3245,one_minus_alpha_sq); let b=mix(3.82987,3.32435,one_minus_alpha_sq); let c=mix(0.19823,0.16801,one_minus_alpha_sq); let d=mix(-1.97760,-1.27393,one_minus_alpha_sq); let e=mix(-4.32054,-4.85967,one_minus_alpha_sq); return a/(1.0 + b * pow(x,c)) + d * x + e;\n}\nfn lambda_sheen(cos_theta:f32,alpha_g:f32) -> f32 { if (abs(cos_theta) < 0.5) { return exp(lambda_sheen_calc_l(cos_theta,alpha_g)); } else { return exp(2.0 * lambda_sheen_calc_l(0.5,alpha_g) - lambda_sheen_calc_l(1.0 - cos_theta,alpha_g)); }\n}\nfn fresnel_coat(NdotV:f32,ior:f32,weight:f32,base:vec3<f32>,layer:vec3<f32>) -> vec3<f32> { let f0:f32=pow((1.0 - ior)/(1.0 + ior),2.0); let fr:f32=f0 + (1.0 - f0) * pow(1.0 - abs(NdotV),5.0); return mix(base,layer,weight * fr);\n}\nfn conductor_fresnel(F0:vec3<f32>,bsdf:vec3<f32>,VdotH:f32) -> vec3<f32> { let fresnel=F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - abs(VdotH),5.0); return bsdf * fresnel;\n}\nfn fresnel_mix( F0:vec3<f32>, weight:f32, base:vec3<f32>, layer:vec3<f32>, VdotH:f32\n) -> vec3<f32> { var f0=F0; f0=min(f0,vec3<f32>(1.0)); let fr=f0 + (1.0 - f0) * pow(1.0 - abs(VdotH),5.0); return (1 - weight * max(max(fr.x,fr.y),fr.z)) * base + weight * fr * layer;\n}\nfn fresnel_mix_ibl( F0:vec3<f32>, weight:f32, base:vec3<f32>, layer:vec3<f32>, NdotV:f32\n) -> vec3<f32> { var f0=F0; f0=min(f0,vec3<f32>(1.0)); let fr=f0 + (1.0 - f0) * pow(1.0 - max(NdotV,0.0),5.0); return base * (1.0 - fr * weight) + layer * fr * weight;\n}\nfn diffuse_brdf_disney(NdotL:f32,NdotV:f32,LdotH:f32,roughness:f32,albedo:vec3<f32>) -> vec3<f32> { if (NdotL <=0.0) { return vec3<f32>(0.0);} let energyBias=mix(0.0,0.5,roughness); let energyFactor=mix(1.0,1.0/1.51,roughness); let fd90=energyBias + 2.0 * LdotH * LdotH * roughness; let f0=1.0; let lightScatter=f0 + (fd90 - f0) * pow(1.0 - NdotL,5.0); let viewScatter=f0 + (fd90 - f0) * pow(1.0 - NdotV,5.0); return albedo * NdotL * lightScatter * viewScatter * energyFactor/pi;\n}\nfn diffuse_brdf(NdotL:f32,albedo:vec3<f32>) -> vec3<f32> { return albedo * NdotL/pi;\n}\nfn diffuse_btdf(N:vec3<f32>,L:vec3<f32>,Albedo:vec3<f32>) -> vec3<f32> { let cos_theta=max(-dot(N,L),0.0); return Albedo * cos_theta/pi;\n}\nfn specular_brdf( F0:vec3<f32>, roughness:f32, NdotH:f32, NdotV:f32, NdotL:f32, LdotH:f32\n) -> vec3<f32> { let D=distribution_ggx(NdotH,roughness); let G=geometry_smith(NdotV,NdotL,roughness); let F=fresnel_schlick(LdotH,F0); let numerator=D * G * F; let denominator=4.0 * NdotV * NdotL + 0.04; return (numerator/denominator);\n}\nfn distribution_ggx(NdotH:f32,roughness:f32) -> f32 { let alpha=roughness * roughness; let alpha2=alpha * alpha; let NdotH2=NdotH * NdotH; let nom=alpha2; let denom=(NdotH2 * (alpha2 - 1.0) + 1.0); let denom_squared=denom * denom; return nom/(denom_squared * 3.14159265359);\n}\nfn geometry_smith(NdotV:f32,NdotL:f32,roughness:f32) -> f32 { let alpha=roughness * roughness; let k=alpha/2.0; let ggx1=NdotV/(NdotV * (1.0 - k) + k); let ggx2=NdotL/(NdotL * (1.0 - k) + k); return ggx1 * ggx2;\n}\nfn fresnel_schlick(cosTheta:f32,F0:vec3<f32>) -> vec3<f32> { return F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - cosTheta,5.0);\n}\nfn get_transformed_uv( input_uv:vec2<f32>, input_uv1:vec2<f32>, texCoord_index:u32, use_transform:u32, transform_offset:vec2<f32>, transform_rotation:f32, transform_scale:vec2<f32>\n) -> vec2<f32> { var result_uv=select(input_uv,input_uv1,texCoord_index==1); if (use_transform==1) { let translation=mat3x3<f32>( 1.0,0.0,0.0, 0.0,1.0,0.0, transform_offset.x,transform_offset.y,1.0 ); let cos_rot=cos(transform_rotation); let sin_rot=sin(transform_rotation); let rotation_matrix=mat3x3<f32>( cos_rot,-sin_rot,0.0, sin_rot,cos_rot,0.0, 0.0,0.0,1.0 ); let scale_matrix=mat3x3<f32>( transform_scale.x,0.0,0.0, 0.0,transform_scale.y,0.0, 0.0,0.0,1.0 ); let result_matrix=translation * rotation_matrix * scale_matrix; result_uv=(result_matrix * vec3<f32>(result_uv,1.0)).xy; } return result_uv;\n}\nfn linear_to_srgb(linearColor:vec4<f32>) -> vec4<f32> { let cutoff=vec4<f32>(0.0031308); let higher=vec4<f32>(1.055) * pow(linearColor,vec4<f32>(1.0/2.4)) - vec4<f32>(0.055); let lower=linearColor * vec4<f32>(12.92); return vec4<f32>( mix(higher.r,lower.r,step(linearColor.r,cutoff.r)), mix(higher.g,lower.g,step(linearColor.g,cutoff.g)), mix(higher.b,lower.b,step(linearColor.b,cutoff.b)), linearColor.a  );\n}\n"));class PBRMaterial extends ABitmapBaseMaterial{#Un;#Dn;#An;#kn;#On;constructor(i){super(i,"PBR_MATERIAL",$n,2),this.initGPURenderInfos(),this.#Un=new PackedTexture(i),this.#On=new PackedTexture(i),this.#Dn=new PackedTexture(i),this.#An=new PackedTexture(i),this.#kn=new PackedTexture(i),this.__packingList=[()=>{this.setupPackORMTexture(),this.setupPackedKHR_clearcoatTexture_transmission(),this.setupPackedKHR_diffuse_transmission(),this.setupPackedKHR_sheen(),this.setupPackedKHR_iridescence()}]}get packedKHR_clearcoatTexture_transmission(){return this.#On}get packedKHR_iridescence(){return this.#kn}get packedORMTexture(){return this.#Un}get packedKHR_sheen(){return this.#An}get packedKHR_diffuse_transmission(){return this.#Dn}async setupPackORMTexture(){const i=Math.max(this.occlusionTexture?.gpuTexture?.width||1,this.metallicRoughnessTexture?.gpuTexture?.width||1),g=Math.max(this.occlusionTexture?.gpuTexture?.height||1,this.metallicRoughnessTexture?.gpuTexture?.height||1);await this.#Un.packing({r:this.occlusionTexture?.gpuTexture,g:this.metallicRoughnessTexture?.gpuTexture,b:this.metallicRoughnessTexture?.gpuTexture},i,g,"packedORMTexture")}async setupPackedKHR_clearcoatTexture_transmission(){const i=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.width||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.width||1),g=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.height||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.height||1),x=Math.max(this.KHR_transmissionTexture?.gpuTexture?.width||1,this.KHR_thicknessTexture?.gpuTexture?.width||1),_=Math.max(this.KHR_transmissionTexture?.gpuTexture?.height||1,this.KHR_thicknessTexture?.gpuTexture?.height||1),v=Math.max(i,x),b=Math.max(g,_);await this.#On.packing({r:this.KHR_clearcoatTexture?.gpuTexture,g:this.KHR_clearcoatRoughnessTexture?.gpuTexture,b:this.KHR_transmissionTexture?.gpuTexture,a:this.KHR_thicknessTexture?.gpuTexture},v,b,"packedKHR_clearcoatTexture_transmission",{b:"r",a:"g"})}async setupPackedKHR_diffuse_transmission(){const i=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.width||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.width||1),g=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.height||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.height||1);await this.#Dn.packing({r:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,g:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,b:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,a:this.KHR_diffuseTransmissionTexture?.gpuTexture},i,g,"packedKHR_diffuse_transmission")}async setupPackedKHR_sheen(){const i=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.width||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.width||1),g=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.height||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.height||1);await this.#An.packing({r:this.KHR_sheenColorTexture?.gpuTexture,g:this.KHR_sheenColorTexture?.gpuTexture,b:this.KHR_sheenColorTexture?.gpuTexture,a:this.KHR_sheenRoughnessTexture?.gpuTexture},i,g,"packedKHR_sheen")}async setupPackedKHR_iridescence(){const i=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.width||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.width||1),g=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.height||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.height||1);await this.#kn.packing({r:this.KHR_iridescenceTexture?.gpuTexture,g:this.KHR_iridescenceThicknessTexture?.gpuTexture},i,g,"packedKHR_iridescence")}}xt.defineByPreset(PBRMaterial,[xt.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,xt.PRESET_POSITIVE_NUMBER.NORMAL_SCALE]);zn.forEach(i=>{const{extensionName:g,textureList:x,useSampler:_}=i,{positiveNumberList:v,vec3List:b,vec4List:y}=i;g&&xt.defineBoolean(PBRMaterial,[`use${g}`]),((i,g)=>{i?.forEach(i=>{xt.defineBoolean(PBRMaterial,[`use${i.charAt(0).toUpperCase()}${i.substring(1)}`]),xt.definePositiveNumber(PBRMaterial,[[`${i}_KHR_texture_transform_rotation`,0]]),xt.defineBoolean(PBRMaterial,[`use_${i}_KHR_texture_transform`]),xt.defineVec2(PBRMaterial,[`${i}_KHR_texture_transform_offset`,[`${i}_KHR_texture_transform_scale`,[1,1]]]),xt.defineUint(PBRMaterial,[`${i}_texCoord_index`]),xt.defineTexture(PBRMaterial,[i]),g&&xt.defineSampler(PBRMaterial,[`${i}Sampler`])})})(x,!_),v?.forEach(i=>{xt.definePositiveNumber(PBRMaterial,[i])}),b?.forEach(i=>{xt.defineVec3(PBRMaterial,[i])}),y?.forEach(i=>{xt.defineVec4(PBRMaterial,[i])})}),xt.definePositiveNumber(PBRMaterial,[["cutOff",0],["KHR_materials_ior",1.5],["KHR_dispersion",0]]),xt.defineUint(PBRMaterial,["alphaBlend"]),xt.defineBoolean(PBRMaterial,["doubleSided","useCutOff","useVertexColor","useVertexTangent","useKHR_materials_unlit",["useSSR",!0]]),Object.freeze(PBRMaterial);var Kn="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include picking;\n#redgpu_include calcDisplacements;\n#redgpu_include calculateMotionVector;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, prevModelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, receiveShadow:f32, combinedOpacity:f32, useDisplacementTexture:u32, displacementScale:f32, disableJitter:u32,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(9) ndcPosition:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; #redgpu_if disableJitter { let u_projectionMatrix=systemUniforms.noneJitterProjectionCameraMatrix; } #redgpu_else { let u_projectionMatrix=systemUniforms.projectionMatrix; } #redgpu_endIf let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_prevProjectionCameraMatrix=systemUniforms.prevProjectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_prevModelMatrix=vertexUniforms.prevModelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_displacementScale=vertexUniforms.displacementScale; let u_useDisplacementTexture=vertexUniforms.useDisplacementTexture==1u; let u_receiveShadow=vertexUniforms.receiveShadow; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let input_position=inputData.position; let input_position_vec4=vec4<f32>(input_position,1.0); let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useDisplacementTexture let tempPosition=u_modelMatrix * input_position_vec4; let distance=distance(tempPosition.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition( input_position, input_vertexNormal, displacementTexture, displacementTextureSampler, u_displacementScale, input_uv, mipLevel ); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); let worldUV=input_uv; let displacedNormal=calcDisplacementNormal( normalize((u_normalModelMatrix * vec4<f32>(input_vertexNormal,0.0)).xyz), displacementTexture, displacementTextureSampler, u_displacementScale, worldUV, mipLevel ); normalPosition=vec4<f32>(displacedNormal,0.0); #redgpu_else position=u_modelMatrix * input_position_vec4; normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); #redgpu_endIf output.position=u_projectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.ndcPosition=output.position.xyz/output.position.w; output.combinedOpacity=vertexUniforms.combinedOpacity; #redgpu_if receiveShadow { let posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf { let currentClipPos=u_noneJitterProjectionCameraMatrix * position; let prevClipPos=u_prevProjectionCameraMatrix * u_prevModelMatrix * input_position_vec4; output.motionVector=vec3<f32>(calculateMotionVector(currentClipPos,prevClipPos,u_resolution),select(0.0,1.0,vertexUniforms.disableJitter==1u)); } return output;\n}\n",Xn="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include picking;\n#redgpu_include calculateMotionVector;\nstruct VertexUniforms { pickingId:u32, localMatrix:mat4x4<f32>, modelMatrix:mat4x4<f32>, prevModelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, receiveShadow:f32\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexWeight:vec4<f32>, @location(6) vertexJoint:vec4<f32>, @location(7) vertexTangent:vec4<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32, @location(12) motionVector:vec3<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let input_position=inputData.position; let input_position_vec4=vec4<f32>(input_position,1.0); let input_vertexNormal=inputData.vertexNormal; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_prevProjectionCameraMatrix=systemUniforms.prevProjectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_localMatrix=vertexUniforms.localMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_prevModelMatrix=vertexUniforms.prevModelMatrix; let u_receiveShadow=vertexUniforms.receiveShadow; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_modelMatrix * input_position_vec4; normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=inputData.uv; output.uv1=inputData.uv1; output.vertexColor_0=inputData.vertexColor_0; output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent; output.ndcPosition=output.position.xyz/output.position.w; #redgpu_if receiveShadow { let posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf { let currentClipPos=u_noneJitterProjectionCameraMatrix * position; let prevClipPos=u_prevProjectionCameraMatrix * u_prevModelMatrix * input_position_vec4; output.motionVector=vec3<f32>(calculateMotionVector(currentClipPos,prevClipPos,u_resolution),0.0); } let nodeScaleX=length(u_localMatrix[0].xyz); let nodeScaleY=length(u_localMatrix[1].xyz); let nodeScaleZ=length(u_localMatrix[2].xyz); output.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0); let volumeScaleX=length(u_modelMatrix[0].xyz); let volumeScaleY=length(u_modelMatrix[1].xyz); let volumeScaleZ=length(u_modelMatrix[2].xyz); output.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0); return output;\n}\n";class ResourceStateStorageBuffer{static dirtyList=[];buffer;uuid;#q=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#q}set useNum(i){this.#q=i,ResourceStateStorageBuffer.dirtyList.push(this)}}class StorageBuffer extends AUniformBaseBuffer{constructor(i,g,x="",_=""){super(i,"managedStorageBufferState",GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC,g,x);const{table:v}=this.targetResourceManagedState,b=v.get(_);if(b)return b.buffer;_&&(this.name=_,this[on]=_),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateStorageBuffer(this))}}Object.freeze(StorageBuffer);const getBasicMeshVertexBindGroupDescriptor=(i,g=!1)=>{const{redGPUContext:x,gpuRenderInfo:_,material:v}=i,{resourceManager:b}=x,{vertexUniformBuffer:y,vertexBindGroupLayout:S}=_,{basicSampler:w,emptyBitmapTextureView:L,emptyCubeTextureView:k}=b,{gpuSampler:H}=w;return{layout:S,label:g?"VERTEX_BIND_GROUP_DESCRIPTOR_MESH_SKIN":"VERTEX_BIND_GROUP_DESCRIPTOR_MESH",entries:g?[{binding:0,resource:{buffer:y.gpuBuffer,offset:0,size:y.size}},{binding:1,resource:getGPUResourceSampler(v?.displacementTextureSampler)||H},{binding:2,resource:b.getGPUResourceBitmapTextureView(v?.displacementTexture)||L},{binding:3,resource:{buffer:i.animationInfo.skinInfo.vertexStorageBuffer.gpuBuffer,offset:0,size:i.animationInfo.skinInfo.vertexStorageBuffer.size}}]:[{binding:0,resource:{buffer:y.gpuBuffer,offset:0,size:y.size}},{binding:1,resource:getGPUResourceSampler(v?.displacementTextureSampler)||H},{binding:2,resource:b.getGPUResourceBitmapTextureView(v?.displacementTexture)||L}]}},getGPUResourceSampler=i=>i?.gpuSampler,Wn=parseWGSL(Xn),jn=Wn.uniforms.vertexUniforms,Yn=parseWGSL(Kn),qn=Yn.uniforms.vertexUniforms,createMeshVertexShaderModule=i=>{const{material:g}=i;let x;return x=g instanceof PBRMaterial?i.animationInfo.skinInfo?((i,g)=>{const{redGPUContext:x,currentShaderModuleName:_}=g,{resourceManager:v}=x,{gpuRenderInfo:b}=g,y=`${g.animationInfo.skinInfo.joints.length}`,S=`${i}_${y}`,w="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calculateMotionVector;\nstruct VertexUniforms { pickingId:u32, localMatrix:mat4x4<f32>, modelMatrix:mat4x4<f32>, prevModelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, receiveShadow:f32\n};\nstruct VertexStorages { jointMatrix:array<mat4x4<f32>,#JOINT_NUM>,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\n@group(1) @binding(3) var<storage,read> vertexStorages:VertexStorages;\nstruct InputDataSkin { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexWeight:vec4<f32>, @location(6) vertexJoint:vec4<f32>, @location(7) vertexTangent:vec4<f32>,\n};\nstruct OutputDataSkin { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32, @location(12) motionVector:vec3<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputDataSkin) -> OutputDataSkin { var output:OutputDataSkin; let input_position=inputData.position; let input_position_vec4=vec4<f32>(input_position,1.0); let input_vertexNormal=inputData.vertexNormal; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_prevProjectionCameraMatrix=systemUniforms.prevProjectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_localMatrix=vertexUniforms.localMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_prevModelMatrix=vertexUniforms.prevModelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_receiveShadow=vertexUniforms.receiveShadow; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let vertexJoint=inputData.vertexJoint; let vertexWeight=inputData.vertexWeight; let jointMatrix=vertexStorages.jointMatrix; let skinMat=vertexWeight.x * jointMatrix[u32(vertexJoint.x)] + vertexWeight.y * jointMatrix[u32(vertexJoint.y)] + vertexWeight.z * jointMatrix[u32(vertexJoint.z)] + vertexWeight.w * jointMatrix[u32(vertexJoint.w)]; let position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0); let normalPosition=u_normalModelMatrix * skinMat * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=inputData.uv; output.uv1=inputData.uv1; output.vertexColor_0=inputData.vertexColor_0; output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent; output.ndcPosition=output.position.xyz/output.position.w; #redgpu_if receiveShadow { let posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf { let currentClipPos=u_noneJitterProjectionCameraMatrix * position; let prevClipPos=u_prevProjectionCameraMatrix * u_prevModelMatrix * input_position_vec4; output.motionVector=vec3<f32>(calculateMotionVector(currentClipPos,prevClipPos,u_resolution),0.0); } let nodeScaleX=length(u_localMatrix[0].xyz); let nodeScaleY=length(u_localMatrix[1].xyz); let nodeScaleZ=length(u_localMatrix[2].xyz); output.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0); let volumeScaleX=length(u_modelMatrix[0].xyz); let volumeScaleY=length(u_modelMatrix[1].xyz); let volumeScaleZ=length(u_modelMatrix[2].xyz); output.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0); return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputDataSkin) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let input_position=inputData.position; var skinMat:mat4x4<f32>=mat4x4<f32>( 1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); let vertexJoint=inputData.vertexJoint; let vertexWeight=inputData.vertexWeight; let jointMatrix=vertexStorages.jointMatrix; skinMat=vertexWeight.x * jointMatrix[u32(vertexJoint.x)] + vertexWeight.y * jointMatrix[u32(vertexJoint.y)] + vertexWeight.z * jointMatrix[u32(vertexJoint.z)] + vertexWeight.w * jointMatrix[u32(vertexJoint.w)]; let position=u_modelMatrix * skinMat * vec4<f32>(input_position,1.0); output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n@vertex\nfn picking(inputData:InputDataSkin) -> OutputDataSkin { var output:OutputDataSkin; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; var skinMat:mat4x4<f32>=mat4x4<f32>( 1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); let vertexJoint=inputData.vertexJoint; let vertexWeight=inputData.vertexWeight; let jointMatrix=vertexStorages.jointMatrix; skinMat=vertexWeight.x * jointMatrix[u32(vertexJoint.x)] + vertexWeight.y * jointMatrix[u32(vertexJoint.y)] + vertexWeight.z * jointMatrix[u32(vertexJoint.z)] + vertexWeight.w * jointMatrix[u32(vertexJoint.w)]; let position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0); output.position=u_projectionCameraMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n",L={code:w};if(_===S)return v.getGPUShaderModule(S);if(L.code=w.replaceAll("#JOINT_NUM",y),b.vertexUniformInfo=parseWGSL(L.code).uniforms.vertexUniforms,g.animationInfo.skinInfo){createMeshVertexUniformBuffers(g,!0),g.animationInfo.skinInfo.vertexStorageInfo=parseWGSL(L.code).storage.vertexStorages;const i=new ArrayBuffer(g.animationInfo.skinInfo.vertexStorageInfo.arrayBufferByteLength);g.animationInfo.skinInfo.vertexStorageBuffer=new StorageBuffer(g.redGPUContext,i,g.name),b.vertexUniformBindGroup=x.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(g,!0))}else createMeshVertexUniformBuffers(g),b.vertexUniformBindGroup=x.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(g));const k=v.createGPUShaderModule(S,L);return g.gpuRenderInfo.vertexShaderModule=k,g.gpuRenderInfo.vertexShaderModule})("VERTEX_MODULE_MESH_PBR_SKIN",i):i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH_PBR",Wn,jn,Xn):i.createCustomMeshVertexShaderModule?i.createCustomMeshVertexShaderModule():i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH",Yn,qn,Kn),i.currentShaderModuleName=x.label,x},Zn={NEVER:"never",LESS:"less",EQUAL:"equal",LESS_EQUAL:"less-equal",GREATER:"greater",NOT_EQUAL:"not-equal",GREATER_EQUAL:"greater-equal",ALWAYS:"always"};Object.freeze(Zn);const Jn="shadow",Qn="picking",createBasePipeline=(i,g,x,_)=>{const{redGPUContext:v}=i,{gpuDevice:b,resourceManager:y}=v,S=i.material.gpuRenderInfo;let w,L;switch(g=i.gpuRenderInfo.vertexShaderModule,_){case Jn:w="drawDirectionalShadowDepth",L=`${g.label}_shadow_pipeline`;break;case Qn:w="picking",L=`${g.label}_picking_pipeline`;break;default:w="main",L=`${g.label}_pipeline`}const k={module:g,entryPoint:w,buffers:i.vertexStateBuffers},H=[y.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),x];_!==Jn&&H.push(S.fragmentBindGroupLayout);const z={bindGroupLayouts:H,label:`${L}_${S.fragmentBindGroupLayout.label}`},W={label:L,layout:y.createGPUPipelineLayout(`${z.label}`,z),vertex:k,primitive:i.primitiveState.state};switch(_){case Jn:W.depthStencil={depthWriteEnabled:!0,depthCompare:Zn.LESS_EQUAL,format:"depth32float"};break;case Qn:i.material&&(W.fragment={module:i.material.gpuRenderInfo.fragmentShaderModule,entryPoint:"picking",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},W.depthStencil=i.depthStencilState.state);break;default:W.fragment=S.fragmentState,W.depthStencil=i.depthStencilState.state,W.multisample={count:v.antialiasingManager.useMSAA?4:1}}return b.createRenderPipeline(W)},updateMeshDirtyPipeline=(i,g)=>{const{material:x,gpuRenderInfo:_,redGPUContext:v}=i,{resourceManager:b}=v;i.dirtyTransform=!0,x.dirtyPipeline&&x._updateFragmentState();const y=createMeshVertexShaderModule(i),S=b.getGPUBindGroupLayout(i.animationInfo.skinInfo?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout);_.vertexShaderModule=y,_.pipeline=createBasePipeline(i,y,S),_.shadowPipeline=null,_.pickingPipeline=null;const{vertexUniformInfo:w}=i.gpuRenderInfo,{members:L}=w;for(const g in L)"pickingId"!==g&&(i[g]=i[g]);i.gpuRenderInfo.vertexUniformInfo.members.pickingId&&i.gpuRenderInfo.vertexUniformBuffer.writeBuffer(i.gpuRenderInfo.vertexUniformInfo.members.pickingId,i.pickingId),x.dirtyPipeline=!1,i.dirtyPipeline=!1,g&&g.numDirtyPipelines++},er=Object.values(Zn);class DepthStencilState{#Gn;#Rt="depth32float";#Nn=["r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm-srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm-srgb","rgb9e5ufloat","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth24plus-stencil8","depth32float","depth32float-stencil8","bc1-rgba-unorm","bc1-rgba-unorm-srgb","bc2-rgba-unorm","bc2-rgba-unorm-srgb","bc3-rgba-unorm","bc3-rgba-unorm-srgb","bc4-r-unorm","bc4-r-snorm","bc5-rg-unorm","bc5-rg-snorm","bc6h-rgb-ufloat","bc6h-rgb-float","bc7-rgba-unorm","bc7-rgba-unorm-srgb","etc2-rgb8unorm","etc2-rgb8unorm-srgb","etc2-rgb8a1unorm","etc2-rgb8a1unorm-srgb","etc2-rgba8unorm","etc2-rgba8unorm-srgb","eac-r11unorm","eac-r11snorm","eac-rg11unorm","eac-rg11snorm","astc-4x4-unorm","astc-4x4-unorm-srgb","astc-5x4-unorm","astc-5x4-unorm-srgb","astc-5x5-unorm","astc-5x5-unorm-srgb","astc-6x5-unorm","astc-6x5-unorm-srgb","astc-6x6-unorm","astc-6x6-unorm-srgb","astc-8x5-unorm","astc-8x5-unorm-srgb","astc-8x6-unorm","astc-8x6-unorm-srgb","astc-8x8-unorm","astc-8x8-unorm-srgb","astc-10x5-unorm","astc-10x5-unorm-srgb","astc-10x6-unorm","astc-10x6-unorm-srgb","astc-10x8-unorm","astc-10x8-unorm-srgb","astc-10x10-unorm","astc-10x10-unorm-srgb","astc-12x10-unorm","astc-12x10-unorm-srgb","astc-12x12-unorm","astc-12x12-unorm-srgb"];#Vn=!0;#Fn=Zn.LESS_EQUAL;#Hn;#zn;#$n;#Kn;#Xn=1;#Wn=1;#jn=1;constructor(i){this.#Gn=i}get format(){return this.#Rt}set format(i){this.#Nn.includes(i)?this.#Rt=i:consoleAndThrowError(`Invalid value for format. Received ${i}. Expected one of:${this.#Nn.join(",")}`)}get depthWriteEnabled(){return this.#Vn}set depthWriteEnabled(i){this.#Vn=i}get depthCompare(){return this.#Fn}set depthCompare(i){er.includes(i)?this.#Fn=i:consoleAndThrowError(`Invalid value for depthCompare. Received ${i}. Expected one of:${er.join(",")}`)}get stencilFront(){return this.#Hn}set stencilFront(i){this.#Hn=i}get stencilBack(){return this.#zn}set stencilBack(i){this.#zn=i}get stencilReadMask(){return this.#$n}set stencilReadMask(i){this.#$n=i}get stencilWriteMask(){return this.#Kn}set stencilWriteMask(i){this.#Kn=i}get depthBias(){return this.#Xn}set depthBias(i){this.#Xn=i}get depthBiasSlopeScale(){return this.#Wn}set depthBiasSlopeScale(i){this.#Wn=i}get depthBiasClamp(){return this.#jn}set depthBiasClamp(i){this.#jn=i}get state(){let i=!1;if(this.#Gn?.primitiveState){const{topology:g}=this.#Gn.primitiveState;i=g===Xe.TRIANGLE_LIST||g===Xe.TRIANGLE_STRIP}const g={format:this.#Rt,depthWriteEnabled:this.#Vn,depthCompare:this.#Fn,stencilFront:this.#Hn,stencilBack:this.#zn,stencilReadMask:this.#$n,stencilWriteMask:this.#Kn,depthBias:i?this.#Xn:null,depthBiasSlopeScale:i?this.#Wn:null,depthBiasClamp:i?this.#jn:null};return this.#Gn.dirtyPipeline=!0,g}}const tr={NONE:"none",FRONT:"front",BACK:"back"};Object.freeze(tr);const nr={CW:"cw",CCW:"ccw"};Object.freeze(nr);const rr={UINT16:"uint16",UINT32:"uint32"};Object.freeze(rr);const ir=Object.values(rr),ar=Object.values(nr),sr=Object.values(tr),or=["point-list","line-list","line-strip","triangle-list","triangle-strip"];class PrimitiveState{dirtyPipeline=!1;state;#Gn;#Yn=Xe.TRIANGLE_LIST;#qn;#Zn=nr.CCW;#Jn=tr.BACK;#Qn=!1;constructor(i){this.#Gn=i,this.#Y()}get topology(){return this.#Yn}set topology(i){or.includes(i)?(this.#Yn=i,this.#Y()):consoleAndThrowError(`Invalid value for topology. Received ${i}. Expected one of:${or.join(",")}`)}get stripIndexFormat(){return this.#qn}set stripIndexFormat(i){ir.includes(i)?(this.#qn=i,this.#Y()):consoleAndThrowError(`Invalid value for stripIndexFormat. Received ${i}. Expected one of:${ir.join(",")}`)}get frontFace(){return this.#Zn}set frontFace(i){ar.includes(i)?(this.#Zn=i,this.#Y()):consoleAndThrowError(`Invalid value for frontFace. Received ${i}. Expected one of:${ar.join(",")}`)}get cullMode(){return this.#Jn}set cullMode(i){sr.includes(i)?(this.#Jn=i,this.#Y()):consoleAndThrowError(`Invalid value for cullMode. Received ${i}. Expected one of:${sr.join(",")}`)}get unclippedDepth(){return this.#Qn}set unclippedDepth(i){"boolean"==typeof i?(this.#Qn=i,this.#Y()):consoleAndThrowError(`Invalid type for unclippedDepth. Received ${typeof i}. Expected type:boolean.`)}#Y(){this.state={topology:this.#Yn,stripIndexFormat:this.#qn,frontFace:this.#Zn,cullMode:this.#Jn,unclippedDepth:this.#Qn},this.#Gn.dirtyPipeline=!0}}class Object3DContainer{modelMatrix=create$2();#er=[];constructor(){}get children(){return this.#er}get numChildren(){return this.#er.length}contains(i){return this.#tr(i),this.#er.includes(i)}addChild(i){return this.#tr(i),this.#nr(i)?(this.#er.push(i),i.dirtyTransform=!0,i):null}addChildAt(i,g){if(validateUintRange(g),this.#er.length<g&&(g=this.#er.length),!(g<0||g>this.#er.length)&&this.#nr(i))return this.#er.splice(g,0,i),i.dirtyTransform=!0,this}getChildAt(i){if(validateUintRange(i),!(i>=this.#er.length||i<0))return this.#er[i]}getChildIndex(i){this.#tr(i);const g=this.#er.indexOf(i);return-1===g?-1:g}setChildIndex(i,g){this.#tr(i),validateUintRange(g);const x=this.#er.length,_=g>=x,v=this.#er.indexOf(i);-1!==v?_?consoleAndThrowError(`Invalid index. Index ${g} is out of bounds. Index should be between 0 and ${x-1}.`):(this.#er.splice(v,1),this.#er.splice(g,0,i)):consoleAndThrowError(`The provided is not a child of the Object3DContainer.:${i}`)}swapChildren(i,g){if(this.#tr(i),this.#tr(g),i===g)return void consoleAndThrowError("Error:child1 and child2 are the same. Cannot swap a child with itself.");const x=this.#er.indexOf(i),_=this.#er.indexOf(g);-1!==x&&-1!==_||consoleAndThrowError(`Error:${-1===x?"child1":"child2"} is not a child of this Object3DContainer.`),this.swapChildrenAt(x,_)}swapChildrenAt(i,g){validateUintRange(i),validateUintRange(g),i===g&&consoleAndThrowError("Error:index1 and index2 are identical. Cannot swap a child with itself.");const x=this.#er.length;(i>=x||g>=x)&&consoleAndThrowError(`Error:Both index1 and index2 should be less than the number of children. Provided index1:${i},index2:${g},number of children:${x}`);let _=this.#er[i];this.#er[i]=this.#er[g],this.#er[g]=_}removeChild(i){this.#tr(i);const g=this.#er.indexOf(i);if(g>-1)return i.parent=null,this.#er.splice(g,1)[0];consoleAndThrowError("Error:Child not found within parent.")}removeChildAt(i){validateUintRange(i);const g=this.#er[i];if(g)return g.parent=null,this.#er.splice(i,1)[0];throw new Error(`Error:No child found at provided index:${i}.`)}removeAllChildren(){let i=this.#er.length;for(;i--;)this.#er[i].parent=null;return this.#er.length=0,this}#tr(i){i instanceof Object3DContainer||consoleAndThrowError("allow only Object3DContainer instance.")}#nr=i=>(this.#tr(i),i.parent?!!i.parent?.removeChild(i)&&(i.parent=this,!0):(i.parent=this,!0))}class MeshBase extends Object3DContainer{gpuRenderInfo;animationInfo={skinInfo:null,morphInfo:null,animationsList:null};gltfLoaderInfo;dirtyPipeline=!0;dirtyTransform=!0;dirtyOpacity=!0;modelMatrix=create$2();localMatrix=create$2();normalModelMatrix=create$2();#b;#y;#rr;#ir;#ar;#S=[];#v=createUUID();constructor(i){super(),validateRedGPUContext(i),this.#b=i,this.#y=i.gpuDevice,this.#rr=new PrimitiveState(this),this.#ir=new DepthStencilState(this)}get uuid(){return this.#v}get currentShaderModuleName(){return this.#ar}set currentShaderModuleName(i){this.#ar=i}get primitiveState(){return this.#rr}get depthStencilState(){return this.#ir}get gpuDevice(){return this.#y}get redGPUContext(){return this.#b}worldToLocal(i,g,x){return worldToLocal(this.modelMatrix,i,g,x)}localToWorld(i,g,x){return localToWorld(this.modelMatrix,i,g,x)}getScreenPoint(i){return getScreenPoint(i,this.modelMatrix)}__fireListenerList(i=!1){for(const i of this.#S)i(this);i&&(this.#S.length=0)}}const ur="VERTEX_MODULE_MESH_PBR_SKIN",lr=Math.PI/180,cr=3.141592653589793,hr=6.283185307179586,fr=.225,dr=1.27323954,mr=.405284735,pr=1.5707963267948966;class Mesh extends MeshBase{displacementTexture;castShadow=!1;#e;#a;#sr;#n=0;#i=0;#r=0;#or=[0,0,0];#ur=0;#lr=0;#cr=0;#hr;#fr=1;#dr=1;#mr=1;#pr=[1,1,1];#o=0;#u=0;#l=0;#gr=[0,0,0];#xr={};#_r=0;#vr=!1;#br=1;#yr;#Tr=!1;#Sr;#Mr;constructor(i,g,x,_){super(i),_&&(this.name=_),this._geometry=g,this._material=x,this.#hr=uuidToUint(this.uuid)}get enableDebugger(){return this.#Tr}set enableDebugger(i){this.#Tr=i,i&&!this.#yr&&(this.#yr=new DrawDebuggerMesh(this.redGPUContext,this))}get drawDebugger(){return this.#yr}_material;get material(){return this._material}set material(i){this._material=i,this.dirtyPipeline=!0,"blendMode"in this&&(this.blendMode=this.blendMode)}_geometry;get geometry(){return this._geometry}set geometry(i){this._geometry=i,this.dirtyPipeline=!0,this.dirtyTransform=!0}get opacity(){return this.#br}set opacity(i){validatePositiveNumberRange(i,0,1),this.#br=i,this.dirtyOpacity=!0}get ignoreFrustumCulling(){return this.#vr}set ignoreFrustumCulling(i){this.#vr=i}get pickingId(){return this.#hr}get events(){return this.#xr}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get vertexStateBuffers(){return this._geometry.gpuRenderInfo.buffers}get parent(){return this.#sr}set parent(i){this.#sr=i}get pivotX(){return this.#ur}set pivotX(i){this.#ur=i,this.dirtyTransform=!0}get pivotY(){return this.#lr}set pivotY(i){this.#lr=i,this.dirtyTransform=!0}get pivotZ(){return this.#cr}set pivotZ(i){this.#cr=i,this.dirtyTransform=!0}get x(){return this.#n}set x(i){this.#n=this.#or[0]=i,this.dirtyTransform=!0}get y(){return this.#r}set y(i){this.#r=this.#or[1]=i,this.dirtyTransform=!0}get z(){return this.#i}set z(i){this.#i=this.#or[2]=i,this.dirtyTransform=!0}get position(){return this.#or}get scaleX(){return this.#fr}set scaleX(i){this.#fr=this.#pr[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#dr}set scaleY(i){this.#dr=this.#pr[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#mr}set scaleZ(i){this.#mr=this.#pr[2]=i,this.dirtyTransform=!0}get scale(){return this.#or}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#gr[0]=i%360,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#gr[1]=i%360,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#gr[2]=i%360,this.dirtyTransform=!0}get rotation(){return this.#gr}get boundingOBB(){return this.#Mr&&!this.dirtyTransform||(this.#Mr=null,this.#Sr=null,this.#Mr=calculateMeshOBB(this)),this.#Mr}get boundingAABB(){return this.#Sr&&!this.dirtyTransform||(this.#Mr=null,this.#Sr=null,this.#Sr=calculateMeshAABB(this)),this.#Sr}get combinedBoundingAABB(){return calculateMeshCombinedAABB(this)}setEnableDebuggerRecursively(i=!1){"enableDebugger"in this&&(this.enableDebugger=i),this.children&&this.children.forEach(g=>{g.setEnableDebuggerRecursively(i)})}setCastShadowRecursively(i=!1){"castShadow"in this&&(this.castShadow=i),this.children&&this.children.forEach(g=>{g.setCastShadowRecursively(i)})}setReceiveShadowRecursively(i=!1){"receiveShadow"in this&&(this.receiveShadow=i),this.children&&this.children.forEach(g=>{g.setReceiveShadowRecursively(i)})}getCombinedOpacity(){if(this.is2DMeshType){const i=this.parent;return this.#br*(i?.getCombinedOpacity?i.getCombinedOpacity():1)}return 1}addListener(i,g){this.#xr[i]=g,this.#_r=Object.keys(this.#xr).length}lookAt(i,g,x){var _,v=new Float32Array([0,1,0]),b=[];b[0]=i,b[1]=g,b[2]=x,identity(this.localMatrix),targetTo(this.localMatrix,[this.#n,this.#r,this.#i],b,v),_=mat4ToEuler(this.localMatrix,[]),this.rotationX=180*-_[0]/Math.PI,this.rotationY=180*-_[1]/Math.PI,this.rotationZ=180*-_[2]/Math.PI}setScale(i,g,x){g=g??i,x=x??i;const _=this.#pr;this.#fr=_[0]=i,this.#dr=_[1]=g,this.#mr=_[2]=x,this.dirtyTransform=!0}setPosition(i,g,x){g=g??i,x=x??i;const _=this.#or;this.#n=_[0]=i,this.#r=_[1]=g,this.#i=_[2]=x,this.dirtyTransform=!0}setRotation(i,g,x){g=g??i,x=x??i;const _=this.#gr;this.#o=_[0]=i,this.#u=_[1]=g,this.#l=_[2]=x,this.dirtyTransform=!0}clone(){const i=new Mesh(this.redGPUContext,this._geometry,this._material);i.setPosition(this.#n,this.#r,this.#i),i.setRotation(this.#o,this.#u,this.#l),i.setScale(this.#fr,this.#dr,this.#mr);let g=this.children.length;for(;g--;)i.addChild(this.children[g].clone());return i}#wr;render(i){const{redGPUContext:g}=this,{view:x,isScene2DMode:_,currentRenderPassEncoder:v,timestamp:b,frustumPlanes:y,dirtyVertexUniformFromMaterial:S,useDistanceCulling:w,cullingDistanceSquared:L}=i,{scene:k}=x,{shadowManager:H}=k,{directionalShadowManager:z}=H,{pickingManager:W}=x,{castingList:q}=z,be=this._geometry,Ke=this._material,{uuid:Xe}=Ke||{};let je,Ye;if(this.#wr){const{vertexUniformBuffer:i,vertexUniformInfo:x}=this.gpuRenderInfo,{members:_}=x;_.prevModelMatrix&&g.gpuDevice.queue.writeBuffer(i.gpuBuffer,_.prevModelMatrix.uniformOffset,new _.prevModelMatrix.View(this.#wr))}if(_&&(this.#i=0,this.#cr=0,this.depthStencilState.depthWriteEnabled&&(this.depthStencilState.depthWriteEnabled=!1)),this.dirtyTransform){je=!0;{const{pixelRectObject:i}=x,g=this.parent,v=this.localMatrix;let b,y,S,w,L,k,H,z,W,q,be,Ke,Xe,je,Ye,Ze,Je,Qe,et,tt,it,ft,pt,xt,vt,bt,yt,Tt,St,Mt,wt,Rt,Ct,Pt,Bt,Et,It,Lt,Ut;if(v[12]=this.#n,v[13]=this.#r,v[14]=this.#i,v[15]=1,b=this.#o*lr,y=this.#u*lr,S=this.#l*lr,pt=1,xt=0,vt=0,yt=0,Tt=1,St=0,wt=0,Rt=0,Ct=1,Ut=b%hr,Ut<-cr?Ut+=hr:Ut>cr&&(Ut-=hr),Ut=Ut<0?dr*Ut+mr*Ut*Ut:dr*Ut-mr*Ut*Ut,w=Ut<0?fr*(Ut*-Ut-Ut)+Ut:fr*(Ut*Ut-Ut)+Ut,Ut=(b+pr)%hr,Ut<-cr?Ut+=hr:Ut>cr&&(Ut-=hr),Ut=Ut<0?dr*Ut+mr*Ut*Ut:dr*Ut-mr*Ut*Ut,H=Ut<0?fr*(Ut*-Ut-Ut)+Ut:fr*(Ut*Ut-Ut)+Ut,Ut=y%hr,Ut<-cr?Ut+=hr:Ut>cr&&(Ut-=hr),Ut=Ut<0?dr*Ut+mr*Ut*Ut:dr*Ut-mr*Ut*Ut,L=Ut<0?fr*(Ut*-Ut-Ut)+Ut:fr*(Ut*Ut-Ut)+Ut,Ut=(y+pr)%hr,Ut<-cr?Ut+=hr:Ut>cr&&(Ut-=hr),Ut=Ut<0?dr*Ut+mr*Ut*Ut:dr*Ut-mr*Ut*Ut,z=Ut<0?fr*(Ut*-Ut-Ut)+Ut:fr*(Ut*Ut-Ut)+Ut,Ut=S%hr,Ut<-cr?Ut+=hr:Ut>cr&&(Ut-=hr),Ut=Ut<0?dr*Ut+mr*Ut*Ut:dr*Ut-mr*Ut*Ut,k=Ut<0?fr*(Ut*-Ut-Ut)+Ut:fr*(Ut*Ut-Ut)+Ut,Ut=(S+pr)%hr,Ut<-cr?Ut+=hr:Ut>cr&&(Ut-=hr),Ut=Ut<0?dr*Ut+mr*Ut*Ut:dr*Ut-mr*Ut*Ut,W=Ut<0?fr*(Ut*-Ut-Ut)+Ut:fr*(Ut*Ut-Ut)+Ut,je=z*W,Ye=w*L*W-H*k,Ze=H*L*W+w*k,Je=z*k,Qe=w*L*k+H*W,et=H*L*k-w*W,tt=-L,it=w*z,ft=H*z,b=this.#fr,y=this.#dr,S=this.#mr,this.renderTextureWidth&&(b*=this.renderTextureWidth,y*=this.renderTextureHeight),v[0]=(pt*je+yt*Ye+wt*Ze)*b,v[1]=(xt*je+Tt*Ye+Rt*Ze)*b,v[2]=(vt*je+St*Ye+Ct*Ze)*b,v[3]=v[3]*b,v[4]=(pt*Je+yt*Qe+wt*et)*y,v[5]=(xt*Je+Tt*Qe+Rt*et)*y,v[6]=(vt*Je+St*Qe+Ct*et)*y,v[7]=v[7]*y,v[8]=(pt*tt+yt*it+wt*ft)*S,v[9]=(xt*tt+Tt*it+Rt*ft)*S,v[10]=(vt*tt+St*it+Ct*ft)*S,v[11]=v[11]*S,(this.#ur||this.#lr||this.#cr)&&(pt=v[0],xt=v[1],vt=v[2],bt=v[3],yt=v[4],Tt=v[5],St=v[6],Mt=v[7],wt=v[8],Rt=v[9],Ct=v[10],Pt=v[11],Bt=v[12],Et=v[13],It=v[14],Lt=v[15],q=1,be=0,Ke=0,Xe=0,v[0]=q*pt+be*yt+Ke*wt+Xe*Bt,v[1]=q*xt+be*Tt+Ke*Rt+Xe*Et,v[2]=q*vt+be*St+Ke*Ct+Xe*It,v[3]=q*bt+be*Mt+Ke*Pt+Xe*Lt,q=0,be=1,Ke=0,Xe=0,v[4]=q*pt+be*yt+Ke*wt+Xe*Bt,v[5]=q*xt+be*Tt+Ke*Rt+Xe*Et,v[6]=q*vt+be*St+Ke*Ct+Xe*It,v[7]=q*bt+be*Mt+Ke*Pt+Xe*Lt,q=0,be=0,Ke=1,Xe=0,v[8]=q*pt+be*yt+Ke*wt+Xe*Bt,v[9]=q*xt+be*Tt+Ke*Rt+Xe*Et,v[10]=q*vt+be*St+Ke*Ct+Xe*It,v[11]=q*bt+be*Mt+Ke*Pt+Xe*Lt,_?g?.modelMatrix?(q=-this.#ur,be=-this.#lr,Ke=-this.#cr,Xe=1):(q=-this.#ur/b,be=-this.#lr/y,Ke=-this.#cr,Xe=1):(q=-this.#ur,be=-this.#lr,Ke=-this.#cr,Xe=1),v[12]=q*pt+be*yt+Ke*wt+Xe*Bt,v[13]=q*xt+be*Tt+Ke*Rt+Xe*Et,v[14]=q*vt+be*St+Ke*Ct+Xe*It,v[15]=q*bt+be*Mt+Ke*Pt+Xe*Lt),g?.modelMatrix){let i=g.modelMatrix,x=this.localMatrix,_=this.modelMatrix,v=i[0],b=i[1],y=i[2],S=i[3],w=i[4],L=i[5],k=i[6],H=i[7],z=i[8],W=i[9],q=i[10],be=i[11],Ke=i[12],Xe=i[13],je=i[14],Ye=i[15],Ze=x[0],Je=x[1],Qe=x[2],et=x[3];_[0]=Ze*v+Je*w+Qe*z+et*Ke,_[1]=Ze*b+Je*L+Qe*W+et*Xe,_[2]=Ze*y+Je*k+Qe*q+et*je,_[3]=Ze*S+Je*H+Qe*be+et*Ye,Ze=x[4],Je=x[5],Qe=x[6],et=x[7],_[4]=Ze*v+Je*w+Qe*z+et*Ke,_[5]=Ze*b+Je*L+Qe*W+et*Xe,_[6]=Ze*y+Je*k+Qe*q+et*je,_[7]=Ze*S+Je*H+Qe*be+et*Ye,Ze=x[8],Je=x[9],Qe=x[10],et=x[11],_[8]=Ze*v+Je*w+Qe*z+et*Ke,_[9]=Ze*b+Je*L+Qe*W+et*Xe,_[10]=Ze*y+Je*k+Qe*q+et*je,_[11]=Ze*S+Je*H+Qe*be+et*Ye,Ze=x[12],Je=x[13],Qe=x[14],et=x[15],_[12]=Ze*v+Je*w+Qe*z+et*Ke,_[13]=Ze*b+Je*L+Qe*W+et*Xe,_[14]=Ze*y+Je*k+Qe*q+et*je,_[15]=Ze*S+Je*H+Qe*be+et*Ye}else{const{modelMatrix:i,localMatrix:g}=this;i[0]=g[0],i[1]=g[1],i[2]=g[2],i[3]=g[3],i[4]=g[4],i[5]=g[5],i[6]=g[6],i[7]=g[7],i[8]=g[8],i[9]=g[9],i[10]=g[10],i[11]=g[11],i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15]}{let i=this.normalModelMatrix,g=this.modelMatrix,x=g[0],_=g[1],v=g[2],b=g[3],y=g[4],S=g[5],w=g[6],L=g[7],k=g[8],H=g[9],z=g[10],W=g[11],q=g[12],be=g[13],Ke=g[14],Xe=g[15],je=x*S-_*y,Ye=x*w-v*y,Ze=x*L-b*y,Je=_*w-v*S,Qe=_*L-b*S,et=v*L-b*w,tt=k*be-H*q,it=k*Ke-z*q,ft=k*Xe-W*q,pt=z*Xe-W*Ke,xt=H*Xe-W*be,vt=je*pt-Ye*xt+Ze*pt+Je*ft-Qe*it+et*tt;vt=1/vt,i[0]=(S*pt-w*xt+L*pt)*vt,i[4]=(-_*pt+v*xt-b*pt)*vt,i[8]=(be*et-Ke*Qe+Xe*Je)*vt,i[12]=(-H*et+z*Qe-W*Je)*vt,i[1]=(-y*pt+w*ft-L*it)*vt,i[5]=(x*pt-v*ft+b*it)*vt,i[9]=(-q*et+Ke*Ze-Xe*Ye)*vt,i[13]=(k*et-z*Ze+W*Ye)*vt,i[2]=(y*xt-S*ft+L*tt)*vt,i[6]=(-x*xt+_*ft-b*tt)*vt,i[10]=(q*Qe-be*Ze+Xe*je)*vt,i[14]=(-k*Qe+H*Ze-W*je)*vt,i[3]=(-y*pt+S*it-w*tt)*vt,i[7]=(x*pt-_*it+v*tt)*vt,i[11]=(-q*Je+be*Ye-Ke*je)*vt,i[15]=(k*Je-H*Ye+z*je)*vt}}}this.gltfLoaderInfo?.activeAnimations?.length&&((i,g)=>{let x,_,v,b,y,S,w,L,k,H,z,W,q,be,Ke=g.length;for(;Ke--;)for(w=g[Ke],S=w.targetAniTrackList,y=S.length;y--;){L=S[y];const{animationTargetMesh:g,timeAnimationInfo:Ke,aniDataAnimationInfo:Xe,weightMeshes:je}=L;for(x=(i-w.startTime)%(1e3*S.maxTime)/1e3,z=Ke.dataList,W=Xe.dataList,q=z.length,be=0,H=z.length-1,k=0,_=z[H],v=z[k];be<q;be++){const i=z[be];if(i<x&&(H=be,_=z[H],k=null==z[H+1]?0:H+1,v=z[k]),0==be&&x<i){H=q-1,_=z[H],k=be,v=z[k],x=i;break}if(be==q-1&&x>i){H=0,_=z[H],k=q-1,v=z[k],x=i;break}}let Ye,Ze,Je,Qe,et,tt,it;switch("CUBICSPLINE"==L.interpolation?(b=v-_,"NaN"==b.toString()&&(b=0),Ye=(x-_)/b,"NaN"==Ye.toString()&&(Ye=0),Ze=Ye*Ye,Je=Ze*Ye,tt=-2*Je+3*Ze,it=Je-Ze,Qe=1-tt,et=it-Ze+Ye):(b="STEP"==L.interpolation?0:(x-_)/(v-_),"NaN"==b.toString()&&(b=0)),L.key){case"rotation":gltfAnimationLooper_rotation(L.interpolation,g,W,q,b,H,k,Qe,et,tt,it);break;case"translation":gltfAnimationLooper_transition(L.interpolation,g,W,q,b,H,k,Qe,et,tt,it);break;case"scale":gltfAnimationLooper_scale(L.interpolation,g,W,q,b,H,k,Qe,et,tt,it);break;case"weights":gltfAnimationLooper_weight(je,W,b,H,k)}}})(b,this.gltfLoaderInfo.activeAnimations),this.animationInfo.skinInfo&&(this.currentShaderModuleName.includes(ur)||(this.dirtyPipeline=!0),this.currentShaderModuleName===`${ur}_${this.animationInfo.skinInfo.joints?.length}`&&(this.animationInfo.skinInfo.update(g,this),je=!1));let Ze=!0;if(w&&be){const{rawCamera:i}=x,g=this.boundingAABB,_=i.x-g.centerX,v=i.y-g.centerY,b=i.z-g.centerZ;_*_+v*v+b*b>L+g.geometryRadius*g.geometryRadius&&(Ze=!1)}if(y&&Ze)if(be){const i=this.boundingAABB,g=y[0],x=y[1],_=y[2],v=y[3],b=y[4],S=y[5],w=i.centerX,L=i.centerY,k=i.centerZ,H=i.geometryRadius;(g[0]*w+g[1]*L+g[2]*k+g[3]<=-H||x[0]*w+x[1]*L+x[2]*k+x[3]<=-H||_[0]*w+_[1]*L+_[2]*k+_[3]<=-H||v[0]*w+v[1]*L+v[2]*k+v[3]<=-H||b[0]*w+b[1]*L+b[2]*k+b[3]<=-H||S[0]*w+S[1]*L+S[2]*k+S[3]<=-H)&&(Ze=!1)}else Ze=!1;this.#vr&&(Ze=!0),be?i.num3DObjects++:i.num3DGroups++;const{displacementTexture:Je,displacementScale:Qe}=Ke||{};(this.dirtyPipeline||Ke?.dirtyPipeline||S[Xe])&&(S[Xe]=!0);const{antialiasingManager:et,gpuDevice:tt}=g;if(be){et.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.initGPURenderInfos();const g=!!Je;this.useDisplacementTexture!==g&&(this.useDisplacementTexture=g,this.dirtyPipeline=!0),(this.dirtyPipeline||S[Xe])&&updateMeshDirtyPipeline(this,i)}if(be&&Ze){{const{gpuRenderInfo:i}=this,{vertexUniformBuffer:g,vertexUniformInfo:x}=i,{members:_}=x;void 0!==_.displacementScale&&_.displacementScale!==Qe&&tt.queue.writeBuffer(g.gpuBuffer,_.displacementScale.uniformOffset,new _.displacementScale.View([Qe]))}const{gpuRenderInfo:g}=this,{vertexUniformBuffer:x,vertexUniformBindGroup:_,vertexUniformInfo:b,pipeline:y}=g,{members:S}=b;if(this.dirtyTransform&&(tt.queue.writeBuffer(x.gpuBuffer,S.modelMatrix.uniformOffset,new S.modelMatrix.View(this.is2DMeshType?multiply(create$2(),this.modelMatrix,fromValues$1(this.width,0,0,0,0,this.height,0,0,0,0,1,0,0,0,0,1)):this.modelMatrix)),this.#wr=clone(this.modelMatrix),tt.queue.writeBuffer(x.gpuBuffer,S.normalModelMatrix.uniformOffset,new S.normalModelMatrix.View(this.normalModelMatrix)),S.localMatrix&&tt.queue.writeBuffer(x.gpuBuffer,S.localMatrix.uniformOffset,new S.localMatrix.View(this.localMatrix)),je=!0,this.dirtyTransform=!1),this.dirtyOpacity&&(Ye=!0,S.combinedOpacity&&tt.queue.writeBuffer(x.gpuBuffer,S.combinedOpacity.uniformOffset,new S.combinedOpacity.View([this.getCombinedOpacity()])),this.dirtyOpacity=!1),Ke.use2PathRender)i.render2PathLayer[i.render2PathLayer.length]=this;else if("particle"===this.meshType)i.particleLayer[i.particleLayer.length]=this;else if("instanceMesh"===this.meshType)i.instanceMeshLayer[i.instanceMeshLayer.length]=this;else if(Ke.transparent)i.transparentLayer[i.transparentLayer.length]=this;else if(2===Ke.alphaBlend||Ke.opacity<1||!this.depthStencilState.depthWriteEnabled)i.alphaLayer[i.alphaLayer.length]=this;else{v.setPipeline(y);const{gpuBuffer:g}=be.vertexBuffer,{fragmentUniformBindGroup:x}=Ke.gpuRenderInfo;if(i.prevVertexGpuBuffer!==g&&(v.setVertexBuffer(0,g),i.prevVertexGpuBuffer=g),v.setBindGroup(1,_),i.prevFragmentUniformBindGroup!==x&&(v.setBindGroup(2,x),i.prevFragmentUniformBindGroup=x),i.numDrawCalls++,be.indexBuffer){const{indexBuffer:g}=be,{indexNum:x,triangleCount:_,gpuBuffer:b}=g;v.setIndexBuffer(b,"uint32"),this.particleBuffers?v.drawIndexed(x,this.particleNum,0,0,0):v.drawIndexed(x,1,0,0,0),i.numTriangles+=_,i.numPoints+=x}else{const{vertexBuffer:g}=be,{vertexCount:x,triangleCount:_}=g;v.draw(x,1,0,0),i.numTriangles+=_,i.numPoints+=x}}this.#_r&&(W.castingList[W.castingList.length]=this)}(this.castShadow||this.castShadow&&!be)&&(q[q.length]=this),this.#Tr&&this.#yr.render(i);const{children:it}=this;let ft=0;const pt=it.length;for(;ft<pt;ft++)je&&(it[ft].dirtyTransform=je),Ye&&(it[ft].dirtyOpacity=Ye),it[ft].render(i)}initGPURenderInfos(){this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null,null,null),updateMeshDirtyPipeline(this)}createMeshVertexShaderModuleBASIC=(i,g,x,_)=>{const{redGPUContext:v}=this,{gpuRenderInfo:b}=this;return b.vertexUniformInfo!==x&&(b.vertexUniformInfo=x,b.vertexStructInfo=g,createMeshVertexUniformBuffers(this)),b.vertexShaderSourceVariant=g.shaderSourceVariant,b.vertexShaderVariantConditionalBlocks=g.conditionalBlocks,b.vertexUniformBindGroup=v.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(this)),this.#Xe(i),this.gpuRenderInfo.vertexShaderModule};#Xe(i){const{gpuDevice:g,resourceManager:x}=this.redGPUContext,_=this.#We(),v=`${i}_${_}`;let b=x.getGPUShaderModule(v);if(!b){let i=this.gpuRenderInfo.vertexShaderSourceVariant.getVariant(_);if(i)if(this.animationInfo?.skinInfo){const g=`${this.animationInfo.skinInfo.joints.length}`;i=i.replaceAll("#JOINT_NUM",g),this.gpuRenderInfo.vertexShaderSourceVariant.getVariant(_),b=x.createGPUShaderModule(`${v}_${g}`,{code:i})}else b=x.createGPUShaderModule(v,{code:i});else console.warn("⚠️ 버텍스 바리안트 소스를 찾을 수 없음:",_),b=this.gpuRenderInfo.vertexShaderModule}this.gpuRenderInfo.vertexShaderModule=b}#We(){const{vertexShaderVariantConditionalBlocks:i}=this.gpuRenderInfo,g=new Set;for(const x of i)this[x]&&g.add(x);const x=g.size>0?Array.from(g).sort().join("+"):"none";return g.size,x}}Object.defineProperty(Mesh.prototype,"meshType",{value:"mesh",writable:!1}),q.defineByPreset(Mesh,[q.PRESET_BOOLEAN.RECEIVE_SHADOW]),q.defineBoolean(Mesh,[["useDisplacementTexture",!1],["disableJitter",!1]]),Object.freeze(Mesh);class AController{#Rr;constructor(){}get camera(){return this.#Rr}set camera(i){this.#Rr=i}update(i,g){}getCanvasEventPoint=(i,g)=>{const x=g.htmlCanvas,_=g.detector.isMobile,v=x.getBoundingClientRect(),b="clientX",y="clientY";let S,w;if(_){const g=i.changedTouches[0];S=g[b],w=g[y]}else{const g=i;S=g[b],w=g[y]}return{x:S-v.left,y:w-v.top}}}let gr,xr=create$2();const _r=create$2(),vr=create$1();const validateNumberRange=(i,g=-Number.MAX_VALUE,x=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof x&&consoleAndThrowError("Only numbers allowed."),(i<g||i>x)&&consoleAndThrowError(`Only numbers within the range of [${g},${x}] are allowed. input:${i}`),!0);let br;var yr=Object.freeze({__proto__:null,BasicController:class extends AController{#Cr;#Pr={moveForward:"w",moveBack:"s",moveLeft:"a",moveRight:"d",moveUp:"t",moveDown:"g",turnLeft:"q",turnRight:"e",turnUp:"r",turnDown:"f"};#Br=1;#Er=.1;#Ir=1;#Lr=.1;#Ur=3;#Dr=0;#Ar=[0,0,0];#kr=0;#Or=0;#Gr;constructor(i){super(),this.#Gr=new Mesh(i),this.camera=new PerspectiveCamera;const g=i.detector.isMobile,x={move:g?"touchmove":"mousemove",up:g?"touchend":"mouseup",down:g?"touchstart":"mousedown"};let _,v;const checkArea=g=>{let x=this.#Cr;if(gr&&x===gr){let _,v,b=x.pixelRectObject;const{x:y,y:S}=this.getCanvasEventPoint(g,i);if(_=y*window.devicePixelRatio*i.renderScale,v=S*window.devicePixelRatio*i.renderScale,!(b.x<_&&_<b.x+b.width))return;if(!(b.y<v&&v<b.y+b.height))return}return!0};_=0,v=0;const HD_Move=g=>{const{x:x,y:b}=this.getCanvasEventPoint(g,i),y=x-_,S=b-v;_=x,v=b,this.#kr-=y*this.#Ir*.1,this.#Or-=S*this.#Ir*.1},HD_up=()=>{gr=null,i.htmlCanvas.removeEventListener(x.move,HD_Move),window.removeEventListener(x.up,HD_up)};i.htmlCanvas.addEventListener(x.down,g=>{if(gr=this.#Cr,!checkArea(g))return;const{x:b,y:y}=this.getCanvasEventPoint(g,i);_=b,v=y,i.htmlCanvas.addEventListener(x.move,HD_Move),window.addEventListener(x.up,HD_up)})}get x(){return this.#Gr.x}set x(i){validateNumber(i),this.#Gr.x=i,this.#Ar[0]=i}get y(){return this.#Gr.y}set y(i){validateNumber(i),this.#Gr.y=i,this.#Ar[1]=i}get z(){return this.#Gr.z}set z(i){validateNumber(i),this.#Gr.z=i,this.#Ar[2]=i}get tilt(){return this.#Or}set tilt(i){validateNumber(i),this.#Gr.rotationX=i,this.#Or=i}get pan(){return this.#kr}set pan(i){validateNumber(i),this.#Gr.rotationY=i,this.#kr=i}get keyNameMapper(){return{...this.#Pr}}setMoveForwardKey(i){this.#Pr.moveForward=i}setMoveBackKey(i){this.#Pr.moveBack=i}setMoveLeftKey(i){this.#Pr.moveLeft=i}setMoveRightKey(i){this.#Pr.moveRight=i}setMoveUpKey(i){this.#Pr.moveUp=i}setMoveDownKey(i){this.#Pr.moveDown=i}setTurnLeftKey(i){this.#Pr.turnLeft=i}setTurnRightKey(i){this.#Pr.turnRight=i}setTurnUpKey(i){this.#Pr.turnUp=i}setTurnDownKey(i){this.#Pr.turnDown=i}update(i,g){this.#Cr=i;const x=this.#Er,_=this.#Lr,v=this.#Ar,b=this.#Gr;b.rotationY+=(this.#kr-b.rotationY)*_,b.rotationX+=(this.#Or-b.rotationX)*_,this.#Nr(i)&&(xr=b.modelMatrix,identity(_r),rotateY(_r,_r,b.rotationY*Math.PI/180),rotateX(_r,_r,b.rotationX*Math.PI/180),translate(_r,_r,vr),identity(xr),translate(xr,xr,b.position),multiply(xr,xr,_r),v[0]=xr[12],v[1]=xr[13],v[2]=xr[14]),b.x+=(v[0]-b.x)*x,b.y+=(v[1]-b.y)*x,b.z+=(v[2]-b.z)*x,b.rotationY+=(this.#kr-b.rotationY)*_,b.rotationX+=(this.#Or-b.rotationX)*_,xr=b.modelMatrix,identity(xr),translate(xr,xr,b.position),rotateY(xr,xr,b.rotationY*Math.PI/180),rotateX(xr,xr,b.rotationX*Math.PI/180);const y=clone(xr);translate(y,y,[0,0,.01]),this.camera.setPosition(y[12],y[13],y[14]),this.camera.lookAt(b.x,b.y,b.z)}#Nr(i){if(!i.checkMouseInViewBounds())return;const g=this.#Br,x=this.#Ir,{keyboardKeyBuffer:_}=i.redGPUContext,v=this.#Pr;let b=!1,y=!1,S=0,w=0;vr[0]=0,vr[1]=0,vr[2]=0;const L=this.#Dr*g;return _[v.turnLeft]&&(y=!0,S=x),_[v.turnRight]&&(y=!0,S=-x),_[v.turnUp]&&(y=!0,w=x),_[v.turnDown]&&(y=!0,w=-x),_[v.moveForward]&&(b=!0,vr[2]=-L),_[v.moveBack]&&(b=!0,vr[2]=L),_[v.moveLeft]&&(b=!0,vr[0]=-L),_[v.moveRight]&&(b=!0,vr[0]=L),_[v.moveUp]&&(b=!0,vr[1]=L),_[v.moveDown]&&(b=!0,vr[1]=-L),y||b?(this.#Dr+=.1,this.#Dr>this.#Ur&&(this.#Dr=this.#Ur)):(this.#Dr+=-.1,this.#Dr<0&&(this.#Dr=0)),y&&(this.#kr+=S,this.#Or+=w),b||y}},Camera2D:Camera2D,ObitController:class extends AController{#e;#a;#Vr=0;#Fr=0;#Hr=0;#zr=15;#$r=2;#Kr=.1;#Ir=3;#Lr=.1;#Xr=-35;#Wr=-90;#jr=90;#Yr=0;#qr=0;#Zr=0;#Jr=0;#Qr=new Set;#ei=-1;constructor(i){super(),this.camera=new PerspectiveCamera;const g=i.detector.isMobile,x={move:g?"touchmove":"mousemove",up:g?"touchend":"mouseup",down:g?"touchstart":"mousedown"};let _,v;const findTargetView=g=>{const{x:x,y:_}=this.getCanvasEventPoint(g,i);let v,b;v=x*window.devicePixelRatio*i.renderScale,b=_*window.devicePixelRatio*i.renderScale;for(const i of this.#Qr){const g=i.pixelRectObject;if(g.x<v&&v<g.x+g.width&&g.y<b&&b<g.y+g.height)return i}return null};_=0,v=0;const HD_Move=g=>{if(!br)return;const{x:x,y:b}=this.getCanvasEventPoint(g,i),y=x-_,S=b-v;_=x,v=b,this.#Yr-=y*this.#Ir*.1,this.#Xr-=S*this.#Ir*.1},HD_up=()=>{br=null,i.htmlCanvas.removeEventListener(x.move,HD_Move),window.removeEventListener(x.up,HD_up)};i.htmlCanvas.addEventListener(x.down,g=>{const b=findTargetView(g);if(!b)return;br=b;const{x:y,y:S}=this.getCanvasEventPoint(g,i);_=y,v=S,i.htmlCanvas.addEventListener(x.move,HD_Move),window.addEventListener(x.up,HD_up)}),i.htmlCanvas.addEventListener("wheel",i=>{findTargetView(i)&&(this.#zr+=i.deltaY/100*this.#$r)})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get centerX(){return this.#Vr}set centerX(i){this.#Vr=i}get centerY(){return this.#Fr}set centerY(i){this.#Fr=i}get centerZ(){return this.#Hr}set centerZ(i){this.#Hr=i}get distance(){return this.#zr}set distance(i){validateNumberRange(i,0),this.#zr=i}get speedDistance(){return this.#$r}set speedDistance(i){validateNumberRange(i,.01),this.#$r=i}get delayDistance(){return this.#Kr}set delayDistance(i){validateNumberRange(i,.01,1),this.#Kr=i}get speedRotation(){return this.#Ir}set speedRotation(i){validateNumberRange(i,.01),this.#Ir=i}get delayRotation(){return this.#Lr}set delayRotation(i){validateNumberRange(i,.01,1),this.#Lr=i}get minTilt(){return this.#Wr}set minTilt(i){validateNumberRange(i,-90,90),this.#Wr=i}get maxTilt(){return this.#jr}set maxTilt(i){validateNumberRange(i,-90,90),this.#jr=i}get pan(){return this.#Yr}set pan(i){this.#Yr=i}get tilt(){return this.#Xr}set tilt(i){validateNumberRange(i,-90,90),this.#Xr=i}update(i,g){this.#ei!==g&&(this.#ei=g,this.#Qr.clear()),this.#Qr.add(i),1===this.#Qr.size&&this.#ti()}#ti(){const i=Math.PI/180;this.#Xr<this.#Wr&&(this.#Xr=this.#Wr),this.#Xr>this.#jr&&(this.#Xr=this.#jr);const{camera:g}=this;this.#qr+=(this.#Yr-this.#qr)*this.#Lr,this.#Zr+=(this.#Xr-this.#Zr)*this.#Lr,this.#zr<g.nearClipping&&(this.#zr=g.nearClipping),this.#Jr+=(this.#zr-this.#Jr)*this.#Kr,this.#Jr<g.nearClipping&&(this.#Jr=g.nearClipping);const x=g.modelMatrix;identity(x),translate(x,x,[this.#Vr,this.#Fr,this.#Hr]),rotateY(x,x,this.#qr*i),rotateX(x,x,this.#Zr*i),translate(x,x,[0,0,this.#Jr]),g.x=x[12],g.y=x[13],g.z=x[14],this.camera.lookAt(this.#Vr,this.#Fr,this.#Hr)}},OrthographicCamera:OrthographicCamera,PerspectiveCamera:PerspectiveCamera});class RedGPUContextSizeManager{#ni;#ri;#b;#ii=[0,0,0,0];#ai;#si=1;constructor(i,g="100%",x="100%"){this.#b=i,this.#ai=i.htmlCanvas,this.#ai.style.boxSizing="border-box",this.#ni=g,this.#ri=x}get renderScale(){return this.#si}set renderScale(i){validateNumber(i),i<=0&&(i=.01),this.#si=i,this.setSize()}get width(){return this.#ni}set width(i){this.setSize(i,this.#ri)}get height(){return this.#ri}set height(i){this.setSize(this.#ni,i)}get pixelRectArray(){return this.#ii}get pixelRectObject(){return{x:this.#ii[0],y:this.#ii[1],width:this.#ii[2],height:this.#ii[3]}}get parentDomRect(){return(this.#ai.parentNode||document.body).getBoundingClientRect()}get screenRectObject(){return{x:this.#ii[0]/devicePixelRatio,y:this.#ii[1]/devicePixelRatio,width:this.#ii[2]/devicePixelRatio,height:this.#ii[3]/devicePixelRatio}}static validateSizeValue=i=>{switch(typeof i){case"number":validatePositiveNumberRange(i);break;case"string":new RegExp(/^[+]?^[.]?(\d+)(\.\d+)?(?:px|%|$)/gm).test(i)||consoleAndThrowError(`allow positive number,%,px model/input:${i}`);break;default:consoleAndThrowError(`positive number,%,px model/input:${i}`)}};static validatePositionValue=i=>{switch(typeof i){case"number":validateNumber(i);break;case"string":new RegExp(/^-?\d+(\.\d+)?(px|%)?$/).test(i)||consoleAndThrowError(`allow number,%,px model /input:${i}`);break;default:consoleAndThrowError(`number,%,px model/input:${i}`)}};static getPixelDimension(i,g,x){return"number"==typeof x?x:RedGPUContextSizeManager.calculateSizeFromString(i,g,x)}static calculateSizeFromString(i,g,x){return x.includes("%")?Math.floor(i[g]*+x.replace("%","")/100):+x.replace("px","")}setSize(i=this.#ni,g=this.#ri){RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(g),this.#ni=i,this.#ri=g;const x=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"width",i),_=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"height",g);this.#oi(x,_),this.#ui(x,_),this.#li()}#ui(i,g){this.#ii[2]=Math.floor(i*this.#si*window.devicePixelRatio),this.#ii[3]=Math.floor(g*this.#si*window.devicePixelRatio)}#li(){this.#b.onResize&&this.#b.onResize(this.screenRectObject.width,this.screenRectObject.height),this.#b.viewList.forEach(i=>{i.setSize(),i.setPosition()})}#oi(i,g){const x=this.#ai,{style:_}=x;x.width=i*this.#si*window.devicePixelRatio,x.height=g*this.#si*window.devicePixelRatio,_.width=`${i}px`,_.height=`${g}px`}}class PassClusterLightBound{#ci;#hi;#fi;#di;#mi;#b;constructor(i,g){validateRedGPUContext(i),this.#b=i,this.#ci=g,this.#pi()}get clusterBoundBuffer(){return this.#hi}render(){const i=this.#ci.systemUniform_Vertex_UniformBindGroup;if(i){const{gpuDevice:g}=this.#b,x=g.createCommandEncoder(),_=x.beginComputePass({label:"Bound cluster"}),v=zt.getDispatchSize();_.setPipeline(this.#mi),_.setBindGroup(0,i),_.setBindGroup(1,this.#di),_.dispatchWorkgroups(v[0],v[1],v[2]),_.end(),g.queue.submit([x.finish()])}}#pi(){const{gpuDevice:i,resourceManager:g}=this.#b,x=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage,read_write> clusterLight_Clusters:ClusterLight_Clusters;\nfn lineIntersectionToZPlane(a:vec3<f32>,b:vec3<f32>,zDistance:f32) -> vec3<f32> { let normal=vec3<f32>(0.0,0.0,0.5); let ab=b - a; let t=(zDistance - dot(normal,a))/dot(normal,ab); return a + t * ab;\n}\nfn clipToView(clip:vec4<f32>) -> vec4<f32> { let view=systemUniforms.inverseProjectionMatrix * clip; return view/vec4<f32>(view.w,view.w,view.w,view.w);\n}\nfn screen2View(screen:vec4<f32>) -> vec4<f32> { let texCoord=screen.xy/systemUniforms.resolution.xy; let clip=vec4<f32>(vec2<f32>(texCoord.x,1.0 - texCoord.y) * 2.0 - vec2<f32>(1.0,1.0),screen.z,screen.w ); return clipToView(clip);\n}\nconst eyePos=vec3<f32>(0.0);\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let tileIndex=global_id.x + global_id.y * clusterLight_tileCount.x + global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y; let tileSize=vec2<f32>( systemUniforms.resolution.x/f32(clusterLight_tileCount.x), systemUniforms.resolution.y/f32(clusterLight_tileCount.y) ); let global_id_x_pos_one=vec2<f32>(f32(global_id.x + 1u),f32(global_id.y + 1u)) * tileSize; let global_id_x_y=vec2<f32>(f32(global_id.x),f32(global_id.y)) * tileSize; let maxPoint_sS=vec4<f32>(global_id_x_pos_one,0.0,1.0); let minPoint_sS=vec4<f32>(global_id_x_y,0.0,1.0); let maxPoint_vS=screen2View(maxPoint_sS).xyz; let minPoint_vS=screen2View(minPoint_sS).xyz; let nearFarX=systemUniforms.camera.nearClipping; let nearFarY=systemUniforms.camera.farClipping; let tileZ=f32(global_id.z)/f32(clusterLight_tileCount.z); let tileZ_plus_one=f32(global_id.z + 1u)/f32(clusterLight_tileCount.z); let tileNear=-nearFarX * pow(nearFarY/nearFarX,tileZ); let tileFar=-nearFarX * pow(nearFarY/nearFarX,tileZ_plus_one); let minPointNear=lineIntersectionToZPlane(eyePos,minPoint_vS,tileNear); let minPointFar=lineIntersectionToZPlane(eyePos,minPoint_vS,tileFar); let maxPointNear=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileNear); let maxPointFar=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileFar); let minAABB=min(min(minPointNear,minPointFar),min(maxPointNear,maxPointFar)); let maxAABB=max(max(minPointNear,minPointFar),max(maxPointNear,maxPointFar)); clusterLight_Clusters.cubeList[tileIndex].minAABB=vec4<f32>(minAABB,0.0); clusterLight_Clusters.cubeList[tileIndex].maxAABB=vec4<f32>(maxAABB,0.0);\n}\n").defaultSource;this.#hi=g.createGPUBuffer("PASS_CLUSTER_BOUND_BUFFER",{size:32*zt.getTotalTileSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),this.#fi=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),this.#di=i.createBindGroup({label:"CLUSTER_BOUND_BIND_GROUP",layout:this.#fi,entries:[{binding:0,resource:{buffer:this.#hi}}]}),this.#mi=i.createComputePipeline({label:"CLUSTER_BOUND_PIPELINE",layout:i.createPipelineLayout({bindGroupLayouts:[g.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),this.#fi]}),compute:{module:g.createGPUShaderModule("CLUSTER_BOUND_SHADER",{code:x}),entryPoint:"main"}})}}const Tr=new Uint32Array([0,0,0,0]);class PassClustersLight{#ci;#gi;#xi;#_i;#b;constructor(i,g){validateRedGPUContext(i),this.#b=i,this.#ci=g,this.#pi()}get clusterLightsBuffer(){return this.#_i}render(){const{gpuDevice:i}=this.#b,g=this.#ci.systemUniform_Vertex_UniformBindGroup;if(g){const x=i.createCommandEncoder(),_=x.beginComputePass({label:"ClusterLight cluster"}),v=zt.getDispatchSize();this.#b.gpuDevice.queue.writeBuffer(this.clusterLightsBuffer,0,Tr),_.setPipeline(this.#xi),_.setBindGroup(0,g),_.setBindGroup(1,this.#gi),_.dispatchWorkgroups(v[0],v[1],v[2]),_.end(),i.queue.submit([x.finish()])}}#pi(){const{gpuDevice:i,resourceManager:g}=this.#b,x=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage> clusterLight_Clusters:ClusterLight_Clusters;\nfn pointLight_testSphereAABB(light:u32,tile:u32) -> bool { let targetLight=clusterLightList.lights[light]; let targetTile=clusterLight_Clusters.cubeList[tile]; let radius:f32=targetLight.radius; let position:vec3<f32>=targetLight.position; let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz; let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz); return squaredDistance <=(radius * radius);\n}\nfn pointLight_sqDistPointAABB(targetPoint:vec3<f32>,tile:u32,minAABB:vec3<f32>,maxAABB:vec3<f32>) -> f32 { var sqDist=0.0; for(var i=0u;i < 3u;i=i + 1u) { let v=targetPoint[i]; let _minAABB=minAABB[i]; let _maxAABB=maxAABB[i]; if(v < _minAABB){ sqDist +=(_minAABB - v) * (_minAABB - v); } if(v > _maxAABB){ sqDist +=(v - _maxAABB) * (v - _maxAABB); } } return sqDist;\n}\nfn spotLight_testSphereAABB(light:u32,tile:u32) -> bool { let targetLight=clusterLightList.lights[light]; let targetTile=clusterLight_Clusters.cubeList[tile]; let radius:f32=targetLight.radius; let position:vec3<f32>=targetLight.position; let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz; let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz); return squaredDistance <=(radius * radius);\n}\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let tileIndex=global_id.x + global_id.y * clusterLight_tileCount.x + global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y; var clusterLightCount=0u; var clusterLightIndices:array<u32,REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu>; for (var i=0u;i < u32(clusterLightList.count[0]);i=i + 1u) { let lightInCluster=pointLight_testSphereAABB(i,tileIndex); if (lightInCluster) { clusterLightIndices[clusterLightCount]=i; clusterLightCount=clusterLightCount + 1u; } if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) { break; } } let spotLightStartIndex=u32(clusterLightList.count[0]); for (var i=0u;i < u32(clusterLightList.count[1]);i=i + 1u) { let actualLightIndex=spotLightStartIndex + i; let sphereTest=spotLight_testSphereAABB(actualLightIndex,tileIndex); if (sphereTest) { clusterLightIndices[clusterLightCount]=actualLightIndex; clusterLightCount=clusterLightCount + 1u; } if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) { break; } } var offset=atomicAdd(&clusterLightGroup.offset,clusterLightCount); for(var i=0u;i < clusterLightCount;i=i + 1u) { clusterLightGroup.indices[offset + i]=clusterLightIndices[i]; } clusterLightGroup.lights[tileIndex].offset=offset; clusterLightGroup.lights[tileIndex].count=clusterLightCount;\n}\n").defaultSource;this.#_i=g.createGPUBuffer("PASS_CLUSTER_LIGHTS_BUFFER",{size:zt.getClusterLightsBufferSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const _=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]});this.#gi=i.createBindGroup({label:"CLUSTER_LIGHT_BIND_GROUP",layout:_,entries:[{binding:0,resource:{buffer:this.#ci.passLightClustersBound.clusterBoundBuffer}}]}),this.#xi=i.createComputePipeline({label:"CLUSTER_LIGHT_PIPELINE",layout:i.createPipelineLayout({label:"CLUSTER_LIGHT_PIPELINE_LAYOUT",bindGroupLayouts:[g.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),_]}),compute:{module:g.createGPUShaderModule("CLUSTER_LIGHTS_SHADER",{code:x}),entryPoint:"main"}})}}class PickingEvent{pickingId;mouseX;mouseY;target;time;type;movementX=0;movementY=0;localX=0;localY=0;localZ=0;altKey=!1;ctrlKey=!1;shiftKey=!1;constructor(i,g,x,_,v,b,y){this.pickingId=i,this.mouseX=g,this.mouseY=x,this.target=_,this.time=v,this.type=b,this.altKey=y.altKey,this.ctrlKey=y.ctrlKey,this.shiftKey=y.shiftKey}}const Sr={MOVE:"move",DOWN:"down",UP:"up",OVER:"over",OUT:"out",CLICK:"click"};class PickingManager{lastMouseEvent;lastMouseClickEvent;#vi;#bi;#yi;#Ti;#b;#ci;#Si=[];#Mi=0;#wi=0;#Ri;#Ci;#Mt=0;get videoMemorySize(){return this.#Mt}get mouseX(){return this.#Mi}set mouseX(i){this.#Mi=i}get mouseY(){return this.#wi}set mouseY(i){this.#wi=i}get castingList(){return this.#Si}get pickingGPUTexture(){return this.#yi}get pickingGPUTextureView(){return this.#Ti}get pickingDepthGPUTextureView(){return this.#bi}resetCastingList(){this.#Si.length=0}destroy(){this.#yi&&(this.#yi.destroy(),this.#vi.destroy(),this.#yi=null,this.#Ti=null,this.#vi=null,this.#bi=null)}checkTexture(i){const{redGPUContext:g}=i,{resourceManager:x}=g;this.#ci=i,this.#b=g,this.#yi?.width===this.#ci.pixelRectObject.width&&this.#yi?.height===this.#ci.pixelRectObject.height||(this.destroy(),this.#yi=this.#Pi("picking",navigator.gpu.getPreferredCanvasFormat()),this.#Ti=x.getGPUResourceBitmapTextureView(this.#yi),this.#vi=this.#Pi("pickingDepth","depth32float"),this.#bi=x.getGPUResourceBitmapTextureView(this.#vi),this.#Bi())}checkEvents(i,g){this.#Ei(i,g),this.resetCastingList()}#Bi(){const i=this.#yi;if(!i)return 0;this.#Mt=calculateTextureByteSize(i)+calculateTextureByteSize(this.#vi)}#Pi(i,g){const{resourceManager:x}=this.#b;return x.createManagedTexture({size:[this.#ci.pixelRectObject.width,this.#ci.pixelRectObject.height,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,format:g,sampleCount:1,label:`${this.#ci.name}_${i}_${this.#ci.pixelRectObject.width}x${this.#ci.pixelRectObject.height}`})}#Ei=async(i,g,x=1,_=1)=>{const{gpuDevice:v}=i.redGPUContext,{pixelRectArray:b}=i,y=this.#Mi,S=this.#wi;if(y<=0||y>=b[2]||S<=0||S>=b[3])return;const w=this.#Ii();let L=this.#Li(v,x,_,y,S);const k=await this.#Ui(L);L.destroy(),L=null,k?(this.#Di(k,y,S,g,w),this.#Ai(k,y,S,g,w)):this.#ki(),this.lastMouseEvent=null,this.lastMouseClickEvent=null};#Ii=()=>this.#Si.reduce((i,g)=>(i[g.pickingId]=g,i),{});#Li=(i,g,x,_,v)=>{const b=i.createCommandEncoder(),y=i.createBuffer({size:16*g*x,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"readPixelBuffer"}),S={texture:this.#yi,origin:{x:_,y:v,z:0}},w={buffer:y,bytesPerRow:Math.max(256,4*g*x),rowsPerImage:1},L={width:g,height:x,depthOrArrayLayers:1};return b.copyTextureToBuffer(S,w,L),i.queue.submit([b.finish()]),y};#Di=(i,g,x,_,v)=>{const b=v[i],y=this.lastMouseClickEvent?.type;if(y===Sr.CLICK){const v=new PickingEvent(i,g,x,b,_,y,this.lastMouseClickEvent);this.#Oi(y,v)}};#Ai=(i,g,x,_,v)=>{const b=v[i],y=this.lastMouseEvent?.type;if(y){const v=new PickingEvent(i,g,x,b,_,y,this.lastMouseEvent);switch(this.#Ri&&(v.movementX=g-this.#Ri.mouseX,v.movementY=x-this.#Ri.mouseY),y){case Sr.DOWN:case Sr.UP:this.#Oi(y,v);break;case Sr.MOVE:this.#Gi(i,b,v)}this.#Ri=v}};#Gi=(i,g,x)=>{const _=this.#Ri?.pickingId;_!==i?(this.#Ri&&_&&_!==i&&this.#ki(),this.#Ci!==g&&(this.#Oi(Sr.OVER,x),document.body.style.cursor="pointer"),this.#Ci=g):this.#Oi(Sr.MOVE,x)};#ki=()=>{this.#Ri&&this.#Oi(Sr.OUT,this.#Ri),this.#Ri=null,this.#Ci=null,document.body.style.cursor="default"};async#Ui(i){await i.mapAsync(GPUMapMode.READ);const g=new DataView(i.getMappedRange()),x="rgba8unorm"==this.#yi.format?[0,1,2,3]:[2,1,0,3],_=g.getUint8(x[0]),v=g.getUint8(x[1]),b=g.getUint8(x[2]);return(g.getUint8(x[3])<<24|b<<16|v<<8|_)>>>0}#Oi(i,g){g.target.events[i]&&g.target.events[i](g)}}Object.freeze(PickingManager);const Mr=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; var finalColor:vec4<f32>=vec4<f32>(0.0); #redgpu_if diffuseTexture finalColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); #redgpu_endIf let alpha2D=select(finalColor.a,1.0,systemUniforms.isView3D==1u); finalColor=vec4<f32>(finalColor.rgb * alpha2D,finalColor.a * uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (systemUniforms.isView3D==1 && finalColor.a==0.0) { discard; } output.color=finalColor; output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n};\n");class BitmapMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,g,x){super(i,"BITMAP_MATERIAL",Mr,2),x&&(this.name=x),this.diffuseTexture=g,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}xt.defineByPreset(BitmapMaterial,[xt.PRESET_TEXTURE.DIFFUSE_TEXTURE,xt.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(BitmapMaterial);const wr={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DIFFERENCE:6,EXCLUSION:7};const Rr=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { color:vec3<f32>, emissiveColor:vec3<f32>, emissiveStrength:f32, specularColor:vec3<f32>, specularStrength:f32, shininess:f32, aoStrength:f32, normalScale:f32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32, useSSR:u32, metallic:f32,\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\n@group(2) @binding(3) var alphaTextureSampler:sampler;\n@group(2) @binding(4) var alphaTexture:texture_2d<f32>;\n@group(2) @binding(5) var specularTextureSampler:sampler;\n@group(2) @binding(6) var specularTexture:texture_2d<f32>;\n@group(2) @binding(7) var emissiveTextureSampler:sampler;\n@group(2) @binding(8) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(9) var aoTextureSampler:sampler;\n@group(2) @binding(10) var aoTexture:texture_2d<f32>;\n@group(2) @binding(11) var normalTextureSampler:sampler;\n@group(2) @binding(12) var normalTexture:texture_2d<f32>;\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; let u_ambientLight=systemUniforms.ambientLight; let u_ambientLightColor=u_ambientLight.color; let u_ambientLightIntensity=u_ambientLight.intensity; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize; let u_bias=systemUniforms.bias; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_color=uniforms.color; let u_aoStrength=uniforms.aoStrength; let u_emissiveColor=uniforms.emissiveColor; let u_emissiveStrength=uniforms.emissiveStrength; let u_normalScale=uniforms.normalScale; let u_specularColor=uniforms.specularColor; let u_specularStrength=uniforms.specularStrength; let u_shininess=uniforms.shininess; let u_opacity=uniforms.opacity; let E=normalize(u_cameraPosition - inputData.vertexPosition); let receiveShadowYn=inputData.receiveShadow !=.0; var N=normalize(inputData.vertexNormal); #redgpu_if normalTexture let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,inputData.uv).rgb; N=perturb_normal( N,inputData.vertexPosition,inputData.uv,normalSamplerColor,u_normalScale ); #redgpu_endIf var finalColor:vec4<f32>; var resultAlpha:f32=u_opacity * inputData.combinedOpacity; var diffuseColor:vec3<f32>=u_color; #redgpu_if diffuseTexture let diffuseSampleColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); diffuseColor=diffuseSampleColor.rgb; resultAlpha=resultAlpha * diffuseSampleColor.a; #redgpu_endIf var specularSamplerValue:f32=1; #redgpu_if specularTexture specularSamplerValue=textureSample(specularTexture,specularTextureSampler,inputData.uv).r; #redgpu_endIf var mixColor:vec3<f32>; let ambientContribution=u_ambientLightColor * u_ambientLightIntensity; let ambientDiffuse=diffuseColor * ambientContribution; mixColor +=ambientDiffuse; var visibility:f32=1.0; visibility=calcDirectionalShadowVisibility( directionalShadowMap, directionalShadowMapSampler, u_shadowDepthTextureSize, u_bias, inputData.shadowPos, ); if(!receiveShadowYn){ visibility=1.0; } for (var i=0u;i < u_directionalLightCount;i=i + 1) { let u_directionalLightDirection=u_directionalLights[i].direction; let u_directionalLightColor=u_directionalLights[i].color; let u_directionalLightIntensity=u_directionalLights[i].intensity; let L=normalize(u_directionalLightDirection); let R=reflect(L,N); let lambertTerm=max(dot(N,-L),0.0); let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue; let lightContribution=u_directionalLightColor * u_directionalLightIntensity * visibility; let ld=diffuseColor * lightContribution * lambertTerm; let ls=u_specularColor * u_specularStrength * lightContribution * specular; mixColor +=ld + ls; } let clusterIndex=getClusterLightClusterIndex(inputData.position); let lightOffset=clusterLightGroup.lights[clusterIndex].offset; let lightCount:u32=clusterLightGroup.lights[clusterIndex].count; for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) { let i=clusterLightGroup.indices[lightOffset + lightIndex]; let u_clusterLightPosition=clusterLightList.lights[i].position; let u_clusterLightColor=clusterLightList.lights[i].color; let u_clusterLightIntensity=clusterLightList.lights[i].intensity; let u_clusterLightRadius=clusterLightList.lights[i].radius; let u_isSpotLight=clusterLightList.lights[i].isSpotLight; let lightDir=u_clusterLightPosition - inputData.vertexPosition; let lightDistance=length(lightDir); if (lightDistance > u_clusterLightRadius) { continue; } let L=normalize(lightDir); let dist2=max(dot(lightDir,lightDir),0.0001); let d=sqrt(dist2); let rangePart=pow(clamp(1.0 - d/u_clusterLightRadius,0.0,1.0),2.0); let invSquare=(u_clusterLightRadius * u_clusterLightRadius)/dist2; let attenuation=rangePart * invSquare; var finalAttenuation=attenuation; if (u_isSpotLight > 0.0) { let u_clusterLightDirection=normalize(vec3<f32>( clusterLightList.lights[i].directionX, clusterLightList.lights[i].directionY, clusterLightList.lights[i].directionZ )); let u_clusterLightInnerAngle=clusterLightList.lights[i].innerCutoff; let u_clusterLightOuterCutoff=clusterLightList.lights[i].outerCutoff; let lightToVertex=normalize(-lightDir); let cosTheta=dot(lightToVertex,u_clusterLightDirection); let cosOuter=cos(radians(u_clusterLightOuterCutoff)); let cosInner=cos(radians(u_clusterLightInnerAngle)); if (cosTheta < cosOuter) { continue; } let epsilon=cosInner - cosOuter; let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0); finalAttenuation *=spotIntensity; } let R=reflect(-L,N); let diffuse=diffuseColor * max(dot(N,L),0.0); let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue; let diffuseAttenuation=finalAttenuation; let specularAttenuation=finalAttenuation * finalAttenuation; let ld=u_clusterLightColor * diffuse * diffuseAttenuation * u_clusterLightIntensity; let ls=u_specularColor * u_specularStrength * specular * specularAttenuation * u_clusterLightIntensity; mixColor +=ld + ls; } #redgpu_if alphaTexture let alphaMapValue:f32=textureSample(alphaTexture,alphaTextureSampler,inputData.uv).r; resultAlpha=alphaMapValue * resultAlpha; if(resultAlpha==0){ discard;} #redgpu_endIf var emissiveColor=u_emissiveColor * u_emissiveStrength; #redgpu_if emissiveTexture emissiveColor=textureSample(emissiveTexture,emissiveTextureSampler,inputData.uv).rgb * u_emissiveStrength; #redgpu_endIf #redgpu_if aoTexture mixColor=mixColor * textureSample(aoTexture,aoTextureSampler,inputData.uv).rgb * u_aoStrength; #redgpu_endIf finalColor=vec4<f32>(mixColor + emissiveColor,resultAlpha); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (systemUniforms.isView3D==1 && finalColor.a==0.0) { discard; } output.color=finalColor; #redgpu_if useSSR { let roughness=sqrt(2.0/(uniforms.shininess + 2.0)); let metallic=uniforms.metallic; let F0_dielectric=vec3<f32>(0.04); let F0_metal=diffuseColor; let F0=mix(F0_dielectric,F0_metal,metallic); let reflectionStrength=mix(F0.r,1.0,metallic); output.gBufferNormal=vec4<f32>(normalize(N) * 0.5 + 0.5,reflectionStrength); } #redgpu_endIf output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n}\n");class PhongMaterial extends ABitmapBaseMaterial{#Ni;#Vi=1;constructor(i,g="#fff",x){super(i,"PHONG_MATERIAL",Rr,2),x&&(this.name=x),this.initGPURenderInfos(),this.color.setColorByHEX(g),this.emissiveColor.setColorByHEX(this.emissiveColor.hex),this.specularColor.setColorByHEX(this.specularColor.hex)}get displacementScale(){return this.#Vi}set displacementScale(i){this.#Vi=i}get displacementTexture(){return this.#Ni}set displacementTexture(i){const g=this.#Ni;this.#Ni=i,this.updateTexture(g,i),this.dirtyPipeline=!0}}xt.defineByPreset(PhongMaterial,[xt.PRESET_COLOR_RGB.COLOR,xt.PRESET_TEXTURE.ALPHA_TEXTURE,xt.PRESET_SAMPLER.ALPHA_TEXTURE_SAMPLER,xt.PRESET_TEXTURE.AO_TEXTURE,xt.PRESET_SAMPLER.AO_TEXTURE_SAMPLER,xt.PRESET_POSITIVE_NUMBER.AO_STRENGTH,xt.PRESET_TEXTURE.DIFFUSE_TEXTURE,xt.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER,xt.PRESET_TEXTURE.EMISSIVE_TEXTURE,xt.PRESET_SAMPLER.EMISSIVE_TEXTURE_SAMPLER,xt.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,[xt.PRESET_COLOR_RGB.EMISSIVE_COLOR,"#000000"],xt.PRESET_TEXTURE.NORMAL_TEXTURE,xt.PRESET_SAMPLER.NORMAL_TEXTURE_SAMPLER,xt.PRESET_POSITIVE_NUMBER.NORMAL_SCALE,xt.PRESET_TEXTURE.SPECULAR_TEXTURE,xt.PRESET_SAMPLER.SPECULAR_TEXTURE_SAMPLER,xt.PRESET_POSITIVE_NUMBER.SPECULAR_STRENGTH,[xt.PRESET_COLOR_RGB.SPECULAR_COLOR,"#ffffff"],[xt.PRESET_POSITIVE_NUMBER.SHININESS,32]]),xt.defineBoolean(PhongMaterial,[["useSSR",!1]]),xt.definePositiveNumber(PhongMaterial,[["metallic",0,0,1]]),Object.freeze(PhongMaterial);var Cr=Object.freeze({__proto__:null,ABaseMaterial:ABaseMaterial,ABitmapBaseMaterial:ABitmapBaseMaterial,BLEND_MODE:wr,BitmapMaterial:BitmapMaterial,COMPOSITE_MODE:{ADDITIVE:"additive",SOURCE_OVER:"source-over",SOURCE_IN:"source-in",SOURCE_OUT:"source-out",SOURCE_ATOP:"source-atop",DESTINATION_OVER:"destination-over",DESTINATION_IN:"destination-in",DESTINATION_OUT:"destination-out",DESTINATION_ATOP:"destination-atop"},ColorMaterial:ColorMaterial,PhongMaterial:PhongMaterial,TINT_BLEND_MODE:bn,getComputeBindGroupLayoutDescriptorFromShaderInfo:getComputeBindGroupLayoutDescriptorFromShaderInfo,getFragmentBindGroupLayoutDescriptorFromShaderInfo:getFragmentBindGroupLayoutDescriptorFromShaderInfo,getVertexBindGroupLayoutDescriptorFromShaderInfo:getVertexBindGroupLayoutDescriptorFromShaderInfo});class ASinglePassPostEffect{#Fi;#Hi;#zi;#$i;#Ki;#Xi;#Wi;#ji;#Yi;#qi;#Zi;#Ji;#Qi;#a;#ea;#ta;#na;#ra;#ia;#aa=16;#sa=16;#oa=1;#ua=!1;#b;#la;#ca=[];#Mt=0;constructor(i){this.#b=i,this.#la=i.antialiasingManager}get videoMemorySize(){return this.#Mt}get useDepthTexture(){return this.#ua}set useDepthTexture(i){this.#ua=i}get redGPUContext(){return this.#b}get storageInfo(){return this.#Qi}get shaderInfo(){Gn(this);return this.#la.useMSAA?this.#ea:this.#ta}get uniformBuffer(){return this.#qi}get uniformsInfo(){return this.#Zi}get systemUuniformsInfo(){return this.#Ji}get WORK_SIZE_X(){return this.#aa}set WORK_SIZE_X(i){this.#aa=i}get WORK_SIZE_Y(){return this.#sa}set WORK_SIZE_Y(i){this.#sa=i}get WORK_SIZE_Z(){return this.#oa}set WORK_SIZE_Z(i){this.#oa=i}get outputTextureView(){return this.#ia}clear(){this.#ra&&(this.#ra.destroy(),this.#ra=null,this.#ia=null)}init(i,g,x,_){this.#a=g;const{resourceManager:v}=i;this.#Fi=v.createGPUShaderModule(`${g}_MSAA`,{code:x.msaa}),this.#Hi=v.createGPUShaderModule(`${g}_NonMSAA`,{code:x.nonMsaa}),this.#ea=parseWGSL(x.msaa),this.#ta=parseWGSL(x.nonMsaa);const b=this.#ea.storage,y=this.#ea.uniforms;if(this.#Qi=b,this.#Zi=y.uniforms,this.#Ji=y.systemUniforms,this.#Zi){const g=new ArrayBuffer(this.#Zi.arrayBufferByteLength);this.#qi=new UniformBuffer(i,g,`${this.constructor.name}_UniformBuffer`)}}execute(i,g,x){const _=i.createCommandEncoder(),v=_.beginComputePass();v.setPipeline(this.#Yi),v.setBindGroup(0,this.#Ki),v.setBindGroup(1,this.#Xi),v.dispatchWorkgroups(Math.ceil(g/this.WORK_SIZE_X),Math.ceil(x/this.WORK_SIZE_Y)),v.end(),i.queue.submit([_.finish()])}render(i,g,x,..._){const{gpuDevice:v,antialiasingManager:b}=this.#b,{useMSAA:y}=b,S=this.#ha(i),w=b.changedMSAA,L=this.#fa(_),k=this.outputTextureView,{redGPUContext:H}=i;return(S||w||L)&&this.#da(i,_,k,y,H,v),this.update(performance.now()),this.execute(v,g,x),{texture:this.#ra,textureView:k}}#da(i,g,x,_,v,b){const y=this.storageInfo,S=this.uniformsInfo,w=this.systemUuniformsInfo;this.#Wi=[],this.#ji=[];for(const i in y){const x=y[i],{binding:_,name:v}=x;"outputTexture"!==v&&this.#Wi.push({binding:_,resource:g[_].textureView})}this.#ji.push({binding:0,resource:x}),this.shaderInfo.textures.forEach(g=>{const{name:x,binding:_}=g;"depthTexture"===x&&this.#Wi.push({binding:_,resource:i.viewRenderTextureManager.depthTextureView}),"gBufferNormalTexture"===x&&this.#Wi.push({binding:_,resource:i.redGPUContext.antialiasingManager.useMSAA?i.viewRenderTextureManager.gBufferNormalResolveTextureView:i.viewRenderTextureManager.gBufferNormalTextureView})}),w&&this.#ji.push({binding:w.binding,resource:{buffer:i.postEffectManager.postEffectSystemUniformBuffer.gpuBuffer,offset:0,size:i.postEffectManager.postEffectSystemUniformBuffer.size}}),this.#qi&&S&&this.#ji.push({binding:S.binding,resource:{buffer:this.#qi.gpuBuffer,offset:0,size:this.#qi.size}});const L=_?this.#ea:this.#ta,k=_?this.#Fi:this.#Hi;this.#zi=v.resourceManager.getGPUBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_0_USE_MSAA_${_}`)||v.resourceManager.createBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_0_USE_MSAA_${_}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(L,0,_)),this.#$i=v.resourceManager.getGPUBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_1_USE_MSAA_${_}`)||v.resourceManager.createBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_1_USE_MSAA_${_}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(L,1,_)),this.#Ki=b.createBindGroup({label:`${this.#a}_BIND_GROUP_0_USE_MSAA_${_}`,layout:this.#zi,entries:this.#Wi}),this.#Xi=b.createBindGroup({label:`${this.#a}_BIND_GROUP_1_USE_MSAA_${_}`,layout:this.#$i,entries:this.#ji}),this.#Yi=b.createComputePipeline({label:`${this.#a}_COMPUTE_PIPELINE_USE_MSAA_${_}`,layout:b.createPipelineLayout({bindGroupLayouts:[this.#zi,this.#$i]}),compute:{module:k,entryPoint:"main"}}),this.#ma(g)}update(i){}updateUniform(i,g){this.uniformBuffer.writeBuffer(this.uniformsInfo.members[i],g)}#Bi(){this.#Mt=0,this.#ra&&(this.#Mt=calculateTextureByteSize(this.#ra))}#fa(i){if(!this.#ca||this.#ca.length!==i.length)return!0;for(let g=0;g<i.length;g++)if(this.#ca[g].textureView!==i[g].textureView)return!0;return!1}#ma(i){this.#ca=[...i]}#ha(i){const{redGPUContext:g,viewRenderTextureManager:x,name:_}=i,{gBufferColorTexture:v}=x,{resourceManager:b}=g,{width:y,height:S}=v,w=y!==this.#na?.width||S!==this.#na?.height||!this.#ra;return w&&(this.clear(),this.#ra=b.createManagedTexture({size:{width:y,height:S},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC,label:`${_}_${this.#a}_${y}x${S}}`}),this.#ia=b.getGPUResourceBitmapTextureView(this.#ra)),this.#na={width:y,height:S},this.#Bi(),w}}Object.freeze(ASinglePassPostEffect);var Pr="struct Camera { cameraMatrix:mat4x4<f32>, inverseCameraMatrix:mat4x4<f32>, cameraPosition:vec3<f32>, nearClipping:f32, farClipping:f32, fieldOfView:f32\n};\nstruct SystemUniform { projectionMatrix:mat4x4<f32>, inverseProjectionMatrix:mat4x4<f32>, projectionCameraMatrix:mat4x4<f32>, inverseProjectionCameraMatrix:mat4x4<f32>, camera:Camera,\n};\n@group(1) @binding(1) var<uniform> systemUniforms:SystemUniform;\n";const createCode=(i,g,x="",_=!1)=>{const{WORK_SIZE_X:v,WORK_SIZE_Y:b,WORK_SIZE_Z:y}=i,S=_?"texture_depth_multisampled_2d":"texture_depth_2d";return`\n ${x} @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; ${i.useDepthTexture?`@group(0) @binding(1) var depthTexture:${S}`:""};  @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; ${Pr} ${x?"@group(1) @binding(2) var<uniform> uniforms:Uniforms;":""} @compute @workgroup_size(${v},${b},${y}) fn main (  @builtin(global_invocation_id) global_id:vec3<u32>, ){ ${g} } `},createBasicPostEffectCode=(i,g,x="")=>({msaa:createCode(i,g,x,!0),nonMsaa:createCode(i,g,x,!1)});Object.freeze(createBasicPostEffectCode);class FXAA extends ASinglePassPostEffect{#pa=.75;#ga=.166;#xa=.0833;constructor(i){super(i);this.init(i,"POST_EFFECT_FXAA",createBasicPostEffectCode(this,"\nlet index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\n\nvar colorC=textureLoad(sourceTexture,index);\nvar colorN=textureLoad(sourceTexture,vec2<u32>(index.x,u32(max(i32(index.y) - 1,0))));\nvar colorS=textureLoad(sourceTexture,vec2<u32>(index.x,u32(min(i32(index.y) + 1,i32(dimH - 1)))));\nvar colorW=textureLoad(sourceTexture,vec2<u32>(u32(max(i32(index.x) - 1,0)),index.y));\nvar colorE=textureLoad(sourceTexture,vec2<u32>(u32(min(i32(index.x) + 1,i32(dimW - 1))),index.y));\n\nlet lumaC=dot(colorC.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaN=dot(colorN.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaS=dot(colorS.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaW=dot(colorW.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaE=dot(colorE.rgb,vec3<f32>(0.299,0.587,0.114));\n\nlet lumaMin=min(lumaC,min(min(lumaN,lumaS),min(lumaW,lumaE)));\nlet lumaMax=max(lumaC,max(max(lumaN,lumaS),max(lumaW,lumaE)));\nlet range=lumaMax - lumaMin;\n\nlet edgeThreshold=uniforms.edgeThreshold;\nlet edgeThresholdMin=uniforms.edgeThresholdMin;\nlet subpix=uniforms.subpix;\n\nif (range < edgeThresholdMin) {\ntextureStore(outputTexture,index,colorC);\nreturn;\n}\n\nlet blurredColor=(colorN.rgb + colorS.rgb + colorW.rgb + colorE.rgb + colorC.rgb) * 0.2;\n\nlet blendAmount=min(1.0,range * 50.0 + 0.5) * subpix;\n\nlet finalColor=mix(colorC.rgb,blurredColor,blendAmount);\n\ntextureStore(outputTexture,index,vec4<f32>(finalColor,colorC.a));\n","\nstruct Uniforms { subpix:f32, edgeThreshold:f32, edgeThresholdMin:f32 \n};\n")),this.subpix=this.#pa,this.edgeThreshold=this.#ga,this.edgeThresholdMin=this.#xa}get subpix(){return this.#pa}set subpix(i){validateNumberRange(i,0,1),this.#pa=i,this.updateUniform("subpix",i)}get edgeThreshold(){return this.#ga}set edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#ga=i,this.updateUniform("edgeThreshold",i)}get edgeThresholdMin(){return this.#xa}set edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#xa=i,this.updateUniform("edgeThresholdMin",i)}}Object.freeze(FXAA);class PostEffectManager{#ci;#_a=[];#va;#ba;#ya;#zt=16;#$t=4;#Ta=1;#Sa;#Ma;#wa;#Ra;#Ca;#Pa;#Ba;#Mt=0;constructor(i){this.#ci=i,this.#Ea()}get postEffectSystemUniformBuffer(){return this.#Pa}get view(){return this.#ci}get effectList(){return this.#_a}get videoMemorySize(){return this.#Bi(),this.#Mt}addEffect(i){this.#_a.push(i)}addEffectAt(i){}getEffectAt(i){return this.#_a[i]}removeEffect(i){}removeEffectAt(i){}removeAllEffect(){this.#_a.forEach(i=>{i.clear()}),this.#_a.length=0}render(){const{viewRenderTextureManager:i,redGPUContext:g,taa:x,fxaa:_}=this.#ci,{antialiasingManager:v}=g,{useMSAA:b,useFXAA:y,useTAA:S}=v,{gBufferColorTextureView:w,gBufferColorResolveTextureView:L,gBufferColorTexture:k}=i,{width:H,height:z}=k;this.#Ia();const W=b?L:w;this.#ba=this.#La(this.#ci,W);let q={texture:this.#va,textureView:this.#ba};return this.#_a.forEach(i=>{q=i.render(this.#ci,H,z,q)}),y&&(q=_.render(this.#ci,H,z,q)),S&&(q=x.render(this.#ci,H,z,q)),q}clear(){this.#_a.forEach(i=>{i.clear()})}#Ia(){const{inverseProjectionMatrix:i,projectionMatrix:g,rawCamera:x,redGPUContext:_,scene:v}=this.#ci,{gpuDevice:b}=_,{modelMatrix:y,position:S}=x,w=this.#Ba,L=this.#Pa.gpuBuffer,k=x instanceof Camera2D,H=multiply(Br,g,y);[{key:"projectionMatrix",value:g},{key:"projectionCameraMatrix",value:H},{key:"inverseProjectionMatrix",value:i},{key:"inverseProjectionCameraMatrix",value:invert(Er,H)}].forEach(({key:i,value:g})=>{b.queue.writeBuffer(L,w.members[i].uniformOffset,new w.members[i].View(g))}),[{key:"cameraMatrix",value:y},{key:"inverseCameraMatrix",value:invert(Er,y)},{key:"cameraPosition",value:S},{key:"nearClipping",value:[k?0:x.nearClipping]},{key:"farClipping",value:[k?0:x.farClipping]},{key:"fieldOfView",value:x.fieldOfView*Math.PI/180}].forEach(({key:i,value:g})=>{b.queue.writeBuffer(L,w.members.camera.members[i].uniformOffset,new w.members.camera.members[i].View(g))})}#Ea(){const{redGPUContext:i}=this.#ci,{gpuDevice:g,resourceManager:x}=i,_=this.#Ua();this.#Sa=x.createGPUShaderModule("POST_EFFECT_TEXTURE_COPY_COMPUTE_SHADER",{code:_}),this.#wa=this.#Da(i),this.#Ra=this.#Aa(g,this.#Sa,this.#wa);const v=parseWGSL(Pr).uniforms.systemUniforms,b=new ArrayBuffer(v.arrayBufferByteLength);this.#Ba=v,this.#Pa=new UniformBuffer(i,b,`${this.#ci.name}_POST_EFFECT_SYSTEM_UNIFORM_BUFFER`)}#Bi(){const i=this.#va;if(!i)return 0;this.#Mt=calculateTextureByteSize(i),this.#_a.forEach(i=>{this.#Mt+=i.videoMemorySize})}#La(i,g){const{redGPUContext:x,viewRenderTextureManager:_}=i,{gBufferColorTexture:v}=_,{gpuDevice:b,antialiasingManager:y,resourceManager:S}=x,{useMSAA:w,changedMSAA:L}=y,{width:k,height:H}=v,z=k!==this.#Ca?.width||H!==this.#Ca?.height;return z&&(this.#va&&(this.#va.destroy(),this.#va=null),this.#va=this.#ka(b,k,H),this.#ya=S.getGPUResourceBitmapTextureView(this.#va)),(z||L)&&(this.#Ma=this.#Oa(x,this.#wa,g,this.#ya)),this.#Ca={width:k,height:H},this.#Ga(b,this.#Ra,this.#Ma,k,H),this.#ya}#Ua(){return`\n\t @group(0) @binding(0) var sourceTextureSampler:sampler; @group(0) @binding(1) var sourceTexture:texture_2d<f32>; @group(0) @binding(2) var outputTexture:texture_storage_2d<rgba8unorm,write>;  @compute @workgroup_size(${this.#zt},${this.#$t},${this.#Ta}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy ); let dimensions:vec2<u32>=textureDimensions(sourceTexture); let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let uv=\tvec2<f32>((f32(index.x)+0.5)/dimW,(f32(index.y)+0.5)/dimH); var color:vec4<f32>=textureSampleLevel( sourceTexture, sourceTextureSampler, uv, 0 );  textureStore(outputTexture,index,color ); }; `}#Da(i){return i.resourceManager.createBindGroupLayout(`${this.#ci.name}_POST_EFFECT_TEXTURE_COPY_BIND_GROUP_LAYOUT`,{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#ka(i,g,x){return this.#ci.redGPUContext.resourceManager.createManagedTexture({size:{width:g,height:x},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC,label:`${this.#ci.name}_POST_EFFECT_STORAGE_TEXTURE_${g}x${x}`})}#Oa(i,g,x,_){const v=Date.now();return i.gpuDevice.createBindGroup({label:`${this.#ci.name}_POST_EFFECT_TEXTURE_COPY_BIND_GROUP_${v}`,layout:g,entries:[{binding:0,resource:new Sampler(i).gpuSampler},{binding:1,resource:x},{binding:2,resource:_}]})}#Aa(i,g,x){return i.createComputePipeline({label:"POST_EFFECT_TEXTURE_COPY_COMPUTE_PIPELINE",layout:i.createPipelineLayout({label:"POST_EFFECT_TEXTURE_COPY_PIPELINE_LAYOUT",bindGroupLayouts:[x]}),compute:{module:g,entryPoint:"main"}})}#Ga(i,g,x,_,v){const b=i.createCommandEncoder({label:"POST_EFFECT_TEXTURE_COPY_COMMAND_ENCODER"}),y=b.beginComputePass({label:"POST_EFFECT_TEXTURE_COPY_COMPUTE_PASS"});y.setPipeline(g),y.setBindGroup(0,x),y.dispatchWorkgroups(Math.ceil(_/this.#zt),Math.ceil(v/this.#$t)),y.end(),i.queue.submit([b.finish()])}}let Br=create$2(),Er=create$2();Object.freeze(PostEffectManager);class TAA{#b;#la;#Fi;#Hi;#zi;#$i;#Yi;#qi;#Zi;#Ji;#Qi;#a;#ea;#ta;#na;#Na=new Map;#Va=new Map;#Fa=new Map;#Ha=null;#za;#$a;#Ka;#Xa;#Wa;#ja;#aa=8;#sa=8;#oa=1;#ca=[];#Mt=0;#Ya=0;#qa=.5;#Za=.08;#Ja=!0;#Qa=!0;#es=.8;#ts=.1;constructor(i){this.#b=i,this.#la=i.antialiasingManager;const g=this.#ns();this.#Ea(i,"POST_EFFECT_TAA",{msaa:g.msaa,nonMsaa:g.nonMsaa}),this.temporalBlendFactor=this.#Za,this.jitterStrength=this.#qa,this.varianceClipping=this.#Ja,this.useMotionVectors=this.#Qa,this.motionBlurReduction=this.#es,this.disocclusionThreshold=this.#ts}#ns(){const createCode=i=>` struct Uniforms { temporalBlendFactor:f32, motionThreshold:f32, colorBoxSize:f32, jitterStrength:f32, varianceClipping:f32, frameIndex:f32, currentFrameSliceIndex:f32, useMotionVectors:f32, motionBlurReduction:f32, disocclusionThreshold:f32,\n}; fn haltonSequence(index:f32,base:f32) -> f32 { var result:f32=0.0; var fraction:f32=1.0/base; var i:f32=index; for (var iter=0;iter < 10 && i > 0.0;iter++) { result +=(i % base) * fraction; i=floor(i/base); fraction/=base; } return result; }\n  @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var previousFrameTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(2) var motionVectorTexture:texture_2d<f32>;  @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; ${Pr} @group(1) @binding(2) var<uniform> uniforms:Uniforms;  @compute @workgroup_size(${this.#aa},${this.#sa},${this.#oa}) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) { { let pixelCoord=vec2<u32>(global_id.xy); let screenSize=vec2<f32>(textureDimensions(sourceTexture)); if (any(pixelCoord >=vec2<u32>(screenSize))) { return; } let currentColorWithAlpha=textureLoad(sourceTexture,pixelCoord); let currentColor=currentColorWithAlpha.rgb; let currentAlpha=currentColorWithAlpha.a; let motionData=textureLoad(motionVectorTexture,pixelCoord,0); let motionVector=motionData.xy; let jitterDisabled=motionData.z > 0.5; if (jitterDisabled) { textureStore(outputTexture,pixelCoord,vec4<f32>(currentColor,currentAlpha)); return; } if (uniforms.frameIndex < 3.0) { textureStore(outputTexture,pixelCoord,vec4<f32>(currentColor,currentAlpha)); return; } if (uniforms.useMotionVectors < 0.5) { let historyColorWithAlpha=textureLoad(previousFrameTexture,pixelCoord); let historyColor=historyColorWithAlpha.rgb; let historyAlpha=historyColorWithAlpha.a; let blendWeight=clamp(uniforms.temporalBlendFactor,0.05,0.8); let blendedResult=mix(historyColor,currentColor,blendWeight); let blendedAlpha=mix(historyAlpha,currentAlpha,blendWeight); textureStore(outputTexture,pixelCoord,vec4<f32>(blendedResult,blendedAlpha)); return; } let motionMagnitude=length(motionVector); let staticThreshold=0.5; let motionTransition=smoothstep(0.2,1.0,motionMagnitude); let isStaticPixel=motionMagnitude < staticThreshold; let currentLuma=dot(currentColor,vec3<f32>(0.2126,0.7152,0.0722)); let isLowLuma=currentLuma < 0.1; let isHighLuma=currentLuma > 0.9; let isThinDetail=isLowLuma || isHighLuma; let currentWorldPos=vec2<f32>(pixelCoord) + vec2<f32>(0.5); let historyWorldPos=currentWorldPos - motionVector; if (any(historyWorldPos < vec2<f32>(0.5)) || any(historyWorldPos >=screenSize - vec2<f32>(0.5))) { textureStore(outputTexture,pixelCoord,vec4<f32>(currentColor,currentAlpha)); return; } let motionBlurWeight=smoothstep(0.5,8.0,motionMagnitude) * uniforms.motionBlurReduction; let samplePos=historyWorldPos - vec2<f32>(0.5); let floorPos=floor(samplePos); let fracPos=samplePos - floorPos; let baseCoord=vec2<u32>(floorPos); let historyTLWithAlpha=textureLoad(previousFrameTexture,baseCoord); let historyTRWithAlpha=textureLoad(previousFrameTexture,baseCoord + vec2<u32>(1,0)); let historyBLWithAlpha=textureLoad(previousFrameTexture,baseCoord + vec2<u32>(0,1)); let historyBRWithAlpha=textureLoad(previousFrameTexture,baseCoord + vec2<u32>(1,1)); let historyTL=historyTLWithAlpha.rgb; let historyTR=historyTRWithAlpha.rgb; let historyBL=historyBLWithAlpha.rgb; let historyBR=historyBRWithAlpha.rgb; let historyAlphaTL=historyTLWithAlpha.a; let historyAlphaTR=historyTRWithAlpha.a; let historyAlphaBL=historyBLWithAlpha.a; let historyAlphaBR=historyBRWithAlpha.a; let historyTop=mix(historyTL,historyTR,fracPos.x); let historyBottom=mix(historyBL,historyBR,fracPos.x); let historySample=mix(historyTop,historyBottom,fracPos.y); let historyAlphaTop=mix(historyAlphaTL,historyAlphaTR,fracPos.x); let historyAlphaBottom=mix(historyAlphaBL,historyAlphaBR,fracPos.x); let historySampleAlpha=mix(historyAlphaTop,historyAlphaBottom,fracPos.y); let neighborNWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord + vec2<u32>(0,1),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborSWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord - vec2<u32>(0,1),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborEWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord + vec2<u32>(1,0),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborWWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord - vec2<u32>(1,0),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborN=neighborNWithAlpha.rgb; let neighborS=neighborSWithAlpha.rgb; let neighborE=neighborEWithAlpha.rgb; let neighborW=neighborWWithAlpha.rgb; let neighborAlphaN=neighborNWithAlpha.a; let neighborAlphaS=neighborSWithAlpha.a; let neighborAlphaE=neighborEWithAlpha.a; let neighborAlphaW=neighborWWithAlpha.a; let coordX=i32(pixelCoord.x); let coordY=i32(pixelCoord.y); let screenX=i32(screenSize.x); let screenY=i32(screenSize.y); let neighborNEWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX + 1,0,screenX - 1)),u32(clamp(coordY + 1,0,screenY - 1)))); let neighborNWWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX - 1,0,screenX - 1)),u32(clamp(coordY + 1,0,screenY - 1)))); let neighborSEWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX + 1,0,screenX - 1)),u32(clamp(coordY - 1,0,screenY - 1)))); let neighborSWWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX - 1,0,screenX - 1)),u32(clamp(coordY - 1,0,screenY - 1)))); let neighborNE=neighborNEWithAlpha.rgb; let neighborNW=neighborNWWithAlpha.rgb; let neighborSE=neighborSEWithAlpha.rgb; let neighborSW=neighborSWWithAlpha.rgb; let neighborAlphaNE=neighborNEWithAlpha.a; let neighborAlphaNW=neighborNWWithAlpha.a; let neighborAlphaSE=neighborSEWithAlpha.a; let neighborAlphaSW=neighborSWWithAlpha.a; var neighborMin=min(min(min(currentColor,neighborN),min(neighborS,neighborE)), min(neighborW,min(min(neighborNE,neighborNW),min(neighborSE,neighborSW)))); var neighborMax=max(max(max(currentColor,neighborN),max(neighborS,neighborE)), max(neighborW,max(max(neighborNE,neighborNW),max(neighborSE,neighborSW)))); var neighborMinAlpha=min(min(min(currentAlpha,neighborAlphaN),min(neighborAlphaS,neighborAlphaE)), min(neighborAlphaW,min(min(neighborAlphaNE,neighborAlphaNW),min(neighborAlphaSE,neighborAlphaSW)))); var neighborMaxAlpha=max(max(max(currentAlpha,neighborAlphaN),max(neighborAlphaS,neighborAlphaE)), max(neighborAlphaW,max(max(neighborAlphaNE,neighborAlphaNW),max(neighborAlphaSE,neighborAlphaSW)))); let basicClampedHistory=clamp(historySample,neighborMin,neighborMax); let basicClampedHistoryAlpha=clamp(historySampleAlpha,neighborMinAlpha,neighborMaxAlpha); let colorRange=neighborMax - neighborMin; let alphaRange=neighborMaxAlpha - neighborMinAlpha; let baseExpansion=select(0.1,0.3,isThinDetail); let motionExpansion=clamp(motionMagnitude/10.0,0.0,0.2); let staticExpansion=select(baseExpansion + motionExpansion,baseExpansion * 0.5,isStaticPixel); let expandedMin=neighborMin - colorRange * staticExpansion; let expandedMax=neighborMax + colorRange * staticExpansion; let finalClampedHistory=clamp(basicClampedHistory,expandedMin,expandedMax); let expandedMinAlpha=neighborMinAlpha - alphaRange * staticExpansion; let expandedMaxAlpha=neighborMaxAlpha + alphaRange * staticExpansion; let finalClampedHistoryAlpha=clamp(basicClampedHistoryAlpha,expandedMinAlpha,expandedMaxAlpha); let lumaCoeffs=vec3<f32>(0.2126,0.7152,0.0722); let historyLuma=dot(finalClampedHistory,lumaCoeffs); let lumaDifference=abs(historyLuma - currentLuma); let colorDistance=length(currentColor - finalClampedHistory); let neighborLumaN=dot(neighborN,lumaCoeffs); let neighborLumaS=dot(neighborS,lumaCoeffs); let neighborLumaE=dot(neighborE,lumaCoeffs); let neighborLumaW=dot(neighborW,lumaCoeffs); let neighborLumaNE=dot(neighborNE,lumaCoeffs); let neighborLumaNW=dot(neighborNW,lumaCoeffs); let neighborLumaSE=dot(neighborSE,lumaCoeffs); let neighborLumaSW=dot(neighborSW,lumaCoeffs); let maxNeighborLumaDiff=max( max(max(abs(currentLuma - neighborLumaN),abs(currentLuma - neighborLumaS)), max(abs(currentLuma - neighborLumaE),abs(currentLuma - neighborLumaW))), max(max(abs(currentLuma - neighborLumaNE),abs(currentLuma - neighborLumaNW)), max(abs(currentLuma - neighborLumaSE),abs(currentLuma - neighborLumaSW))) ); let maxNeighborColorDist=max( max(max(length(currentColor - neighborN),length(currentColor - neighborS)), max(length(currentColor - neighborE),length(currentColor - neighborW))), max(max(length(currentColor - neighborNE),length(currentColor - neighborNW)), max(length(currentColor - neighborSE),length(currentColor - neighborSW))) ); let highLumaContrast=smoothstep(0.1,0.4,max(lumaDifference,maxNeighborLumaDiff * 0.6)); let highColorContrast=smoothstep(0.15,0.6,max(colorDistance,maxNeighborColorDist * 0.6)); let overallContrast=max(highLumaContrast,highColorContrast * 0.8); let thinDetailWithHighContrast=isThinDetail && (overallContrast > 0.3); let baseRejectionThresh=select(0.05,0.15,isThinDetail); let motionScale=clamp(motionMagnitude/2.0,0.1,1.0); let smoothRejectionScale=select( mix(2.5,1.0,motionTransition), select(1.0,10.0,isStaticPixel), isThinDetail ); let finalRejectionThresh=baseRejectionThresh * smoothRejectionScale; let historyRejection=smoothstep(finalRejectionThresh * 0.2,finalRejectionThresh,max(lumaDifference,colorDistance)); let motionRejection=smoothstep(0.5,4.0,motionMagnitude); let baseBlendFactor=uniforms.temporalBlendFactor; let thinDetailBlendFactor=select(baseBlendFactor,0.05,isThinDetail); let generalContrastBlend=mix(baseBlendFactor,0.35,overallContrast * 0.7); let thinDetailContrastBlend=select( thinDetailBlendFactor, mix(thinDetailBlendFactor,0.25,overallContrast), thinDetailWithHighContrast ); let contrastBlendFactor=select(generalContrastBlend,thinDetailContrastBlend,isThinDetail); let smoothStaticBlend=select( mix(0.08,contrastBlendFactor,motionTransition), select(contrastBlendFactor,0.01,isStaticPixel), isThinDetail ); let motionAdjustedBlend=mix( smoothStaticBlend, min(smoothStaticBlend + motionBlurWeight * 0.2,0.8), motionBlurWeight ); let maxRejection=max(historyRejection,motionRejection); let finalBlendFactor=mix(motionAdjustedBlend,0.75,maxRejection); let primaryBlend=mix(vec4<f32>(finalClampedHistory,finalClampedHistoryAlpha),vec4<f32>(currentColor,currentAlpha),finalBlendFactor); let fallbackBlend=mix(vec4<f32>(basicClampedHistory,basicClampedHistoryAlpha),vec4<f32>(currentColor,currentAlpha),0.04); let fallbackWeight=clamp(pow(1.0 - motionTransition,2.0) * 0.5,0.0,1.0); let contrastWeight=clamp(pow(thinDetailContrastBlend,2.0) + pow(generalContrastBlend,2.0) * 0.5,0.0,1.0); let motionBasedBlend=mix(primaryBlend,fallbackBlend,fallbackWeight); let contrastBasedBlend=mix(vec4<f32>(finalClampedHistory,finalClampedHistoryAlpha),fallbackBlend,0.01); let finalOutputColor=mix(motionBasedBlend,contrastBasedBlend,contrastWeight); textureStore(outputTexture,pixelCoord,finalOutputColor);\n}\n } `;return{msaa:createCode(),nonMsaa:createCode()}}#Ea(i,g,x){this.#a=g;const{resourceManager:_}=i;this.#Fi=_.createGPUShaderModule(`${g}_MSAA`,{code:x.msaa}),this.#Hi=_.createGPUShaderModule(`${g}_NonMSAA`,{code:x.nonMsaa}),this.#ea=parseWGSL(x.msaa),this.#ta=parseWGSL(x.nonMsaa);const v=this.#ea.storage,b=this.#ea.uniforms;if(this.#Qi=v,this.#Zi=b.uniforms,this.#Ji=b.systemUniforms,this.#Zi){const g=new ArrayBuffer(this.#Zi.arrayBufferByteLength);this.#qi=new UniformBuffer(i,g,"TAA_UniformBuffer")}}#rs(i,g,x){const _=i.createCommandEncoder(),v=_.beginComputePass();v.setPipeline(this.#Yi),v.setBindGroup(0,this.#Wa),v.setBindGroup(1,this.#ja),v.dispatchWorkgroups(Math.ceil(g/this.#aa),Math.ceil(x/this.#sa)),v.end(),i.queue.submit([_.finish()])}#is;#as;render(i,g,x,_){const v=_.textureView;_.texture;const{gpuDevice:b,antialiasingManager:y}=this.#b,{useMSAA:S,msaaID:w}=y;this.#Ya++,this.#qi&&this.updateUniform("frameIndex",this.#Ya);const L=this.#ha(i),k=this.#is!==S||this.#as!==w,H=this.#fa([v]);(L||k||H)&&this.#ss(i,[v],S,this.#b,b),this.#rs(b,g,x);{const i=b.createCommandEncoder();i.copyTextureToTexture({texture:this.#za},{texture:this.#Ka},[g,x,1]),b.queue.submit([i.finish()])}return this.#Ya<=20||this.#Ya,this.#is=S,this.#as=w,{texture:this.#za,textureView:this.#$a}}#ss(i,g,x,_,v){const b=[],y=[];b.push({binding:0,resource:g[0]}),b.push({binding:1,resource:this.#Xa});const S=x?i.viewRenderTextureManager.gBufferMotionVectorResolveTextureView:i.viewRenderTextureManager.gBufferMotionVectorTextureView;b.push({binding:2,resource:S}),y.push({binding:0,resource:this.#$a}),this.#Ji&&y.push({binding:this.#Ji.binding,resource:{buffer:i.postEffectManager.postEffectSystemUniformBuffer.gpuBuffer,offset:0,size:i.postEffectManager.postEffectSystemUniformBuffer.size}}),this.#qi&&this.#Zi&&y.push({binding:this.#Zi.binding,resource:{buffer:this.#qi.gpuBuffer,offset:0,size:this.#qi.size}}),this.#da(b,y,x,_,v),this.#os(x,_,v)}#da(i,g,x,_,v){const b=x?this.#ea:this.#ta,y=`${this.#a}_BIND_GROUP_LAYOUT_0_USE_MSAA_${x}`,S=`${this.#a}_BIND_GROUP_LAYOUT_1_USE_MSAA_${x}`;if(!this.#Na.has(y)){const i=_.resourceManager.getGPUBindGroupLayout(y)||_.resourceManager.createBindGroupLayout(y,getComputeBindGroupLayoutDescriptorFromShaderInfo(b,0,x));this.#Na.set(y,i)}if(!this.#Na.has(S)){const i=_.resourceManager.getGPUBindGroupLayout(S)||_.resourceManager.createBindGroupLayout(S,getComputeBindGroupLayoutDescriptorFromShaderInfo(b,1,x));this.#Na.set(S,i)}this.#zi=this.#Na.get(y),this.#$i=this.#Na.get(S),this.#Wa=v.createBindGroup({label:`${this.#a}_FRAME_BIND_GROUP_0_USE_MSAA_${x}`,layout:this.#zi,entries:i}),this.#ja=v.createBindGroup({label:`${this.#a}_FRAME_BIND_GROUP_1_USE_MSAA_${x}`,layout:this.#$i,entries:g})}#os(i,g,x){const _=`${this.#a}_COMPUTE_PIPELINE_USE_MSAA_${i}`,v=`${this.#a}_PIPELINE_LAYOUT_USE_MSAA_${i}`;if(this.#Ha!==i||!this.#Fa.has(_)){if(!this.#Va.has(v)){const g=x.createPipelineLayout({label:`${this.#a}_PIPELINE_LAYOUT_USE_MSAA_${i}`,bindGroupLayouts:[this.#zi,this.#$i]});this.#Va.set(v,g)}const g=i?this.#Fi:this.#Hi,b=x.createComputePipeline({label:_,layout:this.#Va.get(v),compute:{module:g,entryPoint:"main"}});this.#Fa.set(_,b),this.#Ha=i}this.#Yi=this.#Fa.get(_)}#ha(i){const{redGPUContext:g,viewRenderTextureManager:x,name:_}=i,{gBufferColorTexture:v}=x,{resourceManager:b}=g,{width:y,height:S}=v,w=y!==this.#na?.width||S!==this.#na?.height||!this.#za||!this.#Ka||!this.#za;return w&&(Gn(`TAA 텍스처 재생성:${y}x${S},이전 프레임 히스토리 리셋`),this.#Ya=0,this.clear(),this.#za=b.createManagedTexture({size:{width:y,height:S},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,label:`${_}_${this.#a}_currentFrame_${y}x${S}`}),this.#$a=b.getGPUResourceBitmapTextureView(this.#za,{dimension:"2d",format:"rgba8unorm",label:`${this.#a}_currentFrame_View`}),this.#Ka=b.createManagedTexture({size:{width:y,height:S},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST,label:`${_}_${this.#a}_previousFrame_${y}x${S}`}),this.#Xa=b.getGPUResourceBitmapTextureView(this.#Ka,{dimension:"2d",format:"rgba8unorm",label:`${this.#a}_previousFrame`})),this.#na={width:y,height:S},this.#Bi(),w}clear(){this.#Ka&&(this.#Ka.destroy(),this.#Ka=null,this.#Xa=null),this.#za&&(this.#za.destroy(),this.#za=null,this.#$a=null),this.#Na.clear(),this.#Va.clear(),this.#Fa.clear(),this.#Ha=null}#Bi(){this.#Mt=0,this.#za&&(this.#Mt+=calculateTextureByteSize(this.#za)),this.#Ka&&(this.#Mt+=calculateTextureByteSize(this.#Ka))}#fa(i){if(!this.#ca||this.#ca.length!==i.length)return this.#ca=[...i],!0;for(let g=0;g<i.length;g++)if(this.#ca[g]!==i[g])return this.#ca=[...i],!0;return!1}updateUniform(i,g){this.#qi.writeBuffer(this.#Zi.members[i],g)}get frameIndex(){return this.#Ya}get videoMemorySize(){return this.#Mt}get currentFrameTextureView(){return this.#$a}get temporalBlendFactor(){return this.#Za}set temporalBlendFactor(i){validateNumberRange(i,0,1),this.#Za=i,this.updateUniform("temporalBlendFactor",i)}get jitterStrength(){return this.#qa}set jitterStrength(i){validateNumberRange(i,0,1),this.#qa=i,this.updateUniform("jitterStrength",i)}get varianceClipping(){return this.#Ja}set varianceClipping(i){this.#Ja=i,this.updateUniform("varianceClipping",i?1:0)}get useMotionVectors(){return this.#Qa}set useMotionVectors(i){this.#Qa=i,this.updateUniform("useMotionVectors",i?1:0)}get motionBlurReduction(){return this.#es}set motionBlurReduction(i){validateNumberRange(i,0,1),this.#es=i,this.updateUniform("motionBlurReduction",i)}get disocclusionThreshold(){return this.#ts}set disocclusionThreshold(i){validateNumberRange(i,.01,1),this.#ts=i,this.updateUniform("disocclusionThreshold",i)}}Object.freeze(TAA);class RenderViewStateData{useDistanceCulling;cullingDistanceSquared;distanceCulling;num3DGroups;num3DObjects;numDrawCalls;numDirtyPipelines;numInstances;numTriangles;numPoints;viewRenderTime;viewportSize;usedVideoMemory;currentRenderPassEncoder;timestamp;frustumPlanes;prevVertexGpuBuffer;prevFragmentUniformBindGroup;dirtyVertexUniformFromMaterial={};alphaLayer=[];transparentLayer=[];particleLayer=[];instanceMeshLayer=[];render2PathLayer=[];startTime;isScene2DMode=!1;#ci;constructor(i){this.#ci=i}get view(){return this.#ci}reset(i,g){if(!g||!this.#ci)throw new Error("Invalid parameters provided");const x=this.#ci,{useFrustumCulling:_,frustumPlanes:v,scene:b,postEffectManager:y,pickingManager:S,viewRenderTextureManager:w}=x,{gBufferColorTexture:L,depthTexture:k,gBufferColorResolveTexture:H,renderPath1ResultTexture:z}=x.viewRenderTextureManager,{shadowManager:W}=b;if(!L||!k)throw new Error("Invalid view properties");this.useDistanceCulling=x.useDistanceCulling,this.distanceCulling=x.distanceCulling,this.cullingDistanceSquared=this.distanceCulling*this.distanceCulling,this.num3DGroups=0,this.num3DObjects=0,this.numDrawCalls=0,this.numInstances=0,this.numDirtyPipelines=0,this.numTriangles=0,this.numPoints=0,this.viewRenderTime=0,this.currentRenderPassEncoder=i,this.timestamp=g,this.prevVertexGpuBuffer=null,this.prevFragmentUniformBindGroup=null,this.dirtyVertexUniformFromMaterial={},this.alphaLayer=[],this.transparentLayer=[],this.particleLayer=[],this.instanceMeshLayer=[],this.render2PathLayer=[],this.startTime=performance.now(),this.isScene2DMode=x.camera instanceof Camera2D,this.viewportSize={x:x.x,y:x.y,width:x.width,height:x.height,pixelRectArray:x.pixelRectArray};try{this.usedVideoMemory=w.videoMemorySize+W.directionalShadowManager.videoMemorySize+y.videoMemorySize+S.videoMemorySize}catch(i){throw new Error("Could not calculate texture size:"+i.message)}this.frustumPlanes=_?v:null}}class ResourceStateIndexBuffer{static dirtyList=[];buffer;label;uuid;#q=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#q}set useNum(i){this.#q=i,ResourceStateIndexBuffer.dirtyList.push(this)}}class IndexBuffer extends ABaseBuffer{[sn];#us=0;#nt=0;constructor(i,g,x=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,_=""){super(i,"managedIndexBufferState",x);const{table:v}=this.targetResourceManagedState,b=v.get(_);if(b)return b.buffer;_&&(this.name=_,this[on]=_),this.changeData(g),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateIndexBuffer(this))}get triangleCount(){return this.#nt}get indexNum(){return this.#us}changeData(i){const{gpuDevice:g}=this;if(Array.isArray(i)&&(i=new Uint32Array(i)),this[an]){this.targetResourceManagedState.videoMemory-=this[sn].byteLength||0;let i=this[an];requestAnimationFrame(()=>{i.destroy()}),this[an]=null}this[sn]=i,this.#us=i.length;const x={size:this[sn].byteLength,usage:this.usage,label:this.name};this[an]=g.createBuffer(x),this.targetResourceManagedState.videoMemory+=this[sn].byteLength||0,this.#nt=this.#us/3,g.queue.writeBuffer(this[an],0,this[sn])}}Object.freeze(IndexBuffer);class Primitive{#ls;#R;#C;#P;constructor(i){validateRedGPUContext(i)}static get primitiveInterleaveStruct(){return new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},"primitiveInterleaveStruct")}get gpuRenderInfo(){return this.#ls}get vertexBuffer(){return this.#R}get indexBuffer(){return this.#C}get volume(){return this.#P||(this.#P=calculateGeometryAABB(this.#R)),this.#P}_setData(i){if(this.#R=i.vertexBuffer,this.#C=i.indexBuffer,this.#R){const{interleavedStruct:i}=this.#R;this.#ls=new GeometryGPURenderInfo([{arrayStride:i.arrayStride,attributes:i.attributes}])}}}Object.freeze(Primitive);const createPrimitiveGeometry=(i,g,x,_)=>new Geometry(i,new VertexBuffer(i,new Float32Array(g),Primitive.primitiveInterleaveStruct,void 0,`VertexBuffer_${_}`),new IndexBuffer(i,new Uint32Array(x),void 0,`IndexBuffer_${_}`));class Box extends Primitive{#cs=function(){let i,g;return g=function(g,x,_,v,b,y,S,w,L,k,H,z,W){let q,be,Ke=w/H,Xe=L/z,je=w/2,Ye=L/2,Ze=k/2,Je=H+1,Qe=z+1,et=0,tt=[];for(be=0;be<Qe;be++){let i=be*Xe-Ye;for(q=0;q<Je;q++){let x=q*Ke-je;tt[_]=x*y,tt[v]=i*S,tt[b]=Ze,g.push(tt.x,tt.y,tt.z),tt[_]=0,tt[v]=0,tt[b]=k>0?1:-1,g.push(tt.x,tt.y,tt.z),g.push(q/H*W,be/z*W),et+=1}}for(be=0;be<z;be++)for(q=0;q<H;q++){let g=i+q+Je*be,_=i+q+Je*(be+1),v=i+(q+1)+Je*(be+1),b=i+(q+1)+Je*be;x.push(g,_,b,_,v,b)}i+=et},function(x,_,v,b,y,S,w,L,k){let H=[],z=[];return i=0,g(H,z,"z","y","x",-1,-1,y,b,v,L,w,k),g(H,z,"z","y","x",1,-1,y,b,-v,L,w,k),g(H,z,"x","z","y",1,1,v,y,b,S,L,k),g(H,z,"x","z","y",1,-1,v,y,-b,S,L,k),g(H,z,"x","y","z",1,-1,v,b,y,S,w,k),g(H,z,"x","y","z",-1,-1,v,b,-y,S,w,k),createPrimitiveGeometry(_,H,z,x)}}();constructor(i,g=1,x=1,_=1,v=1,b=1,y=1,S=1){super(i);const w=`PRIMITIVE_BOX_W${g}_H${x}_D${_}_WS${v}_HS${b}_DS${y}_UV${S}`,L=i.resourceManager.cachedBufferState;let k=L[w];k||(k=L[w]=this.#cs(w,i,g,x,_,v,b,y,S)),this._setData(k)}}class Cylinder extends Primitive{#cs=function(){let i,g;return function(x,_,v,b,y,S,w,L,k,H){const z=[],W=[];let q=0;const be=[],Ke=y/2;return i=function(){let i,g;const x=[],_=[],L=(b-v)/y;for(g=0;g<=w;g++){const W=[],Xe=g/w,je=Xe*(b-v)+v;for(i=0;i<=S;i++){const g=i/S,v=g*H+k,b=Math.sin(v),w=Math.cos(v);_[0]=je*b,_[1]=-Xe*y+Ke,_[2]=je*w,z.push(_[0],_[1],_[2]),x[0]=b,x[1]=L,x[2]=w,normalize(x,x),z.push(x[0],x[1],x[2]),z.push(g,Xe),W.push(q++)}be.push(W)}for(i=0;i<S;i++)for(g=0;g<w;g++){const x=be[g][i],_=be[g+1][i],v=be[g+1][i+1],b=be[g][i+1];W.push(x,_,b),W.push(_,v,b)}},g=function(i){let g,x,_;const y=[],w=[],L=!0===i?v:b,be=!0===i?1:-1;for(x=q,g=1;g<=S;g++)z.push(0,Ke*be,0),z.push(0,be,0),z.push(.5,.5),q++;for(_=q,g=0;g<=S;g++){const i=g/S*H+k,x=Math.cos(i),_=Math.sin(i);w[0]=L*_,w[1]=Ke*be,w[2]=L*x,z.push(w[0],w[1],w[2]),z.push(0,be,0),y[0]=.5*x+.5,y[1]=.5*_*be+.5,z.push(y[0],1-y[1]),q++}for(g=0;g<S;g++){const v=x+g,b=_+g;!0===i?W.push(b,b+1,v):W.push(b+1,b,v)}},i(),!1===L&&(v>0&&g(!0),b>0&&g(!1)),createPrimitiveGeometry(_,z,W,x)}}();constructor(i,g=1,x=1,_=1,v=8,b=8,y=!1,S=0,w=2*Math.PI){super(i);const L=`PRIMITIVE_CYLINDER_RT${g}_RB${x}_H${_}_RS${v}_HS${b}_TS${y}_TS${S}_TL${w}`,k=i.resourceManager.cachedBufferState;let H=k[L];H||(H=k[L]=this.#cs(L,i,g,x,_,v,b,y,S,w)),this._setData(H)}}class Sphere extends Primitive{#cs=function(){let i,g,x,_,v,b,y,S,w=[];const L=new Float32Array(3),k=new Float32Array(3);return function(H,z,W,q,be,Ke,Xe,je,Ye,Ze){i=je+Ye,_=0,w.length=0;const Je=[],Qe=[];for(x=0;x<=be;x++){const i=[],v=x/be;for(g=0;g<=q;g++){const x=g/q;L[0]=-W*Math.cos(Ke+x*Xe)*Math.sin(je+v*Ye),L[1]=W*Math.cos(je+v*Ye),L[2]=W*Math.sin(Ke+x*Xe)*Math.sin(je+v*Ye),Je.push(L[0],L[1],L[2]),k[0]=L[0],k[1]=L[1],k[2]=L[2],normalize(k,k),Je.push(k[0],k[1],k[2]),Je.push(x*Ze,v*Ze),i.push(_++)}w.push(i)}for(x=0;x<be;x++)for(g=0;g<q;g++)v=w[x][g+1],b=w[x][g],y=w[x+1][g],S=w[x+1][g+1],(0!==x||je>0)&&Qe.push(v,b,S),(x!==be-1||i<Math.PI)&&Qe.push(b,y,S);return createPrimitiveGeometry(z,Je,Qe,H)}}();constructor(i,g=1,x=16,_=16,v=0,b=2*Math.PI,y=0,S=Math.PI,w=1){super(i);const L=`PRIMITIVE_SPHERE_R${g}_WS${x}_HS${_}_PS${v}_PL${b}_TS${y}_TL${S}_UV${w}`,k=i.resourceManager.cachedBufferState;let H=k[L];H||(H=k[L]=this.#cs(L,i,g,x,_,v,b,y,S,w)),this._setData(H)}}class DrawDebuggerAxis extends Mesh{constructor(i){super(i,null,null);const g=new Mesh(i,new Sphere(i,.5),new ColorMaterial(i));this.addChild(g);const x=new Box(i);this.addChild(this.#hs(x,"#ff0000",[5,.1,.1],[2.5,0,0])),this.addChild(this.#fs(i,"#ff0000",[.5,1.25],[5.5,0,0],[0,0,-90])),this.addChild(this.#hs(x,"#00ff00",[.1,5,.1],[0,2.5,0])),this.addChild(this.#fs(i,"#00ff00",[.5,1.25],[0,5.5,0],[180,0,0])),this.addChild(this.#hs(x,"#0000ff",[.1,.1,5],[0,0,2.5])),this.addChild(this.#fs(i,"#0000ff",[.5,1.25],[0,0,5.5],[90,0,0]))}#hs(i,g,x,_){const{redGPUContext:v}=this,b=new Mesh(v,i,new ColorMaterial(v,g));return b.setScale(...x),b.setPosition(..._),b}#fs(i,g,x,_,v){const b=new Mesh(i,new Cylinder(i,x[0],.001,x[1],32,1),new ColorMaterial(i,g));return b.setScale(x[0],x[1],x[0]),b.setPosition(..._),b.setRotation(...v),b}}var Ir="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include FragmentOutput;\nstruct VertexIn { @location(0) pos:vec4<f32>, @location(1) uv:vec2<f32>,\n}\nstruct VertexOut { @builtin(position) pos:vec4<f32>, @location(0) uv:vec2<f32>,\n}\n@vertex\nfn vertexMain(in:VertexIn) -> VertexOut { var out:VertexOut; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; out.pos=u_noneJitterProjectionCameraMatrix * in.pos; out.uv=in.uv; return out;\n}\nstruct GridArgs { lineColor:vec4<f32>, baseColor:vec4<f32>, lineWidth:vec2<f32>, size:f32, distance:f32,\n}\n@group(1) @binding(0) var<uniform> gridArgs:GridArgs;\nfn PristineGrid(uv:vec2<f32>,lineWidth:vec2<f32>) -> f32 { let uvDDXY=vec4<f32>(dpdx(uv),dpdy(uv)); let uvDeriv=vec2<f32>(length(uvDDXY.xz),length(uvDDXY.yw)); let invertLine:vec2<bool>=lineWidth > vec2f(0.5); let targetWidth:vec2<f32>=select(lineWidth,1.0 - lineWidth,invertLine); let drawWidth:vec2<f32>=clamp(targetWidth,uvDeriv,vec2f(0.5)); let lineAA:vec2<f32>=uvDeriv * 1.5; var gridUV:vec2<f32>=abs(fract(uv) * 2.0 - 1.0); gridUV=select(1.0 - gridUV,gridUV,invertLine); var grid2:vec2<f32>=smoothstep(drawWidth + lineAA,drawWidth - lineAA,gridUV); grid2 *=saturate(targetWidth/drawWidth); grid2=mix(grid2,targetWidth,saturate(uvDeriv * 2.0 - 1.0)); grid2=select(grid2,1.0 - grid2,invertLine); return mix(grid2.x,1.0,grid2.y);\n}\n@fragment\nfn fragmentMain(in:VertexOut) -> FragmentOutput { var output:FragmentOutput; var lineWidthWeight:f32=1.0; var color:vec4<f32>=gridArgs.lineColor; let DIVISION_SIZE:f32=gridArgs.size; let AXIS_SIZE:f32=max(DIVISION_SIZE * gridArgs.lineWidth.x,DIVISION_SIZE/20.0); let HALF_DIVISION_SIZE:f32=DIVISION_SIZE * 0.5; let PER_SIZE:f32=1.0/DIVISION_SIZE * AXIS_SIZE; let MIN_RANGE=HALF_DIVISION_SIZE - PER_SIZE; let MAX_RANGE=HALF_DIVISION_SIZE + PER_SIZE; var isAxisLine=false; if (MIN_RANGE <=in.uv.x && in.uv.x <=MAX_RANGE) { color=vec4<f32>(0.0,0.0,1.0,1.0); lineWidthWeight=AXIS_SIZE; isAxisLine=true; } else if (MIN_RANGE <=in.uv.y && in.uv.y <=MAX_RANGE) { color=vec4<f32>(1.0,0.0,0.0,1.0); lineWidthWeight=AXIS_SIZE; isAxisLine=true; } let grid=PristineGrid(in.uv,gridArgs.lineWidth * lineWidthWeight); if (!isAxisLine) { let gridThreshold=0.1; if (grid < gridThreshold) { discard; } } let finalGrid=select(grid,1.0,isAxisLine); let finalColor=mix(gridArgs.baseColor,color,finalGrid * gridArgs.lineColor.a); if (!isAxisLine && finalColor.a < 0.01) { discard; } output.color=finalColor; output.gBufferMotionVector=vec4<f32>(0.0,0.0,1.0,1.0); return output;\n}\n";const Lr=parseWGSL(Ir),Ur=Lr.uniforms.gridArgs;class DrawDebuggerGrid{#R;#C;#qi;#ds;#ms;#ps;#Be;#Ee;#gs;#ee=100;#e;#a;#xs=1;constructor(i){validateRedGPUContext(i),this.#e=InstanceIdGenerator.getNextId(this.constructor);const{resourceManager:g,gpuDevice:x}=i,_={code:Ir},v=g.createGPUShaderModule("VERTEX_MODULE_GRID",_);this.#Be=new BlendState(this,en.ONE,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#Ee=new BlendState(this,en.SRC_ALPHA,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#gs=new ColorRGBA(128,128,128,1);const b=g.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),y=i.resourceManager.getGPUBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT")||i.resourceManager.createBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Lr,1));this.#_s(i),this.#ds=x.createBindGroup({label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_GRID",layout:y,entries:[{binding:0,resource:{buffer:this.#qi.gpuBuffer,offset:0,size:this.#qi.size}}]});const S={label:"PIPELINE_DESCRIPTOR_GRID",layout:x.createPipelineLayout({label:"DRAW_DEBUGGER_GRID_PIPELINE_LAYOUT",bindGroupLayouts:[b,y]}),vertex:{module:v,entryPoint:"vertexMain",buffers:[{arrayStride:this.#R.interleavedStruct.arrayStride,attributes:this.#R.interleavedStruct.attributes}]},fragment:{module:v,entryPoint:"fragmentMain",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.#Be.state,alpha:this.#Ee.state}},{format:navigator.gpu.getPreferredCanvasFormat(),blend:void 0},{format:"rgba16float",blend:void 0}]},depthStencil:{format:"depth32float",depthWriteEnabled:!0,depthCompare:Zn.LESS}};this.#ms=x.createRenderPipeline(S),this.#ps=x.createRenderPipeline({...S,multisample:{count:4}})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get size(){return this.#ee}set size(i){this.#ee=i}get lineColor(){return this.#gs}get lineWidth(){return this.#xs}set lineWidth(i){validatePositiveNumberRange(i),this.#xs=i}render(i){const{view:g,currentRenderPassEncoder:x}=i,_=create$1();set(_,g.rawCamera.x,g.rawCamera.y,g.rawCamera.z);const v=distance(_,[0,0,0]),b=this.#ee;i.num3DObjects++,i.numDrawCalls++;const y=1/g.pixelRectObject.width*v*this.#xs;this.#qi.writeBuffers([[Ur.members.lineColor,this.#gs.rgbaNormal],[Ur.members.lineWidth,[y,y]],[Ur.members.size,b],[Ur.members.distance,v]]);const S=[-b/2,-0,-b/2,0,0,b/2,-0,-b/2,b,0,-b/2,-0,b/2,0,b,b/2,-0,b/2,b,b];if(this.#R.changeData(S),this.#ms){const{triangleCount:_,indexNum:v}=this.#C;x.setPipeline(g.redGPUContext.antialiasingManager.useMSAA?this.#ps:this.#ms),x.setBindGroup(1,this.#ds),x.setVertexBuffer(0,this.#R.gpuBuffer),x.setIndexBuffer(this.#C.gpuBuffer,"uint32"),x.drawIndexed(6),i.numTriangles+=_,i.numPoints+=v}}#_s(i){const g=this.#ee,{resourceManager:x}=i,{cachedBufferState:_}=x;{const x="VertexBuffer_Grid",v=_[x],b=[-g,-0,-g,0,0,g,-0,-g,g,0,-g,-0,g,0,g,g,-0,g,g,g];_[x]=this.#R=v||new VertexBuffer(i,b,new InterleavedStruct({position:InterleaveType.float32x3,uv:InterleaveType.float32x2}),void 0,x)}{const g="IndexBuffer_Grid",x=_[g],v=[0,1,2,1,2,3];_[g]=this.#C=x||new IndexBuffer(i,v,void 0,g)}{const g="UniformBuffer_Grid",x=_[g],v=new ArrayBuffer(Ur.arrayBufferByteLength);_[g]=this.#qi=x||new UniformBuffer(i,v)}}}class Plane extends Primitive{#cs=function(){const i=[],g=[];return function(x,_,v,b,y,S,w,L){const k=v/2,H=b/2,z=Math.floor(y)||1,W=Math.floor(S)||1,q=z+1,be=W+1,Ke=v/z,Xe=b/W;i.length=0,g.length=0;for(let x=0;x<be;x++){const _=x*Xe-H,v=L?(1-x/W)*w:x/W*w;for(let b=0;b<q;b++){const y=b*Ke-k,S=b/z*w;if(i.push(y,-_,0,0,0,1,S,v),x<W&&b<z){const i=b+q*x,_=b+q*(x+1),v=b+1+q*(x+1),y=b+1+q*x;g.push(i,_,y),g.push(_,v,y)}}}return createPrimitiveGeometry(_,i,g,x)}}();constructor(i,g=1,x=1,_=1,v=1,b=1,y=!1){super(i);const S=`PRIMITIVE_PLANE_W${g}_H${x}_WS${_}_HS${v}_UV${b}_FY${y}`,w=i.resourceManager.cachedBufferState;let L=w[S];L||(L=w[S]=this.#cs(S,i,g,x,_,v,b,y)),this._setData(L)}}const Dr=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { useDiffuseTexture:u32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; var finalColor:vec4<f32>=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); finalColor=vec4<f32>(finalColor.rgb/finalColor.a,finalColor.a * uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (finalColor.a==0.0) { discard; } output.color=finalColor; output.gBufferMotionVector=vec4<f32>( 0.0,0.0,1.0,1.0 ); return output;\n};\n");class TextFieldMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,g,x){super(i,"TEXT_FILED_MATERIAL",Dr,2),x&&(this.name=x),this.diffuseTexture=g,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}xt.defineByPreset(TextFieldMaterial,[xt.PRESET_TEXTURE.DIFFUSE_TEXTURE,xt.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(TextFieldMaterial);const Ar=";box-sizing:content-box;white-space:nowrap;",kr={padding:0,background:"transparent",color:"#fff",fontFamily:"Arial",fontSize:16,fontWeight:"normal",fontStyle:"normal",letterSpacing:0,wordBreak:"keep-all",verticalAlign:"middle",textAlign:"center",lineHeight:1.4,border:"",boxShadow:"none",boxSizing:"border-box",filter:""};class ATextField extends Mesh{#vs;#bs;#ys;#Ts;#Ss;#Ms;#ws;#Rs=!0;#b;#Cs;#Ps=!1;#Bs;#Es;constructor(i,g,x=!0){super(i),this.#b=i,this.#Rs=x,this.#ws=g,this._material=new TextFieldMaterial(i),this._material.transparent=!0,this._material.diffuseTextureSampler=new Sampler(i,x?{minFilter:ln.LINEAR,magFilter:ln.LINEAR,mipmapFilter:cn.LINEAR}:{minFilter:ln.NEAREST,magFilter:ln.NEAREST,mipmapFilter:null}),this.depthStencilState.depthWriteEnabled=!1,this.#Is(),this.#Ls(),this.#Us(),this.#Ds(),this.#As()}get text(){return this.#Ms}set text(i){if(this.#Ms===i)return;this.#Ms=i;const g=this.#ys.querySelector("foreignObject div"),x=this.#ks(i);this.#Ts.innerHTML=x,g.innerHTML=x,this.#Ps=!0}render(i){this.#ws(this.#Bs,this.#Es),this.#Os(),super.render(i)}#ks(i){return i.toString().replace(/\<br\/>/gi,"<div/>")}#Is(){"undefined"!=typeof OffscreenCanvas?this.#vs=new OffscreenCanvas(100,100):this.#vs=document.createElement("canvas"),this.#bs=this.#vs.getContext("2d")}#Gs(){const i=this.#Ts.getBoundingClientRect();const g=i.width+3+3,x=i.height+3+3;return{width:-2&Math.ceil(g),height:-2&Math.ceil(x),extraTop:3,extraRight:3,extraBottom:3,extraLeft:3}}#Ns(){const i=this.#ys,g=i.querySelector("foreignObject"),{width:x,height:_,extraTop:v,extraRight:b,extraBottom:y,extraLeft:S}=this.#Gs();g.setAttribute("width",x.toString()),g.setAttribute("height",_.toString()),g.style.padding=`${v}px ${b}px ${y}px ${S}px`,i.setAttribute("width",x.toString()),i.setAttribute("height",_.toString()),this.#Ss.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(i.outerHTML)}#Ds(){this.#Ss=new Image,this.#Ss.style.cssText="position:absolute;bottom:0px;left:0;",this.#Ss.onload=i=>{let g,x;const{width:_,height:v}=this.#Gs(),b=(this.#Rs,2),y=this.#Rs?1:2;g=_*b,x=v*b,this.#Ss.width=g/y,this.#Ss.height=x/y,this.#vs.width=g,this.#vs.height=x,this.#vs instanceof OffscreenCanvas||(this.#vs.style.width=g/b+"px",this.#vs.style.height=x/b+"px"),this.#bs.imageSmoothingEnabled=!0,this.#bs.imageSmoothingQuality="high",this.#bs.clearRect(0,0,g,x),this.#bs.fillStyle="rgba(0,0,0,0)",this.#bs.fillRect(0,0,g,x),this.#bs.drawImage(this.#Ss,0,0,g,x),this.dirtyTransform=!0;const callback=i=>{if(this.material.diffuseTexture){const i=this.material.diffuseTexture.src,g="string"==typeof i&&i?.startsWith?.("blob:");this.material.diffuseTexture.destroy(),this.material.diffuseTexture=null,g&&URL.revokeObjectURL(i)}this.material.diffuseTexture=new BitmapTexture(this.#b,URL.createObjectURL(i),!0,i=>{this.#Bs=this.#Ss.width,this.#Es=this.#Ss.height},null,null,!0)};this.#vs instanceof OffscreenCanvas?this.#vs.convertToBlob({type:"image/png"}).then(callback):this.#vs.toBlob(callback,"image/png")}}#Os(){this.#Ps&&(this.#Cs&&cancelAnimationFrame(this.#Cs),this.#Cs=requestAnimationFrame(()=>{this.#Ns()})),this.#Ps=!1}#Vs=(i,g)=>{const x=this.#ys.querySelector("foreignObject > div").style,_=this.#Ts.style,v=`_${i}`;this[v]=g,Object.defineProperty(this,i,{get:()=>this[v],set:g=>{const b=this[v];this[v]=g;const y=(i=>"number"==typeof i)(g)&&(i=>!["lineHeight","fontWeight"].includes(i))(i)?`${g}px`:g;x[i]=y,_[i]=y,b!==g&&(this.#Ps=!0)}}),this[i]=g};#Ls(){this.#Ts=document.createElement("div"),this.#Ts.style.cssText=Ar+";position:absolute;top:200px;left:0;visibility:hidden;text-rendering:optimizeLegibility",document.body.appendChild(this.#Ts)}#Us(){const i=this.#ys=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.setAttribute("text-rendering","optimizeLegibility"),i.style.cssText="position:absolute;top:0px;left:0px;z-index:1;margin:0;padding:0;overflow:visible;background:transparent",i.innerHTML=` <rect x="0" y="0" width="100%" height="100%" fill="rgba(0,0,0,0)"/> <foreignObject width="100%" height="100%" style="margin:0;padding:0;" overflow="visible"> <div xmlns="http://www.w3.org/1999/xhtml" style="${Ar}"></div> </foreignObject>`}#As(){for(const[i,g]of Object.entries(kr))this.#Vs(i,g);this.#Ps=!0}}Object.freeze(ATextField);var Or="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_noneJitterProjectionMatrix=systemUniforms.noneJitterProjectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_positionVec4=vec4<f32>(input_position,1.0); let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0); let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz); let objectPosition=input_position.xyz; let distance=length(cameraPosition - objectPosition); let scaleFactor=distance; var scaleMatrix:mat4x4<f32>=mat4x4<f32>( 10.0,0.0,0.0,0.0, 0.0,10.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); #redgpu_if useBillboard { if (u_useBillboardPerspective !=1) { scaleMatrix=mat4x4<f32>( scaleFactor,0.0,0.0,0.0, 0.0,scaleFactor,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); } position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * scaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_noneJitterProjectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; output.position=vec4<f32>( temp.xy + objectPosition.xy * vec2<f32>( (u_noneJitterProjectionMatrix * u_modelMatrix)[0][0], (u_noneJitterProjectionMatrix * u_modelMatrix)[1][1] ), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * scaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_noneJitterProjectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_noneJitterProjectionMatrix=systemUniforms.noneJitterProjectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); let input_uv=inputData.uv; var position:vec4<f32>; let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz); let objectPosition=input_position.xyz; let distance=length(cameraPosition - objectPosition); let scaleFactor=distance; var scaleMatrix:mat4x4<f32>=mat4x4<f32>( 10.0,0.0,0.0,0.0, 0.0,10.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); if (u_useBillboard==1) { if (u_useBillboardPerspective !=1) { scaleMatrix=mat4x4<f32>( scaleFactor,0.0,0.0,0.0, 0.0,scaleFactor,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); } position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0); output.position=u_noneJitterProjectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; output.position=vec4<f32>( temp.xy + objectPosition.xy * vec2<f32>( (u_noneJitterProjectionMatrix * u_modelMatrix)[0][0], (u_noneJitterProjectionMatrix * u_modelMatrix)[1][1] ), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0); output.position=u_noneJitterProjectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Gr=parseWGSL(Or),Nr=Gr.uniforms.vertexUniforms;class TextField3D extends ATextField{#Fs=1;#Hs=1;constructor(i,g){super(i,(i,g)=>{const x=this.#Fs,_=this.#Hs;this.#Fs=i/1024,this.#Hs=g/1024,x===this.#Fs&&_===this.#Hs||(this.dirtyTransform=!0)}),this._geometry=new Plane(i),g&&(this.text=g)}get geometry(){return this._geometry}set geometry(i){console.error("TextField3D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField3D can not change material")}get renderTextureWidth(){return this.#Fs}get renderTextureHeight(){return this.#Hs}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_3D",Gr,Nr,Or)}}q.defineByPreset(TextField3D,[[q.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],q.PRESET_BOOLEAN.USE_BILLBOARD]),Object.freeze(TextField3D);class ADrawDebuggerLight{#b;#zs;#$s;constructor(i,g,x=32){this.#b=i;const _=this.createLightDebugGeometry(i,x);this.#zs=new ColorMaterial(i),this.#zs.color.setColorByRGB(g[0],g[1],g[2]),this.#$s=new Mesh(i,_,this.#zs),this.#$s.primitiveState.cullMode="none",this.#$s.primitiveState.topology=Xe.LINE_LIST,this.#$s.depthStencilState.depthWriteEnabled=!1,this.#$s.disableJitter=!0}get lightMaterial(){return this.#zs}get lightDebugMesh(){return this.#$s}updateVertexBuffer(i,g){const x=g.data;let _=0;const v=Math.min(i.length,Math.floor(x.length/16));for(let g=0;g<v;g++){const[v,b]=i[g];x[_++]=v[0],x[_++]=v[1],x[_++]=v[2],x[_++]=0,x[_++]=0,x[_++]=1,x[_++]=0,x[_++]=0,x[_++]=b[0],x[_++]=b[1],x[_++]=b[2],x[_++]=0,x[_++]=0,x[_++]=1,x[_++]=0,x[_++]=0}g.updateAllData(x)}createLightDebugGeometry(i,g){const x=new Float32Array(2*g*8),_=new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},`lightDebugStruct_${Math.random()}`),v=new VertexBuffer(i,x,_);return new Geometry(i,v)}}class DrawDebuggerPointLight extends ADrawDebuggerLight{#it;#Ks;constructor(i,g){super(i,[0,255,255],51),this.#it=g,this.#Ks=new TextField3D(i),this.#Ks.useBillboard=!0,this.#Ks.fontSize=40,this.#Ks.text="💡",this.lightDebugMesh.addChild(this.#Ks)}render(i){this.#it.enableDebugger&&(this.#Xs(this.#it,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#Ks.setPosition(...this.#it.position))}#Xs(i,g){const x=i.position||[0,0,0],_=i.radius||1,v=16,b=[];for(let i=0;i<v;i++){const g=i/v*Math.PI*2,y=(i+1)/v*Math.PI*2,S=x[0]+Math.cos(g)*_,w=x[1]+Math.sin(g)*_,L=x[2],k=x[0]+Math.cos(y)*_,H=x[1]+Math.sin(y)*_,z=x[2];b.push([[S,w,L],[k,H,z]])}for(let i=0;i<v;i++){const g=i/v*Math.PI*2,y=(i+1)/v*Math.PI*2,S=x[0]+Math.cos(g)*_,w=x[1],L=x[2]+Math.sin(g)*_,k=x[0]+Math.cos(y)*_,H=x[1],z=x[2]+Math.sin(y)*_;b.push([[S,w,L],[k,H,z]])}for(let i=0;i<v;i++){const g=i/v*Math.PI*2,y=(i+1)/v*Math.PI*2,S=x[0],w=x[1]+Math.cos(g)*_,L=x[2]+Math.sin(g)*_,k=x[0],H=x[1]+Math.cos(y)*_,z=x[2]+Math.sin(y)*_;b.push([[S,w,L],[k,H,z]])}const y=.2*_;b.push([[x[0]-y,x[1],x[2]],[x[0]+y,x[1],x[2]]]),b.push([[x[0],x[1]-y,x[2]],[x[0],x[1]+y,x[2]]]),b.push([[x[0],x[1],x[2]-y],[x[0],x[1],x[2]+y]]),this.updateVertexBuffer(b,g)}}Object.freeze(DrawDebuggerPointLight);class DrawDebuggerSpotLight extends ADrawDebuggerLight{#it;#Ks;constructor(i,g){super(i,[255,255,0],80),this.#it=g,this.#Ks=new TextField3D(i),this.#Ks.useBillboard=!0,this.#Ks.fontSize=40,this.#Ks.text="🔦",this.lightDebugMesh.addChild(this.#Ks)}render(i){this.#it.enableDebugger&&(this.#Ws(this.#it,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#Ks.setPosition(...this.#it.position))}#Ws(i,g){const x=i.position||[0,0,0],_=i.direction||[0,-1,0],v=i.radius||5,b=i.outerCutoff||22.5,y=i.innerCutoff||15,S=[],w=Math.sqrt(_[0]*_[0]+_[1]*_[1]+_[2]*_[2]),L=[_[0]/w,_[1]/w,_[2]/w],k=[x[0]+L[0]*v,x[1]+L[1]*v,x[2]+L[2]*v],H=v*Math.tan(b*Math.PI/180),z=v*Math.tan(y*Math.PI/180);let W=[0,1,0];Math.abs(L[1])>.99&&(W=[1,0,0]);const q=[L[1]*W[2]-L[2]*W[1],L[2]*W[0]-L[0]*W[2],L[0]*W[1]-L[1]*W[0]],be=Math.sqrt(q[0]*q[0]+q[1]*q[1]+q[2]*q[2]),Ke=[q[0]/be,q[1]/be,q[2]/be],Xe=[Ke[1]*L[2]-Ke[2]*L[1],Ke[2]*L[0]-Ke[0]*L[2],Ke[0]*L[1]-Ke[1]*L[0]],je=16;for(let i=0;i<je;i++){const g=i/je*Math.PI*2,_=(i+1)/je*Math.PI*2,v=Math.cos(g),b=Math.sin(g),y=Math.cos(_),w=Math.sin(_),L=[k[0]+(Ke[0]*v+Xe[0]*b)*H,k[1]+(Ke[1]*v+Xe[1]*b)*H,k[2]+(Ke[2]*v+Xe[2]*b)*H],z=[k[0]+(Ke[0]*y+Xe[0]*w)*H,k[1]+(Ke[1]*y+Xe[1]*w)*H,k[2]+(Ke[2]*y+Xe[2]*w)*H];S.push([L,z]),S.push([x,L])}for(let i=0;i<je;i++){const g=i/je*Math.PI*2,x=(i+1)/je*Math.PI*2,_=Math.cos(g),v=Math.sin(g),b=Math.cos(x),y=Math.sin(x),w=[k[0]+(Ke[0]*_+Xe[0]*v)*z,k[1]+(Ke[1]*_+Xe[1]*v)*z,k[2]+(Ke[2]*_+Xe[2]*v)*z],L=[k[0]+(Ke[0]*b+Xe[0]*y)*z,k[1]+(Ke[1]*b+Xe[1]*y)*z,k[2]+(Ke[2]*b+Xe[2]*y)*z];S.push([w,L])}S.push([x,k]);const Ye=.3;S.push([[x[0]-Ye,x[1],x[2]],[x[0]+Ye,x[1],x[2]]]),S.push([[x[0],x[1]-Ye,x[2]],[x[0],x[1]+Ye,x[2]]]),S.push([[x[0],x[1],x[2]-Ye],[x[0],x[1],x[2]+Ye]]);for(let i=0;i<4;i++){const g=i/4*Math.PI*2,_=Math.cos(g),v=Math.sin(g),b=[k[0]+(Ke[0]*_+Xe[0]*v)*H,k[1]+(Ke[1]*_+Xe[1]*v)*H,k[2]+(Ke[2]*_+Xe[2]*v)*H];S.push([x,b])}this.updateVertexBuffer(S,g)}}Object.freeze(DrawDebuggerSpotLight);class DrawDebuggerDirectionalLight extends ADrawDebuggerLight{#it;#Ks;#js=[0,10,0];constructor(i,g){super(i,[255,255,0],8),this.#it=g,this.#Ks=new TextField3D(i),this.#Ks.useBillboard=!0,this.#Ks.fontSize=40,this.#Ks.text="☀️",this.lightDebugMesh.addChild(this.#Ks)}render(i){if(!this.#it.enableDebugger)return;this.#Ys(this.#it,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i);const g=this.#it.direction,x=this.#js,_=Math.sqrt(g[0]*g[0]+g[1]*g[1]+g[2]*g[2]),v=[g[0]/_,g[1]/_,g[2]/_];this.#Ks.setPosition(x[0]-0*v[0],x[1]-0*v[1],x[2]-0*v[2])}#Ys(i,g){const x=this.#js,_=i.direction||[0,-1,0],v=Math.sqrt(_[0]*_[0]+_[1]*_[1]+_[2]*_[2]),b=[_[0]/v,_[1]/v,_[2]/v],y=[x[0]+3*b[0],x[1]+3*b[1],x[2]+3*b[2]],S=.3;let w=[0,1,0];Math.abs(b[1])>.99&&(w=[1,0,0]);const L=[b[1]*w[2]-b[2]*w[1],b[2]*w[0]-b[0]*w[2],b[0]*w[1]-b[1]*w[0]],k=Math.sqrt(L[0]*L[0]+L[1]*L[1]+L[2]*L[2]),H=[L[0]/k,L[1]/k,L[2]/k],z=[H[1]*b[2]-H[2]*b[1],H[2]*b[0]-H[0]*b[2],H[0]*b[1]-H[1]*b[0]],W=[[x,y],[y,[y[0]+-.5*b[0]+H[0]*S,y[1]+-.5*b[1]+H[1]*S,y[2]+-.5*b[2]+H[2]*S]],[y,[y[0]+-.5*b[0]-H[0]*S,y[1]+-.5*b[1]-H[1]*S,y[2]+-.5*b[2]-H[2]*S]],[y,[y[0]+-.5*b[0]+z[0]*S,y[1]+-.5*b[1]+z[1]*S,y[2]+-.5*b[2]+z[2]*S]],[y,[y[0]+-.5*b[0]-z[0]*S,y[1]+-.5*b[1]-z[1]*S,y[2]+-.5*b[2]-z[2]*S]],[[x[0]-.3,x[1],x[2]],[x[0]+.3,x[1],x[2]]],[[x[0],x[1]-.3,x[2]],[x[0],x[1]+.3,x[2]]],[[x[0],x[1],x[2]-.3],[x[0],x[1],x[2]+.3]]];this.updateVertexBuffer(W,g)}}Object.freeze(DrawDebuggerDirectionalLight);class BaseLight{drawDebugger;#qs;#Zs;#Tr=!1;constructor(i,g=1){this.#qs=i,this.#Zs=g}get enableDebugger(){return this.#Tr}set enableDebugger(i){this.#Tr=i}get color(){return this.#qs}set color(i){this.#qs=i}get intensity(){return this.#Zs}set intensity(i){this.#Zs=i}}Object.freeze(BaseLight);class AmbientLight extends BaseLight{constructor(i=new ColorRGB(173,216,230),g=.1){super(i,g)}}Object.freeze(AmbientLight);class DirectionalLight extends BaseLight{#Js=-1;#Qs=-1;#eo=-1;constructor(i=[-1,-1,-1],g="#fff",x=1){super(new ColorRGB(...convertHexToRgb(g,!0)),x),this.#Js=i[0],this.#Qs=i[1],this.#eo=i[2]}get directionX(){return this.#Js}set directionX(i){this.#Js=i}get directionY(){return this.#Qs}set directionY(i){this.#Qs=i}get directionZ(){return this.#eo}set directionZ(i){this.#eo=i}get direction(){return[this.#Js,this.#Qs,this.#eo]}set direction(i){this.#Js=i[0],this.#Qs=i[1],this.#eo=i[2]}}Object.freeze(DirectionalLight);class PointLight extends BaseLight{#to=1;#n=0;#r=0;#i=0;constructor(i="#fff",g=1){super(new ColorRGB(...convertHexToRgb(i,!0)),g)}get x(){return this.#n}set x(i){this.#n=i}get y(){return this.#r}set y(i){this.#r=i}get z(){return this.#i}set z(i){this.#i=i}get position(){return[this.#n,this.#r,this.#i]}get radius(){return this.#to}set radius(i){this.#to=i}setPosition(i,g,x){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=g,this.#i=x)}}Object.freeze(PointLight);class SpotLight extends BaseLight{#to=1;#n=0;#r=2;#i=0;#Js=0;#Qs=-1;#eo=0;#no=15;#ro=22.5;constructor(i="#fff",g=1){super(new ColorRGB(...convertHexToRgb(i,!0)),g)}get x(){return this.#n}set x(i){this.#n=i}get y(){return this.#r}set y(i){this.#r=i}get z(){return this.#i}set z(i){this.#i=i}get position(){return[this.#n,this.#r,this.#i]}get radius(){return this.#to}set radius(i){this.#to=i}get directionX(){return this.#Js}set directionX(i){this.#Js=i}get directionY(){return this.#Qs}set directionY(i){this.#Qs=i}get directionZ(){return this.#eo}set directionZ(i){this.#eo=i}get direction(){return[this.#Js,this.#Qs,this.#eo]}set direction(i){this.#Js=i[0],this.#Qs=i[1],this.#eo=i[2]}get innerCutoff(){return this.#no}set innerCutoff(i){this.#no=i}get outerCutoff(){return this.#ro}set outerCutoff(i){this.#ro=i}get innerCutoffCos(){return Math.cos(this.#no*Math.PI/180)}get outerCutoffCos(){return Math.cos(this.#ro*Math.PI/180)}setPosition(i,g,x){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=g,this.#i=x)}lookAt(i,g,x){let _,v,b;Array.isArray(i)?[_,v,b]=i:(_=i,v=g,b=x);const y=_-this.#n,S=v-this.#r,w=b-this.#i,L=Math.sqrt(y*y+S*S+w*w);L>0&&(this.#Js=y/L,this.#Qs=S/L,this.#eo=w/L)}}Object.freeze(SpotLight);class LightManager{#io=3;#ao=zt.MAX_CLUSTER_LIGHTS;#so=[];#oo=[];#uo=[];#lo=new AmbientLight;#co=create$2();get spotLights(){return this.#uo}get spotLightCount(){return this.#uo.length}get limitClusterLightCount(){return this.#ao}get pointLights(){return this.#oo}get pointLightCount(){return this.#oo.length}get limitDirectionalLightCount(){return this.#io}get directionalLightCount(){return this.#so.length}get directionalLights(){return this.#so}get ambientLight(){return this.#lo}set ambientLight(i){i instanceof AmbientLight||consoleAndThrowError("allow only AmbientLight instance"),this.#lo=i}addSpotLight(i){i instanceof SpotLight||consoleAndThrowError("allow only SpotLight instance");this.#uo.length+this.#oo.length>this.#ao&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#uo.push(i)}addPointLight(i){i instanceof PointLight||consoleAndThrowError("allow only PointLight instance");this.#uo.length+this.#oo.length>this.#ao&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#oo.push(i)}addDirectionalLight(i){i instanceof DirectionalLight||consoleAndThrowError("allow only DirectionalLight instance");this.#so.length>this.#io&&consoleAndThrowError("Cannot add more directional lights. The limit has been reached."),this.#so.push(i)}removeSpotLight(i){const g=this.#uo.indexOf(i);-1!==g&&this.#uo.splice(g,1)}removePointLight(i){const g=this.#oo.indexOf(i);-1!==g&&this.#oo.splice(g,1)}removeDirectionalLight(i){const g=this.#so.indexOf(i);-1!==g&&this.#so.splice(g,1)}removeAllSpotLight(){this.#uo=[]}removeAllPointLight(){this.#oo=[]}removeAllDirectionalLight(){this.#so=[]}removeAllLight(){this.removeAllPointLight(),this.removeAllSpotLight(),this.removeAllDirectionalLight(),this.#lo=null}updateViewSystemUniforms(i){const{scene:g,redGPUContext:x}=i,_=i.systemUniform_Vertex_StructInfo,{systemUniform_Vertex_UniformBuffer:v}=i,{members:b}=_,{lightManager:y,shadowManager:S}=g,{directionalShadowManager:w}=S;if(v.writeBuffers([[b.directionalLightCount,y.directionalLightCount],[b.directionalLightProjectionViewMatrix,this.#ho(i)],[b.directionalLightProjectionMatrix,this.#fo(i)],[b.directionalLightViewMatrix,this.#do(i)],[b.shadowDepthTextureSize,w.shadowDepthTextureSize],[b.bias,w.bias]]),y.directionalLights.forEach((g,_)=>{const{directionalLights:y}=b,{direction:S,color:w,intensity:L}=y.memberList[_];g.enableDebugger&&(g.drawDebugger||(g.drawDebugger=new DrawDebuggerDirectionalLight(x,g)),g.drawDebugger.render(i.debugViewRenderState)),v.writeBuffers([[S,g.direction],[w,g.color.rgbNormal],[L,g.intensity]])}),y.ambientLight){const g=i.scene.lightManager.ambientLight,{ambientLight:x}=b,{color:_,intensity:y}=x.members;v.writeBuffers([[_,g.color.rgbNormal],[y,g.intensity]])}}#ho(i){return multiply(create$2(),this.#fo(i),this.#do(i))}#fo(i){const g=create$2(),x=i.rawCamera instanceof Camera2D?fromValues(0,0,0):fromValues(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),_=Math.max(distance(x,create$1()),1);return y(g,-_,_,-_,_,3*-_,3*_),g}#do(i){identity(this.#co);const g=i.rawCamera instanceof Camera2D?fromValues(0,0,0):fromValues(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),x=Math.max(distance(g,create$1()),1),_=fromValues(0,1,0),v=fromValues(0,0,0),b=i.scene.lightManager.directionalLights.length?fromValues(-i.scene.lightManager.directionalLights[0].direction[0]*x,-i.scene.lightManager.directionalLights[0].direction[1]*x,-i.scene.lightManager.directionalLights[0].direction[2]*x):create$1(),y=create$2();return lookAt(y,b,v,_),y}}Object.freeze(LightManager);class DirectionalShadowManager{#mo=2048;#po=.005;#go;#xo;#_o;#b;#Si=[];#Mt=0;get videoMemorySize(){return this.#Mt}get castingList(){return this.#Si}get shadowDepthTextureView(){return this.#xo}get shadowDepthTextureViewEmpty(){return this.#_o}get bias(){return this.#po}set bias(i){validatePositiveNumberRange(i,0,1),this.#po=i}get shadowDepthTextureSize(){return this.#mo}set shadowDepthTextureSize(i){validateUintRange(i,1),this.#mo=i,this.#vo()}reset(){this.destroy()}resetCastingList(){this.#Si.length=0}updateViewSystemUniforms(i){this.#b=i,this.#vo()}destroy(){this.#go&&(this.#go.destroy(),this.#go=null,this.#xo=null)}#Bi(){const i=this.#go;if(!i)return 0;this.#Mt=calculateTextureByteSize(i)}#vo(){this.#go?.width!==this.#mo&&(this.destroy(),this.#bo(),this.#Bi())}#yo(i){const g=i.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_EmptyDepthTexture_1x1_${Date.now()}`});this.#_o=g.createView({label:g.label})}#bo(){const{gpuDevice:i,resourceManager:g}=this.#b;this.#go=g.createManagedTexture({size:[this.#mo,this.#mo,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_shadowDepthTextureSize_${this.#mo}x${this.#mo}_${Date.now()}`}),this.#xo=this.#go.createView({label:this.#go.label}),this.#_o||this.#yo(i)}}Object.freeze(DirectionalShadowManager);class ShadowManager{#To=new DirectionalShadowManager;constructor(){}get directionalShadowManager(){return this.#To}}Object.freeze(ShadowManager);class Scene extends Object3DContainer{#e;#a;#So=new ColorRGBA;#Mo=!1;#wo=new LightManager;#Ro=new ShadowManager;constructor(i){super(),this.#e=InstanceIdGenerator.getNextId(this.constructor),this.#a=i}get lightManager(){return this.#wo}get shadowManager(){return this.#Ro}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get backgroundColor(){return this.#So}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#So=i}get useBackgroundColor(){return this.#Mo}set useBackgroundColor(i){this.#Mo=i}}class ViewRenderTextureManager{#Co;#Po;#Bo;#Eo;#Io;#Mt=0;#b;#ci;#Lo=new Map;#Uo={};constructor(i){validateRedGPUContext(i.redGPUContext),this.#b=i.redGPUContext,this.#ci=i}get videoMemorySize(){return this.#Mt}get renderPath1ResultTextureDescriptor(){return this.#Bo}get depthTexture(){return this.#Eo}get depthTextureView(){return this.#bo(),this.#Io}get renderPath1ResultTextureView(){return this.#Po}get renderPath1ResultTexture(){return this.#Do(),this.#Co}get gBufferColorTexture(){return this.#Lo.get("gBufferColor")?.texture}get gBufferColorResolveTexture(){return this.#Lo.get("gBufferColor")?.resolveTexture}get gBufferColorTextureView(){return this.#Ao("gBufferColor"),this.#Lo.get("gBufferColor")?.textureView}get gBufferColorResolveTextureView(){return this.#Lo.get("gBufferColor")?.resolveTextureView}get gBufferNormalTexture(){return this.#Lo.get("gBufferNormal")?.texture}get gBufferNormalResolveTexture(){return this.#Lo.get("gBufferNormal")?.resolveTexture}get gBufferNormalTextureView(){return this.#Ao("gBufferNormal"),this.#Lo.get("gBufferNormal")?.textureView}get gBufferNormalResolveTextureView(){return this.#Lo.get("gBufferNormal")?.resolveTextureView}get gBufferMotionVectorTexture(){return this.#Lo.get("gBufferMotionVector")?.texture}get gBufferMotionVectorResolveTexture(){return this.#Lo.get("gBufferMotionVector")?.resolveTexture}get gBufferMotionVectorTextureView(){return this.#Ao("gBufferMotionVector","rgba16float"),this.#Lo.get("gBufferMotionVector")?.textureView}get gBufferMotionVectorResolveTextureView(){return this.#Lo.get("gBufferMotionVector")?.resolveTextureView}#ko(){const i=[this.#Lo.get("gBufferColor")?.texture,this.#Lo.get("gBufferColor")?.resolveTexture,this.#Eo,this.#Co,this.#Lo.get("gBufferNormal")?.texture,this.#Lo.get("gBufferNormal")?.resolveTexture].filter(Boolean);this.#Mt=i.reduce((i,g)=>i+calculateTextureByteSize(g),0)}#Ao(i,g){const{antialiasingManager:x,resourceManager:_}=this.#b,{useMSAA:v}=x,b=this.#Lo.get(i),y=b?.texture,{pixelRectObject:S,name:w}=this.#ci,{width:L,height:k}=S,H=y?.width!==L||y?.height!==k,z=this.#Uo[i]!==v,W=!y||H||z;if(this.#Uo[i]=v,W){Gn(`새 텍스처 생성 중:${i}`),y&&(y?.destroy(),b.texture=null,b.textureView=null,b.resolveTexture?.destroy(),b.resolveTexture=null,b.resolveTextureView=null,this.#Lo.delete(i));const x={texture:null,textureView:null,resolveTexture:null,resolveTextureView:null},S=_.createManagedTexture({size:[Math.max(L,1),Math.max(k,1),1],sampleCount:v?4:1,label:`${w}_${i}_texture_${L}x${k}`,format:g||navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC});if(x.texture=S,x.textureView=_.getGPUResourceBitmapTextureView(S),v){const v=_.createManagedTexture({size:{width:Math.max(L,1),height:Math.max(k,1),depthOrArrayLayers:1},sampleCount:1,label:`${w}_${i}_resolveTexture_${L}x${k}`,format:g||navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC});x.resolveTexture=v,x.resolveTextureView=_.getGPUResourceBitmapTextureView(v)}this.#Lo.set(i,x),this.#ko()}}#Do(){const{resourceManager:i}=this.#b,g=this.#Co,{pixelRectObject:x,name:_}=this.#ci,{width:v,height:b}=x;(!g||(g?.width!==v||g?.height!==b))&&(g&&(g?.destroy(),this.#Co=null,this.#Po=null),this.#Bo={size:{width:Math.max(1,v),height:Math.max(1,b),depthOrArrayLayers:1},format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,mipLevelCount:getMipLevelCount(v,b),label:`${_}_renderPath1ResultTexture_${v}x${b}`},this.#Co=i.createManagedTexture(this.#Bo),this.#Po=i.getGPUResourceBitmapTextureView(this.#Co),this.#ko())}#bo(){const{antialiasingManager:i,resourceManager:g}=this.#b,{useMSAA:x}=i,_=this.#Eo,{pixelRectObject:v,name:b}=this.#ci,{width:y,height:S}=v,w=_?.width!==y||_?.height!==S,L=this.#Uo.depth!==x,k=!_||w||L;if(this.#Uo.depth=x,k){_&&(_?.destroy(),this.#Eo=null,this.#Io=null);const i=g.createManagedTexture({size:[Math.max(y,1),Math.max(S,1),1],sampleCount:x?4:1,label:`${b}_depth_${y}x${S}`,format:"depth32float",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING});this.#Eo=i,this.#Io=g.getGPUResourceBitmapTextureView(i),this.#ko()}}}Object.freeze(ViewRenderTextureManager);class ViewTransform{onResize=null;#b;#Oo=create$2();#Go=create$2();#Rr;#n=0;#r=0;#ni;#ri;#ii=[0,0,0,0];#No=0;#Vo=0;constructor(i){validateRedGPUContext(i),this.#b=i}get redGPUContext(){return this.#b}get camera(){return this.#Rr}set camera(i){i instanceof PerspectiveCamera||i instanceof Camera2D||i instanceof Camera2D||i instanceof OrthographicCamera||i instanceof AController||consoleAndThrowError("allow PerspectiveCamera or OrthographicCamera or AController instance"),this.#Rr=i}get x(){return this.#n}set x(i){this.setPosition(i,this.y)}get y(){return this.#r}set y(i){this.setPosition(this.x,i)}get width(){return this.#ni}set width(i){this.setSize(i,this.#ri)}get height(){return this.#ri}set height(i){this.setSize(this.#ni,i)}get pixelRectArray(){return this.#ii}get pixelRectObject(){return{x:this.#ii[0],y:this.#ii[1],width:this.#ii[2],height:this.#ii[3]}}get screenRectObject(){return{x:this.#ii[0]/devicePixelRatio,y:this.#ii[1]/devicePixelRatio,width:this.#ii[2]/devicePixelRatio,height:this.#ii[3]/devicePixelRatio}}get aspect(){return this.#ii[2]/this.#ii[3]}get frustumPlanes(){return this.#Rr instanceof AController?computeViewFrustumPlanes(this.projectionMatrix,this.#Rr.camera.modelMatrix):computeViewFrustumPlanes(this.projectionMatrix,this.#Rr.modelMatrix)}get rawCamera(){return this.#Rr instanceof AController?this.#Rr.camera:this.#Rr}setJitterOffset(i,g){this.#No=i,this.#Vo=g}get jitterOffset(){return[this.#No,this.#Vo]}clearJitterOffset(){this.#No=0,this.#Vo=0}get noneJitterProjectionMatrix(){const{pixelRectObject:i,redGPUContext:g}=this;if(this.rawCamera instanceof OrthographicCamera){const{nearClipping:i,farClipping:g}=this.rawCamera;orthoZO(this.#Go,this.rawCamera.left,this.rawCamera.right,this.rawCamera.bottom,this.rawCamera.top,i,g)}else if(this.rawCamera instanceof Camera2D)y(this.#Go,-.5,.5,-.5,.5,-1e5,1e5),scale(this.#Go,this.#Go,[g.renderScale,g.renderScale,1]),translate(this.#Go,this.#Go,[-.5,.5,0]),scale(this.#Go,this.#Go,[1/i.width*window.devicePixelRatio,-1/i.height*window.devicePixelRatio,1]),identity(this.rawCamera.modelMatrix);else{const{fieldOfView:i,nearClipping:g,farClipping:x}=this.rawCamera;b(this.#Go,Math.PI/180*i,this.aspect,g,x)}return this.#Go}get projectionMatrix(){const{redGPUContext:i}=this,{antialiasingManager:g}=i;if(this.#Oo=clone(this.noneJitterProjectionMatrix),g.useTAA&&this.rawCamera instanceof PerspectiveCamera&&(0!==this.#No||0!==this.#Vo)){const i=2/this.#ii[2],g=2/this.#ii[3];this.#Oo[8]+=this.#No*i,this.#Oo[9]+=this.#Vo*g}return this.#Oo}get inverseProjectionMatrix(){return invert(create$2(),this.#Oo)}setPosition(i=this.#n,g=this.#r){const{sizeManager:x}=this.#b;RedGPUContextSizeManager.validatePositionValue(i),RedGPUContextSizeManager.validatePositionValue(g),this.#n=i,this.#r=g;const _=x.pixelRectObject,v=RedGPUContextSizeManager.getPixelDimension(_,"width",i),b=RedGPUContextSizeManager.getPixelDimension(_,"height",g);this.#ii[0]=Math.floor(v*(this.#n.toString().includes("%")?1:x.renderScale*window.devicePixelRatio)),this.#ii[1]=Math.floor(b*(this.#r.toString().includes("%")?1:x.renderScale*window.devicePixelRatio))}setSize(i=this.#ni,g=this.#ri){const{sizeManager:x}=this.#b;RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(g),this.#ni=i,this.#ri=g;const _=x.pixelRectObject,v=RedGPUContextSizeManager.getPixelDimension(_,"width",i),b=RedGPUContextSizeManager.getPixelDimension(_,"height",g);this.#ii[2]=Math.floor(v*(this.#ni.toString().includes("%")?1:x.renderScale*window.devicePixelRatio)),this.#ii[3]=Math.floor(b*(this.#ri.toString().includes("%")?1:x.renderScale*window.devicePixelRatio)),this.onResize&&this.onResize(this.screenRectObject.width,this.screenRectObject.height)}}const Vr=parseWGSL(Xt.SYSTEM_UNIFORM).uniforms.systemUniforms;class View3D extends ViewTransform{#Fo=Vr;#Ho;#zo;#e;#$o;#Ko;#Xo;#a;#Wo;#jo=!0;#Yo=!1;#qo=50;#Zo;#Jo;#Qo;#eu;#tu=new PickingManager;#nu=[];#ru;#vn;#iu;#_i;#au;#su;#ou;#uu=void 0;#lu=void 0;#cu;#hu;#fu;#du;get fxaa(){return this.#du||(this.#du=new FXAA(this.redGPUContext)),this.#du}get taa(){return this.#fu||(this.#fu=new TAA(this.redGPUContext)),this.#fu}constructor(i,g,x,_){super(i),this.scene=g,this.camera=x,_&&(this.name=_),this.#Ea(),this.#eu=new ViewRenderTextureManager(this),this.#Jo=new RenderViewStateData(this),this.#Qo=new PostEffectManager(this),this.setSize("100%","100%")}get viewRenderTextureManager(){return this.#eu}get systemUniform_Vertex_StructInfo(){return this.#Fo}get systemUniform_Vertex_UniformBindGroup(){return this.#Ho}get systemUniform_Vertex_UniformBuffer(){return this.#zo}get passLightClustersBound(){return this.#ou}get ibl(){return this.#Zo}set ibl(i){this.#Zo=i}get pickingManager(){return this.#tu}get postEffectManager(){return this.#Qo}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get debugViewRenderState(){return this.#Jo}get grid(){return this.#$o}set grid(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerGrid(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerGrid)&&null!==i)throw new TypeError("grid must be of type 'DrawDebuggerGrid','boolean',or 'null'.");this.#$o=i}get axis(){return this.#Ko}set axis(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerAxis(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerAxis)&&null!==i)throw new TypeError("axis must be of type 'DrawDebuggerAxis','boolean',or 'null'.");this.#Ko=i}get skybox(){return this.#Xo}set skybox(i){const{resourceManager:g}=this.redGPUContext,x=this.#Xo?.skyboxTexture,_=i?.skyboxTexture;x&&x!==_&&this.#mu(g,x.cacheKey,!1),this.#Xo=i}get useFrustumCulling(){return this.#jo}set useFrustumCulling(i){this.#jo=i}get useDistanceCulling(){return this.#Yo}set useDistanceCulling(i){this.#Yo=i}get distanceCulling(){return this.#qo}set distanceCulling(i){this.#qo=i}get scene(){return this.#Wo}set scene(i){i instanceof Scene||consoleAndThrowError("allow only Scene instance"),this.#Wo=i}screenToWorld(i,g){return screenToWorld(i,g,this)}update(i,g=!1,x=!1,_){const{scene:v}=i,{shadowManager:b}=v,{directionalShadowManager:y}=b,S=i.ibl,w=S?.iblTexture?.gpuTexture,L=S?.irradianceTexture?.gpuTexture;let k=g?y.shadowDepthTextureViewEmpty:y.shadowDepthTextureView;const H=i.redGPUContext.viewList.indexOf(i),z=`${H}_${g?"shadowRender":"basic"}_2path${!!_}`;if(H>-1){let g=!0,x=this.#nu[z];x&&(g=x.ibl!==S||x.ibl_iblTexture!==w||x.ibl_irradianceTexture!==L||x.renderPath1ResultTextureView!==_||x.shadowDepthTextureView!==k||!this.#su),g?this.#pu(z,k,i.ibl,_):this.#Ho=this.#nu[z].vertexUniformBindGroup,[{key:"useIblTexture",value:[w?1:0]},{key:"time",value:[i.debugViewRenderState.timestamp||0]},{key:"isView3D",value:[this.constructor===View3D?1:0]}].forEach(({key:i,value:g})=>{this.redGPUContext.gpuDevice.queue.writeBuffer(this.#zo.gpuBuffer,this.#Fo.members[i].uniformOffset,new this.#Fo.members[i].View(g))}),this.#nu[z]={ibl:S,ibl_iblTexture:w,ibl_irradianceTexture:L,renderPath1ResultTextureView:_,shadowDepthTextureView:k,vertexUniformBindGroup:this.#Ho}}this.#gu(x)}checkMouseInViewBounds(){const{pixelRectObject:i,pickingManager:g}=this,{mouseX:x,mouseY:_}=g;return 0<x&&x<i.width&&0<_&&_<i.height}#pu(i,g,x,_){this.#gu(!0);const v=x?.iblTexture,b=x?.irradianceTexture,{redGPUContext:y}=this,{gpuDevice:S,resourceManager:w}=y,L={layout:w.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),label:`SYSTEM_UNIFORM_bindGroup_${i}`,entries:[{binding:0,resource:{buffer:this.#zo.gpuBuffer,offset:0,size:this.#zo.size}},{binding:1,resource:this.#ru},{binding:2,resource:g},{binding:3,resource:this.#vn},{binding:5,resource:{buffer:this.#_i,offset:0,size:this.#_i.size}},{binding:6,resource:{buffer:this.#su.clusterLightsBuffer,offset:0,size:this.#su.clusterLightsBuffer.size}},{binding:7,resource:this.#vn},{binding:8,resource:_||w.emptyBitmapTextureView},{binding:9,resource:this.#iu},{binding:10,resource:w.getGPUResourceCubeTextureView(v,v?.viewDescriptor||CubeTexture.defaultViewDescriptor)},{binding:11,resource:w.getGPUResourceCubeTextureView(b,b?.viewDescriptor||CubeTexture.defaultViewDescriptor)}]};this.#Ho=S.createBindGroup(L),this.#xu(w,v,b)}#xu(i,g,x){[[this.#cu,g],[this.#hu,x]].forEach(([g,x])=>{g&&g!==x&&this.#mu(i,g.cacheKey,!1),x&&g!==x&&this.#mu(i,x.cacheKey,!0)}),this.#cu=g,this.#hu=x}#mu(i,g,x){const _=i.managedCubeTextureState,v=_?.table.get(g);v&&(x?v.useNum++:v.useNum--)}#Ea(){const i=new ArrayBuffer(Vr.arrayBufferByteLength);this.#zo=new UniformBuffer(this.redGPUContext,i,"SYSTEM_UNIFORM_BUFFER_VERTEX","SYSTEM_UNIFORM_BUFFER_VERTEX"),this.#au=new Float32Array(16*zt.MAX_CLUSTER_LIGHTS+4),this.#_i=this.redGPUContext.resourceManager.createGPUBuffer("VIEW_CLUSTER_LIGHTS_BUFFER",{size:this.#au.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#_i,0,this.#au),this.#ru=new Sampler(this.redGPUContext,{addressModeU:un.CLAMP_TO_EDGE,addressModeV:un.CLAMP_TO_EDGE,addressModeW:un.CLAMP_TO_EDGE,compare:Zn.LESS_EQUAL}).gpuSampler,this.#vn=new Sampler(this.redGPUContext).gpuSampler,this.#iu=new Sampler(this.redGPUContext,{addressModeU:un.REPEAT,addressModeV:un.REPEAT}).gpuSampler}#gu(i=!1){if(!i)return;const{redGPUContext:g,scene:x,debugViewRenderState:_}=this;if(this.#ou||(this.#ou=new PassClusterLightBound(g,this)),this.#su&&(this.#ou.render(),this.#uu=this.pixelRectArray[2],this.#lu=this.pixelRectArray[3]),this.#su||(this.#su=new PassClustersLight(g,this)),x){const{pointLights:i,spotLights:v}=x.lightManager,b=i.length,y=v.length;if(b){let x=b;for(;x--;){const v=i[x],b=4+16*x;this.#au.set([...v.position,v.radius,...v.color.rgbNormal,v.intensity,0],b),v.enableDebugger&&(v.drawDebugger||(v.drawDebugger=new DrawDebuggerPointLight(g,v)),v.drawDebugger.render(_))}}if(y){const i=16,x=b*i;let S=y;for(;S--;){const b=v[S],y=4+i*S+x;this.#au.set([...b.position,b.radius,...b.color.rgbNormal,b.intensity,1,...b.direction,b.outerCutoff,b.innerCutoff],y),b.enableDebugger&&(b.drawDebugger||(b.drawDebugger=new DrawDebuggerSpotLight(g,b)),b.drawDebugger.render(_))}}this.#au.set([b,y,0,0],0),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#_i,0,this.#au),this.#su.render()}}}Object.freeze(View3D);class RedGPUContextViewContainer{#_u=[];constructor(){}get viewList(){return this.#_u}get numViews(){return this.#_u.length}contains(i){return this.#_u.includes(i)}addView(i){this.#vu(i),this.#_u.push(i)}addViewAt(i,g){this.#vu(i),validateUintRange(g);const x=this.#_u.length;x<g&&(g=x),this.#_u[g]=i}getViewAt(i){return validateUintRange(i),this.#_u[i]}getViewIndex(i){return this.#vu(i),this.#_u.indexOf(i)}setViewIndex(i,g){this.#vu(i),validateUintRange(g);const x=this.#_u.length,_=g>=x,v=this.#_u.indexOf(i);-1===v&&consoleAndThrowError("입력하신 View 는 RedGPUContext instance 에 등록되지 않은 View 입니다."),_&&consoleAndThrowError(`index must be smaller than the viewList length./index:${g}/this.#viewList.length:${x}`),this.#_u.splice(v,1),this.#_u.splice(g,0,i)}swapViews(i,g){this.#vu(i),this.#vu(g);const x=this.#_u.indexOf(i),_=this.#_u.indexOf(g);-1!==x&&-1!==_||consoleAndThrowError((-1===x?"view1":"view2")+" is not child of this RedGPUContext instance."),this.swapViewsAt(x,_)}swapViewsAt(i,g){i===g&&consoleAndThrowError("The indices to swap cannot be the same."),validateUintRange(i),validateUintRange(g);const x=this.#_u.length;(i>=x||g>=x)&&consoleAndThrowError(`index1,index2 must be smaller than the viewList length./index1:${i}/index2:${g}/this.#viewList.length:${x}`);const _=this.#_u[i];this.#_u[i]=this.#_u[g],this.#_u[g]=_}removeView(i){this.#vu(i);const g=this.#_u.indexOf(i);g>-1?this.#_u.splice(g,1):consoleAndThrowError("View3D is not found in the view list.")}removeViewAt(i){validateUintRange(i);const g=this.#_u.length;i<g?this.#_u.splice(i,1):consoleAndThrowError(`Index ${i} is out of range. View list length is ${g}.`)}removeAllViews(){this.#_u.length=0}#vu(i){i instanceof View3D||consoleAndThrowError("allow only View3D instance")}}class RedGPUContextDetector{#bu;#yu;#Tu;#Su;#Mu;constructor(i){this.#Ea(i.gpuAdapter)}get adapterInfo(){return this.#bu}get limits(){return this.#yu}get isFallbackAdapter(){return this.#Tu}get groupedLimits(){return this.#Su}get userAgent(){return this.#Mu}get isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Kindle|Silk|PlayBook/i.test(navigator.userAgent)}#Ea(i){this.#Mu=navigator.userAgent,this.#wu(i),this.#Ru()}#wu(i){if(i){const{limits:g,info:x}=i,{isFallbackAdapter:_}=x;this.#bu=x,this.#Tu=_,this.#yu=g}}#Ru(){const i={TextureLimits:["maxTextureDimension1D","maxTextureDimension2D","maxTextureDimension3D","maxTextureArrayLayers","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage"],BufferLimits:["maxBindGroups","maxBindGroupsPlusVertexBuffers","maxBindingsPerBindGroup","maxDynamicUniformBuffersPerPipelineLayout","maxDynamicStorageBuffersPerPipelineLayout","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxUniformBufferBindingSize","maxStorageBufferBindingSize","minUniformBufferOffsetAlignment","minStorageBufferOffsetAlignment","maxBufferSize"],PipelineAndShaderLimits:["maxVertexBuffers","maxVertexAttributes","maxVertexBufferArrayStride","maxInterStageShaderComponents","maxInterStageShaderVariables"],ComputeLimits:["maxComputeWorkgroupStorageSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeWorkgroupsPerDimension"],ColorLimits:["maxColorAttachments","maxColorAttachmentBytesPerSample"]};let g={TextureLimits:{},BufferLimits:{},PipelineAndShaderLimits:{},ComputeLimits:{},ColorLimits:{},EtcLimit:{}};for(const x in this.#yu){let _=!1;for(const v in i)if(i[v].includes(x)){g[v][x]=this.#yu[x],_=!0;break}_||(g.EtcLimit[x]=this.#yu[x])}this.#Su=g}}class AntialiasingManager{#b;#Cu;#Pu=!1;#Bu=!1;#Eu=!0;#Iu=!0;constructor(i){this.#b=i}get useTAA(){return this.#Eu}set useTAA(i){this.#Eu=i}get useMSAA(){return this.#Pu}get msaaID(){return this.#Cu}set useMSAA(i){this.#Pu!==i&&(this.#Cu=createUUID()),this.#Pu=i,this.#Iu=!0}get useFXAA(){return this.#Bu}set useFXAA(i){this.#Bu=i}get changedMSAA(){return this.#Iu}set changedMSAA(i){this.#Iu=i}}Object.freeze(AntialiasingManager);class RedGPUContext extends RedGPUContextViewContainer{currentRequestAnimationFrame;onResize=null;currentTime;#Lu;#Uu;#Du;#Au;#y;#ai;#ku;#Ou;#Ie;#So=new ColorRGBA(0,0,0,1);#Gu=!1;#Nu={};#la;constructor(i,g,x,_,v){super(),this.#Uu=g,this.#y=x,this.#Au=_,this.#Du=v,this.#ai=i,this.#ku=new RedGPUContextSizeManager(this),this.#Ou=new RedGPUContextDetector(this),this.#Ie=new ResourceManager(this),this.#la=new AntialiasingManager(this),this.#Vu()}get antialiasingManager(){return this.#la}get useDebugPanel(){return this.#Gu}set useDebugPanel(i){this.#Gu=i}get backgroundColor(){return this.#So}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#So=i}get detector(){return this.#Ou}get configurationDescription(){return this.#Lu}get gpuAdapter(){return this.#Uu}get alphaMode(){return this.#Du}set alphaMode(i){this.#Du=i,this.#Fu()}get gpuContext(){return this.#Au}get gpuDevice(){return this.#y}get htmlCanvas(){return this.#ai}get keyboardKeyBuffer(){return this.#Nu}set keyboardKeyBuffer(i){this.#Nu=i}get resourceManager(){return this.#Ie}get sizeManager(){return this.#ku}get width(){return this.#ku.width}set width(i){this.#ku.width=i}get height(){return this.#ku.height}set height(i){this.#ku.height=i}get screenRectObject(){return this.#ku.screenRectObject}get renderScale(){return this.#ku.renderScale}set renderScale(i){this.#ku.renderScale=i,this.viewList.forEach(i=>{i.setPosition(),i.setSize()})}destroy(){this.#y.destroy()}setSize(i=this.width,g=this.height){this.sizeManager.setSize(i,g)}#Vu(){this.#Fu(),this.sizeManager.setSize("100%","100%"),window?.addEventListener("resize",()=>{this.sizeManager.setSize(),this.viewList.forEach(i=>{i.setSize(),i.setPosition()})});(this.detector.isMobile?["click","touchmove","touchstart","touchend"]:["click","mousemove","mousedown","mouseup"]).forEach(i=>{const g=this.detector.isMobile?{click:Sr.CLICK,touchmove:Sr.MOVE,touchstart:Sr.DOWN,touchend:Sr.UP}:{click:Sr.CLICK,mousemove:Sr.MOVE,mousedown:Sr.DOWN,mouseup:Sr.UP};this.#ai.addEventListener(i,i=>{const x=g[i.type];this.viewList.forEach(g=>{this.detector.isMobile&&i instanceof TouchEvent&&i.touches.length>0?(g.pickingManager.mouseX=i.touches[0].clientX*devicePixelRatio-g.pixelRectObject.x,g.pickingManager.mouseY=i.touches[0].clientY*devicePixelRatio-g.pixelRectObject.y):i instanceof MouseEvent&&(g.pickingManager.mouseX=i.offsetX*devicePixelRatio-g.pixelRectObject.x,g.pickingManager.mouseY=i.offsetY*devicePixelRatio-g.pixelRectObject.y),x===Sr.CLICK?g.pickingManager.lastMouseClickEvent={...i,type:x}:g.pickingManager.lastMouseEvent={...i,type:x}})})});{const HD_keyDown=i=>{this.#Nu[i.key]=!0},HD_keyUp=i=>{this.#Nu[i.key]=!1};window?.addEventListener("keyup",HD_keyUp),window?.addEventListener("keydown",HD_keyDown)}new ResizeObserver(i=>{}).observe(this.#ai)}#Fu(){const i=navigator.gpu.getPreferredCanvasFormat();this.#Lu={device:this.#y,format:i,alphaMode:this.#Du},this.#Au.configure(this.#Lu)}}Object.freeze(RedGPUContext);const copyGPUBuffer=(i,g,x)=>{const _=i.createCommandEncoder();_.copyBufferToBuffer(g,0,x,0,Math.min(g.size,x.size));const v=_.finish();i.queue.submit([v])},Fr=3.141592653589793,Hr=6.283185307179586,zr=.225,$r=1.27323954,Kr=.405284735,Xr=1.5707963267948966,Wr=Math.PI/180;class InstancingMeshObject3D{modelMatrix=create$2();localMatrix=create$2();normalModelMatrix=create$2();inited=!1;#n=0;#i=0;#r=0;#or=[0,0,0];#fr=1;#dr=1;#mr=1;#pr=[1,1,1];#o=0;#u=0;#l=0;#gr=[0,0,0];#Hu=0;#zu;#b;#br=1;constructor(i,g,x){validateRedGPUContext(i),this.#b=i,this.#zu=x,this.#Hu=g}get opacity(){return this.#br}set opacity(i){validatePositiveNumberRange(i,0,1),this.#br=i,this.#$u()}get x(){return this.#n}set x(i){this.#n=this.#or[0]=i,this.#$u()}get y(){return this.#r}set y(i){this.#r=this.#or[1]=i,this.#$u()}get z(){return this.#i}set z(i){this.#i=this.#or[2]=i,this.#$u()}get position(){return this.#or}set position(i){this.#n=this.#or[0]=i,this.#r=this.#or[1]=i,this.#i=this.#or[2]=i,this.#$u()}get scaleX(){return this.#fr}set scaleX(i){this.#fr=this.#pr[0]=i,this.#$u()}get scaleY(){return this.#dr}set scaleY(i){this.#dr=this.#pr[1]=i,this.#$u()}get scaleZ(){return this.#mr}set scaleZ(i){this.#mr=this.#pr[2]=i,this.#$u()}get scale(){return this.#or}set scale(i){this.#fr=this.#pr[0]=i,this.#dr=this.#pr[1]=i,this.#mr=this.#pr[2]=i,this.#$u()}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#gr[0]=i,this.#$u()}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#gr[1]=i,this.#$u()}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#gr[2]=i,this.#$u()}get rotation(){return this.#gr}set rotation(i){this.#o=this.#gr[0]=i,this.#u=this.#gr[1]=i,this.#l=this.#gr[2]=i,this.#$u()}setScale(i,g,x){g=g??i,x=x??i;const _=this.#pr;this.#fr=_[0]=i,this.#dr=_[1]=g,this.#mr=_[2]=x,this.#$u()}setPosition(i,g,x){g=g??i,x=x??i;const _=this.#or;this.#n=_[0]=i,this.#r=_[1]=g,this.#i=_[2]=x,this.#$u()}setRotation(i,g,x){g=g??i,x=x??i;const _=this.#gr;this.#o=_[0]=i,this.#u=_[1]=g,this.#l=_[2]=x,this.#$u()}#$u(){let i,g,x,_,v,b,y,S,w,L,k,H,z,W,q,be,Ke,Xe,je,Ye,Ze,Je,Qe,et,tt,it,ft,pt,xt,vt,bt,yt,Tt,St,Mt,wt,Rt,Ct;this.inited=!0;{const z=this.localMatrix;let Ke;L=1,k=0,H=0,W=0,q=1,be=0,Xe=0,je=0,Ye=1,z[12]=this.#n,z[13]=this.#r,z[14]=this.#i,z[15]=1,y=this.#o*Wr,S=this.#u*Wr,w=this.#l*Wr,Ke=y%Hr,Ke<-Fr?Ke+=Hr:Ke>Fr&&(Ke-=Hr),Ke=Ke<0?$r*Ke+Kr*Ke*Ke:$r*Ke-Kr*Ke*Ke,i=Ke<0?zr*(Ke*-Ke-Ke)+Ke:zr*(Ke*Ke-Ke)+Ke,Ke=(y+Xr)%Hr,Ke<-Fr?Ke+=Hr:Ke>Fr&&(Ke-=Hr),Ke=Ke<0?$r*Ke+Kr*Ke*Ke:$r*Ke-Kr*Ke*Ke,_=Ke<0?zr*(Ke*-Ke-Ke)+Ke:zr*(Ke*Ke-Ke)+Ke,Ke=S%Hr,Ke<-Fr?Ke+=Hr:Ke>Fr&&(Ke-=Hr),Ke=Ke<0?$r*Ke+Kr*Ke*Ke:$r*Ke-Kr*Ke*Ke,g=Ke<0?zr*(Ke*-Ke-Ke)+Ke:zr*(Ke*Ke-Ke)+Ke,Ke=(S+Xr)%Hr,Ke<-Fr?Ke+=Hr:Ke>Fr&&(Ke-=Hr),Ke=Ke<0?$r*Ke+Kr*Ke*Ke:$r*Ke-Kr*Ke*Ke,v=Ke<0?zr*(Ke*-Ke-Ke)+Ke:zr*(Ke*Ke-Ke)+Ke,Ke=w%Hr,Ke<-Fr?Ke+=Hr:Ke>Fr&&(Ke-=Hr),Ke=Ke<0?$r*Ke+Kr*Ke*Ke:$r*Ke-Kr*Ke*Ke,x=Ke<0?zr*(Ke*-Ke-Ke)+Ke:zr*(Ke*Ke-Ke)+Ke,Ke=(w+Xr)%Hr,Ke<-Fr?Ke+=Hr:Ke>Fr&&(Ke-=Hr),Ke=Ke<0?$r*Ke+Kr*Ke*Ke:$r*Ke-Kr*Ke*Ke,b=Ke<0?zr*(Ke*-Ke-Ke)+Ke:zr*(Ke*Ke-Ke)+Ke,vt=v*b,bt=i*g*b-_*x,yt=_*g*b+i*x,Tt=v*x,St=i*g*x+_*b,Mt=_*g*x-i*b,wt=-g,Rt=i*v,Ct=_*v,y=this.#fr,S=this.#dr,w=this.#mr,z[0]=(L*vt+W*bt+Xe*yt)*y,z[1]=(k*vt+q*bt+je*yt)*y,z[2]=(H*vt+be*bt+Ye*yt)*y,z[3]=z[3]*y,z[4]=(L*Tt+W*St+Xe*Mt)*S,z[5]=(k*Tt+q*St+je*Mt)*S,z[6]=(H*Tt+be*St+Ye*Mt)*S,z[7]=z[7]*S,z[8]=(L*wt+W*Rt+Xe*Ct)*w,z[9]=(k*wt+q*Rt+je*Ct)*w,z[10]=(H*wt+be*Rt+Ye*Ct)*w,z[11]=z[11]*w}this.modelMatrix=this.localMatrix;{let i=this.normalModelMatrix,g=this.modelMatrix;L=g[0],k=g[1],H=g[2],z=g[3],W=g[4],q=g[5],be=g[6],Ke=g[7],Xe=g[8],je=g[9],Ye=g[10],Ze=g[11],Qe=g[12],et=g[13],tt=g[14],it=g[15],Je=L*q-k*W,ft=L*be-H*W,pt=L*Ke-z*W,xt=k*be-H*q,vt=k*Ke-z*q,bt=H*Ke-z*be,yt=Xe*et-je*Qe,Tt=Xe*tt-Ye*Qe,St=Xe*it-Ze*Qe,wt=je*it-Ze*et,Mt=Ye*it-Ze*tt,Ct=Je*Mt-ft*wt+pt*Mt+xt*St-vt*Tt+bt*yt,Ct=1/Ct,i[0]=(q*Mt-be*wt+Ke*Mt)*Ct,i[4]=(-k*Mt+H*wt-z*Mt)*Ct,i[8]=(et*bt-tt*vt+it*xt)*Ct,i[12]=(-je*bt+Ye*vt-Ze*xt)*Ct,i[1]=(-W*Mt+be*St-Ke*Tt)*Ct,i[5]=(L*Mt-H*St+z*Tt)*Ct,i[9]=(-Qe*bt+tt*pt-it*ft)*Ct,i[13]=(Xe*bt-Ye*pt+Ze*ft)*Ct,i[2]=(W*wt-q*St+Ke*yt)*Ct,i[6]=(-L*wt+k*St-z*yt)*Ct,i[10]=(Qe*vt-et*pt+it*Je)*Ct,i[14]=(-Xe*vt+je*pt-Ze*Je)*Ct,i[3]=(-W*Mt+q*Tt-be*yt)*Ct,i[7]=(L*Mt-k*Tt+H*yt)*Ct,i[11]=(-Qe*xt+et*ft-tt*Je)*Ct,i[15]=(Xe*xt-je*ft+Ye*Je)*Ct}if(this.#zu.gpuRenderInfo){const{vertexUniformBuffer:i,vertexUniformInfo:g}=this.#zu.gpuRenderInfo,x=g.members.instanceModelMatrixs,_=g.members.instanceNormalModelMatrix,v=g.members.instanceOpacity;this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,x.uniformOffset+x.stride*this.#Hu,new x.View(this.modelMatrix)),this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,_.uniformOffset+_.stride*this.#Hu,new _.View(this.normalModelMatrix)),this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,v.uniformOffset+v.stride*this.#Hu,new v.View([this.opacity]))}}}var jr="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDisplacements;\nstruct InstanceUniforms { instanceGroupModelMatrix:mat4x4<f32>, instanceModelMatrixs:array<mat4x4<f32>,100000>, instanceNormalModelMatrix:array<mat4x4<f32>,100000>, instanceOpacity:array<f32,100000>, useDisplacementTexture:u32, displacementScale:f32,\n};\n@group(1) @binding(0) var<storage,read> instanceUniforms:InstanceUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @builtin(instance_index) instanceIdx:u32, @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) instanceOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@vertex\nfn main( inputData:InputData ) -> OutputData { var output:OutputData; let input_instanceIdx:u32=inputData.instanceIdx; let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx]; let u_normalModelMatrix=instanceUniforms.instanceNormalModelMatrix[input_instanceIdx]; let u_instanceGroupModelMatrix=instanceUniforms.instanceGroupModelMatrix; let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u; let u_displacementScale=instanceUniforms.displacementScale; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0); let worldPosition=position.xyz; let margin:f32=0.5; var clipPosition:vec4<f32>=u_projectionCameraMatrix * vec4<f32>(worldPosition,1.0); let ndcPosition:vec3<f32>=clipPosition.xyz/clipPosition.w;\noutput.position=clipPosition; var normalPosition:vec3<f32>=(u_instanceGroupModelMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0)).xyz;; if (u_useDisplacementTexture) { let distance=distance(position.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } output.position=u_projectionCameraMatrix * u_instanceGroupModelMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition; output.uv=input_uv; output.instanceOpacity=instanceUniforms.instanceOpacity[input_instanceIdx]; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData { var output:OutputShadowData; let input_instanceIdx:u32=inputData.instanceIdx; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx]; let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u; let u_displacementScale=instanceUniforms.displacementScale; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); if (u_useDisplacementTexture) { let distance=distance(position.xyz,u_directionalLightProjectionViewMatrix[3].xyz); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n";const Yr="VERTEX_BIND_GROUP_DESCRIPTOR_INSTANCING";class InstancingMesh extends Mesh{#b;#Ku=1;#Xu=[];constructor(i,g,x,_){super(i,x,_),this.#b=i,this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null,null,null),this.instanceCount=g,this.#Wu(i)}get instanceCount(){return this.#Ku}set instanceCount(i){validateUintRange(i),this.gpuRenderInfo.vertexUniformInfo=parseWGSL(jr).storage.instanceUniforms;const g=new ArrayBuffer(this.gpuRenderInfo.vertexUniformInfo.arrayBufferByteLength),x=new StorageBuffer(this.#b,g,`InstanceBuffer_${this.uuid}`),_=this.gpuRenderInfo.vertexUniformBuffer;_?.gpuBuffer&&copyGPUBuffer(this.#b.gpuDevice,_.gpuBuffer,x.gpuBuffer),_?.destroy(),this.gpuRenderInfo.vertexUniformBuffer=x;let v=i;for(;v--;)this.#Xu[v]||(this.#Xu[v]=new InstancingMeshObject3D(this.#b,v,this));this.#Ku=i,this.#Wu(this.#b)}get instanceChildren(){return this.#Xu}render(i,g=!1){const{view:x,currentRenderPassEncoder:_}=i,{scene:v}=x,{shadowManager:b}=v,{directionalShadowManager:y}=b,{castingList:S}=y,w=this.parent;let L=this.dirtyTransform;L&&(identity(this.localMatrix),translate(this.localMatrix,this.localMatrix,[this.x,this.y,this.z]),rotateX(this.localMatrix,this.localMatrix,this.rotationX),rotateY(this.localMatrix,this.localMatrix,this.rotationY),rotateZ(this.localMatrix,this.localMatrix,this.rotationZ),scale(this.localMatrix,this.localMatrix,[this.scaleX,this.scaleY,this.scaleZ]),w?.modelMatrix?multiply(this.modelMatrix,this.localMatrix,w.modelMatrix):this.modelMatrix=clone(this.localMatrix)),this.geometry?i.num3DObjects++:i.num3DGroups++;const k=this.#b;if(this.geometry){const{antialiasingManager:x,gpuDevice:v}=k;x.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.#Wu(k);const b=this.dirtyPipeline||this.material.dirtyPipeline,{displacementTexture:y,displacementScale:S}=this.material||{};b&&(this.dirtyTransform=!0,this.material.dirtyPipeline&&this.material._updateFragmentState(),this.#ju(),this.material.dirtyPipeline=!1,this.dirtyPipeline=!1,i.numDirtyPipelines++);const{gpuRenderInfo:w}=this,{vertexUniformBuffer:L,vertexUniformBindGroup:H,vertexUniformInfo:z,pipeline:W,shadowPipeline:q}=w;void 0!==z.members.displacementScale&&v.queue.writeBuffer(L.gpuBuffer,z.members.displacementScale.uniformOffset,new z.members.displacementScale.View([S])),void 0!==z.members.useDisplacementTexture&&v.queue.writeBuffer(L.gpuBuffer,z.members.useDisplacementTexture.uniformOffset,new z.members.useDisplacementTexture.View([y?1:0])),this.dirtyTransform&&v.queue.writeBuffer(L.gpuBuffer,z.members.instanceGroupModelMatrix.uniformOffset,new z.members.instanceGroupModelMatrix.View(this.modelMatrix)),this.dirtyTransform=!1,_.setPipeline(g?q:W);const{gpuBuffer:be}=this.geometry.vertexBuffer,{fragmentUniformBindGroup:Ke}=this.material.gpuRenderInfo;if(i.prevVertexGpuBuffer!==be&&(_.setVertexBuffer(0,be),i.prevVertexGpuBuffer=be),_.setBindGroup(1,H),_.setBindGroup(2,Ke),i.numDrawCalls++,i.numInstances++,this.geometry.indexBuffer){const{indexBuffer:g}=this.geometry,{indexNum:x,triangleCount:v,gpuBuffer:b}=g;_.setIndexBuffer(b,"uint32"),_.drawIndexed(x,this.#Ku,0,0,0),i.numTriangles+=v*this.#Ku,i.numPoints+=x*this.#Ku}else{const{vertexBuffer:g}=this.geometry,{vertexCount:x,triangleCount:v}=g;_.draw(x,this.#Ku,0,0),i.numTriangles+=v,i.numPoints+=x}}this.castShadow&&(S[S.length]=this);const{children:H}=this;let z=H.length;for(;z--;)H[z].dirtyTransform=L,H[z].render(i);this.dirtyTransform=!1}#Wu(i){this.dirtyPipeline=!0;const{resourceManager:g}=this.#b,x=g.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),{basicSampler:_,emptyBitmapTextureView:v,emptyCubeTextureView:b}=g,{gpuSampler:y}=_,{vertexUniformBuffer:S}=this.gpuRenderInfo,{material:w}=this,L={layout:x,label:Yr,entries:[{binding:0,resource:{buffer:S.gpuBuffer,offset:0,size:S.size}},{binding:1,resource:w?.displacementTextureSampler?.gpuSampler||y},{binding:2,resource:g.getGPUResourceBitmapTextureView(w?.displacementTexture)||v}]},k=i.gpuDevice.createBindGroup(L);this.#ju(),this.gpuRenderInfo.vertexBindGroupLayout=x,this.gpuRenderInfo.vertexUniformBindGroup=k}#ju(){const{resourceManager:i}=this.#b,g={code:jr},x=i.createGPUShaderModule("VERTEX_MODULE_INSTANCING",g),{vertexUniformBuffer:_}=this.gpuRenderInfo,{material:v}=this,{basicSampler:b,emptyBitmapTextureView:y,emptyCubeTextureView:S}=i,{gpuSampler:w}=b,L=i.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),k={layout:L,label:Yr,entries:[{binding:0,resource:{buffer:_.gpuBuffer,offset:0,size:_.size}},{binding:1,resource:v?.displacementTextureSampler?.gpuSampler||w},{binding:2,resource:i.getGPUResourceBitmapTextureView(v?.displacementTexture)||y}]};this.gpuRenderInfo.vertexUniformBindGroup=this.redGPUContext.gpuDevice.createBindGroup(k),this.gpuRenderInfo.vertexShaderModule=x,this.gpuRenderInfo.pipeline=createBasePipeline(this,x,L),this.gpuRenderInfo.shadowPipeline=createBasePipeline(this,x,L,Jn)}}Object.defineProperty(InstancingMesh.prototype,"meshType",{value:"instanceMesh",writable:!1});class ResourceStateHDRTexture{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class HDRLoader{#Yu=!0;constructor(i=!0){this.#Yu=i}get enableDebugLogs(){return this.#Yu}set enableDebugLogs(i){this.#Yu=i}async loadHDRFile(i){this.#Yu&&Gn(`HDR 파일 로딩 시작:${i}`);const g=await fetch(i);if(!g.ok)throw new Error(`HTTP ${g.status}:${g.statusText}`);const x=await g.arrayBuffer(),_=new Uint8Array(x),v=this.#qu(_,i);return this.#Zu(v)}#Zu(i){this.#Yu&&Gn("HDR 데이터 분석 시작 (원본 데이터 보존)...");const g=this.#Ju(i),x=this.#Qu(g);return this.#Yu&&Gn(`권장 노출값 계산:${x.toFixed(3)} (원본 데이터는 보존)`),{...i,recommendedExposure:x,luminanceStats:g}}#Ju(i){let g=1/0,x=0,_=0;const v=i.width*i.height;for(let v=0;v<i.data.length;v+=4){const b=.2126*i.data[v]+.7152*i.data[v+1]+.0722*i.data[v+2];g=Math.min(g,b),x=Math.max(x,b),_+=b}return{min:Math.max(.001,g),max:x,average:Math.max(.001,_/v),median:Math.max(.001,_/v)}}#Qu(i){const{average:g,median:x,max:_}=i;let v=.18;g<.01?v=.5:g<.05?v=.36:g>2?v=.09:g>.8&&(v=.12);let b=v/Math.max(Math.pow(g*x,.5),.001);const y=_/Math.max(i.min,.001);g<.05?b*=2.5:g<.1&&(b*=1.8),y>1e3?b*=.8:y>100&&(b*=.9),_>10?b*=.5:_>5?b*=.7:_>2&&(b*=.85);const S=x/g;return S<.3?b*=.8:S>1.5&&(b*=1.2),b=Math.max(1,Math.min(15,b)),b}#qu(i,g){const x=this.#el(i);if(this.#Yu&&Gn(`파일 형식:${x.format}`),!x.isValid)throw new Error(x.error||"지원되지 않는 파일 형식입니다");if(g.split("?")[0].toLowerCase().endsWith(".hdr")){this.#Yu&&this.#tl(i.slice(0,200));const g=this.#nl(i);return this.#Yu&&this.#rl(g),g}throw g.split("?")[0].toLowerCase().endsWith(".exr")?new Error("EXR format not supported yet"):new Error(`Unsupported HDR format:${g}`)}#nl(i){let g=0,x="";const _={};for(;g<i.length;){const _=String.fromCharCode(i[g++]);if("\n"===_)break;x+=_}if(!x.startsWith("#?RADIANCE")&&!x.startsWith("#?RGBE"))throw new Error("Invalid HDR file header");for(;g<i.length;){for(x="";g<i.length;){const _=String.fromCharCode(i[g++]);if("\n"===_)break;x+=_}if(""===x.trim())break;const v=x.indexOf("=");if(v>0){const i=x.substring(0,v).trim(),g=x.substring(v+1).trim();_[i]=g}}for(x="";g<i.length;){const _=String.fromCharCode(i[g++]);if("\n"===_)break;x+=_}const v=x.match(/-Y\s+(\d+)\s+\+X\s+(\d+)/);if(!v)throw new Error("Invalid resolution format in HDR file");const b=parseInt(v[1]),y=parseInt(v[2]);let S;_.EXPOSURE&&(S=parseFloat(_.EXPOSURE),this.#Yu&&Gn(`파일 노출값:${S.toFixed(3)}`));const w=new Float32Array(y*b*4);let L=0;for(let x=0;x<b;x++){const x=this.#il(i,g,y);g=x.nextOffset;for(let i=0;i<y;i++){const g=4*i,_=x.data[g],v=x.data[g+1],b=x.data[g+2],y=x.data[g+3];if(0===y)w[L++]=0,w[L++]=0,w[L++]=0,w[L++]=1;else{const i=Math.pow(2,y-128-8);w[L++]=_*i,w[L++]=v*i,w[L++]=b*i,w[L++]=1}}}return{data:w,width:y,height:b,exposure:S}}#el(i){if(i.length<50)return{isValid:!1,format:"unknown",error:"파일이 너무 작습니다"};const g=new TextDecoder("ascii",{fatal:!1}).decode(i.slice(0,50));return g.startsWith("#?RADIANCE")||g.startsWith("#?RGBE")?{isValid:!0,format:"RGBE/Radiance"}:g.includes("RADIANCE")||g.includes("RGBE")?{isValid:!0,format:"RGBE/Radiance (variant)"}:{isValid:!1,format:"unknown",error:"지원되지 않는 HDR 형식입니다"}}#il(i,g,x){const _=new Uint8Array(4*x);if(2===i[g]&&2===i[g+1]&&i[g+2]===(x>>8&255)&&i[g+3]===(255&x)){g+=4;for(let v=0;v<4;v++){let b=v;for(;b<4*x;){const v=i[g++];if(v>128){const y=v-128,S=i[g++];for(let i=0;i<y&&b<4*x;i++)_[b]=S,b+=4}else{const y=v;for(let v=0;v<y&&b<4*x;v++)_[b]=i[g++],b+=4}}}}else for(let v=0;v<4*x;v++)_[v]=i[g++];return{data:_,nextOffset:g}}#rl(i){if(this.#Yu){Gn("HDR 정보:"),Gn(`크기:${i.width} x ${i.height}`),Gn(`데이터 길이:${i.data.length}`),Gn("예상 픽셀 수:"+i.width*i.height*4);for(let g=0;g<Math.min(16,i.data.length);g+=4)i.data[g],i.data[g+1],i.data[g+2],i.data[g+3]}}#tl(i){if(this.#Yu)for(let g=0;g<i.length;g+=16)Array.from(i.slice(g,g+16)).map(i=>i.toString(16).padStart(2,"0")).join(" "),Array.from(i.slice(g,g+16)).map(i=>i>=32&&i<=126?String.fromCharCode(i):".").join("")}}async function float32ToFloat16WithToneMapping(i,g,x){const _=performance.now(),{gpuDevice:v}=i,{exposure:b,width:y,height:S,workgroupSize:w=[8,8]}=x,L=g.length/4,k=function(i){return`\nstruct Constants { exposure:f32, width:u32, height:u32,\n}\n\n@group(0) @binding(0) var<storage,read> inputData:array<f32>;\n@group(0) @binding(1) var<storage,read_write> outputData:array<u32>;\n@group(0) @binding(2) var<uniform> constants:Constants;\n\nfn acesToneMapping(x:f32) -> f32 { let a=2.51; let b=0.03; let c=2.43; let d=0.59; let e=0.14; return max(0.0,(x * (a * x + b))/(x * (c * x + d) + e));\n}\n\nfn linearToSRGB(linearValue:f32) -> f32 { if (linearValue <=0.0031308) { return 12.92 * linearValue; } else { return 1.055 * pow(linearValue,1.0/2.4) - 0.055; }\n}\n\nfn floatToHalf(value:f32) -> u32 { let bits=bitcast<u32>(value); let sign=(bits >> 16u) & 0x8000u; var exp=(bits >> 23u) & 0xFFu; var mantissa=bits & 0x7FFFFFu;  if (exp==0u) { return sign; }  if (exp==255u) { return sign | 0x7C00u | select(0u,1u,mantissa !=0u); }  let newExp=i32(exp) - 127 + 15; if (newExp <=0) { return sign; } if (newExp >=31) { return sign | 0x7C00u; }  return sign | (u32(newExp) << 10u) | (mantissa >> 13u);\n}\n\n@compute @workgroup_size(${i[0]},${i[1]})\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let x=global_id.x; let y=global_id.y;  if (x >=constants.width || y >=constants.height) { return; }  let pixelIndex=y * constants.width + x; let baseIndex=pixelIndex * 4u;  let r=inputData[baseIndex]; let g=inputData[baseIndex + 1u]; let b=inputData[baseIndex + 2u]; let a=inputData[baseIndex + 3u];  let exposedR=r * constants.exposure; let exposedG=g * constants.exposure; let exposedB=b * constants.exposure;  let toneMappedR=acesToneMapping(exposedR); let toneMappedG=acesToneMapping(exposedG); let toneMappedB=acesToneMapping(exposedB);  let gammaCorrectedR=linearToSRGB(toneMappedR); let gammaCorrectedG=linearToSRGB(toneMappedG); let gammaCorrectedB=linearToSRGB(toneMappedB);  let r16=floatToHalf(gammaCorrectedR); let g16=floatToHalf(gammaCorrectedG); let b16=floatToHalf(gammaCorrectedB); let a16=floatToHalf(a);  let outputIndex=pixelIndex * 2u; outputData[outputIndex]=(g16 << 16u) | r16; outputData[outputIndex + 1u]=(a16 << 16u) | b16;\n} `}(w);try{const i=v.createShaderModule({code:k,label:"hdr_float16_tonemapping_shader"}),x=function(i,g,x){const _=i.createBuffer({size:g.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"hdr_input_float32_buffer"}),v=i.createBuffer({size:8*x,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC,label:"hdr_output_float16_buffer"}),b=i.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"hdr_constants_buffer"}),y=i.createBuffer({size:8*x,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"hdr_read_buffer"});return i.queue.writeBuffer(_,0,g),{inputBuffer:_,outputBuffer:v,constantsBuffer:b,readBuffer:y}}(v,g,L);!function(i,g,x,_,v){const b=new ArrayBuffer(12),y=new DataView(b);y.setFloat32(0,x,!0),y.setUint32(4,_,!0),y.setUint32(8,v,!0),i.queue.writeBuffer(g,0,b)}(v,x.constantsBuffer,b,y,S);const{computePipeline:H,bindGroup:z}=function(i,g,x){const _=i.createComputePipeline({layout:"auto",compute:{module:g,entryPoint:"main"},label:"hdr_float16_tonemapping_pipeline"}),v=i.createBindGroup({layout:_.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:x.inputBuffer}},{binding:1,resource:{buffer:x.outputBuffer}},{binding:2,resource:{buffer:x.constantsBuffer}}],label:"hdr_float16_tonemapping_bindgroup"});return{computePipeline:_,bindGroup:v}}(v,i,x),W=await async function(i,g,x,_,v,b,y,S,w){const L=i.createCommandEncoder({label:"hdr_float16_tonemapping_encoder"}),k=L.beginComputePass({label:"hdr_float16_tonemapping_pass"});k.setPipeline(g),k.setBindGroup(0,x);const H=Math.ceil(b/S[0]),z=Math.ceil(y/S[1]);if(H>65535||z>65535)throw new Error(`이미지가 너무 큽니다. 최대 크기:${65535*S[0]} × ${65535*S[1]}`);k.dispatchWorkgroups(H,z),k.end(),L.copyBufferToBuffer(_,0,v,0,8*w),i.queue.submit([L.finish()]),await v.mapAsync(GPUMapMode.READ);const W=new Uint32Array(v.getMappedRange()),q=W.byteLength>0?new Uint16Array(W.buffer.slice(W.byteOffset,W.byteOffset+W.byteLength)):new Uint16Array(8);return v.unmap(),q}(v,H,z,x.outputBuffer,x.readBuffer,y,S,w,L);!function(i){i.inputBuffer.destroy(),i.outputBuffer.destroy(),i.constantsBuffer.destroy(),i.readBuffer.destroy()}(x);return{data:W,processedPixels:L,executionTime:performance.now()-_}}catch(i){throw console.error("Float16 톤매핑 처리 실패:",i),i}}async function float32ToUint8WithToneMapping(i,g,x){const _=performance.now(),{gpuDevice:v}=i,{exposure:b,width:y,height:S,workgroupSize:w=[8,8]}=x,L=g.length/4,k=function(i){return` struct Constants { exposure:f32, width:u32, height:u32, }  @group(0) @binding(0) var<storage,read> inputData:array<f32>; @group(0) @binding(1) var<storage,read_write> outputData:array<u32>; @group(0) @binding(2) var<uniform> constants:Constants;  /* ACES 톤매핑 함수 */ fn acesToneMapping(x:f32) -> f32 { let a=2.51; let b=0.03; let c=2.43; let d=0.59; let e=0.14; return max(0.0,(x * (a * x + b))/(x * (c * x + d) + e)); }  /* Linear → sRGB 감마 보정 */ fn linearToSRGB(linearValue:f32) -> f32 { if (linearValue <=0.0031308) { return 12.92 * linearValue; } else { return 1.055 * pow(linearValue,1.0/2.4) - 0.055; } }  @compute @workgroup_size(${i[0]},${i[1]}) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let x=global_id.x; let y=global_id.y;  /* 범위 체크 */ if (x >=constants.width || y >=constants.height) { return; }  let pixelIndex=y * constants.width + x; let baseIndex=pixelIndex * 4u;  /* RGBA 각 채널 처리 */ var processedPixel=0u;  for (var channel=0u;channel < 4u;channel++) { let inputIndex=baseIndex + channel; let originalVal=inputData[inputIndex];  /* 노출값 적용 */ let exposedVal=originalVal * constants.exposure;  /* 🎬 ACES 톤매핑 적용 */ let toneMappedVal=acesToneMapping(exposedVal);  /* 🔧 감마 보정 적용 (sRGB) */ let gammaCorrectedVal=linearToSRGB(toneMappedVal);  /* 최종 8bit 변환 */ let uint8Val=u32(round(clamp(gammaCorrectedVal,0.0,1.0) * 255.0));  /* 🔧 4개 채널을 하나의 u32에 패킹 */ processedPixel |=(uint8Val << (channel * 8u)); }  outputData[pixelIndex]=processedPixel; } `}(w);try{const i=v.createShaderModule({code:k,label:"hdr_tonemapping_shader"}),x=function(i,g,x){const _=i.createBuffer({size:g.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"hdr_input_float32_buffer"}),v=i.createBuffer({size:4*x,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC,label:"hdr_output_uint8_buffer"}),b=i.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"hdr_constants_buffer"}),y=i.createBuffer({size:4*x,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"hdr_read_buffer"});return i.queue.writeBuffer(_,0,g),{inputBuffer:_,outputBuffer:v,constantsBuffer:b,readBuffer:y}}(v,g,L);!function(i,g,x,_,v){const b=new ArrayBuffer(12),y=new DataView(b);y.setFloat32(0,x,!0),y.setUint32(4,_,!0),y.setUint32(8,v,!0),i.queue.writeBuffer(g,0,b)}(v,x.constantsBuffer,b,y,S);const{computePipeline:H,bindGroup:z}=function(i,g,x){const _=i.createComputePipeline({layout:"auto",compute:{module:g,entryPoint:"main"},label:"hdr_tonemapping_pipeline"}),v=i.createBindGroup({layout:_.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:x.inputBuffer}},{binding:1,resource:{buffer:x.outputBuffer}},{binding:2,resource:{buffer:x.constantsBuffer}}],label:"hdr_tonemapping_bindgroup"});return{computePipeline:_,bindGroup:v}}(v,i,x),W=await async function(i,g,x,_,v,b,y,S,w){const L=i.createCommandEncoder({label:"hdr_tonemapping_encoder"}),k=L.beginComputePass({label:"hdr_tonemapping_pass"});k.setPipeline(g),k.setBindGroup(0,x);const H=Math.ceil(b/S[0]),z=Math.ceil(y/S[1]);if(H>65535||z>65535)throw new Error(`이미지가 너무 큽니다. 최대 크기:${65535*S[0]} × ${65535*S[1]}`);k.dispatchWorkgroups(H,z),k.end(),L.copyBufferToBuffer(_,0,v,0,4*w),i.queue.submit([L.finish()]),await v.mapAsync(GPUMapMode.READ);const W=new Uint32Array(v.getMappedRange()),q=W.byteLength>0?new Uint8Array(W.buffer.slice(W.byteOffset,W.byteOffset+W.byteLength)):new Uint8Array(4);return v.unmap(),q}(v,H,z,x.outputBuffer,x.readBuffer,y,S,w,L);!function(i){i.inputBuffer.destroy(),i.outputBuffer.destroy(),i.constantsBuffer.destroy(),i.readBuffer.destroy()}(x);return{data:W,processedPixels:L,executionTime:performance.now()-_}}catch(i){throw console.error("톤매핑 처리 실패:",i),i}}class HDRTexture extends ManagementResourceBase{#_e;#bt;#yt;#Tt;#al;#Mt=0;#sl=1024;#ol=new HDRLoader;#Rt;#ul=1;#ll=1;#cl;#Ct;#Pt;#hl=!1;#fl=null;constructor(i,g,x,_,v=1024,b=!0){if(super(i,"managedHDRTextureState"),this.#Ct=x,this.#Pt=_,this.#Rt="rgba16float",this.#sl=v,this.useMipmap=b,g){const i=this.#Bt(g);this.#dl(i),this.#bt=i,this.cacheKey=this.#Et(g);const{table:x}=this.targetResourceManagedState;let _=x.get(this.cacheKey);if(_){const i=_.texture;return this.#Ct?.(i),i}this.src=g,this.#It()}}get videoMemorySize(){return this.#Mt}get gpuTexture(){return this.#_e}get mipLevelCount(){return this.#yt}get src(){return this.#bt}set src(i){const g=this.#Bt(i);this.#dl(g),this.#bt=g,this.cacheKey=this.#Et(i),this.#hl=!1,this.#bt&&this.#ml(this.#bt)}get useMipmap(){return this.#Tt}set useMipmap(i){this.#Tt!==i&&(this.#Tt=i,this.#yt=this.#Tt?getMipLevelCount(this.#sl,this.#sl):1,this.#hl=!1,this.#Ut())}get exposure(){return this.#ul}set exposure(i){const g=Math.max(.01,Math.min(20,i));this.#ul!==g&&(this.#ul=g,this.#fl&&clearTimeout(this.#fl),this.#fl=setTimeout(()=>{this.#al&&(this.#hl&&this.#_e?this.#pl():this.#Ut()),this.#fl=null},50))}get recommendedExposure(){return this.#ll}get luminanceAnalysis(){return this.#cl}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#yt}}static isSupportedFormat(i){return!(!i||"string"!=typeof i)&&i.toLowerCase().endsWith(".hdr")}static getSupportedFormats(){return[".hdr"]}resetToRecommendedExposure(){this.exposure=this.#ll}destroy(){const i=this.#_e;this.#Dt(null),this.#hl=!1,this.__fireListenerList(!0),this.#cl=null,this.#At(),this.#bt=null,this.cacheKey=null,i&&i.destroy()}#Et(i){let g;return i||(g=this.uuid),g="string"==typeof i?getAbsoluteURL(window.location.href,i):i.cacheKey||getAbsoluteURL(window.location.href,i.src),`HDRTexture_${g}`}#Bt(i){return"string"==typeof i?i:i.src}#dl(i){if(!i||"string"!=typeof i)throw new Error("HDR 파일 경로가 필요합니다");if(!i.split("?")[0].split("#")[0].toLowerCase().endsWith(".hdr"))throw new Error(`지원되지 않는 형식입니다. .hdr 형식만 지원됩니다. 입력된 파일:${i}`)}async#ml(i){try{const g=await this.#ol.loadHDRFile(i);this.#al=g,this.#ll=g.recommendedExposure||1,this.#ul=this.#ll,g.luminanceStats&&(this.#cl={averageLuminance:g.luminanceStats.average,maxLuminance:g.luminanceStats.max,minLuminance:g.luminanceStats.min,medianLuminance:g.luminanceStats.median,percentile95:.95*g.luminanceStats.max,percentile99:.99*g.luminanceStats.max,recommendedExposure:this.#ll},Gn("휘도 분석 완료:",this.#cl)),Gn(`HDR 데이터 로드 완료:${g.width}x${g.height},권장 노출:${this.#ll.toFixed(3)},현재 노출:${this.#ul.toFixed(3)}`),await this.#Ut(),this.#Ct?.(this)}catch(i){console.error("HDR loading error (.hdr 형식):",i),this.#Pt?.(i)}}#Dt(i){this.#_e=i,i||(this.#al=null,this.#hl=!1),this.__fireListenerList()}#It(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateHDRTexture(this))}#At(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}async#Ut(){const{gpuDevice:i,resourceManager:g}=this.redGPUContext;if(this.#hl&&this.#_e)return void await this.#pl();await i.queue.onSubmittedWorkDone();const x=this.#_e;this.#_e=null;const _={size:[this.#sl,this.#sl,6],format:this.#Rt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#yt,dimension:"2d",label:`${this.#bt}_cubemap_exp${this.#ul.toFixed(2)}`},v=g.createManagedTexture(_);this.#Dt(v),this.#yt=_.mipLevelCount||1,await this.#pl(),this.#hl=!0,x&&(await i.queue.onSubmittedWorkDone(),x.destroy())}async#pl(){const{gpuDevice:i,resourceManager:g}=this.redGPUContext,{mipmapGenerator:x}=g;if(!this.#_e)return void console.warn("큐브맵 텍스처가 없어 업데이트를 건너뜁니다.");if(!this.#al)return;const{width:_,height:v}=this.#al,b={size:[_,v],format:this.#Rt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`${this.#bt}_temp_exp${this.#ul.toFixed(2)}`},y=await this.#gl(i,g,this.#al,b);await this.#xl(y),y.destroy(),this.#Tt&&x.generateMipmap(this.#_e,{size:[this.#sl,this.#sl,6],format:this.#Rt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#yt,dimension:"2d"}),this.targetResourceManagedState.videoMemory-=this.#Mt,this.#Mt=0,this.#Mt=calculateTextureByteSize(this.#_e),this.targetResourceManagedState.videoMemory+=this.#Mt}async#xl(i){const{gpuDevice:g,resourceManager:x}=this.redGPUContext,_=g.createShaderModule({code:"struct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0), vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0) ); var texCoord=array<vec2<f32>,6>( vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0), vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0) ); var output:VertexOutput; output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); output.texCoord=texCoord[vertexIndex]; return output;\n}\n@group(0) @binding(0) var equirectangularTexture:texture_2d<f32>;\n@group(0) @binding(1) var textureSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> { let ndc=vec2<f32>( input.texCoord.x * 2.0 - 1.0, (1.0 - input.texCoord.y) * 2.0 - 1.0 ); var localDirection=vec3<f32>(ndc.x,ndc.y,1.0); let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz); let theta=atan2(worldDirection.z,worldDirection.x); let phi=acos(clamp(worldDirection.y,-1.0,1.0)); var u=(theta + 3.14159265359)/(2.0 * 3.14159265359); var v=phi/3.14159265359; u=fract(u + 1.0); v=clamp(v,0.0001,0.9999); let color=textureSample(equirectangularTexture,textureSampler,vec2<f32>(u,v)); return color;\n}\n"}),v=g.createRenderPipeline({layout:"auto",vertex:{module:_,entryPoint:"vs_main"},fragment:{module:_,entryPoint:"fs_main",targets:[{format:this.#Rt}]}}),b=new Sampler(this.redGPUContext,{magFilter:ln.LINEAR,minFilter:ln.LINEAR,mipmapFilter:cn.LINEAR,addressModeU:un.CLAMP_TO_EDGE,addressModeV:un.CLAMP_TO_EDGE,addressModeW:un.CLAMP_TO_EDGE}),y=this.#_l();for(let g=0;g<6;g++)await this.#vl(v,b,g,y[g],i)}async#bl(i){return(await float32ToFloat16WithToneMapping(this.redGPUContext,i,{exposure:this.#ul,width:this.#al.width,height:this.#al.height,workgroupSize:[8,8]})).data}async#gl(i,g,x,_){const v=i.createTexture(_);let b,y;switch(this.#Rt){case"rgba16float":b=8;y=(await this.#bl(x.data)).buffer;break;case"rgba8unorm":b=4;y=(await this.#yl(x.data)).buffer;break;default:throw new Error(`지원되지 않는 텍스처 포맷:${this.#Rt}`)}return i.queue.writeTexture({texture:v},y,{bytesPerRow:x.width*b,rowsPerImage:x.height},{width:x.width,height:x.height}),v}async#yl(i){return(await float32ToUint8WithToneMapping(this.redGPUContext,i,{exposure:this.#ul,width:this.#al.width,height:this.#al.height,workgroupSize:[8,8]})).data}#_l(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}async#vl(i,g,x,_,v){const{gpuDevice:b}=this.redGPUContext,y=b.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`hdr_face_${x}_uniform`});b.queue.writeBuffer(y,0,_);const S=b.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:v.createView()},{binding:1,resource:g.gpuSampler},{binding:2,resource:{buffer:y}}]}),w=b.createCommandEncoder(),L=w.beginRenderPass({colorAttachments:[{view:this.#_e.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:x,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});L.setPipeline(i),L.setBindGroup(0,S),L.draw(6,1,0,0),L.end(),b.queue.submit([w.finish()]),y.destroy()}}Object.freeze(HDRTexture);var qr="#redgpu_include SYSTEM_UNIFORM;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec4<f32>,\n};\nstruct VertexUniforms { modelMatrix:mat4x4<f32>,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@vertex\nfn main(inputData:InputData) -> OutData { var outData:OutData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; outData.position=u_projectionCameraMatrix * vertexUniforms.modelMatrix * vec4<f32>(inputData.position,1.0); outData.vertexPosition=0.5 * (vec4<f32>(inputData.position,1.0) + vec4<f32>(1.0,1.0,1.0,1.0)); return outData;\n}\n";const Zr=parseWGSL("#redgpu_include FragmentOutput\nstruct Uniforms { opacity:f32, blur:f32, transitionProgress:f32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var skyboxTextureSampler:sampler;\n@group(2) @binding(2) var skyboxTexture:texture_cube<f32>;\n@group(2) @binding(3) var transitionTexture:texture_cube<f32>;\n@group(2) @binding(4) var transitionAlphaTexture:texture_2d<f32>;\nstruct InputData { @location(0) vertexPosition:vec4<f32>,\n};\nfn sphericalToUV(dir:vec3<f32>) -> vec2<f32> { let normalizedDir=normalize(dir); let phi=atan2(normalizedDir.z,normalizedDir.x); let theta=acos(clamp(normalizedDir.y,-1.0,1.0)); let u=(phi + 3.14159265359)/(2.0 * 3.14159265359); let v=theta/3.14159265359; return vec2<f32>(u,v);\n}\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var cubemapVec=inputData.vertexPosition.xyz - vec3<f32>(0.5); let mipmapCount:f32=f32(textureNumLevels(skyboxTexture) - 1); let blurCurve=uniforms.blur * uniforms.blur; let skyboxColor=textureSampleLevel(skyboxTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve); var sampleColor=skyboxColor; let u_transitionProgress=uniforms.transitionProgress; if (u_transitionProgress > 0.0) { let transitionSample=textureSampleLevel(transitionTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve); #redgpu_if transitionAlphaTexture let uv=sphericalToUV(normalize(cubemapVec)); let transitionAlphaSample=textureSampleLevel(transitionAlphaTexture,skyboxTextureSampler,uv,0.0); let transitionAlphaValue=dot(transitionAlphaSample.rgb,vec3<f32>(0.299,0.587,0.114)); let threshold=u_transitionProgress; let noiseInfluence=0.3; let edgeSoftness=0.1; let maskValue=smoothstep( threshold - edgeSoftness, threshold + edgeSoftness, transitionAlphaValue + (u_transitionProgress - 0.5) * noiseInfluence ); sampleColor=mix(transitionSample,skyboxColor,maskValue * (1.0 - u_transitionProgress)); #redgpu_else sampleColor=mix(skyboxColor,transitionSample,u_transitionProgress); #redgpu_endIf } var outColor=vec4<f32>(sampleColor.rgb,sampleColor.a * uniforms.opacity); if (outColor.a==0.0) { discard; } var output:FragmentOutput; output.color=outColor; return output;\n}\n");class SkyBoxMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,g){super(i,"SKYBOX_MATERIAL",Zr,2),this.skyboxTexture=g,this.skyboxTextureSampler=new Sampler(this.redGPUContext,{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}),this.initGPURenderInfos()}}xt.definePositiveNumber(SkyBoxMaterial,[["blur",0]]),xt.definePositiveNumber(SkyBoxMaterial,[["transitionProgress",0]]),xt.defineCubeTexture(SkyBoxMaterial,["transitionTexture"]),xt.defineTexture(SkyBoxMaterial,["transitionAlphaTexture"]),xt.defineCubeTexture(SkyBoxMaterial,["skyboxTexture"]),xt.defineSampler(SkyBoxMaterial,["skyboxTextureSampler"]),Object.freeze(SkyBoxMaterial);const Jr=parseWGSL(qr),Qr=Jr.uniforms.vertexUniforms;class View2D extends View3D{constructor(i,g,x){super(i,g,new Camera2D,x)}}Object.freeze(View2D);const ei=Math.PI/180;class GroupBase extends Object3DContainer{modelMatrix=create$2();localMatrix=create$2();#e;#a;#sr;#n=0;#i=0;#r=0;#or=[0,0,0];#ur=0;#lr=0;#cr=0;#fr=1;#dr=1;#mr=1;#pr=[1,1,1];#o=0;#u=0;#l=0;#gr=[0,0,0];#Tl=!0;constructor(i){super(),i&&(this.name=i)}get dirtyTransform(){return this.#Tl}set dirtyTransform(i){this.#Tl=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get parent(){return this.#sr}set parent(i){this.#sr=i}get pivotX(){return this.#ur}set pivotX(i){this.#ur=i,this.dirtyTransform=!0}get pivotY(){return this.#lr}set pivotY(i){this.#lr=i,this.dirtyTransform=!0}get pivotZ(){return this.#cr}set pivotZ(i){this.#cr=i,this.dirtyTransform=!0}get x(){return this.#n}set x(i){this.#n=this.#or[0]=i,this.dirtyTransform=!0}get y(){return this.#r}set y(i){this.#r=this.#or[1]=i,this.dirtyTransform=!0}get z(){return this.#i}set z(i){this.#i=this.#or[2]=i,this.dirtyTransform=!0}get position(){return this.#or}get scaleX(){return this.#fr}set scaleX(i){this.#fr=this.#pr[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#dr}set scaleY(i){this.#dr=this.#pr[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#mr}set scaleZ(i){this.#mr=this.#pr[2]=i,this.dirtyTransform=!0}get scale(){return this.#or}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#gr[0]=i,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#gr[1]=i,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#gr[2]=i,this.dirtyTransform=!0}get rotation(){return this.#gr}setScale(i,g,x){g=g??i,x=x??i;const _=this.#pr;this.#fr=_[0]=i,this.#dr=_[1]=g,this.#mr=_[2]=x,this.dirtyTransform=!0}setPosition(i,g,x){g=g??i,x=x??i;const _=this.#or;this.#n=_[0]=i,this.#r=_[1]=g,this.#i=_[2]=x,this.dirtyTransform=!0}setRotation(i,g,x){g=g??i,x=x??i;const _=this.#gr;this.#o=_[0]=i,this.#u=_[1]=g,this.#l=_[2]=x,this.dirtyTransform=!0}render(i){const{view:g,isScene2DMode:x}=i;let _;if(x&&(this.#i=0,this.#cr=0),this.dirtyTransform){_=!0;{const{pixelRectObject:i}=g,x=this.parent,_=this.localMatrix;identity(_),translate(_,_,[this.#n,this.#r,this.#i]),rotateX(_,_,this.#o*ei),rotateY(_,_,this.#u*ei),rotateZ(_,_,this.#l*ei);let v=[this.#fr,this.#dr,this.#mr];if(this.renderTextureWidth&&(v[0]*=this.renderTextureWidth/i.height,v[1]*=this.renderTextureHeight/i.height),scale(_,_,v),this.#ur||this.#lr||this.#cr){translate(_,_,[-this.#ur,-this.#lr,-this.#cr])}x?.modelMatrix?multiply(this.modelMatrix,x.modelMatrix,this.localMatrix):copy(this.modelMatrix,this.localMatrix)}}this.dirtyTransform&&(_=!0,this.dirtyTransform=!1),i.num3DGroups++;const{children:v}=this;let b=0;const y=v.length;for(;b<y;b++)_&&(v[b].dirtyTransform=_),v[b].render(i)}}Object.defineProperty(GroupBase.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(GroupBase);class Group2D extends GroupBase{#e;#a;#Sl=0;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get rotation(){return this.#Sl}set rotation(i){this.#Sl=i,super.rotationZ=i}setScale(i,g){g=g??i,super.setScale(i,g,1)}setPosition(i,g){g=g??i,super.setPosition(i,g,0)}setRotation(i){this.rotation=i}}Object.defineProperty(Group2D.prototype,"is2DMeshType",{value:!0,writable:!1}),Object.freeze(Group2D);class Group3D extends GroupBase{#e;#a;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}}Object.defineProperty(Group3D.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(Group3D);const ti={Linear:0,QuintIn:1,QuintOut:2,QuintInOut:3,BackIn:4,BackOut:5,BackInOut:6,CircIn:7,CircOut:8,CircInOut:9,CubicIn:10,CubicOut:11,CubicInOut:12,ExpoIn:13,ExpoOut:14,ExpoInOut:15,QuadIn:16,QuadOut:17,QuadInOut:18,QuartIn:19,QuartOut:20,QuartInOut:21,SineIn:22,SineOut:23,SineInOut:24,ElasticIn:25,ElasticOut:26,ElasticInOut:27};var ni="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) a_position:vec3<f32>, @location(1) a_normal:vec3<f32>, @location(2) a_uv:vec2<f32>, @location(3) position:vec3<f32>, @location(4) alpha:f32, @location(5) rotation:vec3<f32>, @location(6) scale:f32,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\nfn mat4_inverse(a:mat4x4<f32>) -> mat4x4<f32> { var a00:f32=a[0][0]; var a01:f32=a[0][1]; var a02:f32=a[0][2]; var a03:f32=a[0][3]; var a10:f32=a[1][0]; var a11:f32=a[1][1]; var a12:f32=a[1][2]; var a13:f32=a[1][3]; var a20:f32=a[2][0]; var a21:f32=a[2][1]; var a22:f32=a[2][2]; var a23:f32=a[2][3]; var a30:f32=a[3][0]; var a31:f32=a[3][1]; var a32:f32=a[3][2]; var a33:f32=a[3][3]; var b00:f32=a00*a11 - a01*a10; var b01:f32=a00*a12 - a02*a10; var b02:f32=a00*a13 - a03*a10; var b03:f32=a01*a12 - a02*a11; var b04:f32=a01*a13 - a03*a11; var b05:f32=a02*a13 - a03*a12; var b06:f32=a20*a31 - a21*a30; var b07:f32=a20*a32 - a22*a30; var b08:f32=a20*a33 - a23*a30; var b09:f32=a21*a32 - a22*a31; var b10:f32=a21*a33 - a23*a31; var b11:f32=a22*a33 - a23*a32; var det:f32=b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06; if (det !=0.0) { det=1.0/det; return mat4x4<f32>( (a11*b11 - a12*b10 + a13*b09) * det, (a02*b10 - a01*b11 - a03*b09) * det, (a31*b05 - a32*b04 + a33*b03) * det, (a22*b04 - a21*b05 - a23*b03) * det, (a12*b08 - a10*b11 - a13*b07) * det, (a00*b11 - a02*b08 + a03*b07) * det, (a32*b02 - a30*b05 - a33*b01) * det, (a20*b05 - a22*b02 + a23*b01) * det, (a10*b10 - a11*b08 + a13*b06) * det, (a01*b08 - a00*b10 - a03*b06) * det, (a30*b04 - a31*b02 + a33*b00) * det, (a21*b02 - a20*b04 - a23*b00) * det, (a11*b07 - a10*b09 - a12*b06) * det, (a00*b09 - a01*b07 + a02*b06) * det, (a31*b01 - a30*b03 - a32*b00) * det, (a20*b03 - a21*b01 + a22*b00) * det ); } return mat4x4<f32>( 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0 );\n}\nfn rotationMTX(t:vec3<f32>)->mat4x4<f32>\n{ var s:f32=sin(t.x); var c:f32=cos(t.x); var m1=mat4x4<f32>(1,0,0,0, 0,c,-s,0, 0,s,c,0, 0,0,0,1); s=sin(t[1]);c=cos(t[1]); var m2=mat4x4<f32>(c,0,s,0, 0,1,0,0, -s,0,c,0, 0,0,0,1); s=sin(t[2]);c=cos(t[2]); var m3=mat4x4<f32>(c,-s,0,0, s,c,0,0, 0,0,1,0, 0,0,0,1); return m1 * m2 * m3;\n}\n@vertex\nfn main( inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective==1u; let u_useBillboard=vertexUniforms.useBillboard==1u; let input_position=inputData.position; var position:vec4<f32>; var normalPosition:vec4<f32>; var scaleMTX=mat4x4<f32>( inputData.scale,0,0,0, 0,inputData.scale,0,0, 0,0,inputData.scale,0, 0,0,0,1 ); var translateTX=mat4x4<f32>( 1,0,0,0, 0,1,0,0, 0,0,1,0, inputData.position.x,inputData.position.y,inputData.position.z,1 ); var temp:mat4x4<f32>; if(u_useBillboard){ var rotateMTX2=rotationMTX( vec3(0,0,inputData.rotation.z) ); temp=translateTX * rotateMTX2; position=rotateMTX2 * vec4<f32>(inputData.a_position,1); output.position=u_projectionMatrix * getBillboardMatrixNoScaleRatio( u_cameraMatrix,temp ) * scaleMTX * position; }else{ var rotateMTX=rotationMTX( inputData.rotation ); temp=translateTX * rotateMTX * scaleMTX; position=temp * vec4<f32>(inputData.a_position,1); output.position=u_projectionCameraMatrix * position; } output.vertexPosition=position.xyz; output.vertexNormal=(transpose(mat4_inverse(temp) ) * vec4<f32>(inputData.a_normal,1.0)).xyz; output.uv=inputData.a_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n";const ri=parseWGSL(ni),ii=ri.uniforms.vertexUniforms;class ParticleEmitter extends Mesh{#Ml=1e3;#wl=5e3;#Rl=0;#Cl=0;#Pl=0;#Bl=0;#El=0;#Il=0;#Ll=-5;#Ul=-5;#Dl=-5;#Al=5;#kl=5;#Ol=5;#Gl=0;#Nl=0;#Vl=1;#Fl=1;#Hl=0;#zl=1;#$l=0;#Kl=0;#Xl=-360;#Wl=-360;#jl=-360;#Yl=360;#ql=360;#Zl=360;#Jl=-360;#Ql=-360;#ec=-360;#tc=360;#nc=360;#rc=360;#ic=ti.CubicOut;#ac=ti.CubicOut;#sc=ti.CubicOut;#oc=ti.Linear;#uc=ti.Linear;#lc=ti.CubicOut;#cc=ti.CubicOut;#hc=ti.CubicOut;#fc;#dc;#mc;#Yi;#pc;#gc=2e3;constructor(i){super(i),this.geometry=new Plane(i),this.material=new BitmapMaterial(i),this.ignoreFrustumCulling=!0,this.useBillboard=!0}get vertexStateBuffers(){return[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x3"},{shaderLocation:2,offset:24,format:"float32x2"}]},{arrayStride:48,stepMode:"instance",attributes:[{shaderLocation:3,offset:16,format:"float32x3"},{shaderLocation:4,offset:28,format:"float32"},{shaderLocation:5,offset:32,format:"float32x3"},{shaderLocation:6,offset:44,format:"float32"}]}]}get particleBuffers(){return this.#dc}get particleNum(){return this.#gc}set particleNum(i){this.#gc=Math.max(Math.min(i,5e5),1),this.#xc()}get minLife(){return this.#Ml}set minLife(i){this.#Ml=i}get maxLife(){return this.#wl}set maxLife(i){this.#wl=i}get minStartX(){return this.#Rl}set minStartX(i){this.#Rl=i}get minStartY(){return this.#Cl}set minStartY(i){this.#Cl=i}get minStartZ(){return this.#Pl}set minStartZ(i){this.#Pl=i}get maxStartX(){return this.#Bl}set maxStartX(i){this.#Bl=i}get maxStartY(){return this.#El}set maxStartY(i){this.#El=i}get maxStartZ(){return this.#Il}set maxStartZ(i){this.#Il=i}get minEndX(){return this.#Ll}set minEndX(i){this.#Ll=i}get minEndY(){return this.#Ul}set minEndY(i){this.#Ul=i}get minEndZ(){return this.#Dl}set minEndZ(i){this.#Dl=i}get maxEndX(){return this.#Al}set maxEndX(i){this.#Al=i}get maxEndY(){return this.#kl}set maxEndY(i){this.#kl=i}get maxEndZ(){return this.#Ol}set maxEndZ(i){this.#Ol=i}get minStartAlpha(){return this.#Gl}set minStartAlpha(i){this.#Gl=i}get maxStartAlpha(){return this.#Nl}set maxStartAlpha(i){this.#Nl=i}get minEndAlpha(){return this.#Vl}set minEndAlpha(i){this.#Vl=i}get maxEndAlpha(){return this.#Fl}set maxEndAlpha(i){this.#Fl=i}get minStartScale(){return this.#Hl}set minStartScale(i){this.#Hl=i}get maxStartScale(){return this.#zl}set maxStartScale(i){this.#zl=i}get minEndScale(){return this.#$l}set minEndScale(i){this.#$l=i}get maxEndScale(){return this.#Kl}set maxEndScale(i){this.#Kl=i}get minStartRotationX(){return this.#Xl}set minStartRotationX(i){this.#Xl=i}get minStartRotationY(){return this.#Wl}set minStartRotationY(i){this.#Wl=i}get minStartRotationZ(){return this.#jl}set minStartRotationZ(i){this.#jl=i}get maxStartRotationX(){return this.#Yl}set maxStartRotationX(i){this.#Yl=i}get maxStartRotationY(){return this.#ql}set maxStartRotationY(i){this.#ql=i}get maxStartRotationZ(){return this.#Zl}set maxStartRotationZ(i){this.#Zl=i}get minEndRotationX(){return this.#Jl}set minEndRotationX(i){this.#Jl=i}get minEndRotationY(){return this.#Ql}set minEndRotationY(i){this.#Ql=i}get minEndRotationZ(){return this.#ec}set minEndRotationZ(i){this.#ec=i}get maxEndRotationX(){return this.#tc}set maxEndRotationX(i){this.#tc=i}get maxEndRotationY(){return this.#nc}set maxEndRotationY(i){this.#nc=i}get maxEndRotationZ(){return this.#rc}set maxEndRotationZ(i){this.#rc=i}get easeX(){return this.#ic}set easeX(i){this.#ic=i}get easeY(){return this.#ac}set easeY(i){this.#ac=i}get easeZ(){return this.#sc}set easeZ(i){this.#sc=i}get easeAlpha(){return this.#oc}set easeAlpha(i){this.#oc=i}get easeScale(){return this.#uc}set easeScale(i){this.#uc=i}get easeRotationX(){return this.#lc}set easeRotationX(i){this.#lc=i}get easeRotationY(){return this.#cc}set easeRotationY(i){this.#cc=i}get easeRotationZ(){return this.#hc}set easeRotationZ(i){this.#hc=i}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_PARTICLE_EMITTER",ri,ii,ni)}render(i){this.#dc||this.#Ea(),this.#_c(i.timestamp),super.render(i)}#xc(){let i=this.redGPUContext;const g=new Float32Array(12*this.#gc),x=new Float32Array(12*this.#gc),_=new Float32Array(12*this.#gc),v=new Float32Array(4*this.#gc),b=new Float32Array(4*this.#gc),y=performance.now(),S=this.localToWorld(this.x,this.y,this.z);for(let i=0;i<this.#gc;++i){let w=Math.random()*this.#wl,L=Math.random()*w;const k=S[0]+Math.random()*(this.#Bl-this.#Rl)+this.#Rl,H=S[1]+Math.random()*(this.#El-this.#Cl)+this.#Cl,z=S[2]+Math.random()*(this.#Il-this.#Pl)+this.#Pl,W=Math.random()*(this.#Yl-this.#Xl)+this.#Xl,q=Math.random()*(this.#ql-this.#Wl)+this.#Wl,be=Math.random()*(this.#Zl-this.#jl)+this.#jl;Math.random(),this.#zl,this.#Hl,this.#Hl,Math.random(),this.#Nl,this.#Gl,this.#Gl,g[12*i]=y-L,g[12*i+1]=w,g[12*i+4]=k,g[12*i+5]=H,g[12*i+6]=z,g[12*i+7]=0,g[12*i+8]=W,g[12*i+9]=q,g[12*i+10]=be,g[12*i+11]=0,x[4*i]=k,x[4*i+1]=Math.random()*(this.#Al-this.#Ll)+this.#Ll,x[4*i+2]=this.#ic,x[4*i+3]=S[0],x[4*i+4]=H,x[4*i+5]=Math.random()*(this.#kl-this.#Ul)+this.#Ul,x[4*i+6]=this.#ac,x[4*i+7]=S[1],x[4*i+8]=z,x[4*i+9]=Math.random()*(this.#Ol-this.#Dl)+this.#Dl,x[4*i+10]=this.#sc,x[4*i+11]=S[2],_[4*i]=W,_[4*i+1]=Math.random()*(this.#tc-this.#Jl)+this.#Jl,_[4*i+2]=this.#lc,_[4*i+3]=0,_[4*i+4]=q,_[4*i+5]=Math.random()*(this.#nc-this.#Ql)+this.#Ql,_[4*i+6]=this.#cc,_[4*i+7]=0,_[4*i+8]=be,_[4*i+9]=Math.random()*(this.#rc-this.#ec)+this.#ec,_[4*i+10]=this.#hc,_[4*i+11]=0,v[4*i]=0,v[4*i+1]=Math.random()*(this.#Kl-this.#$l)+this.#$l,v[4*i+2]=this.#uc,v[4*i+3]=0,b[4*i]=0,b[4*i+1]=Math.random()*(this.#Fl-this.#Vl)+this.#Vl,b[4*i+2]=this.#oc,b[4*i+3]=0}const w=this.#dc;this.#dc=[];const L=[g,x,_,v,b];L.forEach((g,x)=>{const _=i.gpuDevice.createBuffer({size:g.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE});i.gpuDevice.queue.writeBuffer(_,0,g),this.#dc.push(_),w?.length&&copyGPUBuffer(i.gpuDevice,w[x],_)}),w&&w.forEach(i=>i.destroy());let k={code:"\nstruct Info { startValue:f32, endValue:f32, easeType:f32, birthCenterValue:f32\n};\nstruct InfoGroup { infoX:Info, infoY:Info, infoZ:Info,\n};\nstruct Particle { startTime:f32, life:f32, valuePosition:vec3<f32>, valueAlpha:f32, valueRotation:vec3<f32>, valueScale:f32,\n};\nstruct SimParams { time:f32, currentPositionX:f32,currentPositionY:f32,currentPositionZ:f32, minLife:f32,maxLife:f32, minStartX:f32,maxStartX:f32,minEndX:f32,maxEndX:f32,easeX:f32, minStartY:f32,maxStartY:f32,minEndY:f32,maxEndY:f32,easeY:f32, minStartZ:f32,maxStartZ:f32,minEndZ:f32,maxEndZ:f32,easeZ:f32, minStartAlpha:f32,maxStartAlpha:f32,minEndAlpha:f32,maxEndAlpha:f32,easeAlpha:f32, minStartScale:f32,maxStartScale:f32,minEndScale:f32,maxEndScale:f32,easeScale:f32, minStartRotationX:f32,maxStartRotationX:f32,minEndRotationX:f32,maxEndRotationX:f32,easeRotationX:f32, minStartRotationY:f32,maxStartRotationY:f32,minEndRotationY:f32,maxEndRotationY:f32,easeRotationY:f32, minStartRotationZ:f32,maxStartRotationZ:f32,minEndRotationZ:f32,maxEndRotationZ:f32,easeRotationZ:f32,\n};\n@group(0) @binding(0) var<uniform> params:SimParams;\n@group(0) @binding(1) var<storage,read_write> particles:array<Particle>;\n@group(0) @binding(2) var<storage,read_write> infoPosition:array<InfoGroup>;\n@group(0) @binding(3) var<storage,read_write> infoRotation:array<InfoGroup>;\n@group(0) @binding(4) var<storage,read_write> infoScale:array<Info>;\n@group(0) @binding(5) var<storage,read_write> infoAlpha:array<Info>;\nconst PI:f32=3.141592653589793;\nconst HPI:f32=PI * 0.5;\nconst PI2:f32=PI * 2.0;\nfn calEasing(n:f32,easingType:f32) -> f32 { var m:f32=n; let easingInt:i32=i32(easingType); switch (easingInt) { case 0:{ m=m;} case 1:{ m=m * m * m * m * m;} case 2:{ m -=1.0; m=(m * m * m * m * m) + 1.0; } case 3:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=0.5 * (m * m * m * m * m + 2.0); } } case 4:{ m=m * m * (m * 1.70158 + m - 1.70158);} case 5:{ m -=1.0; m=m * m * (m * 1.70158 + m + 1.70158) + 1.0; } case 6:{ if(m * 2.0 < 1.0) { m *=2.0; m=0.5 * m * m * (m * 1.70158 + m - 1.70158); } else { m=m * 2.0 - 2.0; m=0.5 * m * m * (m * 1.70158 + m + 1.70158) + 1.0; } } case 7:{ m=-1.0 * (sqrt(1.0 - m * m) - 1.0);} case 8:{ m -=1.0; m=sqrt(1.0 - m * m); } case 9:{ if(m * 2.0 < 1.0) { m *=2.0; m=-0.5 * (sqrt(1.0 - m * m) - 1.0); } else { m=m * 2.0 - 2.0; m=0.5 * sqrt(1.0 - m * m) + 0.5; } } case 10:{ m=m * m * m;} case 11:{ m -=1.0; m=m * m * m + 1.0; } case 12:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=0.5 * (m * m * m + 2.0); } } case 13:{ if (m==0.0) { m=0.0;} else { m=pow(2.0,10.0 * (m - 1.0));} } case 14:{ if (m==1.0) { m=1.0;} else { m=-pow(2.0,-10.0 * m) + 1.0;} } case 15:{ if(m * 2.0 < 1.0) { if (m==0.0) { m=0.0;} else { m *=2.0;m=0.5 * pow(2.0,10.0 * (m - 1.0));} } else { if (m==2.0) { m=1.0;} else { m=m * 2.0 - 1.0;m=-0.5 * pow(2.0,-10.0 * m) + 1.0;} } } case 16:{ m=m * m;} case 17:{ m=(2.0 - m) * m;} case 18:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * 0.5; } else { m=2.0 - m; m=0.5 * (m * m + 1.0); } } case 19:{ m=m * m * m * m;} case 20:{ m -=1.0; m=1.0 - (m * m * m * m); } case 21:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=1.0 - (m * m * m * m * 0.5); } } case 22:{ m=-cos(m * HPI) + 1.0;} case 23:{ m=sin(m * HPI);} case 24:{ m=(-cos(m * PI) + 1.0) * 0.5;} case 25:{ if (m==0.0) { m=0.0;} else if (m==1.0) { m=1.0;} else { m -=1.0;m=-1.0 * pow(2.0,10.0 * m) * sin((m - 0.075) * (PI2)/0.3);} } case 26:{ if (m==0.0) { m=0.0; } else if (m==1.0) { m=1.0; } else { m -=1.0; m=-pow(2.0,10.0 * m) * sin((m - 0.075) * PI2/0.3); } } case 27:{ if (m==0.0) { m=0.0; } else if (m==1.0) { m=1.0; } else { m=pow(2.0,-10.0 * m) * sin((m - 0.075) * PI2/0.3) + 1.0; } } default:{ m=m;} } return m;\n}\nfn rand(n:f32) -> f32 { return fract(sin(n) * 43758.5453123);\n}\nfn randomRange(min:f32,max:f32,v:f32)->f32\n{ var newValue:f32=rand(v); return (newValue * (max-min)) + min;\n}\nfn compute_value(tInfo:Info,lifeRatio:f32) -> f32 { return tInfo.startValue + ((tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio,tInfo.easeType));\n}\n@compute @workgroup_size(256,1,1)\nfn main( @builtin(global_invocation_id) global_id:vec3<u32> ) { let index:u32=(global_id.x); let age:f32=(params.time - particles[index].startTime); var lifeRatio:f32=(age/particles[index].life); if (lifeRatio >=1.0 ) { let uuid:f32=(params.time + f32(index)); particles[index].startTime=params.time; particles[index].life=randomRange( params.minLife,params.maxLife,uuid ); infoPosition[index].infoX.startValue=randomRange( params.minStartX + params.currentPositionX,params.maxStartX + params.currentPositionX,(uuid + 1.0) ); infoPosition[index].infoX.endValue=randomRange( params.minEndX + params.currentPositionX,params.maxEndX + params.currentPositionX,(uuid + 2.0) ); infoPosition[index].infoX.easeType=params.easeX; infoPosition[index].infoX.birthCenterValue=params.currentPositionX; infoPosition[index].infoY.startValue=randomRange( params.minStartY +params.currentPositionY,params.maxStartY+params.currentPositionY,(uuid + 3.0) ); infoPosition[index].infoY.endValue=randomRange( params.minEndY+params.currentPositionY,params.maxEndY+params.currentPositionY,(uuid + 4.0) ); infoPosition[index].infoY.easeType=params.easeY; infoPosition[index].infoY.birthCenterValue=params.currentPositionY; infoPosition[index].infoZ.startValue=randomRange( params.minStartZ+params.currentPositionZ,params.maxStartZ+params.currentPositionZ,(uuid + 5.0) ); infoPosition[index].infoZ.endValue=randomRange( params.minEndZ+params.currentPositionZ,params.maxEndZ+params.currentPositionZ,(uuid + 6.0) ); infoPosition[index].infoZ.easeType=params.easeZ; infoPosition[index].infoZ.birthCenterValue=params.currentPositionZ; infoAlpha[index].startValue=randomRange( params.minStartAlpha,params.maxStartAlpha,(uuid + 7.0) ); infoAlpha[index].endValue=randomRange( params.minEndAlpha,params.maxEndAlpha,(uuid + 8.0) ); infoAlpha[index].easeType=params.easeAlpha; infoScale[index].startValue=randomRange( params.minStartScale,params.maxStartScale,(uuid + 9.0) ); infoScale[index].endValue=randomRange( params.minEndScale,params.maxEndScale,(uuid + 10.0)); infoScale[index].easeType=params.easeScale; infoRotation[index].infoX.startValue=randomRange( params.minStartRotationX,params.maxStartRotationX,(uuid + 11.0)); infoRotation[index].infoX.endValue=randomRange( params.minEndRotationX,params.maxEndRotationX,(uuid + 12.0)); infoRotation[index].infoX.easeType=params.easeRotationX; infoRotation[index].infoY.startValue=randomRange( params.minStartRotationY,params.maxStartRotationY,(uuid + 13.0)); infoRotation[index].infoY.endValue=randomRange( params.minEndRotationY,params.maxEndRotationY,(uuid + 14.0)); infoRotation[index].infoY.easeType=params.easeRotationY; infoRotation[index].infoZ.startValue=randomRange( params.minStartRotationZ,params.maxStartRotationZ,(uuid + 15.0)); infoRotation[index].infoZ.endValue=randomRange( params.minEndRotationZ,params.maxEndRotationZ,(uuid + 16.0)); infoRotation[index].infoZ.easeType=params.easeRotationZ; lifeRatio=0.0; } var targetInfo:Info; let targetParticle=particles[index]; targetInfo=infoPosition[index].infoX; particles[index].valuePosition.x=compute_value(targetInfo,lifeRatio); targetInfo=infoPosition[index].infoY; particles[index].valuePosition.y=compute_value(targetInfo,lifeRatio); targetInfo=infoPosition[index].infoZ; particles[index].valuePosition.z=compute_value(targetInfo,lifeRatio); targetInfo=infoAlpha[index]; particles[index].valueAlpha=compute_value(targetInfo,lifeRatio); targetInfo=infoScale[index]; particles[index].valueScale=compute_value(targetInfo,lifeRatio); targetInfo=infoRotation[index].infoX; particles[index].valueRotation.x=compute_value(targetInfo,lifeRatio) * PI/180.0; targetInfo=infoRotation[index].infoY; particles[index].valueRotation.y=compute_value(targetInfo,lifeRatio) * PI/180.0; targetInfo=infoRotation[index].infoZ; particles[index].valueRotation.z=compute_value(targetInfo,lifeRatio) * PI/180.0;\n}\n"},H=i.resourceManager.createGPUShaderModule("PARTICLE_EMITTER_MODULE",k);const z=[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}],W=[{binding:0,resource:{buffer:this.#fc,offset:0,size:this.#mc.byteLength}}];L.forEach((i,g)=>{z.push({binding:g+1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}),W.push({binding:g+1,resource:{buffer:this.#dc[g],offset:0,size:i.byteLength}})});const q=i.gpuDevice.createBindGroupLayout({entries:z}),be=i.gpuDevice.createPipelineLayout({bindGroupLayouts:[q]});this.#pc=i.gpuDevice.createBindGroup({layout:q,entries:W}),this.#Yi=i.gpuDevice.createComputePipeline({label:"PARTICLE_EMITTER_PIPELINE",layout:be,compute:{module:H,entryPoint:"main"}})}#Ea(){this.#mc=new Float32Array(46);let i={size:this.#mc.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};const{gpuDevice:g}=this.redGPUContext;this.#fc=g.createBuffer(i),g.queue.writeBuffer(this.#fc,0,this.#mc),this.#xc(),this.depthStencilState.depthWriteEnabled=!1}#_c(i){const g=this.localToWorld(this.x,this.y,this.z);this.#mc.set([i,...g,this.#Ml,this.#wl,this.#Rl,this.#Bl,this.#Ll,this.#Al,this.#ic,this.#Cl,this.#El,this.#Ul,this.#kl,this.#ac,this.#Pl,this.#Il,this.#Dl,this.#Ol,this.#sc,this.#Gl,this.#Nl,this.#Vl,this.#Fl,this.#oc,this.#Hl,this.#zl,this.#$l,this.#Kl,this.#uc,this.#Xl,this.#Yl,this.#Jl,this.#tc,this.#lc,this.#Wl,this.#ql,this.#Ql,this.#nc,this.#cc,this.#jl,this.#Zl,this.#ec,this.#rc,this.#hc],0);const{gpuDevice:x}=this.redGPUContext;x.queue.writeBuffer(this.#fc,0,this.#mc);const _=x.createCommandEncoder({}),v=_.beginComputePass();v.setPipeline(this.#Yi),v.setBindGroup(0,this.#pc),v.dispatchWorkgroups(Math.ceil(this.#gc/256)),v.end(),x.queue.submit([_.finish()])}}function mixInMesh2D(i){const g=class extends i{#Sl=0;#vc=wr.NORMAL;get blendMode(){const i=Object.entries(wr).find(([,i])=>i===this.#vc);if(!i)throw new Error(`Invalid blendMode value:${this.#vc}`);return i[0]}set blendMode(i){let g;if("string"==typeof i){if(!(i in wr))throw new Error(`Invalid blendMode key:${i}`);g=wr[i]}else{if("number"!=typeof i||!Object.values(wr).includes(i))throw new Error(`Invalid blendMode:${i}`);g=i}this.#vc=g,this.#bc(g)}get rotation(){return this.#Sl}set rotation(i){this.#Sl=i,super.rotationZ=i}setScale(i,g){g=g??i,super.setScale(i,g,1)}setPosition(i,g){g=g??i,super.setPosition(i,g,0)}setRotation(i){this.rotation=i}#bc(i){const{blendColorState:g,blendAlphaState:x}=this._material;switch(i){case wr.NORMAL:g.operation=tn.ADD,g.srcFactor=en.SRC_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA,x.operation=tn.ADD,x.srcFactor=en.SRC_ALPHA,x.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case wr.MULTIPLY:g.operation=tn.ADD,g.srcFactor=en.ONE_MINUS_DST_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA,x.operation=tn.ADD,x.srcFactor=en.SRC_ALPHA,x.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case wr.LIGHTEN:g.operation=tn.MAX,g.srcFactor=en.ONE,g.dstFactor=en.ONE,x.operation=tn.ADD,x.srcFactor=en.SRC_ALPHA,x.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case wr.SCREEN:g.operation=tn.ADD,g.srcFactor=en.ONE,g.dstFactor=en.ONE_MINUS_SRC,x.operation=tn.ADD,x.srcFactor=en.SRC_ALPHA,x.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case wr.LINEAR_DODGE:g.operation=tn.ADD,g.srcFactor=en.ONE,g.dstFactor=en.ONE,x.operation=tn.ADD,x.srcFactor=en.SRC_ALPHA,x.dstFactor=en.ONE;break;case wr.SUBTRACT:g.operation=tn.REVERSE_SUBTRACT,g.srcFactor=en.SRC_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA,x.operation=tn.REVERSE_SUBTRACT,x.srcFactor=en.ONE,x.dstFactor=en.ONE;break;case wr.DIFFERENCE:g.operation=tn.SUBTRACT,g.srcFactor=en.ONE,g.dstFactor=en.ONE,x.operation=tn.SUBTRACT,x.srcFactor=en.ONE,x.dstFactor=en.ONE;break;case wr.EXCLUSION:g.operation=tn.ADD,g.srcFactor=en.ONE_MINUS_DST_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA,x.operation=tn.ADD,x.srcFactor=en.ONE,x.dstFactor=en.ONE;break;default:console.warn(`Unsupported blend mode:${i}`)}}};return Object.defineProperty(g.prototype,"is2DMeshType",{value:!0,writable:!1}),g}Object.defineProperty(ParticleEmitter.prototype,"meshType",{value:"particle",writable:!1}),q.defineByPreset(ParticleEmitter,[q.PRESET_BOOLEAN.USE_BILLBOARD]),q.definePositiveNumber(ParticleEmitter,[]),Object.freeze(ParticleEmitter);const ai=mixInMesh2D(Mesh);class Sprite2D extends ai{#ni=1;#ri=1;constructor(i,g){super(i,new Plane(i,1,1,1,1,1,!0),g),this.primitiveState.cullMode=tr.FRONT}get width(){return this.#ni}set width(i){validatePositiveNumberRange(i),this.#ni=i,this.dirtyTransform=!0}get height(){return this.#ri}set height(i){validatePositiveNumberRange(i),this.#ri=i,this.dirtyTransform=!0}get material(){return this._material}set material(i){consoleAndThrowError("Sprite2D can not change material")}setSize(i,g){this.width=i,this.height=void 0!==g?g:i}}Object.freeze(Sprite2D);var si="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, billboardFixedScale:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_positionVec4=vec4<f32>(input_position,1.0); let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0); let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useBillboard {  let projectionModelMatrix=u_projectionMatrix * u_modelMatrix; let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix); let billboardNormalMatrix=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix); if (u_useBillboardPerspective==1) { position=billboardMatrix * input_positionVec4; normalPosition=billboardNormalMatrix * input_vertexNormalVec4; } else { position=billboardMatrix * input_positionVec4; normalPosition=billboardNormalMatrix * input_vertexNormalVec4; } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio; let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0); output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * input_positionVec4; normalPosition=u_cameraMatrix * u_normalModelMatrix * input_vertexNormalVec4; output.position=u_projectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix; let u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); var position:vec4<f32>; output.position=u_directionalLightProjectionViewMatrix * u_modelMatrix * input_positionVec4; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_cameraMatrix=systemUniforms.camera.cameraMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); let u_resolution=systemUniforms.resolution; var position:vec4<f32>; if (u_useBillboard==1) { let projectionModelMatrix=u_projectionMatrix * u_modelMatrix; let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix); if (u_useBillboardPerspective==1) { position=billboardMatrix * input_positionVec4; } else { position=billboardMatrix * input_positionVec4; } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio; let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0); output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * input_positionVec4; output.position=u_projectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const oi=parseWGSL(si),ui=oi.uniforms.vertexUniforms;class Sprite3D extends Mesh{constructor(i,g,x){super(i),this._geometry=x||new Plane(i),this._material=g,this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.primitiveState.cullMode=tr.NONE}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_3D",oi,ui,si)}}q.defineByPreset(Sprite3D,[[q.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[q.PRESET_BOOLEAN.USE_BILLBOARD,!0],[q.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(Sprite3D);class ASpriteSheet extends Mesh{#yc=0;#Tc=0;#Sc=0;#Mc=!0;#wc=!0;#Rc;#Cc;#Pc="play";constructor(i,g,x){super(i),this.#Cc=x,this._material=new BitmapMaterial(i),this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.spriteSheetInfo=g,this._material.diffuseTextureSampler=new Sampler(i),this._material.diffuseTextureSampler.addressModeU=un.REPEAT,this._material.diffuseTextureSampler.addressModeV=un.REPEAT}get state(){return this.#Pc}get loop(){return this.#wc}set loop(i){this.#wc=i}get frameRate(){return this.#yc}set frameRate(i){i<0&&(i=0),0===this.#yc&&i&&(this.#Tc=0),this.#yc=i,this.#Sc=1e3/this.#yc}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("ASpriteSheet can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("ASpriteSheet can not change material")}get spriteSheetInfo(){return this.#Rc}set spriteSheetInfo(i){this.#Rc=i,this.frameRate=i.frameRate,this.segmentW=i.segmentW,this.segmentH=i.segmentH,this.totalFrame=i.totalFrame,this.currentIndex=i.startIndex,this.#wc=!0,this.#Tc=0,this._material.diffuseTexture=i.texture}play(){this.#Mc=!0,this.#Pc="play",this.#Tc=0}pause(){this.#Mc=!1,this.#Pc="pause"}stop(){this.#Mc=!1,this.currentIndex=0,this.#Pc="stop"}render(i){const{diffuseTexture:g}=this._material;this.#Cc(g,this.segmentW,this.segmentH);const{timestamp:x}=i;if(this.#Tc||(this.#Tc=this.#Sc+x),this.#Mc&&this.#Tc<x&&this.#yc){const i=Math.floor((x-this.#Tc)/this.#Sc),g=(Number.isFinite(i)?i:0)||1;this.#Tc=this.#Sc+x,this.currentIndex+=g,this.currentIndex>=this.totalFrame&&(this.loop?(this.#Mc=!0,this.currentIndex=0):(this.#Mc=!1,this.currentIndex=this.totalFrame-1))}super.render(i)}}q.definePositiveNumber(ASpriteSheet,[["segmentW",5],["segmentH",3],["totalFrame",15],["currentIndex",0]]),Object.freeze(ASpriteSheet);var li="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, segmentW:f32, segmentH:f32, totalFrame:f32, currentIndex:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.combinedOpacity=vertexUniforms.combinedOpacity; let uv=vec2<f32>( input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW), input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH) ); output.uv=uv; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const ci=parseWGSL(li),hi=ci.uniforms.vertexUniforms,fi=mixInMesh2D(ASpriteSheet);class SpriteSheet2D extends fi{#ni=1;#ri=1;constructor(i,g){super(i,g,(i,g,x)=>{if(i){const{gpuTexture:_}=i,v=_?.width/g,b=_?.height/x;v===this.#ni&&b===this.#ri||(this.#ni=_?.width/g,this.#ri=_?.height/x,this.dirtyTransform=!0)}else this.#ni=1,this.#ri=1}),this._geometry=new Plane(i,1,1,1,1,1,!0),this.primitiveState.cullMode=tr.FRONT}get width(){return this.#ni}get height(){return this.#ri}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_2D",ci,hi,li)}}Object.freeze(SpriteSheet2D);var di="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, segmentW:f32, segmentH:f32, totalFrame:f32, currentIndex:f32, billboardFixedScale:f32, _renderRatioX:f32, _renderRatioY:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let u_renderRatioX=vertexUniforms._renderRatioX; let u_renderRatioY=vertexUniforms._renderRatioY; var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>( u_renderRatioX,0,0,0, 0,u_renderRatioY,0,0, 0,0,1,0, 0,0,0,1 ); let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useBillboard { if (u_useBillboardPerspective==1) { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); } else { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX; let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY; output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.combinedOpacity=vertexUniforms.combinedOpacity; let uv=vec2<f32>( input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW), input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH) ); output.uv=uv; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_cameraMatrix=systemUniforms.camera.cameraMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let u_renderRatioX=vertexUniforms._renderRatioX; let u_renderRatioY=vertexUniforms._renderRatioY; var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>( u_renderRatioX,0,0,0, 0,u_renderRatioY,0,0, 0,0,1,0, 0,0,0,1 ); let input_position=inputData.position; let u_resolution=systemUniforms.resolution; var position:vec4<f32>; if (u_useBillboard==1) { if (u_useBillboardPerspective==1) { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); } else { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX; let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY; output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0); output.position=u_projectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const mi=parseWGSL(di),pi=mi.uniforms.vertexUniforms;class SpriteSheet3D extends ASpriteSheet{#Fs=1;#Hs=1;constructor(i,g){super(i,g,(i,g,x)=>{if(i){const{gpuTexture:_}=i,v=_?.width/g,b=_?.height/x;v===this.#Fs&&b===this.#Hs||(this.#Fs=_?.width/g,this.#Hs=_?.height/x,this.#Hs>this.#Fs?(this._renderRatioX=1,this._renderRatioY=this.#Hs/this.#Fs):(this._renderRatioX=this.#Fs/this.#Hs,this._renderRatioY=1),this.dirtyTransform=!0)}else this.#Fs=1,this.#Hs=1}),this._geometry=new Plane(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_3D",mi,pi,di)}}q.definePositiveNumber(SpriteSheet3D,[["_renderRatioX",1],["_renderRatioY",1]]),q.defineByPreset(SpriteSheet3D,[[q.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[q.PRESET_BOOLEAN.USE_BILLBOARD,!0],[q.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(SpriteSheet3D);class SpriteSheetInfo{#Bc=0;#Ec=0;#Ic=0;#Lc=0;#yc=0;#wc=!0;#Uc;constructor(i,g,x,_,v,b,y=!0,S=60){validateRedGPUContext(i),validateUintRange(x),validateUintRange(_),validateUintRange(v),validateUintRange(b),validateUintRange(S),this.#Bc=x,this.#Ec=_,this.#Ic=v,this.#Lc=b,this.#Uc=new BitmapTexture(i,g),this.#wc=y,this.#yc=S}get segmentW(){return this.#Bc}get segmentH(){return this.#Ec}get totalFrame(){return this.#Ic}get startIndex(){return this.#Lc}get texture(){return this.#Uc}get frameRate(){return this.#yc}get loop(){return this.#wc}}Object.freeze(SpriteSheetInfo);const gi=parseWGSL("#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { opacity:f32\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexColor:vec4<f32>, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; output.color=inputData.vertexColor; output.gBufferMotionVector=vec4<f32>( 0.0,0.0,1.0,1.0 ); return output;\n}\n");class LineMaterial extends ABaseMaterial{constructor(i,g){super(i,"LINE_MATERIAL",gi,2),g&&(this.name=g),this.initGPURenderInfos()}}Object.freeze(LineMaterial);class LinePoint{position;colorRGBA;constructor(i=0,g=0,x=0,_){this.position=[i,g,x],this.colorRGBA=_}}const getPointsOnBezierCurveWithSplitting=(i,g,x,_)=>{let v=_||[];if(((i,g)=>{let x=i[g].position,_=i[g+1].position,v=i[g+2].position,b=i[g+3].position,y=3*_[0]-2*x[0]-b[0],S=3*_[1]-2*x[1]-b[1],w=3*v[0]-2*b[0]-x[0],L=3*v[1]-2*b[1]-x[1];return y*=y,S*=S,w*=w,L*=L,y<w&&(y=w),S<L&&(S=L),y+S})(i,g)<x)v.push(i[g],i[g+3]);else{let _=.5,b=i[g],y=i[g+1],S=i[g+2],w=i[g+3],L=lerp$1(create$1(),b.position,y.position,_),k=lerp$1(create$1(),y.position,S.position,_),H=lerp$1(create$1(),S.position,w.position,_),z=lerp$1(create$1(),L,k,_),W=lerp$1(create$1(),k,H,_),q=lerp$1(create$1(),z,W,_);q=new LinePoint(q[0],q[1],q[2],b.colorRGBA),L=new LinePoint(L[0],L[1],L[2],L.colorRGBA),H=new LinePoint(H[0],H[1],H[2],H.colorRGBA),z=new LinePoint(z[0],z[1],z[2],z.colorRGBA),W=new LinePoint(W[0],W[1],W[2],W.colorRGBA),getPointsOnBezierCurveWithSplitting([b,L,z,q],0,x,v),getPointsOnBezierCurveWithSplitting([q,W,H,w],0,x,v)}return v};class LinePointWithInOut{inLinePoint;linePoint;outLinePoint;constructor(i=0,g=0,x=0,_=0,v=0,b=0,y=0,S=0,w=0,L,k){let H=[...convertHexToRgb(L,!0)];H=[H[0]/255,H[1]/255,H[2]/255,k],this.inLinePoint=new LinePoint(_,v,b,H),this.linePoint=new LinePoint(i,g,x,H),this.outLinePoint=new LinePoint(y,S,w,H)}}const lineVec2DistanceToSegmentSq=function(i,g,x){i=[i[0],i[1]],g=[g[0],g[1]],x=[x[0],x[1]];let _=sqrDist(g,x);if(0===_)return sqrDist(i,g);let v=((i[0]-g[0])*(x[0]-g[0])+(i[1]-g[1])*(x[1]-g[1]))/_;return v=Math.max(0,Math.min(1,v)),sqrDist(i,function(i,g,x,_){var v=g[0],b=g[1];return i[0]=v+_*(x[0]-v),i[1]=b+_*(x[1]-b),i}([0,0],g,x,v))},lineSimplifyPoints=(i,g,x,_,v)=>{let b=v||[],y=i[g],S=i[x-1],w=0,L=1,k=g+1;for(;k<x-1;++k){let g=lineVec2DistanceToSegmentSq(i[k].position,y.position,S.position);g>w&&(w=g,L=k)}return Math.sqrt(w)>_?(lineSimplifyPoints(i,g,L+1,_,b),lineSimplifyPoints(i,L,x,_,b)):b.push(y,S),b},xi={LINEAR:"linear",CATMULL_ROM:"catmullRom",BEZIER:"bezier"};Object.freeze(xi);var _i="#redgpu_include SYSTEM_UNIFORM;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexColor:vec4<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexColor:vec4<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let input_position=inputData.position; let input_vertexColor=inputData.vertexColor; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); output.position=u_noneJitterProjectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexColor=input_vertexColor; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; return output;\n}\n";const vi=parseWGSL(_i),bi=vi.uniforms.vertexUniforms;class Line3D extends Mesh{baseColor;#Dc;#Ac=1;#kc=.01;#zr=.01;#Oc=[];#Gc=[];#Nc;constructor(i,g=xi.LINEAR,x="#fff"){super(i),this.primitiveState.topology=Xe.LINE_STRIP,this.baseColor=x,this.#Dc=g,this._geometry=new Geometry(i,new VertexBuffer(i,this.#Oc,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4}))),this._material=new LineMaterial(i)}get originalPoints(){return this.#Gc}get type(){return this.#Dc}set type(i){this.#Dc=i,this.#Vc()}get interleaveData(){return this.#Oc}get tension(){return this.#Ac}set tension(i){validatePositiveNumberRange(i),this.#Ac=i,this.#Vc()}get tolerance(){return this.#kc}set tolerance(i){validatePositiveNumberRange(i),this.#kc=i,this.#Vc()}get distance(){return this.#zr}set distance(i){validatePositiveNumberRange(i),this.#zr=i,this.#Vc()}get numPoints(){return this.#Gc.length}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_3D",vi,bi,_i)}addPoint(i=0,g=0,x=0,_=this.baseColor,v=1,b=0,y=0,S=0,w=0,L=0,k=0){this.#Gc.push(new LinePointWithInOut(i,g,x,b,y,S,w,L,k,_,v)),this.#Vc()}addPointAt(i,g=0,x=0,_=0,v=this.baseColor,b=1,y=0,S=0,w=0,L=0,k=0,H=0){this.#Gc.length<i&&(i=this.#Gc.length),null!=i?this.#Gc.splice(i,0,new LinePointWithInOut(g,x,_,y,S,w,L,k,H,v,b)):this.#Gc.push(new LinePointWithInOut(g,x,_,y,S,w,L,k,H,v,b)),this.#Vc()}removePointAt(i){validateUintRange(i),this.#Gc[i]?this.#Gc.splice(i,1):consoleAndThrowError("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값:"+i),this.#Vc()}removeAllPoint(){this.#Gc.length=0,this.#Vc()}#Y(){if(this._geometry,this.#Gc.length){const{redGPUContext:i}=this;this._geometry=new Geometry(i,new VertexBuffer(i,this.#Oc,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4})))}this.dirtyPipeline=!0}#Vc(){const i=this.#Gc,g=this.#Ac,x=this.#kc,_=this.#zr;let v,b,y,S;switch(this.#Oc.length=0,this.#Dc){case xi.CATMULL_ROM:case xi.BEZIER:if(i.length>1)for(this.#Nc=(i=>{let g,x=[],_=0,v=0;const b=i.length;for(;_<b;_++){g=i[_];const{inLinePoint:b,linePoint:y,outLinePoint:S}=g;0===v?(x[v++]=y,x[v++]=S):(x[v++]=b,x[v++]=y,i[_+1]&&(x[v++]=S))}return x})(xi.CATMULL_ROM===this.#Dc?((i,g=1)=>{const x=i.length,_=x-2;for(let v=0;v<x-1;v++){const x=v?i[v-1].linePoint.position:i[v].linePoint.position,b=i[v].linePoint.position,y=i[v+1].linePoint.position,S=v===_?y:i[v+2].linePoint.position;i[v].outLinePoint.position=[b[0]+(y[0]-x[0])/6*g,b[1]+(y[1]-x[1])/6*g,b[2]+(y[2]-x[2])/6*g],i[v+1].inLinePoint.position=[y[0]-(S[0]-b[0])/6*g,y[1]-(S[1]-b[1])/6*g,y[2]-(S[2]-b[2])/6*g]}return i})(i,g):i),v=((i,g)=>{let x=[],_=(i.length-1)/3;_=Math.floor(_);let v,b=0;for(;b<_;++b)v=3*b,getPointsOnBezierCurveWithSplitting(i,v,g,x);return x})(this.#Nc,x),v=lineSimplifyPoints(v,0,v.length,_),b=0,y=v.length;b<y;b++)S=v[b],this.#Oc.push(...S.position,...S.colorRGBA);else this.#Oc.push(0,0,0,1,1,1,1);break;default:for(b=0,y=i.length;b<y;b++){const{linePoint:g}=i[b],x=g.colorRGBA;this.interleaveData.push(...g.position,...x)}}this.#Y()}}Object.freeze(Line3D);const yi=parseWGSL(_i),Ti=yi.uniforms.vertexUniforms;var Si="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Mi=parseWGSL(Si),wi=Mi.uniforms.vertexUniforms,Ri=mixInMesh2D(ATextField);class TextField2D extends Ri{#ni=1;#ri=1;#Fc=!0;constructor(i,g=!0){super(i,(i,g)=>{this.#ni=i,this.#ri=g},!1),this._geometry=new Plane(i,1,1,1,1,1,!0),this.useSmoothing=g,this.primitiveState.cullMode=tr.FRONT}get useSmoothing(){return this.#Fc}set useSmoothing(i){this.#Fc=i,this.useSmoothing?(this._material.diffuseTextureSampler.minFilter=ln.LINEAR,this._material.diffuseTextureSampler.magFilter=ln.LINEAR,this._material.diffuseTextureSampler.mipmapFilter=cn.LINEAR):(this._material.diffuseTextureSampler.minFilter=ln.NEAREST,this._material.diffuseTextureSampler.magFilter=ln.NEAREST,this._material.diffuseTextureSampler.mipmapFilter=null)}get width(){return this.#ni}get height(){return this.#ri}get geometry(){return this._geometry}set geometry(i){console.error("TextField2D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_2D",Mi,wi,Si)}}Object.freeze(TextField2D);var Ci=Object.freeze({__proto__:null,Group2D:Group2D,Group3D:Group3D,InstancingMesh:InstancingMesh,LINE_TYPE:xi,Line2D:class extends Line3D{constructor(i,g=xi.LINEAR,x="#fff"){super(i,g,x),this._material=new LineMaterial(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_2D",yi,Ti,_i)}addPoint(i=0,g=0,x=this.baseColor,_=1,v=0,b=0,y=0,S=0){super.addPoint(i,g,0,x,_,v,b,0,y,S,0)}addPointAt(i,g=0,x=0,_=this.baseColor,v=1,b=0,y=0,S=0,w=0){super.addPointAt(i,g,x,0,_,v,b,y,0,S,w,0)}},Line3D:Line3D,Mesh:Mesh,Object3DContainer:Object3DContainer,PARTICLE_EASE:ti,ParticleEmitter:ParticleEmitter,Scene:Scene,SkyBox:class{modelMatrix=create$2();gpuRenderInfo;#Hc=!0;#zc;#at;#b;#rr;#ir;#$c;#Kc;#Xc=0;#Wc=0;#jc=0;constructor(i,g){validateRedGPUContext(i),this.#b=i,this.#zc=new Box(i),this.#$c=g,this.#at=new SkyBoxMaterial(i,this.#$c),this.#rr=new PrimitiveState(this),this.#rr.cullMode=tr.NONE,this.#ir=new DepthStencilState(this)}get transitionDuration(){return this.#Wc}get transitionElapsed(){return this.#jc}get transitionProgress(){return this.#at.transitionProgress}get blur(){return this.#at.blur}set blur(i){validatePositiveNumberRange(1,0,1),this.#at.blur=i}get exposure(){return this.#$c instanceof HDRTexture?this.#$c.exposure:1}set exposure(i){validatePositiveNumberRange(1),this.#$c instanceof HDRTexture&&(this.#$c.exposure=i)}get opacity(){return this.#at.opacity}set opacity(i){validatePositiveNumberRange(1,0,1),this.#at.opacity=i}get skyboxTexture(){return this.#$c}set skyboxTexture(i){i?(this.#$c=i,this.#at.skyboxTexture=i):consoleAndThrowError("SkyBox requires a valid CubeTexture | HDRTexture")}get transitionTexture(){return this.#Kc}transition(i,g=300,x){this.#Kc=i,this.#at.transitionTexture=i,this.#Wc=g,this.#Xc=performance.now(),this.#at.transitionAlphaTexture=x}render(i){const{currentRenderPassEncoder:g,startTime:x}=i;if(this.#Yc(),this.gpuRenderInfo||this.#Wu(this.#b),this.#Hc&&(this.gpuRenderInfo.pipeline=this.#qc(),this.#Hc=!1,i.numDirtyPipelines++),this.#Xc)if(this.#jc=Math.max(x-this.#Xc,0),this.#jc>this.#Wc)this.#Xc=0,this.#at.transitionProgress=0,this.skyboxTexture=this.#Kc,this.#at.transitionTexture=null,this.#Hc=!0;else{const i=this.#jc/this.#Wc;this.#at.transitionProgress=i<0?0:i>1?1:i}const{gpuRenderInfo:_}=this,{vertexUniformBindGroup:v,pipeline:b}=_,{indexBuffer:y}=this.#zc,{triangleCount:S,indexNum:w}=y;g.setPipeline(b),g.setVertexBuffer(0,this.#zc.vertexBuffer.gpuBuffer),g.setBindGroup(1,v),g.setBindGroup(2,this.#at.gpuRenderInfo.fragmentUniformBindGroup),g.setIndexBuffer(y.gpuBuffer,"uint32"),g.drawIndexed(y.indexNum,1,0,0,0),i.num3DObjects++,i.numDrawCalls++,i.numTriangles+=S,i.numPoints+=w}#Yc(){const{changedMSAA:i}=this.#b.antialiasingManager;i&&(this.#Hc=!0)}#Wu(i){const{resourceManager:g}=this.#b,x=g.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||g.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(Jr,1)),_=new ArrayBuffer(Qr.arrayBufferByteLength),v=new UniformBuffer(i,_,"SKYBOX_VERTEX_UNIFORM_BUFFER","SKYBOX_VERTEX_UNIFORM_BUFFER");identity(this.modelMatrix),scale(this.modelMatrix,this.modelMatrix,[1e4,1e4,1e4]),v.writeBuffer(Qr.members.modelMatrix,this.modelMatrix);const b={layout:x,label:"VERTEX_BIND_GROUP_DESCRIPTOR_SKYBOX",entries:[{binding:0,resource:{buffer:v.gpuBuffer,offset:0,size:v.size}}]},y=i.gpuDevice.createBindGroup(b);this.gpuRenderInfo=new VertexGPURenderInfo(null,Jr.shaderSourceVariant,Jr.conditionalBlocks,Qr,x,v,y,this.#qc())}#qc(){const{resourceManager:i,gpuDevice:g,antialiasingManager:x}=this.#b,_={code:qr},v={module:i.createGPUShaderModule("VERTEX_MODULE_SKYBOX",_),entryPoint:"main",buffers:this.#zc.gpuRenderInfo.buffers},b=i.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||i.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(Jr,1)),y={bindGroupLayouts:[i.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),b,this.#at.gpuRenderInfo.fragmentBindGroupLayout]},S={label:"PIPELINE_DESCRIPTOR_SKYBOX",layout:i.createGPUPipelineLayout("SKYBOX_PIPELINE_LAYOUT",y),vertex:v,fragment:this.#at.gpuRenderInfo.fragmentState,primitive:this.#rr.state,depthStencil:this.#ir.state,multisample:{count:x.useMSAA?4:1}};return g.createRenderPipeline(S)}},Sprite2D:Sprite2D,Sprite3D:Sprite3D,SpriteSheet2D:SpriteSheet2D,SpriteSheet3D:SpriteSheet3D,SpriteSheetInfo:SpriteSheetInfo,TextField2D:TextField2D,TextField3D:TextField3D,View2D:View2D,View3D:View3D}),Pi=Object.freeze({__proto__:null,AmbientLight:AmbientLight,DirectionalLight:DirectionalLight,PointLight:PointLight,SpotLight:SpotLight});function calculatePositionOnCurve(i,g,x,_,v){const b=Math.cos(i),y=Math.sin(i),S=x/g*i,w=Math.cos(S);v[0]=_*(2+w)*.5*b,v[1]=_*(2+w)*y*.5,v[2]=_*Math.sin(S)*.5}var Bi=Object.freeze({__proto__:null,Box:Box,Circle:class extends Primitive{#cs=function(){return function(i,g,x,_,v,b){const y=[],S=[];y.push(0,0,0,0,0,1,.5,.5);for(let i=0;i<=_;i++){const g=v+i/_*b,S=Math.cos(g),w=Math.sin(g),L=x*S,k=x*w,H=0,z=(S+1)/2,W=(w+1)/2;y.push(L,k,H,0,0,1,z,W)}for(let i=1;i<=_;i++)S.push(0,i,i+1);return createPrimitiveGeometry(g,y,S,i)}}();constructor(i,g=1,x=32,_=0,v=2*Math.PI){if(super(i),x<3)throw new Error("segments must be 3 or greater");if(g<=0)throw new Error("radius must be greater than 0");if(v<=0)throw new Error("thetaLength must be greater than 0");const b=`PRIMITIVE_CIRCLE_R${g}_S${x}_TS${_}_TL${v}`,y=i.resourceManager.cachedBufferState;let S=y[b];S||(S=y[b]=this.#cs(b,i,g,x,_,v)),this._setData(S)}},Cylinder:Cylinder,Ground:class extends Primitive{#cs=function(){const i=[],g=[];return function(x,_,v,b,y,S,w,L){const k=v/2,H=b/2,z=Math.floor(y)||1,W=Math.floor(S)||1,q=z+1,be=W+1,Ke=v/z,Xe=b/W;i.length=0,g.length=0;for(let x=0;x<be;x++){const _=x*Xe-H,v=L?(1-x/W)*w:x/W*w;for(let b=0;b<q;b++){const y=b*Ke-k,S=b/z*w;if(i.push(y,0,_,0,1,0,S,v),x<W&&b<z){const i=b+q*x,_=b+q*(x+1),v=b+1+q*(x+1),y=b+1+q*x;g.push(i,_,y),g.push(_,v,y)}}}return createPrimitiveGeometry(_,i,g,x)}}();constructor(i,g=1,x=1,_=1,v=1,b=1,y=!1){super(i);const S=`PRIMITIVE_GROUND_W${g}_H${x}_WS${_}_HS${v}_UV${b}_FY${y}`,w=i.resourceManager.cachedBufferState;let L=w[S];L||(L=w[S]=this.#cs(S,i,g,x,_,v,b,y)),this._setData(L)}},Plane:Plane,Primitive:Primitive,Sphere:Sphere,Torus:class extends Primitive{#cs=function(){return function(i,g,x,_,v,b,y,S){y=y||0;const w=(S=S||2*Math.PI)-y,L=v+1,k=b+1,H=[],z=[];for(let i=0;i<k;++i){const g=i/b,S=g*Math.PI*2,k=Math.sin(S),z=x+k*_,W=Math.cos(S),q=W*_;for(let i=0;i<L;++i){const x=i/v,_=y+x*w,b=Math.sin(_),S=Math.cos(_),L=b*z,be=S*z,Ke=b*k,Xe=S*k;H.push(L,q,be,Ke,W,Xe,x,1-g)}}for(let i=0;i<b;++i)for(let g=0;g<v;++g){const x=1+g,_=1+i;z.push(L*i+g,L*_+g,L*i+x),z.push(L*_+g,L*_+x,L*i+x)}return createPrimitiveGeometry(g,H,z,i)}}();constructor(i,g=1,x=.5,_=16,v=16,b=0,y=2*Math.PI){if(super(i),_<3)throw new Error("radialSubdivisions must be 3 or greater");if(v<3)throw new Error("verticalSubdivisions must be 3 or greater");const S=`PRIMITIVE_TORUS_R${g}_T${x}_RSD${_}_BSD${v}_SA${b}_EA${y}`,w=i.resourceManager.cachedBufferState;let L=w[S];L||(L=w[S]=this.#cs(S,i,g,x,_,v,b,y)),this._setData(L)}},TorusKnot:class extends Primitive{#cs=function(){return function(i,g,x,_,v,b,y,S){v=Math.floor(v),b=Math.floor(b);const w=[],L=[],k=[],H=[],z=[0,0,0],W=[0,0,0],q=[0,0,0],be=[0,0,0],Ke=[0,0,0];for(let i=0;i<=v;++i){const g=i/v*y*Math.PI*2;calculatePositionOnCurve(g,y,S,x,z),calculatePositionOnCurve(g+.01,y,S,x,W),be[0]=W[0]-z[0],be[1]=W[1]-z[1],be[2]=W[2]-z[2],Ke[0]=W[0]+z[0],Ke[1]=W[1]+z[1],Ke[2]=W[2]+z[2];{const i=be[0],g=be[1],x=be[2],_=Ke[0],v=Ke[1],b=Ke[2];q[0]=g*b-x*v,q[1]=x*_-i*b,q[2]=i*v-g*_}{const i=q[0],g=q[1],x=q[2],_=be[0],v=be[1],b=be[2];Ke[0]=g*b-x*v,Ke[1]=x*_-i*b,Ke[2]=i*v-g*_}{let i=q[0],g=q[1],x=q[2],_=i*i+g*g+x*x;_>0&&(_=1/Math.sqrt(_||1)),q[0]=q[0]*_,q[1]=q[1]*_,q[2]=q[2]*_}{let i=Ke[0],g=Ke[1],x=Ke[2],_=i*i+g*g+x*x;_>0&&(_=1/Math.sqrt(_)),Ke[0]=Ke[0]*_,Ke[1]=Ke[1]*_,Ke[2]=Ke[2]*_}for(let g=0;g<=b;++g){const x=g/b*Math.PI*2,y=-_*Math.cos(x),S=_*Math.sin(x);k[0]=z[0]+(y*Ke[0]+S*q[0]),k[1]=z[1]+(y*Ke[1]+S*q[1]),k[2]=z[2]+(y*Ke[2]+S*q[2]),w.push(k[0],k[1],k[2]);{H[0]=k[0]-z[0],H[1]=k[1]-z[1],H[2]=k[2]-z[2];let i=H[0],g=H[1],x=H[2],_=i*i+g*g+x*x;_>0&&(_=1/Math.sqrt(_)),H[0]=H[0]*_,H[1]=H[1]*_,H[2]=H[2]*_}w.push(H[0],H[1],H[2],i/v,g/b)}}for(let i=1;i<=v;i++)for(let g=1;g<=b;g++){const x=(b+1)*(i-1)+(g-1),_=(b+1)*i+(g-1),v=(b+1)*i+g,y=(b+1)*(i-1)+g;L.push(x,_,y),L.push(_,v,y)}return createPrimitiveGeometry(g,w,L,i)}}();constructor(i,g=1,x=.4,_=64,v=8,b=2,y=3){super(i);const S=`PRIMITIVE_TORUS_NUT_R${g}_T${x}_TS${_}_RS${v}_P${b}_Q${y}`,w=i.resourceManager.cachedBufferState;let L=w[S];L||(L=w[S]=this.#cs(S,i,g,x,_,v,b,y)),this._setData(L)}}});class IBLCubeTexture extends ManagementResourceBase{#_e;#yt;#Tt=!0;#Mt=0;#Rt;constructor(i,g,x){super(i,"managedCubeTextureState"),this.cacheKey=g;const{table:_}=this.targetResourceManagedState;if(g){let i=_.get(g);if(i){return i.texture}x&&this.#Dt(x),this.#It()}}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#yt}}get format(){return this.#Rt}get videoMemorySize(){return this.#Mt}get gpuTexture(){return this.#_e}set gpuTexture(i){this.#Dt(i)}get mipLevelCount(){return this.#yt}get useMipmap(){return this.#Tt}destroy(){const i=this.#_e;this.#Dt(null),this.__fireListenerList(!0),this.#At(),this.cacheKey=null,i&&i.destroy()}#Dt(i){this.targetResourceManagedState.videoMemory-=this.#Mt,this.#_e=i,i&&(this.#yt=i.mipLevelCount,this.#Tt=i.mipLevelCount>1,this.#Rt=i.format,this.#Mt=calculateTextureByteSize(i)),this.targetResourceManagedState.videoMemory+=this.#Mt,this.__fireListenerList()}#It(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateCubeTexture(this))}#At(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}}Object.freeze(IBLCubeTexture);class IBL{#b;#Zc;#Jc;#Qc;#eh;#th;#nh;#v=createUUID();#Rt="rgba8unorm";#rh;#ih;#ah;constructor(i,g,x=1024,_=512){const v=`${g}?key=${x}_${_}`;this.#ah=_,this.#ih=x,this.#b=i,this.#Jc=new IBLCubeTexture(i,`IBL_ENV_${v}`),this.#eh=new IBLCubeTexture(i,`IBL_${v}`),this.#Qc=new IBLCubeTexture(i,`IBL_IRRADIANCE_${v}`),this.#rh="string"==typeof g?new HDRTexture(i,v,i=>{this.#Zc=i.gpuTexture,this.#Ea()},void 0,x,!0):new CubeTexture(i,g,!0,i=>{this.#Zc=i.gpuTexture,this.#Ea()})}get exposure(){if(this.#rh instanceof HDRTexture)return this.#rh.exposure}set exposure(i){validatePositiveNumberRange(i),this.#rh instanceof HDRTexture&&(this.#rh.exposure=i)}get envCubeSize(){return this.#ih}get iblCubeSize(){return this.#ah}get irradianceTexture(){return this.#Qc}get environmentTexture(){return this.#Jc}get iblTexture(){return this.#eh}async#Ea(){Gn("sourceCubeTexture",this.#Zc);const{downSampleCubeMapGenerator:i}=this.#b.resourceManager;if(this.#Zc){if(!this.#eh.gpuTexture){const g=await i.downsampleCubemap(this.#Zc,this.#ah);this.#eh.gpuTexture=g}if(this.#Jc.gpuTexture||(this.#Jc.gpuTexture=this.#Zc),!this.#Qc.gpuTexture){const i=await this.#sh(this.#Zc);this.#Qc.gpuTexture=i}}}async#sh(i){const{gpuDevice:g,resourceManager:x}=this.#b,_=x.createManagedTexture({size:[32,32,6],format:this.#Rt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:1,label:`IBL_${this.#v}_irradianceTexture`}),v=g.createShaderModule({code:"struct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0), vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0) ); var texCoord=array<vec2<f32>,6>( vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0), vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0) ); var output:VertexOutput; output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); output.texCoord=texCoord[vertexIndex]; return output;\n}\n@group(0) @binding(0) var environmentTexture:texture_cube<f32>;\n@group(0) @binding(1) var environmentSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\nconst PI=3.14159265359;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> { let ndc=vec2<f32>( input.texCoord.x * 2.0 - 1.0, 1.0 - input.texCoord.y * 2.0  ); let localDirection=vec3<f32>(ndc.x,ndc.y,1.0); let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz); let normal=worldDirection; var irradiance=vec3<f32>(0.0); var up=vec3<f32>(0.0,1.0,0.0); let tangent=normalize(cross(up,normal)); let bitangent=normalize(cross(normal,tangent)); let sampleCount=32u; let invSampleCount=1.0/f32(sampleCount); for (var i=0u;i < sampleCount;i++) { for (var j=0u;j < sampleCount;j++) { let u1=(f32(i) + 0.5) * invSampleCount; let u2=(f32(j) + 0.5) * invSampleCount; let cosTheta=sqrt(u1); let sinTheta=sqrt(1.0 - u1); let phi=2.0 * PI * u2; let cosPhi=cos(phi); let sinPhi=sin(phi); let sampleVec=vec3<f32>( sinTheta * cosPhi, sinTheta * sinPhi, cosTheta ); let worldSample=sampleVec.x * tangent + sampleVec.y * bitangent + sampleVec.z * normal; let sampleColor=textureSample(environmentTexture,environmentSampler,worldSample); irradiance +=sampleColor.rgb * cosTheta; } } irradiance=irradiance * PI * invSampleCount * invSampleCount; return vec4<f32>(irradiance,1.0);\n}\n"}),b=g.createRenderPipeline({layout:"auto",vertex:{module:v,entryPoint:"vs_main"},fragment:{module:v,entryPoint:"fs_main",targets:[{format:this.#Rt}]}}),y=new Sampler(this.#b,{magFilter:ln.LINEAR,minFilter:ln.LINEAR,mipmapFilter:cn.LINEAR,addressModeU:un.CLAMP_TO_EDGE,addressModeV:un.CLAMP_TO_EDGE,addressModeW:un.CLAMP_TO_EDGE}),S=this.#_l();for(let g=0;g<6;g++)await this.#oh(b,y,g,S[g],i,_);return _}async#oh(i,g,x,_,v,b){const{gpuDevice:y}=this.#b,S=y.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`irradiance_face_${x}_uniform`});y.queue.writeBuffer(S,0,_);const w=y.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:v.createView({dimension:"cube"})},{binding:1,resource:g.gpuSampler},{binding:2,resource:{buffer:S}}]}),L=y.createCommandEncoder({label:`ibl_irradiance_face_${x}_encoder`}),k=L.beginRenderPass({colorAttachments:[{view:b.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:x,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],label:`irradiance_face_${x}_renderpass`});k.setPipeline(i),k.setBindGroup(0,w),k.draw(6,1,0,0),k.end(),y.queue.submit([L.finish()]),S.destroy()}#_l(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}}Object.freeze(IBL);const Ei="managedBitmapTextureState",Ii={animationSpeed:1,animationX:.1,animationY:.1};class ANoiseTexture extends ManagementResourceBase{mipLevelCount;useMipmap;src;#_e;#zt=8;#$t=8;#Ta=1;#Sa;#Ma;#wa;#Ra;#qi;#uh;#ni;#ri;#lh;#ch=0;#hh=1;#fh=Ii.animationX;#dh=Ii.animationY;#Mt=0;constructor(i,g=1024,x=1024,_){super(i,Ei),validateUintRange(g,2,2048),validateUintRange(x,2,2048),this.#ni=g,this.#ri=x,this.#lh=_,this.#Ea(i),this.cacheKey=`NoiseTexture_${g}x${x}_${Date.now()}`,this.#_e=this.#ka(i,g,x),this.#Mt=calculateTextureByteSize(this.#_e),this.#Ga(),this.#It()}get videoMemorySize(){return this.#Mt}get resourceManagerKey(){return Ei}get animationSpeed(){return this.#hh}set animationSpeed(i){validatePositiveNumberRange(i),this.#hh=i,this.updateUniform("animationSpeed",i)}get animationX(){return this.#fh}set animationX(i){validateNumber(i),this.#fh=i,this.updateUniform("animationX",i)}get animationY(){return this.#dh}set animationY(i){validateNumber(i),this.#dh=i,this.updateUniform("animationY",i)}get uniformInfo(){return this.#uh}get gpuTexture(){return this.#_e}get time(){return this.#ch}set time(i){validatePositiveNumberRange(i),this.#ch=i,this.updateUniform("time",i/1e3)}updateUniform(i,g){this.#uh.members[i]&&(this.#qi.writeBuffer(this.#uh.members[i],g),this.#lh[i]=g),this.#Ga()}updateUniforms(i){Object.entries(i).forEach(([i,g])=>{this.#uh.members[i]&&(this.#qi.writeBuffer(this.#uh.members[i],g),this.#lh[i]=g)}),this.#Ga()}render(i){this.updateUniform("time",i),this.#Ga()}destroy(){const i=this.#_e;this.__fireListenerList(!0),this.#At(),i&&i.destroy(),this.src=null,this.cacheKey=null,this.#_e=null}#Ea(i){const{gpuDevice:g}=i,x=this.#mh();this.cacheKey=this.uuid,this.#Sa=g.createShaderModule({code:x}),this.#wa=this.#Da(i),this.#Ra=this.#Aa(g,this.#Sa,this.#wa);const _=parseWGSL(x);this.#uh=_.uniforms.uniforms;const v=new ArrayBuffer(this.#uh.arrayBufferByteLength);this.#qi=new UniformBuffer(i,v,`${this.constructor.name}_UniformBuffer`),this.#lh.uniformDefaults&&this.updateUniforms({...Ii,...this.#lh.uniformDefaults})}#mh(){return` ${` struct Uniforms { time:f32, animationSpeed:f32, animationX:f32, animationY:f32, ${this.#lh.uniformStruct||""} }; `} @group(0) @binding(0) var<uniform> uniforms:Uniforms; @group(0) @binding(1) var outputTexture:texture_storage_2d<rgba8unorm,write>;  ${this.#lh.helperFunctions||""} @compute @workgroup_size(${this.#zt},${this.#$t},${this.#Ta}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy); let dimensions:vec2<u32>=textureDimensions(outputTexture);  /* 경계 체크 */ if (index.x >=dimensions.x || index.y >=dimensions.y) { return; }  let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let base_uv=vec2<f32>((f32(index.x) + 0.5)/dimW,(f32(index.y) + 0.5)/dimH); ${this.#lh.mainLogic}  textureStore(outputTexture,index,finalColor); } `}#Ga(){if(!this.#Ma)return;const i=this.redGPUContext.gpuDevice.createCommandEncoder(),g=i.beginComputePass();g.setPipeline(this.#Ra),g.setBindGroup(0,this.#Ma),g.dispatchWorkgroups(Math.ceil(this.#ni/this.#zt),Math.ceil(this.#ri/this.#$t)),g.end(),this.redGPUContext.gpuDevice.queue.submit([i.finish()])}#Da(i){return i.resourceManager.createBindGroupLayout("NoiseTextureBindGroupLayout",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#ka(i,g,x){const _=i.gpuDevice.createTexture({size:{width:g,height:x},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:this.cacheKey}),v=_.createView();return this.#Ma=this.#Oa(i,this.#wa,v),_}#Oa(i,g,x){return i.gpuDevice.createBindGroup({layout:g,entries:[{binding:0,resource:{buffer:this.#qi.gpuBuffer,offset:0,size:this.#qi.gpuBuffer.size}},{binding:1,resource:x}]})}#Aa(i,g,x){return i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[x]}),compute:{module:g,entryPoint:"main"}})}#It(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateBitmapTexture(this))}#At(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}}const Li={MODE_1D:1,MODE_2D:2,MODE_3D:3};Object.freeze(Li);const mergerNoiseUniformStruct=(i,g)=>[i,g].filter(Boolean).join("\n"),mergerNoiseUniformDefault=(i,g)=>({...i,...g||{}}),mergerNoiseHelperFunctions=(i,g)=>[i,g].filter(Boolean).join("\n");const Ui=Object.values(Li),Di={frequency:8,amplitude:1,octaves:1,persistence:.5,lacunarity:2,seed:0,noiseDimension:Li.MODE_2D};const Ai={EUCLIDEAN:0,MANHATTAN:1,CHEBYSHEV:2};Object.freeze(Ai);const ki={F1:0,F2:1,F2_MINUS_F1:2,F1_PLUS_F2:3,CELL_ID:4,CELL_ID_COLOR:5};Object.freeze(ki);const Oi=Object.values(Ai),Gi=Object.values(ki),Ni={frequency:8,distanceScale:1,octaves:1,persistence:.5,lacunarity:2,seed:0,distanceType:Ai.EUCLIDEAN,outputType:ki.F1,jitter:1,cellIdColorIntensity:1};var Vi=Object.freeze({__proto__:null,ANoiseTexture:ANoiseTexture,AUniformBaseBuffer:AUniformBaseBuffer,BitmapTexture:BitmapTexture,CubeTexture:CubeTexture,HDRTexture:HDRTexture,IBL:IBL,IndexBuffer:IndexBuffer,InterleavedStructElement:InterleavedStructElement,NOISE_DIMENSION:Li,ResourceBase:ResourceBase,ResourceManager:ResourceManager,ResourceStatusInfo:ResourceStatusInfo,Sampler:Sampler,ShaderVariantGenerator:ShaderVariantGenerator,SimplexTexture:class extends ANoiseTexture{#ph=Di.frequency;#gh=Di.amplitude;#xh=Di.octaves;#_h=Di.persistence;#vh=Di.lacunarity;#bh=Di.seed;#yh=Di.noiseDimension;constructor(i,g=1024,x=1024,_){super(i,g,x,{..._,mainLogic:_?.mainLogic||" let uv=vec2<f32>( (base_uv.x + uniforms.time * ( uniforms.animationX * uniforms.animationSpeed )), (base_uv.y + uniforms.time * ( uniforms.animationY * uniforms.animationSpeed ))  ); let noise=getSimplexNoiseByDimension( uv,uniforms );  /* 최종 색상 (그레이스케일) */ let finalColor=vec4<f32>(noise,noise,noise,1.0); ",uniformStruct:mergerNoiseUniformStruct(" noiseDimension:f32, frequency:f32, amplitude:f32, octaves:i32, persistence:f32, lacunarity:f32, seed:f32, ",_?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(Di,_?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("\nfn mod289_vec3(x:vec3<f32>) -> vec3<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec2(x:vec2<f32>) -> vec2<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec4(x:vec4<f32>) -> vec4<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_f32(x:f32) -> f32 { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn permute(x:vec3<f32>) -> vec3<f32> { return mod289_vec3(((x * 34.0) + 1.0) * x);\n}\nfn permute4(x:vec4<f32>) -> vec4<f32> { return mod289_vec4(((x * 34.0) + 1.0) * x);\n}\nfn permute_f32(x:f32) -> f32 { return mod289_f32(((x * 34.0) + 1.0) * x);\n}\nfn taylorInvSqrt4(r:vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r;\n}\nfn simplex1D(x:f32) -> f32 { var i=floor(x); let f=fract(x); let g0=select(-1.0,1.0,(permute_f32(i) * 0.024390243902439) >=0.5); let g1=select(-1.0,1.0,(permute_f32(i + 1.0) * 0.024390243902439) >=0.5); let d0=f; let d1=f - 1.0; let t=f * f * f * (f * (f * 6.0 - 15.0) + 10.0); let n0=g0 * d0; let n1=g1 * d1; return mix(n0,n1,t) * 0.395;\n}\nfn simplex2D(v:vec2<f32>) -> f32 { let C=vec4<f32>(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439); var i=floor(v + dot(v,C.yy)); let x0=v - i + dot(i,C.xx); let i1=select(vec2<f32>(0.0,1.0),vec2<f32>(1.0,0.0),x0.x > x0.y); var x12=x0.xyxy + C.xxzz; x12.x=x12.x - i1.x; x12.y=x12.y - i1.y; i=mod289_vec2(i); let p=permute(permute(i.y + vec3<f32>(0.0,i1.y,1.0)) + i.x + vec3<f32>(0.0,i1.x,1.0)); var m=max(0.5 - vec3<f32>(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),vec3<f32>(0.0)); m=m * m; m=m * m; let x=2.0 * fract(p * C.www) - 1.0; let h=abs(x) - 0.5; let ox=floor(x + 0.5); let a0=x - ox; m=m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h)); let g=vec3<f32>(a0.x * x0.x + h.x * x0.y,a0.y * x12.x + h.y * x12.y,a0.z * x12.z + h.z * x12.w); return 130.0 * dot(m,g);\n}\nfn simplex3D(v:vec3<f32>) -> f32 { let C=vec2<f32>(1.0/6.0,1.0/3.0); let D=vec4<f32>(0.0,0.5,1.0,2.0); var i=floor(v + dot(v,C.yyy)); let x0=v - i + dot(i,C.xxx); let g=step(x0.yzx,x0.xyz); let l=1.0 - g; let i1=min(g.xyz,l.zxy); let i2=max(g.xyz,l.zxy); let x1=x0 - i1 + C.xxx; let x2=x0 - i2 + C.yyy; let x3=x0 - D.yyy; i=mod289_vec3(i); let p=permute4(permute4(permute4( i.z + vec4<f32>(0.0,i1.z,i2.z,1.0 )) + i.y + vec4<f32>(0.0,i1.y,i2.y,1.0 )) + i.x + vec4<f32>(0.0,i1.x,i2.x,1.0 )); let n_=0.142857142857; let ns=n_ * D.wyz - D.xzx; let j=p - 49.0 * floor(p * ns.z * ns.z); let x_=floor(j * ns.z); let y_=floor(j - 7.0 * x_ ); let x=x_ *ns.x + ns.yyyy; let y=y_ *ns.x + ns.yyyy; let h=1.0 - abs(x) - abs(y); let b0=vec4<f32>( x.xy,y.xy ); let b1=vec4<f32>( x.zw,y.zw ); let s0=floor(b0)*2.0 + 1.0; let s1=floor(b1)*2.0 + 1.0; let sh=-step(h,vec4<f32>(0.0)); let a0=b0.xzyw + s0.xzyw*sh.xxyy; let a1=b1.xzyw + s1.xzyw*sh.zzww; var p0=vec3<f32>(a0.xy,h.x); var p1=vec3<f32>(a0.zw,h.y); var p2=vec3<f32>(a1.xy,h.z); var p3=vec3<f32>(a1.zw,h.w); let norm=taylorInvSqrt4(vec4<f32>(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3))); p0 *=norm.x; p1 *=norm.y; p2 *=norm.z; p3 *=norm.w; var m=max(0.6 - vec4<f32>(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),vec4<f32>(0.0)); m=m * m; return 42.0 * dot( m*m,vec4<f32>( dot(p0,x0),dot(p1,x1), dot(p2,x2),dot(p3,x3) ) );\n}\nfn fbm1D(pos:f32,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex1D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn fbm(pos:vec2<f32>,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex2D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn fbm3D(pos:vec3<f32>,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex3D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn getSimplexNoise1D(pos:f32,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(pos + uniforms.seed) * current_frequency; let octave_noise=simplex1D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoise2D(uv:vec2<f32>,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(uv + uniforms.seed) * current_frequency; let octave_noise=simplex2D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoise3D(pos:vec3<f32>,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(pos + vec3<f32>(uniforms.seed)) * current_frequency; let octave_noise=simplex3D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoiseByDimension(uv:vec2<f32>,uniforms:Uniforms) -> f32 { if (uniforms.noiseDimension < 1.1) { return getSimplexNoise1D(uv.x,uniforms); } else if (uniforms.noiseDimension < 2.1) { return getSimplexNoise2D(uv,uniforms); } else if (uniforms.noiseDimension < 3.1) { return getSimplexNoise3D(vec3<f32>(uv.x,uv.y,uniforms.seed * 0.1),uniforms); } else { return getSimplexNoise2D(uv,uniforms); }\n}\n",_?.helperFunctions)})}get noiseDimension(){return this.#yh}set noiseDimension(i){Ui.includes(i)?(this.#yh=i,this.updateUniform("noiseDimension",i)):consoleAndThrowError(`Invalid value for noiseDimension. Received ${i}. Expected one of:${Ui.join(",")}`)}get frequency(){return this.#ph}set frequency(i){validatePositiveNumberRange(i),this.#ph=i,this.updateUniform("frequency",i)}get amplitude(){return this.#gh}set amplitude(i){validatePositiveNumberRange(i),this.#gh=i,this.updateUniform("amplitude",i)}get octaves(){return this.#xh}set octaves(i){validateUintRange(i,1,8),this.#xh=i,this.updateUniform("octaves",i)}get persistence(){return this.#_h}set persistence(i){validatePositiveNumberRange(i,0,1),this.#_h=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#vh}set lacunarity(i){validatePositiveNumberRange(i),this.#vh=i,this.updateUniform("lacunarity",i)}get seed(){return this.#bh}set seed(i){this.#bh=i,this.updateUniform("seed",i)}randomizeSeed(){this.seed=1e3*Math.random()}getSettings(){return{frequency:this.#ph,amplitude:this.#gh,octaves:this.#xh,persistence:this.#_h,lacunarity:this.#vh,seed:this.#bh}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.amplitude&&(this.amplitude=i.amplitude),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed)}},StorageBuffer:StorageBuffer,UniformBuffer:UniformBuffer,UniformType:UniformType,VORONOI_DISTANCE_TYPE:Ai,VORONOI_OUTPUT_TYPE:ki,VertexBuffer:VertexBuffer,VoronoiTexture:class extends ANoiseTexture{#ph=Ni.frequency;#Th=Ni.distanceScale;#xh=Ni.octaves;#_h=Ni.persistence;#vh=Ni.lacunarity;#bh=Ni.seed;#Sh=Ni.distanceType;#Mh=Ni.outputType;#wh=Ni.jitter;#Rh=Ni.cellIdColorIntensity;constructor(i,g=1024,x=1024,_){super(i,g,x,{..._,mainLogic:_?.mainLogic||" let uv=vec2<f32>( (base_uv.x + uniforms.time * (uniforms.animationX * uniforms.animationSpeed)), (base_uv.y + uniforms.time * (uniforms.animationY * uniforms.animationSpeed)) ); var finalColor:vec4<f32>; if (uniforms.outputType==5) { let colorNoise=getVoronoiColorNoise(uv,uniforms); finalColor=vec4<f32>(colorNoise,1.0); } else { let noise=getVoronoiNoise(uv,uniforms); finalColor=vec4<f32>(noise,noise,noise,1.0); } ",uniformStruct:mergerNoiseUniformStruct(" frequency:f32, distanceScale:f32, octaves:i32, persistence:f32, lacunarity:f32, seed:f32, distanceType:i32, outputType:i32, jitter:f32, cellIdColorIntensity:f32, ",_?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(Ni,_?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("fn hash22(p:vec2<f32>) -> vec2<f32> { var p3=fract(vec3<f32>(p.xyx) * vec3<f32>(0.1031,0.1030,0.0973)); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.xx + p3.yz) * p3.zy);\n}\nfn hash12(p:vec2<f32>) -> f32 { var p3=fract(vec3<f32>(p.xyx) * 0.1031); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.x + p3.y) * p3.z);\n}\nfn euclideanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=a - b; return sqrt(d.x * d.x + d.y * d.y);\n}\nfn manhattanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=abs(a - b); return d.x + d.y;\n}\nfn chebyshevDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=abs(a - b); return max(d.x,d.y);\n}\nfn calculateDistance(a:vec2<f32>,b:vec2<f32>,distanceType:i32) -> f32 { switch (distanceType) { case 0:{ return euclideanDistance(a,b);} case 1:{ return manhattanDistance(a,b);} case 2:{ return chebyshevDistance(a,b);} default:{ return euclideanDistance(a,b);} }\n}\nfn cellIdToColor(cellId:f32,intensity:f32) -> vec3<f32> { let h=cellId * 6.28318; let s=0.7 + 0.3 * fract(cellId * 7.0); let v=0.6 + 0.4 * fract(cellId * 13.0); let c=v * s; let x=c * (1.0 - abs(((h/1.047198) % 2.0) - 1.0)); let m=v - c; var rgb:vec3<f32>; let sector=i32(h/1.047198) % 6; switch (sector) { case 0:{ rgb=vec3<f32>(c,x,0.0);} case 1:{ rgb=vec3<f32>(x,c,0.0);} case 2:{ rgb=vec3<f32>(0.0,c,x);} case 3:{ rgb=vec3<f32>(0.0,x,c);} case 4:{ rgb=vec3<f32>(x,0.0,c);} default:{ rgb=vec3<f32>(c,0.0,x);} } return (rgb + m) * intensity;\n}\nstruct VoronoiResult { f1:f32, f2:f32, cellId:f32,\n}\nfn voronoiSingle(pos:vec2<f32>,frequency:f32,seed:f32,jitter:f32,distanceType:i32) -> VoronoiResult { let scaledPos=pos * frequency; let gridPos=floor(scaledPos); let localPos=fract(scaledPos); var minDist1=999.0; var minDist2=999.0; var closestCellId=0.0; for (var y=-1;y <=1;y++) { for (var x=-1;x <=1;x++) { let neighborGrid=gridPos + vec2<f32>(f32(x),f32(y)); let randomOffset=hash22(neighborGrid + seed); let jitteredOffset=mix(vec2<f32>(0.5),randomOffset,jitter); let cellPoint=vec2<f32>(f32(x),f32(y)) + jitteredOffset; let dist=calculateDistance(localPos,cellPoint,distanceType); if (dist < minDist1) { minDist2=minDist1; minDist1=dist; closestCellId=hash12(neighborGrid + seed); } else if (dist < minDist2) { minDist2=dist; } } } return VoronoiResult(minDist1,minDist2,closestCellId);\n}\nfn getVoronoiNoise(uv:vec2<f32>,uniforms:Uniforms) -> f32 { var total=0.0; var frequency=uniforms.frequency; var amplitude=1.0; var maxValue=0.0; for (var i=0;i < uniforms.octaves;i++) { let voronoiResult=voronoiSingle( uv, frequency, uniforms.seed + f32(i) * 100.0, uniforms.jitter, uniforms.distanceType ); let F1=voronoiResult.f1 * uniforms.distanceScale; let F2=voronoiResult.f2 * uniforms.distanceScale; let cellId=voronoiResult.cellId; var octaveValue:f32; switch (uniforms.outputType) { case 0:{ octaveValue=F1;} case 1:{ octaveValue=F2;} case 2:{ octaveValue=F2 - F1;} case 3:{ octaveValue=(F1 + F2) * 0.5;} case 4:{ octaveValue=cellId;}  case 5:{ let colorRGB=cellIdToColor(cellId,uniforms.cellIdColorIntensity); octaveValue=(colorRGB.r + colorRGB.g + colorRGB.b)/3.0; } default:{ octaveValue=F1;} } total +=octaveValue * amplitude; maxValue +=amplitude; frequency *=uniforms.lacunarity; amplitude *=uniforms.persistence; } return clamp(total/maxValue,0.0,1.0);\n}\nfn getVoronoiColorNoise(uv:vec2<f32>,uniforms:Uniforms) -> vec3<f32> { if (uniforms.outputType==5) {  let voronoiResult=voronoiSingle( uv, uniforms.frequency, uniforms.seed, uniforms.jitter, uniforms.distanceType ); return cellIdToColor(voronoiResult.cellId,uniforms.cellIdColorIntensity); } else { let grayValue=getVoronoiNoise(uv,uniforms); return vec3<f32>(grayValue,grayValue,grayValue); }\n}\n",_?.helperFunctions)})}get frequency(){return this.#ph}set frequency(i){validatePositiveNumberRange(i),this.#ph=i,this.updateUniform("frequency",i)}get distanceScale(){return this.#Th}set distanceScale(i){validatePositiveNumberRange(i),this.#Th=i,this.updateUniform("distanceScale",i)}get octaves(){return this.#xh}set octaves(i){validateUintRange(i,1,8),this.#xh=i,this.updateUniform("octaves",i)}get persistence(){return this.#_h}set persistence(i){validatePositiveNumberRange(i,0,1),this.#_h=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#vh}set lacunarity(i){validatePositiveNumberRange(i),this.#vh=i,this.updateUniform("lacunarity",i)}get seed(){return this.#bh}set seed(i){this.#bh=i,this.updateUniform("seed",i)}get distanceType(){return this.#Sh}set distanceType(i){Oi.includes(i)?(this.#Sh=i,this.updateUniform("distanceType",i)):consoleAndThrowError(`Invalid value for distanceType. Received ${i}. Expected one of:${Oi.join(",")}`)}get outputType(){return this.#Mh}set outputType(i){Gi.includes(i)?(this.#Mh=i,this.updateUniform("outputType",i)):consoleAndThrowError(`Invalid value for outputType. Received ${i}. Expected one of:${Gi.join(",")}`)}get jitter(){return this.#wh}set jitter(i){(i<0||i>1)&&consoleAndThrowError(`Jitter must be between 0 and 1. Received:${i}`),validatePositiveNumberRange(i,0,1),this.#wh=i,this.updateUniform("jitter",i)}get cellIdColorIntensity(){return this.#Rh}set cellIdColorIntensity(i){validatePositiveNumberRange(i),this.#Rh=i,this.updateUniform("cellIdColorIntensity",i)}randomizeSeed(){this.seed=1e3*Math.random()}setEuclideanDistance(){this.distanceType=Ai.EUCLIDEAN}setManhattanDistance(){this.distanceType=Ai.MANHATTAN}setChebyshevDistance(){this.distanceType=Ai.CHEBYSHEV}setF1Output(){this.outputType=ki.F1}setF2Output(){this.outputType=ki.F2}setCrackPattern(){this.outputType=ki.F2_MINUS_F1}setSmoothBlend(){this.outputType=ki.F1_PLUS_F2}setCellIdOutput(){this.outputType=ki.CELL_ID}setCellIdColorOutput(){this.outputType=ki.CELL_ID_COLOR}setCellularPattern(){this.outputType=ki.F1,this.distanceType=Ai.EUCLIDEAN,this.jitter=1}setStonePattern(){this.outputType=ki.F2_MINUS_F1,this.distanceType=Ai.EUCLIDEAN,this.jitter=.8}setOrganicPattern(){this.distanceType=Ai.MANHATTAN,this.jitter=.6}setGridPattern(){this.jitter=0,this.distanceType=Ai.EUCLIDEAN}setCrystalPattern(){this.outputType=ki.F2_MINUS_F1,this.distanceType=Ai.CHEBYSHEV,this.jitter=.9}setStainedGlassPattern(){this.outputType=ki.CELL_ID_COLOR,this.distanceType=Ai.EUCLIDEAN,this.jitter=.7,this.cellIdColorIntensity=.8}setMosaicPattern(){this.outputType=ki.CELL_ID_COLOR,this.distanceType=Ai.MANHATTAN,this.jitter=.3,this.cellIdColorIntensity=1}setBiomeMapPattern(){this.outputType=ki.CELL_ID,this.distanceType=Ai.EUCLIDEAN,this.jitter=.8,this.frequency=4}getSettings(){return{frequency:this.#ph,distanceScale:this.#Th,octaves:this.#xh,persistence:this.#_h,lacunarity:this.#vh,seed:this.#bh,distanceType:this.#Sh,outputType:this.#Mh,jitter:this.#wh,cellIdColorIntensity:this.#Rh}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.distanceScale&&(this.distanceScale=i.distanceScale),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed),void 0!==i.distanceType&&(this.distanceType=i.distanceType),void 0!==i.outputType&&(this.outputType=i.outputType),void 0!==i.jitter&&(this.jitter=i.jitter),void 0!==i.cellIdColorIntensity&&(this.cellIdColorIntensity=i.cellIdColorIntensity)}getDistanceTypeName(){return{[Ai.EUCLIDEAN]:"Euclidean",[Ai.MANHATTAN]:"Manhattan",[Ai.CHEBYSHEV]:"Chebyshev"}[this.#Sh]||"Unknown"}getOutputTypeName(){return{[ki.F1]:"F1",[ki.F2]:"F2",[ki.F2_MINUS_F1]:"F2-F1 (Crack)",[ki.F1_PLUS_F2]:"F1+F2 (Blend)",[ki.CELL_ID]:"Cell ID",[ki.CELL_ID_COLOR]:"Cell ID Color"}[this.#Mh]||"Unknown"}},getUniformOffsetByRoundUp:(i,g)=>((i+g-1)/g|0)*g,loadAndCreateBitmapImage:loadAndCreateBitmapImage,parseWGSL:parseWGSL,preprocessWGSL:preprocessWGSL}),Fi=Object.freeze({__proto__:null,BlendState:BlendState,DepthStencilState:DepthStencilState,PrimitiveState:PrimitiveState}),Hi="struct Uniforms{ backgroundColor:vec4<f32>\n}\n@group(1) @binding(0)\nvar _sampler:sampler;\n@group(1) @binding(1)\nvar _texture:texture_2d<f32>;\n@group(1) @binding(2)\nvar<uniform> uniforms:Uniforms;\n@fragment\nfn main(@location(0) fragUV:vec2<f32>) -> @location(0) vec4<f32> { var viewColor:vec4<f32>=textureSample(_texture,_sampler,fragUV); let backgroundColor=uniforms.backgroundColor; let blendedColor=vec4<f32>( viewColor.rgb + backgroundColor.rgb * (1.0 - viewColor.a), viewColor.a + backgroundColor.a * (1.0 - viewColor.a) ); return blendedColor;\n}\n",zi="\nstruct VertexUniforms { modelMatrix:mat4x4<f32>,\n};\n@group(0) @binding(0)\nvar<uniform> vertexUniforms:VertexUniforms;\nstruct VertexOutput { @builtin(position) Position:vec4<f32>, @location(0) fragUV:vec2<f32>,\n};\n@vertex\nfn main(@builtin(vertex_index) VertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2( 1.0,1.0), vec2( 1.0,-1.0), vec2(-1.0,-1.0), vec2( 1.0,1.0), vec2(-1.0,-1.0), vec2(-1.0,1.0), ); var uv=array<vec2<f32>,6>( vec2(1.0,0.0), vec2(1.0,1.0), vec2(0.0,1.0), vec2(1.0,0.0), vec2(0.0,1.0), vec2(0.0,0.0), ); var output:VertexOutput; output.Position=vertexUniforms.modelMatrix * vec4<f32>(pos[VertexIndex],0.0,1.0); output.fragUV=uv[VertexIndex]; return output;\n}\n";const $i=parseWGSL(zi),Ki=parseWGSL(Hi),Xi=$i.uniforms.vertexUniforms;class FinalRender{#Ch=[];#Ph=[];#Bh;#Eh;#Ih;#Lh;#Uh;#Dh=[];#ms;#Ah=[];#kh=[];#xe;#Oh;#Gh;constructor(){}render(i,g){this.#Oh||(this.#Oh=i.gpuDevice.createBuffer({label:"FINAL_RENDER_FRAGMENT_BUFFER",size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.#Gh=new Float32Array([1,0,0,1]));const{sizeManager:x,gpuDevice:_,antialiasingManager:v}=i,{changedMSAA:b,useMSAA:y}=v,{pixelRectObject:S}=x,{width:w,height:L}=S;if(0===w||0===L)return;const k=this.#Nh(i),H=_.createCommandEncoder(),z=H.beginRenderPass(k);z.setViewport(0,0,w,L,0,1),z.setScissorRect(0,0,w,L),this.#Bh&&!b||this.#Vh(i),this.#Fh(i,z,g.map(i=>{const g=i.colorAttachments[0];return g.postEffectView||g.pickingView||g.resolveTarget||g.view}),w,L,y),z.end(),_.queue.submit([H.finish()])}#Hh(i){{const{scene:g,redGPUContext:x}=i,{gpuDevice:_}=x,{backgroundColor:v,useBackgroundColor:b}=g,y=b?v.rgbaNormal:[0,0,0,0],S=x.backgroundColor.rgbaNormal;let w;const L=[y[0]*y[3],y[1]*y[3],y[2]*y[3],y[3]],k=[S[0]*S[3],S[1]*S[3],S[2]*S[3],S[3]];w=[L[0]+k[0]*(1-y[3]),L[1]+k[1]*(1-y[3]),L[2]+k[2]*(1-y[3]),y[3]+S[3]*(1-y[3])],this.#Gh[0]=w[0],this.#Gh[1]=w[1],this.#Gh[2]=w[2],this.#Gh[3]=w[3],_.queue.writeBuffer(this.#Oh,0,this.#Gh)}}#Fh(i,g,x,_,v,b){const{gpuDevice:S}=i;x.forEach((x,b)=>{const w=i.viewList[b],{x:L,y:k,width:H,height:z}=w.pixelRectObject,W=create$2();y(W,0,1,0,1,-1e3,1e3),scale(W,W,[1/_,1/v,1]),translate(W,W,[H/2+L,v-z/2-k,0]),scale(W,W,[H/2,z/2,1]),this.#zh(i,b);const q=this.#Ch[b],be=this.#Ph[b];S.queue.writeBuffer(q.gpuBuffer,Xi.members.modelMatrix.uniformOffset,new Xi.members.modelMatrix.View(W));if(i.antialiasingManager.changedMSAA||!this.#Ah[b]||this.#Ah[b].width!==H||this.#Ah[b].height!==z||this.#kh[b]!==x){const i={layout:this.#Lh,label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:this.#xe.gpuSampler},{binding:1,resource:x},{binding:2,resource:{buffer:this.#Oh,offset:0,size:this.#Oh.size}}]};this.#Dh[b]=S.createBindGroup(i),this.#Ah[b]={width:H||1,height:z||1},this.#kh[b]=x}this.#Hh(w),g.setPipeline(this.#$h(i)),g.setBindGroup(0,be),g.setBindGroup(1,this.#Dh[b]),g.draw(6,1,0,0)})}#Vh(i){const{resourceManager:g}=i;this.#Bh=g.createBindGroupLayout("FINAL_RENDER_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo($i,0)),this.#Eh=g.createGPUShaderModule("VERTEX_MODULE_FINAL_RENDER",{code:zi}),this.#Ih={module:this.#Eh,entryPoint:"main"},this.#Uh=g.createGPUShaderModule("FRAGMENT_MODULE_FINAL_RENDER",{code:Hi}),this.#Lh=g.createBindGroupLayout("FINAL_RENDER_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Ki,1)),this.#xe=new Sampler(i,{minFilter:"linear"})}#zh(i,g){const{gpuDevice:x}=i;if(!this.#Ch[g]){const _=new ArrayBuffer(Xi.arrayBufferByteLength),v=this.#Ch[g]=new UniformBuffer(i,_,`FinalRender_View(${g})_VertexUniform`),b={layout:this.#Bh,label:"VERTEX_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:{buffer:v.gpuBuffer,offset:0,size:v.size}}]};this.#Ph[g]=x.createBindGroup(b)}}#Nh(i){const{backgroundColor:g,gpuContext:x}=i;return{colorAttachments:[{view:x.getCurrentTexture().createView({label:"FINAL_RENDER"}),clearValue:{r:0,g:0,b:0,a:0},loadOp:Vn.CLEAR,storeOp:Fn.STORE}]}}#$h(i){if(!this.#ms||i.antialiasingManager.changedMSAA){const{gpuDevice:g}=i,x={label:"PIPELINE_DESCRIPTOR_FINAL_RENDER",layout:g.createPipelineLayout({label:"FINAL_RENDER_PIPELINE_LAYOUT",bindGroupLayouts:[this.#Bh,this.#Lh]}),vertex:this.#Ih,fragment:{module:this.#Uh,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:{srcFactor:en.SRC_ALPHA,dstFactor:en.ONE_MINUS_SRC_ALPHA,operation:tn.ADD},alpha:{srcFactor:en.SRC_ALPHA,dstFactor:en.ONE_MINUS_SRC_ALPHA,operation:tn.ADD}}}]}};this.#ms=g.createRenderPipeline(x)}return this.#ms}}!function(i,g){void 0===g&&(g={});var x=g.insertAt;if("undefined"!=typeof document){var _=document.head||document.getElementsByTagName("head")[0],v=document.createElement("style");v.type="text/css","top"===x&&_.firstChild?_.insertBefore(v,_.firstChild):_.appendChild(v),v.styleSheet?v.styleSheet.cssText=i:v.appendChild(document.createTextNode(i))}}(".RedGPUDebugPanel{background:rgba(0,0,0,.9);bottom:0;color:#fff;font-size:11px;left:0;line-height:1;max-height:100%;min-width:250px;overflow-y:auto;position:fixed;transform:translateZ(0);width:330px;will-change:transform;z-index:2}.RedGPUDebugPanel::-webkit-scrollbar{width:6px}.RedGPUDebugPanel::-webkit-scrollbar-track{background:#000}.RedGPUDebugPanel::-webkit-scrollbar-thumb{background:#333}.RedGPUDebugPanel::-webkit-scrollbar-thumb:hover{background:#444}.debug-group{line-height:1.4;padding:10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group{background:linear-gradient(90deg,hsla(0,0%,100%,.1),rgba(0,0,0,.01));border:1px solid hsla(0,0%,100%,.16);border-radius:6px;box-shadow:0 0 10px rgba(0,0,0,.16);line-height:1.4;margin:8px 0;padding:6px 10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group-title{color:#e3b096}.debug-item{align-items:center;color:#ccc;display:flex;font-weight:400;gap:10px;justify-content:space-between;transform:translateZ(0);width:100%;will-change:transform;b{color:#fdb48d;font-weight:700}}.boolean-true{background:green}.boolean-false,.boolean-true{border-radius:4px;color:#fff;line-height:1;margin:2px 0;padding:2px 4px}.boolean-false{background:red}.debug-folder{background:rgba(0,0,0,.5);border-bottom:1px solid hsla(0,0%,100%,.05);display:flex;flex-direction:column;width:100%}.debug-folder-title{color:#fdb48d;font-size:15px;b{color:#fdb48d;font-size:11px;font-weight:700}}.debug-folder-small-title,.debug-folder-title{align-items:center;background:linear-gradient(0deg,rgba(0,0,0,.95),hsla(0,0%,100%,.055));cursor:pointer;display:flex;justify-content:space-between;line-height:1;padding:10px 8px;width:100%}.debug-folder-small-title{color:#fff;font-size:12px;b{color:#fdb48d;font-size:11px;font-weight:700}}.debug-folder-title .onoff{font-size:11px}.debug-item-title{color:#888;max-width:240px}.debug-item-cache-key,.debug-item-title{font-weight:500;overflow:hidden;text-overflow:ellipsis;text-shadow:1px 1px 0 rgba(0,0,0,.3)}.debug-item-cache-key{color:#fff;max-width:250px;white-space:nowrap}.div-line{background:hsla(0,0%,100%,.06);border-bottom:1px solid transparent;height:1px;margin:10px 0;width:100%}.root-padding{padding:6px;width:100%}.color-box{border:1px solid hsla(0,0%,100%,.2);border-radius:4px;margin:2px;padding:3px}");const createDebugTitle=i=>`<div>${i}</div>`,makeColorDebug=(i,g)=>`\n<div class='debug-item'>\n\x3c!--\t<span class='debug-item-title'>${i}</span> --\x3e\n\t<span class='debug-item-title'></span> \n\t<div style="border:1px solid rgba(255,255,255,0.2);border-radius:4px;background:rgba(${g.rgba});padding:3px;margin:2px"> ${g.rgba}\n\t</div>\n</div>\n`,makeBooleanDebug=(i,g)=>`<span class="${g?"boolean-true":"boolean-false"}">${g?"TRUE":"FALSE"}</span>`,getDebugFormatValue=i=>"boolean"==typeof i?i.toString():"number"==typeof i?i.toLocaleString():i,updateDebugItemValue=(i,g,x,_,v="")=>{const b=i.querySelector(`.${g}`);if(!b)return;const y=`${getDebugFormatValue(x)}${v}`;b.innerHTML!==y&&(b.innerHTML=y,_&&(b.style.background=x?"green":"rgba(255,255,255,0.1)"))};let Wi=class{dom;#Kh;#Xh=!1;constructor(i){this.#Kh=i,this.dom=document.createElement("div"),this.dom.innerHTML=` <div class="debug-folder">\t <div class="debug-folder-small-title" style="display:flex;align-items:center;justify-content:space-between;cursor:pointer;"> ${createDebugTitle(`${i} Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)`)} <div class="onoff">${this.#Xh?"close":"open"}</div> </div> <div class="item-container" style="display:none"></div> </div>\n`;const g=this.dom.querySelector(".debug-folder"),x=this.dom.querySelector(".item-container");g.addEventListener("click",()=>{this.openYn=!this.openYn,x.style.display=this.#Xh?"":"none"})}get openYn(){return this.#Xh}set openYn(i){this.#Xh=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}update(i,g){const{resourceManager:x}=g;if("Buffer"===this.#Kh){const g=x.resources.get("GPUBuffer"),{videoMemory:_}=g;i.totalUsedVideoMemory+=_,updateDebugItemValue(this.dom,"totalCount",g.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(_)),this.#Wh(g)}else{const g=x[`managed${this.#Kh}State`],{table:_,videoMemory:v}=g;let b;switch(i.totalUsedVideoMemory+=v,updateDebugItemValue(this.dom,"totalCount",_.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(v)),this.#Kh){case"VertexBuffer":b=ResourceStateVertexBuffer;break;case"IndexBuffer":b=ResourceStateIndexBuffer;break;case"UniformBuffer":b=ResourceStateUniformBuffer;break;case"StorageBuffer":b=ResourceStateStorageBuffer}b&&this.#jh(_)}}#Yh(i){let g=i;(i.startsWith("Vertex_")||i.startsWith("Index_"))&&(g=i.substring(i.indexOf("_")+1));try{const i=new URL(g),x=i.pathname.split("/").pop()||g;return{host:i.host,filename:x}}catch{return{host:null,filename:g}}}#Wh(i){const g=this.dom.querySelector(".item-container"),x=new Set,_=this.#Kh,v=new Map;g.querySelectorAll(".debug-group").forEach(i=>{const g=i.className.split(" ")[1].replace(`${_}_`,"");x.add(g),v.set(g,i)});let b=0;i.forEach((i,y)=>{const S=y,w=i.size||0,L=`${_}_${S}`;let k=v.get(S);k?x.delete(S):(k=document.createElement("div"),k.className=`debug-group ${L}`,k.innerHTML=` <div class='debug-item'> <div> <div class='debug-item-title'><span style="white-space:nowrap"> <span class="host"></span> <div class="name"></div> </span></div> <div style="font-size:10px">${S}</div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"> <span style="white-space:nowrap"><b class="videoMemorySize"></b></span> </div> </div> `,g.appendChild(k));const{host:H,filename:z}=this.#Yh(y);H?(updateDebugItemValue(k,"host",`${b} ${H}`),updateDebugItemValue(k,"name",z)):updateDebugItemValue(k,"host",`${b} ${y}`),updateDebugItemValue(k,"videoMemorySize",formatBytes(w)),b++});for(let i of x)v.get(i).remove()}#jh(i){const g=this.dom.querySelector(".item-container"),x=new Set,_=this.#Kh,v=new Map;g.querySelectorAll(".debug-group").forEach(i=>{const g=i.className.split(" ")[1].replace(`${_}_`,"");x.add(g),v.set(g,i)});let b=0;const y="UniformBuffer"===this.#Kh||"StorageBuffer"===this.#Kh;i.forEach(i=>{const{useNum:S,buffer:w}=i,{uuid:L,size:k,name:H,gpuBuffer:z}=w,{label:W}=z,q=`${_}_${L}`;let be=v.get(L);be?x.delete(L):(be=document.createElement("div"),be.className=`debug-group ${q}`,be.innerHTML=` <div class='debug-item'> <div style="display:flex;flex-direction:column;width:100%"> <div class='debug-item-title'><span style="white-space:nowrap"> <span class="host"></span> <div class="name"></div> </span></div> <div style="font-size:10px">${L}</div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px;min-width:50px"> <span class='useNum' style="display:${y?"none":"block"};padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span> <span style="white-space:nowrap"><b class="videoMemorySize"></b></span> </div> </div> `,g.appendChild(be));const{host:Ke,filename:Xe}=this.#Yh(H);Ke?(updateDebugItemValue(be,"host",`${b} ${Ke}`),updateDebugItemValue(be,"name",Xe)):updateDebugItemValue(be,"host",`${b} ${W}`),y||updateDebugItemValue(be,"useNum",S,!0),updateDebugItemValue(be,"videoMemorySize",formatBytes(k)),b++});for(let i of x)v.get(i).remove()}};class DebugBufferList{debugStatisticsDomService;constructor(i){this.debugStatisticsDomService=new Wi(i)}get dom(){return this.debugStatisticsDomService.dom}update(i,g){this.debugStatisticsDomService.update(i,g)}}class ADebugItem{debugStatisticsDomService;constructor(){}get dom(){return this.debugStatisticsDomService.dom}update(i,g,x){this.debugStatisticsDomService.update(i,g)}}class ADebugStatisticsDomService{dom;#Xh=!1;constructor(){}get openYn(){return this.#Xh}set openYn(i){this.#Xh=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}init(i,g=!1,x=!1){this.#Xh=g,this.dom=document.createElement("div"),this.dom.innerHTML=` <div class="debug-folder">\t <div class="${x?"debug-folder-small-title":"debug-folder-title"}"> ${i} <div class="onoff">${this.openYn?"close":"open"}</div> </div> <div class="item-container" style="display:${g?"":"none"}"></div> </div>\n`;const _=this.dom.querySelector(".onoff").parentNode,v=this.dom.querySelector(".item-container");_.addEventListener("click",i=>{this.openYn=!this.openYn,v.style.display=this.openYn?"":"none"})}update(i,g){}}const ji=["useMSAA","useFXAA","alphaMode","renderScale"];let Yi=class extends ADebugStatisticsDomService{constructor(){super(),this.init(`${createDebugTitle("RedGPUContext")}`,!0),this.#jh()}update(i,g){ji.forEach(i=>this.#qh(g,i)),this.#Zh(g)}#jh(){const i=this.dom.querySelector(".item-container"),g=['<div class="debug-group">',...ji.map(i=>this.#Jh(i)),this.#Jh("width_height"),this.#Jh("pixelRectArray"),this.#Jh("backgroundColor"),"</div>"];i.innerHTML=g.join("")}#Jh(i){return` <div class='debug-item'> ${i} <span class='debug-item-title redGPUContext_${i}'/> </div> `}#qh(i,g){const x=["useMSAA","useFXAA"].includes(g),_=x?i.antialiasingManager[g]:i[g];updateDebugItemValue(this.dom,`redGPUContext_${g}`,x?makeBooleanDebug(0,_):getDebugFormatValue(_))}#Zh(i){const{sizeManager:g,width:x,height:_,backgroundColor:v}=i,{pixelRectArray:b}=g;updateDebugItemValue(this.dom,"redGPUContext_width_height",`${x},${_}`),updateDebugItemValue(this.dom,"redGPUContext_pixelRectArray",b),updateDebugItemValue(this.dom,"redGPUContext_backgroundColor",makeColorDebug("backgroundColor",v))}};class DebugRedGPUContext extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new Yi}}let qi=class extends ADebugStatisticsDomService{#Qh;constructor(i){super(),this.#Qh=i,this.init(`${createDebugTitle(`${i}Texture Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)`)}`,!1,!0)}update(i,g){if("Packed"===this.#Qh)this.#ef(i,g);else{const{resourceManager:x}=g,{managedBitmapTextureState:_,managedCubeTextureState:v,managedHDRTextureState:b}=x,{table:y,videoMemory:S}="Bitmap"===this.#Qh?_:"Cube"===this.#Qh?v:b;i.totalUsedVideoMemory+=S,updateDebugItemValue(this.dom,"totalCount",y.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(S)),this.#jh(y)}}getTargetSrc(i){if("Packed"===this.#Qh)return i.src||"packed texture";if(i instanceof ResourceStateCubeTexture){const{cacheKey:g}=i;return`${g}...`}{const{src:g}=i;return g?g.startsWith("data:")?"base64 texture":g:"null"}}getUpdatedTdom(i,g,x,_,v,b){return i||((i=document.createElement("div")).className=`debug-group ${x}`,i.innerHTML=` <div class='debug-item'> \t<div style="display:flex;flex-direction:column;width:100%"> <div class='debug-item-title'>${_} <span class="targetSrc" style="white-space:nowrap">${v||""}</span></div>  <div class='debug-item-cache-key'><span class="host">Place holder for host</span></div> <div class='debug-item-cache-key'><span class="fileName">Place holder for fileName</span></div> <div>mipLevelCount:<span class="mipLevelCount"></span>/useMipmap:<span class="useMipmap"></span></div> <div>width:<span class="width"></span>/height:<span class="height"></span></div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px;min-width:50px"> <span class='useNum' style="display:${"HDR"===this.#Qh?"none":"block"}padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span> <span><b class="videoMemorySize"></b></span> </div> </div> <div style="font-size:10px">${b}</div> `,g.appendChild(i)),i}updateDebugItems(i,g,x,_,v,b,y,S,w){updateDebugItemValue(i,"mipLevelCount",g),updateDebugItemValue(i,"useMipmap",x),updateDebugItemValue(i,"width",_),updateDebugItemValue(i,"height",v),"HDR"!==this.#Qh&&updateDebugItemValue(i,"useNum",b,!0);const{host:L,filename:k}=this.#Yh(y);L?(updateDebugItemValue(i,"host",L),updateDebugItemValue(i,"fileName",k)):updateDebugItemValue(i,"fileName",y),updateDebugItemValue(i,"targetSrc","null"===S?"":S),updateDebugItemValue(i,"videoMemorySize",formatBytes(w))}#ef(i,g){const x=PackedTexture.getCacheMap(),_=this.#tf(x);let v=0;_.forEach(i=>{v+=i.texture.videoMemorySize}),i.totalUsedVideoMemory+=v,updateDebugItemValue(this.dom,"totalCount",_.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(v)),this.#jh(_)}#tf(i){const g=new Map;return i.forEach((i,x)=>{const _={gpuTexture:i.gpuTexture,uuid:i.uuid,mipLevelCount:i.gpuTexture.mipLevelCount||1,useMipmap:(i.gpuTexture.mipLevelCount||1)>1,videoMemorySize:this.#nf(i.gpuTexture)},v={useNum:i.useNum,cacheKey:x,texture:_,src:`packed:${x.substring(0,50)}${x.length>50?"...":""}`,mappingKey:i.mappingKey};g.set(x,v)}),g}#nf(i){const g=i.label?.match(/(\d+)x(\d+)/);if(g){const x=parseInt(g[1]),_=parseInt(g[2]),v=i.mipLevelCount||1;let b=0;for(let i=0;i<v;i++){b+=Math.max(1,x>>i)*Math.max(1,_>>i)*4}return b}return 4194304}#Yh(i){if("Packed"===this.#Qh){try{const g=i.split("}_");if(g.length>=2){const i=g[0]+"}";g[1];return{host:"packed",filename:`${i.substring(0,20)}...`}}}catch{}return{host:"packed",filename:i.length>30?i.substring(0,30)+"...":i}}try{const g=new URL(i),x=g.pathname.split("/").pop()||i;return{host:g.host,filename:x}}catch{const g=i.split("_");return{host:g[0],filename:g.pop()||i}}}#jh(i){const g=this.dom.querySelector(".item-container"),x=new Set,_="Bitmap"===this.#Qh?"cube_texture":"Cube"===this.#Qh?"bitmap_texture":"HDR"===this.#Qh?"hdr_texture":"packed_texture";g.querySelectorAll(".debug-group").forEach(i=>{const g=i.className.split(" ")[1].replace(`${_}_`,"");x.add(g)});let v=0;for(const b of i.values()){const{useNum:i,cacheKey:y,texture:S}=b;let w=this.getTargetSrc(b);const{mipLevelCount:L,useMipmap:k,gpuTexture:H,uuid:z,videoMemorySize:W}=S,{width:q,height:be}=H||{},Ke=`${_}_${S.uuid}`;let Xe=g.querySelector(`.${Ke}`);Xe=this.getUpdatedTdom(Xe,g,Ke,v,w,z),x.delete(S.uuid),this.updateDebugItems(Xe,L,k,q,be,i,y,w,W),v++}for(let i of x)g.querySelector(`.${_}_${i}`)?.remove()}};class DebugTextureList extends ADebugItem{constructor(i="Bitmap"){super(),this.debugStatisticsDomService=new qi(i)}}const Zi=["totalNum3DGroups","totalNum3DObjects","totalNumInstances","totalNumDrawCalls","totalNumTriangles","totalNumPoints","totalUsedVideoMemory"];let Ji=class{dom;constructor(){this.dom=document.createElement("div"),this.#rf()}update(i){Zi.forEach(g=>{const x=i[g],_="totalUsedVideoMemory"===g?`<b>${formatBytes(x)}</b>`:x;updateDebugItemValue(this.dom,g,_)})}#rf(){const i=this.#jh();this.dom.innerHTML=` <div class="debug-group"> ${createDebugTitle("Total State")} <div>${i}</div>  </div> `}#jh(){return Zi.map(i=>"totalUsedVideoMemory"===i?`<div class='debug-item'>${i}<span class='debug-item-title'/><b class="${i}"></b></div>`:`<div class='debug-item'>${i}<span class='debug-item-title ${i}'/></div>`).join("")}};class DebugTotalState extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new Ji}}const Qi=["usedVideoMemory","viewRenderTime","num3DGroups","num3DObjects","numInstances","numDrawCalls","numTriangles","numPoints"],ea={viewRenderTime:"ms"},ta={camera:"camera.name",scene:"scene.name",useBackgroundColor:"scene.useBackgroundColor",backgroundColor:"scene.backgroundColor",x_y:"x,y",width_height:"width,height"};let na=class extends ADebugStatisticsDomService{#if=0;constructor(){super(),this.init(`${createDebugTitle("ViewList")}`,!0)}update(i,g){const{viewList:x,numViews:_}=g;this.#if!==_&&(this.#af(x),this.#if=_),x.forEach((g,x)=>{Qi.forEach(_=>this.#qh(g,x,_,i)),this.#Zh(g,x)})}#Jh(i,g){return` <div class='debug-item'> ${ta[g]||g} <span class='debug-item-title view${i}_${g}'/> </div> `}#af(i){const g=this.dom.querySelector(".item-container"),x=i.map((i,g)=>{const{name:x}=i,_=Qi.map(i=>this.#Jh(g,i));return _.push('<div class="debug-sub-group">',this.#Jh(g,"x_y"),this.#Jh(g,"width_height"),this.#Jh(g,"pixelRectArray"),this.#Jh(g,"camera"),this.#Jh(g,"scene"),this.#Jh(g,"useBackgroundColor"),this.#Jh(g,"backgroundColor"),"</div>"),`${createDebugTitle(`<div class="debug-sub-group-title">${x}</div>`)}${_.join("")}`});return g.innerHTML=` <div class="debug-group"> ${x.join('<div class="div-line"></div>')} </div> `}#qh(i,g,x,_){const{debugViewRenderState:v}=i,b=`total${x.charAt(0).toUpperCase()}${x.substring(1)}`,y=v[x],S="usedVideoMemory"===x?`<b>${formatBytes(y)}</b>`:y,w=ea[x];_[b]+=y,updateDebugItemValue(this.dom,`view${g}_${x}`,S,!1,w)}#Zh(i,g){const{debugViewRenderState:x,rawCamera:_,scene:v}=i,{backgroundColor:b,useBackgroundColor:y}=v,{viewportSize:S}=x,{pixelRectArray:w,x:L,y:k,width:H,height:z}=S;updateDebugItemValue(this.dom,`view${g}_x_y`,`${formatNumber(L)},${formatNumber(k)}`),updateDebugItemValue(this.dom,`view${g}_width_height`,`${H},${z}`),updateDebugItemValue(this.dom,`view${g}_pixelRectArray`,w),updateDebugItemValue(this.dom,`view${g}_useBackgroundColor`,makeBooleanDebug(0,y)),updateDebugItemValue(this.dom,`view${g}_backgroundColor`,makeColorDebug("backgroundColor",b)),updateDebugItemValue(this.dom,`view${g}_camera`,_.name),updateDebugItemValue(this.dom,`view${g}_scene`,v.name)}};class DebugViewList extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new na}}const formatNumber=i=>{const g=String(i);if(g.includes("%")){const i=parseFloat(g);return isNaN(i)?g:`${i.toFixed(2)}%`}if(g.includes("px")){const i=parseFloat(g);return isNaN(i)?g:`${i.toFixed(2)}px`}const x=parseFloat(g);return isNaN(x)?g:x.toFixed(2)};class DebugStatisticsDomService{dom;constructor(i){this.dom=document.createElement("div"),this.dom.style.cssText="z-index:1;position:sticky;top:0;background:#000;border-bottom:1px solid rgba(255,255,255,0.06);box-shadow:0 10px 10px rgba(0,0,0,0.5)",this.#rf(i)}update(i,g,x){const _={elapsedSeconds:i,currentFps:g,averageFps:x};Object.entries(_).forEach(([i,g])=>this.#sf(i,g))}#rf(i){this.dom.innerHTML=' <div class="debug-group" > <div class=\'debug-item\'> <span class=\'debug-item-title\'>Frame</span> <div style="display:flex;align-items:center;justify-content:flex-end"> <div class="elapsedSeconds" style="width:45px;text-align:right">elapsedSeconds</div> <div class="currentFps" style="width:50px;text-align:right">currentFps</div> <div style="color:#fff;width:50px;text-align:right" class="averageFps" >averageFps</div> <div class="panel_close" style="cursor:pointer;border-radius:4px;display:flex;align-items:center;justify-content:center;color:#fff;width:50px;background:red;margin-left:6px;">CLOSE</div> </div> </div> </div> '}#sf(i,g){const x=this.dom.querySelector(`.${i}`);if(x){const i=g.toLocaleString();x.innerHTML!==i&&(x.innerHTML=i)}}}class Fps extends ADebugItem{#of;#uf;#lf=0;#cf=0;#hf=!1;constructor(i){super(),this.debugStatisticsDomService=new DebugStatisticsDomService(i),this.#uf=performance.now()}update(i,g,x){this.#ff(x);const _=this.#df(),{elapsedSeconds:v,currentFps:b,averageFps:y}=_;this.#hf||(document.querySelector(".panel_close").addEventListener("click",()=>{g.useDebugPanel=!1}),this.#hf=!0),this.debugStatisticsDomService.update(`${v.toLocaleString()}ms`,`${b.toLocaleString()} FPS`,`${y} AVG`)}#ff(i){this.#of=i-this.#uf||16,this.#uf=i,this.#lf++}#df(){const i=1/(this.#of/1e3),g=Math.round(i);this.#cf+=i;return{currentFps:g,averageFps:Math.round(this.#cf/this.#lf),elapsedSeconds:this.#of}}}class DebugRender{fps;debugTotalState;debugViewList;debugRedGPUContext;debugBitmapTextureList;debugCubeTextureList;debugHDRTextureList;debugPackedTextureList;debugIndexBufferList;debugVertexBufferList;debugUniformBufferList;debugStorageBufferList;debugBufferList;totalNum3DGroups;totalNum3DObjects;totalNumDrawCalls;totalNumInstances;totalNumTriangles;totalNumPoints;totalUsedVideoMemory;#mf;constructor(i){this.fps=new Fps(i),this.debugTotalState=new DebugTotalState,this.debugRedGPUContext=new DebugRedGPUContext,this.debugViewList=new DebugViewList,this.debugBitmapTextureList=new DebugTextureList,this.debugCubeTextureList=new DebugTextureList("Cube"),this.debugHDRTextureList=new DebugTextureList("HDR"),this.debugPackedTextureList=new DebugTextureList("Packed"),this.debugIndexBufferList=new DebugBufferList("IndexBuffer"),this.debugVertexBufferList=new DebugBufferList("VertexBuffer"),this.debugUniformBufferList=new DebugBufferList("UniformBuffer"),this.debugStorageBufferList=new DebugBufferList("StorageBuffer"),this.debugBufferList=new DebugBufferList("Buffer"),this.#pf()}render(i,g){i.useDebugPanel?(this.#gf(),this.fps.update(this,i,g),this.debugRedGPUContext.update(this,i,g),this.debugViewList.update(this,i,g),this.debugBitmapTextureList.update(this,i,g),this.debugCubeTextureList.update(this,i,g),this.debugHDRTextureList.update(this,i,g),this.debugPackedTextureList.update(this,i,g),this.debugIndexBufferList.update(this,i),this.debugVertexBufferList.update(this,i),this.debugUniformBufferList.update(this,i),this.debugStorageBufferList.update(this,i),this.debugBufferList.update(this,i),this.debugTotalState.update(this,i,g)):this.#xf(),this.#pf()}#pf(){this.totalNum3DGroups=0,this.totalNum3DObjects=0,this.totalNumInstances=0,this.totalNumDrawCalls=0,this.totalNumTriangles=0,this.totalNumPoints=0,this.totalUsedVideoMemory=0}#gf(){this.#mf||(this.#mf=document.createElement("div"),this.#mf.className="RedGPUDebugPanel",document.body.appendChild(this.#mf),[this.fps.debugStatisticsDomService,this.debugTotalState.debugStatisticsDomService,this.debugRedGPUContext.debugStatisticsDomService,this.debugViewList.debugStatisticsDomService,this.debugBufferList.debugStatisticsDomService,this.debugVertexBufferList.debugStatisticsDomService,this.debugIndexBufferList.debugStatisticsDomService,this.debugUniformBufferList.debugStatisticsDomService,this.debugStorageBufferList.debugStatisticsDomService,this.debugBitmapTextureList.debugStatisticsDomService,this.debugPackedTextureList.debugStatisticsDomService,this.debugCubeTextureList.debugStatisticsDomService,this.debugHDRTextureList.debugStatisticsDomService].forEach(i=>this.#mf.appendChild(i.dom)))}#xf(){this.#mf&&(this.#mf.remove(),this.#mf=null)}}Object.freeze(DebugRender);const renderListForLayer=(i,g,x="pipeline")=>{let _=0;const v=i.length,{currentRenderPassEncoder:b}=g;for(;_<v;_++){const v=i[_];if(v.gpuRenderInfo){const i=v._geometry,_=v._material;i?g.num3DObjects++:g.num3DGroups++;const{gpuRenderInfo:y}=v,{vertexUniformBindGroup:S}=y;if(y[x]||("shadowPipeline"===x?y.shadowPipeline=v.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("drawDirectionalShadowDepth")?createBasePipeline(v,v.gpuRenderInfo.vertexShaderModule,v.gpuRenderInfo.vertexBindGroupLayout,Jn):null:"pickingPipeline"===x&&(y.pickingPipeline=v.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("picking")?createBasePipeline(v,v.gpuRenderInfo.vertexShaderModule,v.gpuRenderInfo.vertexBindGroupLayout,Qn):null)),i&&y[x]){b.setPipeline(y[x]);const{gpuBuffer:w}=i.vertexBuffer,{fragmentUniformBindGroup:L}=_.gpuRenderInfo;if(g.prevVertexGpuBuffer!==w&&(b.setVertexBuffer(0,w),g.prevVertexGpuBuffer=w,v.particleBuffers&&(v.particleBuffers.forEach((i,g)=>{b.setVertexBuffer(g+1,i)}),g.prevVertexGpuBuffer=null)),b.setBindGroup(1,S),g.prevFragmentUniformBindGroup!==L&&(b.setBindGroup(2,L),g.prevFragmentUniformBindGroup=L),g.numDrawCalls++,i.indexBuffer){const{indexBuffer:x}=i,{indexNum:_,triangleCount:y,gpuBuffer:S}=x;b.setIndexBuffer(S,"uint32"),v.particleBuffers?b.drawIndexed(_,v.particleNum,0,0,0):b.drawIndexed(_,1,0,0,0),g.numTriangles+=y,g.numPoints+=_}else{const{vertexBuffer:x}=i,{vertexCount:_,triangleCount:v}=x;b.draw(_,1,0,0),g.numTriangles+=v,g.numPoints+=_}}}}g.prevVertexGpuBuffer=null,g.prevFragmentUniformBindGroup=null,g.prevVertexGpuBuffer=null},renderList=(i,g)=>{let x=0;const _=i.length;for(;x<_;x++)i[x].render(g);g.prevVertexGpuBuffer=null,g.prevFragmentUniformBindGroup=null,g.prevVertexGpuBuffer=null};class Renderer{#_f;#vf;#bf;constructor(){}renderFrame(i,g){this.#vf||(this.#vf=new FinalRender),this.#bf||(this.#bf=new DebugRender(i));const x=[];{let _=0;const v=i.viewList.length;for(;_<v;_++){const v=i.viewList[_];x.push(this.renderView(v,g))}}this.#vf.render(i,x),i.antialiasingManager.changedMSAA=!1}start(i,g){cancelAnimationFrame(i.currentRequestAnimationFrame);const HD_render=x=>{g?.(x),i.currentTime=x,this.renderFrame(i,x),this.#bf.render(i,x),i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)};i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)}stop(i){cancelAnimationFrame(i.currentRequestAnimationFrame)}#yf(i,g){let x=0,_=1/g,v=i;for(;v>0;)x+=v%g*_,v=Math.floor(v/g),_/=g;return x}renderView(i,g){const{redGPUContext:x,camera:_,scene:v,pickingManager:b,pixelRectObject:y,axis:S,grid:w,skybox:L,debugViewRenderState:k,taa:H}=i,{antialiasingManager:z}=x,{useMSAA:W}=z,{shadowManager:q}=v,{directionalShadowManager:be}=q,{colorAttachment:Ke,depthStencilAttachment:Xe,gBufferNormalTextureAttachment:je,gBufferMotionVectorTextureAttachment:Ye}=this.#Tf(i);{const g=H.frameIndex||0,x=H.jitterStrength,_=g%32,v=(this.#yf(_+1,2)-.5)*x,b=(this.#yf(_+1,3)-.5)*x;i.setJitterOffset(v,b)}const Ze={colorAttachments:[Ke,je,Ye],depthStencilAttachment:Xe};_.update?.(i,g);const Je=x.gpuDevice.createCommandEncoder();if(i.debugViewRenderState.reset(null,g),y.width&&y.height){if(be.shadowDepthTextureView){const g={colorAttachments:[],depthStencilAttachment:{view:be.shadowDepthTextureView,depthClearValue:1,depthLoadOp:Vn.CLEAR,depthStoreOp:Fn.STORE}},x=Je.beginRenderPass(g);this.#Sf(i,x,!0,!1),((i,g)=>{const{debugViewRenderState:x,scene:_}=i;x.currentRenderPassEncoder=g;const{shadowManager:v}=_,{directionalShadowManager:b}=v,{castingList:y}=b;renderListForLayer(y,x,"shadowPipeline")})(i,x),x.end(),be.resetCastingList()}{const g=Je.beginRenderPass(Ze);this.#Sf(i,g,!1,!0),k.currentRenderPassEncoder=g,L&&L.render(k),((i,g)=>{const{debugViewRenderState:x,skybox:_,scene:v}=i;x.currentRenderPassEncoder=g;const{instanceMeshLayer:b}=x,{children:y}=v;_&&_.render(x),renderList(y,x),renderList(b,x)})(i,g),S&&S.render(k),w&&w.render(k),((i,g)=>{const{debugViewRenderState:x,rawCamera:_}=i;x.currentRenderPassEncoder=g;const{alphaLayer:v,transparentLayer:b,particleLayer:y}=x;renderListForLayer(v,x);const{x:S,y:w,z:L}=_;sortTransparentObjects({x:S,y:w,z:L},b),renderListForLayer(b,x),renderListForLayer(y,x)})(i,g),g.end()}if(i.debugViewRenderState.render2PathLayer.length){const{mipmapGenerator:g}=x.resourceManager;let _=i.viewRenderTextureManager.renderPath1ResultTexture,v=W?i.viewRenderTextureManager.gBufferColorResolveTexture:i.viewRenderTextureManager.gBufferColorTexture;v||(W?console.error("MSAA가 활성화되어 있지만 gBufferColorResolveTexture가 정의되지 않았습니다"):console.error("gBufferColorTexture가 정의되지 않았습니다")),_||console.error("renderPath1ResultTexture가 정의되지 않았습니다"),Je.copyTextureToTexture({texture:v},{texture:_},{width:i.pixelRectObject.width,height:i.pixelRectObject.height,depthOrArrayLayers:1}),g.generateMipmap(_,i.viewRenderTextureManager.renderPath1ResultTextureDescriptor,!0);const b=Je.beginRenderPass({colorAttachments:[...Ze.colorAttachments].map(i=>({...i,loadOp:Vn.LOAD})),depthStencilAttachment:{...Xe,depthLoadOp:Vn.LOAD}});let y=i.viewRenderTextureManager.renderPath1ResultTextureView;this.#Sf(i,b,!1,!1,y),((i,g)=>{const{debugViewRenderState:x}=i;x.currentRenderPassEncoder=g;const{render2PathLayer:_}=x;renderListForLayer(_,x)})(i,b),b.end()}if(b){b.checkTexture(i);const g={colorAttachments:[{view:b.pickingGPUTextureView,clearValue:{r:0,g:0,b:0,a:0},loadOp:Vn.CLEAR,storeOp:Fn.STORE}],depthStencilAttachment:{view:b.pickingDepthGPUTextureView,depthClearValue:1,depthLoadOp:Vn.CLEAR,depthStoreOp:Fn.STORE}},x=Je.beginRenderPass(g);this.#Sf(i,x,!1,!1),((i,g)=>{const{debugViewRenderState:x,pickingManager:_}=i;x.currentRenderPassEncoder=g;const{castingList:v}=_;renderListForLayer(v,x,"pickingPipeline")})(i,x),x.end()}}Ze.colorAttachments[0].postEffectView=i.postEffectManager.render().textureView,x.gpuDevice.queue.submit([Je.finish()]),i.debugViewRenderState.viewRenderTime=performance.now()-i.debugViewRenderState.startTime,b.checkEvents(i,g);{const{projectionMatrix:g,noneJitterProjectionMatrix:x,rawCamera:_,redGPUContext:v}=i,{modelMatrix:b}=_,{gpuDevice:y}=v,S=i.systemUniform_Vertex_StructInfo,w=i.systemUniform_Vertex_UniformBuffer.gpuBuffer;[{key:"prevProjectionCameraMatrix",value:multiply(aa,x,b)}].forEach(({key:i,value:g})=>{y.queue.writeBuffer(w,S.members[i].uniformOffset,new S.members[i].View(g))})}return Ze}#Tf(i){const{scene:g,redGPUContext:x,viewRenderTextureManager:_}=i,{depthTextureView:v,gBufferColorTextureView:b,gBufferColorResolveTextureView:y,gBufferNormalTextureView:S,gBufferNormalResolveTextureView:w,gBufferMotionVectorTextureView:L,gBufferMotionVectorResolveTextureView:k}=_,{antialiasingManager:H}=x,{useMSAA:z}=H,W={view:b,clearValue:{r:0,g:0,b:0,a:0},loadOp:Vn.CLEAR,storeOp:Fn.STORE},q={view:v,depthClearValue:1,depthLoadOp:Vn.CLEAR,depthStoreOp:Fn.STORE},be={view:S,clearValue:{r:0,g:0,b:0,a:0},loadOp:Vn.CLEAR,storeOp:Fn.STORE},Ke={view:L,clearValue:{r:0,g:0,b:0,a:0},loadOp:Vn.CLEAR,storeOp:Fn.STORE};return z&&(W.resolveTarget=y,be.resolveTarget=w,Ke.resolveTarget=k),{colorAttachment:W,depthStencilAttachment:q,gBufferNormalTextureAttachment:be,gBufferMotionVectorTextureAttachment:Ke}}#Sf(i,g,x=!1,_=!0,v=null){const{inverseProjectionMatrix:b,pixelRectObject:y,noneJitterProjectionMatrix:S,projectionMatrix:w,rawCamera:L,redGPUContext:k,scene:H}=i,{gpuDevice:z}=k,{modelMatrix:W,position:q}=L,be=i.systemUniform_Vertex_StructInfo,Ke=i.systemUniform_Vertex_UniformBuffer.gpuBuffer,{shadowManager:Xe,lightManager:je}=H,{directionalShadowManager:Ye}=Xe,Ze=L instanceof Camera2D;if(x){const i=Ye.shadowDepthTextureSize,x=Ye.shadowDepthTextureSize;g.setViewport(0,0,i,x,0,1),g.setScissorRect(0,0,i,x)}else{const{width:i,height:x}=y;this.#_f&&this.#_f.width===i&&this.#_f.height===x||(g.setViewport(0,0,i,x,0,1),g.setScissorRect(0,0,i,x),this.#_f={width:i,height:x})}je.updateViewSystemUniforms(i),Ye.updateViewSystemUniforms(k),i.update(i,x,_,v),g.setBindGroup(0,i.systemUniform_Vertex_UniformBindGroup),[{key:"projectionMatrix",value:w},{key:"projectionCameraMatrix",value:multiply(ra,w,W)},{key:"noneJitterProjectionMatrix",value:S},{key:"noneJitterProjectionCameraMatrix",value:multiply(ia,S,W)},{key:"inverseProjectionMatrix",value:b},{key:"resolution",value:[i.pixelRectObject.width,i.pixelRectObject.height]}].forEach(({key:i,value:g})=>{z.queue.writeBuffer(Ke,be.members[i].uniformOffset,new be.members[i].View(g))}),[{key:"cameraMatrix",value:W},{key:"cameraPosition",value:q},{key:"nearClipping",value:[Ze?0:L.nearClipping]},{key:"farClipping",value:[Ze?0:L.farClipping]}].forEach(({key:i,value:g})=>{z.queue.writeBuffer(Ke,be.members.camera.members[i].uniformOffset,new be.members.camera.members[i].View(g))})}}let ra=create$2(),ia=create$2(),aa=create$2();var sa=Object.freeze({__proto__:null,isHexColor:isHexColor,isUint:isUint,validateNumber:validateNumber,validateNumberRange:validateNumberRange,validatePositiveNumberRange:validatePositiveNumberRange,validateRedGPUContext:validateRedGPUContext,validateUintRange:validateUintRange});class MeshInfo_OBJ{name;groupName;materialKey;index;position;resultPosition;resultNormal;resultUV;resultInterleave;use;childrenInfo;ableUV;ableNormal;ableLight;mesh;constructor(i,g){this.name=i,this.groupName=g,this.index=[],this.position=[],this.resultPosition=[],this.resultNormal=[],this.resultUV=[],this.resultInterleave=[],this.use=!0,this.childrenInfo={}}createVertexBuffer(i,g){let x={};return this.resultPosition.length&&(x.aVertexPosition=InterleaveType.float32x3),this.resultNormal.length&&(x.aVertexNormal=InterleaveType.float32x3),this.resultUV.length&&(x.aTexcoord=InterleaveType.float32x2),new VertexBuffer(i,new Float32Array(this.resultInterleave.length?this.resultInterleave:this.resultPosition),new InterleavedStruct(x,`InterleavedStruct_${g}}`),void 0,`VertexBuffer_${g}`)}createBufferIndex(i,g){if(this.index.length)return new IndexBuffer(i,this.index,void 0,`IndexBuffer_${g}`)}createColorMaterial(i){return this.resultUV.length&&this.resultNormal.length||this.resultNormal.length?new ColorMaterial(i,"#00ff00"):new ColorMaterial(i,"#0000ff")}}Object.freeze(MeshInfo_OBJ);class TotalPointInfo_OBJ{position=[];normal=[];uv=[];points=[];normalPoints=[];uvPoints=[];constructor(){}}Object.freeze(TotalPointInfo_OBJ);class OBJMTLLoader{complete;parseData;#Mf;#wf;#Rf;constructor(i,g,x){this.#Mf=getFilePath(g),this.#wf=getFileName(g),this.#Rf=g,this.#Cf(g,x)}get path(){return this.#Mf}get fileName(){return this.#wf}get url(){return this.#Rf}#Cf(i,g){fetch(i,{method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded;charset=UTF-8"}}).then(i=>{if(!i.ok)throw new Error(`HTTP 오류! 상태값:${i.status}`);return i.text()}).then(i=>{this.complete=!0,this.parseData=function(i,g){let x;const _={},v={single:["newmtl","Ns","Ni","d","illum"],multi:["Ka","Kd","Ks"],maps:["map_Kd","map_Ns","map_bump"]};return(g=g.replace(/^\#[\s\S]+?\n/g,"")).split("\n").forEach(g=>{for(const b in v)for(const y of v[b])if(new RegExp(`^(${y} )`).test(g))switch(b){case"single":if("newmtl"===y){const i=g.replace("newmtl ","").trim();x={name:i},_[i]=x}else x[y]=+g.replace(`${y} `,"").trim();break;case"multi":x[y]=g.replace(`${y} `,"").split(" ");break;case"maps":x[y]=i.path+g.replace(`${y} `,"").trim()}}),_}(this,i),g?.(this.parseData)}).catch(i=>{this.complete=!0,this.parseData={},g?.(this.parseData)})}}Object.freeze(OBJMTLLoader);const oa=/^o/,ua=/v( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,la=/f\s+(([\d]{1,}[\s]?){3,})+/,ca=/f\s+((([\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,ha=/f\s+((([\d]{1,}\/[\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,fa=/f\s+((([\d]{1,}\/\/[\d]{1,}[\s]?){3,})+)/;let da,ma;function processMaterialLibrary(i,g,x,_,v){v=new OBJMTLLoader(x,`${g.path}${i.split(" ")[1]}`,i=>{g.mtlLoader=i,g.modelParsingComplete&&(((i,g,x)=>{let _,v,b,y;for(_ in y={},g){let S,w;b=g[_];const{use:L,materialKey:k,mesh:H}=b,{ableLight:z,ableNormal:W}=b,{resultInterleave:q}=b;if(L&&q.length){let g,_,b;v=x.parseData[k],v&&(v.map_Kd?(y[v.map_Kd]?w=y[v.map_Kd]:(w=new BitmapTexture(i,v.map_Kd),y[v.map_Kd]=w),S=new BitmapMaterial(i,w)):v.Kd&&(g=255*v.Kd[0],_=255*v.Kd[1],b=255*v.Kd[2],S=new ColorMaterial(i,convertRgbToHex(g,_,b))),S&&(v.map_Ns&&(y[v.map_Ns]?w=y[v.map_Ns]:(w=new BitmapTexture(i,v.map_Ns),y[v.map_Ns]=w),S.specularTexture=w),v.map_bump&&(y[v.map_bump]?w=y[v.map_bump]:(w=new BitmapTexture(i,v.map_bump),y[v.map_bump]=w),S.normalTexture=w),void 0!==v.Ns&&(S.shininess=v.Ns),H.material=S))}}})(x,_,v),g.callback&&g.callback(g.result))}),g.mtlLoader=v}function processMaterialUsage(i,g,x){g[x].materialKey=i.split(" ").slice(1).join("").trim()}function processGroup(i,g,x,_){const v=i.split(" ").slice(1).join("").trim();g[x].use=!1;const b=new MeshInfo_OBJ(v,x);b.groupName=x,b.materialKey=v.replace(`${x}_`,""),b.position=da.position,_[v]=da=b,g[x].childrenInfo[v]=da}function processNewObject(i,g,x){const _=i.split(" ").slice(1).join("").trim(),v=new MeshInfo_OBJ(_,_);v.groupName=_,v.materialKey=_,g[_]=da=v,x[_]=da,ma=_}function processVertexNormals(i,g,x){const _=i.split(" ");g.push(+_[1],+_[2],+_[3]),x[x.length]=[+_[1],+_[2],+_[3]]}function processTextureCoordinates(i,g,x){const _=i.split(" ");g.push(+_[1],1-_[2]),x[x.length]=[+_[1],1-_[2]]}function processVertex(i,g,x){const _=i.split(" ");g.push(+_[1],+_[2],+_[3]),da.position.push(+_[1],+_[2],+_[3]),x[x.length]=[+_[1],+_[2],+_[3]]}function processFaceVertexNormal(i,g,x,_,v){const b=3*(g.length+x.length);i.split(" ").slice(1,4).forEach(i=>{const[g,,x]=i.split("/").map(i=>Number(i)-1),y=_[g],S=v[x],{index:w,resultInterleave:L}=da,{resultPosition:k,resultNormal:H,resultUV:z}=da;w.push(L.length/b),k.push(...y),H.push(...S),L.push(...y,...S)})}function processFaceVertexTextureNormal(i,g,x,_,v,b,y){let S=i.split(" ").slice(1,5);if(4===S.length){let i=S[3];S[3]=S[0],S[4]=S[2],S[5]=i}S.forEach(i=>{const[S,w,L]=i.split("/").map(Number).map(i=>i-1),k=v[S],H=y[w],z=b[L],W=(g.length?3:0)+(x.length?3:0)+(_.length?2:0),{index:q,resultInterleave:be}=da,{resultPosition:Ke,resultNormal:Xe,resultUV:je}=da;q.push(be.length/W),g.length&&(Ke.push(...k),be.push(...k)),x.length&&(Xe.push(...z),be.push(...z)),_.length&&(je.push(...H),be.push(...H))})}function processFaceVertexTexture(i,g,x,_,v){i.split(" ").slice(1,4).forEach(i=>{const[b,y]=i.split("/").map(Number).map(i=>i-1),S=_[b];let w;0!==v.length&&(w=v[y]);const L=(g.length?3:0)+(x.length?2:0);da.index.push(da.resultInterleave.length/L),g.length&&(da.resultPosition.push(...S),da.resultInterleave.push(...S)),x.length&&(da.resultUV.push(...w),da.resultInterleave.push(...w))})}function processFaceVertex(i,g){let x=i.split(" ");da.resultInterleave=da.resultPosition=da.position,da.index.push(+x[1]-1,+x[2]-1,+x[3]-1),da.index.push(+x[1]-1,+x[3]-1,+x[4]-1)}const parserMesh_OBJ=(i,g,x)=>{for(let _ in x){const v=x[_];let b;if(v.use){const g=v.createVertexBuffer(i,_),x=v.createBufferIndex(i,_),y=v.createColorMaterial(i);b=new Mesh(i,new Geometry(i,g,x),y),v.ableUV=Boolean(v.resultUV.length),v.ableNormal=Boolean(v.resultNormal.length),v.ableLight=v.ableUV&&v.ableNormal}else b=new Mesh(i);b.name=_,v.mesh=b,g.addChild(b),parserMesh_OBJ(i,b,v.childrenInfo)}},parserOBJ=(i,g,x)=>{const _=((i,g,x)=>{let _,v;const b=new TotalPointInfo_OBJ,{points:y,normalPoints:S,uvPoints:w}=b,{position:L,normal:k,uv:H}=b;let z,W;v={},_={};const q=x.length;for(z=0;z<q;z++)if(oa.test(x[z])){W=!0;break}if(!W){const i="objModel"+createUUID();v[i]=da=new MeshInfo_OBJ(i,i),_[i]=da,ma=i}const be=x.length;for(let b=0;b<be;b++){const z=x[b];z.startsWith("mtllib ")?processMaterialLibrary(z,g,i,_,void 0):z.startsWith("usemtl ")?processMaterialUsage(z,_,ma):z.startsWith("g ")?processGroup(z,v,ma,_):z.startsWith("o ")?processNewObject(z,v,_):z.startsWith("vn ")?processVertexNormals(z,k,S):z.startsWith("vt ")?processTextureCoordinates(z,H,w):ua.test(z)?processVertex(z,L,y):fa.test(z)?processFaceVertexNormal(z,L,k,y,S):ha.test(z)?processFaceVertexTextureNormal(z,L,k,H,y,S,w):ca.test(z)?processFaceVertexTexture(z,L,H,y,w):la.test(z)&&processFaceVertex(z)}return{info:_,infoHierarchy:v}})(i,g,(x=x.replace(/^\#[\s\S]+?\n/g,"")).split("\n")),v=_.infoHierarchy;return parserMesh_OBJ(i,g.resultMesh,v),{...g,..._,parseInfoMaterial:g.mtlLoader}};class OBJLoader{modelParsingComplete=!1;resultMesh;result;callback;mtlLoader;#Mf;#wf;#Rf;constructor(i,g,x){validateRedGPUContext(i),g&&(fetch(g).then(i=>i.text()).then(g=>{this.result=parserOBJ(i,this,g),this.modelParsingComplete=!0,this.resultMesh=g,x&&(this.mtlLoader?this.mtlLoader.complete&&x(this.result):x(this.result))}).catch(i=>console.error("Error:",i)),this.#Mf=getFilePath(g),this.#wf=getFileName(g),this.#Rf=g,this.mtlLoader=null,this.callback=x,this.resultMesh=new Mesh(i),this.resultMesh.name="instanceOfOBJLoader_"+createUUID(),this.result=null)}get path(){return this.#Mf}get fileName(){return this.#wf}get url(){return this.#Rf}}Object.freeze(OBJLoader);class AMultiPassPostEffect extends ASinglePassPostEffect{#Pf=[];#Mt=0;constructor(i,g){super(i),this.#Pf.push(...g)}get videoMemorySize(){return this.#Bi(),this.#Mt}get passList(){return this.#Pf}clear(){this.#Pf.forEach(i=>i.clear())}render(i,g,x,_){let v;return this.#Pf.forEach((b,y)=>{y&&(_=v),v=b.render(i,g,x,_)}),v}#Bi(){this.#Mt=0,this.#Pf.forEach(i=>{this.#Mt+=i.videoMemorySize})}}Object.freeze(AMultiPassPostEffect);class BrightnessContrast extends ASinglePassPostEffect{#Bf=0;#Ef=0;constructor(i){super(i),this.init(i,"POST_EFFECT_BRIGHTNESS_CONTRAST",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet brightness_value:f32=uniforms.brightness/255.0;\nlet contrast_value:f32=uniforms.contrast/255.0;\nvar tempColor:vec3<f32>;\nif ( contrast_value > 0.0 ) { tempColor=( color.rgb - 0.5 )/( 1.0 - contrast_value ) + 0.5;\n}else { tempColor=( color.rgb - 0.5 ) * ( 1.0 + contrast_value ) + 0.5;\n}\ncolor=vec4<f32>(tempColor + brightness_value,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms { brightness:f32, contrast:f32\n};\n"))}get brightness(){return this.#Bf}set brightness(i){validateNumberRange(i,-150,150),this.#Bf=i,this.updateUniform("brightness",i)}get contrast(){return this.#Ef}set contrast(i){validateNumberRange(i,-50,100),this.#Ef=i,this.updateUniform("contrast",i)}}Object.freeze(BrightnessContrast);class ColorBalance extends ASinglePassPostEffect{#If=0;#Lf=0;#Uf=0;#Df=0;#Af=0;#kf=0;#Of=0;#Gf=0;#Nf=0;#Vf=!0;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_BALANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet original_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nlet shadow_weight=1.0 - smoothstep(0.0,0.5,original_luminance);\nlet highlight_weight=smoothstep(0.5,1.0,original_luminance);\nlet midtone_weight=1.0 - shadow_weight - highlight_weight;\nlet cyan_red=shadow_weight * uniforms.shadowCyanRed +\nmidtone_weight * uniforms.midtoneCyanRed +\nhighlight_weight * uniforms.highlightCyanRed;\nlet magenta_green=shadow_weight * uniforms.shadowMagentaGreen +\nmidtone_weight * uniforms.midtoneMagentaGreen +\nhighlight_weight * uniforms.highlightMagentaGreen;\nlet yellow_blue=shadow_weight * uniforms.shadowYellowBlue +\nmidtone_weight * uniforms.midtoneYellowBlue +\nhighlight_weight * uniforms.highlightYellowBlue;\ncolor.r +=cyan_red * 0.01;\ncolor.g +=magenta_green * 0.01;\ncolor.b +=yellow_blue * 0.01;\nlet adjusted_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nif (uniforms.preserveLuminosity==1 && adjusted_luminance > 0.0) { let ratio=original_luminance/adjusted_luminance; color=color * ratio;\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms { shadowCyanRed:f32, shadowMagentaGreen:f32, shadowYellowBlue:f32, midtoneCyanRed:f32, midtoneMagentaGreen:f32, midtoneYellowBlue:f32, highlightCyanRed:f32, highlightMagentaGreen:f32, highlightYellowBlue:f32, preserveLuminosity:u32\n};\n"))}get shadowCyanRed(){return this.#If}set shadowCyanRed(i){validateNumberRange(i,-100,100),this.#If=i,this.updateUniform("shadowCyanRed",i)}get shadowMagentaGreen(){return this.#Lf}set shadowMagentaGreen(i){validateNumberRange(i,-100,100),this.#Lf=i,this.updateUniform("shadowMagentaGreen",i)}get shadowYellowBlue(){return this.#Uf}set shadowYellowBlue(i){validateNumberRange(i,-100,100),this.#Uf=i,this.updateUniform("shadowYellowBlue",i)}get midtoneCyanRed(){return this.#Df}set midtoneCyanRed(i){validateNumberRange(i,-100,100),this.#Df=i,this.updateUniform("midtoneCyanRed",i)}get midtoneMagentaGreen(){return this.#Af}set midtoneMagentaGreen(i){validateNumberRange(i,-100,100),this.#Af=i,this.updateUniform("midtoneMagentaGreen",i)}get midtoneYellowBlue(){return this.#kf}set midtoneYellowBlue(i){validateNumberRange(i,-100,100),this.#kf=i,this.updateUniform("midtoneYellowBlue",i)}get highlightCyanRed(){return this.#Of}set highlightCyanRed(i){validateNumberRange(i,-100,100),this.#Of=i,this.updateUniform("highlightCyanRed",i)}get highlightMagentaGreen(){return this.#Gf}set highlightMagentaGreen(i){validateNumberRange(i,-100,100),this.#Gf=i,this.updateUniform("highlightMagentaGreen",i)}get highlightYellowBlue(){return this.#Nf}set highlightYellowBlue(i){validateNumberRange(i,-100,100),this.#Nf=i,this.updateUniform("highlightYellowBlue",i)}get preserveLuminosity(){return this.#Vf}set preserveLuminosity(i){this.#Vf=i,this.updateUniform("preserveLuminosity",i)}}Object.freeze(ColorBalance);class ColorTemperatureTint extends ASinglePassPostEffect{#Ff=6500;#Hf=0;#zf=100;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_TEMPERATURE_TINT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet temp=uniforms.temperature;\nvar tempRGB:vec3<f32>;\nif (temp <=6600.0) { tempRGB.r=1.0;\n} else { let t=temp - 6600.0; tempRGB.r=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp <=6600.0) { let t=temp; tempRGB.g=clamp(0.39008157 * log(t) - 0.63184144,0.0,1.0);\n} else { let t=temp - 6600.0; tempRGB.g=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp >=6600.0) { tempRGB.b=1.0;\n} else if (temp <=1900.0) { tempRGB.b=0.0;\n} else { let t=temp - 1000.0; tempRGB.b=clamp(0.543206789 * log(t) - 1.19625408,0.0,1.0);\n}\nlet neutralTemp:vec3<f32>=vec3<f32>(1.0,1.0,1.0);\nlet tempAdjust:vec3<f32>=tempRGB/neutralTemp;\nlet tintValue=uniforms.tint * 0.01;\nvar tintRGB:vec3<f32>;\nif (tintValue >=0.0) { tintRGB=vec3<f32>(1.0 - tintValue * 0.2,1.0,1.0 - tintValue * 0.2);\n} else { let mag=-tintValue; tintRGB=vec3<f32>(1.0,1.0 - mag * 0.2,1.0);\n}\nlet colorAdjust=tempAdjust * tintRGB;\nlet strength=uniforms.strength * 0.01;\nlet finalAdjust=mix(vec3<f32>(1.0,1.0,1.0),colorAdjust,strength);\ncolor=vec4<f32>(color.rgb * finalAdjust,color.a);\ncolor=vec4<f32>(clamp(color.rgb,vec3<f32>(0.0),vec3<f32>(1.0)),color.a);\ntextureStore(outputTexture,index,color);\n","struct Uniforms { temperature:f32, tint:f32, strength:f32\n};\n")),this.strength=this.#zf,this.tint=this.#Hf,this.temperature=this.#Ff}get temperature(){return this.#Ff}set temperature(i){validateNumberRange(i,1e3,2e4),this.#Ff=i,this.updateUniform("temperature",i)}get tint(){return this.#Hf}set tint(i){validateNumberRange(i,-100,100),this.#Hf=i,this.updateUniform("tint",i)}get strength(){return this.#zf}set strength(i){validateNumberRange(i,0,100),this.#zf=i,this.updateUniform("strength",i)}setWarmTone(){this.temperature=3200,this.tint=-10}setCoolTone(){this.temperature=8e3,this.tint=10}setNeutral(){this.temperature=6500,this.tint=0}setCandleLight(){this.temperature=1900,this.tint=-5}setDaylight(){this.temperature=5600,this.tint=0}setCloudyDay(){this.temperature=7500,this.tint=5}setNeonLight(){this.temperature=9e3,this.tint=15}}Object.freeze(ColorTemperatureTint);class Grayscale extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_GRAYSCALE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index );\nlet gray=(color.r + color.g + color.b)/3.0;\ntextureStore(outputTexture,index,vec4<f32>( gray,gray,gray,color.a) );\n",""))}}Object.freeze(Grayscale);class HueSaturation extends ASinglePassPostEffect{#$f=0;#Kf=0;constructor(i){super(i),this.init(i,"POST_EFFECT_HUE_SATURATION",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet hue_value:f32=uniforms.hue/180.0;\nlet saturation_value:f32=uniforms.saturation/100.0;\nlet angle:f32=hue_value * 3.1415926535897932384626433832795;\nlet s:f32=sin(angle);\nlet c:f32=cos(angle);\nvar weights:vec3<f32>=(vec3<f32>(2.0 * c,-sqrt(3.0) * s - c,sqrt(3.0) * s - c) + 1.0)/3.0;\nlet len:f32=length(color.rgb);\ncolor=vec4<f32>( vec3<f32>( dot(color.rgb,weights.xyz), dot(color.rgb,weights.zxy), dot(color.rgb,weights.yzx) ), color.a\n);\nlet average:f32=(color.r + color.g + color.b)/3.0;\nif (saturation_value > 0.0) { color=vec4<f32>( color.rgb + (average - color.rgb) * (1.0 - 1.0/(1.001 - saturation_value)), color.a );\n} else { color=vec4<f32>( color.rgb + (average - color.rgb) * (-saturation_value), color.a );\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms { hue:f32, saturation:f32\n};\n"))}get hue(){return this.#$f}set hue(i){validateNumberRange(i,-180,180),this.#$f=i,this.updateUniform("hue",i)}get saturation(){return this.#Kf}set saturation(i){validateNumberRange(i,-100,100),this.#Kf=i,this.updateUniform("saturation",i)}}Object.freeze(HueSaturation);class Invert extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_INVERT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\ncolor.r=1.0 - color.r;\ncolor.g=1.0 - color.g;\ncolor.b=1.0 - color.b;\ntextureStore(outputTexture,index,color );\n",""))}}Object.freeze(Invert);class Threshold extends ASinglePassPostEffect{#Xf=128;constructor(i){super(i),this.init(i,"POST_EFFECT_THRESHOLD",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet threshold_value:f32=uniforms.threshold/255.0;\nvar v=0.0;\nif( 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b >=threshold_value) { v=1.0;\n}\ncolor=vec4<f32>(v,v,v,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms { threshold:f32\n};\n")),this.threshold=this.#Xf}get threshold(){return this.#Xf}set threshold(i){validateNumberRange(i,1,255),this.#Xf=i,this.updateUniform("threshold",i)}}Object.freeze(Threshold);class Vibrance extends ASinglePassPostEffect{#Wf=0;#Kf=0;constructor(i){super(i),this.init(i,"POST_EFFECT_VIBRANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet originalColor=color;\nlet luminance=0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\nif (uniforms.saturation !=0.0) { let saturationFactor=1.0 + uniforms.saturation * 0.01; color=vec4<f32>( mix(luminance,color.r,saturationFactor), mix(luminance,color.g,saturationFactor), mix(luminance,color.b,saturationFactor), color.a );\n}\nif (uniforms.vibrance !=0.0) { let maxComponent=max(max(color.r,color.g),color.b); let minComponent=min(min(color.r,color.g),color.b); let currentSaturation=maxComponent - minComponent; let protectionFactor=1.0/(1.0 + exp(6.0 * (currentSaturation - 0.6))); var skinToneProtection=1.0; if (color.r > color.g && color.g > color.b) { let skinToneAmount=(color.r - color.b)/max(color.r,0.001); skinToneProtection=1.0 - smoothstep(0.3,0.8,skinToneAmount) * 0.7; } let finalProtection=protectionFactor * skinToneProtection; let vibranceStrength=uniforms.vibrance * 0.01 * finalProtection; let vibranceFactor=1.0 + vibranceStrength; color=vec4<f32>( mix(luminance,color.r,vibranceFactor), mix(luminance,color.g,vibranceFactor), mix(luminance,color.b,vibranceFactor), color.a );\n}\ncolor=clamp(color,vec4<f32>(0.0),vec4<f32>(1.0));\ntextureStore(outputTexture,index,color);\n","struct Uniforms { vibrance:f32, saturation:f32\n};\n"))}get vibrance(){return this.#Wf}set vibrance(i){validateNumberRange(i,-100,100),this.#Wf=i,this.updateUniform("vibrance",i)}get saturation(){return this.#Kf}set saturation(i){validateNumberRange(i,-100,100),this.#Kf=i,this.updateUniform("saturation",i)}}Object.freeze(Vibrance);const pa=[0,0,0,0,0,1,0,0,0,0,0,0],ga=[0,-1,0,0,-1,5,-1,0,0,-1,0,0],xa=[1,1,1,0,1,1,1,0,1,1,1,0],_a=[0,1,0,0,1,-4,1,0,0,1,0,0],va=[-2,-1,0,0,-1,1,1,0,0,1,2,0];class Convolution extends ASinglePassPostEffect{static NORMAL=pa;static SHARPEN=ga;static BLUR=xa;static EDGE=_a;static EMBOSE=va;#jf=xa;constructor(i){super(i),this.init(i,"POST_EFFECT_CONVOLUTION",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet perPX=vec2<f32>(1.0/dimW,1.0/dimH);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=vec4<f32>(0.0);\nlet kernelWeight_value:f32=uniforms.kernelWeight;\nlet kernel_value:mat3x3<f32>=uniforms.kernel;\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,-1)) * kernel_value[0][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,-1)) * kernel_value[0][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,-1)) * kernel_value[0][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,0)) * kernel_value[1][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,0)) * kernel_value[1][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,0)) * kernel_value[1][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,1)) * kernel_value[2][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,1)) * kernel_value[2][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,1)) * kernel_value[2][2];\ntextureStore(outputTexture,index,color/kernelWeight_value );\n","struct Uniforms { kernelWeight:f32, kernel:mat3x3<f32>\n};\n")),this.kernel=this.#jf}get kernel(){return this.#jf}set kernel(i){this.#jf=i;let g=0;for(const i in this.#jf)g+=this.#jf[i];this.updateUniform("kernelWeight",g),this.updateUniform("kernel",i)}}Object.freeze(Convolution);class Blur extends AMultiPassPostEffect{#Yf;constructor(i){super(i,[new Convolution(i)]),this.#Yf=this.passList[0],this.#Yf.kernel=Convolution.BLUR}render(i,g,x,_){return this.#Yf.render(i,g,x,_)}}Object.freeze(Blur);class BlurX extends ASinglePassPostEffect{#ee=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_X",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=(t + offset - 0.5)/loopSize; var weight=1.0 - abs(percent); var ix=clamp((f32(global_id.x) + f32(size_value * percent)),0.0,dimW - 1.0); let delta=vec2<i32>(i32(ix),i32(global_id.y)); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms { size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#ee}get size(){return this.#ee}set size(i){validateNumberRange(i,0),this.#ee=i,this.updateUniform("size",i)}}Object.freeze(BlurX);class BlurY extends ASinglePassPostEffect{#ee=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_Y",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimH=f32(dimensions.y);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=(t + offset - 0.5)/loopSize; var weight=1.0 - abs(percent); var iy=clamp((f32(global_id.y) + f32(size_value * percent)),0.0,dimH - 1.0); let delta=vec2<i32>(i32(global_id.x),i32(iy)); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms { size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#ee}get size(){return this.#ee}set size(i){validateNumberRange(i,0),this.#ee=i,this.updateUniform("size",i)}}Object.freeze(BlurY);class DirectionalBlur extends ASinglePassPostEffect{#qf=15;#Zf=0;constructor(i){super(i),this.init(i,"POST_EFFECT_DIRECTIONAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet direction=vec2<f32>(uniforms.directionX,uniforms.directionY);\nlet dirLength=length(direction);\nlet normalizedDir=select(vec2<f32>(0.0),direction/dirLength,dirLength > 0.0);\nlet dir=normalizedDir * uniforms.amount;\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=1.0 - (t + offset - 0.5)/loopSize; var weight=3.0 * (percent - percent * percent); let deltaPercent=dir * percent; let delta=vec2<i32>( i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)), i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms { amount:f32, directionX:f32, directionY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#qf,this.angle=this.#Zf}get angle(){return this.#Zf}set angle(i){validateNumber(i),this.#Zf=i%360,this.#Jf()}get amount(){return this.#qf}set amount(i){validateNumberRange(i,0),this.#qf=i,this.updateUniform("amount",i)}#Jf(){const i=this.#Zf*Math.PI/180,g=Math.cos(i),x=Math.sin(i);this.updateUniform("directionX",g),this.updateUniform("directionY",x)}}Object.freeze(DirectionalBlur);class GaussianBlur extends AMultiPassPostEffect{#ee=32;constructor(i){super(i,[new BlurX(i),new BlurY(i)])}get size(){return this.#ee}set size(i){this.#ee=i,this.passList.forEach(g=>g.size=i)}}Object.freeze(GaussianBlur);class RadialBlur extends ASinglePassPostEffect{#qf=50;#Vr=0;#Fr=0;#Qf=16;constructor(i){super(i),this.init(i,"POST_EFFECT_RADIAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet toPixel=global_id_vec - center;\nlet distance=length(toPixel);\nlet angle=atan2(toPixel.y,toPixel.x);\nlet maxDist=min(dimW,dimH) * 0.5;\nlet normalizedDistance=distance/maxDist;\nlet rotationAngle=uniforms.amount * normalizedDistance * 0.001;\nlet sampleCount=i32(uniforms.sampleCount);\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar totalWeight=0.0;\nfor (var i=0;i < sampleCount;i=i + 1) { let t=f32(i)/f32(sampleCount - 1); let sampleAngle=angle + (t - 0.5) * rotationAngle; let samplePos=center + vec2<f32>( cos(sampleAngle) * distance, sin(sampleAngle) * distance ); var weight=1.0 - abs(t - 0.5) * 1.5; weight=max(weight,0.1); let sampleCoord=vec2<i32>( i32(clamp(samplePos.x,0.0,dimW - 1.0)), i32(clamp(samplePos.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,sampleCoord).xyzw * weight; totalWeight +=weight;\n}\nlet centerFalloff=smoothstep(0.0,maxDist * 0.2,distance);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).xyzw;\nlet blurredColor=sum/totalWeight;\nlet finalColor=mix(originalColor,blurredColor,centerFalloff);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),finalColor);\n","struct Uniforms { amount:f32, centerX:f32, centerY:f32, sampleCount:f32\n};\n")),this.amount=this.#qf,this.sampleCount=this.#Qf}get centerX(){return this.#Vr}set centerX(i){validateNumber(i),this.#Vr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Fr}set centerY(i){validateNumber(i),this.#Fr=i,this.updateUniform("centerY",i)}get amount(){return this.#qf}set amount(i){validateNumberRange(i,0),this.#qf=i,this.updateUniform("amount",i)}get sampleCount(){return this.#Qf}set sampleCount(i){validateNumberRange(i,4),this.#Qf=i,this.updateUniform("sampleCount",i)}}Object.freeze(RadialBlur);class ZoomBlur extends ASinglePassPostEffect{#qf=64;#Vr=0;#Fr=0;constructor(i){super(i),this.init(i,"POST_EFFECT_ZOOM_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet dimensionsVec=vec2<f32>(dimW,dimH);\nlet amount=uniforms.amount/min(dimW,dimH);\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet dir=(center - global_id_vec) * amount;\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=1.0 - (t + offset - 0.5)/loopSize; var weight=3.0 * (percent - percent * percent); let deltaPercent=dir * percent; let delta=vec2<i32>( i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)), i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms { amount:f32, centerX:f32, centerY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#qf}get centerX(){return this.#Vr}set centerX(i){validateNumber(i),this.#Vr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Fr}set centerY(i){validateNumber(i),this.#Fr=i,this.updateUniform("centerY",i)}get amount(){return this.#qf}set amount(i){validateNumberRange(i,0),this.#qf=i,this.updateUniform("amount",i)}}Object.freeze(ZoomBlur);const ba={filmGrainIntensity:.02,filmGrainResponse:.9,filmGrainScale:2.5,coloredGrain:.3,grainSaturation:.4},ya={filmGrainIntensity:.05,filmGrainResponse:.8,filmGrainScale:3,coloredGrain:.5,grainSaturation:.6},Ta={filmGrainIntensity:.12,filmGrainResponse:.6,filmGrainScale:4,coloredGrain:.7,grainSaturation:.8},Sa={filmGrainIntensity:.08,filmGrainResponse:.7,filmGrainScale:5,coloredGrain:.9,grainSaturation:1};class FilmGrain extends ASinglePassPostEffect{static SUBTLE=ba;static MEDIUM=ya;static HEAVY=Ta;static VINTAGE=Sa;#ed=Ta.filmGrainIntensity;#td=Ta.filmGrainResponse;#nd=Ta.filmGrainScale;#rd=Ta.coloredGrain;#id=Ta.grainSaturation;#ch=0;#ad=1;constructor(i){super(i),this.#ad=window?.devicePixelRatio||1,this.init(i,"POST_EFFECT_FILM_GRAIN",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet originalColor=textureLoad(sourceTexture,index);\nlet filmGrainIntensity_value:f32=uniforms.filmGrainIntensity;\nlet filmGrainResponse_value:f32=uniforms.filmGrainResponse;\nlet filmGrainScale_value:f32=uniforms.filmGrainScale;\nlet coloredGrain_value:f32=uniforms.coloredGrain;\nlet grainSaturation_value:f32=uniforms.grainSaturation;\nlet time_value:f32=uniforms.time;\nlet devicePixelRatio_value:f32=uniforms.devicePixelRatio;\nif (filmGrainIntensity_value <=0.0) { textureStore(outputTexture,index,originalColor); return;\n}\nlet baseScale=max(filmGrainScale_value,0.1);\nlet scaledUV=uv * vec2<f32>(dimW,dimH) * devicePixelRatio_value/baseScale;\nlet timeOffset=vec2<f32>( fract(time_value * 0.0317) * 100.0, fract(time_value * 0.0271) * 100.0\n);\nlet grainCoord=scaledUV + timeOffset;\nlet sampleOffset=1.0/baseScale;\nlet noiseR=(filmGrainNoise(grainCoord) + filmGrainNoise(grainCoord + vec2<f32>(sampleOffset,0.0)) + filmGrainNoise(grainCoord + vec2<f32>(0.0,sampleOffset)))/3.0;\nlet noiseG=filmGrainNoise(grainCoord + vec2<f32>(127.1,311.7));\nlet noiseB=filmGrainNoise(grainCoord + vec2<f32>(269.5,183.3));\nlet monoGrain=(noiseR + noiseG + noiseB)/3.0;\nlet colorGrain=vec3<f32>(noiseR,noiseG,noiseB);\nvar grainColor=mix(vec3<f32>(monoGrain),colorGrain,coloredGrain_value);\nlet grainLuminance=dot(grainColor,vec3<f32>(0.299,0.587,0.114));\ngrainColor=mix(vec3<f32>(grainLuminance),grainColor,grainSaturation_value);\nlet luminance=dot(originalColor.rgb,vec3<f32>(0.299,0.587,0.114));\nlet luminanceWeight=pow(max(luminance,0.01),filmGrainResponse_value);\nlet grainIntensity=filmGrainIntensity_value * luminanceWeight;\nlet grain=grainColor * grainIntensity;\nlet finalColor=originalColor.rgb + grain;\nlet outputColor=vec4<f32>(clamp(finalColor,vec3<f32>(0.0),vec3<f32>(1.0)),originalColor.a);\ntextureStore(outputTexture,index,outputColor);\n","struct Uniforms { filmGrainIntensity:f32, filmGrainResponse:f32, filmGrainScale:f32, coloredGrain:f32, grainSaturation:f32, time:f32, devicePixelRatio:f32\n};\nfn filmGrainNoise(coord:vec2<f32>) -> f32 { let p=floor(coord); let f=fract(coord); let u=f * f * f * (f * (f * 6.0 - 15.0) + 10.0); let a=hash(p); let b=hash(p + vec2<f32>(1.0,0.0)); let c=hash(p + vec2<f32>(0.0,1.0)); let d=hash(p + vec2<f32>(1.0,1.0)); let noise=mix(mix(a,b,u.x),mix(c,d,u.x),u.y); return (noise - 0.5) * 2.0;\n}\nfn hash(p:vec2<f32>) -> f32 { var p3=fract(vec3<f32>(p.xyx) * 0.1031); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.x + p3.y) * p3.z);\n}\n")),this.#sd()}get filmGrainIntensity(){return this.#ed}set filmGrainIntensity(i){this.#ed=Math.max(0,Math.min(1,i)),this.updateUniform("filmGrainIntensity",this.#ed)}get filmGrainResponse(){return this.#td}set filmGrainResponse(i){this.#td=Math.max(0,Math.min(2,i)),this.updateUniform("filmGrainResponse",this.#td)}get filmGrainScale(){return this.#nd}set filmGrainScale(i){this.#nd=Math.max(.1,Math.min(20,i)),this.updateUniform("filmGrainScale",this.#nd)}get coloredGrain(){return this.#rd}set coloredGrain(i){this.#rd=Math.max(0,Math.min(1,i)),this.updateUniform("coloredGrain",this.#rd)}get grainSaturation(){return this.#id}set grainSaturation(i){this.#id=Math.max(0,Math.min(2,i)),this.updateUniform("grainSaturation",this.#id)}applyPreset(i){this.#ed=i.filmGrainIntensity,this.#td=i.filmGrainResponse,this.#nd=i.filmGrainScale,this.#rd=i.coloredGrain,this.#id=i.grainSaturation,this.#sd()}update(i){this.#ch+=i,this.updateUniform("time",this.#ch)}#sd(){this.updateUniform("filmGrainIntensity",this.#ed),this.updateUniform("filmGrainResponse",this.#td),this.updateUniform("filmGrainScale",this.#nd),this.updateUniform("coloredGrain",this.#rd),this.updateUniform("grainSaturation",this.#id),this.updateUniform("time",this.#ch),this.updateUniform("devicePixelRatio",this.#ad)}}Object.freeze(FilmGrain);class Fog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#od=Fog.EXPONENTIAL;#ud=.05;#ld=4.5;#cd=50;#hd;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_FOG",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nvar sceneColor:vec4<f32>=textureLoad(sourceTexture,coord);\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth,systemUniforms.camera.nearClipping,systemUniforms.camera.farClipping);\nlet fogFactor=calculateFogFactor(linearDepth,systemUniforms.camera.farClipping);\nlet finalColor=mix(uniforms.fogColor.rgb,sceneColor.rgb,fogFactor);\ntextureStore(outputTexture,coord,vec4<f32>(finalColor,sceneColor.a));\n","struct Uniforms { fogType:u32, density:f32, nearDistance:f32, farDistance:f32, fogColor:vec3<f32>, padding1:f32,\n};\nfn linearizeDepth(depth:f32,cameraNear:f32,cameraFar:f32) -> f32 { let z=depth * 2.0 - 1.0; return (2.0 * cameraNear * cameraFar)/ (cameraFar + cameraNear - z * (cameraFar - cameraNear));\n}\nfn calculateFogFactor(linearDepth:f32,cameraFar:f32) -> f32 { let u_density=uniforms.density; let u_fogType=uniforms.fogType; let u_nearDistance=uniforms.nearDistance; let u_farDistance=uniforms.farDistance; let isBackground=linearDepth >=(cameraFar * 0.99); if (isBackground) { return 1.0 - u_density; } let distance=max(0.0,linearDepth - u_nearDistance); let maxDistance=u_farDistance - u_nearDistance; let normalizedDistance=clamp(distance/max(0.1,maxDistance),0.0,1.0); var fogFactor:f32; if (u_fogType==0u) { fogFactor=exp(-u_density * normalizedDistance * 10.0); } else { let expValue=u_density * normalizedDistance * 5.0; fogFactor=exp(-(expValue * expValue)); } return clamp(fogFactor,0.0,1.0);\n}\n")),this.#hd=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#hd.rgbNormal)}),this.fogType=this.#od,this.density=this.#ud,this.nearDistance=this.#ld,this.farDistance=this.#cd}get fogType(){return this.#od}set fogType(i){validateNumberRange(i,0,1),this.#od=Math.floor(i),this.updateUniform("fogType",this.#od)}get density(){return this.#ud}set density(i){validateNumberRange(i,0,1),this.#ud=Math.max(0,Math.min(1,i)),this.updateUniform("density",this.#ud)}get nearDistance(){return this.#ld}set nearDistance(i){validateNumberRange(i,0),this.#ld=Math.max(.1,i),this.#cd<=this.#ld&&(this.#cd=this.#ld+.1,this.updateUniform("farDistance",this.#cd)),this.updateUniform("nearDistance",this.#ld)}get farDistance(){return this.#cd}set farDistance(i){validateNumberRange(i,0),this.#cd=Math.max(this.#ld+.1,i),this.updateUniform("farDistance",this.#cd)}get fogColor(){return this.#hd}render(i,g,x,_){return super.render(i,g,x,_)}}Object.freeze(Fog);class HeightFog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#od=HeightFog.EXPONENTIAL;#ud=1;#hd;#fd=0;#dd=100;#md=.1;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_HEIGHT_FOG",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet screenCoord=vec2<f32>( global_id_vec.x/dimW,global_id_vec.y/dimH );\nvar depth:f32=1.0;\nif (dimensions.x > u32(global_id.x) && dimensions.y > u32(global_id.y)) { depth=textureLoad(depthTexture,vec2<i32>(global_id.xy),0);\n}\nlet fogFactor=calculateHeightFogFactor(screenCoord,depth);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).rgb;\nlet foggedColor=mix(uniforms.fogColor,originalColor,fogFactor);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(foggedColor,1.0));\n","struct Uniforms { fogType:u32, density:f32, baseHeight:f32, falloff:f32, maxHeight:f32, fogColor:vec3<f32>, padding1:f32, padding2:f32,\n};\nfn isFiniteValue(value:f32) -> bool { return value==value;\n}\nfn isFiniteVec3(v:vec3<f32>) -> bool { return isFiniteValue(v.x) && isFiniteValue(v.y) && isFiniteValue(v.z);\n}\nfn reconstructWorldPositionUltraPrecise(screenCoord:vec2<f32>,depth:f32) -> vec3<f32> { let ndcX=fma(screenCoord.x,2.0,-1.0); let ndcY=fma(-screenCoord.y,2.0,1.0); let safeDepth=clamp(depth,1e-7,1.0 - 1e-7); let ndc=vec3<f32>(ndcX,ndcY,safeDepth); let clipPos=vec4<f32>(ndc,1.0); let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos; let epsilon=1e-6; let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon); let worldPos=worldPos4.xyz/w; let maxCoord=1e6; let stabilizedX=clamp(worldPos.x,-maxCoord,maxCoord); let stabilizedY=clamp(worldPos.y,-maxCoord,maxCoord); let stabilizedZ=clamp(worldPos.z,-maxCoord,maxCoord); let finalPos=vec3<f32>(stabilizedX,stabilizedY,stabilizedZ); return select(vec3<f32>(0.0,0.0,0.0),finalPos,isFiniteVec3(finalPos));\n}\nfn calculateHeightFogFactor(screenCoord:vec2<f32>,depth:f32) -> f32 { let backgroundThreshold=1.0 - 1e-5; let isBackground=depth >=backgroundThreshold; var pixelWorldHeight:f32; if (isBackground) { let rayDirection=getRayDirectionMaxPrecision(screenCoord); pixelWorldHeight=getSkyboxHeightMaxPrecision(rayDirection); } else { let worldPos=reconstructWorldPositionUltraPrecise(screenCoord,depth); pixelWorldHeight=worldPos.y; } return calculateAbsoluteHeightFogMaxPrecision(pixelWorldHeight);\n}\nfn getSkyboxHeightMaxPrecision(rayDirection:vec3<f32>) -> f32 { let u_baseHeight=uniforms.baseHeight; let u_maxHeight=uniforms.maxHeight; let rayY=clamp(rayDirection.y,-0.999,0.999); let upThreshold=0.08; let downThreshold=-0.015; let transitionRange=upThreshold - downThreshold; let safeTransitionRange=max(transitionRange,1e-6); if (rayY > upThreshold) { return u_maxHeight + 25.0; } else if (rayY < downThreshold) { return fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight); } else { let normalizedT=(rayY - downThreshold)/safeTransitionRange; let smoothT=smoothstep(0.0,1.0,normalizedT); let lowValue=fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight); let highValue=u_maxHeight + 25.0; return fma(smoothT,highValue - lowValue,lowValue); }\n}\nfn calculateAbsoluteHeightFogMaxPrecision(worldHeight:f32) -> f32 { let u_baseHeight=uniforms.baseHeight; let u_maxHeight=uniforms.maxHeight; let u_density=uniforms.density; let u_falloff=uniforms.falloff; let u_fogType=uniforms.fogType; if (!isFiniteValue(worldHeight)) { return 1.0; } let heightRange=u_maxHeight - u_baseHeight; let safeHeightRange=max(heightRange,1e-3); let margin=fma(safeHeightRange,0.18,1.2); let extendedBaseHeight=u_baseHeight - margin; let extendedMaxHeight=u_maxHeight + margin; let extendedRange=extendedMaxHeight - extendedBaseHeight; if (worldHeight <=extendedBaseHeight || worldHeight >=extendedMaxHeight) { return 1.0; } let safeExtendedRange=max(extendedRange,1e-3); if (safeExtendedRange <=0.3) { return 1.0; } let normalizedHeight=clamp( (worldHeight - extendedBaseHeight)/safeExtendedRange, 0.0, 1.0 ); let centerOffset=normalizedHeight - 0.5; let edgeFactor=fma(-abs(centerOffset),0.25,1.0); let heightFactor=1.0 - normalizedHeight; let safeHeightFactor=max(heightFactor,1e-4); let safeFalloff=clamp(u_falloff,0.05,1.8); let expPower=fma(safeFalloff,0.73,1.05); var fogDensity:f32; if (u_fogType==0u) { fogDensity=pow(safeHeightFactor,expPower); fogDensity=smoothstep(0.0,1.0,fogDensity); } else { let expResult=pow(safeHeightFactor,expPower); fogDensity=expResult * expResult; fogDensity=smoothstep(0.0,1.0,fogDensity); } let densityWithEdge=fogDensity * edgeFactor; let safeDensity=clamp(u_density,0.0,4.0); let finalFogAmount=fma(densityWithEdge,safeDensity,0.0) * 0.42; let result=clamp(1.0 - finalFogAmount,0.0,1.0); return select(1.0,result,isFiniteValue(result));\n}\nfn getRayDirectionMaxPrecision(screenCoord:vec2<f32>) -> vec3<f32> { let centeredX=fma(screenCoord.x,1.0,-0.5); let centeredY=fma(screenCoord.y,1.0,-0.5); let ndcX=centeredX * 2.0; let ndcY=-(centeredY * 2.0); let ndc=vec3<f32>(ndcX,ndcY,1.0); let clipPos=vec4<f32>(ndc,1.0); let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos; let epsilon=1e-6; let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon); let worldPos=worldPos4.xyz/w; let cameraPos=systemUniforms.camera.cameraPosition; let rayDir=worldPos - cameraPos; let rayLength=length(rayDir); let minLength=1e-6; if (rayLength < minLength) { return vec3<f32>(0.0,0.0,1.0); } let normalizedRay=rayDir/rayLength; let safeRayX=clamp(normalizedRay.x,-0.999,0.999); let safeRayY=clamp(normalizedRay.y,-0.999,0.999); let safeRayZ=clamp(normalizedRay.z,-0.999,0.999); let safeRay=vec3<f32>(safeRayX,safeRayY,safeRayZ); let finalRayLength=length(safeRay); let isValidRay=finalRayLength > 1e-6 && isFiniteValue(finalRayLength); if (isValidRay) { let finalRay=safeRay/finalRayLength; return select(vec3<f32>(0.0,0.0,1.0),finalRay,isFiniteVec3(finalRay)); } return vec3<f32>(0.0,0.0,1.0);\n}\n")),this.#hd=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#hd.rgbNormal)}),this.fogType=this.#od,this.density=this.#ud,this.baseHeight=this.#fd,this.thickness=this.#dd,this.falloff=this.#md}get fogType(){return this.#od}set fogType(i){validateNumberRange(i,0,1),this.#od=Math.floor(i),this.updateUniform("fogType",this.#od)}get density(){return this.#ud}set density(i){validateNumberRange(i,0,5),this.#ud=Math.max(0,Math.min(5,i)),this.updateUniform("density",this.#ud)}get fogColor(){return this.#hd}get baseHeight(){return this.#fd}set baseHeight(i){validateNumberRange(i),this.#fd=i,this.updateUniform("baseHeight",this.#fd),this.updateUniform("maxHeight",this.maxHeight)}get maxHeight(){return this.#fd+this.#dd}get thickness(){return this.#dd}set thickness(i){validateNumberRange(i,.1),this.#dd=Math.max(.1,i),this.updateUniform("maxHeight",this.#fd+this.#dd)}get falloff(){return this.#md}set falloff(i){validateNumberRange(i,0,2),this.#md=Math.max(.001,Math.min(2,i)),this.updateUniform("falloff",this.#md)}render(i,g,x,_){return super.render(i,g,x,_)}}Object.freeze(HeightFog);class ChromaticAberration extends ASinglePassPostEffect{#zf=.015;#Vr=.5;#Fr=.5;#md=1;constructor(i){super(i),this.init(i,"POST_EFFECT_CHROMATIC_ABERRATION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(global_id.x),f32(global_id.y))/vec2<f32>(dimW,dimH);\nlet center=vec2<f32>(uniforms.centerX,uniforms.centerY);\nlet offset=uv - center;\nlet distance=length(offset);\nlet distortion=uniforms.strength * pow(distance,uniforms.falloff);\nlet redOffset=uv + offset * distortion * vec2<f32>(-1.0,-1.0);\nlet greenOffset=uv;\nlet blueOffset=uv + offset * distortion * vec2<f32>(1.0,1.0);\nvar finalColor=vec3<f32>(0.0);\nif (redOffset.x >=0.0 && redOffset.x <=1.0 && redOffset.y >=0.0 && redOffset.y <=1.0) { let redCoord=vec2<i32>( i32(clamp(redOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(redOffset.y * dimH,0.0,dimH - 1.0)) ); finalColor.r=textureLoad(sourceTexture,redCoord).r;\n}\nlet greenCoord=vec2<i32>( i32(clamp(greenOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(greenOffset.y * dimH,0.0,dimH - 1.0))\n);\nfinalColor.g=textureLoad(sourceTexture,greenCoord).g;\nif (blueOffset.x >=0.0 && blueOffset.x <=1.0 && blueOffset.y >=0.0 && blueOffset.y <=1.0) { let blueCoord=vec2<i32>( i32(clamp(blueOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(blueOffset.y * dimH,0.0,dimH - 1.0)) ); finalColor.b=textureLoad(sourceTexture,blueCoord).b;\n}\nlet originalAlpha=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).a;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(finalColor,originalAlpha));\n","struct Uniforms { strength:f32, centerX:f32, centerY:f32, falloff:f32\n};\n")),this.strength=this.#zf,this.centerX=this.#Vr,this.centerY=this.#Fr,this.falloff=this.#md}get strength(){return this.#zf}set strength(i){validateNumberRange(i,0),this.#zf=i,this.updateUniform("strength",i)}get centerX(){return this.#Vr}set centerX(i){validateNumberRange(i,0,1),this.#Vr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Fr}set centerY(i){validateNumberRange(i,0,1),this.#Fr=i,this.updateUniform("centerY",i)}get falloff(){return this.#md}set falloff(i){validateNumberRange(i,0,5),this.#md=i,this.updateUniform("falloff",i)}}Object.freeze(ChromaticAberration);class DOFCoC extends ASinglePassPostEffect{#pd=15;#gd=1.4;#xd=32;#_d=.1;#vd=1e3;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_DOF_COC",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nlet originalColor=textureLoad(sourceTexture,coord).xyzw;\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth);\nlet coc=calculateCoC(linearDepth);\nlet encodedCoC=encodeCoC(coc);\ntextureStore(outputTexture,coord,vec4<f32>(originalColor.rgb,encodedCoC));\n","struct Uniforms { focusDistance:f32, aperture:f32, maxCoC:f32, nearPlane:f32, farPlane:f32,\n};\nfn linearizeDepth(depth:f32) -> f32 { let z=depth * 2.0 - 1.0; return (2.0 * uniforms.nearPlane * uniforms.farPlane)/ (uniforms.farPlane + uniforms.nearPlane - z * (uniforms.farPlane - uniforms.nearPlane));\n}\nfn encodeCoC(coc:f32) -> f32 { return (coc + 1.0) * 0.5;\n}\nfn calculateCoC(linearDepth:f32) -> f32 { let subjectDistance=linearDepth; let focalLength=50.0; let focusRange=uniforms.focusDistance * 0.15; let transitionRange=uniforms.focusDistance * 0.35; let distanceFromFocus=abs(subjectDistance - uniforms.focusDistance); if (distanceFromFocus < focusRange) { let focusFactor=smoothstep(0.0,focusRange,distanceFromFocus); return mix(0.0,0.02,focusFactor); } var rawCoC:f32; var signedCoC:f32; if (subjectDistance < uniforms.focusDistance) { let nearDistance=uniforms.focusDistance - subjectDistance; let nearFactor=nearDistance/uniforms.focusDistance; rawCoC=(uniforms.aperture * focalLength * nearDistance)/ (subjectDistance * (uniforms.focusDistance - focalLength)); rawCoC=rawCoC * (1.0 + nearFactor * 1.5); signedCoC=-(rawCoC/uniforms.maxCoC); let absCoC=abs(signedCoC); if (absCoC > 0.05) { signedCoC=-min(1.0,absCoC * smoothstep(0.05,0.3,absCoC) * 1.5); } if (distanceFromFocus < transitionRange) { let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus); signedCoC=mix(0.0,signedCoC,transitionFactor); } return clamp(signedCoC,-1.0,0.0); } else { let farDistance=subjectDistance - uniforms.focusDistance; rawCoC=(uniforms.aperture * focalLength * farDistance)/ (subjectDistance * (uniforms.focusDistance + focalLength)); rawCoC=rawCoC * (1.0 + farDistance * 0.08); signedCoC=rawCoC/uniforms.maxCoC; let absCoC=abs(signedCoC); if (absCoC > 0.1) { signedCoC=min(1.0,absCoC * smoothstep(0.1,0.5,absCoC) * 1.2); } if (distanceFromFocus < transitionRange) { let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus); signedCoC=mix(0.0,signedCoC,transitionFactor); } return clamp(signedCoC,0.0,1.0); }\n}\n")),this.focusDistance=this.#pd,this.aperture=this.#gd,this.maxCoC=this.#xd,this.nearPlane=this.#_d,this.farPlane=this.#vd}get focusDistance(){return this.#pd}set focusDistance(i){validateNumberRange(i),this.#pd=i,this.updateUniform("focusDistance",i)}get aperture(){return this.#gd}set aperture(i){validateNumberRange(i),this.#gd=i,this.updateUniform("aperture",i)}get maxCoC(){return this.#xd}set maxCoC(i){validateNumberRange(i),this.#xd=i,this.updateUniform("maxCoC",i)}get nearPlane(){return this.#_d}set nearPlane(i){validateNumberRange(i),this.#_d=i,this.updateUniform("nearPlane",i)}get farPlane(){return this.#vd}set farPlane(i){validateNumberRange(i),this.#vd=i,this.updateUniform("farPlane",i)}}Object.freeze(DOFCoC);class DOFUnified extends ASinglePassPostEffect{#bd=16;#yd=24;#Td=1;#Sd=1;constructor(i){super(i);const{WORK_SIZE_X:g,WORK_SIZE_Y:x,WORK_SIZE_Z:_}=this,v=` struct Uniforms { nearBlurSize:f32, farBlurSize:f32, nearStrength:f32, farStrength:f32, };  @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var cocTexture:texture_storage_2d<rgba8unorm,read>; @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; @group(1) @binding(1) var<uniform> uniforms:Uniforms;  /* CoC 디코딩 함수 */ fn decodeCoC(encoded:f32) -> f32 { /* 0~1 범위를 -1~1 범위로 복원 */ return encoded * 2.0 - 1.0; }  @compute @workgroup_size(${g},${x},${_}) fn main (@builtin(global_invocation_id) global_id:vec3<u32>) { let index=vec2<u32>(global_id.xy); let dimensions:vec2<u32>=textureDimensions(sourceTexture);  if (index.x >=dimensions.x || index.y >=dimensions.y) { return; }  let originalSample=textureLoad(sourceTexture,index); let originalColor=originalSample.rgb; let originalAlpha=originalSample.a; let encodedCoC=textureLoad(cocTexture,index).a;  /* CoC 값 디코딩 */ let cocValue=decodeCoC(encodedCoC);  /* CoC 임계값 체크 */ if (abs(cocValue) < 0.005) { textureStore(outputTexture,index,vec4<f32>(originalColor,originalAlpha)); return; }  var finalColor=originalColor; var finalAlpha=originalAlpha;  /* Near blur 처리 (CoC < 0) */ if (cocValue < 0.0) { let blurResult=calculateBlur(index,abs(cocValue),uniforms.nearBlurSize,true); let nearBlur=blurResult.rgb; let nearBlurAlpha=blurResult.a; /* Near strength 블렌딩 개선 - 더 강한 효과 */ let nearBlend=saturate(pow(abs(cocValue) * uniforms.nearStrength,0.7)); finalColor=mix(originalColor,nearBlur,nearBlend); finalAlpha=mix(originalAlpha,nearBlurAlpha,nearBlend); } /* Far blur 처리 (CoC > 0) */ else if (cocValue > 0.0) { let blurResult=calculateBlur(index,cocValue,uniforms.farBlurSize,false); let farBlur=blurResult.rgb; let farBlurAlpha=blurResult.a; let rawBlend=cocValue * uniforms.farStrength; let farBlend=saturate(smoothstep(0.0,0.8,rawBlend)); finalColor=mix(originalColor,farBlur,farBlend); finalAlpha=mix(originalAlpha,farBlurAlpha,farBlend); }  textureStore(outputTexture,index,vec4<f32>(finalColor,finalAlpha)); }  fn calculateBlur(center:vec2<u32>,intensity:f32,maxBlurSize:f32,isNear:bool) -> vec4<f32> { let dimensions:vec2<u32>=textureDimensions(sourceTexture); let blurRadius=intensity * maxBlurSize;  /* 최소 블러 반경 조정 */ if (blurRadius < 0.3) { return textureLoad(sourceTexture,center); }  var sum:vec3<f32>=vec3<f32>(0.0); var sumAlpha:f32=0.0; var totalWeight=0.0;  let maxRadius=min(blurRadius,maxBlurSize); /* Near blur에 더 많은 샘플 적용 */ let samples=select(8,16,isNear);/* near=16,far=8 */ let angleStep=6.28318530718/f32(samples);  let originalSample=textureLoad(sourceTexture,center); let originalColor=originalSample.rgb; let originalAlpha=originalSample.a; /* Near blur에 더 강한 중앙 가중치 */ let centerWeight=select(0.4,0.2,isNear);/* near=0.2,far=0.4 */ sum +=originalColor * centerWeight; sumAlpha +=originalAlpha * centerWeight; totalWeight +=centerWeight;  /* 방사형 샘플링 */ for (var i=0;i < samples;i=i + 1) { for (var r=1.0;r <=maxRadius;r=r + 1.0) { let angle=f32(i) * angleStep; let offset=vec2<f32>(cos(angle) * r,sin(angle) * r);  let samplePos=vec2<i32>( clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1), clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1) );  let sampleData=textureLoad(sourceTexture,vec2<u32>(samplePos)); let sampleColor=sampleData.rgb; let sampleAlpha=sampleData.a; let sampleEncodedCoC=textureLoad(cocTexture,vec2<u32>(samplePos)).a; let sampleCoC=decodeCoC(sampleEncodedCoC);/* 디코딩 추가 */  /* 가우시안 가중치 */ var weight=exp(-r * r/(maxRadius * maxRadius * 0.5));  /* CoC 기반 가중치 조정 */ if (isNear) { /* Near blur:더 강한 조건으로 가중치 증가 */ if (sampleCoC < 0.0 && abs(sampleCoC) >=intensity * 0.5) { weight *=1.5; } } else { /* Far blur:기존 조건 유지 */ if (sampleCoC > 0.0 && sampleCoC >=intensity * 0.7) { weight *=1.2; } }  sum +=sampleColor * weight; sumAlpha +=sampleAlpha * weight; totalWeight +=weight; } }  /* 추가 근거리 샘플링 (near blur만) */ if (isNear && maxRadius > 2.0) { let additionalSamples=8; let innerRadius=maxRadius * 0.3; let innerAngleStep=6.28318530718/f32(additionalSamples);  for (var i=0;i < additionalSamples;i=i + 1) { let angle=f32(i) * innerAngleStep + 0.5;/* 약간의 오프셋 */ let offset=vec2<f32>(cos(angle) * innerRadius,sin(angle) * innerRadius);  let samplePos=vec2<i32>( clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1), clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1) );  let sampleData=textureLoad(sourceTexture,vec2<u32>(samplePos)); let sampleColor=sampleData.rgb; let sampleAlpha=sampleData.a; let weight=0.8;  sum +=sampleColor * weight; sumAlpha +=sampleAlpha * weight; totalWeight +=weight; } }  if (totalWeight > 0.0) { return vec4<f32>(sum/totalWeight,sumAlpha/totalWeight); } else { return vec4<f32>(originalColor,originalAlpha); } } `;this.init(i,"POST_EFFECT_DOF_UNIFIED",{msaa:v,nonMsaa:v}),this.nearBlurSize=this.#bd,this.farBlurSize=this.#yd,this.nearStrength=this.#Td,this.farStrength=this.#Sd}get nearBlurSize(){return this.#bd}set nearBlurSize(i){validateNumberRange(i),this.#bd=i,this.updateUniform("nearBlurSize",i)}get farBlurSize(){return this.#yd}set farBlurSize(i){validateNumberRange(i),this.#yd=i,this.updateUniform("farBlurSize",i)}get nearStrength(){return this.#Td}set nearStrength(i){validateNumberRange(i),this.#Td=i,this.updateUniform("nearStrength",i)}get farStrength(){return this.#Sd}set farStrength(i){validateNumberRange(i),this.#Sd=i,this.updateUniform("farStrength",i)}render(i,g,x,_,v){return super.render(i,g,x,_,v)}}Object.freeze(DOFUnified);class DOF extends AMultiPassPostEffect{#Md;#wd;#pd=15;#gd=2.8;#xd=25;#_d=.1;#vd=1e3;#bd=15;#yd=15;#Td=1;#Sd=1;constructor(i){super(i,[new DOFCoC(i),new DOFUnified(i)]),this.#Md=this.passList[0],this.#wd=this.passList[1],this.#Md.focusDistance=this.#pd,this.#Md.aperture=this.#gd,this.#Md.maxCoC=this.#xd,this.#Md.nearPlane=this.#_d,this.#Md.farPlane=this.#vd,this.#wd.nearBlurSize=this.#bd,this.#wd.farBlurSize=this.#yd,this.#wd.nearStrength=this.#Td,this.#wd.farStrength=this.#Sd}get focusDistance(){return this.#pd}set focusDistance(i){this.#pd=i,this.#Md.focusDistance=i}get aperture(){return this.#gd}set aperture(i){this.#gd=i,this.#Md.aperture=i}get maxCoC(){return this.#xd}set maxCoC(i){this.#xd=i,this.#Md.maxCoC=i}get nearPlane(){return this.#_d}set nearPlane(i){this.#_d=i,this.#Md.nearPlane=i}get farPlane(){return this.#vd}set farPlane(i){this.#vd=i,this.#Md.farPlane=i}get nearBlurSize(){return this.#bd}set nearBlurSize(i){this.#bd=i,this.#wd.nearBlurSize=i}get farBlurSize(){return this.#yd}set farBlurSize(i){this.#yd=i,this.#wd.farBlurSize=i}get nearStrength(){return this.#Td}set nearStrength(i){this.#Td=i,this.#wd.nearStrength=i}get farStrength(){return this.#Sd}set farStrength(i){this.#Sd=i,this.#wd.farStrength=i}setGameDefault(){this.focusDistance=15,this.aperture=2.8,this.maxCoC=25,this.nearBlurSize=15,this.farBlurSize=15,this.nearStrength=1,this.farStrength=1}setCinematic(){this.focusDistance=20,this.aperture=1.4,this.maxCoC=40,this.nearBlurSize=25,this.farBlurSize=30,this.nearStrength=1.2,this.farStrength=1.3}setPortrait(){this.focusDistance=8,this.aperture=1.8,this.maxCoC=35,this.nearBlurSize=12,this.farBlurSize=25,this.nearStrength=.8,this.farStrength=1.4}setLandscape(){this.focusDistance=50,this.aperture=8,this.maxCoC=20,this.nearBlurSize=20,this.farBlurSize=10,this.nearStrength=1.1,this.farStrength=.6}setMacro(){this.focusDistance=2,this.aperture=1,this.maxCoC=50,this.nearBlurSize=30,this.farBlurSize=35,this.nearStrength=1.5,this.farStrength=1.6}setSports(){this.focusDistance=25,this.aperture=4,this.maxCoC=18,this.nearBlurSize=10,this.farBlurSize=12,this.nearStrength=.8,this.farStrength=.9}setNightMode(){this.focusDistance=12,this.aperture=2,this.maxCoC=30,this.nearBlurSize=18,this.farBlurSize=20,this.nearStrength=1.1,this.farStrength=1.2}render(i,g,x,_){const v=this.#Md.render(i,g,x,_);return this.#wd.render(i,g,x,_,v)}}Object.freeze(DOF);class LensDistortion extends ASinglePassPostEffect{#Rd=.1;#Cd=0;#Vr=0;#Fr=0;constructor(i){super(i),this.init(i,"POST_EFFECT_LENS_DISTORTION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet uv=global_id_vec/vec2<f32>(dimW,dimH);\nlet uvCenter=center/vec2<f32>(dimW,dimH);\nlet offset=uv - uvCenter;\nlet distance=length(offset);\nlet barrelFactor=1.0 + uniforms.barrelStrength * distance * distance;\nlet pincushionFactor=1.0 - uniforms.pincushionStrength * distance * distance;\nlet distortionFactor=barrelFactor * pincushionFactor;\nlet distortedUV=uvCenter + offset * distortionFactor;\nif (distortedUV.x < 0.0 || distortedUV.x > 1.0 || distortedUV.y < 0.0 || distortedUV.y > 1.0) { textureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(0.0,0.0,0.0,1.0));\n} else { let sampleCoord=vec2<i32>( i32(clamp(distortedUV.x * dimW,0.0,dimW - 1.0)), i32(clamp(distortedUV.y * dimH,0.0,dimH - 1.0)) ); let sampledColor=textureLoad(sourceTexture,sampleCoord).xyzw; textureStore(outputTexture,vec2<i32>(global_id.xy),sampledColor);\n}\n","struct Uniforms { barrelStrength:f32, pincushionStrength:f32, centerX:f32, centerY:f32\n};\n")),this.barrelStrength=this.#Rd,this.pincushionStrength=this.#Cd,this.centerX=this.#Vr,this.centerY=this.#Fr}get barrelStrength(){return this.#Rd}set barrelStrength(i){validateNumberRange(i,0),this.#Rd=i,this.updateUniform("barrelStrength",i)}get pincushionStrength(){return this.#Cd}set pincushionStrength(i){validateNumberRange(i,0),this.#Cd=i,this.updateUniform("pincushionStrength",i)}get centerX(){return this.#Vr}set centerX(i){validateNumber(i),this.#Vr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Fr}set centerY(i){validateNumber(i),this.#Fr=i,this.updateUniform("centerY",i)}}Object.freeze(LensDistortion);class Vignetting extends ASinglePassPostEffect{#Pd=.2;#ee=.5;constructor(i){super(i),this.init(i,"POST_EFFECT_VIGNETTING",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet index=vec2<u32>(global_id.xy);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet smoothness=uniforms.smoothness;\nlet size=uniforms.size;\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nvar diff=size - distance(uv,vec2<f32>(0.5));\nlet vignette=smoothstep(-smoothness,smoothness,diff);\ncolor.r *=vignette;\ncolor.g *=vignette;\ncolor.b *=vignette;\ntextureStore(outputTexture,index,color);\n","struct Uniforms { smoothness:f32, size:f32,\n};\n")),this.smoothness=this.#Pd,this.size=this.#ee}get size(){return this.#ee}set size(i){validateNumberRange(i,0),this.#ee=i,this.updateUniform("size",i)}get smoothness(){return this.#Pd}set smoothness(i){validateNumberRange(i,0,1),this.#Pd=i,this.updateUniform("smoothness",i)}}Object.freeze(Vignetting);class OldBloomBlend extends ASinglePassPostEffect{#Bd=1;#ul=1;constructor(i){super(i);const{WORK_SIZE_X:g,WORK_SIZE_Y:x,WORK_SIZE_Z:_}=this,v=` struct Uniforms { bloomStrength:f32, exposure:f32 }; @group(0) @binding(0) var sourceTexture0:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var sourceTexture1:texture_storage_2d<rgba8unorm,read>; @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; @group(1) @binding(1) var<uniform> uniforms:Uniforms; @compute @workgroup_size(${g},${x},${_}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy ); let dimensions:vec2<u32>=textureDimensions(sourceTexture0); let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH); var diffuse:vec4<f32>=textureLoad( sourceTexture0, index, ); var blur:vec4<f32>=textureLoad( sourceTexture1, index, );  let finalColor=vec4<f32>((diffuse.rgb + blur.rgb * uniforms.bloomStrength ) * uniforms.exposure,diffuse.a); textureStore(outputTexture,index,finalColor ); }; `;this.init(i,"POST_EFFECT_OLD_BLOOM",{msaa:v,nonMsaa:v}),this.exposure=this.#ul,this.bloomStrength=this.#Bd}get bloomStrength(){return this.#Bd}set bloomStrength(i){this.#Bd=i,this.updateUniform("bloomStrength",i)}get exposure(){return this.#ul}set exposure(i){this.#ul=i,this.updateUniform("exposure",i)}render(i,g,x,_,v){return super.render(i,g,x,_,v)}}Object.freeze(OldBloomBlend);class OldBloom extends AMultiPassPostEffect{#Ed;#Id;#Ld;#Xf=156;#Ud=32;#ul=1;#Bd=1.2;constructor(i){super(i,[new Threshold(i),new GaussianBlur(i),new OldBloomBlend(i)]),this.#Ed=this.passList[0],this.#Id=this.passList[1],this.#Ld=this.passList[2],this.#Ed.threshold=this.#Xf,this.#Id.size=this.#Ud,this.#Ld.exposure=this.#ul,this.#Ld.bloomStrength=this.#Bd}get threshold(){return this.#Xf}set threshold(i){this.#Xf=i,this.#Ed.threshold=i}get gaussianBlurSize(){return this.#Ud}set gaussianBlurSize(i){this.#Ud=i,this.#Id.size=i}get exposure(){return this.#ul}set exposure(i){this.#ul=i,this.#Ld.exposure=i}get bloomStrength(){return this.#Bd}set bloomStrength(i){this.#Bd=i,this.#Ld.bloomStrength=i}render(i,g,x,_){const v=this.#Ed.render(i,g,x,_),b=this.#Id.render(i,g,x,v);return this.#Ld.render(i,g,x,_,b)}}Object.freeze(OldBloom);class Sharpen extends AMultiPassPostEffect{#Yf;constructor(i){super(i,[new Convolution(i)]),this.#Yf=this.passList[0],this.#Yf.kernel=Convolution.SHARPEN}render(i,g,x,_){return this.#Yf.render(i,g,x,_)}}Object.freeze(Sharpen);class SSR extends ASinglePassPostEffect{#Dd=64;#Ad=15;#kd=.02;#Od=1;#Gd=12;#Nd=.15;constructor(i){super(i),this.WORK_SIZE_X=8,this.WORK_SIZE_Y=8,this.WORK_SIZE_Z=1,this.useDepthTexture=!0;const g=this.#Vd();this.init(i,"POST_EFFECT_SSR",{msaa:g.msaa,nonMsaa:g.nonMsaa}),this.maxSteps=this.#Dd,this.maxDistance=this.#Ad,this.stepSize=this.#kd,this.reflectionIntensity=this.#Od,this.fadeDistance=this.#Gd,this.edgeFade=this.#Nd}#Vd(){const createCode=i=>` struct Uniforms { maxSteps:u32, maxDistance:f32, stepSize:f32, reflectionIntensity:f32, fadeDistance:f32, edgeFade:f32, _padding:f32, _padding2:f32, } fn getTextureDimensions() -> vec2<u32> { return textureDimensions(depthTexture); } fn reconstructWorldPosition(screenCoord:vec2<i32>,depth:f32) -> vec3<f32> { let texDims=getTextureDimensions(); let invTexDims=1.0/vec2<f32>(texDims); let uv=(vec2<f32>(screenCoord) + 0.5) * invTexDims; let ndc=vec3<f32>( uv.x * 2.0 - 1.0, -(uv.y * 2.0 - 1.0), depth * 2.0 - 1.0 ); let clipPos=vec4<f32>(ndc,1.0); let viewPos4=systemUniforms.inverseProjectionMatrix * clipPos; if (abs(viewPos4.w) < 1e-6) { return vec3<f32>(0.0); } let viewPos=viewPos4.xyz/viewPos4.w; let worldPos4=systemUniforms.camera.inverseCameraMatrix * vec4<f32>(viewPos,1.0); return worldPos4.xyz; } fn reconstructWorldNormal(gBufferNormalData:vec4<f32>) -> vec3<f32> { return normalize(gBufferNormalData.rgb * 2.0 - 1.0); } fn worldToScreen(worldPos:vec3<f32>) -> vec2<f32> { let clipPos4=systemUniforms.projectionCameraMatrix * vec4<f32>(worldPos,1.0); if (abs(clipPos4.w) < 1e-6) { return vec2<f32>(-1.0); } let ndc=clipPos4.xyz/clipPos4.w; return vec2<f32>(ndc.x * 0.5 + 0.5,-ndc.y * 0.5 + 0.5); } fn calculateEdgeFade(screenUV:vec2<f32>) -> f32 { let edge=min(screenUV,1.0 - screenUV); let edgeDist=min(edge.x,edge.y); return smoothstep(0.0,uniforms.edgeFade,edgeDist); } fn calculateWorldReflectionRay(worldPos:vec3<f32>,worldNormal:vec3<f32>,cameraWorldPos:vec3<f32>) -> vec3<f32> { let viewDir=normalize(cameraWorldPos - worldPos); return reflect(-viewDir,worldNormal); }\nfn performWorldRayMarching(startWorldPos:vec3<f32>,rayDir:vec3<f32>) -> vec4<f32> { let cameraWorldPos=systemUniforms.camera.inverseCameraMatrix[3].xyz; let cameraDistance=length(startWorldPos - cameraWorldPos); let distanceScale=1.0 + cameraDistance * 0.1; let adaptiveStepSize=uniforms.stepSize * min(distanceScale,4.0); let stepScale=1.0 + cameraDistance * 0.067; let adaptiveMaxSteps=u32(f32(uniforms.maxSteps) * min(stepScale,2.0)); let maxDistanceSq=uniforms.maxDistance * uniforms.maxDistance; let texDims=getTextureDimensions(); let texSizeF=vec2<f32>(texDims); let maxRefinementLevels=4u; let invMaxSteps=1.0/f32(adaptiveMaxSteps); var currentWorldPos=startWorldPos + rayDir * 0.01; var currentStepSize=adaptiveStepSize; var refinementLevel=0u; for (var i=0u;i < adaptiveMaxSteps;i++) { currentWorldPos +=rayDir * currentStepSize; let travelVec=currentWorldPos - startWorldPos; let travelDistanceSq=dot(travelVec,travelVec); if (travelDistanceSq > maxDistanceSq) { break; } let currentScreenUV=worldToScreen(currentWorldPos); if (any(currentScreenUV < vec2<f32>(0.0)) || any(currentScreenUV > vec2<f32>(1.0))) { break; } let screenCoord=vec2<i32>(currentScreenUV * texSizeF); let sampledDepth=textureLoad(depthTexture,screenCoord,0); if (sampledDepth >=0.999) { continue; } let sampledWorldPos=reconstructWorldPosition(screenCoord,sampledDepth); let rayDistanceFromCamera=length(currentWorldPos - cameraWorldPos); let surfaceDistanceFromCamera=length(sampledWorldPos - cameraWorldPos); let distanceDiff=rayDistanceFromCamera - surfaceDistanceFromCamera; let intersectionThreshold=currentStepSize * (4.0 + cameraDistance * 0.033); if (distanceDiff > 0.0 && distanceDiff < intersectionThreshold) { if (refinementLevel < maxRefinementLevels) { currentWorldPos -=rayDir * currentStepSize; currentStepSize *=0.6; refinementLevel++; continue; } let reflectionColor=textureLoad(sourceTexture,screenCoord); let travelDistance=sqrt(travelDistanceSq); let distanceFade=1.0 - smoothstep(0.0,uniforms.fadeDistance,travelDistance); let edgeFade=calculateEdgeFade(currentScreenUV); let stepFade=1.0 - f32(i) * invMaxSteps; let distanceCompensation=min(1.5,1.0 + cameraDistance * 0.04); let totalFade=distanceFade * edgeFade * stepFade * distanceCompensation; return vec4<f32>(reflectionColor.rgb,totalFade); } } return vec4<f32>(0.0);\n}\n  @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var depthTexture:${i?"texture_depth_multisampled_2d":"texture_depth_2d"}; @group(0) @binding(2) var gBufferNormalTexture:texture_2d<f32>;  @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; ${Pr} @group(1) @binding(2) var<uniform> uniforms:Uniforms;  @compute @workgroup_size(${this.WORK_SIZE_X},${this.WORK_SIZE_Y},${this.WORK_SIZE_Z}) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let screenCoord=vec2<i32>(global_id.xy);\nlet texDims=textureDimensions(sourceTexture);\nlet texSize=vec2<i32>(texDims);\nif (screenCoord.x >=texSize.x || screenCoord.y >=texSize.y) { return;\n}\nlet originalColor=textureLoad(sourceTexture,screenCoord);\nlet depth=textureLoad(depthTexture,screenCoord,0);\nif (depth >=0.999) { textureStore(outputTexture,screenCoord,originalColor); return;\n}\nlet gBufferNormalData=textureLoad(gBufferNormalTexture,screenCoord,0);\nlet precomputedReflectionStrength=gBufferNormalData.a;\nif (precomputedReflectionStrength < 0.05) { textureStore(outputTexture,screenCoord,originalColor); return;\n}\nlet worldPos=reconstructWorldPosition(screenCoord,depth);\nlet worldNormal=reconstructWorldNormal(gBufferNormalData);\nif (length(worldNormal) < 0.01) { textureStore(outputTexture,screenCoord,originalColor); return;\n}\nlet normal=normalize(worldNormal);\nlet cameraWorldPos=systemUniforms.camera.inverseCameraMatrix[3].xyz;\nlet reflectionDir=calculateWorldReflectionRay(worldPos,normal,cameraWorldPos);\nlet reflection=performWorldRayMarching(worldPos,reflectionDir);\nif (reflection.a > 0.001) { let finalReflectionStrength=reflection.a * uniforms.reflectionIntensity * precomputedReflectionStrength; let reflectionColor=reflection.rgb * finalReflectionStrength; let diffuseColor=originalColor.rgb * (1.0 - finalReflectionStrength); let finalColor=diffuseColor + reflectionColor; textureStore(outputTexture,screenCoord,vec4<f32>(finalColor,originalColor.a));\n} else { textureStore(outputTexture,screenCoord,originalColor);\n}\n } `;return{msaa:createCode(!0),nonMsaa:createCode(!1)}}get maxSteps(){return this.#Dd}set maxSteps(i){validateNumberRange(i,1,512),this.#Dd=i,this.updateUniform("maxSteps",i)}get maxDistance(){return this.#Ad}set maxDistance(i){validatePositiveNumberRange(i,1,200),this.#Ad=i,this.updateUniform("maxDistance",i)}get stepSize(){return this.#kd}set stepSize(i){validatePositiveNumberRange(i,.001,5),this.#kd=i,this.updateUniform("stepSize",i)}get reflectionIntensity(){return this.#Od}set reflectionIntensity(i){validateNumberRange(i,0,5),this.#Od=i,this.updateUniform("reflectionIntensity",i)}get fadeDistance(){return this.#Gd}set fadeDistance(i){validatePositiveNumberRange(i,1,100),this.#Gd=i,this.updateUniform("fadeDistance",i)}get edgeFade(){return this.#Nd}set edgeFade(i){validateNumberRange(i,0,.5),this.#Nd=i,this.updateUniform("edgeFade",i)}}Object.freeze(SSR);var Ma=Object.freeze({__proto__:null,AMultiPassPostEffect:AMultiPassPostEffect,ASinglePassPostEffect:ASinglePassPostEffect,Blur:Blur,BlurX:BlurX,BlurY:BlurY,BrightnessContrast:BrightnessContrast,ChromaticAberration:ChromaticAberration,ColorBalance:ColorBalance,ColorTemperatureTint:ColorTemperatureTint,Convolution:Convolution,DOF:DOF,DirectionalBlur:DirectionalBlur,FilmGrain:FilmGrain,Fog:Fog,GaussianBlur:GaussianBlur,Grayscale:Grayscale,HeightFog:HeightFog,HueSaturation:HueSaturation,Invert:Invert,LensDistortion:LensDistortion,OldBloom:OldBloom,PostEffectManager:PostEffectManager,RadialBlur:RadialBlur,SSR:SSR,Sharpen:Sharpen,Threshold:Threshold,Vibrance:Vibrance,Vignetting:Vignetting,ZoomBlur:ZoomBlur}),wa=Object.freeze({__proto__:null,PICKING_EVENT_TYPE:Sr,PickingEvent:PickingEvent,PickingManager:PickingManager});const init=async(i,g,x,_,v="premultiplied",b={powerPreference:"high-performance",forceFallbackAdapter:!1})=>{if(isSearchEngineBot())return void Gn("🤖 Search engine bot detected - skipping WebGPU initialization");const{gpu:y}=navigator;if(!y){const i="WebGPU is not supported in this browser. Please use a modern browser with WebGPU enabled.";return void x?.(i)}const errorHandler=(i,g)=>{const _=generateErrorMessage(i,g);console.error("\n============\n",_,"\n============\n"),x?.(_)},validateAndRequestDevice=async g=>{const x=[];g?.features.has("texture-compression-astc")&&x.push("texture-compression-astc");const _={requiredFeatures:x};try{const x=await g.requestDevice(_);validateAndInitializeContext(i,g,x)}catch(i){errorHandler(null,`Failed to request device. Adapter was ${g},error message is ${i.message}`)}},validateAndInitializeContext=(i,b,y)=>{const S=i.getContext("webgpu");if(S)try{const x=new RedGPUContext(i,b,y,S,v);g(x),y.addEventListener("uncapturederror",i=>{console.warn("TODO A WebGPU error was not captured:",i),console.warn(i.error?.message),window.cancelAnimationFrame(x.currentRequestAnimationFrame)}),y.lost.then(i=>{console.warn(i),console.warn(`Device lost occurred:${i.message}`),"destroyed"===i.reason&&_?.(i)});const clearDevice=()=>{if(x.gpuContext)try{x.gpuContext.unconfigure(),Gn("🧹 Canvas Context unconfigure 완료")}catch(i){Gn("⚠️ Canvas Context unconfigure 실패:",i)}window?.cancelAnimationFrame(x.currentRequestAnimationFrame),x.gpuDevice.destroy()};window?.addEventListener("beforeunload",()=>{x&&x.gpuDevice&&(Gn("🧹 페이지 종료 시 GPU 디바이스 정리"),clearDevice())}),window?.addEventListener("pageshow",i=>{i.persisted&&(Gn("🔄 bfcache에서 복원됨 (뒤로가기 또는 앞으로가기) - 페이지 재로드"),window.location.reload())}),window?.addEventListener("pagehide",i=>{i.persisted&&(Gn("💾 bfcache에 저장됨"),x&&x.gpuDevice&&clearDevice())})}catch(i){x(errorHandler(i,""))}else errorHandler(new Error(`Failed to get context from canvas:${i.id||i}`),"Failed to get webgpu initialize from canvas")},initializeWebGPU=async()=>{g instanceof Function?i instanceof HTMLCanvasElement?await(async i=>{i||errorHandler(null,"Cannot find navigator.gpu");try{const g=await i.requestAdapter(b);await validateAndRequestDevice(g)}catch(g){errorHandler(g,`Failed to request adapter or validate device with target GPU:${i},error message is ${g.message}`)}})(y):errorHandler(null,`Expected HTMLCanvasElement,but received:${i}`):errorHandler(null,`Expected onWebGPUInitialized,but received:${g}`)};try{await initializeWebGPU()}catch(i){errorHandler(i,`Unexpected error occurred during WebGPU initialization:${i.message}`)}},generateErrorMessage=(i,g)=>{let x=g;return i instanceof Error?(x=i.message??g,"string"==typeof i.stack&&(x+=`\nStack Trace:${i.stack}`)):console.warn("generateErrorMessage function expected an Error instance,but got:",i),x},isSearchEngineBot=()=>{if("undefined"==typeof navigator||"undefined"==typeof window)return!0;const i=navigator.userAgent.toLowerCase();return["googlebot","bingbot","slurp","duckduckbot","baiduspider","yandexbot","facebookexternalhit","twitterbot","rogerbot","linkedinbot","embedly","quora link preview","showyoubot","outbrain","pinterest/0.","developers.google.com/+/web/snippet","www.google.com/webmasters/tools/richsnippets","slackbot","vkshare","w3c_validator","redditbot","applebot","whatsapp","flipboard","tumblr","bitlybot","skypeuripreview","nuzzel","line","discordbot","telegrambot","crawler","spider","bot"].some(g=>i.includes(g))};class TextureLoaderData{src;texture;loadEnd;loadSuccess;srcInfo;idx;constructor(i,g,x){this.src=i,this.texture=null,this.loadEnd=!1,this.loadSuccess=!1,this.srcInfo=g,this.idx=x}}class TextureLoader{textures=[];#Fd=0;#b;#Hd;#zd;#$d;constructor(i,g=[],x,_){this.#b=i,this.#Hd=g,this.#zd=x,this.#$d=_,this.#Hd.length?this.#Hd.forEach((i,g)=>this.#Kd(i,g)):this.#Xd()}getTextureByIndex(i){if(this.textures[i])return this.textures[i].texture}#Kd(i,g){let x,_,v=BitmapTexture;_=i.hasOwnProperty("src")?i.src:i,_ instanceof Array&&(v=CubeTexture),x=new TextureLoaderData(_,i,g);const onLoadHandler=()=>{x.loadSuccess=!0,x.loadEnd=!0,this.#Wd()},onErrorHandler=()=>{x.loadSuccess=!1,x.loadEnd=!0,this.#Wd()};x.texture=v===BitmapTexture?new v(this.#b,{src:i.src,cacheKey:i.cacheKey},i.useMipmap,onLoadHandler,onErrorHandler,i.format,!1):new v(this.#b,{src:i.src,cacheKey:i.cacheKey},i.useMipmap,onLoadHandler,onErrorHandler,i.format),this.textures.push(x)}#Wd(){this.#Fd++,this.#$d&&this.#$d.call(this,{totalNum:this.#Hd.length,loaded:this.#Fd}),this.#Fd===this.#Hd.length&&this.#Xd()}#Xd(){requestAnimationFrame(()=>{this.#zd&&this.#zd.call(this,this)})}}const Ra=new Map,Ca=new Map,arrayBufferLoader=(i,g,x)=>{if(i=getAbsoluteURL(window.location.href,i),Ra.has(i))return void g?.(Ra.get(i));if(Ca.has(i))return void Ca.get(i).then(i=>g?.(i)).catch(i=>x?.(i));const _=fetch(i).then(i=>{if(!i.ok)throw new Error(`Network response was not ok:${i.statusText}`);return i.arrayBuffer()}).then(g=>(Ra.set(i,g),g)).finally(()=>{Ca.delete(i)});Ca.set(i,_),_.then(i=>g?.(i)).catch(i=>x?.(i))},Pa={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};Object.freeze(Pa);class AccessorInfo_GLTF{accessor;bufferView;bufferGlTfId;buffer;bufferURIDataView;componentType;componentType_BYTES_PER_ELEMENT;getMethod;accessorBufferOffset;bufferViewOffset;bufferViewByteStride;startIndex;constructor(i,g,x){switch(this.accessor=g.accessors[x],this.bufferView=g.bufferViews[this.accessor.bufferView],this.bufferGlTfId=this.bufferView.buffer,this.buffer=g.buffers[this.bufferGlTfId],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=i.parsingResult.uris.buffers[this.bufferGlTfId]),this.componentType=Pa[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:consoleAndThrowError("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}class AnimationData_GLTF{gltfLoader;scenesData;accessorGlTfId;dataList;constructor(i,g,x){this.gltfLoader=i,this.scenesData=g,this.accessorGlTfId=x;const _=new AccessorInfo_GLTF(this.gltfLoader,this.scenesData,this.accessorGlTfId),{accessor:v,startIndex:b,componentType_BYTES_PER_ELEMENT:y,bufferURIDataView:S,getMethod:w}=_,{type:L,count:k}=v;let H=b,z=1;switch(L){case"SCALAR":z=1;break;case"VEC4":z=4;break;case"VEC3":z=3}this.dataList=[];let W=0;for(;W<k*z;H++,W++)this.dataList[W]=S[w](H*y,!0)}}class AniTrack_GLTF{key;timeAnimationInfo;aniDataAnimationInfo;interpolation;animationTargetMesh;weightMeshes;constructor(i,g,x,_,v,b){this.key=i,this.timeAnimationInfo=g,this.aniDataAnimationInfo=x,this.interpolation=_,this.animationTargetMesh=v,this.weightMeshes=b}}const parseAnimations=(i,g)=>new Promise(async x=>{g.animations||(g.animations=[]);const{parsingResult:_}=i,{animations:v}=_,{animations:b}=g;if(b.length){const x=b.map(async x=>{const{samplers:_,channels:b}=x,y=[];y.minTime=1e7,y.maxTime=-1,y.name=x.name,v.push(y),await Promise.all(b.map(async x=>((i,g,x,_,v)=>{let b,y;const{nodes:S,meshes:w}=v,L=[],{sampler:k,target:H}=x,z=_[k],{node:W,path:q}=H,be=S[W];if("mesh"in be){b=be.Mesh;const{primitives:i}=w[be.mesh];let g=i.length;for(;g--;)L.push(i[g].Mesh)}else{let g;if(!i.parsingResult.groups[W])return;g=i.parsingResult.groups[W],b=g}if("scale"!=q&&"rotation"!=q&&"translation"!=q&&"weights"!=q||(y=new AniTrack_GLTF(q,new AnimationData_GLTF(i,v,z.input),new AnimationData_GLTF(i,v,z.output),z.interpolation,b,L),g.push(y)),y){const{timeAnimationInfo:i}=y,{dataList:x}=i;g.minTime>x[0]&&(g.minTime=x[0]),g.maxTime<x[x.length-1]&&(g.maxTime=x[x.length-1])}})(i,y,x,_,g)))});await Promise.all(x),v.length&&v.forEach(g=>i.playAnimation(g))}x()});let Ba=new Float32Array(16),Ea=new Float32Array(16);class ParsedSkinInfo_GLTF{joints;inverseBindMatrices;skeletonMesh;vertexStorageInfo;vertexStorageBuffer;#jd;#Yd;#qd=null;constructor(){this.joints=[],this.inverseBindMatrices=null,this.skeletonMesh=null}#Zd(i){const g=new Set,x=i.geometry.vertexBuffer,_=x.interleavedStruct,v=_.attributes.filter(i=>"aVertexJoint"===i.attributeName)[0];if(!v)return g;const b=x.data,y=_.arrayStride/4,S=v.offset/4,w=b.length/y;for(let i=0;i<w;i++){const x=i*y+S;for(let i=0;i<4;i++){const _=Math.floor(b[x+i]);_>=0&&_<this.joints.length&&g.add(_)}}return g}update(i,g){const x=null===this.#qd?this.#Zd(g):this.#qd;this.#qd=x;const _=this.#Jd(g.modelMatrix),v=this.#Qd(Array.from(x),_);this.#em(i,g.animationInfo.skinInfo,v)}#Qd(i,g){const x=16*this.joints.length;this.#Yd&&this.#Yd.length==x||(this.#Yd=new Float32Array(x));for(const x of i){const i=multiply(Ba,g,this.joints[x].modelMatrix),_=multiply(Ea,i,this.inverseBindMatrices[x]);this.#Yd.set(_,16*x)}return this.#Yd}#Jd(i){return this.#jd=this.#jd||new Float32Array(i.length),this.#jd.set(i),invert(this.#jd,this.#jd),this.#jd}#em(i,g,x){const{vertexStorageBuffer:_,vertexStorageInfo:v}=g,{gpuBuffer:b}=_,{jointMatrix:y}=v.members;i.gpuDevice.queue.writeBuffer(b,y.uniformOffset,x)}}const parseJoint_GLTF=(i,g,x,_)=>{const v=x[_].Mesh;v?(g.joints.push(v),v.depthCompare=Zn.NEVER):requestAnimationFrame(function(){parseJoint_GLTF(i,g,x,_)})},parseAttributeInfo_GLTF=function(i,g,x,_,v,b,y,S,w,L,k){const{accessor:H,startIndex:z,getMethod:W,bufferViewByteStride:q,bufferURIDataView:be,componentType_BYTES_PER_ELEMENT:Ke}=g,{type:Xe,count:je}=H;let Ye=0;const Ze=q/Ke;let Je,Qe=z;switch(Xe){case"VEC4":if(q)for(Je=Qe+je*(q/Ke);Qe<Je;Qe++)Ye%Ze<4&&("WEIGHTS_0"==i?S.push(be[W](Qe*Ke,!0)):"JOINTS_0"==i?w.push(be[W](Qe*Ke,!0)):"COLOR_0"==i?L.push(be[W](Qe*Ke,!0)):"TANGENT"==i?k.push(be[W](Qe*Ke,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i)),Ye++;else for(Je=Qe+4*je;Qe<Je;Qe++)"WEIGHTS_0"==i?S.push(be[W](Qe*Ke,!0)):"JOINTS_0"==i?w.push(be[W](Qe*Ke,!0)):"COLOR_0"==i?L.push(be[W](Qe*Ke,!0)):"TANGENT"==i?k.push(be[W](Qe*Ke,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i),Ye++;break;case"VEC3":if(q)for(Je=Qe+je*(q/Ke);Qe<Je;Qe++)Ye%Ze<3&&("NORMAL"==i?y.push(be[W](Qe*Ke,!0)):"POSITION"==i?x.push(be[W](Qe*Ke,!0)):"COLOR_0"==i?(L.push(be[W](Qe*Ke,!0)),Ye%Ze==2&&L.push(1)):"TANGENT"==i?k.push(be[W](Qe*Ke,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i)),Ye++;else for(Je=Qe+3*je;Qe<Je;Qe++)"NORMAL"==i?y.push(be[W](Qe*Ke,!0)):"POSITION"==i?x.push(be[W](Qe*Ke,!0)):"COLOR_0"==i?(L.push(be[W](Qe*Ke,!0)),Ye%3==2&&L.push(1)):"TANGENT"==i?k.push(be[W](Qe*Ke,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i),Ye++;break;case"VEC2":if(q)for(Je=Qe+je*(q/Ke);Qe<Je;Qe++)Ye%Ze<2&&("TEXCOORD_0"==i?_.push(be[W](Qe*Ke,!0)):"TEXCOORD_1"==i?v.push(be[W](Qe*Ke,!0)):"TEXCOORD_2"==i?b.push(be[W](Qe*Ke,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i)),Ye++;else for(Je=Qe+2*je;Qe<Je;Qe++)"TEXCOORD_0"==i?_.push(be[W](Qe*Ke,!0)):"TEXCOORD_1"==i?v.push(be[W](Qe*Ke,!0)):"TEXCOORD_2"==i?b.push(be[W](Qe*Ke,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i),Ye++}},parseSparse_GLTF=(i,g,x,_,v)=>{const b=x.sparse;if(!b)return;const{values:y,indices:S,count:w}=b,L=_.bufferViews,k=L[y.bufferView],H=k.buffer,z=_.buffers,W=z[H],q=[],be=[],Ke=L[S.bufferView],Xe=Ke.buffer,je=z[Xe];let Ye;W.uri&&(Ye=i.parsingResult.uris.buffers[H]);const Ze=Pa[x.componentType],{BYTES_PER_ELEMENT:Je}=Ze;let Qe;switch(Ze){case Float32Array:Qe="getFloat32";break;case Uint32Array:Qe="getUint32";break;case Uint16Array:Qe="getUint16";break;case Int16Array:Qe="getInt16";break;case Uint8Array:Qe="getUint8";break;case Int8Array:Qe="getInt8"}const et=x.byteOffset||0;let tt,it,ft=((k.byteOffset||0)+et)/Je;switch(x.type){case"VEC3":for(tt=ft+Je*w/Je*3;ft<tt;ft++){const i=Ye[Qe](ft*Je,!0);"NORMAL"==g||"POSITION"==g&&q.push(i)}break;case"VEC2":for(tt=ft+Je*w/Je*2;ft<tt;ft++)"TEXCOORD_0"==g&&be.push(Ye[Qe](ft*Je,!0))}je.uri&&(it=i.parsingResult.uris.buffers[Xe]);const pt=Pa[S.componentType],xt=pt.BYTES_PER_ELEMENT,vt=pt===Uint16Array?"getUint16":"getUint8",bt=S.byteOffset||0;let yt=((Ke.byteOffset||0)+bt)/xt;const Tt=yt+xt*w/xt;let St=0;for(;yt<Tt;yt++){const i=it[vt](yt*xt,!0);v[3*i]=q[3*St],v[3*i+1]=q[3*St+1],v[3*i+2]=q[3*St+2],St++}};class MorphInfoData_GLTF{vertices=[];verticesColor_0=[];normals=[];uvs=[];uvs1=[];uvs2=[];jointWeights=[];joints=[];tangents=[];interleaveData;constructor(i=[],g=[],x=[],_=[],v=[],b=[],y=[],S=[],w=[]){this.vertices=i,this.verticesColor_0=g,this.normals=x,this.uvs=_,this.uvs1=v,this.uvs2=v,this.jointWeights=y,this.joints=S,this.tangents=w}}class MorphInfo_GLTF{morphInfoDataList=[];weights;cacheData={};origin;constructor(i,g,x,_){x.targets&&(this.morphInfoDataList=x.targets.map(x=>{const _=new MorphInfoData_GLTF;for(let v in x){const{vertices:b,verticesColor_0:y,normals:S,uvs:w,uvs1:L,uvs2:k,jointWeights:H,joints:z,tangents:W}=_,q=x[v],be=new AccessorInfo_GLTF(i,g,q),{accessor:Ke}=be;parseAttributeInfo_GLTF(v,be,b,w,L,k,S,H,z,y,W),Ke.sparse&&parseSparse_GLTF(i,v,Ke,g,b)}return _})),this.weights=_||[],this.origin=null}}const parseMaterialTexture=(i,g,x,_,v,b=!0)=>{const{redGPUContext:y,gltfData:S}=i,{textureRawList:w}=i.parsingResult,L=x.index,k=S.textures[L],H=k.extensions?.EXT_texture_webp?.source||k.source,z=getURL(i,S,H);if(z){const L=k.sampler,W=getSamplerInfo(i,S,L),{parsedURI:q,cacheKey:be}=z,Ke=`${_}SourceGlTfId_${H}`;if(w[Ke]?(w[Ke].materialList.push(g),w[Ke].samplerList.push(new Sampler(y,W))):w[Ke]={src:q,cacheKey:be,targetTextureKey:_,targetSamplerKey:`${_}Sampler`,materialList:[g],samplerList:[new Sampler(y,W)],format:v||navigator.gpu.getPreferredCanvasFormat(),useMipmap:b},g[`${_}_texCoord_index`]=x.texCoord||0,"extensions"in x){const{extensions:i}=x,{KHR_texture_transform:v}=i;v&&((i,g,x)=>{i[`${g}_KHR_texture_transform_offset`]=x.offset||[0,0],i[`${g}_KHR_texture_transform_scale`]=x.scale||[1,1],i[`${g}_KHR_texture_transform_rotation`]=x.rotation||0,i[`use_${g}_KHR_texture_transform`]=!0})(g,_,v)}}},getURL=function(i,g,x){if(!g.images[x])return null;const{uri:_}=g.images[x];let v;const b=`${i.url}_${x}`;return v=_.indexOf("blob:http")>-1?_:(_.indexOf(";base64,")>-1?"":i.filePath)+_,{parsedURI:v,cacheKey:b}},getSamplerInfo=function(i,g,x){const _={magFilter:cn.LINEAR,minFilter:cn.LINEAR,mipmapFilter:cn.LINEAR,addressModeU:un.REPEAT,addressModeV:un.REPEAT,addressModeW:un.REPEAT},v={33071:un.CLAMP_TO_EDGE,33648:un.MIRRORED_REPEAT,10497:un.REPEAT},b={9728:cn.NEAREST,9729:cn.LINEAR},y={9728:cn.NEAREST,9729:cn.LINEAR};if(g.samplers){let i=g.samplers[x];i&&("magFilter"in i&&(_.magFilter=b[i.magFilter]||cn.LINEAR),"minFilter"in i&&(_.minFilter=y[i.minFilter]||cn.LINEAR),"wrapS"in i&&(_.addressModeU=v[i.wrapS]),"wrapT"in i&&(_.addressModeV=v[i.wrapT]))}return _.string=JSON.stringify(_),_},parseMaterialInfo_GLTF=(i,g,x)=>{const{redGPUContext:_}=i;let v,b=!1,y="OPAQUE",S=.5;if("material"in x){v=new PBRMaterial(_);const w=x.material,L=g.materials[w];b=!!L.doubleSided,y=L.alphaMode??y,S=L.alphaCutoff??S;const{pbrMetallicRoughness:k,normalTexture:H,emissiveTexture:z,occlusionTexture:W}=L;if(v.emissiveFactor=L.emissiveFactor||[0,0,0],k){const{metallicRoughnessTexture:g,baseColorTexture:x}=k;let _,b;v.baseColorFactor=k.baseColorFactor||[1,1,1,1],"metallicFactor"in k&&(_=k.metallicFactor),"roughnessFactor"in k&&(b=k.roughnessFactor),v.metallicFactor=null!=_?_:1,v.roughnessFactor=null!=b?b:1,x&&parseMaterialTexture(i,v,x,"baseColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),g&&parseMaterialTexture(i,v,g,"metallicRoughnessTexture",null,!1)}if(H){parseMaterialTexture(i,v,H,"normalTexture");const{scale:g}=H;v.normalScale=null!=g?g:1}if(z&&parseMaterialTexture(i,v,z,"emissiveTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),W&&(parseMaterialTexture(i,v,W,"occlusionTexture",null,!1),v.occlusionStrength=L.occlusionTexture.strength||1),"extensions"in L){const{extensions:g}=L,{KHR_materials_clearcoat:x,KHR_materials_emissive_strength:_,KHR_materials_transmission:b,KHR_materials_diffuse_transmission:S,KHR_materials_volume:w,KHR_materials_unlit:k,KHR_materials_ior:H,KHR_materials_sheen:z,KHR_materials_specular:W,KHR_materials_dispersion:q,KHR_materials_anisotropy:be,KHR_materials_iridescence:Ke}=g;if(Ke&&((i,g,x)=>{i.useKHR_materials_iridescence=!0,i.KHR_iridescenceFactor=g.iridescenceFactor||0,i.KHR_iridescenceIor=g.iridescenceIor||1.3,i.KHR_iridescenceThicknessMinimum=g.iridescenceThicknessMinimum||100,i.KHR_iridescenceThicknessMaximum=g.iridescenceThicknessMaximum||400,i.transparent=!0;{const{iridescenceTexture:_,iridescenceThicknessTexture:v}=g;_&&parseMaterialTexture(x,i,_,"KHR_iridescenceTexture",null,!1),v&&parseMaterialTexture(x,i,v,"KHR_iridescenceThicknessTexture",null,!1)}})(v,Ke,i),be&&((i,g,x)=>{i.useKHR_materials_anisotropy=!0,i.KHR_anisotropyStrength=g.anisotropyStrength||0,i.KHR_anisotropyRotation=g.anisotropyRotation||0;const{anisotropyTexture:_}=g;_&&parseMaterialTexture(x,i,_,"KHR_anisotropyTexture")})(v,be,i),x&&((i,g,x)=>{i.KHR_clearcoatFactor=g.clearcoatFactor||0,i.KHR_clearcoatRoughnessFactor=g.clearcoatRoughnessFactor||0,i.useKHR_materials_clearcoat=!0;const{clearcoatTexture:_,clearcoatNormalTexture:v,clearcoatRoughnessTexture:b}=g;_&&parseMaterialTexture(x,i,_,"KHR_clearcoatTexture",null,!1),v&&parseMaterialTexture(x,i,v,"KHR_clearcoatNormalTexture"),b&&parseMaterialTexture(x,i,b,"KHR_clearcoatRoughnessTexture",null,!1)})(v,x,i),_){const{emissiveStrength:i}=_;v.emissiveStrength=null!=i?i:1}if(b&&(((i,g,x)=>{i.useKHR_materials_transmission=!0,i.KHR_transmissionFactor=g.transmissionFactor||0,i.use2PathRender=!0;{const _=g.transmissionTexture;_&&parseMaterialTexture(x,i,_,"KHR_transmissionTexture",null,!1)}})(v,b,i),v.transparent="BLEND"===y),S&&((i,g,x)=>{i.useKHR_materials_diffuse_transmission=!0,i.KHR_diffuseTransmissionFactor=g.diffuseTransmissionFactor||0,i.KHR_diffuseTransmissionColorFactor=g.diffuseTransmissionColorFactor||[1,1,1],i.transparent=!0;{const _=g.diffuseTransmissionTexture;_&&parseMaterialTexture(x,i,_,"KHR_diffuseTransmissionTexture",null,!1);const v=g.diffuseTransmissionColorTexture;v&&parseMaterialTexture(x,i,v,"KHR_diffuseTransmissionColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`,!1)}})(v,S,i),w&&(((i,g,x)=>{i.useKHR_materials_volume=!0,i.KHR_thicknessFactor=g.thicknessFactor||1,i.KHR_attenuationDistance=g.attenuationDistance||1,i.KHR_attenuationColor=g.attenuationColor||[1,1,1],i.use2PathRender=!0,i.transparent=!0;{const _=g.thicknessTexture;_&&parseMaterialTexture(x,i,_,"KHR_thicknessTexture",null,!1)}})(v,w,i),y="BLEND"),k&&(v.useKHR_materials_unlit=!0),H){const{ior:i}=H;v.KHR_materials_ior=null!=i?i:1.5,v.use2PathRender=!0,v.transparent=!0}if(q){const{dispersion:i}=q;v.KHR_dispersion=i||0,v.use2PathRender=!0,v.transparent=!0}z&&((i,g,x)=>{i.KHR_sheenColorFactor=g.sheenColorFactor||[0,0,0],i.KHR_sheenRoughnessFactor=g.sheenRoughnessFactor||0,i.useKHR_materials_sheen=!0;const{sheenColorTexture:_,sheenRoughnessTexture:v}=g;_&&parseMaterialTexture(x,i,_,"KHR_sheenColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`,!1),v&&parseMaterialTexture(x,i,v,"KHR_sheenRoughnessTexture",null,!1)})(v,z,i),W&&((i,g,x)=>{i.useKHR_materials_specular=!0,i.KHR_specularFactor=g.specularFactor??1,i.KHR_specularColorFactor=g.specularColorFactor||[1,1,1];const{specularTexture:_,specularColorTexture:v}=g;_&&parseMaterialTexture(x,i,_,"KHR_specularTexture"),v&&parseMaterialTexture(x,i,v,"KHR_specularColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`)})(v,W,i)}}else v=new PBRMaterial(_);Object.hasOwn(x.attributes,"COLOR_0")&&(v.useVertexColor=!0),v.doubleSided=b,v.cutOff=S;const{blendColorState:w,blendAlphaState:L}=v;switch(y){case"BLEND":v.alphaBlend=2,w.srcFactor=en.SRC_ALPHA,w.dstFactor=en.ONE_MINUS_SRC_ALPHA,L.srcFactor=en.SRC_ALPHA,L.dstFactor=en.ONE_MINUS_SRC_ALPHA,v.transparent=!0;break;case"MASK":v.alphaBlend=1,v.useCutOff=!0,w.srcFactor=en.ONE,w.dstFactor=en.ZERO,L.srcFactor=en.ONE,L.dstFactor=en.ZERO;break;default:w.srcFactor=en.ONE,w.dstFactor=en.ZERO,L.srcFactor=en.ONE,L.dstFactor=en.ZERO,v.alphaBlend=0}return v},parseIndicesInfo_GLTF=(i,g)=>{const{accessor:x,startIndex:_,getMethod:v,bufferURIDataView:b,componentType_BYTES_PER_ELEMENT:y}=i,{type:S,count:w}=x;let L,k=_;if("SCALAR"===S)for(L=k+w;k<L;k++)g.push(b[v](k*y,!0))},parseInterleaveData_GLTF=(i,g,x,_,v,b,y,S,w,L)=>{let k,H,z,W,q,be,Ke,Xe,je,Ye=0,Ze=g.length/3,Je=0;const Qe=g.length,et=_.length,tt=b.length,it=y.length,ft=x.length,pt=S.length,xt=w.length,vt=L.length;for(k=z=be=0,H=W=Ke=1,q=Xe=2,je=3;Ye<Ze;Ye++)Qe&&(i[Je++]=g[z],i[Je++]=g[W],i[Je++]=g[q]),et?(i[Je++]=_[z],i[Je++]=_[W],i[Je++]=_[q]):(i[Je++]=0,i[Je++]=0,i[Je++]=0),v.length||v.push(0,0),v.length&&(i[Je++]=v[k],i[Je++]=v[H]),it?(i[Je++]=y[k],i[Je++]=y[H]):tt?(i[Je++]=b[k],i[Je++]=b[H]):v.length&&(i[Je++]=v[k],i[Je++]=v[H]),ft?(i[Je++]=x[be],i[Je++]=x[Ke],i[Je++]=x[Xe],i[Je++]=x[je]):(i[Je++]=0,i[Je++]=0,i[Je++]=0,i[Je++]=0),pt?(i[Je++]=S[be],i[Je++]=S[Ke],i[Je++]=S[Xe],i[Je++]=S[je]):(i[Je++]=0,i[Je++]=0,i[Je++]=0,i[Je++]=0),xt?(i[Je++]=w[be],i[Je++]=w[Ke],i[Je++]=w[Xe],i[Je++]=w[je]):(i[Je++]=0,i[Je++]=0,i[Je++]=0,i[Je++]=0),vt?(i[Je++]=L[be],i[Je++]=L[Ke],i[Je++]=L[Xe],i[Je++]=L[je]):(i[Je++]=0,i[Je++]=0,i[Je++]=0,i[Je++]=0),k+=2,H+=2,z+=3,W+=3,q+=3,be+=4,Ke+=4,Xe+=4,je+=4},Ia=180/Math.PI,setMeshRotation=(i,g)=>{g.setRotation(-i[0]*Ia,-i[1]*Ia,-i[2]*Ia)},parseTRSAndMATRIX_GLTF=(i,g)=>{const{matrix:x,rotation:_,translation:v,scale:b}=g;let y,S;if("matrix"in g){y=create$2(),S=create$1(),mat4ToEuler(x,S),setMeshRotation(S,i),i.setPosition(x[12],x[13],x[14]);const g=fromValues(1,1,1);getScaling(g,x),i.setScale(g[0],g[1],g[2])}"rotation"in g&&(y=create$2(),S=create$1(),quaternionToRotationMat4(_,y),mat4ToEuler(y,S),setMeshRotation(S,i)),"translation"in g&&i.setPosition(v[0],v[1],v[2]),"scale"in g&&(i.setScale(b[0],b[1],b[2]),(b[0]<0||b[1]<0||b[2]<0)&&(i.primitiveState.frontFace=nr.CW))},parseChildrenAndSkin=(i,g,x,_,v)=>{if("children"in _){const v=_.children,b=v.length;for(let _=0;_<b;_++)parseNode_GLTF(i,g,v[_],x)}"skin"in _&&((i,g,x,_)=>{const v=new ParsedSkinInfo_GLTF,b=[],{nodes:y}=g,{joints:S,skeleton:w}=x;{let g=0;const x=S.length;for(;g<x;g++){const x=S[g];parseJoint_GLTF(i,v,y,x)}}w&&(v.skeletonMesh=y[w].Mesh);const L=x.inverseBindMatrices,k=new AccessorInfo_GLTF(i,g,L),{startIndex:H,accessor:z,componentType_BYTES_PER_ELEMENT:W,bufferViewByteStride:q,bufferURIDataView:be,getMethod:Ke}=k,{type:Xe,count:je}=z;let Ye=0;const Ze=q/W;let Je,Qe=H;if("MAT4"===Xe)if(q)for(Je=Qe+je*(q/W);Qe<Je;Qe++)Ye%Ze<16&&b.push(be[Ke](Qe*W,!0)),Ye++;else for(Je=Qe+16*je;Qe<Je;Qe++)b.push(be[Ke](Qe*W,!0)),Ye++;v.inverseBindMatrices=[];for(let i=0;i<S.length;i++)v.inverseBindMatrices.push(new Float32Array([b[16*i],b[16*i+1],b[16*i+2],b[16*i+3],b[16*i+4],b[16*i+5],b[16*i+6],b[16*i+7],b[16*i+8],b[16*i+9],b[16*i+10],b[16*i+11],b[16*i+12],b[16*i+13],b[16*i+14],b[16*i+15]]));_.animationInfo.skinInfo=v,_.material.useSkin=!!_.animationInfo.skinInfo})(i,g,v[_.skin],x)},parseNode_GLTF=(i,g,x,_)=>{const{redGPUContext:v,parsingResult:b}=i,{nodes:y,meshes:S,skins:w}=g,{groups:L,cameras:k}=b,H=y[x];if("mesh"in H){const v=function(i,g,x,_){const{redGPUContext:v}=i;let b;x.name&&(b=x.name);const y=[],{primitives:S}=x;let w=0;const L=S.length;for(;w<L;w++){const L=S[w];let k,H,z,W=[],q=[],be=[],Ke=[],je=[],Ye=[],Ze=[],Je=[],Qe=[],et=[];const{attributes:tt}=L;if(tt)for(const x in tt){const _=tt[x],v=new AccessorInfo_GLTF(i,g,_);parseAttributeInfo_GLTF(x,v,q,Ke,je,Ye,Ze,Je,Qe,be,et),v.accessor.sparse&&parseSparse_GLTF(i,x,v.accessor,g,q)}if("indices"in L){let x=L.indices,_=new AccessorInfo_GLTF(i,g,x);parseIndicesInfo_GLTF(_,W)}H=parseMaterialInfo_GLTF(i,g,L),H instanceof PBRMaterial&&i.parsingResult.materials.push(H);let it,ft=!1;if("mode"in L)switch(L.mode){case 0:z=Xe.POINT_LIST;break;case 1:case 2:z=Xe.LINE_LIST;break;case 3:z=Xe.LINE_STRIP,ft=!0;break;case 4:case 6:z=Xe.TRIANGLE_LIST;break;case 5:z=Xe.TRIANGLE_STRIP,ft=!0}be.length&&(H.useVertexColor_0=!0),et.length&&(H.useVertexTangent=!0),it=Ze.length?Ze:calculateNormals(q,W);let pt,xt=[];parseInterleaveData_GLTF(xt,q,be,it,Ke,je,Ye,Je,Qe,et);let vt={};if(q.length&&(vt.aVertexPosition=InterleaveType.float32x3),it.length&&(vt.aVertexNormal=InterleaveType.float32x3),Ke.length&&(vt.aTexcoord=InterleaveType.float32x2),(Ye.length||je.length||Ke.length)&&(vt.aTexcoord1=InterleaveType.float32x2),vt.aVertexColor_0=InterleaveType.float32x4,vt.aVertexWeight=InterleaveType.float32x4,vt.aVertexJoint=InterleaveType.float32x4,vt.aVertexTangent=InterleaveType.float32x4,pt=new Geometry(v,new VertexBuffer(v,xt,new InterleavedStruct(vt),void 0,`Vertex_${i.url}_${_}_${w}`),!ft&&W.length?new IndexBuffer(v,new Uint32Array(W),void 0,`Index_${i.url}_${_}_${w}`):null),H||consoleAndThrowError("재질을 파싱할수없는경우 ",L),k=new Mesh(v,pt,H),b&&(k.name=b,i.parsingOption))for(let g in i.parsingOption)b.toLowerCase().indexOf(g)>-1&&i.parsingOption[g](k);k.primitiveState.topology=z||Xe.TRIANGLE_LIST,k.material.doubleSided&&(k.primitiveState.cullMode=tr.NONE),k.material.use2PathRender&&(k.primitiveState.cullMode=tr.NONE,k.depthStencilState.depthCompare=Zn.LESS_EQUAL),2===k.material.alphaBlend&&(k.depthStencilState.depthCompare=Zn.LESS_EQUAL);{let _=new MorphInfo_GLTF(i,g,L,x.weights),v=0,b=_.morphInfoDataList;const y=b.length;for(;v<y;){const i=b[v],g=i.normals.length?i.normals:calculateNormals(i.vertices,W),x=[];parseInterleaveData_GLTF(x,i.vertices,i.verticesColor_0,g,i.uvs,i.uvs1,i.uvs2,i.jointWeights,i.joints,i.tangents),i.interleaveData=x,v++}k.animationInfo.morphInfo=_,k.animationInfo.morphInfo.origin=new Float32Array(xt)}let bt=k.geometry.vertexBuffer.data;k.gpuRenderInfo||k.initGPURenderInfos();let yt=0;for(const i in vt)yt+=vt[i].numElements;{const i=k.animationInfo.morphInfo.morphInfoDataList;let g=0;const x=i.length,_=bt.length;for(;g<x;){const x=i[g].vertices;let v=0,b=_/yt,y=null==k.animationInfo.morphInfo.weights[g]?.5:k.animationInfo.morphInfo.weights[g];for(;v<b;)bt[v*yt]+=x[3*v]*y,bt[v*yt+1]+=x[3*v+1]*y,bt[v*yt+2]+=x[3*v+2]*y,v++;g++}}k.geometry.vertexBuffer.updateAllData(bt),k.animationInfo.morphInfo.origin=new Float32Array(bt),L.Mesh=k,y.push(k)}return y}(i,g,S[H.mesh],x),b=v.length;for(let x=0;x<b;x++){let b=v[x];_.addChild(H.Mesh=b),parseTRSAndMATRIX_GLTF(b,H),parseChildrenAndSkin(i,g,b,H,w)}}else{let b;L[x]?(b=L[x],H.Mesh=b):(b=new Mesh(v),_.addChild(b),H.Mesh=b,b.name=H.name,L[x]=b),parseTRSAndMATRIX_GLTF(b,H),parseChildrenAndSkin(i,g,b,H,w)}},parseGLTF=(i,g,x)=>{requestAnimationFrame(()=>{(i=>{const g=i?.asset;g||consoleAndThrowError("GLTFLoader - asset must be defined"),g.version||consoleAndThrowError("GLTFLoader - asset version must be defined");const x=parseFloat(g.version);isNaN(x)&&consoleAndThrowError("GLTFLoader - asset version must be a numerical value"),x<2&&consoleAndThrowError("GLTFLoader - asset version must be 2.0 or higher")})(g),requestAnimationFrame(()=>{((i,g,x)=>{const{parsingResult:_}=i,{uris:v}=_,b="buffers",y=v[b],S=g.buffers,w=S.length;let L=0;S.forEach((g,_)=>{var v;function checkLoadingStatus(){L===w&&x&&x()}g._redURIkey=b,g._redURIIndex=_,g.uri instanceof ArrayBuffer?(v=new DataView(g.uri),L++,y[_]=v,checkLoadingStatus()):function(g){const x=g.startsWith("data:")?g:i.filePath+g;arrayBufferLoader(x,function(i){L++,y[_]=new DataView(i),checkLoadingStatus()},function(i,g){})}(g.uri)})})(i,g,()=>{requestAnimationFrame(()=>{((i,g,x)=>{const{scenes:_}=g;_[0].nodes.forEach(x=>{parseNode_GLTF(i,g,x,i.resultMesh)}),x?.()})(i,g,()=>{requestAnimationFrame(()=>{((i,g)=>{const{cameras:x}=g;x&&x.forEach(function(g){let x=new PerspectiveCamera;"orthographic"==g.type||(x.fieldOfView=180*g.perspective.yfieldOfView/Math.PI,x.farClipping=g.perspective.zfar,x.nearClipping=g.perspective.znear),i.parsingResult.cameras.push(x)})})(i,g),new TextureLoader(i.redGPUContext,Object.values(i.parsingResult.textureRawList),_=>{_.textures.forEach(i=>{const{targetTextureKey:g,targetSamplerKey:x,samplerList:_}=i.srcInfo;i.srcInfo.materialList.forEach((v,b)=>{v[g]=i.texture,_[b]&&(v[x]=_[b])})}),parseAnimations(i,g).then(i=>{x&&x()})})})})})})})})},La=new Map,Ua=new Map,parseFileGLB=async(i,g)=>{const x=getAbsoluteURL(window.location.href,i.filePath+i.fileName);if(La.has(x))return Gn("GLB Model parsing has cache",x),void await parseArrayBuffer(i,La.get(x),g);if(Ua.has(x))return await Ua.get(x),void await parseArrayBuffer(i,La.get(x),g);const _=new Promise((i,g)=>{(async(i,g,x=()=>{})=>{try{const x=await fetch(i);g(await x.arrayBuffer())}catch(i){x(i)}})(x,g=>{La.set(x,g),Gn("GLB Model parsing set cache",x),Ua.delete(x),i(g)},i=>{Ua.delete(x),g(i)})});Ua.set(x,_);try{const x=await _;await parseArrayBuffer(i,x,g)}catch(i){}},parseArrayBuffer=async(i,g,x)=>{const{content:_,binaryChunk:v}=parseBuffer(g);if(null===_)throw new Error("JSON content not found");const b=JSON.parse(_);processImagesIfExist(b,v),b.buffers[0].uri=v,i.gltfData=b,parseGLTF(i,b,x)},parseBuffer=i=>{let g=null,x=null;const _=new DataView(i,12),v=_.byteLength;for(let b=0;b<v;){const v=_.getUint32(b,!0);b+=4;const y=_.getUint32(b,!0);switch(b+=4,y){case 1313821514:const _=new Uint8Array(i,12+b,v);g=convertUint8ArrayToString(_);break;case 5130562:const y=12+b;x=i.slice(y,y+v)}b+=v}return{content:g,binaryChunk:x}},processImagesIfExist=(i,g)=>{const{images:x,bufferViews:_}=i,v=["image/png","image/jpeg","image/gif","image/webp"],b=new Map;if(x)for(let i=0;i<x.length;i++){const y=x[i],{mimeType:S,bufferView:w}=y;if(v.includes(S)&&void 0!==w){const i=_[w].byteOffset||0,x=_[w].byteLength,v=`${i}_${x}_${S}`;if(b.has(v))y.uri=b.get(v);else{const _=g.slice(i,i+x),w=new Blob([new Uint8Array(_)],{type:S}),L=URL.createObjectURL(w);b.set(v,L),y.uri=L}}}return b},convertUint8ArrayToString=i=>{let g="";for(let x of i)g+=String.fromCharCode(x);return g},Da=new Map,Aa=new Map;class GLTFLoader{parsingResult;resultMesh;parsingOption;activeAnimations=[];#b;#tm;#wf;#Rf;#nm;#rm;#Ct;#Pt;#im;constructor(i,g,x,_){validateRedGPUContext(i),this.#b=i,this.#Rf=g,this.#tm=getFilePath(g),this.#wf=getFileName(g),this.#nm=getFileExtension(g),this.#Ct=x,this.#Pt=_,this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.resultMesh=new Mesh(this.#b),this.resultMesh.gltfLoaderInfo=this,this.resultMesh.animationInfo.animationsList=this.parsingResult.animations,this.#am()}get redGPUContext(){return this.#b}get filePath(){return this.#tm}get gltfData(){return this.#rm}set gltfData(i){this.#rm=i}get fileName(){return this.#wf}get url(){return this.#Rf}stopAnimation(){const{activeAnimations:i}=this;let g=i.indexOf(this.#im);g>-1&&i.splice(g,1)}playAnimation(i){const{activeAnimations:g}=this;g.push(this.#im=new PlayAnimationInfo(performance.now(),i))}async#am(){try{"glb"===this.#nm?parseFileGLB(this,()=>this.#Ct(this)):"gltf"===this.#nm?(async(i,g)=>{const x=getAbsoluteURL(window.location.href,i.filePath+i.fileName);if(Da.has(x))return i.gltfData=Da.get(x),void requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,g)});if(Aa.has(x))return await Aa.get(x),i.gltfData=Da.get(x),void requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,g)});const _=new Promise(async(g,_)=>{try{const _=await fetch(i.url);if(!_.ok)throw new Error("GLTF 네트워크 오류:"+_.status);const v=await _.json();Da.set(x,v),g(v)}catch(i){_(i)}finally{Aa.delete(x)}});Aa.set(x,_);const v=await _;i.gltfData=v,requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,g)})})(this,()=>this.#Ct(this)):consoleAndThrowError("Unknown file extension:"+this.#nm)}catch(i){this.#Pt?.(i)}}}Object.freeze(GLTFLoader);class PlayAnimationInfo{startTime;targetAniTrackList;constructor(i,g){this.startTime=i,this.targetAniTrackList=g}}export{yr as Camera,ColorRGB,ColorRGBA,Ci as Display,FinalRender,GLTFLoader,un as GPU_ADDRESS_MODE,en as GPU_BLEND_FACTOR,tn as GPU_BLEND_OPERATION,Zn as GPU_COMPARE_FUNCTION,tr as GPU_CULL_MODE,ln as GPU_FILTER_MODE,nr as GPU_FRONT_FACE,rr as GPU_INDEX_FORMAT,Vn as GPU_LOAD_OP,cn as GPU_MIPMAP_FILTER_MODE,Xe as GPU_PRIMITIVE_TOPOLOGY,Fn as GPU_STORE_OP,Geometry,Pi as Light,Cr as Material,OBJLoader,OBJMTLLoader,wa as Picking,Ma as PostEffect,Bi as Primitive,RedGPUContext,RedGPUContextDetector,RedGPUContextSizeManager,RedGPUContextViewContainer,Fi as RenderState,Renderer,Vi as Resource,sa as RuntimeChecker,Xt as SystemCode,Nn as Util,init,v as mat3,L as mat4};