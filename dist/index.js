var i=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array,g=Math.random;var _=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var i=0,m=arguments.length;m--;)i+=arguments[m]*arguments[m];return Math.sqrt(i)});var b=Object.freeze({__proto__:null,get ARRAY_TYPE(){return m},EPSILON:i,RANDOM:g,equals:function(m,g){return Math.abs(m-g)<=i*Math.max(1,Math.abs(m),Math.abs(g))},setMatrixArrayType:function(i){m=i},toRadian:function(i){return i*_}});function multiply$8(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return i[0]=_*w+y*P,i[1]=b*w+T*P,i[2]=_*$+y*H,i[3]=b*$+T*H,i}function subtract$6(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i}var y=multiply$8,T=subtract$6,w=Object.freeze({__proto__:null,LDU:function(i,m,g,_){return i[2]=_[2]/_[0],g[0]=_[0],g[1]=_[1],g[3]=_[3]-i[2]*g[1],[i,m,g]},add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i},adjoint:function(i,m){var g=m[0];return i[0]=m[3],i[1]=-m[1],i[2]=-m[2],i[3]=g,i},clone:function(i){var g=new m(4);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i},create:function(){var i=new m(4);return m!=Float32Array&&(i[1]=0,i[2]=0),i[0]=1,i[3]=1,i},determinant:function(i){return i[0]*i[3]-i[2]*i[1]},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return Math.abs(_-w)<=i*Math.max(1,Math.abs(_),Math.abs(w))&&Math.abs(b-P)<=i*Math.max(1,Math.abs(b),Math.abs(P))&&Math.abs(y-$)<=i*Math.max(1,Math.abs(y),Math.abs($))&&Math.abs(T-H)<=i*Math.max(1,Math.abs(T),Math.abs(H))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3])},fromRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=-g,i[3]=_,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=m[1],i},fromValues:function(i,g,_,b){var y=new m(4);return y[0]=i,y[1]=g,y[2]=_,y[3]=b,y},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g*y-b*_;return T?(T=1/T,i[0]=y*T,i[1]=-_*T,i[2]=-b*T,i[3]=g*T,i):null},mul:y,multiply:multiply$8,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i},rotate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P+y*w,i[1]=b*P+T*w,i[2]=_*-w+y*P,i[3]=b*-w+T*P,i},scale:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1];return i[0]=_*w,i[1]=b*w,i[2]=y*P,i[3]=T*P,i},set:function(i,m,g,_,b){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i},str:function(i){return"mat2("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"},sub:T,subtract:subtract$6,transpose:function(i,m){if(i===m){var g=m[1];i[1]=m[2],i[2]=g}else i[0]=m[0],i[1]=m[2],i[2]=m[1],i[3]=m[3];return i}});function multiply$7(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1],q=g[2],W=g[3],ye=g[4],Ge=g[5];return i[0]=_*$+y*H,i[1]=b*$+T*H,i[2]=_*q+y*W,i[3]=b*q+T*W,i[4]=_*ye+y*Ge+w,i[5]=b*ye+T*Ge+P,i}function subtract$5(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i}var P=multiply$7,$=subtract$5,H=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i},clone:function(i){var g=new m(6);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i},create:function(){var i=new m(6);return m!=Float32Array&&(i[1]=0,i[2]=0,i[4]=0,i[5]=0),i[0]=1,i[3]=1,i},determinant:function(i){return i[0]*i[3]-i[1]*i[2]},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1],q=g[2],W=g[3],ye=g[4],Ge=g[5];return Math.abs(_-$)<=i*Math.max(1,Math.abs(_),Math.abs($))&&Math.abs(b-H)<=i*Math.max(1,Math.abs(b),Math.abs(H))&&Math.abs(y-q)<=i*Math.max(1,Math.abs(y),Math.abs(q))&&Math.abs(T-W)<=i*Math.max(1,Math.abs(T),Math.abs(W))&&Math.abs(w-ye)<=i*Math.max(1,Math.abs(w),Math.abs(ye))&&Math.abs(P-Ge)<=i*Math.max(1,Math.abs(P),Math.abs(Ge))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],1)},fromRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=-g,i[3]=_,i[4]=0,i[5]=0,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=m[1],i[4]=0,i[5]=0,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i[4]=m[0],i[5]=m[1],i},fromValues:function(i,g,_,b,y,T){var w=new m(6);return w[0]=i,w[1]=g,w[2]=_,w[3]=b,w[4]=y,w[5]=T,w},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i[4]=0,i[5]=0,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=g*y-_*b;return P?(P=1/P,i[0]=y*P,i[1]=-_*P,i[2]=-b*P,i[3]=g*P,i[4]=(b*w-y*T)*P,i[5]=(_*T-g*w)*P,i):null},mul:P,multiply:multiply$7,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i[4]=m[4]+g[4]*_,i[5]=m[5]+g[5]*_,i},rotate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=Math.sin(g),H=Math.cos(g);return i[0]=_*H+y*$,i[1]=b*H+T*$,i[2]=_*-$+y*H,i[3]=b*-$+T*H,i[4]=w,i[5]=P,i},scale:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1];return i[0]=_*$,i[1]=b*$,i[2]=y*H,i[3]=T*H,i[4]=w,i[5]=P,i},set:function(i,m,g,_,b,y,T){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i},str:function(i){return"mat2d("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+")"},sub:$,subtract:subtract$5,translate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1];return i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=_*$+y*H+w,i[5]=b*$+T*H+P,i}});function create$6(){var i=new m(9);return m!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[5]=0,i[6]=0,i[7]=0),i[0]=1,i[4]=1,i[8]=1,i}function multiply$6(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=g[0],ye=g[1],Ge=g[2],Ke=g[3],Xe=g[4],je=g[5],Ye=g[6],Ze=g[7],Je=g[8];return i[0]=W*_+ye*T+Ge*$,i[1]=W*b+ye*w+Ge*H,i[2]=W*y+ye*P+Ge*q,i[3]=Ke*_+Xe*T+je*$,i[4]=Ke*b+Xe*w+je*H,i[5]=Ke*y+Xe*P+je*q,i[6]=Ye*_+Ze*T+Je*$,i[7]=Ye*b+Ze*w+Je*H,i[8]=Ye*y+Ze*P+Je*q,i}function subtract$4(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i}var q=multiply$6,W=subtract$4,ye=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i},adjoint:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8];return i[0]=T*H-w*$,i[1]=b*$-_*H,i[2]=_*w-b*T,i[3]=w*P-y*H,i[4]=g*H-b*P,i[5]=b*y-g*w,i[6]=y*$-T*P,i[7]=_*P-g*$,i[8]=g*T-_*y,i},clone:function(i){var g=new m(9);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g[8]=i[8],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},create:create$6,determinant:function(i){var m=i[0],g=i[1],_=i[2],b=i[3],y=i[4],T=i[5],w=i[6],P=i[7],$=i[8];return m*($*y-T*P)+g*(-$*b+T*w)+_*(P*b-y*w)},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=g[0],ye=g[1],Ge=g[2],Ke=g[3],Xe=g[4],je=g[5],Ye=g[6],Ze=g[7],Je=g[8];return Math.abs(_-W)<=i*Math.max(1,Math.abs(_),Math.abs(W))&&Math.abs(b-ye)<=i*Math.max(1,Math.abs(b),Math.abs(ye))&&Math.abs(y-Ge)<=i*Math.max(1,Math.abs(y),Math.abs(Ge))&&Math.abs(T-Ke)<=i*Math.max(1,Math.abs(T),Math.abs(Ke))&&Math.abs(w-Xe)<=i*Math.max(1,Math.abs(w),Math.abs(Xe))&&Math.abs(P-je)<=i*Math.max(1,Math.abs(P),Math.abs(je))&&Math.abs($-Ye)<=i*Math.max(1,Math.abs($),Math.abs(Ye))&&Math.abs(H-Ze)<=i*Math.max(1,Math.abs(H),Math.abs(Ze))&&Math.abs(q-Je)<=i*Math.max(1,Math.abs(q),Math.abs(Je))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8])},fromMat2d:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=0,i[3]=m[2],i[4]=m[3],i[5]=0,i[6]=m[4],i[7]=m[5],i[8]=1,i},fromMat4:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[4],i[4]=m[5],i[5]=m[6],i[6]=m[8],i[7]=m[9],i[8]=m[10],i},fromQuat:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g+g,w=_+_,P=b+b,$=g*T,H=_*T,q=_*w,W=b*T,ye=b*w,Ge=b*P,Ke=y*T,Xe=y*w,je=y*P;return i[0]=1-q-Ge,i[3]=H-je,i[6]=W+Xe,i[1]=H+je,i[4]=1-$-Ge,i[7]=ye-Ke,i[2]=W-Xe,i[5]=ye+Ke,i[8]=1-$-q,i},fromRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=0,i[3]=-g,i[4]=_,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=m[1],i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=m[0],i[7]=m[1],i[8]=1,i},fromValues:function(i,g,_,b,y,T,w,P,$){var H=new m(9);return H[0]=i,H[1]=g,H[2]=_,H[3]=b,H[4]=y,H[5]=T,H[6]=w,H[7]=P,H[8]=$,H},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=H*T-w*$,W=-H*y+w*P,ye=$*y-T*P,Ge=g*q+_*W+b*ye;return Ge?(Ge=1/Ge,i[0]=q*Ge,i[1]=(-H*_+b*$)*Ge,i[2]=(w*_-b*T)*Ge,i[3]=W*Ge,i[4]=(H*g-b*P)*Ge,i[5]=(-w*g+b*y)*Ge,i[6]=ye*Ge,i[7]=(-$*g+_*P)*Ge,i[8]=(T*g-_*y)*Ge,i):null},mul:q,multiply:multiply$6,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i[4]=m[4]+g[4]*_,i[5]=m[5]+g[5]*_,i[6]=m[6]+g[6]*_,i[7]=m[7]+g[7]*_,i[8]=m[8]+g[8]*_,i},normalFromMat4:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],je=m[15],Ye=g*w-_*T,Ze=g*P-b*T,Je=g*$-y*T,Qe=_*P-b*w,et=_*$-y*w,at=b*$-y*P,ht=H*Ke-q*Ge,ft=H*Xe-W*Ge,gt=H*je-ye*Ge,xt=q*Xe-W*Ke,vt=q*je-ye*Ke,bt=W*je-ye*Xe,yt=Ye*bt-Ze*vt+Je*xt+Qe*gt-et*ft+at*ht;return yt?(yt=1/yt,i[0]=(w*bt-P*vt+$*xt)*yt,i[1]=(P*gt-T*bt-$*ft)*yt,i[2]=(T*vt-w*gt+$*ht)*yt,i[3]=(b*vt-_*bt-y*xt)*yt,i[4]=(g*bt-b*gt+y*ft)*yt,i[5]=(_*gt-g*vt-y*ht)*yt,i[6]=(Ke*at-Xe*et+je*Qe)*yt,i[7]=(Xe*Je-Ge*at-je*Ze)*yt,i[8]=(Ge*et-Ke*Je+je*Ye)*yt,i):null},projection:function(i,m,g){return i[0]=2/m,i[1]=0,i[2]=0,i[3]=0,i[4]=-2/g,i[5]=0,i[6]=-1,i[7]=1,i[8]=1,i},rotate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=Math.sin(g),ye=Math.cos(g);return i[0]=ye*_+W*T,i[1]=ye*b+W*w,i[2]=ye*y+W*P,i[3]=ye*T-W*_,i[4]=ye*w-W*b,i[5]=ye*P-W*y,i[6]=$,i[7]=H,i[8]=q,i},scale:function(i,m,g){var _=g[0],b=g[1];return i[0]=_*m[0],i[1]=_*m[1],i[2]=_*m[2],i[3]=b*m[3],i[4]=b*m[4],i[5]=b*m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},set:function(i,m,g,_,b,y,T,w,P,$){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i[6]=w,i[7]=P,i[8]=$,i},str:function(i){return"mat3("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+")"},sub:W,subtract:subtract$4,translate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=g[0],ye=g[1];return i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=w,i[5]=P,i[6]=W*_+ye*T+$,i[7]=W*b+ye*w+H,i[8]=W*y+ye*P+q,i},transpose:function(i,m){if(i===m){var g=m[1],_=m[2],b=m[5];i[1]=m[3],i[2]=m[6],i[3]=g,i[5]=m[7],i[6]=_,i[7]=b}else i[0]=m[0],i[1]=m[3],i[2]=m[6],i[3]=m[1],i[4]=m[4],i[5]=m[7],i[6]=m[2],i[7]=m[5],i[8]=m[8];return i}});function create$5(){var i=new m(16);return m!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0),i[0]=1,i[5]=1,i[10]=1,i[15]=1,i}function clone$5(i){var g=new m(16);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g[8]=i[8],g[9]=i[9],g[10]=i[10],g[11]=i[11],g[12]=i[12],g[13]=i[13],g[14]=i[14],g[15]=i[15],g}function copy$5(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function fromValues$5(i,g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe){var je=new m(16);return je[0]=i,je[1]=g,je[2]=_,je[3]=b,je[4]=y,je[5]=T,je[6]=w,je[7]=P,je[8]=$,je[9]=H,je[10]=q,je[11]=W,je[12]=ye,je[13]=Ge,je[14]=Ke,je[15]=Xe,je}function identity$2(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i}function invert$2(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],je=m[15],Ye=g*w-_*T,Ze=g*P-b*T,Je=g*$-y*T,Qe=_*P-b*w,et=_*$-y*w,at=b*$-y*P,ht=H*Ke-q*Ge,ft=H*Xe-W*Ge,gt=H*je-ye*Ge,xt=q*Xe-W*Ke,vt=q*je-ye*Ke,bt=W*je-ye*Xe,yt=Ye*bt-Ze*vt+Je*xt+Qe*gt-et*ft+at*ht;return yt?(yt=1/yt,i[0]=(w*bt-P*vt+$*xt)*yt,i[1]=(b*vt-_*bt-y*xt)*yt,i[2]=(Ke*at-Xe*et+je*Qe)*yt,i[3]=(W*et-q*at-ye*Qe)*yt,i[4]=(P*gt-T*bt-$*ft)*yt,i[5]=(g*bt-b*gt+y*ft)*yt,i[6]=(Xe*Je-Ge*at-je*Ze)*yt,i[7]=(H*at-W*Je+ye*Ze)*yt,i[8]=(T*vt-w*gt+$*ht)*yt,i[9]=(_*gt-g*vt-y*ht)*yt,i[10]=(Ge*et-Ke*Je+je*Ye)*yt,i[11]=(q*Je-H*et-ye*Ye)*yt,i[12]=(w*ft-T*xt-P*ht)*yt,i[13]=(g*xt-_*ft+b*ht)*yt,i[14]=(Ke*Ze-Ge*Qe-Xe*Ye)*yt,i[15]=(H*Qe-q*Ze+W*Ye)*yt,i):null}function multiply$5(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=m[9],ye=m[10],Ge=m[11],Ke=m[12],Xe=m[13],je=m[14],Ye=m[15],Ze=g[0],Je=g[1],Qe=g[2],et=g[3];return i[0]=Ze*_+Je*w+Qe*q+et*Ke,i[1]=Ze*b+Je*P+Qe*W+et*Xe,i[2]=Ze*y+Je*$+Qe*ye+et*je,i[3]=Ze*T+Je*H+Qe*Ge+et*Ye,Ze=g[4],Je=g[5],Qe=g[6],et=g[7],i[4]=Ze*_+Je*w+Qe*q+et*Ke,i[5]=Ze*b+Je*P+Qe*W+et*Xe,i[6]=Ze*y+Je*$+Qe*ye+et*je,i[7]=Ze*T+Je*H+Qe*Ge+et*Ye,Ze=g[8],Je=g[9],Qe=g[10],et=g[11],i[8]=Ze*_+Je*w+Qe*q+et*Ke,i[9]=Ze*b+Je*P+Qe*W+et*Xe,i[10]=Ze*y+Je*$+Qe*ye+et*je,i[11]=Ze*T+Je*H+Qe*Ge+et*Ye,Ze=g[12],Je=g[13],Qe=g[14],et=g[15],i[12]=Ze*_+Je*w+Qe*q+et*Ke,i[13]=Ze*b+Je*P+Qe*W+et*Xe,i[14]=Ze*y+Je*$+Qe*ye+et*je,i[15]=Ze*T+Je*H+Qe*Ge+et*Ye,i}function translate$1(i,m,g){var _,b,y,T,w,P,$,H,q,W,ye,Ge,Ke=g[0],Xe=g[1],je=g[2];return m===i?(i[12]=m[0]*Ke+m[4]*Xe+m[8]*je+m[12],i[13]=m[1]*Ke+m[5]*Xe+m[9]*je+m[13],i[14]=m[2]*Ke+m[6]*Xe+m[10]*je+m[14],i[15]=m[3]*Ke+m[7]*Xe+m[11]*je+m[15]):(_=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=m[9],ye=m[10],Ge=m[11],i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=w,i[5]=P,i[6]=$,i[7]=H,i[8]=q,i[9]=W,i[10]=ye,i[11]=Ge,i[12]=_*Ke+w*Xe+q*je+m[12],i[13]=b*Ke+P*Xe+W*je+m[13],i[14]=y*Ke+$*Xe+ye*je+m[14],i[15]=T*Ke+H*Xe+Ge*je+m[15]),i}function scale$5(i,m,g){var _=g[0],b=g[1],y=g[2];return i[0]=m[0]*_,i[1]=m[1]*_,i[2]=m[2]*_,i[3]=m[3]*_,i[4]=m[4]*b,i[5]=m[5]*b,i[6]=m[6]*b,i[7]=m[7]*b,i[8]=m[8]*y,i[9]=m[9]*y,i[10]=m[10]*y,i[11]=m[11]*y,i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function rotateX$3(i,m,g){var _=Math.sin(g),b=Math.cos(g),y=m[4],T=m[5],w=m[6],P=m[7],$=m[8],H=m[9],q=m[10],W=m[11];return m!==i&&(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[4]=y*b+$*_,i[5]=T*b+H*_,i[6]=w*b+q*_,i[7]=P*b+W*_,i[8]=$*b-y*_,i[9]=H*b-T*_,i[10]=q*b-w*_,i[11]=W*b-P*_,i}function rotateY$3(i,m,g){var _=Math.sin(g),b=Math.cos(g),y=m[0],T=m[1],w=m[2],P=m[3],$=m[8],H=m[9],q=m[10],W=m[11];return m!==i&&(i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=y*b-$*_,i[1]=T*b-H*_,i[2]=w*b-q*_,i[3]=P*b-W*_,i[8]=y*_+$*b,i[9]=T*_+H*b,i[10]=w*_+q*b,i[11]=P*_+W*b,i}function rotateZ$3(i,m,g){var _=Math.sin(g),b=Math.cos(g),y=m[0],T=m[1],w=m[2],P=m[3],$=m[4],H=m[5],q=m[6],W=m[7];return m!==i&&(i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=y*b+$*_,i[1]=T*b+H*_,i[2]=w*b+q*_,i[3]=P*b+W*_,i[4]=$*b-y*_,i[5]=H*b-T*_,i[6]=q*b-w*_,i[7]=W*b-P*_,i}function fromRotationTranslation$1(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=_+_,P=b+b,$=y+y,H=_*w,q=_*P,W=_*$,ye=b*P,Ge=b*$,Ke=y*$,Xe=T*w,je=T*P,Ye=T*$;return i[0]=1-(ye+Ke),i[1]=q+Ye,i[2]=W-je,i[3]=0,i[4]=q-Ye,i[5]=1-(H+Ke),i[6]=Ge+Xe,i[7]=0,i[8]=W+je,i[9]=Ge-Xe,i[10]=1-(H+ye),i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i}function getTranslation$1(i,m){return i[0]=m[12],i[1]=m[13],i[2]=m[14],i}function getScaling(i,m){var g=m[0],_=m[1],b=m[2],y=m[4],T=m[5],w=m[6],P=m[8],$=m[9],H=m[10];return i[0]=Math.hypot(g,_,b),i[1]=Math.hypot(y,T,w),i[2]=Math.hypot(P,$,H),i}function getRotation(i,g){var _=new m(3);getScaling(_,g);var b=1/_[0],y=1/_[1],T=1/_[2],w=g[0]*b,P=g[1]*y,$=g[2]*T,H=g[4]*b,q=g[5]*y,W=g[6]*T,ye=g[8]*b,Ge=g[9]*y,Ke=g[10]*T,Xe=w+q+Ke,je=0;return Xe>0?(je=2*Math.sqrt(Xe+1),i[3]=.25*je,i[0]=(W-Ge)/je,i[1]=(ye-$)/je,i[2]=(P-H)/je):w>q&&w>Ke?(je=2*Math.sqrt(1+w-q-Ke),i[3]=(W-Ge)/je,i[0]=.25*je,i[1]=(P+H)/je,i[2]=(ye+$)/je):q>Ke?(je=2*Math.sqrt(1+q-w-Ke),i[3]=(ye-$)/je,i[0]=(P+H)/je,i[1]=.25*je,i[2]=(W+Ge)/je):(je=2*Math.sqrt(1+Ke-w-q),i[3]=(P-H)/je,i[0]=(ye+$)/je,i[1]=(W+Ge)/je,i[2]=.25*je),i}function perspectiveNO(i,m,g,_,b){var y,T=1/Math.tan(m/2);return i[0]=T/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=T,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=b&&b!==1/0?(y=1/(_-b),i[10]=(b+_)*y,i[14]=2*b*_*y):(i[10]=-1,i[14]=-2*_),i}var Ge=perspectiveNO;function orthoNO(i,m,g,_,b,y,T){var w=1/(m-g),P=1/(_-b),$=1/(y-T);return i[0]=-2*w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*P,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=2*$,i[11]=0,i[12]=(m+g)*w,i[13]=(b+_)*P,i[14]=(T+y)*$,i[15]=1,i}var Ke=orthoNO;function orthoZO(i,m,g,_,b,y,T){var w=1/(m-g),P=1/(_-b),$=1/(y-T);return i[0]=-2*w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*P,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=$,i[11]=0,i[12]=(m+g)*w,i[13]=(b+_)*P,i[14]=y*$,i[15]=1,i}function lookAt(m,g,_,b){var y,T,w,P,$,H,q,W,ye,Ge,Ke=g[0],Xe=g[1],je=g[2],Ye=b[0],Ze=b[1],Je=b[2],Qe=_[0],et=_[1],at=_[2];return Math.abs(Ke-Qe)<i&&Math.abs(Xe-et)<i&&Math.abs(je-at)<i?identity$2(m):(q=Ke-Qe,W=Xe-et,ye=je-at,y=Ze*(ye*=Ge=1/Math.hypot(q,W,ye))-Je*(W*=Ge),T=Je*(q*=Ge)-Ye*ye,w=Ye*W-Ze*q,(Ge=Math.hypot(y,T,w))?(y*=Ge=1/Ge,T*=Ge,w*=Ge):(y=0,T=0,w=0),P=W*w-ye*T,$=ye*y-q*w,H=q*T-W*y,(Ge=Math.hypot(P,$,H))?(P*=Ge=1/Ge,$*=Ge,H*=Ge):(P=0,$=0,H=0),m[0]=y,m[1]=P,m[2]=q,m[3]=0,m[4]=T,m[5]=$,m[6]=W,m[7]=0,m[8]=w,m[9]=H,m[10]=ye,m[11]=0,m[12]=-(y*Ke+T*Xe+w*je),m[13]=-(P*Ke+$*Xe+H*je),m[14]=-(q*Ke+W*Xe+ye*je),m[15]=1,m)}function targetTo(i,m,g,_){var b=m[0],y=m[1],T=m[2],w=_[0],P=_[1],$=_[2],H=b-g[0],q=y-g[1],W=T-g[2],ye=H*H+q*q+W*W;ye>0&&(H*=ye=1/Math.sqrt(ye),q*=ye,W*=ye);var Ge=P*W-$*q,Ke=$*H-w*W,Xe=w*q-P*H;return(ye=Ge*Ge+Ke*Ke+Xe*Xe)>0&&(Ge*=ye=1/Math.sqrt(ye),Ke*=ye,Xe*=ye),i[0]=Ge,i[1]=Ke,i[2]=Xe,i[3]=0,i[4]=q*Xe-W*Ke,i[5]=W*Ge-H*Xe,i[6]=H*Ke-q*Ge,i[7]=0,i[8]=H,i[9]=q,i[10]=W,i[11]=0,i[12]=b,i[13]=y,i[14]=T,i[15]=1,i}function subtract$3(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i[9]=m[9]-g[9],i[10]=m[10]-g[10],i[11]=m[11]-g[11],i[12]=m[12]-g[12],i[13]=m[13]-g[13],i[14]=m[14]-g[14],i[15]=m[15]-g[15],i}var Xe=multiply$5,je=subtract$3,Ye=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i[9]=m[9]+g[9],i[10]=m[10]+g[10],i[11]=m[11]+g[11],i[12]=m[12]+g[12],i[13]=m[13]+g[13],i[14]=m[14]+g[14],i[15]=m[15]+g[15],i},adjoint:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],je=m[15];return i[0]=w*(W*je-ye*Xe)-q*(P*je-$*Xe)+Ke*(P*ye-$*W),i[1]=-(_*(W*je-ye*Xe)-q*(b*je-y*Xe)+Ke*(b*ye-y*W)),i[2]=_*(P*je-$*Xe)-w*(b*je-y*Xe)+Ke*(b*$-y*P),i[3]=-(_*(P*ye-$*W)-w*(b*ye-y*W)+q*(b*$-y*P)),i[4]=-(T*(W*je-ye*Xe)-H*(P*je-$*Xe)+Ge*(P*ye-$*W)),i[5]=g*(W*je-ye*Xe)-H*(b*je-y*Xe)+Ge*(b*ye-y*W),i[6]=-(g*(P*je-$*Xe)-T*(b*je-y*Xe)+Ge*(b*$-y*P)),i[7]=g*(P*ye-$*W)-T*(b*ye-y*W)+H*(b*$-y*P),i[8]=T*(q*je-ye*Ke)-H*(w*je-$*Ke)+Ge*(w*ye-$*q),i[9]=-(g*(q*je-ye*Ke)-H*(_*je-y*Ke)+Ge*(_*ye-y*q)),i[10]=g*(w*je-$*Ke)-T*(_*je-y*Ke)+Ge*(_*$-y*w),i[11]=-(g*(w*ye-$*q)-T*(_*ye-y*q)+H*(_*$-y*w)),i[12]=-(T*(q*Xe-W*Ke)-H*(w*Xe-P*Ke)+Ge*(w*W-P*q)),i[13]=g*(q*Xe-W*Ke)-H*(_*Xe-b*Ke)+Ge*(_*W-b*q),i[14]=-(g*(w*Xe-P*Ke)-T*(_*Xe-b*Ke)+Ge*(_*P-b*w)),i[15]=g*(w*W-P*q)-T*(_*W-b*q)+H*(_*P-b*w),i},clone:clone$5,copy:copy$5,create:create$5,determinant:function(i){var m=i[0],g=i[1],_=i[2],b=i[3],y=i[4],T=i[5],w=i[6],P=i[7],$=i[8],H=i[9],q=i[10],W=i[11],ye=i[12],Ge=i[13],Ke=i[14],Xe=i[15];return(m*T-g*y)*(q*Xe-W*Ke)-(m*w-_*y)*(H*Xe-W*Ge)+(m*P-b*y)*(H*Ke-q*Ge)+(g*w-_*T)*($*Xe-W*ye)-(g*P-b*T)*($*Ke-q*ye)+(_*P-b*w)*($*Ge-H*ye)},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=m[9],ye=m[10],Ge=m[11],Ke=m[12],Xe=m[13],je=m[14],Ye=m[15],Ze=g[0],Je=g[1],Qe=g[2],et=g[3],at=g[4],ht=g[5],ft=g[6],gt=g[7],xt=g[8],vt=g[9],bt=g[10],yt=g[11],Tt=g[12],St=g[13],wt=g[14],Mt=g[15];return Math.abs(_-Ze)<=i*Math.max(1,Math.abs(_),Math.abs(Ze))&&Math.abs(b-Je)<=i*Math.max(1,Math.abs(b),Math.abs(Je))&&Math.abs(y-Qe)<=i*Math.max(1,Math.abs(y),Math.abs(Qe))&&Math.abs(T-et)<=i*Math.max(1,Math.abs(T),Math.abs(et))&&Math.abs(w-at)<=i*Math.max(1,Math.abs(w),Math.abs(at))&&Math.abs(P-ht)<=i*Math.max(1,Math.abs(P),Math.abs(ht))&&Math.abs($-ft)<=i*Math.max(1,Math.abs($),Math.abs(ft))&&Math.abs(H-gt)<=i*Math.max(1,Math.abs(H),Math.abs(gt))&&Math.abs(q-xt)<=i*Math.max(1,Math.abs(q),Math.abs(xt))&&Math.abs(W-vt)<=i*Math.max(1,Math.abs(W),Math.abs(vt))&&Math.abs(ye-bt)<=i*Math.max(1,Math.abs(ye),Math.abs(bt))&&Math.abs(Ge-yt)<=i*Math.max(1,Math.abs(Ge),Math.abs(yt))&&Math.abs(Ke-Tt)<=i*Math.max(1,Math.abs(Ke),Math.abs(Tt))&&Math.abs(Xe-St)<=i*Math.max(1,Math.abs(Xe),Math.abs(St))&&Math.abs(je-wt)<=i*Math.max(1,Math.abs(je),Math.abs(wt))&&Math.abs(Ye-Mt)<=i*Math.max(1,Math.abs(Ye),Math.abs(Mt))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]&&i[9]===m[9]&&i[10]===m[10]&&i[11]===m[11]&&i[12]===m[12]&&i[13]===m[13]&&i[14]===m[14]&&i[15]===m[15]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11],i[12],i[13],i[14],i[15])},fromQuat:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g+g,w=_+_,P=b+b,$=g*T,H=_*T,q=_*w,W=b*T,ye=b*w,Ge=b*P,Ke=y*T,Xe=y*w,je=y*P;return i[0]=1-q-Ge,i[1]=H+je,i[2]=W-Xe,i[3]=0,i[4]=H-je,i[5]=1-$-Ge,i[6]=ye+Ke,i[7]=0,i[8]=W+Xe,i[9]=ye-Ke,i[10]=1-$-q,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromQuat2:function(i,g){var _=new m(3),b=-g[0],y=-g[1],T=-g[2],w=g[3],P=g[4],$=g[5],H=g[6],q=g[7],W=b*b+y*y+T*T+w*w;return W>0?(_[0]=2*(P*w+q*b+$*T-H*y)/W,_[1]=2*($*w+q*y+H*b-P*T)/W,_[2]=2*(H*w+q*T+P*y-$*b)/W):(_[0]=2*(P*w+q*b+$*T-H*y),_[1]=2*($*w+q*y+H*b-P*T),_[2]=2*(H*w+q*T+P*y-$*b)),fromRotationTranslation$1(i,g,_),i},fromRotation:function(m,g,_){var b,y,T,w=_[0],P=_[1],$=_[2],H=Math.hypot(w,P,$);return H<i?null:(w*=H=1/H,P*=H,$*=H,b=Math.sin(g),T=1-(y=Math.cos(g)),m[0]=w*w*T+y,m[1]=P*w*T+$*b,m[2]=$*w*T-P*b,m[3]=0,m[4]=w*P*T-$*b,m[5]=P*P*T+y,m[6]=$*P*T+w*b,m[7]=0,m[8]=w*$*T+P*b,m[9]=P*$*T-w*b,m[10]=$*$*T+y,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1,m)},fromRotationTranslation:fromRotationTranslation$1,fromRotationTranslationScale:function(i,m,g,_){var b=m[0],y=m[1],T=m[2],w=m[3],P=b+b,$=y+y,H=T+T,q=b*P,W=b*$,ye=b*H,Ge=y*$,Ke=y*H,Xe=T*H,je=w*P,Ye=w*$,Ze=w*H,Je=_[0],Qe=_[1],et=_[2];return i[0]=(1-(Ge+Xe))*Je,i[1]=(W+Ze)*Je,i[2]=(ye-Ye)*Je,i[3]=0,i[4]=(W-Ze)*Qe,i[5]=(1-(q+Xe))*Qe,i[6]=(Ke+je)*Qe,i[7]=0,i[8]=(ye+Ye)*et,i[9]=(Ke-je)*et,i[10]=(1-(q+Ge))*et,i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i},fromRotationTranslationScaleOrigin:function(i,m,g,_,b){var y=m[0],T=m[1],w=m[2],P=m[3],$=y+y,H=T+T,q=w+w,W=y*$,ye=y*H,Ge=y*q,Ke=T*H,Xe=T*q,je=w*q,Ye=P*$,Ze=P*H,Je=P*q,Qe=_[0],et=_[1],at=_[2],ht=b[0],ft=b[1],gt=b[2],xt=(1-(Ke+je))*Qe,vt=(ye+Je)*Qe,bt=(Ge-Ze)*Qe,yt=(ye-Je)*et,Tt=(1-(W+je))*et,St=(Xe+Ye)*et,wt=(Ge+Ze)*at,Mt=(Xe-Ye)*at,Rt=(1-(W+Ke))*at;return i[0]=xt,i[1]=vt,i[2]=bt,i[3]=0,i[4]=yt,i[5]=Tt,i[6]=St,i[7]=0,i[8]=wt,i[9]=Mt,i[10]=Rt,i[11]=0,i[12]=g[0]+ht-(xt*ht+yt*ft+wt*gt),i[13]=g[1]+ft-(vt*ht+Tt*ft+Mt*gt),i[14]=g[2]+gt-(bt*ht+St*ft+Rt*gt),i[15]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=m[1],i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=m[2],i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=m[0],i[13]=m[1],i[14]=m[2],i[15]=1,i},fromValues:fromValues$5,fromXRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=_,i[6]=g,i[7]=0,i[8]=0,i[9]=-g,i[10]=_,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromYRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=0,i[2]=-g,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=g,i[9]=0,i[10]=_,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromZRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=0,i[3]=0,i[4]=-g,i[5]=_,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},frustum:function(i,m,g,_,b,y,T){var w=1/(g-m),P=1/(b-_),$=1/(y-T);return i[0]=2*y*w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*y*P,i[6]=0,i[7]=0,i[8]=(g+m)*w,i[9]=(b+_)*P,i[10]=(T+y)*$,i[11]=-1,i[12]=0,i[13]=0,i[14]=T*y*2*$,i[15]=0,i},getRotation:getRotation,getScaling:getScaling,getTranslation:getTranslation$1,identity:identity$2,invert:invert$2,lookAt:lookAt,mul:Xe,multiply:multiply$5,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i[9]=m[9]*g,i[10]=m[10]*g,i[11]=m[11]*g,i[12]=m[12]*g,i[13]=m[13]*g,i[14]=m[14]*g,i[15]=m[15]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i[4]=m[4]+g[4]*_,i[5]=m[5]+g[5]*_,i[6]=m[6]+g[6]*_,i[7]=m[7]+g[7]*_,i[8]=m[8]+g[8]*_,i[9]=m[9]+g[9]*_,i[10]=m[10]+g[10]*_,i[11]=m[11]+g[11]*_,i[12]=m[12]+g[12]*_,i[13]=m[13]+g[13]*_,i[14]=m[14]+g[14]*_,i[15]=m[15]+g[15]*_,i},ortho:Ke,orthoNO:orthoNO,orthoZO:orthoZO,perspective:Ge,perspectiveFromFieldOfView:function(i,m,g,_){var b=Math.tan(m.upDegrees*Math.PI/180),y=Math.tan(m.downDegrees*Math.PI/180),T=Math.tan(m.leftDegrees*Math.PI/180),w=Math.tan(m.rightDegrees*Math.PI/180),P=2/(T+w),$=2/(b+y);return i[0]=P,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=$,i[6]=0,i[7]=0,i[8]=-(T-w)*P*.5,i[9]=(b-y)*$*.5,i[10]=_/(g-_),i[11]=-1,i[12]=0,i[13]=0,i[14]=_*g/(g-_),i[15]=0,i},perspectiveNO:perspectiveNO,perspectiveZO:function(i,m,g,_,b){var y,T=1/Math.tan(m/2);return i[0]=T/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=T,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=b&&b!==1/0?(y=1/(_-b),i[10]=b*y,i[14]=b*_*y):(i[10]=-1,i[14]=-_),i},rotate:function(m,g,_,b){var y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,je,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt=b[0],yt=b[1],Tt=b[2],St=Math.hypot(bt,yt,Tt);return St<i?null:(bt*=St=1/St,yt*=St,Tt*=St,y=Math.sin(_),w=1-(T=Math.cos(_)),P=g[0],$=g[1],H=g[2],q=g[3],W=g[4],ye=g[5],Ge=g[6],Ke=g[7],Xe=g[8],je=g[9],Ye=g[10],Ze=g[11],Je=bt*bt*w+T,Qe=yt*bt*w+Tt*y,et=Tt*bt*w-yt*y,at=bt*yt*w-Tt*y,ht=yt*yt*w+T,ft=Tt*yt*w+bt*y,gt=bt*Tt*w+yt*y,xt=yt*Tt*w-bt*y,vt=Tt*Tt*w+T,m[0]=P*Je+W*Qe+Xe*et,m[1]=$*Je+ye*Qe+je*et,m[2]=H*Je+Ge*Qe+Ye*et,m[3]=q*Je+Ke*Qe+Ze*et,m[4]=P*at+W*ht+Xe*ft,m[5]=$*at+ye*ht+je*ft,m[6]=H*at+Ge*ht+Ye*ft,m[7]=q*at+Ke*ht+Ze*ft,m[8]=P*gt+W*xt+Xe*vt,m[9]=$*gt+ye*xt+je*vt,m[10]=H*gt+Ge*xt+Ye*vt,m[11]=q*gt+Ke*xt+Ze*vt,g!==m&&(m[12]=g[12],m[13]=g[13],m[14]=g[14],m[15]=g[15]),m)},rotateX:rotateX$3,rotateY:rotateY$3,rotateZ:rotateZ$3,scale:scale$5,set:function(i,m,g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i[6]=w,i[7]=P,i[8]=$,i[9]=H,i[10]=q,i[11]=W,i[12]=ye,i[13]=Ge,i[14]=Ke,i[15]=Xe,i},str:function(i){return"mat4("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+","+i[9]+","+i[10]+","+i[11]+","+i[12]+","+i[13]+","+i[14]+","+i[15]+")"},sub:je,subtract:subtract$3,targetTo:targetTo,translate:translate$1,transpose:function(i,m){if(i===m){var g=m[1],_=m[2],b=m[3],y=m[6],T=m[7],w=m[11];i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=g,i[6]=m[9],i[7]=m[13],i[8]=_,i[9]=y,i[11]=m[14],i[12]=b,i[13]=T,i[14]=w}else i[0]=m[0],i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=m[1],i[5]=m[5],i[6]=m[9],i[7]=m[13],i[8]=m[2],i[9]=m[6],i[10]=m[10],i[11]=m[14],i[12]=m[3],i[13]=m[7],i[14]=m[11],i[15]=m[15];return i}});function create$4(){var i=new m(3);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i}function length$4(i){var m=i[0],g=i[1],_=i[2];return Math.hypot(m,g,_)}function fromValues$4(i,g,_){var b=new m(3);return b[0]=i,b[1]=g,b[2]=_,b}function set$4(i,m,g,_){return i[0]=m,i[1]=g,i[2]=_,i}function subtract$2(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i}function multiply$4(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i[2]=m[2]*g[2],i}function divide$2(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i[2]=m[2]/g[2],i}function distance$2(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2];return Math.hypot(g,_,b)}function squaredDistance$2(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2];return g*g+_*_+b*b}function squaredLength$4(i){var m=i[0],g=i[1],_=i[2];return m*m+g*g+_*_}function normalize$4(i,m){var g=m[0],_=m[1],b=m[2],y=g*g+_*_+b*b;return y>0&&(y=1/Math.sqrt(y)),i[0]=m[0]*y,i[1]=m[1]*y,i[2]=m[2]*y,i}function dot$4(i,m){return i[0]*m[0]+i[1]*m[1]+i[2]*m[2]}function cross$2(i,m,g){var _=m[0],b=m[1],y=m[2],T=g[0],w=g[1],P=g[2];return i[0]=b*P-y*w,i[1]=y*T-_*P,i[2]=_*w-b*T,i}function lerp$4(i,m,g,_){var b=m[0],y=m[1],T=m[2];return i[0]=b+_*(g[0]-b),i[1]=y+_*(g[1]-y),i[2]=T+_*(g[2]-T),i}var Ze,Je=subtract$2,Qe=multiply$4,et=divide$2,at=distance$2,ht=squaredDistance$2,ft=length$4,gt=squaredLength$4,xt=(Ze=create$4(),function(i,m,g,_,b,y){var T,w;for(m||(m=3),g||(g=0),w=_?Math.min(_*m+g,i.length):i.length,T=g;T<w;T+=m)Ze[0]=i[T],Ze[1]=i[T+1],Ze[2]=i[T+2],b(Ze,Ze,y),i[T]=Ze[0],i[T+1]=Ze[1],i[T+2]=Ze[2];return i}),vt=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i},angle:function(i,m){var g=i[0],_=i[1],b=i[2],y=m[0],T=m[1],w=m[2],P=Math.sqrt(g*g+_*_+b*b)*Math.sqrt(y*y+T*T+w*w),$=P&&dot$4(i,m)/P;return Math.acos(Math.min(Math.max($,-1),1))},bezier:function(i,m,g,_,b,y){var T=1-y,w=T*T,P=y*y,$=w*T,H=3*y*w,q=3*P*T,W=P*y;return i[0]=m[0]*$+g[0]*H+_[0]*q+b[0]*W,i[1]=m[1]*$+g[1]*H+_[1]*q+b[1]*W,i[2]=m[2]*$+g[2]*H+_[2]*q+b[2]*W,i},ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i[2]=Math.ceil(m[2]),i},clone:function(i){var g=new m(3);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i},create:create$4,cross:cross$2,dist:at,distance:distance$2,div:et,divide:divide$2,dot:dot$4,equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=g[0],w=g[1],P=g[2];return Math.abs(_-T)<=i*Math.max(1,Math.abs(_),Math.abs(T))&&Math.abs(b-w)<=i*Math.max(1,Math.abs(b),Math.abs(w))&&Math.abs(y-P)<=i*Math.max(1,Math.abs(y),Math.abs(P))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]},floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i[2]=Math.floor(m[2]),i},forEach:xt,fromValues:fromValues$4,hermite:function(i,m,g,_,b,y){var T=y*y,w=T*(2*y-3)+1,P=T*(y-2)+y,$=T*(y-1),H=T*(3-2*y);return i[0]=m[0]*w+g[0]*P+_[0]*$+b[0]*H,i[1]=m[1]*w+g[1]*P+_[1]*$+b[1]*H,i[2]=m[2]*w+g[2]*P+_[2]*$+b[2]*H,i},inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i[2]=1/m[2],i},len:ft,length:length$4,lerp:lerp$4,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i[2]=Math.max(m[2],g[2]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i[2]=Math.min(m[2],g[2]),i},mul:Qe,multiply:multiply$4,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i},normalize:normalize$4,random:function(i,m){m=m||1;var _=2*g()*Math.PI,b=2*g()-1,y=Math.sqrt(1-b*b)*m;return i[0]=Math.cos(_)*y,i[1]=Math.sin(_)*y,i[2]=b*m,i},rotateX:function(i,m,g,_){var b=[],y=[];return b[0]=m[0]-g[0],b[1]=m[1]-g[1],b[2]=m[2]-g[2],y[0]=b[0],y[1]=b[1]*Math.cos(_)-b[2]*Math.sin(_),y[2]=b[1]*Math.sin(_)+b[2]*Math.cos(_),i[0]=y[0]+g[0],i[1]=y[1]+g[1],i[2]=y[2]+g[2],i},rotateY:function(i,m,g,_){var b=[],y=[];return b[0]=m[0]-g[0],b[1]=m[1]-g[1],b[2]=m[2]-g[2],y[0]=b[2]*Math.sin(_)+b[0]*Math.cos(_),y[1]=b[1],y[2]=b[2]*Math.cos(_)-b[0]*Math.sin(_),i[0]=y[0]+g[0],i[1]=y[1]+g[1],i[2]=y[2]+g[2],i},rotateZ:function(i,m,g,_){var b=[],y=[];return b[0]=m[0]-g[0],b[1]=m[1]-g[1],b[2]=m[2]-g[2],y[0]=b[0]*Math.cos(_)-b[1]*Math.sin(_),y[1]=b[0]*Math.sin(_)+b[1]*Math.cos(_),y[2]=b[2],i[0]=y[0]+g[0],i[1]=y[1]+g[1],i[2]=y[2]+g[2],i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i[2]=Math.round(m[2]),i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i},scaleAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i},set:set$4,sqrDist:ht,sqrLen:gt,squaredDistance:squaredDistance$2,squaredLength:squaredLength$4,str:function(i){return"vec3("+i[0]+","+i[1]+","+i[2]+")"},sub:Je,subtract:subtract$2,transformMat3:function(i,m,g){var _=m[0],b=m[1],y=m[2];return i[0]=_*g[0]+b*g[3]+y*g[6],i[1]=_*g[1]+b*g[4]+y*g[7],i[2]=_*g[2]+b*g[5]+y*g[8],i},transformMat4:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=g[3]*_+g[7]*b+g[11]*y+g[15];return T=T||1,i[0]=(g[0]*_+g[4]*b+g[8]*y+g[12])/T,i[1]=(g[1]*_+g[5]*b+g[9]*y+g[13])/T,i[2]=(g[2]*_+g[6]*b+g[10]*y+g[14])/T,i},transformQuat:function(i,m,g){var _=g[0],b=g[1],y=g[2],T=g[3],w=m[0],P=m[1],$=m[2],H=b*$-y*P,q=y*w-_*$,W=_*P-b*w,ye=b*W-y*q,Ge=y*H-_*W,Ke=_*q-b*H,Xe=2*T;return H*=Xe,q*=Xe,W*=Xe,ye*=2,Ge*=2,Ke*=2,i[0]=w+H+ye,i[1]=P+q+Ge,i[2]=$+W+Ke,i},zero:function(i){return i[0]=0,i[1]=0,i[2]=0,i}});function create$3(){var i=new m(4);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0,i[3]=0),i}function clone$3(i){var g=new m(4);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g}function fromValues$3(i,g,_,b){var y=new m(4);return y[0]=i,y[1]=g,y[2]=_,y[3]=b,y}function copy$3(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i}function set$3(i,m,g,_,b){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i}function add$3(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i}function subtract$1(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i}function multiply$3(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i[2]=m[2]*g[2],i[3]=m[3]*g[3],i}function divide$1(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i[2]=m[2]/g[2],i[3]=m[3]/g[3],i}function scale$3(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i}function distance$1(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2],y=m[3]-i[3];return Math.hypot(g,_,b,y)}function squaredDistance$1(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2],y=m[3]-i[3];return g*g+_*_+b*b+y*y}function length$3(i){var m=i[0],g=i[1],_=i[2],b=i[3];return Math.hypot(m,g,_,b)}function squaredLength$3(i){var m=i[0],g=i[1],_=i[2],b=i[3];return m*m+g*g+_*_+b*b}function normalize$3(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g*g+_*_+b*b+y*y;return T>0&&(T=1/Math.sqrt(T)),i[0]=g*T,i[1]=_*T,i[2]=b*T,i[3]=y*T,i}function dot$3(i,m){return i[0]*m[0]+i[1]*m[1]+i[2]*m[2]+i[3]*m[3]}function lerp$3(i,m,g,_){var b=m[0],y=m[1],T=m[2],w=m[3];return i[0]=b+_*(g[0]-b),i[1]=y+_*(g[1]-y),i[2]=T+_*(g[2]-T),i[3]=w+_*(g[3]-w),i}function exactEquals$3(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]}function equals$3(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return Math.abs(_-w)<=i*Math.max(1,Math.abs(_),Math.abs(w))&&Math.abs(b-P)<=i*Math.max(1,Math.abs(b),Math.abs(P))&&Math.abs(y-$)<=i*Math.max(1,Math.abs(y),Math.abs($))&&Math.abs(T-H)<=i*Math.max(1,Math.abs(T),Math.abs(H))}var bt=subtract$1,yt=multiply$3,Tt=divide$1,St=distance$1,wt=squaredDistance$1,Mt=length$3,Rt=squaredLength$3,Pt=function(){var i=create$3();return function(m,g,_,b,y,T){var w,P;for(g||(g=4),_||(_=0),P=b?Math.min(b*g+_,m.length):m.length,w=_;w<P;w+=g)i[0]=m[w],i[1]=m[w+1],i[2]=m[w+2],i[3]=m[w+3],y(i,i,T),m[w]=i[0],m[w+1]=i[1],m[w+2]=i[2],m[w+3]=i[3];return m}}(),Ct=Object.freeze({__proto__:null,add:add$3,ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i[2]=Math.ceil(m[2]),i[3]=Math.ceil(m[3]),i},clone:clone$3,copy:copy$3,create:create$3,cross:function(i,m,g,_){var b=g[0]*_[1]-g[1]*_[0],y=g[0]*_[2]-g[2]*_[0],T=g[0]*_[3]-g[3]*_[0],w=g[1]*_[2]-g[2]*_[1],P=g[1]*_[3]-g[3]*_[1],$=g[2]*_[3]-g[3]*_[2],H=m[0],q=m[1],W=m[2],ye=m[3];return i[0]=q*$-W*P+ye*w,i[1]=-H*$+W*T-ye*y,i[2]=H*P-q*T+ye*b,i[3]=-H*w+q*y-W*b,i},dist:St,distance:distance$1,div:Tt,divide:divide$1,dot:dot$3,equals:equals$3,exactEquals:exactEquals$3,floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i[2]=Math.floor(m[2]),i[3]=Math.floor(m[3]),i},forEach:Pt,fromValues:fromValues$3,inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i[2]=1/m[2],i[3]=1/m[3],i},len:Mt,length:length$3,lerp:lerp$3,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i[2]=Math.max(m[2],g[2]),i[3]=Math.max(m[3],g[3]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i[2]=Math.min(m[2],g[2]),i[3]=Math.min(m[3],g[3]),i},mul:yt,multiply:multiply$3,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=-m[3],i},normalize:normalize$3,random:function(i,m){var _,b,y,T,w,P;m=m||1;do{w=(_=2*g()-1)*_+(b=2*g()-1)*b}while(w>=1);do{P=(y=2*g()-1)*y+(T=2*g()-1)*T}while(P>=1);var $=Math.sqrt((1-w)/P);return i[0]=m*_,i[1]=m*b,i[2]=m*y*$,i[3]=m*T*$,i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i[2]=Math.round(m[2]),i[3]=Math.round(m[3]),i},scale:scale$3,scaleAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i},set:set$3,sqrDist:wt,sqrLen:Rt,squaredDistance:squaredDistance$1,squaredLength:squaredLength$3,str:function(i){return"vec4("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"},sub:bt,subtract:subtract$1,transformMat4:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3];return i[0]=g[0]*_+g[4]*b+g[8]*y+g[12]*T,i[1]=g[1]*_+g[5]*b+g[9]*y+g[13]*T,i[2]=g[2]*_+g[6]*b+g[10]*y+g[14]*T,i[3]=g[3]*_+g[7]*b+g[11]*y+g[15]*T,i},transformQuat:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=g[0],w=g[1],P=g[2],$=g[3],H=$*_+w*y-P*b,q=$*b+P*_-T*y,W=$*y+T*b-w*_,ye=-T*_-w*b-P*y;return i[0]=H*$+ye*-T+q*-P-W*-w,i[1]=q*$+ye*-w+W*-T-H*-P,i[2]=W*$+ye*-P+H*-w-q*-T,i[3]=m[3],i},zero:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=0,i}});function create$2(){var i=new m(4);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i[3]=1,i}function setAxisAngle(i,m,g){g*=.5;var _=Math.sin(g);return i[0]=_*m[0],i[1]=_*m[1],i[2]=_*m[2],i[3]=Math.cos(g),i}function multiply$2(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return i[0]=_*H+T*w+b*$-y*P,i[1]=b*H+T*P+y*w-_*$,i[2]=y*H+T*$+_*P-b*w,i[3]=T*H-_*w-b*P-y*$,i}function rotateX$1(i,m,g){g*=.5;var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P+T*w,i[1]=b*P+y*w,i[2]=y*P-b*w,i[3]=T*P-_*w,i}function rotateY$1(i,m,g){g*=.5;var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P-y*w,i[1]=b*P+T*w,i[2]=y*P+_*w,i[3]=T*P-b*w,i}function rotateZ$1(i,m,g){g*=.5;var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P+b*w,i[1]=b*P-_*w,i[2]=y*P+T*w,i[3]=T*P-y*w,i}function exp(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=Math.sqrt(g*g+_*_+b*b),w=Math.exp(y),P=T>0?w*Math.sin(T)/T:0;return i[0]=g*P,i[1]=_*P,i[2]=b*P,i[3]=w*Math.cos(T),i}function ln(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=Math.sqrt(g*g+_*_+b*b),w=T>0?Math.atan2(T,y)/T:0;return i[0]=g*w,i[1]=_*w,i[2]=b*w,i[3]=.5*Math.log(g*g+_*_+b*b+y*y),i}function slerp(m,g,_,b){var y,T,w,P,$,H=g[0],q=g[1],W=g[2],ye=g[3],Ge=_[0],Ke=_[1],Xe=_[2],je=_[3];return(T=H*Ge+q*Ke+W*Xe+ye*je)<0&&(T=-T,Ge=-Ge,Ke=-Ke,Xe=-Xe,je=-je),1-T>i?(y=Math.acos(T),w=Math.sin(y),P=Math.sin((1-b)*y)/w,$=Math.sin(b*y)/w):(P=1-b,$=b),m[0]=P*H+$*Ge,m[1]=P*q+$*Ke,m[2]=P*W+$*Xe,m[3]=P*ye+$*je,m}function fromMat3(i,m){var g,_=m[0]+m[4]+m[8];if(_>0)g=Math.sqrt(_+1),i[3]=.5*g,g=.5/g,i[0]=(m[5]-m[7])*g,i[1]=(m[6]-m[2])*g,i[2]=(m[1]-m[3])*g;else{var b=0;m[4]>m[0]&&(b=1),m[8]>m[3*b+b]&&(b=2);var y=(b+1)%3,T=(b+2)%3;g=Math.sqrt(m[3*b+b]-m[3*y+y]-m[3*T+T]+1),i[b]=.5*g,g=.5/g,i[3]=(m[3*y+T]-m[3*T+y])*g,i[y]=(m[3*y+b]+m[3*b+y])*g,i[T]=(m[3*T+b]+m[3*b+T])*g}return i}var It,Et,Lt,Bt,Ut=clone$3,Dt=fromValues$3,At=copy$3,kt=set$3,Ot=add$3,Nt=multiply$2,Ft=scale$3,Gt=dot$3,Vt=lerp$3,$t=length$3,Ht=$t,zt=squaredLength$3,Kt=zt,qt=normalize$3,Wt=exactEquals$3,Xt=equals$3,jt=(It=create$4(),Et=fromValues$4(1,0,0),Lt=fromValues$4(0,1,0),function(i,m,g){var _=dot$4(m,g);return _<-.999999?(cross$2(It,Et,m),ft(It)<1e-6&&cross$2(It,Lt,m),normalize$4(It,It),setAxisAngle(i,It,Math.PI),i):_>.999999?(i[0]=0,i[1]=0,i[2]=0,i[3]=1,i):(cross$2(It,m,g),i[0]=It[0],i[1]=It[1],i[2]=It[2],i[3]=1+_,qt(i,i))}),Yt=function(){var i=create$2(),m=create$2();return function(g,_,b,y,T,w){return slerp(i,_,T,w),slerp(m,b,y,w),slerp(g,i,m,2*w*(1-w)),g}}(),Zt=(Bt=create$6(),function(i,m,g,_){return Bt[0]=g[0],Bt[3]=g[1],Bt[6]=g[2],Bt[1]=_[0],Bt[4]=_[1],Bt[7]=_[2],Bt[2]=-m[0],Bt[5]=-m[1],Bt[8]=-m[2],qt(i,fromMat3(i,Bt))}),Jt=Object.freeze({__proto__:null,add:Ot,calculateW:function(i,m){var g=m[0],_=m[1],b=m[2];return i[0]=g,i[1]=_,i[2]=b,i[3]=Math.sqrt(Math.abs(1-g*g-_*_-b*b)),i},clone:Ut,conjugate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=m[3],i},copy:At,create:create$2,dot:Gt,equals:Xt,exactEquals:Wt,exp:exp,fromEuler:function(i,m,g,_){var b=.5*Math.PI/180;m*=b,g*=b,_*=b;var y=Math.sin(m),T=Math.cos(m),w=Math.sin(g),P=Math.cos(g),$=Math.sin(_),H=Math.cos(_);return i[0]=y*P*H-T*w*$,i[1]=T*w*H+y*P*$,i[2]=T*P*$-y*w*H,i[3]=T*P*H+y*w*$,i},fromMat3:fromMat3,fromValues:Dt,getAngle:function(i,m){var g=Gt(i,m);return Math.acos(2*g*g-1)},getAxisAngle:function(m,g){var _=2*Math.acos(g[3]),b=Math.sin(_/2);return b>i?(m[0]=g[0]/b,m[1]=g[1]/b,m[2]=g[2]/b):(m[0]=1,m[1]=0,m[2]=0),_},identity:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g*g+_*_+b*b+y*y,w=T?1/T:0;return i[0]=-g*w,i[1]=-_*w,i[2]=-b*w,i[3]=y*w,i},len:Ht,length:$t,lerp:Vt,ln:ln,mul:Nt,multiply:multiply$2,normalize:qt,pow:function(i,m,g){return ln(i,m),Ft(i,i,g),exp(i,i),i},random:function(i){var m=g(),_=g(),b=g(),y=Math.sqrt(1-m),T=Math.sqrt(m);return i[0]=y*Math.sin(2*Math.PI*_),i[1]=y*Math.cos(2*Math.PI*_),i[2]=T*Math.sin(2*Math.PI*b),i[3]=T*Math.cos(2*Math.PI*b),i},rotateX:rotateX$1,rotateY:rotateY$1,rotateZ:rotateZ$1,rotationTo:jt,scale:Ft,set:kt,setAxes:Zt,setAxisAngle:setAxisAngle,slerp:slerp,sqlerp:Yt,sqrLen:Kt,squaredLength:zt,str:function(i){return"quat("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"}});function fromRotationTranslation(i,m,g){var _=.5*g[0],b=.5*g[1],y=.5*g[2],T=m[0],w=m[1],P=m[2],$=m[3];return i[0]=T,i[1]=w,i[2]=P,i[3]=$,i[4]=_*$+b*P-y*w,i[5]=b*$+y*T-_*P,i[6]=y*$+_*w-b*T,i[7]=-_*T-b*w-y*P,i}function copy$1(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i}var Qt=At;var er=At;function multiply$1(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[4],P=g[5],$=g[6],H=g[7],q=m[4],W=m[5],ye=m[6],Ge=m[7],Ke=g[0],Xe=g[1],je=g[2],Ye=g[3];return i[0]=_*Ye+T*Ke+b*je-y*Xe,i[1]=b*Ye+T*Xe+y*Ke-_*je,i[2]=y*Ye+T*je+_*Xe-b*Ke,i[3]=T*Ye-_*Ke-b*Xe-y*je,i[4]=_*H+T*w+b*$-y*P+q*Ye+Ge*Ke+W*je-ye*Xe,i[5]=b*H+T*P+y*w-_*$+W*Ye+Ge*Xe+ye*Ke-q*je,i[6]=y*H+T*$+_*P-b*w+ye*Ye+Ge*je+q*Xe-W*Ke,i[7]=T*H-_*w-b*P-y*$+Ge*Ye-q*Ke-W*Xe-ye*je,i}var tr=multiply$1;var rr=Gt;var nr=$t,ir=nr,ar=zt,sr=ar;var or=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i},clone:function(i){var g=new m(8);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g},conjugate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=m[3],i[4]=-m[4],i[5]=-m[5],i[6]=-m[6],i[7]=m[7],i},copy:copy$1,create:function(){var i=new m(8);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0,i[4]=0,i[5]=0,i[6]=0,i[7]=0),i[3]=1,i},dot:rr,equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=g[0],W=g[1],ye=g[2],Ge=g[3],Ke=g[4],Xe=g[5],je=g[6],Ye=g[7];return Math.abs(_-q)<=i*Math.max(1,Math.abs(_),Math.abs(q))&&Math.abs(b-W)<=i*Math.max(1,Math.abs(b),Math.abs(W))&&Math.abs(y-ye)<=i*Math.max(1,Math.abs(y),Math.abs(ye))&&Math.abs(T-Ge)<=i*Math.max(1,Math.abs(T),Math.abs(Ge))&&Math.abs(w-Ke)<=i*Math.max(1,Math.abs(w),Math.abs(Ke))&&Math.abs(P-Xe)<=i*Math.max(1,Math.abs(P),Math.abs(Xe))&&Math.abs($-je)<=i*Math.max(1,Math.abs($),Math.abs(je))&&Math.abs(H-Ye)<=i*Math.max(1,Math.abs(H),Math.abs(Ye))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]},fromMat4:function(i,g){var _=create$2();getRotation(_,g);var b=new m(3);return getTranslation$1(b,g),fromRotationTranslation(i,_,b),i},fromRotation:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=0,i[5]=0,i[6]=0,i[7]=0,i},fromRotationTranslation:fromRotationTranslation,fromRotationTranslationValues:function(i,g,_,b,y,T,w){var P=new m(8);P[0]=i,P[1]=g,P[2]=_,P[3]=b;var $=.5*y,H=.5*T,q=.5*w;return P[4]=$*b+H*_-q*g,P[5]=H*b+q*i-$*_,P[6]=q*b+$*g-H*i,P[7]=-$*i-H*g-q*_,P},fromTranslation:function(i,m){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i[4]=.5*m[0],i[5]=.5*m[1],i[6]=.5*m[2],i[7]=0,i},fromValues:function(i,g,_,b,y,T,w,P){var $=new m(8);return $[0]=i,$[1]=g,$[2]=_,$[3]=b,$[4]=y,$[5]=T,$[6]=w,$[7]=P,$},getDual:function(i,m){return i[0]=m[4],i[1]=m[5],i[2]=m[6],i[3]=m[7],i},getReal:Qt,getTranslation:function(i,m){var g=m[4],_=m[5],b=m[6],y=m[7],T=-m[0],w=-m[1],P=-m[2],$=m[3];return i[0]=2*(g*$+y*T+_*P-b*w),i[1]=2*(_*$+y*w+b*T-g*P),i[2]=2*(b*$+y*P+g*w-_*T),i},identity:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i[4]=0,i[5]=0,i[6]=0,i[7]=0,i},invert:function(i,m){var g=ar(m);return i[0]=-m[0]/g,i[1]=-m[1]/g,i[2]=-m[2]/g,i[3]=m[3]/g,i[4]=-m[4]/g,i[5]=-m[5]/g,i[6]=-m[6]/g,i[7]=m[7]/g,i},len:ir,length:nr,lerp:function(i,m,g,_){var b=1-_;return rr(m,g)<0&&(_=-_),i[0]=m[0]*b+g[0]*_,i[1]=m[1]*b+g[1]*_,i[2]=m[2]*b+g[2]*_,i[3]=m[3]*b+g[3]*_,i[4]=m[4]*b+g[4]*_,i[5]=m[5]*b+g[5]*_,i[6]=m[6]*b+g[6]*_,i[7]=m[7]*b+g[7]*_,i},mul:tr,multiply:multiply$1,normalize:function(i,m){var g=ar(m);if(g>0){g=Math.sqrt(g);var _=m[0]/g,b=m[1]/g,y=m[2]/g,T=m[3]/g,w=m[4],P=m[5],$=m[6],H=m[7],q=_*w+b*P+y*$+T*H;i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=(w-_*q)/g,i[5]=(P-b*q)/g,i[6]=($-y*q)/g,i[7]=(H-T*q)/g}return i},rotateAroundAxis:function(m,g,_,b){if(Math.abs(b)<i)return copy$1(m,g);var y=Math.hypot(_[0],_[1],_[2]);b*=.5;var T=Math.sin(b),w=T*_[0]/y,P=T*_[1]/y,$=T*_[2]/y,H=Math.cos(b),q=g[0],W=g[1],ye=g[2],Ge=g[3];m[0]=q*H+Ge*w+W*$-ye*P,m[1]=W*H+Ge*P+ye*w-q*$,m[2]=ye*H+Ge*$+q*P-W*w,m[3]=Ge*H-q*w-W*P-ye*$;var Ke=g[4],Xe=g[5],je=g[6],Ye=g[7];return m[4]=Ke*H+Ye*w+Xe*$-je*P,m[5]=Xe*H+Ye*P+je*w-Ke*$,m[6]=je*H+Ye*$+Ke*P-Xe*w,m[7]=Ye*H-Ke*w-Xe*P-je*$,m},rotateByQuatAppend:function(i,m,g){var _=g[0],b=g[1],y=g[2],T=g[3],w=m[0],P=m[1],$=m[2],H=m[3];return i[0]=w*T+H*_+P*y-$*b,i[1]=P*T+H*b+$*_-w*y,i[2]=$*T+H*y+w*b-P*_,i[3]=H*T-w*_-P*b-$*y,w=m[4],P=m[5],$=m[6],H=m[7],i[4]=w*T+H*_+P*y-$*b,i[5]=P*T+H*b+$*_-w*y,i[6]=$*T+H*y+w*b-P*_,i[7]=H*T-w*_-P*b-$*y,i},rotateByQuatPrepend:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return i[0]=_*H+T*w+b*$-y*P,i[1]=b*H+T*P+y*w-_*$,i[2]=y*H+T*$+_*P-b*w,i[3]=T*H-_*w-b*P-y*$,w=g[4],P=g[5],$=g[6],H=g[7],i[4]=_*H+T*w+b*$-y*P,i[5]=b*H+T*P+y*w-_*$,i[6]=y*H+T*$+_*P-b*w,i[7]=T*H-_*w-b*P-y*$,i},rotateX:function(i,m,g){var _=-m[0],b=-m[1],y=-m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=w*T+H*_+P*y-$*b,W=P*T+H*b+$*_-w*y,ye=$*T+H*y+w*b-P*_,Ge=H*T-w*_-P*b-$*y;return rotateX$1(i,m,g),_=i[0],b=i[1],y=i[2],T=i[3],i[4]=q*T+Ge*_+W*y-ye*b,i[5]=W*T+Ge*b+ye*_-q*y,i[6]=ye*T+Ge*y+q*b-W*_,i[7]=Ge*T-q*_-W*b-ye*y,i},rotateY:function(i,m,g){var _=-m[0],b=-m[1],y=-m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=w*T+H*_+P*y-$*b,W=P*T+H*b+$*_-w*y,ye=$*T+H*y+w*b-P*_,Ge=H*T-w*_-P*b-$*y;return rotateY$1(i,m,g),_=i[0],b=i[1],y=i[2],T=i[3],i[4]=q*T+Ge*_+W*y-ye*b,i[5]=W*T+Ge*b+ye*_-q*y,i[6]=ye*T+Ge*y+q*b-W*_,i[7]=Ge*T-q*_-W*b-ye*y,i},rotateZ:function(i,m,g){var _=-m[0],b=-m[1],y=-m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=w*T+H*_+P*y-$*b,W=P*T+H*b+$*_-w*y,ye=$*T+H*y+w*b-P*_,Ge=H*T-w*_-P*b-$*y;return rotateZ$1(i,m,g),_=i[0],b=i[1],y=i[2],T=i[3],i[4]=q*T+Ge*_+W*y-ye*b,i[5]=W*T+Ge*b+ye*_-q*y,i[6]=ye*T+Ge*y+q*b-W*_,i[7]=Ge*T-q*_-W*b-ye*y,i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i},set:function(i,m,g,_,b,y,T,w,P){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i[6]=w,i[7]=P,i},setDual:function(i,m){return i[4]=m[0],i[5]=m[1],i[6]=m[2],i[7]=m[3],i},setReal:er,sqrLen:sr,squaredLength:ar,str:function(i){return"quat2("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+")"},translate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=.5*g[0],P=.5*g[1],$=.5*g[2],H=m[4],q=m[5],W=m[6],ye=m[7];return i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=T*w+b*$-y*P+H,i[5]=T*P+y*w-_*$+q,i[6]=T*$+_*P-b*w+W,i[7]=-_*w-b*P-y*$+ye,i}});function create(){var i=new m(2);return m!=Float32Array&&(i[0]=0,i[1]=0),i}function subtract(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i}function multiply(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i}function divide(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i}function distance(i,m){var g=m[0]-i[0],_=m[1]-i[1];return Math.hypot(g,_)}function squaredDistance(i,m){var g=m[0]-i[0],_=m[1]-i[1];return g*g+_*_}function length(i){var m=i[0],g=i[1];return Math.hypot(m,g)}function squaredLength(i){var m=i[0],g=i[1];return m*m+g*g}function lerp(i,m,g,_){var b=m[0],y=m[1];return i[0]=b+_*(g[0]-b),i[1]=y+_*(g[1]-y),i}var ur=length,lr=subtract,cr=multiply,hr=divide,fr=distance,dr=squaredDistance,mr=squaredLength,pr=function(){var i=create();return function(m,g,_,b,y,T){var w,P;for(g||(g=2),_||(_=0),P=b?Math.min(b*g+_,m.length):m.length,w=_;w<P;w+=g)i[0]=m[w],i[1]=m[w+1],y(i,i,T),m[w]=i[0],m[w+1]=i[1];return m}}(),gr=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i},angle:function(i,m){var g=i[0],_=i[1],b=m[0],y=m[1],T=Math.sqrt(g*g+_*_)*Math.sqrt(b*b+y*y),w=T&&(g*b+_*y)/T;return Math.acos(Math.min(Math.max(w,-1),1))},ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i},clone:function(i){var g=new m(2);return g[0]=i[0],g[1]=i[1],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i},create:create,cross:function(i,m,g){var _=m[0]*g[1]-m[1]*g[0];return i[0]=i[1]=0,i[2]=_,i},dist:fr,distance:distance,div:hr,divide:divide,dot:function(i,m){return i[0]*m[0]+i[1]*m[1]},equals:function(m,g){var _=m[0],b=m[1],y=g[0],T=g[1];return Math.abs(_-y)<=i*Math.max(1,Math.abs(_),Math.abs(y))&&Math.abs(b-T)<=i*Math.max(1,Math.abs(b),Math.abs(T))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]},floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i},forEach:pr,fromValues:function(i,g){var _=new m(2);return _[0]=i,_[1]=g,_},inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i},len:ur,length:length,lerp:lerp,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i},mul:cr,multiply:multiply,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i},normalize:function(i,m){var g=m[0],_=m[1],b=g*g+_*_;return b>0&&(b=1/Math.sqrt(b)),i[0]=m[0]*b,i[1]=m[1]*b,i},random:function(i,m){m=m||1;var _=2*g()*Math.PI;return i[0]=Math.cos(_)*m,i[1]=Math.sin(_)*m,i},rotate:function(i,m,g,_){var b=m[0]-g[0],y=m[1]-g[1],T=Math.sin(_),w=Math.cos(_);return i[0]=b*w-y*T+g[0],i[1]=b*T+y*w+g[1],i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i},scaleAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i},set:function(i,m,g){return i[0]=m,i[1]=g,i},sqrDist:dr,sqrLen:mr,squaredDistance:squaredDistance,squaredLength:squaredLength,str:function(i){return"vec2("+i[0]+","+i[1]+")"},sub:lr,subtract:subtract,transformMat2:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[2]*b,i[1]=g[1]*_+g[3]*b,i},transformMat2d:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[2]*b+g[4],i[1]=g[1]*_+g[3]*b+g[5],i},transformMat3:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[3]*b+g[6],i[1]=g[1]*_+g[4]*b+g[7],i},transformMat4:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[4]*b+g[12],i[1]=g[1]*_+g[5]*b+g[13],i},zero:function(i){return i[0]=0,i[1]=0,i}}),xr=Object.freeze({__proto__:null,glMatrix:b,mat2:w,mat2d:H,mat3:ye,mat4:Ye,quat:Jt,quat2:or,vec2:gr,vec3:vt,vec4:Ct});class InstanceIdGenerator{static idMaps=new Map;static getNextId(i){let m=this.idMaps.get(i)||0;return this.idMaps.set(i,m+1),m}}Object.freeze(InstanceIdGenerator);class Camera2D{#e;#t=create$5();#r;constructor(){}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get modelMatrix(){return this.#t}}const consoleAndThrowError=(...i)=>{const m=Array.prototype.slice.call(i).join(" ");throw new Error(m)},validateNumber=i=>"number"==typeof i||(consoleAndThrowError("Only numbers allowed."),!1);class PerspectiveCamera{#e;#n=new Float32Array([0,1,0]);#t=create$5();#i=0;#a=0;#s=0;#o=0;#u=0;#l=0;#c=60;#h=.01;#f=1e4;#r;constructor(){}get rotationX(){return this.#o}set rotationX(i){this.#o=i}get rotationY(){return this.#u}set rotationY(i){this.#u=i}get rotationZ(){return this.#l}set rotationZ(i){this.#l=i}get fieldOfView(){return this.#c}set fieldOfView(i){validateNumber(i),this.#c=i}get nearClipping(){return this.#h}set nearClipping(i){validateNumber(i),this.#h=i}get farClipping(){return this.#f}set farClipping(i){validateNumber(i),this.#f=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get modelMatrix(){return this.#t}get x(){return this.#i}set x(i){this.#i=i,this.#t[12]=i}get y(){return this.#s}set y(i){this.#s=i,this.#t[13]=i}get z(){return this.#a}set z(i){this.#a=i,this.#t[14]=i}get position(){return[this.#i,this.#s,this.#a]}setPosition(i,m,g){Array.isArray(i)?[this.#i,this.#s,this.#a]=i:(this.#i=i,this.#s=m,this.#a=g),[this.#t[12],this.#t[13],this.#t[14]]=[this.#i,this.#s,this.#a]}lookAt(i,m,g){lookAt(this.#t,[this.#i,this.#s,this.#a],[i,m,g],this.#n)}}class OrthographicCamera extends PerspectiveCamera{#e;#r;#d=1;#m=-1;#p=-1;#g=1;constructor(){super(),this.nearClipping=.01,this.farClipping=2e3}get top(){return this.#d}set top(i){validateNumber(i),this.#d=i}get bottom(){return this.#m}set bottom(i){validateNumber(i),this.#m=i}get left(){return this.#p}set left(i){validateNumber(i),this.#p=i}get right(){return this.#g}set right(i){validateNumber(i),this.#g=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}}const gltfAnimationLooper_rotation=(m,g,_,b,y,T,w,P,$,H,q)=>{let W,ye,Ge,Ke,Xe,je,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Pt,Ct,It=!0;if("CUBICSPLINE"==m)T!=b-1?(Ct=12*T,St=_[Ct+4],wt=_[Ct+5],Mt=_[Ct+6],Rt=_[Ct+7],Pt=St*St+wt*wt+Mt*Mt+Rt*Rt,Pt>0&&(Pt=1/Math.sqrt(Pt)),Je=St*Pt,Qe=wt*Pt,et=Mt*Pt,at=Rt*Pt,St=_[Ct+8],wt=_[Ct+9],Mt=_[Ct+10],Rt=_[Ct+11],Pt=St*St+wt*wt+Mt*Mt+Rt*Rt,Pt>0&&(Pt=1/Math.sqrt(Pt)),ht=St*Pt,ft=wt*Pt,gt=Mt*Pt,xt=Rt*Pt,St=_[Ct],wt=_[Ct+1],Mt=_[Ct+2],Rt=_[Ct+3],Pt=St*St+wt*wt+Mt*Mt+Rt*Rt,Pt>0&&(Pt=1/Math.sqrt(Pt)),Xe=St*Pt,je=wt*Pt,Ye=Mt*Pt,Ze=Rt*Pt,Ct=12*w,St=_[Ct+4],wt=_[Ct+5],Mt=_[Ct+6],Rt=_[Ct+7],Pt=St*St+wt*wt+Mt*Mt+Rt*Rt,Pt>0&&(Pt=1/Math.sqrt(Pt)),W=St*Pt,ye=wt*Pt,Ge=Mt*Pt,Ke=Rt*Pt,vt=Je,bt=ht*y,yt=W,Tt=Xe*y,St=P*vt+$*bt+H*yt+q*Tt,vt=Qe,bt=ft*y,yt=ye,Tt=je*y,wt=P*vt+$*bt+H*yt+q*Tt,vt=et,bt=gt*y,yt=Ge,Tt=Ye*y,Mt=P*vt+$*bt+H*yt+q*Tt,vt=at,bt=xt*y,yt=Ke,Tt=Ze*y,Rt=P*vt+$*bt+H*yt+q*Tt):It=!1;else{let m,g,b,P,$;Ct=4*T,St=_[Ct],wt=_[Ct+1],Mt=_[Ct+2],Rt=_[Ct+3],Pt=St*St+wt*wt+Mt*Mt+Rt*Rt,Pt>0&&(Pt=1/Math.sqrt(Pt)),Je=St*Pt,Qe=wt*Pt,et=Mt*Pt,at=Rt*Pt,Ct=4*w,St=_[Ct],wt=_[Ct+1],Mt=_[Ct+2],Rt=_[Ct+3],Pt=St*St+wt*wt+Mt*Mt+Rt*Rt,Pt>0&&(Pt=1/Math.sqrt(Pt)),W=St*Pt,ye=wt*Pt,Ge=Mt*Pt,Ke=Rt*Pt,g=Je*W+Qe*ye+et*Ge+at*Ke,g<0&&(g=-g,W=-W,ye=-ye,Ge=-Ge,Ke=-Ke),1-g>i?(m=Math.acos(g),b=Math.sin(m),P=Math.sin((1-y)*m)/b,$=Math.sin(y*m)/b):(P=1-y,$=y),St=P*Je+$*W,wt=P*Qe+$*ye,Mt=P*et+$*Ge,Rt=P*at+$*Ke}if(It){let i=[],m=[0,0,0],_=St+St,b=wt+wt,y=Mt+Mt,T=St*_,w=St*b,P=St*y,$=wt*b,H=wt*y,q=Mt*y,W=Rt*_,ye=Rt*b,Ge=Rt*y;i[0]=1-($+q),i[4]=w-Ge,i[8]=P+ye,i[1]=w+Ge,i[5]=1-(T+q),i[9]=H-W,i[2]=P-ye,i[6]=H+W,i[10]=1-(T+$),i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1;let Ke=i[0],Xe=i[4],je=i[8],Ye=i[5],Ze=i[9],Je=i[6],Qe=i[10];m[1]=Math.asin(Math.max(-1,Math.min(1,je))),Math.abs(je)<.99999?(m[0]=Math.atan2(-Ze,Qe),m[2]=Math.atan2(-Xe,Ke)):(m[0]=Math.atan2(Je,Ye),m[2]=0),m[0]=-180*m[0]/Math.PI,m[1]=-180*m[1]/Math.PI,m[2]=-180*m[2]/Math.PI,g.rotationX=m[0],g.rotationY=m[1],g.rotationZ=m[2]}},gltfAnimationLooper_scale=(i,m,g,_,b,y,T,w,P,$,H)=>{let q,W,ye,Ge,Ke,Xe,je,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt;"CUBICSPLINE"==i?y!=_-1&&(xt=9*y,q=g[xt+3],W=g[xt+4],ye=g[xt+5],Je=g[xt+6],Qe=g[xt+7],et=g[xt+8],xt=9*T,Ge=g[xt+0],Ke=g[xt+1],Xe=g[xt+2],je=g[xt+3],Ye=g[xt+4],Ze=g[xt+5],at=je,ht=Je*b,ft=q,gt=Ge*b,m.scaleX=w*at+P*ht+$*ft+H*gt,at=Ye,ht=Qe*b,ft=W,gt=Ke*b,m.scaleY=w*at+P*ht+$*ft+H*gt,at=Ze,ht=et*b,ft=ye,gt=Xe*b,m.scaleZ=w*at+P*ht+$*ft+H*gt):(xt=3*T,q=g[xt],W=g[xt+1],ye=g[xt+2],xt=3*y,je=g[xt],Ye=g[xt+1],Ze=g[xt+2],m.scaleX=je+b*(q-je),m.scaleY=Ye+b*(W-Ye),m.scaleZ=Ze+b*(ye-Ze))},gltfAnimationLooper_transition=(i,m,g,_,b,y,T,w,P,$,H)=>{let q,W,ye,Ge,Ke,Xe,je,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt;"CUBICSPLINE"==i?y!=_-1&&(xt=9*y,q=g[xt+3],W=g[xt+4],ye=g[xt+5],Je=g[xt+6],Qe=g[xt+7],et=g[xt+8],xt=9*T,Ge=g[xt+0],Ke=g[xt+1],Xe=g[xt+2],je=g[xt+3],Ye=g[xt+4],Ze=g[xt+5],at=je,ht=Je*b,ft=q,gt=Ge*b,m.x=w*at+P*ht+$*ft+H*gt,at=Ye,ht=Qe*b,ft=W,gt=Ke*b,m.y=w*at+P*ht+$*ft+H*gt,at=Ze,ht=et*b,ft=ye,gt=Xe*b,m.z=w*at+P*ht+$*ft+H*gt):(xt=3*T,q=g[xt],W=g[xt+1],ye=g[xt+2],xt=3*y,je=g[xt],Ye=g[xt+1],Ze=g[xt+2],m.x=je+b*(q-je),m.y=Ye+b*(W-Ye),m.z=Ze+b*(ye-Ze))},gltfAnimationLooper_weight=(i,m,g,_,b)=>{let y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,je,Ye,Ze,Je,Qe,et,at,ht,ft,gt;const xt=9999991;for(y=i.length;y--;){let vt;for(T=i[y],w=T.geometry.vertexBuffer.data,$=T.geometry.vertexBuffer.stride,q=w.length/$,Je=T.animationInfo.morphInfo,P=Je.origin,Qe=Je.morphInfoDataList,Ze=Qe.length,H=0;H<q;H++){Ye=H*$;let i=Ye*xt+_*xt+b;if(gt=Je.cacheData[i],gt)[W,ye,Ge,Ke,Xe,je]=gt;else{for(W=P[Ye],ye=P[Ye],Ge=P[Ye+1],Ke=P[Ye+1],Xe=P[Ye+2],je=P[Ye+2],et=Ze;et--;)at=m[_*Ze+et],ht=m[b*Ze+et],ft=Qe[et].interleaveData,vt=ft[Ye],W+=at*vt,ye+=ht*vt,vt=ft[Ye+1],Ge+=at*vt,Ke+=ht*vt,vt=ft[Ye+2],Xe+=at*vt,je+=ht*vt;Je.cacheData[i]=[W,ye,Ge,Ke,Xe,je]}w[Ye]=W+g*(ye-W),w[Ye+1]=Ge+g*(Ke-Ge),w[Ye+2]=Xe+g*(je-Xe)}T.geometry.vertexBuffer.updateAllData(w)}};class VertexGPURenderInfo{vertexShaderModule;vertexStructInfo;vertexUniformInfo;vertexBindGroupLayout;vertexUniformBindGroup;vertexUniformBuffer;pipeline;shadowPipeline;pickingPipeline;constructor(i,m,g,_,b,y,T,w){this.vertexShaderModule=i,this.vertexUniformInfo=m,this.vertexBindGroupLayout=g,this.vertexUniformBindGroup=b,this.vertexUniformBuffer=_,this.pipeline=y,this.shadowPipeline=T,this.pickingPipeline=w}}Object.freeze(VertexGPURenderInfo);const defineProperty=(i,m,g,_,...b)=>{Object.defineProperty(i.prototype,m,g(m,_,...b))},defineProperties=i=>(m,g)=>{g.forEach(g=>{if(Array.isArray(g)){const[_,b,...y]=g;defineProperty(m,_,i,b,...y)}else defineProperty(m,g,i)})},createDefineByPreset=i=>{const m={};return Object.keys(i).forEach(g=>{const[_,b]=i[g];Object.assign(m,(i=>m=>m.reduce((m,g)=>({...m,[g]:i}),{}))(_)(Object.values(b)))}),{defineByPreset:(i,g)=>((i,m,g)=>{m.forEach(m=>{if(Array.isArray(m)){const[_,b,...y]=m,T=g[_];T||consoleAndThrowError(_,"is a key not defined in Define Preset."),defineProperty(i,_,T,b,...y)}else{const _=g[m];_||consoleAndThrowError(m,"is a key not defined in Define Preset."),defineProperty(i,m,_)}})})(i,g,m)}},_r={enumerable:!0,configurable:!1};function createSetter$5(i,m,g){return function(_){this[m]=_;const{gpuRenderInfo:b}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=b;g.writeBuffer(m.members[i],_?1:0)}else if(b){const{vertexUniformInfo:m,vertexUniformBuffer:g}=b;g.writeBuffer(m.members[i],_?1:0)}}}function defineBoolean(i,m=!1,g=!0){const _=Symbol(i);return{get:function(){return void 0===this[_]&&(this[_]=m),this[_]},set:createSetter$5(i,_,g),..._r}}Object.freeze(_r),Object.freeze(defineBoolean);const validatePositiveNumberRange=(i,m=0,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(m<0||i<0||i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed.`),!0);function createSetter$4(i,m,g,_=0,b){return function(y){void 0!==_&&y<_&&(console.warn(`Value for ${i} is below the minimum (${_}). Received:${y}. Adjusted to ${_}.`),y=_),void 0!==b&&y>b&&(console.warn(`Value for ${i} exceeds the maximum (${b}). Received:${y}. Adjusted to ${b}.`),y=b),validatePositiveNumberRange(y),this[m]=y;const{gpuRenderInfo:T}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}else if(T){const{vertexUniformInfo:g,vertexUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}}}function definePositiveNumberRange(i,m=1,g=!0,_=0,b){const y=Symbol(i);return{get:function(){return void 0===this[y]&&(this[y]=m),this[y]},set:createSetter$4(i,y,g,_,b),..._r}}Object.freeze(definePositiveNumberRange);const isUint=i=>Number.isInteger(i)&&i>=0,validateUintRange=(i,m=0,g=4503599627370496)=>{const _=isUint(i),b=isUint(m),y=isUint(g),T="is not Uint!/value:",w=`(check range:${m}u ~ ${g}u)`;return _||consoleAndThrowError(`value ${T}${i}/${w}`),b||consoleAndThrowError(`min ${T}${m}/${w}`),y||consoleAndThrowError(`max ${T}${g}/${w}`),m>=g&&consoleAndThrowError(`maximum value is bigger than minimum value./${w}`),m>i&&consoleAndThrowError(`value is smaller than minimum value./value:${i}/${w}`),g<i&&consoleAndThrowError(`value is bigger than maximum value./value:${i}/${w}`),!0};function createSetter$3(i,m,g,_=0,b){return function(y){validateUintRange(y),void 0!==_&&y<_&&(console.warn(`Value for ${i} is below the minimum (${_}). Received:${y}. Adjusted to ${_}.`),y=_),void 0!==b&&y>b&&(console.warn(`Value for ${i} exceeds the maximum (${b}). Received:${y}. Adjusted to ${b}.`),y=b),this[m]=y;const{gpuRenderInfo:T}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}else if(T){const{vertexUniformInfo:g,vertexUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}}}function defineUintRange(i,m=0,g=!0,_=0,b){const y=Symbol(i);return{get:function(){return void 0===this[y]&&(this[y]=m),this[y]},set:createSetter$3(i,y,g,_,b),..._r}}function defineProperty_boolean(i,m=!1){return defineBoolean(i,m,!1)}function defineProperty_uintRange(i,m=0,g,_){return defineUintRange(i,m,!1,g,_)}function defineProperty_PositiveNumberRange(i,m=0,g,_){return definePositiveNumberRange(i,m,!1,g,_)}Object.freeze(defineUintRange);const vr={USE_BILLBOARD_PERSPECTIVE:"useBillboardPerspective",USE_BILLBOARD:"useBillboard",RECEIVE_SHADOW:"receiveShadow"},br={BILLBOARD_FIXED_SCALE:"billboardFixedScale"},yr={},Tr={...createDefineByPreset({defineBoolean:[defineProperty_boolean,vr],defineUint:[defineProperty_uintRange,yr],definePositiveNumber:[defineProperty_PositiveNumberRange,br]}),defineBoolean:defineProperties(defineProperty_boolean),defineUint:defineProperties(defineProperty_uintRange),definePositiveNumber:defineProperties(defineProperty_PositiveNumberRange),PRESET_BOOLEAN:vr,PRESET_POSITIVE_NUMBER:br,PRESET_UINT:yr,PRESET_SAMPLER:{},PRESET_TEXTURE:{},PRESET_CUBE_TEXTURE:{},PRESET_VEC2:{},PRESET_VEC3:{},PRESET_VEC4:{},PRESET_COLOR_RGB:{}};Object.freeze(Tr);const mat4ToEuler=(i,m,g)=>{m=m||[0,0,0],g=g||"XYZ";let _=i[0],b=i[4],y=i[8],T=i[1],w=i[5],P=i[9],$=i[2],H=i[6],q=i[10];return"XYZ"===g?(m[1]=Math.asin(clamp(y,-1,1)),Math.abs(y)<.99999?(m[0]=Math.atan2(-P,q),m[2]=Math.atan2(-b,_)):(m[0]=Math.atan2(H,w),m[2]=0)):"YXZ"===g?(m[0]=Math.asin(-clamp(P,-1,1)),Math.abs(P)<.99999?(m[1]=Math.atan2(y,q),m[2]=Math.atan2(T,w)):(m[1]=Math.atan2(-$,_),m[2]=0)):"ZXY"===g?(m[0]=Math.asin(clamp(H,-1,1)),Math.abs(H)<.99999?(m[1]=Math.atan2(-$,q),m[2]=Math.atan2(-b,w)):(m[1]=0,m[2]=Math.atan2(T,_))):"ZYX"===g?(m[1]=Math.asin(-clamp($,-1,1)),Math.abs($)<.99999?(m[0]=Math.atan2(H,q),m[2]=Math.atan2(T,_)):(m[0]=0,m[2]=Math.atan2(-b,w))):"YZX"===g?(m[2]=Math.asin(clamp(T,-1,1)),Math.abs(T)<.99999?(m[0]=Math.atan2(-P,w),m[1]=Math.atan2(-$,_)):(m[0]=0,m[1]=Math.atan2(y,q))):"XZY"===g&&(m[2]=Math.asin(-clamp(b,-1,1)),Math.abs(b)<.99999?(m[0]=Math.atan2(H,w),m[1]=Math.atan2(y,_)):(m[0]=Math.atan2(-P,q),m[1]=0)),m};let clamp=function(i,m,g){return Math.max(m,Math.min(g,i))};const uuidToUint=i=>{const m=i.replace(/-/g,"").substring(0,8);return parseInt(m,16)};let Sr=class{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}};class ResourceStateCubeTexture{texture;srcList;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.srcList=i.srcList,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class ResourceStateBitmapTexture{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}const basicRegisterResource=(i,m)=>{const{uuid:g,targetResourceManagedState:_}=i,b=m instanceof ResourceStateCubeTexture||m instanceof Sr||m instanceof ResourceStateBitmapTexture;try{_.table[g]&&consoleAndThrowError(`Buffer with UUID ${g} is already registered.`),_.table[g]=m,_.length++,b||(_.videoMemory+=i.size)}catch(i){consoleAndThrowError(i.message)}};class ResourceStateUniformBuffer{static dirtyList=[];buffer;uuid;#x=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#x}set useNum(i){this.#x=i,ResourceStateUniformBuffer.dirtyList.push(this)}}const basicUnregisterResource=i=>{const{uuid:m,targetResourceManagedState:g}=i,{table:_}=g;_[m]&&(g.videoMemory-=i.size,delete _[m],g.length--)},validateRedGPUContext=i=>{if("RedGPUContext"!==i?.constructor?.name){return consoleAndThrowError(`from ${i?.constructor?.name}:requires a RedGPUContext instance,but received:${i}`),!1}return!0},createUUID=()=>{const i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let m,g=0,_=["","","","","-","","","","-","4","","","-","","","","-","","","","","","-","","","","","","","","","","","",""];for(;g<36;)""===_[g]&&(m=16*Math.random()|0,_[g]=i[19===g?3&m|8:15&m]),g++;return _.join("")};class ResourceBase{#_=createUUID();#v;#b;#r="";#e;#y=[];constructor(i){validateRedGPUContext(i),this.#v=i,this.#b=i.gpuDevice}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get uuid(){return this.#_}get gpuDevice(){return this.#b}get redGPUContext(){return this.#v}__addDirtyPipelineListener(i){this.#T(!0),this.#y.push(i)}__removeDirtyPipelineListener(i){const m=this.#y.indexOf(i);m>-1&&(this.#y.splice(m,1),this.#T(!1))}__fireListenerList(i=!1){for(const i of this.#y)i(this);i&&(this.#y.length=0)}#T(i){const{resourceManager:m}=this.#v;if(m){const g=m[`managed${this.constructor.name}State`]?.table?.[this.#_];g&&(i?g.useNum++:g.useNum--)}}}class ManagedResourceBase extends ResourceBase{#S;constructor(i,m){super(i),this.#S=i.resourceManager[m]}get targetResourceManagedState(){return this.#S}}class ABaseBuffer extends ManagedResourceBase{#w;constructor(i,m,g){super(i,m),this.#w=g}get usage(){return this.#w}}class AUniformBaseBuffer extends ABaseBuffer{#M;#R;#P;#C;constructor(i,m,g,_,b=""){super(i,m,g),this.#R=_.byteLength,this.#M={size:this.#R,usage:this.usage,label:b};try{this.#C=i.gpuDevice.createBuffer(this.#M)}catch(i){console.error("GPU 버퍼 생성에 실패했습니다:",i)}i.gpuDevice.queue.writeBuffer(this.#C,0,_)}get gpuBuffer(){return this.#C}get data(){return this.#P}get size(){return this.#R}get uniformBufferDescriptor(){return this.#M}destroy(){const i=this.#C;i&&(this.#C=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}writeBuffers(i){const{gpuDevice:m}=this.redGPUContext;let g=i.length;for(;g--;){const[_,b]=i[g];m.queue.writeBuffer(this.gpuBuffer,_.uniformOffset,new _.View("number"==typeof b?[b]:b))}}writeBuffer(i,m){this.redGPUContext.gpuDevice.queue.writeBuffer(this.gpuBuffer,i.uniformOffset,new i.View("number"==typeof m?[m]:m))}}const getCacheBufferFromResourceState=(i,m)=>{const{targetResourceManagedState:g}=i,_=((i,m)=>{if(!m)return;let g;const _=i.table;for(const i in _)if(_[i].label===m){g=_[i];break}return g})(g,m);return _?g.table[i.uuid].buffer:null};class UniformBuffer extends AUniformBaseBuffer{constructor(i,m,g="",_=""){super(i,"managedUniformBufferState",GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,m,g);const b=getCacheBufferFromResourceState(this,_);if(b)return b;_&&(this.name=_),basicRegisterResource(this,new ResourceStateUniformBuffer(this))}}Object.freeze(UniformBuffer);const wr={CLAMP_TO_EDGE:"clamp-to-edge",REPEAT:"repeat",MIRRORED_REPEAT:"mirror-repeat"};Object.freeze(wr);const Mr={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(Mr);const Rr={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(Rr);const Pr=new Map,Cr=Object.values(Mr),Ir=Object.values(wr),Er=Object.values(Rr);class Sampler extends ResourceBase{#I;#E=Mr.LINEAR;#L=Mr.LINEAR;#B=Rr.LINEAR;#U=wr.REPEAT;#D=wr.REPEAT;#A=wr.REPEAT;#k;#O;#N;#F=1;constructor(i,m){super(i),this.#G(m)}get addressModeU(){return this.#U}set addressModeU(i){this.#V(i,"addressModeU")}get addressModeV(){return this.#D}set addressModeV(i){this.#V(i,"addressModeV")}get addressModeW(){return this.#A}set addressModeW(i){this.#V(i,"addressModeW")}get mipmapFilter(){return this.#B}set mipmapFilter(i){this.#$(i,Er,"mipmapFilter")}get gpuSampler(){return this.#I}get magFilter(){return this.#E}set magFilter(i){this.#$(i,Cr,"magFilter")}get minFilter(){return this.#L}set minFilter(i){this.#$(i,Cr,"minFilter")}get maxAnisotropy(){return this.#F}set maxAnisotropy(i){validateUintRange(i,1,16),this.#F=i,this.#G()}get isAnisotropyValid(){return!this.#F||"linear"===this.#E&&"linear"===this.#L&&"linear"===this.#B}#H(){this.__fireListenerList()}#V(i,m){if(Ir.includes(i)){switch(m){case"addressModeU":this.#U=i;break;case"addressModeV":this.#D=i;break;case"addressModeW":this.#A=i}this.#G()}else consoleAndThrowError(`Invalid ${m} value. Must be one of ${Ir.join(",")},but received:${i}.`)}#$(i,m,g){if(m.includes(i)||null===i){switch(g){case"mipmapFilter":this.#B=i;break;case"magFilter":this.#E=i;break;case"minFilter":this.#L=i}this.#G()}else consoleAndThrowError(`Invalid ${g} value. Must be one of ${m.join(",")},but received:${i}.`)}#z(){return`${this.#E}:${this.#L}:${this.#B}:${this.#U}:${this.#D}:${this.#A}:${this.#k}:${this.#O}:${this.#N}:${this.#F}`}#G(i){i&&(i.magFilter&&(this.#E=i.magFilter),i.minFilter&&(this.#L=i.minFilter),i.mipmapFilter&&(this.#B=i.mipmapFilter),i.addressModeU&&(this.#U=i.addressModeU),i.addressModeV&&(this.#D=i.addressModeV),i.addressModeW&&(this.#A=i.addressModeW),void 0!==i.lodMinClamp&&(this.#k=i.lodMinClamp),void 0!==i.lodMaxClamp&&(this.#O=i.lodMaxClamp),i.compare&&(this.#N=i.compare),i.maxAnisotropy&&(this.#F=i.maxAnisotropy)),this.isAnisotropyValid||1===this.#F||(console.warn(`Invalid maxAnisotropy setting (${this.#F}) detected:magFilter(${this.#E}),minFilter(${this.#L}),mipmapFilter(${this.#B}) must all be set to 'linear' for anisotropic filtering to work. Falling back to default (1).`),this.#F=1);const m=this.#z();if(!Pr.has(m)){let i={};this.#E&&(i.magFilter=this.#E),this.#L&&(i.minFilter=this.#L),this.#B&&(i.mipmapFilter=this.#B),this.#U&&(i.addressModeU=this.#U),this.#D&&(i.addressModeV=this.#D),this.#A&&(i.addressModeW=this.#A),void 0!==this.#k&&(i.lodMinClamp=this.#k),void 0!==this.#O&&(i.lodMaxClamp=this.#O),this.#N&&(i.compare=this.#N),this.#F&&(i.maxAnisotropy=this.#F),Pr.set(m,this.redGPUContext.gpuDevice.createSampler(i))}this.#I=Pr.get(m),this.#H()}}function calculateTextureByteSize(i){return function(i){switch(i){case"r8unorm":case"r8snorm":case"r8uint":case"r8sint":return 1;case"r16uint":case"r16sint":case"r16float":case"rg8unorm":case"rg8snorm":case"rg8uint":case"rg8sint":case"depth16unorm":return 2;case"r32uint":case"r32sint":case"r32float":case"rg16uint":case"rg16sint":case"rg16float":case"rgba8unorm":case"rgba8unorm-srgb":case"rgba8snorm":case"rgba8uint":case"rgba8sint":case"bgra8unorm":case"bgra8unorm-srgb":case"depth24plus":case"depth32float":return 4;case"rg32uint":case"rg32sint":case"rg32float":case"rgba16uint":case"rgba16sint":case"rgba16float":return 8;case"rgba32uint":case"rgba32sint":case"rgba32float":return 16;default:throw new Error(`Unrecognized texture format:${i}`)}}(i.format)*(i.size[0]*i.size[1]*(i.size[2]||1))*(i.sampleCount?i.sampleCount:1)}Object.freeze(Sampler);const getMipLevelCount=(i,m)=>Math.floor(Math.log2(Math.max(i,m)))+1,imageBitmapToGPUTexture=(i,m,g,_=!0)=>{const b=i.createTexture(g);for(let y=0;y<m.length;y++){const T=m[y],w={source:T},P={texture:b,origin:[0,0,y],premultipliedAlpha:_};g.format.includes("srgb")&&(P.colorSpace="srgb");const $=[T.width,T.height];i.queue.copyExternalImageToTexture(w,P,$)}return b};async function loadAndCreateBitmapImage(i,m="none",g="premultiply"){const _=await fetch(i),b=await _.blob();return createImageBitmap(b,{colorSpaceConversion:m,premultiplyAlpha:g})}class BitmapTexture extends ManagedResourceBase{#K;#q;#W;#X;#j;#Y;#Z=0;#J=!0;#Q;#ee;#te;constructor(i,m,g=!0,_,b,y,T=!0){if(super(i,"managedBitmapTextureState"),this.#ee=_,this.#te=b,this.#J=T,this.#j=g,this.#Q=y||navigator.gpu.getPreferredCanvasFormat(),m){this.#q=m?.src||m,this.#W=m?.cacheKey||m||this.uuid;const{table:i}=this.targetResourceManagedState;let g;for(const m in i)if(i[m].cacheKey===this.#W){g=i[m];break}if(g)return this.#ee?.(this),i[g.uuid].texture;this.src=m,this.#re()}}get usePremultiplyAlpha(){return this.#J}get cacheKey(){return this.#W}get videoMemorySize(){return this.#Z}get gpuTexture(){return this.#K}get mipLevelCount(){return this.#X}get src(){return this.#q}set src(i){this.#q=i?.src||i,this.#W=i?.cacheKey||i||this.uuid,this.#q&&this.#ne(this.#q)}get useMipmap(){return this.#j}set useMipmap(i){this.#j=i,this.#ie()}destroy(){const i=this.#K;this.#ae(null),this.__fireListenerList(!0),this.#q=null,this.#W=null,this.#se(),i&&i.destroy()}#ae(i){this.#K=i,i||(this.#Y=null),this.__fireListenerList()}#re(){basicRegisterResource(this,new Sr(this))}#se(){basicUnregisterResource(this)}#ie(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#K&&(this.#K.destroy(),this.#K=null),this.targetResourceManagedState.videoMemory-=this.#Z,this.#Z=0;const{width:_,height:b}=this.#Y;this.#X=1;const y={size:[_,b],format:this.#Q,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:this.#q};this.#j&&(this.#X=getMipLevelCount(_,b),y.mipLevelCount=this.#X,y.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const T=imageBitmapToGPUTexture(i,[this.#Y],y,this.#J);this.#Z=calculateTextureByteSize(y),this.targetResourceManagedState.videoMemory+=this.#Z,this.#j&&g.generateMipmap(T,y),this.#ae(T)}async#oe(i){return new Promise((m,g)=>{const _=new Image;_.src=i,_.onload=()=>{const i=document.createElement("canvas");i.width=_.width||512,i.height=_.height||512;const b=i.getContext("2d");b?(b.fillStyle="rgba(0,0,0,0)",b.fillRect(0,0,i.width,i.height),b.drawImage(_,0,0,i.width,i.height),createImageBitmap(i,{colorSpaceConversion:"none",premultiplyAlpha:this.#J?"premultiply":"none"}).then(m).catch(g)):g(new Error("Canvas context could not be created."))},_.onerror=i=>{g(new Error(`Failed to load SVG:${i}`))}})}async#ne(i){try{i.endsWith(".svg")?this.#Y=await this.#oe(i):this.#Y=await loadAndCreateBitmapImage(i,"none",this.#J?"premultiply":"none"),this.#ie(),this.#ee?.(this)}catch(i){console.error(i),this.#te?.(i)}}}Object.freeze(BitmapTexture);const Lr={LOAD:"load",CLEAR:"clear"};Object.freeze(Lr);const Br={STORE:"store",DISCARD:"discard"};Object.freeze(Br);class MipmapGenerator{#v;#ue;#le;#ce;#he;#fe;#de=new Map;#me=new Map;constructor(i){this.#v=i,this.#ue=new Sampler(i,{minFilter:"linear"}).gpuSampler,this.#ce={}}getTextureView(i,m,g){this.#de.has(i)||this.#de.set(i,new Map);const _=this.#de.get(i);_.has(m)||_.set(m,new Map);const b=_.get(m);if(!b.has(g)){const _=i.createView({baseMipLevel:m,mipLevelCount:1,dimension:"2d",baseArrayLayer:g,arrayLayerCount:1,label:`mipmap_${m}_${g}_${i.label}`});b.set(g,_)}return b.get(g)}getBindGroup(i){if(!this.#me.has(i)){const{gpuDevice:m}=this.#v,g=m.createBindGroup({layout:this.#he,entries:[{binding:0,resource:this.#ue},{binding:1,resource:i}]});this.#me.set(i,g)}return this.#me.get(i)}clearCaches(i){if(i){if(this.#de.has(i)){const m=this.#de.get(i);for(const i of m.values())for(const m of i.values())this.#me.delete(m);this.#de.delete(i)}}else this.#de.clear(),this.#me.clear()}getMipmapPipeline(i){const{gpuDevice:m,resourceManager:g}=this.#v;let _=this.#ce[i];return _||(this.#fe||(this.#fe=g.createGPUShaderModule("MODULE_MIP_MAP",{code:"\r\nvar<private> pos:array<vec2<f32>,3>=array<vec2<f32>,3>(\rvec2<f32>(-1.0,-1.0),\rvec2<f32>(-1.0,3.0),\rvec2<f32>(3.0,-1.0)\r\n);\r\n\r\n\r\nstruct VertexOutput {\r@builtin(position)\rposition:vec4<f32>,\r\n\r@location(0)\rtexCoord:vec2<f32>,\r\n};\r\n\r\n\r\n@vertex\r\nfn vertexMain(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput {\rvar output:VertexOutput;\routput.texCoord=pos[vertexIndex] * vec2<f32>(0.5,-0.5) + vec2<f32>(0.5);\routput.position=vec4<f32>(pos[vertexIndex],0.0,1.0);\rreturn output;\r\n}\r\n\r\n\r\n@group(0) @binding(0)\r\nvar imgSampler:sampler;\r\n\r\n@group(0) @binding(1)\r\nvar img:texture_2d<f32>;\r\n\r\n\r\n@fragment\r\nfn fragmentMain(@location(0) texCoord:vec2<f32>) -> @location(0) vec4<f32> {\rreturn textureSample(img,imgSampler,texCoord);\r\n}\r\n"}),this.#he=g.createBindGroupLayout("FRAGMENT_BIND_GROUP_LAYOUT_NAME_MIP_MAP",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]}),this.#le=g.createGPUPipelineLayout("PIPELINE_DESCRIPTOR_FINAL_MIP_MAP",{bindGroupLayouts:[this.#he]})),_=m.createRenderPipeline({layout:this.#le,vertex:{module:this.#fe,entryPoint:"vertexMain"},fragment:{module:this.#fe,entryPoint:"fragmentMain",targets:[{format:i}]}}),this.#ce[i]=_),_}generateMipmap(i,m){const{gpuDevice:g}=this.#v,_=this.getMipmapPipeline(m.format);if("3d"==m.dimension||"1d"==m.dimension)throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");let b=i;const y=m.size[0],T=m.size[1],w=m.size[2]||1,P=m.usage&GPUTextureUsage.RENDER_ATTACHMENT;if(!P){const i={size:{width:Math.max(1,y>>>1),height:Math.max(1,T>>>1),depthOrArrayLayers:w},format:m.format,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,mipLevelCount:m.mipLevelCount-1};b=g.createTexture(i)}const $=g.createCommandEncoder({});for(let g=0;g<w;++g){let y=this.getTextureView(i,0,g),T=P?1:0;for(let i=1;i<m.mipLevelCount;++i){const i=this.getTextureView(b,T++,g),m=$.beginRenderPass({colorAttachments:[{view:i,clearValue:{r:0,g:0,b:0,a:0},loadOp:Lr.CLEAR,storeOp:Br.STORE}]}),w=this.getBindGroup(y);m.setPipeline(_),m.setBindGroup(0,w),m.draw(3,1,0,0),m.end(),y=i}}if(!P){const g={width:Math.max(1,y>>>1),height:Math.max(1,T>>>1),depthOrArrayLayers:w};for(let _=1;_<m.mipLevelCount;++_)$.copyTextureToTexture({texture:b,mipLevel:_-1},{texture:i,mipLevel:_},g),g.width=Math.max(1,g.width>>>1),g.height=Math.max(1,g.height>>>1)}return g.queue.submit([$.finish()]),P||(this.clearCaches(b),b.destroy()),i}}Object.freeze(MipmapGenerator);const isHexColor=i=>{const m=/^([A-Fa-f0-9]{3}){1,2}$/;return i.startsWith("#")?m.test(i.substring(1)):!!i.startsWith("0x")&&m.test(i.substring(2))},convertHexToRgb=(i,m=!1)=>{if("number"==typeof i&&(i=`#${i.toString(16)}`),isHexColor(i)){"#"===i.charAt(0)&&(i=i.substring(1)),3===i.length&&(i=i.charAt(0)+i.charAt(0)+i.charAt(1)+i.charAt(1)+i.charAt(2)+i.charAt(2));const g=parseInt("0x"+i),_=g>>16&255,b=g>>8&255,y=255&g;return m?[_,b,y]:{r:_,g:b,b:y}}throw Error(`from ${convertHexToRgb.constructor.name}:input value - ${i}/Only hex string allowed`)},convertRgbToHex=(i,m,g)=>{validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255);return`#${i.toString(16).padStart(2,"0").toUpperCase()}${m.toString(16).padStart(2,"0").toUpperCase()}${g.toString(16).padStart(2,"0").toUpperCase()}`},getFileExtension=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");const m=i.split("/"),g=m[m.length-1],_=g.lastIndexOf(".");return-1===_?"":g.substring(_+1).toLowerCase()},getFileName=(i,m=!0)=>{const g=i.substring(i.lastIndexOf("/")+1);return m?g:g.split(".").slice(0,-1).join(".")},getFilePath=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");return i.substring(0,i.lastIndexOf("/")+1)},calculateNormals=(i,m)=>{let g,_,b=[];for(g=0;g<i.length;g+=3)b[g+0]=0,b[g+1]=0,b[g+2]=0;for(g=0;g<m.length;g+=3){let y,T,w,P,$=[],H=[],q=[];for(y=3*m[g],T=3*m[g+1],w=3*m[g+2],$[0]=i[w+0]-i[T+0],$[1]=i[w+1]-i[T+1],$[2]=i[w+2]-i[T+2],H[0]=i[y+0]-i[T+0],H[1]=i[y+1]-i[T+1],H[2]=i[y+2]-i[T+2],q[0]=$[1]*H[2]-$[2]*H[1],q[1]=$[2]*H[0]-$[0]*H[2],q[2]=$[0]*H[1]-$[1]*H[0],_=0;_<3;_++)P=3*m[g+_],b[P+0]=b[P+0]+q[0],b[P+1]=b[P+1]+q[1],b[P+2]=b[P+2]+q[2]}for(g=0;g<i.length;g+=3){let i=[];i[0]=b[g+0],i[1]=b[g+1],i[2]=b[g+2];let m=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);0===m&&(m=1),i[0]=i[0]/m,i[1]=i[1]/m,i[2]=i[2]/m,b[g+0]=i[0],b[g+1]=i[1],b[g+2]=i[2]}return b},calculateVolume=i=>{const m=i.stride,g=i.data;let _=i.vertexCount,b=1/0,y=1/0,T=1/0,w=-1/0,P=-1/0,$=-1/0,H=0;for(;H<=_-4;H+=4){let i=H*m;const _=g[i],q=g[i+1],W=g[i+2];i=(H+1)*m;const ye=g[i],Ge=g[i+1],Ke=g[i+2];i=(H+2)*m;const Xe=g[i],je=g[i+1],Ye=g[i+2];i=(H+3)*m;const Ze=g[i],Je=g[i+1],Qe=g[i+2];b=Math.min(_,ye,Xe,Ze,b),y=Math.min(q,Ge,je,Je,y),T=Math.min(W,Ke,Ye,Qe,T),w=Math.max(_,ye,Xe,Ze,w),P=Math.max(q,Ge,je,Je,P),$=Math.max(W,Ke,Ye,Qe,$)}for(;H<_;H++){let i=H*m;const _=g[i],q=g[i+1],W=g[i+2];b=Math.min(_,b),y=Math.min(q,y),T=Math.min(W,T),w=Math.max(_,w),P=Math.max(q,P),$=Math.max(W,$)}const q=Math.max(Math.abs(b),Math.abs(w)),W=Math.max(Math.abs(y),Math.abs(P)),ye=Math.max(Math.abs(T),Math.abs($));return{volume:[w-b,P-y,$-T],minX:b,maxX:w,minY:y,maxY:P,minZ:T,maxZ:$,xSize:q,ySize:W,zSize:ye,geometryRadius:Math.max(q,W,ye)}},Ur=create$5(),computeViewFrustumPlanes=(i,m)=>{multiply$5(Ur,i,m);const g=[[Ur[3]-Ur[0],Ur[7]-Ur[4],Ur[11]-Ur[8],Ur[15]-Ur[12]],[Ur[3]+Ur[0],Ur[7]+Ur[4],Ur[11]+Ur[8],Ur[15]+Ur[12]],[Ur[3]+Ur[1],Ur[7]+Ur[5],Ur[11]+Ur[9],Ur[15]+Ur[13]],[Ur[3]-Ur[1],Ur[7]-Ur[5],Ur[11]-Ur[9],Ur[15]-Ur[13]],[Ur[3]-Ur[2],Ur[7]-Ur[6],Ur[11]-Ur[10],Ur[15]-Ur[14]],[Ur[3]+Ur[2],Ur[7]+Ur[6],Ur[11]+Ur[10],Ur[15]+Ur[14]]];for(let i=0;i<6;i++){const m=g[i],_=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]);m[0]/=_,m[1]/=_,m[2]/=_,m[3]/=_}return g},formatBytes=(i,m=2)=>{if(("number"!=typeof i||i<0||Number.isNaN(i)||!Number.isInteger(i))&&consoleAndThrowError("Invalid input:'bytes' must be a uint"),0===i)return"0 Bytes";const g=m<0?0:m,_=Math.floor(Math.log(i)/Math.log(1024));return parseFloat((i/Math.pow(1024,_)).toFixed(g))+" "+["Bytes","KB","MB","GB"][_]},Dr=create$5(),Ar={x:0,y:0,z:0,w:0},getScreenPoint=(i,m)=>{"View"!==i?.constructor?.name&&consoleAndThrowError("allow only View3D instance"),identity$2(Dr);const{projectionMatrix:g,rawCamera:_,pixelRectArray:b}=i;return multiply$5(Dr,g,_.modelMatrix),multiply$5(Dr,Dr,m),Ar.z=Dr[14],Ar.w=Dr[15],Ar.x=.5*Dr[12]/Ar.w+.5,Ar.y=.5*Dr[13]/Ar.w+.5,[(b[0]+Ar.x*b[2])/window.devicePixelRatio,(b[1]+(1-Ar.y)*b[3])/window.devicePixelRatio]},kr=create$5(),localToWorld=(i,m,g,_)=>(validateNumber(m),validateNumber(g),validateNumber(_),identity$2(kr),translate$1(kr,kr,[m,g,_]),multiply$5(kr,i,kr),[kr[12],kr[13],kr[14]]),quaternionToRotationMat4=(i,m)=>{let g=i[0],_=i[1],b=i[2],y=i[3],T=g+g,w=_+_,P=b+b,$=g*T,H=g*w,q=g*P,W=_*w,ye=_*P,Ge=b*P,Ke=y*T,Xe=y*w,je=y*P;return m[0]=1-(W+Ge),m[4]=H-je,m[8]=q+Xe,m[1]=H+je,m[5]=1-($+Ge),m[9]=ye-Ke,m[2]=q-Xe,m[6]=ye+Ke,m[10]=1-($+W),m[3]=0,m[7]=0,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1,m};let Or,Nr,Fr,Gr,Vr,$r,Hr=create$4(),zr=create$5(),Kr=create$5();function sortTransparentObjects(i,m){const g={},{x:_,y:b,z:y}=i;return m.sort((i,m)=>{if(!g[i.uuid]){const m=i.x-_,T=i.y-b,w=i.z-y;g[i.uuid]=m*m+T*T+w*w}if(!g[m.uuid]){const i=m.x-_,T=m.y-b,w=m.z-y;g[m.uuid]=i*i+T*T+w*w}return g[m.uuid]-g[i.uuid]})}const qr=create$5(),Wr=create$5(),worldToLocal=(i,m,g,_)=>(validateNumber(m),validateNumber(g),validateNumber(_),identity$2(qr),identity$2(Wr),translate$1(qr,qr,[m,g,_]),multiply$5(Wr,qr,i),[Wr[0]*m+Wr[1]*g+Wr[2]*_+Wr[3],Wr[4]*m+Wr[5]*g+Wr[6]*_+Wr[7],Wr[8]*m+Wr[9]*g+Wr[10]*_+Wr[11]]),Xr=console.log.bind(console);var jr=Object.freeze({__proto__:null,calculateNormals:calculateNormals,calculateTextureByteSize:calculateTextureByteSize,calculateVolume:calculateVolume,computeViewFrustumPlanes:computeViewFrustumPlanes,convertHexToRgb:convertHexToRgb,convertRgbToHex:convertRgbToHex,createUUID:createUUID,formatBytes:formatBytes,getFileExtension:getFileExtension,getFileName:getFileName,getFilePath:getFilePath,getMipLevelCount:getMipLevelCount,getScreenPoint:getScreenPoint,keepLog:Xr,localToWorld:localToWorld,matToEuler:mat4ToEuler,quaternionToRotationMat4:quaternionToRotationMat4,screenToWorld:(i,m)=>{const{rawCamera:g}=m;return Or=2*i[0]/i[2]-1,Nr=-2*i[1]/i[3]+1,Fr=1,multiply$5(Kr,m.projectionMatrix,g.modelMatrix),$r=clone$5(Kr),invert$2($r,$r),Hr=fromValues$4(Or,Nr,1),identity$2(zr),translate$1(zr,zr,Hr),multiply$5($r,$r,zr),Hr[0]=$r[12],Hr[1]=$r[13],Hr[2]=$r[14],Gr=Kr[12]*Or+Kr[13]*Nr+Kr[15],0!==Gr&&(Vr=1/Gr,Hr[0]/=Vr,Hr[1]/=Vr,Hr[2]/=Vr,Hr[0]=Hr[0]+g.x,Hr[1]=Hr[1]+g.y,Hr[2]=Hr[2]+g.z),[Hr[0],Hr[1],Hr[2]]},sortTransparentObjects:sortTransparentObjects,uuidToUint:uuidToUint,worldToLocal:worldToLocal});class CubeTexture extends ManagedResourceBase{static defaultViewDescriptor={dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6};#K;#pe;#W;#X;#j;#ge;#Z=0;#Q;#ee;#te;constructor(i,m,g=!0,_,b,y){super(i,"managedCubeTextureState"),this.#ee=_,this.#te=b,this.#j=g,this.#Q=y||navigator.gpu.getPreferredCanvasFormat(),this.#pe=m,this.#W=m?.toString();const{table:T}=this.targetResourceManagedState;let w;for(const i in T)if(T[i].cacheKey===this.#W){w=T[i];break}if(w){const i=T[w.uuid].texture;this.#ee?.(i)}else this.srcList=m,this.#re()}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#X}}get cacheKey(){return this.#W}get videoMemorySize(){return this.#Z}get gpuTexture(){return this.#K}get mipLevelCount(){return this.#X}get srcList(){return this.#pe}set srcList(i){this.#pe=i,this.#W=i?.toString()||createUUID(),this.#pe?.length&&this.#ne(this.#pe)}get useMipmap(){return this.#j}set useMipmap(i){this.#j=i,this.#ie()}destroy(){const i=this.#K;this.#ae(null),this.__fireListenerList(!0),this.#pe=null,this.#W=null,this.#se(),i&&i.destroy()}setGPUTextureDirectly(i,m,g=!0){this.#K&&(this.#K.destroy(),this.targetResourceManagedState.videoMemory-=this.#Z),Xr("gpuTexture",i),this.#K=i,this.#j=g,this.#X=i.mipLevelCount,this.#W=m||`direct_${this.uuid}`;const _={size:[i.width,i.height,i.depthOrArrayLayers],format:i.format,usage:i.usage,mipLevelCount:this.#X};this.#Z=calculateTextureByteSize(_),this.targetResourceManagedState.videoMemory+=this.#Z,this.__fireListenerList()}#ae(i){this.#K=i,i||(this.#ge=null),this.__fireListenerList()}#re(){basicRegisterResource(this,new ResourceStateCubeTexture(this))}#se(){basicUnregisterResource(this)}#ie(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#K&&(this.#K.destroy(),this.#K=null),this.#X=1;{const m=this.#ge,_=m[0],{width:b,height:y}=_,T={size:[b,y,6],format:this.#Q,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`cubeTexture_${this.#pe?.toString()||this.uuid}`};this.#j&&(this.#X=getMipLevelCount(b,y),T.mipLevelCount=this.#X,T.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const w=imageBitmapToGPUTexture(i,m,T);this.targetResourceManagedState.videoMemory-=this.#Z,this.#Z=calculateTextureByteSize(T),this.targetResourceManagedState.videoMemory+=this.#Z,this.#j&&g.generateMipmap(w,T),this.#ae(w)}}async#ne(i){this.#ge=await async function(i){const m=i.map(i=>loadAndCreateBitmapImage(i));return await Promise.all(m)}(i);try{this.#ie(),this.#ee?.(this)}catch(i){console.error(i),this.#te?.(i)}}}Object.freeze(CubeTexture);const Yr={TILE_COUNT_X:32,TILE_COUNT_Y:32,TILE_COUNT_Z:48,WORKGROUP_SIZE_X:8,WORKGROUP_SIZE_Y:4,WORKGROUP_SIZE_Z:8,MAX_LIGHTS_PER_CLUSTER:100,MAX_CLUSTER_LIGHTS:1024,getTotalTileSize:()=>Yr.TILE_COUNT_X*Yr.TILE_COUNT_Y*Yr.TILE_COUNT_Z,getClusterLightsBufferSize:()=>{const i=Yr.getTotalTileSize();return 8*i+8*Yr.MAX_LIGHTS_PER_CLUSTER*i+4},getDispatchSize:()=>[Math.ceil(Yr.TILE_COUNT_X/Yr.WORKGROUP_SIZE_X),Math.ceil(Yr.TILE_COUNT_Y/Yr.WORKGROUP_SIZE_Y),Math.ceil(Yr.TILE_COUNT_Z/Yr.WORKGROUP_SIZE_Z)]};Object.freeze(Yr);const Zr=Object.freeze({SYSTEM_UNIFORM:"struct DirectionalLight {\r\n\t direction:vec3<f32>,\r\n\t color:vec3<f32>,\r\n\t intensity:f32,\r\n};\r\nstruct AmbientLight {\r\n\t color:vec3<f32>,\r\n\t intensity:f32\r\n};\r\n\r\nstruct Camera {\r\n\t cameraMatrix:mat4x4<f32>,\r\n\t cameraPosition:vec3<f32>,\r\n\t nearClipping:f32,\rfarClipping:f32\r\n};\r\n\r\nstruct SystemUniform {\r\n\t projectionMatrix:mat4x4<f32>,\r\n\t inverseProjectionMatrix:mat4x4<f32>,\r\n\t projectionCameraMatrix:mat4x4<f32>,\r\n\t camera:Camera,\r\n\t resolution:vec2<f32>,\r\n\t viewPosition:vec2<f32>,\r\n\t \r\n\t directionalLightCount:u32,\r\n\t directionalLights:array<DirectionalLight,3>,\r\n\t \r\n\t directionalLightProjectionViewMatrix:mat4x4<f32>,\r\n\t directionalLightProjectionMatrix:mat4x4<f32>,\r\n\t directionalLightViewMatrix:mat4x4<f32>,\r\n\t \r\n\t shadowDepthTextureSize:u32,\r\n\t bias:f32,\r\n\t \r\n\t ambientLight:AmbientLight,\r\n\r\n\t time:f32,\r\n\t \r\n\t useIblTexture:u32,\r\n\t isView3D:u32\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> systemUniforms:SystemUniform;\r\n@group(0) @binding(1) var directionalShadowMapSampler:sampler_comparison;\r\n@group(0) @binding(2) var directionalShadowMap:texture_depth_2d;\r\n@group(0) @binding(3) var iblTextureSampler:sampler;\r\n\r\n@group(0) @binding(7) var renderPath1ResultTextureSampler:sampler;\r\n@group(0) @binding(8) var renderPath1ResultTexture:texture_2d<f32>;\r\n@group(0) @binding(9) var packedTextureSampler:sampler;\r\n@group(0) @binding(10) var ibl_environmentTexture:texture_cube<f32>;\r\n@group(0) @binding(11) var ibl_irradianceTexture:texture_cube<f32>;\r\n\r\nconst clusterLight_indicesLength:u32=u32(REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu * REDGPU_DEFINE_TOTAL_TILESu);\r\nconst clusterLight_tileCount=vec3<u32>(REDGPU_DEFINE_TILE_COUNT_Xu,REDGPU_DEFINE_TILE_COUNT_Yu,REDGPU_DEFINE_TILE_COUNT_Zu);\r\n\r\nstruct ClusterLights {\roffset:u32,\rcount:u32\r\n};\r\nstruct ClusterLightsGroup {\roffset:atomic<u32>,\rlights:array<ClusterLights,REDGPU_DEFINE_TOTAL_TILES>,\rindices:array<u32,clusterLight_indicesLength>\r\n};\r\nstruct ClusterLight_ClusterCube {\rminAABB:vec4<f32>,\rmaxAABB:vec4<f32>\r};\r\nstruct ClusterLight_Clusters {\rcubeList:array<ClusterLight_ClusterCube,REDGPU_DEFINE_TOTAL_TILES>\r\n};\r\n\r\nfn linearDepth(depthSample:f32) -> f32 {\rreturn systemUniforms.camera.farClipping*systemUniforms.camera.nearClipping/fma(depthSample,systemUniforms.camera.nearClipping-systemUniforms.camera.farClipping,systemUniforms.camera.farClipping);\r\n}\r\nfn getClusterLightClusterIndex(fragCoord:vec4<f32>) -> u32 {\rlet tile=getClusterLightTile(fragCoord);\rreturn tile.x +\rtile.y * clusterLight_tileCount.x +\rtile.z * clusterLight_tileCount.x * clusterLight_tileCount.y;\r\n\r\n}\r\nfn getClusterLightTile(fragCoord:vec4<f32>) -> vec3<u32> {\rlet sliceScale=f32(clusterLight_tileCount.z)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping);\rlet sliceBias=-(f32(clusterLight_tileCount.z) * log2(systemUniforms.camera.nearClipping)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping));\rlet zTile=u32(max(log2(linearDepth(fragCoord.z)) * sliceScale + sliceBias,0.0));\rreturn vec3<u32>(u32(fragCoord.x/(systemUniforms.resolution.x/f32(clusterLight_tileCount.x))),\ru32(fragCoord.y/(systemUniforms.resolution.y/f32(clusterLight_tileCount.y))),\rzTile);\r\n}\r\n\r\nstruct ClusterLight {\rposition:vec3<f32>,radius:f32,\rcolor:vec3<f32>, intensity:f32,\risSpotLight:f32, directionX:f32, directionY:f32, directionZ:f32,\routerCutoff:f32, innerCutoff:f32,\r\n};\r\nstruct ClusterLightList {\rcount:vec4<f32>,\rlights:array<ClusterLight>\r\n};\r\n@group(0) @binding(5) var<storage> clusterLightList:ClusterLightList;\r\n@group(0) @binding(6) var<storage,read_write> clusterLightGroup:ClusterLightsGroup;\r\n",calcTintBlendMode:"fn calcTintBlendMode(baseColor:vec4<f32>,tintBlendMode:u32,tint:vec4<f32>) -> vec4<f32> {\rvar tintedColor:vec3<f32>;\rswitch (tintBlendMode) {\rcase 0u:{ \rreturn vec4<f32>(mix(baseColor.rgb,tint.rgb,tint.a),baseColor.a);\r}\rcase 1u:{ \rtintedColor=baseColor.rgb * tint.rgb;\r}\rcase 2u:{ \rtintedColor=max(baseColor.rgb,tint.rgb);\r}\rcase 3u:{ \rtintedColor=1.0 - (1.0 - baseColor.rgb) * (1.0 - tint.rgb);\r}\rcase 4u:{ \rtintedColor=clamp(baseColor.rgb + tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0));\r}\rcase 5u:{ \rtintedColor=clamp(baseColor.rgb - tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0));\r}\rcase 6u:{ \rtintedColor=min(baseColor.rgb,tint.rgb);\r}\rcase 7u:{ \rtintedColor=mix(\r2.0 * baseColor.rgb * tint.rgb,\r1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb),\rstep(vec3<f32>(0.5),baseColor.rgb)\r);\r}\rcase 8u:{ \rtintedColor=clamp(baseColor.rgb/(1.0 - tint.rgb),vec3<f32>(0.0),vec3<f32>(1.0));\r}\rcase 9u:{ \rtintedColor=1.0 - clamp((1.0 - baseColor.rgb)/tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0));\r}\rcase 10u:{ \rtintedColor=mix(\r2.0 * baseColor.rgb * tint.rgb,\r1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb),\rstep(vec3<f32>(0.5),tint.rgb)\r);\r}\rcase 11u:{ \rtintedColor=mix(\rbaseColor.rgb * (tint.rgb + tint.rgb - vec3<f32>(1.0)),\rbaseColor.rgb + tint.rgb - baseColor.rgb * tint.rgb,\rstep(vec3<f32>(0.5),tint.rgb)\r);\r}\rcase 12u:{ \rtintedColor=abs(baseColor.rgb - tint.rgb);\r}\rcase 13u:{ \rtintedColor=baseColor.rgb + tint.rgb - 2.0 * baseColor.rgb * tint.rgb;\r}\rcase 14u:{ \rtintedColor=clamp(baseColor.rgb/tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0));\r}\rcase 15u:{ \rtintedColor=mix(\rclamp(baseColor.rgb/(1.0 - (tint.rgb - vec3<f32>(0.5)) * 2.0),vec3<f32>(0.0),vec3<f32>(1.0)),\r1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb * 2.0),vec3<f32>(0.0),vec3<f32>(1.0)),\rstep(vec3<f32>(0.5),tint.rgb)\r);\r}\rcase 16u:{ \rtintedColor=clamp(baseColor.rgb + tint.rgb - vec3<f32>(1.0),vec3<f32>(0.0),vec3<f32>(1.0));\r}\rcase 17u:{ \rtintedColor=mix(\rmin(baseColor.rgb,2.0 * tint.rgb),\rmax(baseColor.rgb,2.0 * tint.rgb - vec3<f32>(1.0)),\rstep(vec3<f32>(0.5),tint.rgb)\r);\r}\rcase 18u:{ \rlet baseHsl=rgbToHsl(baseColor.rgb);\rlet tintHsl=rgbToHsl(tint.rgb);\rtintedColor=hslToRgb(vec3<f32>(baseHsl.x,tintHsl.y,baseHsl.z));\r}\rcase 19u:{ \rlet baseHsl=rgbToHsl(baseColor.rgb);\rlet tintHsl=rgbToHsl(tint.rgb);\rtintedColor=hslToRgb(vec3<f32>(tintHsl.x,baseHsl.y,baseHsl.z));\r}\rcase 20u:{ \rlet baseHsl=rgbToHsl(baseColor.rgb);\rlet tintHsl=rgbToHsl(tint.rgb);\rtintedColor=hslToRgb(vec3<f32>(baseHsl.x,baseHsl.y,tintHsl.z));\r}\rcase 21u:{ \rlet baseHsl=rgbToHsl(baseColor.rgb);\rlet tintHsl=rgbToHsl(tint.rgb);\rtintedColor=hslToRgb(vec3<f32>(tintHsl.x,tintHsl.y,baseHsl.z));\r}\rcase 22u:{ \rtintedColor=1.0 - abs(1.0 - baseColor.rgb - tint.rgb);\r}\rdefault:{\rtintedColor=baseColor.rgb;\r}\r}\r\n\rreturn vec4<f32>(tintedColor,baseColor.a * tint.a);\r\n}\r\n\r\n\r\nfn rgbToHsl(rgb:vec3<f32>) -> vec3<f32> {\rlet maxVal:f32=max(max(rgb.r,rgb.g),rgb.b);\rlet minVal:f32=min(min(rgb.r,rgb.g),rgb.b);\rlet delta:f32=maxVal - minVal;\r\n\rlet lightness:f32=(maxVal + minVal) * 0.5;\r\n\rif (delta==0.0) {\rreturn vec3<f32>(0.0,0.0,lightness);\r}\r\n\r\rvar saturation:f32;\rif (lightness < 0.5) {\rsaturation=delta/(maxVal + minVal);\r} else {\rsaturation=delta/(2.0 - maxVal - minVal);\r}\r\n\r\rvar hue:f32=0.0;\rif (rgb.r==maxVal) {\rhue=(rgb.g - rgb.b)/delta;\rif (rgb.g < rgb.b) {\rhue +=6.0;\r}\r} else if (rgb.g==maxVal) {\rhue=(rgb.b - rgb.r)/delta + 2.0;\r} else { \rhue=(rgb.r - rgb.g)/delta + 4.0;\r}\r\n\rhue=hue/6.0;\r\n\rreturn vec3<f32>(hue,saturation,lightness);\r\n}\r\n\r\nfn hslToRgb(hsl:vec3<f32>) -> vec3<f32> {\rlet h=hsl.x;\rlet s=hsl.y;\rlet l=hsl.z;\r\n\rif (s==0.0) {\r\rreturn vec3<f32>(l,l,l);\r}\r\n\r\rvar q:f32;\rif (l < 0.5) {\rq=l * (1.0 + s);\r} else {\rq=l + s - l * s;\r}\r\n\rlet p=2.0 * l - q;\r\n\r\rvar r:f32;\rvar g:f32;\rvar b:f32;\r\n\rfor (var i:i32=0;i < 3;i=i + 1) {\rvar t:f32;\rif (i==0) {\rt=h + 1.0/3.0;\r} else if (i==1) {\rt=h;\r} else {\rt=h - 1.0/3.0;\r}\r\n\rif (t < 0.0) {\rt=t + 1.0;\r}\rif (t > 1.0) {\rt=t - 1.0;\r}\r\n\rvar color:f32;\rif (t < 1.0/6.0) {\rcolor=p + (q - p) * 6.0 * t;\r} else if (t < 1.0/2.0) {\rcolor=q;\r} else if (t < 2.0/3.0) {\rcolor=p + (q - p) * (2.0/3.0 - t) * 6.0;\r} else {\rcolor=p;\r}\r\n\rif (i==0) {\rr=color;\r} else if (i==1) {\rg=color;\r} else {\rb=color;\r}\r}\r\n\rreturn vec3<f32>(r,g,b);\r\n}",calcDisplacements:"fn calcDisplacementPosition(input_position:vec3<f32>,input_vertexNormal:vec3<f32>,displacementTexture:texture_2d<f32>,displacementTextureSampler:sampler,displacementScale:f32,input_uv:vec2<f32>,mipLevel:f32) -> vec3<f32> {\rlet displacementSample=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,mipLevel).r;\rlet scaledDisplacement=(displacementSample - 0.5) * displacementScale;\rlet displacedPosition=input_position + input_vertexNormal * scaledDisplacement;\rreturn displacedPosition;\r\n}\r\nfn calcDisplacementNormal(input_vertexNormal:vec3<f32>,displacementTexture:texture_2d<f32>,displacementTextureSampler:sampler,displacementScale:f32,input_uv:vec2<f32>,mipLevel:f32) -> vec3<f32> {\rlet textureSize=textureDimensions(displacementTexture);\rlet texelSizeX=1.0/f32(textureSize.x);\rlet texelSizeY=1.0/f32(textureSize.y);\r\n\rlet displacementRight=textureSampleLevel(displacementTexture,displacementTextureSampler,\rinput_uv + vec2<f32>(texelSizeX,0.0),mipLevel).r;\rlet displacementLeft=textureSampleLevel(displacementTexture,displacementTextureSampler,\rinput_uv - vec2<f32>(texelSizeX,0.0),mipLevel).r;\rlet displacementUp=textureSampleLevel(displacementTexture,displacementTextureSampler,\rinput_uv + vec2<f32>(0.0,texelSizeY),mipLevel).r;\rlet displacementDown=textureSampleLevel(displacementTexture,displacementTextureSampler,\rinput_uv - vec2<f32>(0.0,texelSizeY),mipLevel).r;\r\n\rlet gradientX=((displacementRight - 0.5) - (displacementLeft - 0.5)) * displacementScale * 0.2;\rlet gradientY=((displacementUp - 0.5) - (displacementDown - 0.5)) * displacementScale * 0.2;\r\n\rlet up=vec3<f32>(0.0,1.0,0.0);\rlet tangent=normalize(cross(up,input_vertexNormal));\rlet bitangent=normalize(cross(input_vertexNormal,tangent));\r\n\rlet tangentSpaceNormal=normalize(vec3<f32>(gradientX,gradientY,1.0));\r\n\rlet objectSpaceNormal=tangentSpaceNormal.x * tangent +\rtangentSpaceNormal.y * bitangent +\rtangentSpaceNormal.z * input_vertexNormal;\r\n\rreturn normalize(objectSpaceNormal);\r\n\r\n}\r\n",drawDirectionalShadowDepth:"struct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {\rvar output:OutputShadowData;\rlet u_useDisplacementTexture=vertexUniforms.useDisplacementTexture==1u;\r\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_displacementScale=vertexUniforms.displacementScale;\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\rvar position:vec4<f32>;\rposition=u_modelMatrix * vec4<f32>(input_position,1.0);\r\n\rif (u_useDisplacementTexture) {\rlet distance=distance(position.xyz,u_cameraPosition);\rlet mipLevel=(distance/maxDistance) * maxMipLevel;\rlet displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);\rposition=u_modelMatrix * vec4<f32>(displacedPosition,1.0);\r}\routput.position=u_directionalLightProjectionViewMatrix * position;\rreturn output;\r\n}\r\n",getBillboardMatrix:"fn getBillboardMatrix(cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>) -> mat4x4<f32> {\r\rlet scaleX=length(vec3<f32>(modelMatrix[0].xyz));\rlet scaleY=length(vec3<f32>(modelMatrix[1].xyz));\rlet scaleZ=length(vec3<f32>(modelMatrix[2].xyz));\r\n\r\rlet scaleMatrix=mat4x4<f32>(\rvec4<f32>(scaleX,0.0,0.0,0.0),\rvec4<f32>(0.0,scaleY,0.0,0.0),\rvec4<f32>(0.0,0.0,scaleZ,0.0),\rvec4<f32>(0.0,0.0,0.0,1.0)\r);\r\n\r\rvar resultMatrix=cameraMatrix * modelMatrix;\rresultMatrix[0][0]=1.0;resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0;\rresultMatrix[1][0]=0.0;resultMatrix[1][1]=1.0;resultMatrix[1][2]=0.0;\rresultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=1.0;\r\n\r\rreturn resultMatrix * scaleMatrix;\r\n}\r\nfn getBillboardMatrixNoScaleRatio( cameraMatrix:mat4x4<f32>, modelMatrix:mat4x4<f32>)-> mat4x4<f32>{\rvar resultMatrix=cameraMatrix * modelMatrix;\rresultMatrix[0][0]=modelMatrix[0][0];resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0;\rresultMatrix[1][0]=0.0;resultMatrix[1][1]=modelMatrix[1][1];resultMatrix[1][2]=0.0;\rresultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=modelMatrix[2][2];\r\n\rreturn resultMatrix;\r\n}\r\n",extractScaleAndTranslation:"fn extractScaleAndTranslation(modelMatrix:mat4x4<f32>) -> mat4x4<f32> {\r\rlet scaleX=length(vec3<f32>(modelMatrix[0].xyz));\rlet scaleY=length(vec3<f32>(modelMatrix[1].xyz));\rlet scaleZ=length(vec3<f32>(modelMatrix[2].xyz));\r\n\r\rlet scaleMatrix=mat4x4<f32>(\rvec4<f32>(scaleX,0.0,0.0,0.0),\rvec4<f32>(0.0,scaleY,0.0,0.0),\rvec4<f32>(0.0,0.0,scaleZ,0.0),\rvec4<f32>(0.0,0.0,0.0,1.0)\r);\r\n\r\rreturn mat4x4<f32>(\rscaleMatrix[0],\rscaleMatrix[1],\rscaleMatrix[2],\rmodelMatrix[3] \r);\r\n}\r\n\r\n",calcDirectionalShadowVisibility:"fn calcDirectionalShadowVisibility(\rdirectionalShadowMap:texture_depth_2d,\rdirectionalShadowMapSampler:sampler_comparison,\rshadowDepthTextureSize:u32,\rbias:f32,\rshadowPos:vec3<f32>\r\n) -> f32 {\rlet oneOverShadowDepthTextureSize=1.0/f32(shadowDepthTextureSize);\rlet shadowDepth=clamp(shadowPos.z,0.0,1.0);\r\n\rvar visibility:f32=0.0;\r\n\rfor (var y=-1;y <=1;y++) {\rfor (var x=-1;x <=1;x++) {\rlet offset=vec2f(vec2(x,y)) * oneOverShadowDepthTextureSize;\rlet tUV=shadowPos.xy + offset;\r\n\rlet sampleVisibility=textureSampleCompare(\rdirectionalShadowMap,\rdirectionalShadowMapSampler,\rtUV,\rshadowDepth - bias\r);\r\n\rif (tUV.x < 0.0 || tUV.x > 1.0 || tUV.y < 0.0 || tUV.y > 1.0) {\rvisibility +=1.0;\r} else {\rvisibility +=sampleVisibility;\r}\r}\r}\r\n\rvisibility/=9.0;\r\n\rlet depthFactor=shadowDepth;\r\n\rlet minVisibility=0.2 + depthFactor * 0.6;\r\n\rreturn max(visibility,minVisibility);\r\n}\r\n",drawPicking:"\r\n@fragment\r\nfn picking(inputData:InputData) -> @location(0) vec4<f32> {\rvar finalColor:vec4<f32>=inputData.pickingId;\rreturn finalColor;\r\n}\r\n",normalFunctions:"\r\nfn cotangent_frame( N:vec3<f32>, p:vec3<f32>, uv:vec2<f32>) -> mat3x3<f32>{\rlet dp1:vec3<f32>=dpdx( p );\rlet dp2:vec3<f32>=dpdy( p );\rlet duv1:vec2<f32>=dpdx( uv );\rlet duv2:vec2<f32>=dpdy( uv );\r\n\rlet dp2perp:vec3<f32>=cross( dp2,N );\rlet dp1perp:vec3<f32>=cross( N,dp1 );\rlet T:vec3<f32>=dp2perp * duv1.x + dp1perp * duv2.x;\rlet B:vec3<f32>=dp2perp * duv1.y + dp1perp * duv2.y;\rlet invmax:f32=inverseSqrt( max( dot(T,T),dot(B,B) ) );\rreturn mat3x3<f32>( T * invmax,B * invmax,N );\r\n}\r\nfn perturb_normal( N:vec3<f32>, V:vec3<f32>, texcoord:vec2<f32>, normalColor:vec3<f32>,normalPower:f32 ) -> vec3<f32> {\rvar map:vec3<f32>=normalColor;\rmap= map * 255./127. - 128./127.;\rmap=vec3<f32>(map.xy * -normalPower,map.z);\rlet TBN:mat3x3<f32>=cotangent_frame(N,V,texcoord);\rreturn normalize(TBN * map);\r\n}\r\n"});Object.freeze(Zr);const Jr=Object.keys(Zr).join("|"),Qr=new RegExp(`#redgpu_include (${Jr})`,"g"),parseIncludeWGSL=i=>i.replace(Qr,(i,m)=>Zr[m]||i).replace(/REDGPU_DEFINE_TILE_COUNT_X/g,Yr.TILE_COUNT_X.toString()).replace(/REDGPU_DEFINE_TILE_COUNT_Y/g,Yr.TILE_COUNT_Y.toString()).replace(/REDGPU_DEFINE_TILE_COUNT_Z/g,Yr.TILE_COUNT_Z.toString()).replace(/REDGPU_DEFINE_TOTAL_TILES/g,Yr.getTotalTileSize().toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_X/g,Yr.WORKGROUP_SIZE_X.toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_Y/g,Yr.WORKGROUP_SIZE_Y.toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_Z/g,Yr.WORKGROUP_SIZE_Z.toString()).replace(/REDGPU_DEFINE_WORKGROUP_SIZE_Z/g,Yr.WORKGROUP_SIZE_Z.toString()).replace(/REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTER/g,Yr.MAX_LIGHTS_PER_CLUSTER.toString());class ResourceState{table={};videoMemory=0;length=0;constructor(){}}var en;Object.freeze(ResourceState),function(i){i.GPUShaderModule="GPUShaderModule",i.GPUBindGroupLayout="GPUBindGroupLayout",i.GPUPipelineLayout="GPUPipelineLayout"}(en||(en={}));class ResourceManager extends ResourceBase{static PRESET_GPUBindGroupLayout_System="PRESET_GPUBindGroupLayout_System";static PRESET_VERTEX_GPUBindGroupLayout_Instancing="PRESET_VERTEX_GPUBindGroupLayout_Instancing";static PRESET_VERTEX_GPUBindGroupLayout="PRESET_VERTEX_GPUBindGroupLayout";static PRESET_VERTEX_GPUBindGroupLayout_SKIN="PRESET_VERTEX_GPUBindGroupLayout_SKIN";#xe=new ImmutableKeyMap([[en.GPUShaderModule,new Map],[en.GPUBindGroupLayout,new Map],[en.GPUPipelineLayout,new Map]]);#_e=new ResourceState;#ve=new ResourceState;#be=new ResourceState;#ye=new ResourceState;#Te=new ResourceState;#Se=new ResourceState;#we=new ResourceState;#Me={};#Re;#Pe;#Ce;#Ie;constructor(i){super(i),this.#Ce=new MipmapGenerator(i),this.#Ee()}get basicSampler(){return this.#Ie}get mipmapGenerator(){return this.#Ce}get cachedBufferState(){return this.#Me}get emptyBitmapTextureView(){return this.#Re}get emptyCubeTextureView(){return this.#Pe}get managedBitmapTextureState(){return this.#_e}get managedCubeTextureState(){return this.#ve}get managedHDRTextureState(){return this.#be}get managedUniformBufferState(){return this.#ye}get managedVertexBufferState(){return this.#Te}get managedIndexBufferState(){return this.#Se}get managedStorageBufferState(){return this.#we}get resources(){return this.#xe}createGPUShaderModule(i,m){return this.#Le(i,m,m=>this.#Be(i,m),en.GPUShaderModule)}getGPUShaderModule(i){return this.#Ue(i,en.GPUShaderModule)}deleteGPUShaderModule(i){this.#De(i,en.GPUShaderModule)}createBindGroupLayout(i,m){return this.#Le(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createBindGroupLayout(m)),en.GPUBindGroupLayout)}getGPUBindGroupLayout(i){return this.#Ue(i,en.GPUBindGroupLayout)}deleteGPUBindGroupLayout(i){this.#De(i,en.GPUBindGroupLayout)}createGPUPipelineLayout(i,m){return this.#Le(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createPipelineLayout(m)),en.GPUPipelineLayout)}getGPUPipelineLayout(i){return this.#Ue(i,en.GPUPipelineLayout)}deleteGPUPipelineLayout(i){this.#De(i,en.GPUPipelineLayout)}#Ee(){const{gpuDevice:i}=this.redGPUContext;{const m=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"emptyBitmapTexture"});this.#Re=m.createView({label:m.label});const g=new Uint8Array([0,0,0,0]);i.queue.writeTexture({texture:m},g,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});const _=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:6},format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"emptyCubeTexture"});this.#Pe=_.createView(CubeTexture.defaultViewDescriptor);const b=new Uint8Array([0,0,0,0]);for(let m=0;m<6;m++)i.queue.writeTexture({texture:_,origin:{x:0,y:0,z:m}},b,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});this.#Ie=new Sampler(this.redGPUContext)}this.createBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:6,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:9,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}},{binding:3,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]})}#Ae(i){return this.#xe.get(i)}#Be(i,m){const{code:g}=m,_=parseIncludeWGSL(g),b=this.redGPUContext.gpuDevice.createShaderModule({...m,code:_});return this.#Ae(en.GPUShaderModule).set(i,b),b}#ke(i,m){if(!i)throw new Error("Name is required");return this.#Ae(m)}#Le(i,m,g,_){const b=this.#ke(i,_);if(b.has(i))return b.get(i);m.label||(m.label=i);const y=g(m);return b.set(i,y),y}#Ue(i,m){return this.#ke(i,m).get(i)}#De(i,m){const g=this.#ke(i,m);if(!g.has(i))throw new Error(`${m} with name ${i} doesn't exist.`);g.delete(i)}}Object.freeze(BitmapTexture);class ImmutableKeyMap extends Map{constructor(i=[]){super(),i?.forEach(([i,m])=>super.set(i,m))}set(i,m){if(this.has(i))throw new Error("Cannot change the value of an existing key");return super.set(i,m)}}const createMeshVertexUniformBuffers=(i,m=!1)=>{const{gpuRenderInfo:g,redGPUContext:_}=i,{resourceManager:b}=_,y=b.getGPUBindGroupLayout(m?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout),T=new ArrayBuffer(g.vertexUniformInfo.arrayBufferByteLength),w=new UniformBuffer(_,T,i.name);g.vertexBindGroupLayout=y,g.vertexUniformBuffer=w};class ColorRGB{#Oe;#Ne;#Fe;#Ge;constructor(i=255,m=255,g=255,_=void 0){this.#Ve(i,m,g),this.#$e(i,m,g),_&&(this.#Ge=_)}get r(){return this.#Oe}set r(i){validateUintRange(i,0,255),this.#Oe=i,this.#Ge?.()}get g(){return this.#Ne}set g(i){validateUintRange(i,0,255),this.#Ne=i,this.#Ge?.()}get b(){return this.#Fe}set b(i){validateUintRange(i,0,255),this.#Fe=i,this.#Ge?.()}get rgb(){return[this.#Oe,this.#Ne,this.#Fe]}get rgbNormal(){return[this.#Oe/255,this.#Ne/255,this.#Fe/255]}get hex(){return convertRgbToHex(this.#Oe,this.#Ne,this.#Fe)}setColorByRGB(i,m,g){this.#Ve(i,m,g),this.#$e(i,m,g)}setColorByHEX(i){const{r:m,g:g,b:_}=convertHexToRgb(i);this.#$e(m,g,_)}setColorByRGBString(i){const m=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(i);m||consoleAndThrowError(`Invalid rgb color value:${i}`);const[,g,_,b]=m.map(Number);this.#Ve(g,_,b),this.#$e(g,_,b)}#$e(i,m,g){this.#Oe=i,this.#Ne=m,this.#Fe=g,this.#Ge?.()}#Ve(i,m,g){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255)}}function defineColorRGB(i,m="#fff",g=!0){const _=Symbol(i);return{get:function(){if(void 0===this[_]){let b=255,y=255,T=255;if(isHexColor(m)){const i=convertHexToRgb(m);b=i.r,y=i.g,T=i.b}this[_]=new ColorRGB(b,y,T,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbNormal)}})}return this[_]},..._r}}Object.freeze(defineColorRGB);class ColorRGBA extends ColorRGB{#He;#Ge;constructor(i=255,m=255,g=255,_=1,b=void 0){super(i,m,g,b),validatePositiveNumberRange(_,0,1),this.#He=_,b&&(this.#Ge=b)}get a(){return this.#He}set a(i){validatePositiveNumberRange(i,0,1),this.#He=i,this.#Ge?.()}get rgba(){return[this.r,this.g,this.b,this.#He]}get rgbaNormal(){return[this.r/255,this.g/255,this.b/255,this.#He]}setColorByRGBA(i,m,g,_){this.#ze(i,m,g,_),this.r=i,this.g=m,this.b=g,this.#He=_,this.#Ge?.()}setColorByRGBAString(i){const m=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d*(?:\.\d+)?)\s*\)/.exec(i);if(!m)throw new Error(`Invalid rgba color value:${i}`);const[,g,_,b,y]=m.map(Number);this.#ze(g,_,b,y),this.r=g,this.g=_,this.b=b,this.#He=y,this.#Ge?.()}#ze(i,m,g,_){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255),validatePositiveNumberRange(_,0,1)}}function defineColorRGBA(i,m="#fff",g=!0){const _=Symbol(i);return{get:function(){if(void 0===this[_]){let b=255,y=255,T=255,w=1;if(isHexColor(m)){const i=convertHexToRgb(m);b=i.r,y=i.g,T=i.b}this[_]=new ColorRGBA(b,y,T,w,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbaNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbaNormal)}})}return this[_]},..._r}}function createSetter$2(i,m,g){const _=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const b=this[m];this[m]=i,this.updateTexture(b,i);const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=y;m.members[_]&&g.writeBuffer(m.members[_],i?1:0)}else if(y){const{vertexUniformInfo:m,vertexUniformBuffer:g}=y;m.members[_]&&g.writeBuffer(g.members[_],i?1:0)}}}function defineCubeTexture(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter$2(i,g,m),..._r}}function defineSampler(i){const m=Symbol(i);return{get:function(){return this[m]},set:function(i){const g=this[m];this[m]=i,this.updateSampler(g,i)},..._r}}function createSetter$1(i,m,g){const _=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`,b=`premultiply${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const y=this[m];this[m]=i,this.updateTexture(y,i);const{gpuRenderInfo:T}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=T;m.members[_]&&g.writeBuffer(m.members[_],i?1:0),m.members[b]&&g.writeBuffer(m.members[b],i?.usePremultiplyAlpha?1:0)}else if(T){const{vertexUniformInfo:m,vertexUniformBuffer:g}=T;m.members[_]&&g.writeBuffer(g.members[_],i?1:0)}}}function defineTexture$1(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter$1(i,g,m),..._r}}function createSetter(i,m,g){return function(_){this[m]=_;const{gpuRenderInfo:b}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=b;g.writeBuffer(m.members[i],_)}else if(b){const{vertexUniformInfo:m,vertexUniformBuffer:g}=b;g.writeBuffer(m.members[i],_)}}}function defineVector(i,m,g=!0){const _=Symbol(i);return{get:function(){return void 0===this[_]&&(this[_]=m),this[_]},set:createSetter(i,_,g),..._r}}function defineProperty_vec4(i,m=[0,0,0,0]){return defineVector(i,m)}function defineProperty_vec3(i,m=[0,0,0]){return defineVector(i,m)}function defineProperty_vec2(i,m=[0,0]){return defineVector(i,m)}Object.freeze(defineColorRGBA),Object.freeze(defineCubeTexture),Object.freeze(defineSampler),Object.freeze(defineTexture$1),Object.freeze(defineVector);const tn={},rn={AO_STRENGTH:"aoStrength",SPECULAR_STRENGTH:"specularStrength",EMISSIVE_STRENGTH:"emissiveStrength",OPACITY:"opacity",SHININESS:"shininess",NORMAL_SCALE:"normalScale"},nn={},an={ALPHA_TEXTURE_SAMPLER:"alphaTextureSampler",AO_TEXTURE_SAMPLER:"aoTextureSampler",DIFFUSE_TEXTURE_SAMPLER:"diffuseTextureSampler",EMISSIVE_TEXTURE_SAMPLER:"emissiveTextureSampler",ENVIRONMENT_TEXTURE_SAMPLER:"environmentTextureSampler",NORMAL_TEXTURE_SAMPLER:"normalTextureSampler",SPECULAR_TEXTURE_SAMPLER:"specularTextureSampler"},sn={ENVIRONMENT_TEXTURE:"environmentTexture"},on={},un={},cn={},hn={ALPHA_TEXTURE:"alphaTexture",AO_TEXTURE:"aoTexture",DIFFUSE_TEXTURE:"diffuseTexture",EMISSIVE_TEXTURE:"emissiveTexture",NORMAL_TEXTURE:"normalTexture",SPECULAR_TEXTURE:"specularTexture"},fn={COLOR:"color",EMISSIVE_COLOR:"emissiveColor",SPECULAR_COLOR:"specularColor"},dn={...createDefineByPreset({defineBoolean:[defineBoolean,tn],definePositiveNumber:[definePositiveNumberRange,rn],defineUint:[defineUintRange,nn],defineVec2:[defineProperty_vec2,on],defineVec3:[defineProperty_vec3,un],defineVec4:[defineProperty_vec4,cn],defineColorRGB:[defineColorRGB,fn],defineSampler:[defineSampler,an],defineTexture:[defineTexture$1,hn],defineCubeTexture:[defineCubeTexture,sn]}),defineBoolean:defineProperties(defineBoolean),definePositiveNumber:defineProperties(definePositiveNumberRange),defineUint:defineProperties(defineUintRange),defineVec2:defineProperties(defineProperty_vec2),defineVec3:defineProperties(defineProperty_vec3),defineVec4:defineProperties(defineProperty_vec4),defineColorRGB:defineProperties(defineColorRGB),defineColorRGBA:defineProperties(defineColorRGBA),defineSampler:defineProperties(defineSampler),defineTexture:defineProperties(defineTexture$1),defineCubeTexture:defineProperties(defineCubeTexture),PRESET_BOOLEAN:tn,PRESET_POSITIVE_NUMBER:rn,PRESET_UINT:nn,PRESET_SAMPLER:an,PRESET_TEXTURE:hn,PRESET_CUBE_TEXTURE:sn,PRESET_VEC2:on,PRESET_VEC3:un,PRESET_VEC4:cn,PRESET_COLOR_RGB:fn};Object.freeze(dn);class PackedTexture{#v;#Ke;#ue;#K;#b;constructor(i){this.#v=i,this.#b=i.gpuDevice,this.#Ke=this.#qe(),this.#ue=this.#We()}get gpuTexture(){return this.#K}async packing(i,m,g,_,b){const y={r:"r",g:"g",b:"b",a:"a",...b},T={size:[m,g,1],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,label:_||`packedTexture_${createUUID()}'`};this.#K&&(this.#K.destroy(),this.#K=null);const w=this.#b.createTexture(T),P=this.#b.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),$=new Uint32Array([["r","g","b","a"].indexOf(y.r),["r","g","b","a"].indexOf(y.g),["r","g","b","a"].indexOf(y.b),["r","g","b","a"].indexOf(y.a)]);this.#b.queue.writeBuffer(P,0,$);const H=[{binding:0,resource:i.r?i.r.createView({label:i.r.label}):this.#v.resourceManager.emptyBitmapTextureView},{binding:1,resource:i.g?i.g.createView({label:i.g.label}):this.#v.resourceManager.emptyBitmapTextureView},{binding:2,resource:i.b?i.b.createView({label:i.b.label}):this.#v.resourceManager.emptyBitmapTextureView},{binding:3,resource:i.a?i.a.createView({label:i.a.label}):this.#v.resourceManager.emptyBitmapTextureView},{binding:4,resource:this.#ue},{binding:5,resource:{buffer:P}}],q=this.#b.createBindGroup({layout:this.#Ke.getBindGroupLayout(0),entries:H}),W=this.#b.createCommandEncoder(),ye=W.beginRenderPass({colorAttachments:[{view:w.createView({label:w.label}),loadOp:"clear",storeOp:"store",clearValue:[0,0,0,0]}]});ye.setPipeline(this.#Ke),ye.setBindGroup(0,q),ye.draw(6,1,0,0),ye.end(),this.#b.queue.submit([W.finish()]),this.#K=w,P.destroy()}#qe(){const i="\n\tstruct VertexOut {@builtin(position) position:vec4<f32>,@location(0) uv:vec2<f32>,\n\t};\n\n\t@vertex\n\tfn vertexMain(@builtin(vertex_index) VertexIndex:u32) -> VertexOut {var pos=array<vec2<f32>,6>(vec2(-1.0,-1.0),vec2( 1.0,-1.0),vec2(-1.0, 1.0),vec2(-1.0, 1.0),vec2( 1.0,-1.0),vec2( 1.0, 1.0));\nvar uv=array<vec2<f32>,6>(vec2(0.0,1.0),vec2(1.0,1.0),vec2(0.0,0.0),vec2(0.0,0.0),vec2(1.0,1.0),vec2(1.0,0.0));\nvar output:VertexOut;output.position=vec4(pos[VertexIndex],0.0,1.0);output.uv=uv[VertexIndex];return output;\n\t}\n\n\tstruct ComponentMapping {r_component:u32,g_component:u32,b_component:u32,a_component:u32,\n\t};\n\n\t@group(0) @binding(0) var textureR:texture_2d<f32>;\n\t@group(0) @binding(1) var textureG:texture_2d<f32>;\n\t@group(0) @binding(2) var textureB:texture_2d<f32>;\n\t@group(0) @binding(3) var textureA:texture_2d<f32>;\n\t@group(0) @binding(4) var sampler0:sampler;\n\t@group(0) @binding(5) var<uniform> mapping:ComponentMapping;\n\n\tfn getComponent(color:vec4<f32>,componentIndex:u32) -> f32 {switch componentIndex {case 0u:{ return color.r;}case 1u:{ return color.g;}case 2u:{ return color.b;}case 3u:{ return color.a;}default:{ return 0.0;}}\n\t}\n\n\t@fragment\n\tfn main(input:VertexOut) -> @location(0) vec4<f32> {let colorR=textureSample(textureR,sampler0,input.uv);let colorG=textureSample(textureG,sampler0,input.uv);let colorB=textureSample(textureB,sampler0,input.uv);let colorA=textureSample(textureA,sampler0,input.uv);\nlet r=getComponent(colorR,mapping.r_component);let g=getComponent(colorG,mapping.g_component);let b=getComponent(colorB,mapping.b_component);let a=getComponent(colorA,mapping.a_component);\nreturn vec4(r,g,b,a);\n\t}\n\t";return this.#b.createRenderPipeline({layout:"auto",vertex:{module:this.#b.createShaderModule({code:i}),entryPoint:"vertexMain"},fragment:{module:this.#b.createShaderModule({code:i}),entryPoint:"main",targets:[{format:"rgba8unorm"}]},primitive:{topology:"triangle-list"}})}#We(){return this.#b.createSampler({magFilter:"linear",minFilter:"linear"})}}class e{constructor(i,m){this.name=i,this.attributes=m,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}get isPointer(){return!1}getTypeName(){return this.name}}class t{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class n extends e{constructor(i,m){super(i,m),this.members=[],this.align=0,this.startLine=-1,this.endLine=-1,this.inUse=!1}get isStruct(){return!0}}class s extends e{constructor(i,m){super(i,m),this.count=0,this.stride=0}get isArray(){return!0}getTypeName(){return`array<${this.format.getTypeName()},${this.count}>`}}class r extends e{constructor(i,m,g){super(i,g),this.format=m}get isPointer(){return!0}getTypeName(){return`&${this.format.getTypeName()}`}}class a extends e{constructor(i,m,g,_){super(i,g),this.format=m,this.access=_}get isTemplate(){return!0}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}var mn;(i=>{i[i.Uniform=0]="Uniform",i[i.Storage=1]="Storage",i[i.Texture=2]="Texture",i[i.Sampler=3]="Sampler",i[i.StorageTexture=4]="StorageTexture"})(mn||(mn={}));class o{constructor(i,m,g,_,b,y,T){this.name=i,this.type=m,this.group=g,this.binding=_,this.attributes=b,this.resourceType=y,this.access=T}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class l{constructor(i,m){this.name=i,this.type=m}}class c{constructor(i,m,g,_){this.name=i,this.type=m,this.locationType=g,this.location=_,this.interpolation=null}}class u{constructor(i,m,g,_){this.name=i,this.type=m,this.locationType=g,this.location=_}}class h{constructor(i,m,g,_){this.name=i,this.type=m,this.attributes=g,this.id=_}}class f{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g}}class p{constructor(i,m=null,g){this.stage=null,this.inputs=[],this.outputs=[],this.arguments=[],this.returnType=null,this.resources=[],this.overrides=[],this.startLine=-1,this.endLine=-1,this.inUse=!1,this.calls=new Set,this.name=i,this.stage=m,this.attributes=g}}class d{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}const pn=new Float32Array(1),gn=new Int32Array(pn.buffer),xn=new Uint16Array(1);function x(i){pn[0]=i;const m=gn[0],g=m>>31&1;let _=m>>23&255,b=8388607&m;if(255===_)return xn[0]=g<<15|31744|(0!==b?512:0),xn[0];if(0===_){if(0===b)return xn[0]=g<<15,xn[0];b|=8388608;let i=113;for(;!(8388608&b);)b<<=1,i--;return _=127-i,b&=8388607,_>0?(b=(b>>126-_)+(b>>127-_&1),xn[0]=g<<15|_<<10|b>>13,xn[0]):(xn[0]=g<<15,xn[0])}return _=_-127+15,_>=31?(xn[0]=g<<15|31744,xn[0]):_<=0?_<-10?(xn[0]=g<<15,xn[0]):(b=(8388608|b)>>1-_,xn[0]=g<<15|b>>13,xn[0]):(b>>=13,xn[0]=g<<15|_<<10|b,xn[0])}const _n=new Uint32Array(1),vn=new Float32Array(_n.buffer,0,1);function v(i){const m=112+(i>>6&31)<<23|(63&i)<<17;return _n[0]=m,vn[0]}function k(i,m,g,_){const b=[0,0,0,0];for(let $=0;$<_;++$)switch(g){case"8unorm":b[$]=i[m]/255,m++;break;case"8snorm":b[$]=i[m]/255*2-1,m++;break;case"8uint":b[$]=i[m],m++;break;case"8sint":b[$]=i[m]-127,m++;break;case"16uint":b[$]=i[m]|i[m+1]<<8,m+=2;break;case"16sint":b[$]=(i[m]|i[m+1]<<8)-32768,m+=2;break;case"16float":b[$]=(void 0,void 0,void 0,T=(32768&(y=i[m]|i[m+1]<<8))>>15,P=1023&y,0==(w=(31744&y)>>10)?(T?-1:1)*Math.pow(2,-14)*(P/Math.pow(2,10)):31==w?P?NaN:1/0*(T?-1:1):(T?-1:1)*Math.pow(2,w-15)*(1+P/Math.pow(2,10))),m+=2;break;case"32uint":case"32sint":b[$]=i[m]|i[m+1]<<8|i[m+2]<<16|i[m+3]<<24,m+=4;break;case"32float":b[$]=new Float32Array(i.buffer,m,1)[0],m+=4}var y,T,w,P;return b}function I(i,m,g,_,b){for(let y=0;y<_;++y)switch(g){case"8unorm":i[m]=255*b[y],m++;break;case"8snorm":i[m]=.5*(b[y]+1)*255,m++;break;case"8uint":i[m]=b[y],m++;break;case"8sint":i[m]=b[y]+127,m++;break;case"16uint":new Uint16Array(i.buffer,m,1)[0]=b[y],m+=2;break;case"16sint":new Int16Array(i.buffer,m,1)[0]=b[y],m+=2;break;case"16float":{const g=x(b[y]);new Uint16Array(i.buffer,m,1)[0]=g,m+=2;break}case"32uint":new Uint32Array(i.buffer,m,1)[0]=b[y],m+=4;break;case"32sint":new Int32Array(i.buffer,m,1)[0]=b[y],m+=4;break;case"32float":new Float32Array(i.buffer,m,1)[0]=b[y],m+=4}return b}const bn={r8unorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8snorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8uint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8sint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg8unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8snorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"rgba8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8snorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},bgra8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bgra8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r16uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16float:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg16uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba16uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r32uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg32uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba32uint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32sint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32float:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rg11b10ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},stencil8:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!1,hasStencil:!0,channels:1},depth16unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},depth24plus:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,depthOnlyFormat:"depth32float",channels:1},"depth24plus-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,depthOnlyFormat:"depth32float",channels:1},depth32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},"depth32float-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,stencilOnlyFormat:"depth32float",channels:1},rgb9e5ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bc1-rgba-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc1-rgba-unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc4-r-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc4-r-snorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc5-rg-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc5-rg-snorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc6h-rgb-ufloat":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc6h-rgb-float":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"eac-r11unorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-r11snorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-rg11unorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"eac-rg11snorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"astc-4x4-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-4x4-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x5-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-5x5-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x6-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-6x6-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-8x5-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x5-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x6-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x6-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x8-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-8x8-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-10x5-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x5-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x6-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x6-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x8-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x8-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x10-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-10x10-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x12-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4},"astc-12x12-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4}};class S{constructor(){this.id=S._id++,this.line=0}get isAstNode(){return!0}get astNodeType(){return""}search(i){i(this)}searchBlock(i,m){if(i){m(A.instance);for(const g of i)g instanceof Array?this.searchBlock(g,m):g.search(m);m(E.instance)}}constEvaluate(i,m){throw new Error("Cannot evaluate node")}constEvaluateString(i){return this.constEvaluate(i).toString()}}S._id=0;class A extends S{}A.instance=new A;class E extends S{}E.instance=new E;const yn=new Set(["all","all","any","select","arrayLength","abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","clamp","cos","cosh","countLeadingZeros","countOneBits","countTrailingZeros","cross","degrees","determinant","distance","dot","dot4U8Packed","dot4I8Packed","exp","exp2","extractBits","faceForward","firstLeadingBit","firstTrailingBit","floor","fma","fract","frexp","insertBits","inverseSqrt","ldexp","length","log","log2","max","min","mix","modf","normalize","pow","quantizeToF16","radians","reflect","refract","reverseBits","round","saturate","sign","sin","sinh","smoothStep","sqrt","step","tan","tanh","transpose","trunc","dpdx","dpdxCoarse","dpdxFine","dpdy","dpdyCoarse","dpdyFine","fwidth","fwidthCoarse","fwidthFine","textureDimensions","textureGather","textureGatherCompare","textureLoad","textureNumLayers","textureNumLevels","textureNumSamples","textureSample","textureSampleBias","textureSampleCompare","textureSampleCompareLevel","textureSampleGrad","textureSampleLevel","textureSampleBaseClampToEdge","textureStore","atomicLoad","atomicStore","atomicAdd","atomicSub","atomicMax","atomicMin","atomicAnd","atomicOr","atomicXor","atomicExchange","atomicCompareExchangeWeak","pack4x8snorm","pack4x8unorm","pack4xI8","pack4xU8","pack4x8Clamp","pack4xU8Clamp","pack2x16snorm","pack2x16unorm","pack2x16float","unpack4x8snorm","unpack4x8unorm","unpack4xI8","unpack4xU8","unpack2x16snorm","unpack2x16unorm","unpack2x16float","storageBarrier","textureBarrier","workgroupBarrier","workgroupUniformLoad","subgroupAdd","subgroupExclusiveAdd","subgroupInclusiveAdd","subgroupAll","subgroupAnd","subgroupAny","subgroupBallot","subgroupBroadcast","subgroupBroadcastFirst","subgroupElect","subgroupMax","subgroupMin","subgroupMul","subgroupExclusiveMul","subgroupInclusiveMul","subgroupOr","subgroupShuffle","subgroupShuffleDown","subgroupShuffleUp","subgroupShuffleXor","subgroupXor","quadBroadcast","quadSwapDiagonal","quadSwapX","quadSwapY"]);class L extends S{constructor(){super()}}class C extends L{constructor(i,m,g,_,b,y){super(),this.calls=new Set,this.name=i,this.args=m,this.returnType=g,this.body=_,this.startLine=b,this.endLine=y}get astNodeType(){return"function"}search(i){if(this.attributes)for(const m of this.attributes)i(m);i(this);for(const m of this.args)i(m);this.searchBlock(this.body,i)}}class D extends L{constructor(i){super(),this.expression=i}get astNodeType(){return"staticAssert"}search(i){this.expression.search(i)}}class N extends L{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"while"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class V extends L{constructor(i,m){super(),this.body=i,this.loopId=m}get astNodeType(){return"continuing"}search(i){this.searchBlock(this.body,i)}}class O extends L{constructor(i,m,g,_){super(),this.init=i,this.condition=m,this.increment=g,this.body=_}get astNodeType(){return"for"}search(i){var m,g,_;null===(m=this.init)||void 0===m||m.search(i),null===(g=this.condition)||void 0===g||g.search(i),null===(_=this.increment)||void 0===_||_.search(i),this.searchBlock(this.body,i)}}class B extends L{constructor(i,m,g,_,b){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=_,this.value=b}get astNodeType(){return"var"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class F extends L{constructor(i,m,g){super(),this.attributes=null,this.name=i,this.type=m,this.value=g}get astNodeType(){return"override"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class M extends L{constructor(i,m,g,_,b){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=_,this.value=b}get astNodeType(){return"let"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class U extends L{constructor(i,m,g,_,b){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=_,this.value=b}get astNodeType(){return"const"}constEvaluate(i,m){return this.value.constEvaluate(i,m)}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}var Tn,Sn,wn,Mn;(i=>{i.increment="++",i.decrement="--"})(Tn||(Tn={})),(i=>{i.parse=function(m){const g=m;if("parse"==g)throw new Error("Invalid value for IncrementOperator");return i[g]}})(Tn||(Tn={}));class z extends L{constructor(i,m){super(),this.operator=i,this.variable=m}get astNodeType(){return"increment"}search(i){this.variable.search(i)}}(i=>{i.assign="=",i.addAssign="+=",i.subtractAssin="-=",i.multiplyAssign="*=",i.divideAssign="/=",i.moduloAssign="%=",i.andAssign="&=",i.orAssign="|=",i.xorAssign="^=",i.shiftLeftAssign="<<=",i.shiftRightAssign=">>="})(Sn||(Sn={})),(Sn||(Sn={})).parse=function(i){const m=i;if("parse"==m)throw new Error("Invalid value for AssignOperator");return m};class R extends L{constructor(i,m,g){super(),this.operator=i,this.variable=m,this.value=g}get astNodeType(){return"assign"}search(i){this.variable.search(i),this.value.search(i)}}class G extends L{constructor(i,m){super(),this.name=i,this.args=m}get astNodeType(){return"call"}isBuiltin(){return yn.has(this.name)}search(i){for(const m of this.args)m.search(i);i(this)}}class X extends L{constructor(i,m){super(),this.body=i,this.continuing=m}get astNodeType(){return"loop"}}class j extends L{constructor(i,m){super(),this.condition=i,this.cases=m}get astNodeType(){return"switch"}search(i){i(this);for(const m of this.cases)m.search(i)}}class Z extends L{constructor(i,m,g,_){super(),this.condition=i,this.body=m,this.elseif=g,this.else=_}get astNodeType(){return"if"}search(i){this.condition.search(i),this.searchBlock(this.body,i),this.searchBlock(this.elseif,i),this.searchBlock(this.else,i)}}class Q extends L{constructor(i){super(),this.value=i}get astNodeType(){return"return"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class Y extends L{constructor(i){super(),this.name=i}get astNodeType(){return"enable"}}class K extends L{constructor(i){super(),this.extensions=i}get astNodeType(){return"requires"}}class J extends L{constructor(i,m){super(),this.severity=i,this.rule=m}get astNodeType(){return"diagnostic"}}class ee extends L{constructor(i,m){super(),this.name=i,this.type=m}get astNodeType(){return"alias"}}class te extends L{constructor(){super()}get astNodeType(){return"discard"}}class ne extends L{constructor(){super(),this.condition=null,this.loopId=-1}get astNodeType(){return"break"}}class se extends L{constructor(){super(),this.loopId=-1}get astNodeType(){return"continue"}}class re extends L{constructor(i){super(),this.attributes=null,this.name=i}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}static maxFormatType(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const _=re._priority.get(m.name);re._priority.get(i[g].name)<_&&(m=i[g])}return"x32"===m.name?re.i32:m}getTypeName(){return this.name}}re.x32=new re("x32"),re.f32=new re("f32"),re.i32=new re("i32"),re.u32=new re("u32"),re.f16=new re("f16"),re.bool=new re("bool"),re.void=new re("void"),re._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class ae extends re{constructor(i){super(i)}}class ie extends re{constructor(i,m,g,_){super(i),this.members=m,this.startLine=g,this.endLine=_}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(i){for(let m=0;m<this.members.length;m++)if(this.members[m].name==i)return m;return-1}search(i){for(const m of this.members)i(m)}}class oe extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"template"}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}oe.vec2f=new oe("vec2",re.f32,null),oe.vec3f=new oe("vec3",re.f32,null),oe.vec4f=new oe("vec4",re.f32,null),oe.vec2i=new oe("vec2",re.i32,null),oe.vec3i=new oe("vec3",re.i32,null),oe.vec4i=new oe("vec4",re.i32,null),oe.vec2u=new oe("vec2",re.u32,null),oe.vec3u=new oe("vec3",re.u32,null),oe.vec4u=new oe("vec4",re.u32,null),oe.vec2h=new oe("vec2",re.f16,null),oe.vec3h=new oe("vec3",re.f16,null),oe.vec4h=new oe("vec4",re.f16,null),oe.vec2b=new oe("vec2",re.bool,null),oe.vec3b=new oe("vec3",re.bool,null),oe.vec4b=new oe("vec4",re.bool,null),oe.mat2x2f=new oe("mat2x2",re.f32,null),oe.mat2x3f=new oe("mat2x3",re.f32,null),oe.mat2x4f=new oe("mat2x4",re.f32,null),oe.mat3x2f=new oe("mat3x2",re.f32,null),oe.mat3x3f=new oe("mat3x3",re.f32,null),oe.mat3x4f=new oe("mat3x4",re.f32,null),oe.mat4x2f=new oe("mat4x2",re.f32,null),oe.mat4x3f=new oe("mat4x3",re.f32,null),oe.mat4x4f=new oe("mat4x4",re.f32,null),oe.mat2x2h=new oe("mat2x2",re.f16,null),oe.mat2x3h=new oe("mat2x3",re.f16,null),oe.mat2x4h=new oe("mat2x4",re.f16,null),oe.mat3x2h=new oe("mat3x2",re.f16,null),oe.mat3x3h=new oe("mat3x3",re.f16,null),oe.mat3x4h=new oe("mat3x4",re.f16,null),oe.mat4x2h=new oe("mat4x2",re.f16,null),oe.mat4x3h=new oe("mat4x3",re.f16,null),oe.mat4x4h=new oe("mat4x4",re.f16,null),oe.mat2x2i=new oe("mat2x2",re.i32,null),oe.mat2x3i=new oe("mat2x3",re.i32,null),oe.mat2x4i=new oe("mat2x4",re.i32,null),oe.mat3x2i=new oe("mat3x2",re.i32,null),oe.mat3x3i=new oe("mat3x3",re.i32,null),oe.mat3x4i=new oe("mat3x4",re.i32,null),oe.mat4x2i=new oe("mat4x2",re.i32,null),oe.mat4x3i=new oe("mat4x3",re.i32,null),oe.mat4x4i=new oe("mat4x4",re.i32,null),oe.mat2x2u=new oe("mat2x2",re.u32,null),oe.mat2x3u=new oe("mat2x3",re.u32,null),oe.mat2x4u=new oe("mat2x4",re.u32,null),oe.mat3x2u=new oe("mat3x2",re.u32,null),oe.mat3x3u=new oe("mat3x3",re.u32,null),oe.mat3x4u=new oe("mat3x4",re.u32,null),oe.mat4x2u=new oe("mat4x2",re.u32,null),oe.mat4x3u=new oe("mat4x3",re.u32,null),oe.mat4x4u=new oe("mat4x4",re.u32,null);class le extends re{constructor(i,m,g,_){super(i),this.storage=m,this.type=g,this.access=_}get astNodeType(){return"pointer"}}class ce extends re{constructor(i,m,g,_){super(i),this.attributes=m,this.format=g,this.count=_}get astNodeType(){return"array"}get isArray(){return!0}}class ue extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"sampler"}}class he extends S{constructor(){super(),this.postfix=null}}class fe extends he{constructor(i){super(),this.value=i}get astNodeType(){return"stringExpr"}toString(){return this.value}constEvaluateString(){return this.value}}class pe extends he{constructor(i,m){super(),this.type=i,this.args=m}get astNodeType(){return"createExpr"}search(i){if(i(this),this.args)for(const m of this.args)m.search(i)}constEvaluate(i,m){return m&&(m[0]=this.type),i.evalExpression(this,i.context)}}class de extends he{constructor(i,m){super(),this.cachedReturnValue=null,this.name=i,this.args=m}get astNodeType(){return"callExpr"}setCachedReturnValue(i){this.cachedReturnValue=i}get isBuiltin(){return yn.has(this.name)}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){for(const m of this.args)m.search(i);i(this)}}class me extends he{constructor(i){super(),this.name=i}get astNodeType(){return"varExpr"}search(i){i(this),this.postfix&&this.postfix.search(i)}constEvaluate(i,m){return i.evalExpression(this,i.context)}}class _e extends he{constructor(i,m){super(),this.name=i,this.initializer=m}get astNodeType(){return"constExpr"}constEvaluate(i,m){if(this.initializer){const m=i.evalExpression(this.initializer,i.context);return null!==m&&this.postfix?m.getSubData(i,this.postfix,i.context):m}return null}search(i){this.initializer.search(i)}}class ge extends he{constructor(i,m){super(),this.value=i,this.type=m}get astNodeType(){return"literalExpr"}constEvaluate(i,m){return void 0!==m&&(m[0]=this.type),this.value}get isScalar(){return this.value instanceof Oe}get isVector(){return this.value instanceof Fe||this.value instanceof Me}get scalarValue(){return this.value instanceof Oe?this.value.value:(console.error("Value is not scalar."),0)}get vectorValue(){return this.value instanceof Fe||this.value instanceof Me?this.value.data:(console.error("Value is not a vector or matrix."),new Float32Array(0))}}class xe extends he{constructor(i,m){super(),this.type=i,this.value=m}get astNodeType(){return"bitcastExpr"}search(i){this.value.search(i)}}class be extends he{constructor(i){super(),this.index=i}search(i){this.index.search(i)}}class ve extends he{constructor(){super()}}class we extends ve{constructor(i,m){super(),this.operator=i,this.right=m}get astNodeType(){return"unaryOp"}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.right.search(i)}}class ke extends ve{constructor(i,m,g){super(),this.operator=i,this.left=m,this.right=g}get astNodeType(){return"binaryOp"}_getPromotedType(i,m){return i.name===m.name?i:"f32"===i.name||"f32"===m.name?re.f32:"u32"===i.name||"u32"===m.name?re.u32:re.i32}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.left.search(i),this.right.search(i)}}class Ie extends S{constructor(i){super(),this.body=i}search(i){i(this),this.searchBlock(this.body,i)}}class Te extends he{constructor(){super()}get astNodeType(){return"default"}}class Se extends Ie{constructor(i,m){super(m),this.selectors=i}get astNodeType(){return"case"}search(i){this.searchBlock(this.body,i)}}class Ae extends Ie{constructor(i){super(i)}get astNodeType(){return"default"}search(i){this.searchBlock(this.body,i)}}class Ee extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"argument"}}class $e extends S{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"elseif"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class Le extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"member"}}class Ce extends S{constructor(i,m){super(),this.name=i,this.value=m}get astNodeType(){return"attribute"}}class De{constructor(i,m){this.parent=null,this.typeInfo=i,this.parent=m,this.id=De._id++}clone(){throw`Clone:Not implemented for ${this.constructor.name}`}setDataValue(i,m,g,_){console.error(`SetDataValue:Not implemented for ${this.constructor.name}`)}getSubData(i,m,g){return console.error(`GetDataValue:Not implemented for ${this.constructor.name}`),null}toString(){return`<${this.typeInfo.getTypeName()}>`}}De._id=0;class Ne extends De{constructor(){super(new e("void",null),null)}toString(){return"void"}}Ne.void=new Ne;class Ve extends De{constructor(i){super(new r("pointer",i.typeInfo,null),null),this.reference=i}clone(){return this}setDataValue(i,m,g,_){this.reference.setDataValue(i,m,g,_)}getSubData(i,m,g){return m?this.reference.getSubData(i,m,g):this}toString(){return`&${this.reference.toString()}`}}class Oe extends De{constructor(i,m,g=null){super(m,g),i instanceof Int32Array||i instanceof Uint32Array||i instanceof Float32Array?this.data=i:"x32"===this.typeInfo.name?i-Math.floor(i)!=0?this.data=new Float32Array([i]):this.data=i>=0?new Uint32Array([i]):new Int32Array([i]):"i32"===this.typeInfo.name||"bool"===this.typeInfo.name?this.data=new Int32Array([i]):"u32"===this.typeInfo.name?this.data=new Uint32Array([i]):"f32"===this.typeInfo.name||"f16"===this.typeInfo.name?this.data=new Float32Array([i]):console.error("ScalarData2:Invalid type",m)}clone(){if(this.data instanceof Float32Array)return new Oe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Oe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Oe(new Uint32Array(this.data),this.typeInfo,null);throw"ScalarData:Invalid data type"}get value(){return this.data[0]}set value(i){this.data[0]=i}setDataValue(i,m,g,_){if(g)return void console.error("SetDataValue:Scalar data does not support postfix",g);if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);let b=m.data[0];"i32"===this.typeInfo.name||"u32"===this.typeInfo.name?b=Math.floor(b):"bool"===this.typeInfo.name&&(b=b?1:0),this.data[0]=b}getSubData(i,m,g){return m?(console.error("getSubData:Scalar data does not support postfix",m),null):this}toString(){return`${this.value}`}}function Be(i,m,g){const _=m.length;return 2===_?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec2i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec2u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2h")):(console.error(`getSubData:Unknown format ${g}`),null):3===_?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec3i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec3u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3h")):(console.error(`getSubData:Unknown format ${g}`),null):4===_?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec4i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec4u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4h")):(console.error(`getSubData:Unknown format ${g}`),null):(console.error(`getSubData:Invalid vector size ${m.length}`),null)}class Fe extends De{constructor(i,m,g=null){if(super(m,g),i instanceof Float32Array||i instanceof Uint32Array||i instanceof Int32Array)this.data=i;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?this.data=new Float32Array(i):"vec2i"===m||"vec3i"===m||"vec4i"===m?this.data=new Int32Array(i):"vec2u"===m||"vec3u"===m||"vec4u"===m?this.data=new Uint32Array(i):"vec2h"===m||"vec3h"===m||"vec4h"===m?this.data=new Float32Array(i):"vec2b"===m||"vec3b"===m||"vec4b"===m?this.data=new Int32Array(i):"vec2"===m||"vec3"===m||"vec4"===m?this.data=new Float32Array(i):console.error(`VectorData:Invalid type ${m}`)}}clone(){if(this.data instanceof Float32Array)return new Fe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Fe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Fe(new Uint32Array(this.data),this.typeInfo,null);throw"VectorData:Invalid data type"}setDataValue(i,m,g,_){g instanceof fe?console.error("TODO:Set vector postfix"):m instanceof Fe?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;let _=i.getTypeInfo("f32");if(this.typeInfo instanceof a)_=this.typeInfo.format||_;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?_=i.getTypeInfo("f32"):"vec2i"===m||"vec3i"===m||"vec4i"===m?_=i.getTypeInfo("i32"):"vec2b"===m||"vec3b"===m||"vec4b"===m?_=i.getTypeInfo("bool"):"vec2u"===m||"vec3u"===m||"vec4u"===m?_=i.getTypeInfo("u32"):"vec2h"===m||"vec3h"===m||"vec4h"===m?_=i.getTypeInfo("f16"):console.error(`GetSubData:Unknown type ${m}`)}let b=this;for(;null!==m&&null!==b;){if(m instanceof be){const y=m.index;let T=-1;if(y instanceof ge){if(!(y.value instanceof Oe))return console.error(`GetSubData:Invalid array index ${y.value}`),null;T=y.value.value}else{const m=i.evalExpression(y,g);if(!(m instanceof Oe))return console.error("GetSubData:Unknown index type",y),null;T=m.value}if(T<0||T>=b.data.length)return console.error("GetSubData:Index out of range",T),null;if(b.data instanceof Float32Array){const i=new Float32Array(b.data.buffer,b.data.byteOffset+4*T,1);return new Oe(i,_)}if(b.data instanceof Int32Array){const i=new Int32Array(b.data.buffer,b.data.byteOffset+4*T,1);return new Oe(i,_)}if(b.data instanceof Uint32Array){const i=new Uint32Array(b.data.buffer,b.data.byteOffset+4*T,1);return new Oe(i,_)}throw"GetSubData:Invalid data type"}if(!(m instanceof fe))return console.error("GetSubData:Unknown postfix",m),null;{const g=m.value.toLowerCase();if(1===g.length){let i=0;if("x"===g||"r"===g)i=0;else if("y"===g||"g"===g)i=1;else if("z"===g||"b"===g)i=2;else{if("w"!==g&&"a"!==g)return console.error(`GetSubData:Unknown member ${g}`),null;i=3}if(this.data instanceof Float32Array){let m=new Float32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,_,this)}if(this.data instanceof Int32Array){let m=new Int32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,_,this)}if(this.data instanceof Uint32Array){let m=new Uint32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,_,this)}}const y=[];for(const i of g)"x"===i||"r"===i?y.push(this.data[0]):"y"===i||"g"===i?y.push(this.data[1]):"z"===i||"b"===i?y.push(this.data[2]):"w"===i||"a"===i?y.push(this.data[3]):console.error(`GetDataValue:Unknown member ${i}`);b=Be(i,y,_.name)}m=m.postfix}return b}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Me extends De{constructor(i,m,g=null){super(m,g),i instanceof Float32Array?this.data=i:this.data=new Float32Array(i)}clone(){return new Me(new Float32Array(this.data),this.typeInfo,null)}setDataValue(i,m,g,_){g instanceof fe?console.error("TODO:Set matrix postfix"):m instanceof Me?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;const _=this.typeInfo.name;if(i.getTypeInfo("f32"),this.typeInfo instanceof a)this.typeInfo.format;else if(_.endsWith("f"))i.getTypeInfo("f32");else if(_.endsWith("i"))i.getTypeInfo("i32");else if(_.endsWith("u"))i.getTypeInfo("u32");else{if(!_.endsWith("h"))return console.error(`GetDataValue:Unknown type ${_}`),null;i.getTypeInfo("f16")}if(m instanceof be){const b=m.index;let y=-1;if(b instanceof ge){if(!(b.value instanceof Oe))return console.error(`GetDataValue:Invalid array index ${b.value}`),null;y=b.value.value}else{const m=i.evalExpression(b,g);if(!(m instanceof Oe))return console.error("GetDataValue:Unknown index type",b),null;y=m.value}if(y<0||y>=this.data.length)return console.error("GetDataValue:Index out of range",y),null;const T=_.endsWith("h")?"h":"f";let w;if("mat2x2"===_||"mat2x2f"===_||"mat2x2h"===_||"mat3x2"===_||"mat3x2f"===_||"mat3x2h"===_||"mat4x2"===_||"mat4x2f"===_||"mat4x2h"===_)w=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+2*y*4,2),i.getTypeInfo(`vec2${T}`));else if("mat2x3"===_||"mat2x3f"===_||"mat2x3h"===_||"mat3x3"===_||"mat3x3f"===_||"mat3x3h"===_||"mat4x3"===_||"mat4x3f"===_||"mat4x3h"===_)w=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+3*y*4,3),i.getTypeInfo(`vec3${T}`));else{if("mat2x4"!==_&&"mat2x4f"!==_&&"mat2x4h"!==_&&"mat3x4"!==_&&"mat3x4f"!==_&&"mat3x4h"!==_&&"mat4x4"!==_&&"mat4x4f"!==_&&"mat4x4h"!==_)return console.error(`GetDataValue:Unknown type ${_}`),null;w=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+4*y*4,4),i.getTypeInfo(`vec4${T}`))}return m.postfix?w.getSubData(i,m.postfix,g):w}return console.error("GetDataValue:Invalid postfix",m),null}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Ue extends De{constructor(i,m,g=0,_=null){super(m,_),this.buffer=i instanceof ArrayBuffer?i:i.buffer,this.offset=g}clone(){const i=new Uint8Array(new Uint8Array(this.buffer,this.offset,this.typeInfo.size));return new Ue(i.buffer,this.typeInfo,0,null)}setDataValue(i,m,g,_){if(null===m)return void console.log("setDataValue:NULL data.");let b=this.offset,y=this.typeInfo;for(;g;){if(g instanceof be)if(y instanceof s){const m=g.index;if(m instanceof ge){if(!(m.value instanceof Oe))return void console.error(`SetDataValue:Invalid index type ${m.value}`);b+=m.value.value*y.stride}else{const g=i.evalExpression(m,_);if(!(g instanceof Oe))return void console.error("SetDataValue:Unknown index type",m);b+=g.value*y.stride}y=y.format}else console.error(`SetDataValue:Type ${y.getTypeName()} is not an array`);else{if(!(g instanceof fe))return void console.error("SetDataValue:Unknown postfix type",g);{const i=g.value;if(y instanceof n){let m=!1;for(const g of y.members)if(g.name===i){b+=g.offset,y=g.type,m=!0;break}if(!m)return void console.error(`SetDataValue:Member ${i} not found`)}else if(y instanceof e){const g=y.getTypeName();let _=0;if("x"===i||"r"===i)_=0;else if("y"===i||"g"===i)_=1;else if("z"===i||"b"===i)_=2;else{if("w"!==i&&"a"!==i)return void console.error(`SetDataValue:Unknown member ${i}`);_=3}if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);const T=m.value;return"vec2f"===g?void(new Float32Array(this.buffer,b,2)[_]=T):"vec3f"===g?void(new Float32Array(this.buffer,b,3)[_]=T):"vec4f"===g?void(new Float32Array(this.buffer,b,4)[_]=T):"vec2i"===g?void(new Int32Array(this.buffer,b,2)[_]=T):"vec3i"===g?void(new Int32Array(this.buffer,b,3)[_]=T):"vec4i"===g?void(new Int32Array(this.buffer,b,4)[_]=T):"vec2u"===g?void(new Uint32Array(this.buffer,b,2)[_]=T):"vec3u"===g?void(new Uint32Array(this.buffer,b,3)[_]=T):"vec4u"===g?void(new Uint32Array(this.buffer,b,4)[_]=T):void console.error(`SetDataValue:Type ${g} is not a struct`)}}}g=g.postfix}this.setData(i,m,y,b,_)}setData(i,m,g,_,b){const y=g.getTypeName();if("f32"!==y&&"f16"!==y)if("i32"!==y&&"atomic<i32>"!==y&&"x32"!==y)if("u32"!==y&&"atomic<u32>"!==y)if("bool"!==y)if("vec2f"!==y&&"vec2h"!==y)if("vec3f"!==y&&"vec3h"!==y)if("vec4f"!==y&&"vec4h"!==y)if("vec2i"!==y)if("vec3i"!==y)if("vec4i"!==y)if("vec2u"!==y)if("vec3u"!==y)if("vec4u"!==y)if("vec2b"!==y)if("vec3b"!==y)if("vec4b"!==y)if("mat2x2f"!==y&&"mat2x2h"!==y)if("mat2x3f"!==y&&"mat2x3h"!==y)if("mat2x4f"!==y&&"mat2x4h"!==y)if("mat3x2f"!==y&&"mat3x2h"!==y)if("mat3x3f"!==y&&"mat3x3h"!==y)if("mat3x4f"!==y&&"mat3x4h"!==y)if("mat4x2f"!==y&&"mat4x2h"!==y)if("mat4x3f"!==y&&"mat4x3h"!==y)if("mat4x4f"!==y&&"mat4x4h"!==y)if(m instanceof Ue){if(g===m.typeInfo)return void new Uint8Array(this.buffer,_,m.buffer.byteLength).set(new Uint8Array(m.buffer));console.error("SetDataValue:Type mismatch",y,m.typeInfo.getTypeName())}else console.error(`SetData:Unknown type ${y}`);else{const i=new Float32Array(this.buffer,_,16);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11],i[12]=m.data[12],i[13]=m.data[13],i[14]=m.data[14],i[15]=m.data[15]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15])}else{const i=new Float32Array(this.buffer,_,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,_,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,_,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,_,9);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8])}else{const i=new Float32Array(this.buffer,_,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,_,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,_,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,_,4);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Uint32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Int32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Int32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Int32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Float32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Float32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Float32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else m instanceof Oe&&(new Int32Array(this.buffer,_,1)[0]=m.value);else m instanceof Oe&&(new Uint32Array(this.buffer,_,1)[0]=m.value);else m instanceof Oe&&(new Int32Array(this.buffer,_,1)[0]=m.value);else m instanceof Oe&&(new Float32Array(this.buffer,_,1)[0]=m.value)}getSubData(i,m,g){var _,b,y;if(null===m)return this;let T=this.offset,w=this.typeInfo;for(;m;){if(m instanceof be){const _=m.index,b=_ instanceof he?i.evalExpression(_,g):_;let y=0;if(b instanceof Oe?y=b.value:"number"==typeof b?y=b:console.error("GetDataValue:Invalid index type",_),w instanceof s)T+=y*w.stride,w=w.format;else{const m=w.getTypeName();"mat4x4"===m||"mat4x4f"===m||"mat4x4h"===m?(T+=16*y,w=i.getTypeInfo("vec4f")):console.error(`getDataValue:Type ${w.getTypeName()} is not an array`)}}else{if(!(m instanceof fe))return console.error("GetDataValue:Unknown postfix type",m),null;{const g=m.value;if(w instanceof n){let i=!1;for(const m of w.members)if(m.name===g){T+=m.offset,w=m.type,i=!0;break}if(!i)return console.error(`GetDataValue:Member ${g} not found`),null}else if(w instanceof e){const m=w.getTypeName();if("vec2f"===m||"vec3f"===m||"vec4f"===m||"vec2i"===m||"vec3i"===m||"vec4i"===m||"vec2u"===m||"vec3u"===m||"vec4u"===m||"vec2b"===m||"vec3b"===m||"vec4b"===m||"vec2h"===m||"vec3h"===m||"vec4h"===m||"vec2"===m||"vec3"===m||"vec4"===m){if(g.length>0&&g.length<5){let _="f";const b=[];for(let y=0;y<g.length;++y){const w=g[y].toLowerCase();let P=0;if("x"===w||"r"===w)P=0;else if("y"===w||"g"===w)P=1;else if("z"===w||"b"===w)P=2;else{if("w"!==w&&"a"!==w)return console.error(`Unknown member ${g}`),null;P=3}if(1===g.length){if(m.endsWith("f"))return this.buffer.byteLength<T+4*P+4?(console.log("Insufficient buffer data"),null):new Oe(new Float32Array(this.buffer,T+4*P,1),i.getTypeInfo("f32"),this);if(m.endsWith("h"))return new Oe(new Float32Array(this.buffer,T+4*P,1),i.getTypeInfo("f16"),this);if(m.endsWith("i"))return new Oe(new Int32Array(this.buffer,T+4*P,1),i.getTypeInfo("i32"),this);if(m.endsWith("b"))return new Oe(new Int32Array(this.buffer,T+4*P,1),i.getTypeInfo("bool"),this);if(m.endsWith("u"))return new Oe(new Uint32Array(this.buffer,T+4*P,1),i.getTypeInfo("i32"),this)}if("vec2f"===m)b.push(new Float32Array(this.buffer,T,2)[P]);else if("vec3f"===m){if(T+12>=this.buffer.byteLength)return console.log("Insufficient buffer data"),null;const i=new Float32Array(this.buffer,T,3);b.push(i[P])}else if("vec4f"===m)b.push(new Float32Array(this.buffer,T,4)[P]);else if("vec2i"===m)_="i",b.push(new Int32Array(this.buffer,T,2)[P]);else if("vec3i"===m)_="i",b.push(new Int32Array(this.buffer,T,3)[P]);else if("vec4i"===m)_="i",b.push(new Int32Array(this.buffer,T,4)[P]);else if("vec2u"===m){_="u";const i=new Uint32Array(this.buffer,T,2);b.push(i[P])}else"vec3u"===m?(_="u",b.push(new Uint32Array(this.buffer,T,3)[P])):"vec4u"===m&&(_="u",b.push(new Uint32Array(this.buffer,T,4)[P]))}return 2===b.length?w=i.getTypeInfo(`vec2${_}`):3===b.length?w=i.getTypeInfo(`vec3${_}`):4===b.length?w=i.getTypeInfo(`vec4${_}`):console.error(`GetDataValue:Invalid vector length ${b.length}`),new Fe(b,w,null)}return console.error(`GetDataValue:Unknown member ${g}`),null}return console.error(`GetDataValue:Type ${m} is not a struct`),null}}}m=m.postfix}const P=w.getTypeName();return"f32"===P?new Oe(new Float32Array(this.buffer,T,1),w,this):"i32"===P?new Oe(new Int32Array(this.buffer,T,1),w,this):"u32"===P?new Oe(new Uint32Array(this.buffer,T,1),w,this):"vec2f"===P?new Fe(new Float32Array(this.buffer,T,2),w,this):"vec3f"===P?new Fe(new Float32Array(this.buffer,T,3),w,this):"vec4f"===P?new Fe(new Float32Array(this.buffer,T,4),w,this):"vec2i"===P?new Fe(new Int32Array(this.buffer,T,2),w,this):"vec3i"===P?new Fe(new Int32Array(this.buffer,T,3),w,this):"vec4i"===P?new Fe(new Int32Array(this.buffer,T,4),w,this):"vec2u"===P?new Fe(new Uint32Array(this.buffer,T,2),w,this):"vec3u"===P?new Fe(new Uint32Array(this.buffer,T,3),w,this):"vec4u"===P?new Fe(new Uint32Array(this.buffer,T,4),w,this):w instanceof a&&"atomic"===w.name?"u32"===(null===(_=w.format)||void 0===_?void 0:_.name)?new Oe(new Uint32Array(this.buffer,T,1)[0],w.format,this):"i32"===(null===(b=w.format)||void 0===b?void 0:b.name)?new Oe(new Int32Array(this.buffer,T,1)[0],w.format,this):(console.error(`GetDataValue:Invalid atomic format ${null===(y=w.format)||void 0===y?void 0:y.name}`),null):new Ue(this.buffer,w,T,this)}toString(){let i="";if(this.typeInfo instanceof s)if("f32"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("i32"===this.typeInfo.format.name){const m=new Int32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("u32"===this.typeInfo.format.name){const m=new Uint32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("vec2f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]}]`;for(let g=1;g<m.length/2;++g)i+=`,[${m[2*g]},${m[2*g+1]}]`}else if("vec3f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]}]`}else if("vec4f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]},${m[3]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]},${m[g+3]}]`}else i="[...]";else this.typeInfo instanceof n?i+="{...}":i="[...]";return i}}class Pe extends De{constructor(i,m,g,_){super(m,null),this.data=i,this.descriptor=g,this.view=_}clone(){return new Pe(this.data,this.typeInfo,this.descriptor,this.view)}get width(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>0?null!==(i=g[0])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.width)&&void 0!==m?m:0}get height(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>1?null!==(i=g[1])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.height)&&void 0!==m?m:0}get depthOrArrayLayers(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>2?null!==(i=g[2])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.depthOrArrayLayers)&&void 0!==m?m:0}get format(){var i;return this.descriptor&&null!==(i=this.descriptor.format)&&void 0!==i?i:"rgba8unorm"}get sampleCount(){var i;return this.descriptor&&null!==(i=this.descriptor.sampleCount)&&void 0!==i?i:1}get mipLevelCount(){var i;return this.descriptor&&null!==(i=this.descriptor.mipLevelCount)&&void 0!==i?i:1}get dimension(){var i;return this.descriptor&&null!==(i=this.descriptor.dimension)&&void 0!==i?i:"2d"}getMipLevelSize(i){if(i>=this.mipLevelCount)return[0,0,0];const m=[this.width,this.height,this.depthOrArrayLayers];for(let g=0;g<m.length;++g)m[g]=Math.max(1,m[g]>>i);return m}get texelByteSize(){const i=this.format,m=bn[i];return m?m.isDepthStencil?4:m.bytesPerBlock:0}get bytesPerRow(){return this.width*this.texelByteSize}get isDepthStencil(){const i=this.format,m=bn[i];return!!m&&m.isDepthStencil}getGpuSize(){const i=this.format,m=bn[i],g=this.width;if(!i||g<=0||!m)return-1;const _=this.height,b=this.depthOrArrayLayers,y=this.dimension;return g/m.blockWidth*("1d"===y?1:_/m.blockHeight)*m.bytesPerBlock*b}getPixel(i,m,g=0,_=0){const b=this.texelByteSize,y=this.bytesPerRow,T=this.height,w=this.data[_];return function(i,m,g,_,b,y,T,w,P){const $=_*(T>>=b)*(y>>=b)+g*T+m*w;switch(P){case"r8unorm":return[k(i,$,"8unorm",1)[0]];case"r8snorm":return[k(i,$,"8snorm",1)[0]];case"r8uint":return[k(i,$,"8uint",1)[0]];case"r8sint":return[k(i,$,"8sint",1)[0]];case"rg8unorm":{const m=k(i,$,"8unorm",2);return[m[0],m[1]]}case"rg8snorm":{const m=k(i,$,"8snorm",2);return[m[0],m[1]]}case"rg8uint":{const m=k(i,$,"8uint",2);return[m[0],m[1]]}case"rg8sint":{const m=k(i,$,"8sint",2);return[m[0],m[1]]}case"rgba8unorm-srgb":case"rgba8unorm":{const m=k(i,$,"8unorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8snorm":{const m=k(i,$,"8snorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8uint":{const m=k(i,$,"8uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba8sint":{const m=k(i,$,"8sint",4);return[m[0],m[1],m[2],m[3]]}case"bgra8unorm-srgb":case"bgra8unorm":{const m=k(i,$,"8unorm",4);return[m[2],m[1],m[0],m[3]]}case"r16uint":return[k(i,$,"16uint",1)[0]];case"r16sint":return[k(i,$,"16sint",1)[0]];case"r16float":return[k(i,$,"16float",1)[0]];case"rg16uint":{const m=k(i,$,"16uint",2);return[m[0],m[1]]}case"rg16sint":{const m=k(i,$,"16sint",2);return[m[0],m[1]]}case"rg16float":{const m=k(i,$,"16float",2);return[m[0],m[1]]}case"rgba16uint":{const m=k(i,$,"16uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16sint":{const m=k(i,$,"16sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16float":{const m=k(i,$,"16float",4);return[m[0],m[1],m[2],m[3]]}case"r32uint":return[k(i,$,"32uint",1)[0]];case"r32sint":return[k(i,$,"32sint",1)[0]];case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return[k(i,$,"32float",1)[0]];case"rg32uint":{const m=k(i,$,"32uint",2);return[m[0],m[1]]}case"rg32sint":{const m=k(i,$,"32sint",2);return[m[0],m[1]]}case"rg32float":{const m=k(i,$,"32float",2);return[m[0],m[1]]}case"rgba32uint":{const m=k(i,$,"32uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32sint":{const m=k(i,$,"32sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32float":{const m=k(i,$,"32float",4);return[m[0],m[1],m[2],m[3]]}case"rg11b10ufloat":{const m=new Uint32Array(i.buffer,$,1)[0],g=(4192256&m)>>11,_=(4290772992&m)>>22;return[v(2047&m),v(g),function(i){const m=112+(i>>5&31)<<23|(31&i)<<18;return _n[0]=m,vn[0]}(_),1]}}return null}(new Uint8Array(w),i,m,g,_,T,y,b,this.format)}setPixel(i,m,g,_,b){const y=this.texelByteSize,T=this.bytesPerRow,w=this.height,P=this.data[_];!function(i,m,g,_,b,y,T,w,P,$){const H=_*(T>>=b)*(y>>=b)+g*T+m*w;switch(P){case"r8unorm":return void I(i,H,"8unorm",1,$);case"r8snorm":return void I(i,H,"8snorm",1,$);case"r8uint":return void I(i,H,"8uint",1,$);case"r8sint":return void I(i,H,"8sint",1,$);case"rg8unorm":return void I(i,H,"8unorm",2,$);case"rg8snorm":return void I(i,H,"8snorm",2,$);case"rg8uint":return void I(i,H,"8uint",2,$);case"rg8sint":return void I(i,H,"8sint",2,$);case"rgba8unorm-srgb":case"rgba8unorm":case"bgra8unorm-srgb":case"bgra8unorm":return void I(i,H,"8unorm",4,$);case"rgba8snorm":return void I(i,H,"8snorm",4,$);case"rgba8uint":return void I(i,H,"8uint",4,$);case"rgba8sint":return void I(i,H,"8sint",4,$);case"r16uint":return void I(i,H,"16uint",1,$);case"r16sint":return void I(i,H,"16sint",1,$);case"r16float":return void I(i,H,"16float",1,$);case"rg16uint":return void I(i,H,"16uint",2,$);case"rg16sint":return void I(i,H,"16sint",2,$);case"rg16float":return void I(i,H,"16float",2,$);case"rgba16uint":return void I(i,H,"16uint",4,$);case"rgba16sint":return void I(i,H,"16sint",4,$);case"rgba16float":return void I(i,H,"16float",4,$);case"r32uint":return void I(i,H,"32uint",1,$);case"r32sint":return void I(i,H,"32sint",1,$);case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return void I(i,H,"32float",1,$);case"rg32uint":return void I(i,H,"32uint",2,$);case"rg32sint":return void I(i,H,"32sint",2,$);case"rg32float":return void I(i,H,"32float",2,$);case"rgba32uint":return void I(i,H,"32uint",4,$);case"rgba32sint":return void I(i,H,"32sint",4,$);case"rgba32float":return void I(i,H,"32float",4,$);case"rg11b10ufloat":console.error("TODO:rg11b10ufloat not supported for writing")}}(new Uint8Array(P),i,m,g,_,w,T,y,this.format,b)}}(i=>{i[i.token=0]="token",i[i.keyword=1]="keyword",i[i.reserved=2]="reserved"})(Mn||(Mn={}));class We{constructor(i,m,g){this.name=i,this.type=m,this.rule=g}toString(){return this.name}}class qe{}wn=qe,qe.none=new We("",Mn.reserved,""),qe.eof=new We("EOF",Mn.token,""),qe.reserved={asm:new We("asm",Mn.reserved,"asm"),bf16:new We("bf16",Mn.reserved,"bf16"),do:new We("do",Mn.reserved,"do"),enum:new We("enum",Mn.reserved,"enum"),f16:new We("f16",Mn.reserved,"f16"),f64:new We("f64",Mn.reserved,"f64"),handle:new We("handle",Mn.reserved,"handle"),i8:new We("i8",Mn.reserved,"i8"),i16:new We("i16",Mn.reserved,"i16"),i64:new We("i64",Mn.reserved,"i64"),mat:new We("mat",Mn.reserved,"mat"),premerge:new We("premerge",Mn.reserved,"premerge"),regardless:new We("regardless",Mn.reserved,"regardless"),typedef:new We("typedef",Mn.reserved,"typedef"),u8:new We("u8",Mn.reserved,"u8"),u16:new We("u16",Mn.reserved,"u16"),u64:new We("u64",Mn.reserved,"u64"),unless:new We("unless",Mn.reserved,"unless"),using:new We("using",Mn.reserved,"using"),vec:new We("vec",Mn.reserved,"vec"),void:new We("void",Mn.reserved,"void")},qe.keywords={array:new We("array",Mn.keyword,"array"),atomic:new We("atomic",Mn.keyword,"atomic"),bool:new We("bool",Mn.keyword,"bool"),f32:new We("f32",Mn.keyword,"f32"),i32:new We("i32",Mn.keyword,"i32"),mat2x2:new We("mat2x2",Mn.keyword,"mat2x2"),mat2x3:new We("mat2x3",Mn.keyword,"mat2x3"),mat2x4:new We("mat2x4",Mn.keyword,"mat2x4"),mat3x2:new We("mat3x2",Mn.keyword,"mat3x2"),mat3x3:new We("mat3x3",Mn.keyword,"mat3x3"),mat3x4:new We("mat3x4",Mn.keyword,"mat3x4"),mat4x2:new We("mat4x2",Mn.keyword,"mat4x2"),mat4x3:new We("mat4x3",Mn.keyword,"mat4x3"),mat4x4:new We("mat4x4",Mn.keyword,"mat4x4"),ptr:new We("ptr",Mn.keyword,"ptr"),sampler:new We("sampler",Mn.keyword,"sampler"),sampler_comparison:new We("sampler_comparison",Mn.keyword,"sampler_comparison"),struct:new We("struct",Mn.keyword,"struct"),texture_1d:new We("texture_1d",Mn.keyword,"texture_1d"),texture_2d:new We("texture_2d",Mn.keyword,"texture_2d"),texture_2d_array:new We("texture_2d_array",Mn.keyword,"texture_2d_array"),texture_3d:new We("texture_3d",Mn.keyword,"texture_3d"),texture_cube:new We("texture_cube",Mn.keyword,"texture_cube"),texture_cube_array:new We("texture_cube_array",Mn.keyword,"texture_cube_array"),texture_multisampled_2d:new We("texture_multisampled_2d",Mn.keyword,"texture_multisampled_2d"),texture_storage_1d:new We("texture_storage_1d",Mn.keyword,"texture_storage_1d"),texture_storage_2d:new We("texture_storage_2d",Mn.keyword,"texture_storage_2d"),texture_storage_2d_array:new We("texture_storage_2d_array",Mn.keyword,"texture_storage_2d_array"),texture_storage_3d:new We("texture_storage_3d",Mn.keyword,"texture_storage_3d"),texture_depth_2d:new We("texture_depth_2d",Mn.keyword,"texture_depth_2d"),texture_depth_2d_array:new We("texture_depth_2d_array",Mn.keyword,"texture_depth_2d_array"),texture_depth_cube:new We("texture_depth_cube",Mn.keyword,"texture_depth_cube"),texture_depth_cube_array:new We("texture_depth_cube_array",Mn.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new We("texture_depth_multisampled_2d",Mn.keyword,"texture_depth_multisampled_2d"),texture_external:new We("texture_external",Mn.keyword,"texture_external"),u32:new We("u32",Mn.keyword,"u32"),vec2:new We("vec2",Mn.keyword,"vec2"),vec3:new We("vec3",Mn.keyword,"vec3"),vec4:new We("vec4",Mn.keyword,"vec4"),bitcast:new We("bitcast",Mn.keyword,"bitcast"),block:new We("block",Mn.keyword,"block"),break:new We("break",Mn.keyword,"break"),case:new We("case",Mn.keyword,"case"),continue:new We("continue",Mn.keyword,"continue"),continuing:new We("continuing",Mn.keyword,"continuing"),default:new We("default",Mn.keyword,"default"),diagnostic:new We("diagnostic",Mn.keyword,"diagnostic"),discard:new We("discard",Mn.keyword,"discard"),else:new We("else",Mn.keyword,"else"),enable:new We("enable",Mn.keyword,"enable"),fallthrough:new We("fallthrough",Mn.keyword,"fallthrough"),false:new We("false",Mn.keyword,"false"),fn:new We("fn",Mn.keyword,"fn"),for:new We("for",Mn.keyword,"for"),function:new We("function",Mn.keyword,"function"),if:new We("if",Mn.keyword,"if"),let:new We("let",Mn.keyword,"let"),const:new We("const",Mn.keyword,"const"),loop:new We("loop",Mn.keyword,"loop"),while:new We("while",Mn.keyword,"while"),private:new We("private",Mn.keyword,"private"),read:new We("read",Mn.keyword,"read"),read_write:new We("read_write",Mn.keyword,"read_write"),return:new We("return",Mn.keyword,"return"),requires:new We("requires",Mn.keyword,"requires"),storage:new We("storage",Mn.keyword,"storage"),switch:new We("switch",Mn.keyword,"switch"),true:new We("true",Mn.keyword,"true"),alias:new We("alias",Mn.keyword,"alias"),type:new We("type",Mn.keyword,"type"),uniform:new We("uniform",Mn.keyword,"uniform"),var:new We("var",Mn.keyword,"var"),override:new We("override",Mn.keyword,"override"),workgroup:new We("workgroup",Mn.keyword,"workgroup"),write:new We("write",Mn.keyword,"write"),r8unorm:new We("r8unorm",Mn.keyword,"r8unorm"),r8snorm:new We("r8snorm",Mn.keyword,"r8snorm"),r8uint:new We("r8uint",Mn.keyword,"r8uint"),r8sint:new We("r8sint",Mn.keyword,"r8sint"),r16uint:new We("r16uint",Mn.keyword,"r16uint"),r16sint:new We("r16sint",Mn.keyword,"r16sint"),r16float:new We("r16float",Mn.keyword,"r16float"),rg8unorm:new We("rg8unorm",Mn.keyword,"rg8unorm"),rg8snorm:new We("rg8snorm",Mn.keyword,"rg8snorm"),rg8uint:new We("rg8uint",Mn.keyword,"rg8uint"),rg8sint:new We("rg8sint",Mn.keyword,"rg8sint"),r32uint:new We("r32uint",Mn.keyword,"r32uint"),r32sint:new We("r32sint",Mn.keyword,"r32sint"),r32float:new We("r32float",Mn.keyword,"r32float"),rg16uint:new We("rg16uint",Mn.keyword,"rg16uint"),rg16sint:new We("rg16sint",Mn.keyword,"rg16sint"),rg16float:new We("rg16float",Mn.keyword,"rg16float"),rgba8unorm:new We("rgba8unorm",Mn.keyword,"rgba8unorm"),rgba8unorm_srgb:new We("rgba8unorm_srgb",Mn.keyword,"rgba8unorm_srgb"),rgba8snorm:new We("rgba8snorm",Mn.keyword,"rgba8snorm"),rgba8uint:new We("rgba8uint",Mn.keyword,"rgba8uint"),rgba8sint:new We("rgba8sint",Mn.keyword,"rgba8sint"),bgra8unorm:new We("bgra8unorm",Mn.keyword,"bgra8unorm"),bgra8unorm_srgb:new We("bgra8unorm_srgb",Mn.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new We("rgb10a2unorm",Mn.keyword,"rgb10a2unorm"),rg11b10float:new We("rg11b10float",Mn.keyword,"rg11b10float"),rg32uint:new We("rg32uint",Mn.keyword,"rg32uint"),rg32sint:new We("rg32sint",Mn.keyword,"rg32sint"),rg32float:new We("rg32float",Mn.keyword,"rg32float"),rgba16uint:new We("rgba16uint",Mn.keyword,"rgba16uint"),rgba16sint:new We("rgba16sint",Mn.keyword,"rgba16sint"),rgba16float:new We("rgba16float",Mn.keyword,"rgba16float"),rgba32uint:new We("rgba32uint",Mn.keyword,"rgba32uint"),rgba32sint:new We("rgba32sint",Mn.keyword,"rgba32sint"),rgba32float:new We("rgba32float",Mn.keyword,"rgba32float"),static_assert:new We("static_assert",Mn.keyword,"static_assert")},qe.tokens={decimal_float_literal:new We("decimal_float_literal",Mn.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/),hex_float_literal:new We("hex_float_literal",Mn.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/),int_literal:new We("int_literal",Mn.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new We("uint_literal",Mn.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),name:new We("name",Mn.token,/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u),ident:new We("ident",Mn.token,/[_a-zA-Z][0-9a-zA-Z_]*/),and:new We("and",Mn.token,"&"),and_and:new We("and_and",Mn.token,"&&"),arrow:new We("arrow ",Mn.token,"->"),attr:new We("attr",Mn.token,"@"),forward_slash:new We("forward_slash",Mn.token,"/"),bang:new We("bang",Mn.token,"!"),bracket_left:new We("bracket_left",Mn.token,"["),bracket_right:new We("bracket_right",Mn.token,"]"),brace_left:new We("brace_left",Mn.token,"{"),brace_right:new We("brace_right",Mn.token,"}"),colon:new We("colon",Mn.token,":"),comma:new We("comma",Mn.token,","),equal:new We("equal",Mn.token,"="),equal_equal:new We("equal_equal",Mn.token,"=="),not_equal:new We("not_equal",Mn.token,"!="),greater_than:new We("greater_than",Mn.token,">"),greater_than_equal:new We("greater_than_equal",Mn.token,">="),shift_right:new We("shift_right",Mn.token,">>"),less_than:new We("less_than",Mn.token,"<"),less_than_equal:new We("less_than_equal",Mn.token,"<="),shift_left:new We("shift_left",Mn.token,"<<"),modulo:new We("modulo",Mn.token,"%"),minus:new We("minus",Mn.token,"-"),minus_minus:new We("minus_minus",Mn.token,"--"),period:new We("period",Mn.token,"."),plus:new We("plus",Mn.token,"+"),plus_plus:new We("plus_plus",Mn.token,"++"),or:new We("or",Mn.token,"|"),or_or:new We("or_or",Mn.token,"||"),paren_left:new We("paren_left",Mn.token,"("),paren_right:new We("paren_right",Mn.token,")"),semicolon:new We("semicolon",Mn.token,";"),star:new We("star",Mn.token,"*"),tilde:new We("tilde",Mn.token,"~"),underscore:new We("underscore",Mn.token,"_"),xor:new We("xor",Mn.token,"^"),plus_equal:new We("plus_equal",Mn.token,"+="),minus_equal:new We("minus_equal",Mn.token,"-="),times_equal:new We("times_equal",Mn.token,"*="),division_equal:new We("division_equal",Mn.token,"/="),modulo_equal:new We("modulo_equal",Mn.token,"%="),and_equal:new We("and_equal",Mn.token,"&="),or_equal:new We("or_equal",Mn.token,"|="),xor_equal:new We("xor_equal",Mn.token,"^="),shift_right_equal:new We("shift_right_equal",Mn.token,">>="),shift_left_equal:new We("shift_left_equal",Mn.token,"<<=")},qe.simpleTokens={"@":wn.tokens.attr,"{":wn.tokens.brace_left,"}":wn.tokens.brace_right,":":wn.tokens.colon,",":wn.tokens.comma,"(":wn.tokens.paren_left,")":wn.tokens.paren_right,";":wn.tokens.semicolon},qe.literalTokens={"&":wn.tokens.and,"&&":wn.tokens.and_and,"->":wn.tokens.arrow,"/":wn.tokens.forward_slash,"!":wn.tokens.bang,"[":wn.tokens.bracket_left,"]":wn.tokens.bracket_right,"=":wn.tokens.equal,"==":wn.tokens.equal_equal,"!=":wn.tokens.not_equal,">":wn.tokens.greater_than,">=":wn.tokens.greater_than_equal,">>":wn.tokens.shift_right,"<":wn.tokens.less_than,"<=":wn.tokens.less_than_equal,"<<":wn.tokens.shift_left,"%":wn.tokens.modulo,"-":wn.tokens.minus,"--":wn.tokens.minus_minus,".":wn.tokens.period,"+":wn.tokens.plus,"++":wn.tokens.plus_plus,"|":wn.tokens.or,"||":wn.tokens.or_or,"*":wn.tokens.star,"~":wn.tokens.tilde,_:wn.tokens.underscore,"^":wn.tokens.xor,"+=":wn.tokens.plus_equal,"-=":wn.tokens.minus_equal,"*=":wn.tokens.times_equal,"/=":wn.tokens.division_equal,"%=":wn.tokens.modulo_equal,"&=":wn.tokens.and_equal,"|=":wn.tokens.or_equal,"^=":wn.tokens.xor_equal,">>=":wn.tokens.shift_right_equal,"<<=":wn.tokens.shift_left_equal},qe.regexTokens={decimal_float_literal:wn.tokens.decimal_float_literal,hex_float_literal:wn.tokens.hex_float_literal,int_literal:wn.tokens.int_literal,uint_literal:wn.tokens.uint_literal,ident:wn.tokens.ident},qe.storage_class=[wn.keywords.function,wn.keywords.private,wn.keywords.workgroup,wn.keywords.uniform,wn.keywords.storage],qe.access_mode=[wn.keywords.read,wn.keywords.write,wn.keywords.read_write],qe.sampler_type=[wn.keywords.sampler,wn.keywords.sampler_comparison],qe.sampled_texture_type=[wn.keywords.texture_1d,wn.keywords.texture_2d,wn.keywords.texture_2d_array,wn.keywords.texture_3d,wn.keywords.texture_cube,wn.keywords.texture_cube_array],qe.multisampled_texture_type=[wn.keywords.texture_multisampled_2d],qe.storage_texture_type=[wn.keywords.texture_storage_1d,wn.keywords.texture_storage_2d,wn.keywords.texture_storage_2d_array,wn.keywords.texture_storage_3d],qe.depth_texture_type=[wn.keywords.texture_depth_2d,wn.keywords.texture_depth_2d_array,wn.keywords.texture_depth_cube,wn.keywords.texture_depth_cube_array,wn.keywords.texture_depth_multisampled_2d],qe.texture_external_type=[wn.keywords.texture_external],qe.any_texture_type=[...wn.sampled_texture_type,...wn.multisampled_texture_type,...wn.storage_texture_type,...wn.depth_texture_type,...wn.texture_external_type],qe.texel_format=[wn.keywords.r8unorm,wn.keywords.r8snorm,wn.keywords.r8uint,wn.keywords.r8sint,wn.keywords.r16uint,wn.keywords.r16sint,wn.keywords.r16float,wn.keywords.rg8unorm,wn.keywords.rg8snorm,wn.keywords.rg8uint,wn.keywords.rg8sint,wn.keywords.r32uint,wn.keywords.r32sint,wn.keywords.r32float,wn.keywords.rg16uint,wn.keywords.rg16sint,wn.keywords.rg16float,wn.keywords.rgba8unorm,wn.keywords.rgba8unorm_srgb,wn.keywords.rgba8snorm,wn.keywords.rgba8uint,wn.keywords.rgba8sint,wn.keywords.bgra8unorm,wn.keywords.bgra8unorm_srgb,wn.keywords.rgb10a2unorm,wn.keywords.rg11b10float,wn.keywords.rg32uint,wn.keywords.rg32sint,wn.keywords.rg32float,wn.keywords.rgba16uint,wn.keywords.rgba16sint,wn.keywords.rgba16float,wn.keywords.rgba32uint,wn.keywords.rgba32sint,wn.keywords.rgba32float],qe.const_literal=[wn.tokens.int_literal,wn.tokens.uint_literal,wn.tokens.decimal_float_literal,wn.tokens.hex_float_literal,wn.keywords.true,wn.keywords.false],qe.literal_or_ident=[wn.tokens.ident,wn.tokens.int_literal,wn.tokens.uint_literal,wn.tokens.decimal_float_literal,wn.tokens.hex_float_literal,wn.tokens.name],qe.element_count_expression=[wn.tokens.int_literal,wn.tokens.uint_literal,wn.tokens.ident],qe.template_types=[wn.keywords.vec2,wn.keywords.vec3,wn.keywords.vec4,wn.keywords.mat2x2,wn.keywords.mat2x3,wn.keywords.mat2x4,wn.keywords.mat3x2,wn.keywords.mat3x3,wn.keywords.mat3x4,wn.keywords.mat4x2,wn.keywords.mat4x3,wn.keywords.mat4x4,wn.keywords.atomic,wn.keywords.bitcast,...wn.any_texture_type],qe.attribute_name=[wn.tokens.ident,wn.keywords.block,wn.keywords.diagnostic],qe.assignment_operators=[wn.tokens.equal,wn.tokens.plus_equal,wn.tokens.minus_equal,wn.tokens.times_equal,wn.tokens.division_equal,wn.tokens.modulo_equal,wn.tokens.and_equal,wn.tokens.or_equal,wn.tokens.xor_equal,wn.tokens.shift_right_equal,wn.tokens.shift_left_equal],qe.increment_operators=[wn.tokens.plus_plus,wn.tokens.minus_minus];class He{constructor(i,m,g,_,b){this.type=i,this.lexeme=m,this.line=g,this.start=_,this.end=b}toString(){return this.lexeme}isTemplateType(){return-1!=qe.template_types.indexOf(this.type)}isArrayType(){return this.type==qe.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class ze{constructor(i){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=i?i:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new He(qe.eof,"",this._line,this._current,this._current)),this._tokens}scanToken(){let i=this._advance();if("\n"==i)return this._line++,!0;if(this._isWhitespace(i))return!0;if("/"==i){if("/"==this._peekAhead()){for(;"\n"!=i;){if(this._isAtEnd())return!0;i=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let m=1;for(;m>0;){if(this._isAtEnd())return!0;if(i=this._advance(),"\n"==i)this._line++;else if("*"==i){if("/"==this._peekAhead()&&(this._advance(),m--,0==m))return!0}else"/"==i&&"*"==this._peekAhead()&&(this._advance(),m++)}return!0}}const m=qe.simpleTokens[i];if(m)return this._addToken(m),!0;let g=qe.none;const _=this._isAlpha(i),b="_"===i;if(this._isAlphaNumeric(i)){let m=this._peekAhead();for(;this._isAlphaNumeric(m);)i+=this._advance(),m=this._peekAhead()}if(_){const m=qe.keywords[i];if(m)return this._addToken(m),!0}if(_||b)return this._addToken(qe.tokens.ident),!0;for(;;){let m=this._findType(i);const _=this._peekAhead();if("-"==i&&this._tokens.length>0){if("="==_)return this._current++,i+=_,this._addToken(qe.tokens.minus_equal),!0;if("-"==_)return this._current++,i+=_,this._addToken(qe.tokens.minus_minus),!0;const g=this._tokens.length-1;if((-1!=qe.literal_or_ident.indexOf(this._tokens[g].type)||this._tokens[g].type==qe.tokens.paren_right)&&">"!=_)return this._addToken(m),!0}if(">"==i&&(">"==_||"="==_)){let i=!1,g=this._tokens.length-1;for(let m=0;m<5&&g>=0&&-1===qe.assignment_operators.indexOf(this._tokens[g].type);++m,--g)if(this._tokens[g].type===qe.tokens.less_than){g>0&&this._tokens[g-1].isArrayOrTemplateType()&&(i=!0);break}if(i)return this._addToken(m),!0}if(m===qe.none){let _=i,b=0;const y=2;for(let i=0;i<y;++i)if(_+=this._peekAhead(i),m=this._findType(_),m!==qe.none){b=i;break}if(m===qe.none)return g!==qe.none&&(this._current--,this._addToken(g),!0);i=_,this._current+=b+1}if(g=m,this._isAtEnd())break;i+=this._advance()}return g!==qe.none&&(this._addToken(g),!0)}_findType(i){for(const m in qe.regexTokens){const g=qe.regexTokens[m];if(this._match(i,g.rule))return g}return qe.literalTokens[i]||qe.none}_match(i,m){const g=m.exec(i);return g&&0==g.index&&g[0]==i}_isAtEnd(){return this._current>=this._source.length}_isAlpha(i){return!this._isNumeric(i)&&!this._isWhitespace(i)&&"_"!==i&&"."!==i&&"("!==i&&")"!==i&&"["!==i&&"]"!==i&&"{"!==i&&"}"!==i&&","!==i&&";"!==i&&":"!==i&&"="!==i&&"!"!==i&&"<"!==i&&">"!==i&&"+"!==i&&"-"!==i&&"*"!==i&&"/"!==i&&"%"!==i&&"&"!==i&&"|"!==i&&"^"!==i&&"~"!==i&&"@"!==i&&"#"!==i&&"?"!==i&&"'"!==i&&"`"!==i&&'"'!==i&&"\\"!==i&&"\n"!==i&&"\r"!==i&&"\t"!==i&&"\0"!==i}_isNumeric(i){return i>="0"&&i<="9"}_isAlphaNumeric(i){return this._isAlpha(i)||this._isNumeric(i)||"_"===i}_isWhitespace(i){return" "==i||"\t"==i||"\r"==i}_advance(i=0){let m=this._source[this._current];return i=i||0,i++,this._current+=i,m}_peekAhead(i=0){return i=i||0,this._current+i>=this._source.length?"\0":this._source[this._current+i]}_addToken(i){const m=this._source.substring(this._start,this._current);this._tokens.push(new He(i,m,this._line,this._start,this._current))}}function Re(i){return Array.isArray(i)||(null==i?void 0:i.buffer)instanceof ArrayBuffer}const Rn=new Float32Array(1),Pn=new Uint32Array(Rn.buffer),Cn=new Uint32Array(Rn.buffer),In=new Int32Array(1),En=new Float32Array(In.buffer),Ln=new Uint32Array(In.buffer),Bn=new Uint32Array(1),Un=new Float32Array(Bn.buffer),Dn=new Int32Array(Bn.buffer);function tt(i,m,g){if(m===g)return i;if("f32"===m){if("i32"===g||"x32"===g)return Rn[0]=i,Pn[0];if("u32"===g)return Rn[0]=i,Cn[0]}else if("i32"===m||"x32"===m){if("f32"===g)return In[0]=i,En[0];if("u32"===g)return In[0]=i,Ln[0]}else if("u32"===m){if("f32"===g)return Bn[0]=i,Un[0];if("i32"===g||"x32"===g)return Bn[0]=i,Dn[0]}return console.error(`Unsupported cast from ${m} to ${g}`),i}class nt{constructor(i){this.resources=null,this.inUse=!1,this.info=null,this.node=i}}class st{constructor(i,m){this.align=i,this.size=m}}class rt{constructor(){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new d,this.functions=[],this._types=new Map,this._functions=new Map}_isStorageTexture(i){return"texture_storage_1d"==i.name||"texture_storage_2d"==i.name||"texture_storage_2d_array"==i.name||"texture_storage_3d"==i.name}updateAST(i){for(const m of i)m instanceof C&&this._functions.set(m.name,new nt(m));for(const m of i)if(m instanceof ie){const i=this.getTypeInfo(m,null);i instanceof n&&this.structs.push(i)}for(const m of i)if(m instanceof ee)this.aliases.push(this._getAliasInfo(m));else if(m instanceof F){const i=m,g=this._getAttributeNum(i.attributes,"id",0),_=null!=i.type?this.getTypeInfo(i.type,i.attributes):null;this.overrides.push(new h(i.name,_,i.attributes,g))}else if(this._isUniformVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=new o(i.name,b,g,_,i.attributes,mn.Uniform,i.access);y.access||(y.access="read"),this.uniforms.push(y)}else if(this._isStorageVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=this._isStorageTexture(b),T=new o(i.name,b,g,_,i.attributes,y?mn.StorageTexture:mn.Storage,i.access);T.access||(T.access="read"),this.storage.push(T)}else if(this._isTextureVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=this._isStorageTexture(b),T=new o(i.name,b,g,_,i.attributes,y?mn.StorageTexture:mn.Texture,i.access);T.access||(T.access="read"),y?this.storage.push(T):this.textures.push(T)}else if(this._isSamplerVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=new o(i.name,b,g,_,i.attributes,mn.Sampler,i.access);this.samplers.push(y)}for(const m of i)if(m instanceof C){const i=this._getAttribute(m,"vertex"),g=this._getAttribute(m,"fragment"),_=this._getAttribute(m,"compute"),b=i||g||_,y=new p(m.name,null==b?void 0:b.name,m.attributes);y.attributes=m.attributes,y.startLine=m.startLine,y.endLine=m.endLine,this.functions.push(y),this._functions.get(m.name).info=y,b&&(this._functions.get(m.name).inUse=!0,y.inUse=!0,y.resources=this._findResources(m,!!b),y.inputs=this._getInputs(m.args),y.outputs=this._getOutputs(m.returnType),this.entry[b.name].push(y)),y.arguments=m.args.map(i=>new f(i.name,this.getTypeInfo(i.type,i.attributes),i.attributes)),y.returnType=m.returnType?this.getTypeInfo(m.returnType,m.attributes):null}for(const i of this._functions.values())i.info&&(i.info.inUse=i.inUse,this._addCalls(i.node,i.info.calls));for(const i of this._functions.values())i.node.search(m=>{var g,_,b;if(m instanceof Ce){if(m.value)if(Re(m.value))for(const _ of m.value)for(const m of this.overrides)_===m.name&&(null===(g=i.info)||void 0===g||g.overrides.push(m));else for(const g of this.overrides)m.value===g.name&&(null===(_=i.info)||void 0===_||_.overrides.push(g))}else if(m instanceof me)for(const g of this.overrides)m.name===g.name&&(null===(b=i.info)||void 0===b||b.overrides.push(g))});for(const i of this.uniforms)this._markStructsInUse(i.type);for(const i of this.storage)this._markStructsInUse(i.type)}getStructInfo(i){for(const m of this.structs)if(m.name==i)return m;return null}getOverrideInfo(i){for(const m of this.overrides)if(m.name==i)return m;return null}_markStructsInUse(i){if(i)if(i.isStruct){if(i.inUse=!0,i.members)for(const m of i.members)this._markStructsInUse(m.type)}else if(i.isArray)this._markStructsInUse(i.format);else if(i.isTemplate)i.format&&this._markStructsInUse(i.format);else{const m=this._getAlias(i.name);m&&this._markStructsInUse(m)}}_addCalls(i,m){var g;for(const _ of i.calls){const i=null===(g=this._functions.get(_.name))||void 0===g?void 0:g.info;i&&m.add(i)}}findResource(i,m,g){if(g){for(const _ of this.entry.compute)if(_.name===g)for(const g of _.resources)if(g.group==i&&g.binding==m)return g;for(const _ of this.entry.vertex)if(_.name===g)for(const g of _.resources)if(g.group==i&&g.binding==m)return g;for(const _ of this.entry.fragment)if(_.name===g)for(const g of _.resources)if(g.group==i&&g.binding==m)return g}for(const g of this.uniforms)if(g.group==i&&g.binding==m)return g;for(const g of this.storage)if(g.group==i&&g.binding==m)return g;for(const g of this.textures)if(g.group==i&&g.binding==m)return g;for(const g of this.samplers)if(g.group==i&&g.binding==m)return g;return null}_findResource(i){for(const m of this.uniforms)if(m.name==i)return m;for(const m of this.storage)if(m.name==i)return m;for(const m of this.textures)if(m.name==i)return m;for(const m of this.samplers)if(m.name==i)return m;return null}_markStructsFromAST(i){const m=this.getTypeInfo(i,null);this._markStructsInUse(m)}_findResources(i,m){const g=[],_=this,b=[];return i.search(y=>{if(y instanceof A)b.push({});else if(y instanceof E)b.pop();else if(y instanceof B){const i=y;m&&null!==i.type&&this._markStructsFromAST(i.type),b.length>0&&(b[b.length-1][i.name]=i)}else if(y instanceof pe){const i=y;m&&null!==i.type&&this._markStructsFromAST(i.type)}else if(y instanceof M){const i=y;m&&null!==i.type&&this._markStructsFromAST(i.type),b.length>0&&(b[b.length-1][i.name]=i)}else if(y instanceof me){const i=y;if(b.length>0&&b[b.length-1][i.name])return;const m=_._findResource(i.name);m&&g.push(m)}else if(y instanceof de){const b=y,T=_._functions.get(b.name);T&&(m&&(T.inUse=!0),i.calls.add(T.node),null===T.resources&&(T.resources=_._findResources(T.node,m)),g.push(...T.resources))}else if(y instanceof G){const b=y,T=_._functions.get(b.name);T&&(m&&(T.inUse=!0),i.calls.add(T.node),null===T.resources&&(T.resources=_._findResources(T.node,m)),g.push(...T.resources))}}),[...new Map(g.map(i=>[i.name,i])).values()]}getBindGroups(){const i=[];function t(m,g){m>=i.length&&(i.length=m+1),void 0===i[m]&&(i[m]=[]),g>=i[m].length&&(i[m].length=g+1)}for(const m of this.uniforms)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.storage)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.textures)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.samplers)t(m.group,m.binding),i[m.group][m.binding]=m;return i}_getOutputs(i,m=void 0){if(void 0===m&&(m=[]),i instanceof ie)this._getStructOutputs(i,m);else{const g=this._getOutputInfo(i);null!==g&&m.push(g)}return m}_getStructOutputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructOutputs(g.type,m);else{const i=this._getAttribute(g,"location")||this._getAttribute(g,"builtin");if(null!==i){const _=this.getTypeInfo(g.type,g.type.attributes),b=this._parseInt(i.value),y=new u(g.name,_,i.name,b);m.push(y)}}}_getOutputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this.getTypeInfo(i,i.attributes),_=this._parseInt(m.value);return new u("",g,m.name,_)}return null}_getInputs(i,m=void 0){void 0===m&&(m=[]);for(const g of i)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}return m}_getStructInputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}}_getInputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this._getAttribute(i,"interpolation"),_=this.getTypeInfo(i.type,i.attributes),b=this._parseInt(m.value),y=new c(i.name,_,m.name,b);return null!==g&&(y.interpolation=this._parseString(g.value)),y}return null}_parseString(i){return i instanceof Array&&(i=i[0]),i}_parseInt(i){i instanceof Array&&(i=i[0]);const m=parseInt(i);return isNaN(m)?i:m}_getAlias(i){for(const m of this.aliases)if(m.name==i)return m.type;return null}_getAliasInfo(i){return new l(i.name,this.getTypeInfo(i.type,null))}getTypeInfoByName(i){for(const m of this.structs)if(m.name==i)return m;for(const m of this.aliases)if(m.name==i)return m.type;return null}getTypeInfo(i,m=null){if(this._types.has(i))return this._types.get(i);if(i instanceof le){const g=i.type?this.getTypeInfo(i.type,i.attributes):null,_=new r(i.name,g,m);return this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof ce){const g=i,_=g.format?this.getTypeInfo(g.format,g.attributes):null,b=new s(g.name,m);return b.format=_,b.count=g.count,this._types.set(i,b),this._updateTypeInfo(b),b}if(i instanceof ie){const g=i,_=new n(g.name,m);_.startLine=g.startLine,_.endLine=g.endLine;for(const i of g.members){const m=this.getTypeInfo(i.type,i.attributes);_.members.push(new t(i.name,m,i.attributes))}return this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof ue){const g=i,_=g.format instanceof re,b=g.format?_?this.getTypeInfo(g.format,null):new e(g.format,null):null,y=new a(g.name,b,m,g.access);return this._types.set(i,y),this._updateTypeInfo(y),y}if(i instanceof oe){const g=i,_=g.format?this.getTypeInfo(g.format,null):null,b=new a(g.name,_,m,g.access);return this._types.set(i,b),this._updateTypeInfo(b),b}const g=new e(i.name,m);return this._types.set(i,g),this._updateTypeInfo(g),g}_updateTypeInfo(i){var m,g,_;const b=this._getTypeSize(i);if(i.size=null!==(m=null==b?void 0:b.size)&&void 0!==m?m:0,i instanceof s&&i.format){const m=this._getTypeSize(i.format);i.stride=Math.max(null!==(g=null==m?void 0:m.size)&&void 0!==g?g:0,null!==(_=null==m?void 0:m.align)&&void 0!==_?_:0),this._updateTypeInfo(i.format)}i instanceof r&&this._updateTypeInfo(i.format),i instanceof n&&this._updateStructInfo(i)}_updateStructInfo(i){var m;let g=0,_=0,b=0,y=0;for(let T=0,w=i.members.length;T<w;++T){const w=i.members[T],P=this._getTypeSize(w);if(!P)continue;null!==(m=this._getAlias(w.type.name))&&void 0!==m||w.type;const $=P.align,H=P.size;g=this._roundUp($,g+_),_=H,b=g,y=Math.max(y,$),w.offset=g,w.size=H,this._updateTypeInfo(w.type)}i.size=this._roundUp(y,b+_),i.align=y}_getTypeSize(i){var m,g;if(null==i)return null;const _=this._getAttributeNum(i.attributes,"size",0),b=this._getAttributeNum(i.attributes,"align",0);if(i instanceof t&&(i=i.type),i instanceof e){const m=this._getAlias(i.name);null!==m&&(i=m)}{const g=rt._typeInfo[i.name];if(void 0!==g){const y="f16"===(null===(m=i.format)||void 0===m?void 0:m.name)?2:1;return new st(Math.max(b,g.align/y),Math.max(_,g.size/y))}}{const m=rt._typeInfo[i.name.substring(0,i.name.length-1)];if(m){const g="h"===i.name[i.name.length-1]?2:1;return new st(Math.max(b,m.align/g),Math.max(_,m.size/g))}}if(i instanceof s){let m=i,y=8,T=8;const w=this._getTypeSize(m.format);return null!==w&&(T=w.size,y=w.align),T=m.count*this._getAttributeNum(null!==(g=null==i?void 0:i.attributes)&&void 0!==g?g:null,"stride",this._roundUp(y,T)),_&&(T=_),new st(Math.max(b,y),Math.max(_,T))}if(i instanceof n){let m=0,g=0,y=0,T=0,w=0;for(const g of i.members){const i=this._getTypeSize(g.type);null!==i&&(m=Math.max(i.align,m),y=this._roundUp(i.align,y+T),T=i.size,w=y)}return g=this._roundUp(m,w+T),new st(Math.max(b,m),Math.max(_,g))}return null}_isUniformVar(i){return i instanceof B&&"uniform"==i.storage}_isStorageVar(i){return i instanceof B&&"storage"==i.storage}_isTextureVar(i){return i instanceof B&&null!==i.type&&-1!=rt._textureTypes.indexOf(i.type.name)}_isSamplerVar(i){return i instanceof B&&null!==i.type&&-1!=rt._samplerTypes.indexOf(i.type.name)}_getAttribute(i,m){const g=i;if(!g||!g.attributes)return null;const _=g.attributes;for(let i of _)if(i.name==m)return i;return null}_getAttributeNum(i,m,g){if(null===i)return g;for(let _ of i)if(_.name==m){let i=null!==_&&null!==_.value?_.value:g;return i instanceof Array&&(i=i[0]),"number"==typeof i?i:"string"==typeof i?parseInt(i):g}return g}_roundUp(i,m){return Math.ceil(m/i)*i}}rt._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},rt._textureTypes=qe.any_texture_type.map(i=>i.name),rt._samplerTypes=qe.sampler_type.map(i=>i.name);let An=0;class it{constructor(i,m,g){this.id=An++,this.name=i,this.value=m,this.node=g}clone(){return new it(this.name,this.value,this.node)}}class ot{constructor(i){this.id=An++,this.name=i.name,this.node=i}clone(){return new ot(this.node)}}class lt{constructor(i){this.parent=null,this.variables=new Map,this.functions=new Map,this.currentFunctionName="",this.id=An++,i&&(this.parent=i,this.currentFunctionName=i.currentFunctionName)}getVariable(i){var m;return this.variables.has(i)?null!==(m=this.variables.get(i))&&void 0!==m?m:null:this.parent?this.parent.getVariable(i):null}getFunction(i){var m;return this.functions.has(i)?null!==(m=this.functions.get(i))&&void 0!==m?m:null:this.parent?this.parent.getFunction(i):null}createVariable(i,m,g){this.variables.set(i,new it(i,m,null!=g?g:null))}setVariable(i,m,g){const _=this.getVariable(i);null!==_?_.value=m:this.createVariable(i,m,g)}getVariableValue(i){var m;const g=this.getVariable(i);return null!==(m=null==g?void 0:g.value)&&void 0!==m?m:null}clone(){return new lt(this)}}class ct{evalExpression(i,m){return null}getTypeInfo(i){return null}getVariableName(i,m){return""}}class ut{constructor(i){this.exec=i}getTypeInfo(i){return this.exec.getTypeInfo(i)}All(i,m){const g=this.exec.evalExpression(i.args[0],m);let _=!0;if(g instanceof Fe)return g.data.forEach(i=>{i||(_=!1)}),new Oe(_?1:0,this.getTypeInfo("bool"));throw new Error(`All() expects a vector argument. Line ${i.line}`)}Any(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const i=g.data.some(i=>i);return new Oe(i?1:0,this.getTypeInfo("bool"))}throw new Error(`Any() expects a vector argument. Line ${i.line}`)}Select(i,m){const g=this.exec.evalExpression(i.args[2],m);if(!(g instanceof Oe))throw new Error(`Select() expects a bool condition. Line ${i.line}`);return g.value?this.exec.evalExpression(i.args[1],m):this.exec.evalExpression(i.args[0],m)}ArrayLength(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.evalExpression(g,m);if(_ instanceof Ue&&0===_.typeInfo.size){const i=_.typeInfo,m=_.buffer.byteLength/i.stride;return new Oe(m,this.getTypeInfo("u32"))}return new Oe(_.typeInfo.size,this.getTypeInfo("u32"))}Abs(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.abs(i)),g.typeInfo);const _=g;return new Oe(Math.abs(_.value),_.typeInfo)}Acos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acos(i)),g.typeInfo);const _=g;return new Oe(Math.acos(_.value),g.typeInfo)}Acosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acosh(i)),g.typeInfo);const _=g;return new Oe(Math.acosh(_.value),g.typeInfo)}Asin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asin(i)),g.typeInfo);const _=g;return new Oe(Math.asin(_.value),g.typeInfo)}Asinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asinh(i)),g.typeInfo);const _=g;return new Oe(Math.asinh(_.value),g.typeInfo)}Atan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atan(i)),g.typeInfo);const _=g;return new Oe(Math.atan(_.value),g.typeInfo)}Atanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atanh(i)),g.typeInfo);const _=g;return new Oe(Math.atanh(_.value),g.typeInfo)}Atan2(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.atan2(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.atan2(b.value,y.value),g.typeInfo)}Ceil(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.ceil(i)),g.typeInfo);const _=g;return new Oe(Math.ceil(_.value),g.typeInfo)}_clamp(i,m,g){return Math.min(Math.max(i,m),g)}Clamp(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe)return new Fe(g.data.map((i,m)=>this._clamp(i,_.data[m],b.data[m])),g.typeInfo);const y=g,T=_,w=b;return new Oe(this._clamp(y.value,T.value,w.value),g.typeInfo)}Cos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cos(i)),g.typeInfo);const _=g;return new Oe(Math.cos(_.value),g.typeInfo)}Cosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cosh(i)),g.typeInfo);const _=g;return new Oe(Math.cos(_.value),g.typeInfo)}CountLeadingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.clz32(i)),g.typeInfo);const _=g;return new Oe(Math.clz32(_.value),g.typeInfo)}_countOneBits(i){let m=0;for(;0!==i;)1&i&&m++,i>>=1;return m}CountOneBits(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countOneBits(i)),g.typeInfo);const _=g;return new Oe(this._countOneBits(_.value),g.typeInfo)}_countTrailingZeros(i){if(0===i)return 32;let m=0;for(;!(1&i);)i>>=1,m++;return m}CountTrailingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countTrailingZeros(i)),g.typeInfo);const _=g;return new Oe(this._countTrailingZeros(_.value),g.typeInfo)}Cross(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe){if(3!==g.data.length||3!==_.data.length)return console.error(`Cross() expects 3D vectors. Line ${i.line}`),null;const m=g.data,b=_.data;return new Fe([m[1]*b[2]-b[1]*m[2],m[2]*b[0]-b[2]*m[0],m[0]*b[1]-b[0]*m[1]],g.typeInfo)}return console.error(`Cross() expects vector arguments. Line ${i.line}`),null}Degrees(i,m){const g=this.exec.evalExpression(i.args[0],m),_=180/Math.PI;return g instanceof Fe?new Fe(g.data.map(i=>i*_),g.typeInfo):new Oe(g.value*_,this.getTypeInfo("f32"))}Determinant(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Me){const i=g.data,m=g.typeInfo.getTypeName(),_=m.endsWith("h")?this.getTypeInfo("f16"):this.getTypeInfo("f32");if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m)return new Oe(i[0]*i[3]-i[1]*i[2],_);if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),_);if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m)console.error(`TODO:Determinant for ${m}`);else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m)console.error(`TODO:Determinant for ${m}`);else{if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),_);"mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m||"mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m||"mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m?console.error(`TODO:Determinant for ${m}`):"mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m||console.error(`TODO:Determinant for ${m}`)}}return console.error(`Determinant expects a matrix argument. Line ${i.line}`),null}Distance(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe){let i=0;for(let m=0;m<g.data.length;++m)i+=(g.data[m]-_.data[m])*(g.data[m]-_.data[m]);return new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const b=g,y=_;return new Oe(Math.abs(b.value-y.value),g.typeInfo)}_dot(i,m){let g=0;for(let _=0;_<i.length;++_)g+=m[_]*i[_];return g}Dot(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);return g instanceof Fe&&_ instanceof Fe?new Oe(this._dot(g.data,_.data),this.getTypeInfo("f32")):(console.error(`Dot() expects vector arguments. Line ${i.line}`),null)}Dot4U8Packed(i,m){return console.error(`TODO:dot4U8Packed. Line ${i.line}`),null}Dot4I8Packed(i,m){return console.error(`TODO:dot4I8Packed. Line ${i.line}`),null}Exp(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.exp(i)),g.typeInfo);const _=g;return new Oe(Math.exp(_.value),g.typeInfo)}Exp2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.pow(2,i)),g.typeInfo);const _=g;return new Oe(Math.pow(2,_.value),g.typeInfo)}ExtractBits(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if("u32"!==_.typeInfo.name&&"x32"!==_.typeInfo.name)return console.error(`ExtractBits() expects an i32 offset argument. Line ${i.line}`),null;if("u32"!==b.typeInfo.name&&"x32"!==b.typeInfo.name)return console.error(`ExtractBits() expects an i32 count argument. Line ${i.line}`),null;const y=_.value,T=b.value;if(g instanceof Fe)return new Fe(g.data.map(i=>i>>y&(1<<T)-1),g.typeInfo);if("i32"!==g.typeInfo.name&&"x32"!==g.typeInfo.name)return console.error(`ExtractBits() expects an i32 argument. Line ${i.line}`),null;const w=g.value;return new Oe(w>>y&(1<<T)-1,this.getTypeInfo("i32"))}FaceForward(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe){const i=this._dot(_.data,b.data);return new Fe(i<0?Array.from(g.data):g.data.map(i=>-i),g.typeInfo)}return console.error(`FaceForward() expects vector arguments. Line ${i.line}`),null}_firstLeadingBit(i){return 0===i?-1:31-Math.clz32(i)}FirstLeadingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstLeadingBit(i)),g.typeInfo);const _=g;return new Oe(this._firstLeadingBit(_.value),g.typeInfo)}_firstTrailingBit(i){return 0===i?-1:Math.log2(i&-i)}FirstTrailingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstTrailingBit(i)),g.typeInfo);const _=g;return new Oe(this._firstTrailingBit(_.value),g.typeInfo)}Floor(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.floor(i)),g.typeInfo);const _=g;return new Oe(Math.floor(_.value),g.typeInfo)}Fma(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe)return g.data.length!==_.data.length||g.data.length!==b.data.length?(console.error(`Fma() expects vectors of the same length. Line ${i.line}`),null):new Fe(g.data.map((i,m)=>i*_.data[m]+b.data[m]),g.typeInfo);const y=g,T=_,w=b;return new Oe(y.value*T.value+w.value,y.typeInfo)}Fract(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>i-Math.floor(i)),g.typeInfo);const _=g;return new Oe(_.value-Math.floor(_.value),g.typeInfo)}Frexp(i,m){return console.error(`TODO:frexp. Line ${i.line}`),null}InsertBits(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m),y=this.exec.evalExpression(i.args[3],m);if("u32"!==b.typeInfo.name&&"x32"!==b.typeInfo.name)return console.error(`InsertBits() expects an i32 offset argument. Line ${i.line}`),null;const T=b.value,w=(1<<y.value)-1<<T,P=~w;if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>i&P|_.data[m]<<T&w),g.typeInfo);const $=g.value,H=_.value;return new Oe($&P|H<<T&w,g.typeInfo)}InverseSqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>1/Math.sqrt(i)),g.typeInfo);const _=g;return new Oe(1/Math.sqrt(_.value),g.typeInfo)}Ldexp(i,m){return console.error(`TODO:ldexp. Line ${i.line}`),null}Length(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){let i=0;return g.data.forEach(m=>{i+=m*m}),new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const _=g;return new Oe(Math.abs(_.value),g.typeInfo)}Log(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log(i)),g.typeInfo);const _=g;return new Oe(Math.log(_.value),g.typeInfo)}Log2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log2(i)),g.typeInfo);const _=g;return new Oe(Math.log2(_.value),g.typeInfo)}Max(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.max(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.max(b.value,y.value),g.typeInfo)}Min(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.min(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.min(b.value,y.value),g.typeInfo)}Mix(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe)return new Fe(g.data.map((i,m)=>g.data[m]*(1-b.data[m])+_.data[m]*b.data[m]),g.typeInfo);const y=_,T=b;return new Oe(g.value*(1-T.value)+y.value*T.value,g.typeInfo)}Modf(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>i%_.data[m]),g.typeInfo);const b=_;return new Oe(g.value%b.value,g.typeInfo)}Normalize(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const _=this.Length(i,m).value;return new Fe(g.data.map(i=>i/_),g.typeInfo)}return console.error(`Normalize() expects a vector argument. Line ${i.line}`),null}Pow(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.pow(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.pow(b.value,y.value),g.typeInfo)}QuantizeToF16(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i),g.typeInfo):new Oe(g.value,g.typeInfo)}Radians(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i*Math.PI/180),g.typeInfo):new Oe(g.value*Math.PI/180,this.getTypeInfo("f32"))}Reflect(i,m){let g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe){const i=this._dot(g.data,_.data);return new Fe(g.data.map((m,g)=>m-2*i*_.data[g]),g.typeInfo)}return console.error(`Reflect() expects vector arguments. Line ${i.line}`),null}Refract(i,m){let g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Oe){const i=this._dot(_.data,g.data);return new Fe(g.data.map((m,g)=>{const y=1-b.value*b.value*(1-i*i);if(y<0)return 0;const T=Math.sqrt(y);return b.value*m-(b.value*i+T)*_.data[g]}),g.typeInfo)}return console.error(`Refract() expects vector arguments and a scalar argument. Line ${i.line}`),null}ReverseBits(i,m){return console.error(`TODO:reverseBits. Line ${i.line}`),null}Round(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.round(i)),g.typeInfo);const _=g;return new Oe(Math.round(_.value),g.typeInfo)}Saturate(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.min(Math.max(i,0),1)),g.typeInfo);const _=g;return new Oe(Math.min(Math.max(_.value,0),1),g.typeInfo)}Sign(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sign(i)),g.typeInfo);const _=g;return new Oe(Math.sign(_.value),g.typeInfo)}Sin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sin(i)),g.typeInfo);const _=g;return new Oe(Math.sin(_.value),g.typeInfo)}Sinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sinh(i)),g.typeInfo);const _=g;return new Oe(Math.sinh(_.value),g.typeInfo)}_smoothstep(i,m,g){const _=Math.min(Math.max((g-i)/(m-i),0),1);return _*_*(3-2*_)}SmoothStep(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(b instanceof Fe&&g instanceof Fe&&_ instanceof Fe)return new Fe(b.data.map((i,m)=>this._smoothstep(g.data[m],_.data[m],i)),b.typeInfo);const y=g,T=_,w=b;return new Oe(this._smoothstep(y.value,T.value,w.value),b.typeInfo)}Sqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sqrt(i)),g.typeInfo);const _=g;return new Oe(Math.sqrt(_.value),g.typeInfo)}Step(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(_ instanceof Fe&&g instanceof Fe)return new Fe(_.data.map((i,m)=>i<g.data[m]?0:1),_.typeInfo);const b=g;return new Oe(_.value<b.value?0:1,b.typeInfo)}Tan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tan(i)),g.typeInfo);const _=g;return new Oe(Math.tan(_.value),g.typeInfo)}Tanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tanh(i)),g.typeInfo);const _=g;return new Oe(Math.tanh(_.value),g.typeInfo)}_getTransposeType(i){const m=i.getTypeName();return"mat2x2f"===m||"mat2x2h"===m?i:"mat2x3f"===m?this.getTypeInfo("mat3x2f"):"mat2x3h"===m?this.getTypeInfo("mat3x2h"):"mat2x4f"===m?this.getTypeInfo("mat4x2f"):"mat2x4h"===m?this.getTypeInfo("mat4x2h"):"mat3x2f"===m?this.getTypeInfo("mat2x3f"):"mat3x2h"===m?this.getTypeInfo("mat2x3h"):"mat3x3f"===m||"mat3x3h"===m?i:"mat3x4f"===m?this.getTypeInfo("mat4x3f"):"mat3x4h"===m?this.getTypeInfo("mat4x3h"):"mat4x2f"===m?this.getTypeInfo("mat2x4f"):"mat4x2h"===m?this.getTypeInfo("mat2x4h"):"mat4x3f"===m?this.getTypeInfo("mat3x4f"):"mat4x3h"===m?this.getTypeInfo("mat3x4h"):("mat4x4f"===m||"mat4x4h"===m||console.error(`Invalid matrix type ${m}`),i)}Transpose(i,m){const g=this.exec.evalExpression(i.args[0],m);if(!(g instanceof Me))return console.error(`Transpose() expects a matrix argument. Line ${i.line}`),null;const _=this._getTransposeType(g.typeInfo);if("mat2x2"===g.typeInfo.name||"mat2x2f"===g.typeInfo.name||"mat2x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[2],i[1],i[3]],_)}if("mat2x3"===g.typeInfo.name||"mat2x3f"===g.typeInfo.name||"mat2x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7]],_)}if("mat2x4"===g.typeInfo.name||"mat2x4f"===g.typeInfo.name||"mat2x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13]],_)}if("mat3x2"===g.typeInfo.name||"mat3x2f"===g.typeInfo.name||"mat3x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[1],i[4],i[2],i[5]],_)}if("mat3x3"===g.typeInfo.name||"mat3x3f"===g.typeInfo.name||"mat3x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7],i[2],i[5],i[8]],_)}if("mat3x4"===g.typeInfo.name||"mat3x4f"===g.typeInfo.name||"mat3x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14]],_)}if("mat4x2"===g.typeInfo.name||"mat4x2f"===g.typeInfo.name||"mat4x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[1],i[5],i[2],i[6]],_)}if("mat4x3"===g.typeInfo.name||"mat4x3f"===g.typeInfo.name||"mat4x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]],_)}if("mat4x4"===g.typeInfo.name||"mat4x4f"===g.typeInfo.name||"mat4x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14],i[3],i[7],i[11],i[15]],_)}return console.error(`Invalid matrix type ${g.typeInfo.name}`),null}Trunc(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.trunc(i)),g.typeInfo);const _=g;return new Oe(Math.trunc(_.value),g.typeInfo)}Dpdx(i,m){return console.error(`TODO:dpdx. Line ${i.line}`),null}DpdxCoarse(i,m){return console.error(`TODO:dpdxCoarse. Line ${i.line}`),null}DpdxFine(i,m){return console.error("TODO:dpdxFine"),null}Dpdy(i,m){return console.error("TODO:dpdy"),null}DpdyCoarse(i,m){return console.error("TODO:dpdyCoarse"),null}DpdyFine(i,m){return console.error("TODO:dpdyFine"),null}Fwidth(i,m){return console.error("TODO:fwidth"),null}FwidthCoarse(i,m){return console.error("TODO:fwidthCoarse"),null}FwidthFine(i,m){return console.error("TODO:fwidthFine"),null}TextureDimensions(i,m){const g=i.args[0],_=i.args.length>1?this.exec.evalExpression(i.args[1],m).value:0;if(g instanceof me){const b=g.name,y=m.getVariableValue(b);if(y instanceof Pe){if(_<0||_>=y.mipLevelCount)return console.error(`Invalid mip level for textureDimensions. Line ${i.line}`),null;const m=y.getMipLevelSize(_),g=y.dimension;return"1d"===g?new Oe(m[0],this.getTypeInfo("u32")):"3d"===g?new Fe(m,this.getTypeInfo("vec3u")):"2d"===g?new Fe(m.slice(0,2),this.getTypeInfo("vec2u")):(console.error(`Invalid texture dimension ${g} not found. Line ${i.line}`),null)}return console.error(`Texture ${b} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureDimensions. Line ${i.line}`),null}TextureGather(i,m){return console.error("TODO:textureGather"),null}TextureGatherCompare(i,m){return console.error("TODO:textureGatherCompare"),null}TextureLoad(i,m){const g=i.args[0],_=this.exec.evalExpression(i.args[1],m),b=i.args.length>2?this.exec.evalExpression(i.args[2],m).value:0;if(!(_ instanceof Fe)||2!==_.data.length)return console.error(`Invalid UV argument for textureLoad. Line ${i.line}`),null;if(g instanceof me){const y=g.name,T=m.getVariableValue(y);if(T instanceof Pe){const m=Math.floor(_.data[0]),g=Math.floor(_.data[1]);if(m<0||m>=T.width||g<0||g>=T.height)return console.error(`Texture ${y} out of bounds. Line ${i.line}`),null;const w=T.getPixel(m,g,0,b);return null===w?(console.error(`Invalid texture format for textureLoad. Line ${i.line}`),null):new Fe(w,this.getTypeInfo("vec4f"))}return console.error(`Texture ${y} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureLoad. Line ${i.line}`),null}TextureNumLayers(i,m){const g=i.args[0];if(g instanceof me){const _=g.name,b=m.getVariableValue(_);return b instanceof Pe?new Oe(b.depthOrArrayLayers,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLayers. Line ${i.line}`),null}TextureNumLevels(i,m){const g=i.args[0];if(g instanceof me){const _=g.name,b=m.getVariableValue(_);return b instanceof Pe?new Oe(b.mipLevelCount,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLevels. Line ${i.line}`),null}TextureNumSamples(i,m){const g=i.args[0];if(g instanceof me){const _=g.name,b=m.getVariableValue(_);return b instanceof Pe?new Oe(b.sampleCount,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumSamples. Line ${i.line}`),null}TextureSample(i,m){return console.error("TODO:textureSample"),null}TextureSampleBias(i,m){return console.error("TODO:textureSampleBias"),null}TextureSampleCompare(i,m){return console.error("TODO:textureSampleCompare"),null}TextureSampleCompareLevel(i,m){return console.error("TODO:textureSampleCompareLevel"),null}TextureSampleGrad(i,m){return console.error("TODO:textureSampleGrad"),null}TextureSampleLevel(i,m){return console.error("TODO:textureSampleLevel"),null}TextureSampleBaseClampToEdge(i,m){return console.error("TODO:textureSampleBaseClampToEdge"),null}TextureStore(i,m){const g=i.args[0],_=this.exec.evalExpression(i.args[1],m),b=4===i.args.length?this.exec.evalExpression(i.args[2],m).value:0,y=4===i.args.length?this.exec.evalExpression(i.args[3],m).data:this.exec.evalExpression(i.args[2],m).data;if(4!==y.length)return console.error(`Invalid value argument for textureStore. Line ${i.line}`),null;if(!(_ instanceof Fe)||2!==_.data.length)return console.error(`Invalid UV argument for textureStore. Line ${i.line}`),null;if(g instanceof me){const T=g.name,w=m.getVariableValue(T);if(w instanceof Pe){const m=w.getMipLevelSize(0),g=Math.floor(_.data[0]),P=Math.floor(_.data[1]);return g<0||g>=m[0]||P<0||P>=m[1]?(console.error(`Texture ${T} out of bounds. Line ${i.line}`),null):(w.setPixel(g,P,0,b,Array.from(y)),null)}return console.error(`Texture ${T} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureStore. Line ${i.line}`),null}AtomicLoad(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m);return m.getVariable(_).value.getSubData(this.exec,g.postfix,m)}AtomicStore(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m);return w instanceof Oe&&T instanceof Oe&&(w.value=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),null}AtomicAdd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value+=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicSub(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value-=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicMax(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=Math.max(w.value,T.value)),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicMin(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=Math.min(w.value,T.value)),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicAnd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=w.value&T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicOr(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=w.value|T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicXor(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=w.value^T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicExchange(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicCompareExchangeWeak(i,m){return console.error("TODO:atomicCompareExchangeWeak"),null}Pack4x8snorm(i,m){return console.error("TODO:pack4x8snorm"),null}Pack4x8unorm(i,m){return console.error("TODO:pack4x8unorm"),null}Pack4xI8(i,m){return console.error("TODO:pack4xI8"),null}Pack4xU8(i,m){return console.error("TODO:pack4xU8"),null}Pack4x8Clamp(i,m){return console.error("TODO:pack4x8Clamp"),null}Pack4xU8Clamp(i,m){return console.error("TODO:pack4xU8Clamp"),null}Pack2x16snorm(i,m){return console.error("TODO:pack2x16snorm"),null}Pack2x16unorm(i,m){return console.error("TODO:pack2x16unorm"),null}Pack2x16float(i,m){return console.error("TODO:pack2x16float"),null}Unpack4x8snorm(i,m){return console.error("TODO:unpack4x8snorm"),null}Unpack4x8unorm(i,m){return console.error("TODO:unpack4x8unorm"),null}Unpack4xI8(i,m){return console.error("TODO:unpack4xI8"),null}Unpack4xU8(i,m){return console.error("TODO:unpack4xU8"),null}Unpack2x16snorm(i,m){return console.error("TODO:unpack2x16snorm"),null}Unpack2x16unorm(i,m){return console.error("TODO:unpack2x16unorm"),null}Unpack2x16float(i,m){return console.error("TODO:unpack2x16float"),null}StorageBarrier(i,m){return null}TextureBarrier(i,m){return null}WorkgroupBarrier(i,m){return null}WorkgroupUniformLoad(i,m){return null}SubgroupAdd(i,m){return console.error("TODO:subgroupAdd"),null}SubgroupExclusiveAdd(i,m){return console.error("TODO:subgroupExclusiveAdd"),null}SubgroupInclusiveAdd(i,m){return console.error("TODO:subgroupInclusiveAdd"),null}SubgroupAll(i,m){return console.error("TODO:subgroupAll"),null}SubgroupAnd(i,m){return console.error("TODO:subgroupAnd"),null}SubgroupAny(i,m){return console.error("TODO:subgroupAny"),null}SubgroupBallot(i,m){return console.error("TODO:subgroupBallot"),null}SubgroupBroadcast(i,m){return console.error("TODO:subgroupBroadcast"),null}SubgroupBroadcastFirst(i,m){return console.error("TODO:subgroupBroadcastFirst"),null}SubgroupElect(i,m){return console.error("TODO:subgroupElect"),null}SubgroupMax(i,m){return console.error("TODO:subgroupMax"),null}SubgroupMin(i,m){return console.error("TODO:subgroupMin"),null}SubgroupMul(i,m){return console.error("TODO:subgroupMul"),null}SubgroupExclusiveMul(i,m){return console.error("TODO:subgroupExclusiveMul"),null}SubgroupInclusiveMul(i,m){return console.error("TODO:subgroupInclusiveMul"),null}SubgroupOr(i,m){return console.error("TODO:subgroupOr"),null}SubgroupShuffle(i,m){return console.error("TODO:subgroupShuffle"),null}SubgroupShuffleDown(i,m){return console.error("TODO:subgroupShuffleDown"),null}SubgroupShuffleUp(i,m){return console.error("TODO:subgroupShuffleUp"),null}SubgroupShuffleXor(i,m){return console.error("TODO:subgroupShuffleXor"),null}SubgroupXor(i,m){return console.error("TODO:subgroupXor"),null}QuadBroadcast(i,m){return console.error("TODO:quadBroadcast"),null}QuadSwapDiagonal(i,m){return console.error("TODO:quadSwapDiagonal"),null}QuadSwapX(i,m){return console.error("TODO:quadSwapX"),null}QuadSwapY(i,m){return console.error("TODO:quadSwapY"),null}}const kn={vec2:2,vec2f:2,vec2i:2,vec2u:2,vec2b:2,vec2h:2,vec3:3,vec3f:3,vec3i:3,vec3u:3,vec3b:3,vec3h:3,vec4:4,vec4f:4,vec4i:4,vec4u:4,vec4b:4,vec4h:4},On={mat2x2:[2,2,4],mat2x2f:[2,2,4],mat2x2h:[2,2,4],mat2x3:[2,3,6],mat2x3f:[2,3,6],mat2x3h:[2,3,6],mat2x4:[2,4,8],mat2x4f:[2,4,8],mat2x4h:[2,4,8],mat3x2:[3,2,6],mat3x2f:[3,2,6],mat3x2h:[3,2,6],mat3x3:[3,3,9],mat3x3f:[3,3,9],mat3x3h:[3,3,9],mat3x4:[3,4,12],mat3x4f:[3,4,12],mat3x4h:[3,4,12],mat4x2:[4,2,8],mat4x2f:[4,2,8],mat4x2h:[4,2,8],mat4x3:[4,3,12],mat4x3f:[4,3,12],mat4x3h:[4,3,12],mat4x4:[4,4,16],mat4x4f:[4,4,16],mat4x4h:[4,4,16]};class pt extends ct{constructor(i,m){var g;super(),this.ast=null!=i?i:[],this.reflection=new rt,this.reflection.updateAST(this.ast),this.context=null!==(g=null==m?void 0:m.clone())&&void 0!==g?g:new lt,this.builtins=new ut(this),this.typeInfo={bool:this.getTypeInfo(re.bool),i32:this.getTypeInfo(re.i32),u32:this.getTypeInfo(re.u32),f32:this.getTypeInfo(re.f32),f16:this.getTypeInfo(re.f16),vec2f:this.getTypeInfo(oe.vec2f),vec2u:this.getTypeInfo(oe.vec2u),vec2i:this.getTypeInfo(oe.vec2i),vec2h:this.getTypeInfo(oe.vec2h),vec3f:this.getTypeInfo(oe.vec3f),vec3u:this.getTypeInfo(oe.vec3u),vec3i:this.getTypeInfo(oe.vec3i),vec3h:this.getTypeInfo(oe.vec3h),vec4f:this.getTypeInfo(oe.vec4f),vec4u:this.getTypeInfo(oe.vec4u),vec4i:this.getTypeInfo(oe.vec4i),vec4h:this.getTypeInfo(oe.vec4h),mat2x2f:this.getTypeInfo(oe.mat2x2f),mat2x3f:this.getTypeInfo(oe.mat2x3f),mat2x4f:this.getTypeInfo(oe.mat2x4f),mat3x2f:this.getTypeInfo(oe.mat3x2f),mat3x3f:this.getTypeInfo(oe.mat3x3f),mat3x4f:this.getTypeInfo(oe.mat3x4f),mat4x2f:this.getTypeInfo(oe.mat4x2f),mat4x3f:this.getTypeInfo(oe.mat4x3f),mat4x4f:this.getTypeInfo(oe.mat4x4f)}}getVariableValue(i){var m,g;const _=null!==(g=null===(m=this.context.getVariable(i))||void 0===m?void 0:m.value)&&void 0!==g?g:null;if(null===_)return null;if(_ instanceof Oe)return _.value;if(_ instanceof Fe)return Array.from(_.data);if(_ instanceof Me)return Array.from(_.data);if(_ instanceof Ue&&_.typeInfo instanceof s){if("u32"===_.typeInfo.format.name)return Array.from(new Uint32Array(_.buffer,_.offset,_.typeInfo.count));if("i32"===_.typeInfo.format.name)return Array.from(new Int32Array(_.buffer,_.offset,_.typeInfo.count));if("f32"===_.typeInfo.format.name)return Array.from(new Float32Array(_.buffer,_.offset,_.typeInfo.count))}return console.error(`Unsupported return variable type ${_.typeInfo.name}`),null}execute(i){(i=null!=i?i:{}).constants&&this._setOverrides(i.constants,this.context),this._execStatements(this.ast,this.context)}dispatchWorkgroups(i,m,g,_){const b=this.context.clone();(_=null!=_?_:{}).constants&&this._setOverrides(_.constants,b),this._execStatements(this.ast,b);const y=b.getFunction(i);if(!y)return void console.error(`Function ${i} not found`);if("number"==typeof m)m=[m,1,1];else{if(0===m.length)return void console.error("Invalid dispatch count");1===m.length?m=[m[0],1,1]:2===m.length?m=[m[0],m[1],1]:m.length>3&&(m=[m[0],m[1],m[2]])}const T=m[0],w=m[1],P=m[2],$=this.getTypeInfo("vec3u");b.setVariable("@num_workgroups",new Fe(m,$));for(const i in g)for(const m in g[i]){const _=g[i][m];b.variables.forEach(g=>{var b;const y=g.node;if(null==y?void 0:y.attributes){let T=null,w=null;for(const i of y.attributes)"binding"===i.name?T=i.value:"group"===i.name&&(w=i.value);if(m==T&&i==w)if(void 0!==_.texture&&void 0!==_.descriptor){const i=new Pe(_.texture,this.getTypeInfo(y.type),_.descriptor,null!==(b=_.texture.view)&&void 0!==b?b:null);g.value=i}else void 0!==_.uniform?g.value=new Ue(_.uniform,this.getTypeInfo(y.type)):g.value=new Ue(_,this.getTypeInfo(y.type))}})}for(let i=0;i<P;++i)for(let m=0;m<w;++m)for(let g=0;g<T;++g)b.setVariable("@workgroup_id",new Fe([g,m,i],this.getTypeInfo("vec3u"))),this._dispatchWorkgroup(y,[g,m,i],b)}execStatement(i,m){if(i instanceof Q)return this.evalExpression(i.value,m);if(i instanceof ne){if(i.condition){const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))throw new Error("Invalid break-if condition");if(!g.value)return null}return pt._breakObj}if(i instanceof se)return pt._continueObj;if(i instanceof M)this._let(i,m);else if(i instanceof B)this._var(i,m);else if(i instanceof U)this._const(i,m);else if(i instanceof C)this._function(i,m);else{if(i instanceof Z)return this._if(i,m);if(i instanceof j)return this._switch(i,m);if(i instanceof O)return this._for(i,m);if(i instanceof N)return this._while(i,m);if(i instanceof X)return this._loop(i,m);if(i instanceof V){const g=m.clone();return g.currentFunctionName=m.currentFunctionName,this._execStatements(i.body,g)}if(i instanceof R)this._assign(i,m);else if(i instanceof z)this._increment(i,m);else{if(i instanceof ie)return null;if(i instanceof F){const g=i.name;null===m.getVariable(g)&&m.setVariable(g,new Oe(0,this.getTypeInfo("u32")))}else if(i instanceof G)this._call(i,m);else{if(i instanceof J)return null;if(i instanceof ee)return null;console.error("Invalid statement type.",i,`Line ${i.line}`)}}}return null}evalExpression(i,m){return i instanceof ke?this._evalBinaryOp(i,m):i instanceof ge?this._evalLiteral(i,m):i instanceof me?this._evalVariable(i,m):i instanceof de?this._evalCall(i,m):i instanceof pe?this._evalCreate(i,m):i instanceof _e?this._evalConst(i,m):i instanceof xe?this._evalBitcast(i,m):i instanceof we?this._evalUnaryOp(i,m):(console.error("Invalid expression type",i,`Line ${i.line}`),null)}getTypeInfo(i){var m;if(i instanceof re){const m=this.reflection.getTypeInfo(i);if(null!==m)return m}let g=null!==(m=this.typeInfo[i])&&void 0!==m?m:null;return null!==g||(g=this.reflection.getTypeInfoByName(i)),g}_setOverrides(i,m){for(const g in i){const _=i[g],b=this.reflection.getOverrideInfo(g);null!==b?(null===b.type&&(b.type=this.getTypeInfo("u32")),"u32"===b.type.name||"i32"===b.type.name||"f32"===b.type.name||"f16"===b.type.name?m.setVariable(g,new Oe(_,b.type)):"bool"===b.type.name?m.setVariable(g,new Oe(_?1:0,b.type)):"vec2"===b.type.name||"vec3"===b.type.name||"vec4"===b.type.name||"vec2f"===b.type.name||"vec3f"===b.type.name||"vec4f"===b.type.name||"vec2i"===b.type.name||"vec3i"===b.type.name||"vec4i"===b.type.name||"vec2u"===b.type.name||"vec3u"===b.type.name||"vec4u"===b.type.name||"vec2h"===b.type.name||"vec3h"===b.type.name||"vec4h"===b.type.name?m.setVariable(g,new Fe(_,b.type)):console.error(`Invalid constant type for ${g}`)):console.error(`Override ${g} does not exist in the shader.`)}}_dispatchWorkgroup(i,m,g){const _=[1,1,1];for(const m of i.node.attributes)if("workgroup_size"===m.name){if(m.value.length>0){const i=g.getVariableValue(m.value[0]);_[0]=i instanceof Oe?i.value:parseInt(m.value[0])}if(m.value.length>1){const i=g.getVariableValue(m.value[1]);_[1]=i instanceof Oe?i.value:parseInt(m.value[1])}if(m.value.length>2){const i=g.getVariableValue(m.value[2]);_[2]=i instanceof Oe?i.value:parseInt(m.value[2])}}const b=this.getTypeInfo("vec3u"),y=this.getTypeInfo("u32");g.setVariable("@workgroup_size",new Fe(_,b));const T=_[0],w=_[1],P=_[2];for(let $=0,H=0;$<P;++$)for(let P=0;P<w;++P)for(let w=0;w<T;++w,++H){const T=[w,P,$],q=[w+m[0]*_[0],P+m[1]*_[1],$+m[2]*_[2]];g.setVariable("@local_invocation_id",new Fe(T,b)),g.setVariable("@global_invocation_id",new Fe(q,b)),g.setVariable("@local_invocation_index",new Oe(H,y)),this._dispatchExec(i,g)}}_dispatchExec(i,m){for(const g of i.node.args)for(const i of g.attributes)if("builtin"===i.name){const _=`@${i.value}`,b=m.getVariable(_);void 0!==b&&m.variables.set(g.name,b)}this._execStatements(i.node.body,m)}getVariableName(i,m){for(;i instanceof we;)i=i.right;return i instanceof me?i.name:(console.error("Unknown variable type",i,"Line",i.line),null)}_execStatements(i,m){for(const g of i){if(g instanceof Array){const i=m.clone(),_=this._execStatements(g,i);if(_)return _;continue}const i=this.execStatement(g,m);if(i)return i}return null}_call(i,m){const g=m.clone();g.currentFunctionName=i.name;const _=m.getFunction(i.name);if(_){for(let m=0;m<_.node.args.length;++m){const b=_.node.args[m],y=this.evalExpression(i.args[m],g);g.setVariable(b.name,y,b)}this._execStatements(_.node.body,g)}else i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)&&this._evalCreate(i,m)}_increment(i,m){const g=this.getVariableName(i.variable,m),_=m.getVariable(g);_?"++"===i.operator?_.value instanceof Oe?_.value.value++:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):"--"===i.operator?_.value instanceof Oe?_.value.value--:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):console.error(`Unknown increment operator ${i.operator}. Line ${i.line}`):console.error(`Variable ${g} not found. Line ${i.line}`)}_getVariableData(i,m){if(i instanceof me){const g=this.getVariableName(i,m),_=m.getVariable(g);return null===_?(console.error(`Variable ${g} not found. Line ${i.line}`),null):_.value.getSubData(this,i.postfix,m)}if(i instanceof we){if("*"===i.operator){const g=this._getVariableData(i.right,m);return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Variable ${i.right} is not a pointer. Line ${i.line}`),null)}if("&"===i.operator){const g=this._getVariableData(i.right,m);return new Ve(g)}}return null}_assign(i,m){let g=null,_="<var>",b=null;if(i.variable instanceof we){const g=this._getVariableData(i.variable,m),_=this.evalExpression(i.value,m),b=i.operator;if("="===b){if(g instanceof Oe||g instanceof Fe||g instanceof Me){if(_ instanceof Oe||_ instanceof Fe||_ instanceof Me&&g.data.length===_.data.length)return void g.data.set(_.data);console.error(`Invalid assignment. Line ${i.line}`)}else if(g instanceof Ue&&_ instanceof Ue&&g.buffer.byteLength-g.offset>=_.buffer.byteLength-_.offset)return void(g.buffer.byteLength%4==0?new Uint32Array(g.buffer,g.offset,g.typeInfo.size/4).set(new Uint32Array(_.buffer,_.offset,_.typeInfo.size/4)):new Uint8Array(g.buffer,g.offset,g.typeInfo.size).set(new Uint8Array(_.buffer,_.offset,_.typeInfo.size)));return console.error(`Invalid assignment. Line ${i.line}`),null}if("+="===b)return g instanceof Oe||g instanceof Fe||g instanceof Me?_ instanceof Oe||_ instanceof Fe||_ instanceof Me?void g.data.set(_.data.map((i,m)=>g.data[m]+i)):void console.error(`Invalid assignment . Line ${i.line}`):void console.error(`Invalid assignment. Line ${i.line}`);if("-="===b)return(g instanceof Oe||g instanceof Fe||g instanceof Me)&&(_ instanceof Oe||_ instanceof Fe||_ instanceof Me)?void g.data.set(_.data.map((i,m)=>g.data[m]-i)):void console.error(`Invalid assignment. Line ${i.line}`)}if(i.variable instanceof we){if("*"===i.variable.operator){_=this.getVariableName(i.variable.right,m);const b=m.getVariable(_);if(!(b&&b.value instanceof Ve))return void console.error(`Variable ${_} is not a pointer. Line ${i.line}`);g=b.value.reference;let y=i.variable.postfix;if(!y){let m=i.variable.right;for(;m instanceof we;){if(m.postfix){y=m.postfix;break}m=m.right}}y&&(g=g.getSubData(this,y,m))}}else{b=i.variable.postfix,_=this.getVariableName(i.variable,m);const y=m.getVariable(_);if(null===y)return void console.error(`Variable ${_} not found. Line ${i.line}`);g=y.value}if(g instanceof Ve&&(g=g.reference),null===g)return void console.error(`Variable ${_} not found. Line ${i.line}`);const y=this.evalExpression(i.value,m),T=i.operator;if("="===T)if(g instanceof Ue)g.setDataValue(this,y,b,m);else if(b){if(!(g instanceof Fe||g instanceof Me))return void console.error(`Variable ${_} is not a vector or matrix. Line ${i.line}`);if(b instanceof be){const T=this.evalExpression(b.index,m).value;if(g instanceof Fe){if(!(y instanceof Oe))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[T]=y.value}else{if(!(g instanceof Me))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);{const T=this.evalExpression(b.index,m).value;if(T<0)return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(!(y instanceof Fe))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);{const m=g.typeInfo.getTypeName();if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m){if(!(T<2&&2===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[2*T]=y.data[0],g.data[2*T+1]=y.data[1]}else if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m){if(!(T<2&&3===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[3*T]=y.data[0],g.data[3*T+1]=y.data[1],g.data[3*T+2]=y.data[2]}else if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m){if(!(T<2&&4===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[4*T]=y.data[0],g.data[4*T+1]=y.data[1],g.data[4*T+2]=y.data[2],g.data[4*T+3]=y.data[3]}else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m){if(!(T<3&&2===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[2*T]=y.data[0],g.data[2*T+1]=y.data[1]}else if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m){if(!(T<3&&3===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[3*T]=y.data[0],g.data[3*T+1]=y.data[1],g.data[3*T+2]=y.data[2]}else if("mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m){if(!(T<3&&4===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[4*T]=y.data[0],g.data[4*T+1]=y.data[1],g.data[4*T+2]=y.data[2],g.data[4*T+3]=y.data[3]}else if("mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m){if(!(T<4&&2===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[2*T]=y.data[0],g.data[2*T+1]=y.data[1]}else if("mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m){if(!(T<4&&3===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[3*T]=y.data[0],g.data[3*T+1]=y.data[1],g.data[3*T+2]=y.data[2]}else{if("mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m)return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(!(T<4&&4===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[4*T]=y.data[0],g.data[4*T+1]=y.data[1],g.data[4*T+2]=y.data[2],g.data[4*T+3]=y.data[3]}}}}}else if(b instanceof fe){const m=b.value;if(!(g instanceof Fe))return void console.error(`Invalid assignment to ${m}. Variable ${_} is not a vector. Line ${i.line}`);if(y instanceof Oe){if(m.length>1)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);if("x"===m)g.data[0]=y.value;else if("y"===m){if(g.data.length<2)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);g.data[1]=y.value}else if("z"===m){if(g.data.length<3)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);g.data[2]=y.value}else if("w"===m){if(g.data.length<4)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);g.data[3]=y.value}}else{if(!(y instanceof Fe))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(m.length!==y.data.length)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);for(let b=0;b<m.length;++b){const T=m[b];if("x"===T||"r"===T)g.data[0]=y.data[b];else if("y"===T||"g"===T){if(y.data.length<2)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);g.data[1]=y.data[b]}else if("z"===T||"b"===T){if(y.data.length<3)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);g.data[2]=y.data[b]}else{if("w"!==T&&"a"!==T)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);if(y.data.length<4)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);g.data[3]=y.data[b]}}}}}else g instanceof Oe&&y instanceof Oe?g.value=y.value:g instanceof Fe&&y instanceof Fe||g instanceof Me&&y instanceof Me?g.data.set(y.data):console.error(`Invalid assignment to ${_}. Line ${i.line}`);else{const _=g.getSubData(this,b,m);if(_ instanceof Fe&&y instanceof Oe){const m=_.data,g=y.value;if("+="===T)for(let i=0;i<m.length;++i)m[i]+=g;else if("-="===T)for(let i=0;i<m.length;++i)m[i]-=g;else if("*="===T)for(let i=0;i<m.length;++i)m[i]*=g;else if("/="===T)for(let i=0;i<m.length;++i)m[i]/=g;else if("%="===T)for(let i=0;i<m.length;++i)m[i]%=g;else if("&="===T)for(let i=0;i<m.length;++i)m[i]&=g;else if("|="===T)for(let i=0;i<m.length;++i)m[i]|=g;else if("^="===T)for(let i=0;i<m.length;++i)m[i]^=g;else if("<<="===T)for(let i=0;i<m.length;++i)m[i]<<=g;else if(">>="===T)for(let i=0;i<m.length;++i)m[i]>>=g;else console.error(`Invalid operator ${T}. Line ${i.line}`)}else if(_ instanceof Fe&&y instanceof Fe){const m=_.data,g=y.data;if(m.length!==g.length)return void console.error(`Vector length mismatch. Line ${i.line}`);if("+="===T)for(let i=0;i<m.length;++i)m[i]+=g[i];else if("-="===T)for(let i=0;i<m.length;++i)m[i]-=g[i];else if("*="===T)for(let i=0;i<m.length;++i)m[i]*=g[i];else if("/="===T)for(let i=0;i<m.length;++i)m[i]/=g[i];else if("%="===T)for(let i=0;i<m.length;++i)m[i]%=g[i];else if("&="===T)for(let i=0;i<m.length;++i)m[i]&=g[i];else if("|="===T)for(let i=0;i<m.length;++i)m[i]|=g[i];else if("^="===T)for(let i=0;i<m.length;++i)m[i]^=g[i];else if("<<="===T)for(let i=0;i<m.length;++i)m[i]<<=g[i];else if(">>="===T)for(let i=0;i<m.length;++i)m[i]>>=g[i];else console.error(`Invalid operator ${T}. Line ${i.line}`)}else{if(!(_ instanceof Oe&&y instanceof Oe))return void console.error(`Invalid type for ${i.operator} operator. Line ${i.line}`);"+="===T?_.value+=y.value:"-="===T?_.value-=y.value:"*="===T?_.value*=y.value:"/="===T?_.value/=y.value:"%="===T?_.value%=y.value:"&="===T?_.value&=y.value:"|="===T?_.value|=y.value:"^="===T?_.value^=y.value:"<<="===T?_.value<<=y.value:">>="===T?_.value>>=y.value:console.error(`Invalid operator ${T}. Line ${i.line}`)}g instanceof Ue&&g.setDataValue(this,_,b,m)}}_function(i,m){const g=new ot(i);m.functions.set(i.name,g)}_const(i,m){let g=null;null!==i.value&&(g=this.evalExpression(i.value,m)),m.createVariable(i.name,g,i)}_let(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{const _=i.type.name;if("f32"===_||"i32"===_||"u32"===_||"bool"===_||"f16"===_||"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2b"===_||"vec3b"===_||"vec4b"===_||"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_||"array"===_){const _=new pe(i.type,[]);g=this._evalCreate(_,m)}}m.createVariable(i.name,g,i)}_var(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{if(null===i.type)return void console.error(`Variable ${i.name} has no type. Line ${i.line}`);const _=i.type.name;if("f32"===_||"i32"===_||"u32"===_||"bool"===_||"f16"===_||"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2b"===_||"vec3b"===_||"vec4b"===_||"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_||i.type instanceof ce||i.type instanceof ie||i.type instanceof oe){const _=new pe(i.type,[]);g=this._evalCreate(_,m)}}m.createVariable(i.name,g,i)}_switch(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;let _=null;for(const b of i.cases)if(b instanceof Se)for(const y of b.selectors){if(y instanceof Te){_=b;continue}const T=this.evalExpression(y,m);if(!(T instanceof Oe))return console.error(`Invalid case selector. Line ${i.line}`),null;if(T.value===g.value)return this._execStatements(b.body,m)}else b instanceof Ae&&(_=b);return _?this._execStatements(_.body,m):null}_if(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(g.value)return this._execStatements(i.body,m);for(const g of i.elseif){const _=this.evalExpression(g.condition,m);if(!(_ instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(_.value)return this._execStatements(g.body,m)}return i.else?this._execStatements(i.else,m):null}_getScalarValue(i){return i instanceof Oe?i.value:(console.error("Expected scalar value.",i),0)}_for(i,m){for(m=m.clone(),this.execStatement(i.init,m);this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(null!==g&&g!==pt._continueObj)return g;this.execStatement(i.increment,m)}return null}_loop(i,m){for(m=m.clone();;){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g===pt._continueObj){if(i.continuing&&this._execStatements(i.continuing.body,m)===pt._breakObj)break}else if(null!==g)return g}return null}_while(i,m){for(m=m.clone();this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g!==pt._continueObj&&null!==g)return g}return null}_evalBitcast(i,m){const g=this.evalExpression(i.value,m),_=i.type;if(g instanceof Oe){const i=tt(g.value,g.typeInfo.name,_.name);return new Oe(i,this.getTypeInfo(_))}if(g instanceof Fe){const m=g.typeInfo.getTypeName();let b="";if(m.endsWith("f"))b="f32";else if(m.endsWith("i"))b="i32";else if(m.endsWith("u"))b="u32";else if(m.endsWith("b"))b="bool";else{if(!m.endsWith("h"))return console.error(`Unknown vector type ${m}. Line ${i.line}`),null;b="f16"}const y=_.getTypeName();let T="";if(y.endsWith("f"))T="f32";else if(y.endsWith("i"))T="i32";else if(y.endsWith("u"))T="u32";else if(y.endsWith("b"))T="bool";else{if(!y.endsWith("h"))return console.error(`Unknown vector type ${T}. Line ${i.line}`),null;T="f16"}const w=function(i,m,g){if(m===g)return i;const _=new Array(i.length);for(let b=0;b<i.length;b++)_[b]=tt(i[b],m,g);return _}(Array.from(g.data),b,T);return new Fe(w,this.getTypeInfo(_))}return console.error(`TODO:bitcast for ${g.typeInfo.name}. Line ${i.line}`),null}_evalConst(i,m){return m.getVariableValue(i.name).clone().getSubData(this,i.postfix,m)}_evalCreate(i,m){var g;if(i instanceof pe){if(null===i.type)return Ne.void;switch(i.type.getTypeName()){case"bool":case"i32":case"u32":case"f32":case"f16":return this._callConstructorValue(i,m);case"vec2":case"vec3":case"vec4":case"vec2f":case"vec3f":case"vec4f":case"vec2h":case"vec3h":case"vec4h":case"vec2i":case"vec3i":case"vec4i":case"vec2u":case"vec3u":case"vec4u":case"vec2b":case"vec3b":case"vec4b":return this._callConstructorVec(i,m);case"mat2x2":case"mat2x2f":case"mat2x2h":case"mat2x3":case"mat2x3f":case"mat2x3h":case"mat2x4":case"mat2x4f":case"mat2x4h":case"mat3x2":case"mat3x2f":case"mat3x2h":case"mat3x3":case"mat3x3f":case"mat3x3h":case"mat3x4":case"mat3x4f":case"mat3x4h":case"mat4x2":case"mat4x2f":case"mat4x2h":case"mat4x3":case"mat4x3f":case"mat4x3h":case"mat4x4":case"mat4x4f":case"mat4x4h":return this._callConstructorMatrix(i,m)}}const _=i instanceof pe?i.type.name:i.name,b=i instanceof pe?this.getTypeInfo(i.type):this.getTypeInfo(i.name);if(null===b)return console.error(`Unknown type ${_}. Line ${i.line}`),null;if(0===b.size)return null;const y=new Ue(new ArrayBuffer(b.size),b,0);if(b instanceof n){if(i.args)for(let g=0;g<i.args.length;++g){const _=b.members[g],T=i.args[g],w=this.evalExpression(T,m);y.setData(this,w,_.type,_.offset,m)}}else if(b instanceof s){let _=0;if(i.args)for(let T=0;T<i.args.length;++T){const w=i.args[T],P=this.evalExpression(w,m);null===b.format&&("x32"===(null===(g=P.typeInfo)||void 0===g?void 0:g.name)?b.format=this.getTypeInfo("i32"):b.format=P.typeInfo),y.setData(this,P,b.format,_,m),_+=b.stride}}else console.error(`Unknown type "${_}". Line ${i.line}`);return i instanceof pe?y.getSubData(this,i.postfix,m):y}_evalLiteral(i,m){const g=this.getTypeInfo(i.type),_=g.name;return"x32"===_||"u32"===_||"f32"===_||"f16"===_||"i32"===_||"bool"===_?new Oe(i.scalarValue,g):"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_?this._callConstructorVec(i,m):"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_?this._callConstructorMatrix(i,m):i.value}_evalVariable(i,m){const g=m.getVariableValue(i.name);return null===g?g:g.getSubData(this,i.postfix,m)}_maxFormatTypeInfo(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const _=pt._priority.get(m.name);pt._priority.get(i[g].name)<_&&(m=i[g])}return"x32"===m.name?this.getTypeInfo("i32"):m}_evalUnaryOp(i,m){const g=this.evalExpression(i.right,m);if("&"===i.operator)return new Ve(g);if("*"===i.operator)return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Invalid dereference. Line ${i.line}`),null);const _=g instanceof Oe?g.value:g instanceof Fe?Array.from(g.data):null;switch(i.operator){case"+":{if(Re(_)){const i=_.map((i,m)=>+i);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(+i,m)}case"-":{if(Re(_)){const i=_.map((i,m)=>-i);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(-i,m)}case"!":{if(Re(_)){const i=_.map((i,m)=>i?0:1);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(i?0:1,m)}case"~":{if(Re(_)){const i=_.map((i,m)=>~i);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(~i,m)}}return console.error(`Invalid unary operator ${i.operator}. Line ${i.line}`),null}_evalBinaryOp(i,m){const g=this.evalExpression(i.left,m),_=this.evalExpression(i.right,m),b=g instanceof Oe?g.value:g instanceof Fe||g instanceof Me?Array.from(g.data):null,y=_ instanceof Oe?_.value:_ instanceof Fe||_ instanceof Me?Array.from(_.data):null;switch(i.operator){case"+":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i+_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m+i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i+m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m+T,w)}case"-":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i-_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m-i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i-m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m-T,w)}case"*":{if(Re(b)&&Re(y)){const m=b,T=y;if(g instanceof Me&&_ instanceof Me){const b=function(i,m,g,_){if(void 0===On[m.name]||void 0===On[_.name])return null;const b=On[m.name][0],y=On[m.name][1],T=On[_.name][0];if(b!==On[_.name][1])return null;const w=new Array(T*y);for(let m=0;m<y;m++)for(let _=0;_<T;_++){let P=0;for(let T=0;T<b;T++)P+=i[T*y+m]*g[_*b+T];w[m*T+_]=P}return w}(m,g.typeInfo,T,_.typeInfo);if(null===b)return console.error(`Matrix multiplication failed. Line ${i.line}.`),null;const y=On[_.typeInfo.name][0],w=On[g.typeInfo.name][1],P=this.getTypeInfo(`mat${y}x${w}f`);return new Me(b,P)}if(g instanceof Me&&_ instanceof Fe){const b=function(i,m,g,_){if(void 0===On[m.name]||void 0===kn[_.name])return null;const b=On[m.name][0],y=On[m.name][1];if(b!==g.length)return null;const T=new Array(y);for(let m=0;m<y;m++){let _=0;for(let T=0;T<b;T++)_+=i[T*y+m]*g[T];T[m]=_}return T}(m,g.typeInfo,T,_.typeInfo);return null===b?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(b,_.typeInfo)}if(g instanceof Fe&&_ instanceof Me){const b=function(i,m,g,_){if(void 0===kn[m.name]||void 0===On[_.name])return null;const b=On[_.name][0],y=On[_.name][1];if(y!==i.length)return null;const T=[];for(let m=0;m<b;m++){let _=0;for(let T=0;T<y;T++)_+=i[T]*g[T*b+m];T[m]=_}return T}(m,g.typeInfo,T,_.typeInfo);return null===b?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(b,g.typeInfo)}{if(m.length!==T.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const _=m.map((i,m)=>i*T[m]);return new Fe(_,g.typeInfo)}}if(Re(b)){const i=y,m=b.map((m,g)=>m*i);return g instanceof Me?new Me(m,g.typeInfo):new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i*m);return _ instanceof Me?new Me(m,_.typeInfo):new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m*T,w)}case"%":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i%_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m%i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i%m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m%T,w)}case"/":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i/_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m/i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i/m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m/T,w)}case"&":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i&_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m&i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i&m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m&T,w)}case"|":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i|_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m|i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i|m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m|T,w)}case"^":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i^_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m^i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i^m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m^T,w)}case"<<":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i<<_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m<<i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i<<m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m<<T,w)}case">>":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i>>_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m>>i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i>>m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m>>T,w)}case">":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i>_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m>i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i>m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b>y?1:0,this.getTypeInfo("bool"));case"<":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i<_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m<i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i<m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b<y?1:0,this.getTypeInfo("bool"));case"==":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i===_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m==i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i==m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b===y?1:0,this.getTypeInfo("bool"));case"!=":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i!==_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m!==i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i!==m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b!==y?1:0,this.getTypeInfo("bool"));case">=":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i>=_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m>=i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i>=m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b>=y?1:0,this.getTypeInfo("bool"));case"<=":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i<=_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m<=i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i<=m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b<=y?1:0,this.getTypeInfo("bool"));case"&&":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i&&_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m&&i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i&&m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b&&y?1:0,this.getTypeInfo("bool"));case"||":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i||_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m||i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i||m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b||y?1:0,this.getTypeInfo("bool"))}return console.error(`Unknown operator ${i.operator}. Line ${i.line}`),null}_evalCall(i,m){if(null!==i.cachedReturnValue)return i.cachedReturnValue;const g=m.clone();g.currentFunctionName=i.name;const _=m.getFunction(i.name);if(!_)return i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)?this._evalCreate(i,m):(console.error(`Unknown function "${i.name}". Line ${i.line}`),null);for(let m=0;m<_.node.args.length;++m){const b=_.node.args[m],y=this.evalExpression(i.args[m],g);g.createVariable(b.name,y,b)}return this._execStatements(_.node.body,g)}_callBuiltinFunction(i,m){switch(i.name){case"all":return this.builtins.All(i,m);case"any":return this.builtins.Any(i,m);case"select":return this.builtins.Select(i,m);case"arrayLength":return this.builtins.ArrayLength(i,m);case"abs":return this.builtins.Abs(i,m);case"acos":return this.builtins.Acos(i,m);case"acosh":return this.builtins.Acosh(i,m);case"asin":return this.builtins.Asin(i,m);case"asinh":return this.builtins.Asinh(i,m);case"atan":return this.builtins.Atan(i,m);case"atanh":return this.builtins.Atanh(i,m);case"atan2":return this.builtins.Atan2(i,m);case"ceil":return this.builtins.Ceil(i,m);case"clamp":return this.builtins.Clamp(i,m);case"cos":return this.builtins.Cos(i,m);case"cosh":return this.builtins.Cosh(i,m);case"countLeadingZeros":return this.builtins.CountLeadingZeros(i,m);case"countOneBits":return this.builtins.CountOneBits(i,m);case"countTrailingZeros":return this.builtins.CountTrailingZeros(i,m);case"cross":return this.builtins.Cross(i,m);case"degrees":return this.builtins.Degrees(i,m);case"determinant":return this.builtins.Determinant(i,m);case"distance":return this.builtins.Distance(i,m);case"dot":return this.builtins.Dot(i,m);case"dot4U8Packed":return this.builtins.Dot4U8Packed(i,m);case"dot4I8Packed":return this.builtins.Dot4I8Packed(i,m);case"exp":return this.builtins.Exp(i,m);case"exp2":return this.builtins.Exp2(i,m);case"extractBits":return this.builtins.ExtractBits(i,m);case"faceForward":return this.builtins.FaceForward(i,m);case"firstLeadingBit":return this.builtins.FirstLeadingBit(i,m);case"firstTrailingBit":return this.builtins.FirstTrailingBit(i,m);case"floor":return this.builtins.Floor(i,m);case"fma":return this.builtins.Fma(i,m);case"fract":return this.builtins.Fract(i,m);case"frexp":return this.builtins.Frexp(i,m);case"insertBits":return this.builtins.InsertBits(i,m);case"inverseSqrt":return this.builtins.InverseSqrt(i,m);case"ldexp":return this.builtins.Ldexp(i,m);case"length":return this.builtins.Length(i,m);case"log":return this.builtins.Log(i,m);case"log2":return this.builtins.Log2(i,m);case"max":return this.builtins.Max(i,m);case"min":return this.builtins.Min(i,m);case"mix":return this.builtins.Mix(i,m);case"modf":return this.builtins.Modf(i,m);case"normalize":return this.builtins.Normalize(i,m);case"pow":return this.builtins.Pow(i,m);case"quantizeToF16":return this.builtins.QuantizeToF16(i,m);case"radians":return this.builtins.Radians(i,m);case"reflect":return this.builtins.Reflect(i,m);case"refract":return this.builtins.Refract(i,m);case"reverseBits":return this.builtins.ReverseBits(i,m);case"round":return this.builtins.Round(i,m);case"saturate":return this.builtins.Saturate(i,m);case"sign":return this.builtins.Sign(i,m);case"sin":return this.builtins.Sin(i,m);case"sinh":return this.builtins.Sinh(i,m);case"smoothStep":return this.builtins.SmoothStep(i,m);case"sqrt":return this.builtins.Sqrt(i,m);case"step":return this.builtins.Step(i,m);case"tan":return this.builtins.Tan(i,m);case"tanh":return this.builtins.Tanh(i,m);case"transpose":return this.builtins.Transpose(i,m);case"trunc":return this.builtins.Trunc(i,m);case"dpdx":return this.builtins.Dpdx(i,m);case"dpdxCoarse":return this.builtins.DpdxCoarse(i,m);case"dpdxFine":return this.builtins.DpdxFine(i,m);case"dpdy":return this.builtins.Dpdy(i,m);case"dpdyCoarse":return this.builtins.DpdyCoarse(i,m);case"dpdyFine":return this.builtins.DpdyFine(i,m);case"fwidth":return this.builtins.Fwidth(i,m);case"fwidthCoarse":return this.builtins.FwidthCoarse(i,m);case"fwidthFine":return this.builtins.FwidthFine(i,m);case"textureDimensions":return this.builtins.TextureDimensions(i,m);case"textureGather":return this.builtins.TextureGather(i,m);case"textureGatherCompare":return this.builtins.TextureGatherCompare(i,m);case"textureLoad":return this.builtins.TextureLoad(i,m);case"textureNumLayers":return this.builtins.TextureNumLayers(i,m);case"textureNumLevels":return this.builtins.TextureNumLevels(i,m);case"textureNumSamples":return this.builtins.TextureNumSamples(i,m);case"textureSample":return this.builtins.TextureSample(i,m);case"textureSampleBias":return this.builtins.TextureSampleBias(i,m);case"textureSampleCompare":return this.builtins.TextureSampleCompare(i,m);case"textureSampleCompareLevel":return this.builtins.TextureSampleCompareLevel(i,m);case"textureSampleGrad":return this.builtins.TextureSampleGrad(i,m);case"textureSampleLevel":return this.builtins.TextureSampleLevel(i,m);case"textureSampleBaseClampToEdge":return this.builtins.TextureSampleBaseClampToEdge(i,m);case"textureStore":return this.builtins.TextureStore(i,m);case"atomicLoad":return this.builtins.AtomicLoad(i,m);case"atomicStore":return this.builtins.AtomicStore(i,m);case"atomicAdd":return this.builtins.AtomicAdd(i,m);case"atomicSub":return this.builtins.AtomicSub(i,m);case"atomicMax":return this.builtins.AtomicMax(i,m);case"atomicMin":return this.builtins.AtomicMin(i,m);case"atomicAnd":return this.builtins.AtomicAnd(i,m);case"atomicOr":return this.builtins.AtomicOr(i,m);case"atomicXor":return this.builtins.AtomicXor(i,m);case"atomicExchange":return this.builtins.AtomicExchange(i,m);case"atomicCompareExchangeWeak":return this.builtins.AtomicCompareExchangeWeak(i,m);case"pack4x8snorm":return this.builtins.Pack4x8snorm(i,m);case"pack4x8unorm":return this.builtins.Pack4x8unorm(i,m);case"pack4xI8":return this.builtins.Pack4xI8(i,m);case"pack4xU8":return this.builtins.Pack4xU8(i,m);case"pack4x8Clamp":return this.builtins.Pack4x8Clamp(i,m);case"pack4xU8Clamp":return this.builtins.Pack4xU8Clamp(i,m);case"pack2x16snorm":return this.builtins.Pack2x16snorm(i,m);case"pack2x16unorm":return this.builtins.Pack2x16unorm(i,m);case"pack2x16float":return this.builtins.Pack2x16float(i,m);case"unpack4x8snorm":return this.builtins.Unpack4x8snorm(i,m);case"unpack4x8unorm":return this.builtins.Unpack4x8unorm(i,m);case"unpack4xI8":return this.builtins.Unpack4xI8(i,m);case"unpack4xU8":return this.builtins.Unpack4xU8(i,m);case"unpack2x16snorm":return this.builtins.Unpack2x16snorm(i,m);case"unpack2x16unorm":return this.builtins.Unpack2x16unorm(i,m);case"unpack2x16float":return this.builtins.Unpack2x16float(i,m);case"storageBarrier":return this.builtins.StorageBarrier(i,m);case"textureBarrier":return this.builtins.TextureBarrier(i,m);case"workgroupBarrier":return this.builtins.WorkgroupBarrier(i,m);case"workgroupUniformLoad":return this.builtins.WorkgroupUniformLoad(i,m);case"subgroupAdd":return this.builtins.SubgroupAdd(i,m);case"subgroupExclusiveAdd":return this.builtins.SubgroupExclusiveAdd(i,m);case"subgroupInclusiveAdd":return this.builtins.SubgroupInclusiveAdd(i,m);case"subgroupAll":return this.builtins.SubgroupAll(i,m);case"subgroupAnd":return this.builtins.SubgroupAnd(i,m);case"subgroupAny":return this.builtins.SubgroupAny(i,m);case"subgroupBallot":return this.builtins.SubgroupBallot(i,m);case"subgroupBroadcast":return this.builtins.SubgroupBroadcast(i,m);case"subgroupBroadcastFirst":return this.builtins.SubgroupBroadcastFirst(i,m);case"subgroupElect":return this.builtins.SubgroupElect(i,m);case"subgroupMax":return this.builtins.SubgroupMax(i,m);case"subgroupMin":return this.builtins.SubgroupMin(i,m);case"subgroupMul":return this.builtins.SubgroupMul(i,m);case"subgroupExclusiveMul":return this.builtins.SubgroupExclusiveMul(i,m);case"subgroupInclusiveMul":return this.builtins.SubgroupInclusiveMul(i,m);case"subgroupOr":return this.builtins.SubgroupOr(i,m);case"subgroupShuffle":return this.builtins.SubgroupShuffle(i,m);case"subgroupShuffleDown":return this.builtins.SubgroupShuffleDown(i,m);case"subgroupShuffleUp":return this.builtins.SubgroupShuffleUp(i,m);case"subgroupShuffleXor":return this.builtins.SubgroupShuffleXor(i,m);case"subgroupXor":return this.builtins.SubgroupXor(i,m);case"quadBroadcast":return this.builtins.QuadBroadcast(i,m);case"quadSwapDiagonal":return this.builtins.QuadSwapDiagonal(i,m);case"quadSwapX":return this.builtins.QuadSwapX(i,m);case"quadSwapY":return this.builtins.QuadSwapY(i,m)}const g=m.getFunction(i.name);if(g){const _=m.clone();for(let m=0;m<g.node.args.length;++m){const b=g.node.args[m],y=this.evalExpression(i.args[m],_);_.setVariable(b.name,y,b)}return this._execStatements(g.node.body,_)}return null}_callConstructorValue(i,m){if(!i.args||0===i.args.length)return new Oe(0,this.getTypeInfo(i.type));const g=this.evalExpression(i.args[0],m);return g.typeInfo=this.getTypeInfo(i.type),g.getSubData(this,i.postfix,m).clone()}_callConstructorVec(i,m){const g=this.getTypeInfo(i.type),_=i.type.getTypeName(),b=kn[_];if(void 0===b)return console.error(`Invalid vec constructor ${_}. Line ${i.line}`),null;const y=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)y.push(i)}else y.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);if(i instanceof Fe){const m=i.data;for(let i=0;i<m.length;++i){let g=m[i];y.push(g)}}else if(i instanceof Oe){let m=i.value;y.push(m)}}if(i.type instanceof oe&&null===i.type.format&&(i.type.format=oe.f32),0===y.length){const _=new Array(b).fill(0);return new Fe(_,g).getSubData(this,i.postfix,m)}if(1===y.length)for(;y.length<b;)y.push(y[0]);return y.length<b?(console.error(`Invalid vec constructor. Line ${i.line}`),null):new Fe(y.length>b?y.slice(0,b):y,g).getSubData(this,i.postfix,m)}_callConstructorMatrix(i,m){const g=this.getTypeInfo(i.type),_=i.type.getTypeName(),b=On[_];if(void 0===b)return console.error(`Invalid matrix constructor ${_}. Line ${i.line}`),null;const y=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)y.push(i)}else y.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);i instanceof Fe?y.push(...i.data):i instanceof Oe?y.push(i.value):i instanceof Me&&y.push(...i.data)}if(g instanceof a&&null===g.format&&(g.format=this.getTypeInfo("f32")),0===y.length){const _=new Array(b[2]).fill(0);return new Me(_,g).getSubData(this,i.postfix,m)}return y.length!==b[2]?(console.error(`Invalid matrix constructor. Line ${i.line}`),null):new Me(y,g).getSubData(this,i.postfix,m)}}pt._breakObj=new De(new e("BREAK",null),null),pt._continueObj=new De(new e("CONTINUE",null),null),pt._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class dt{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class mt{constructor(){this._tokens=[],this._current=0,this._currentLine=1,this._deferArrayCountEval=[],this._currentLoop=[],this._context=new dt,this._exec=new pt,this._forwardTypeCount=0}parse(i){this._initialize(i),this._deferArrayCountEval.length=0;const m=[];for(;!this._isAtEnd();){const i=this._global_decl_or_directive();if(!i)break;m.push(i)}if(this._deferArrayCountEval.length>0){for(const m of this._deferArrayCountEval){const g=m.arrayType,_=m.countNode;if(_ instanceof me){const m=_.name,b=this._context.constants.get(m);if(b)try{const i=b.constEvaluate(this._exec);g.count=i}catch(i){}}}this._deferArrayCountEval.length=0}if(this._forwardTypeCount>0)for(const i of m)i.search(i=>{i instanceof Le||i instanceof le?i.type=this._forwardType(i.type):i instanceof ce?i.format=this._forwardType(i.format):i instanceof B||i instanceof M||i instanceof U?i.type=this._forwardType(i.type):i instanceof C?i.returnType=this._forwardType(i.returnType):i instanceof Ee&&(i.type=this._forwardType(i.type))});return m}_forwardType(i){if(i instanceof ae){const m=this._getType(i.name);if(m)return m}else i instanceof le?i.type=this._forwardType(i.type):i instanceof ce&&(i.format=this._forwardType(i.format));return i}_initialize(i){if(i)if("string"==typeof i){const m=new ze(i);this._tokens=m.scanTokens()}else this._tokens=i;else this._tokens=[];this._current=0}_updateNode(i,m){return i.line=null!=m?m:this._currentLine,i}_error(i,m){return{token:i,message:m,toString:()=>`${m}`}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==qe.eof}_match(i){if(i instanceof We)return!!this._check(i)&&(this._advance(),!0);for(let m=0,g=i.length;m<g;++m){const g=i[m];if(this._check(g))return this._advance(),!0}return!1}_consume(i,m){if(this._check(i))return this._advance();throw this._error(this._peek(),`${m}. Line:${this._currentLine}`)}_check(i){if(this._isAtEnd())return!1;const m=this._peek();if(i instanceof Array){const g=m.type;let _=!1;for(const m of i){if(g===m)return!0;m===qe.tokens.name&&(_=!0)}if(_){const i=qe.tokens.name.rule.exec(m.lexeme);if(i&&0==i.index&&i[0]==m.lexeme)return!0}return!1}if(m.type===i)return!0;if(i===qe.tokens.name){const i=qe.tokens.name.rule.exec(m.lexeme);return i&&0==i.index&&i[0]==m.lexeme}return!1}_advance(){var i,m;return this._currentLine=null!==(m=null===(i=this._peek())||void 0===i?void 0:i.line)&&void 0!==m?m:-1,this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._match(qe.keywords.alias)){const i=this._type_alias();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.diagnostic)){const i=this._diagnostic();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.requires)){const i=this._requires_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.enable)){const i=this._enable_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}const i=this._attribute();if(this._check(qe.keywords.var)){const m=this._global_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.override)){const m=this._override_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.let)){const m=this._global_let_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.const)){const m=this._global_const_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.struct)){const m=this._struct_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.fn)){const m=this._function_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}return null}_function_decl(){if(!this._match(qe.keywords.fn))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected function name.").toString();this._consume(qe.tokens.paren_left,"Expected '(' for function arguments.");const g=[];if(!this._check(qe.tokens.paren_right))do{if(this._check(qe.tokens.paren_right))break;const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected argument name.").toString();this._consume(qe.tokens.colon,"Expected ':' for argument type.");const _=this._attribute(),b=this._type_decl();null!=b&&(b.attributes=_,g.push(this._updateNode(new Ee(m,b,i))))}while(this._match(qe.tokens.comma));this._consume(qe.tokens.paren_right,"Expected ')' after function arguments.");let _=null;if(this._match(qe.tokens.arrow)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}const b=this._compound_statement(),y=this._currentLine;return this._updateNode(new C(m,g,_,b,i,y),i)}_compound_statement(){const i=[];for(this._consume(qe.tokens.brace_left,"Expected '{' for block.");!this._check(qe.tokens.brace_right);){const m=this._statement();null!==m&&i.push(m)}return this._consume(qe.tokens.brace_right,"Expected '}' for block."),i}_statement(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._check(qe.tokens.attr)&&this._attribute(),this._check(qe.keywords.if))return this._if_statement();if(this._check(qe.keywords.switch))return this._switch_statement();if(this._check(qe.keywords.loop))return this._loop_statement();if(this._check(qe.keywords.for))return this._for_statement();if(this._check(qe.keywords.while))return this._while_statement();if(this._check(qe.keywords.continuing))return this._continuing_statement();if(this._check(qe.keywords.static_assert))return this._static_assert_statement();if(this._check(qe.tokens.brace_left))return this._compound_statement();let i=null;if(this._check(qe.keywords.return))i=this._return_statement();else if(this._check([qe.keywords.var,qe.keywords.let,qe.keywords.const]))i=this._variable_statement();else if(this._match(qe.keywords.discard))i=this._updateNode(new te);else if(this._match(qe.keywords.break)){const m=this._updateNode(new ne);if(this._currentLoop.length>0){const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m,this._check(qe.keywords.if)&&(this._advance(),m.condition=this._optional_paren_expression())}else if(this._match(qe.keywords.continue)){const m=this._updateNode(new se);if(!(this._currentLoop.length>0))throw this._error(this._peek(),`Continue statement must be inside a loop. Line:${m.line}`);{const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m}else i=this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement();return null!=i&&this._consume(qe.tokens.semicolon,"Expected ';' after statement."),i}_static_assert_statement(){if(!this._match(qe.keywords.static_assert))return null;const i=this._currentLine,m=this._optional_paren_expression();return this._updateNode(new D(m),i)}_while_statement(){if(!this._match(qe.keywords.while))return null;const i=this._updateNode(new N(null,null));return this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_continuing_statement(){const i=this._currentLoop.length>0?this._currentLoop[this._currentLoop.length-1].id:-1;if(!this._match(qe.keywords.continuing))return null;const m=this._currentLine,g=this._compound_statement();return this._updateNode(new V(g,i),m)}_for_statement(){if(!this._match(qe.keywords.for))return null;this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._updateNode(new O(null,null,null,null));return this._currentLoop.push(i),i.init=this._check(qe.tokens.semicolon)?null:this._for_init(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.condition=this._check(qe.tokens.semicolon)?null:this._short_circuit_or_expression(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.increment=this._check(qe.tokens.paren_right)?null:this._for_increment(),this._consume(qe.tokens.paren_right,"Expected ')'."),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(qe.keywords.var)){const i=this._variable_decl();if(null===i)throw this._error(this._peek(),"Variable declaration expected.");let m=null;return this._match(qe.tokens.equal)&&(m=this._short_circuit_or_expression()),this._updateNode(new B(i.name,i.type,i.storage,i.access,m),i.line)}if(this._match(qe.keywords.let)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for let.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for let.");const _=this._short_circuit_or_expression();return this._updateNode(new M(m,g,null,null,_),i)}if(this._match(qe.keywords.const)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for const.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for const.");const _=this._short_circuit_or_expression();return null===g&&_ instanceof ge&&(g=_.type),this._updateNode(new U(m,g,null,null,_),i)}return null}_increment_decrement_statement(){const i=this._current,m=this._unary_expression();if(null==m)return null;if(!this._check(qe.increment_operators))return this._current=i,null;const g=this._consume(qe.increment_operators,"Expected increment operator");return this._updateNode(new z(g.type===qe.tokens.plus_plus?Tn.increment:Tn.decrement,m))}_assignment_statement(){let i=null;const m=this._currentLine;if(this._check(qe.tokens.brace_right))return null;let g=this._match(qe.tokens.underscore);if(g||(i=this._unary_expression()),!g&&null==i)return null;const _=this._consume(qe.assignment_operators,"Expected assignment operator."),b=this._short_circuit_or_expression();return this._updateNode(new R(Sn.parse(_.lexeme),i,b),m)}_func_call_statement(){if(!this._check(qe.tokens.ident))return null;const i=this._currentLine,m=this._current,g=this._consume(qe.tokens.ident,"Expected function name."),_=this._argument_expression_list();return null===_?(this._current=m,null):this._updateNode(new G(g.lexeme,_),i)}_loop_statement(){if(!this._match(qe.keywords.loop))return null;this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for loop.");const i=this._updateNode(new X([],null));this._currentLoop.push(i);let m=this._statement();for(;null!==m;){if(Array.isArray(m))for(let g of m)i.body.push(g);else i.body.push(m);if(m instanceof V){i.continuing=m;break}m=this._statement()}return this._currentLoop.pop(),this._consume(qe.tokens.brace_right,"Expected '}' for loop."),i}_switch_statement(){if(!this._match(qe.keywords.switch))return null;const i=this._updateNode(new j(null,[]));if(this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for switch."),i.cases=this._switch_body(),null==i.cases||0==i.cases.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(qe.tokens.brace_right,"Expected '}' for switch."),this._currentLoop.pop(),i}_switch_body(){const i=[];let m=!1;for(;this._check([qe.keywords.default,qe.keywords.case]);){if(this._match(qe.keywords.case)){const g=this._case_selectors();for(const i of g)if(i instanceof Te){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");m=!0;break}this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch case.");const _=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch case."),i.push(this._updateNode(new Se(g,_)))}if(this._match(qe.keywords.default)){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch default.");const g=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch default."),i.push(this._updateNode(new Ae(g)))}}return i}_case_selectors(){const i=[];for(this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());this._match(qe.tokens.comma);)this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());return i}_case_body(){if(this._match(qe.keywords.fallthrough))return this._consume(qe.tokens.semicolon,"Expected ';'"),[];let i=this._statement();if(null==i)return[];i instanceof Array||(i=[i]);const m=this._case_body();return 0==m.length?i:[...i,m[0]]}_if_statement(){if(!this._match(qe.keywords.if))return null;const i=this._currentLine,m=this._optional_paren_expression();this._check(qe.tokens.attr)&&this._attribute();const g=this._compound_statement();let _=[];this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),_=this._elseif_statement(_));let b=null;return this._match(qe.keywords.else)&&(this._check(qe.tokens.attr)&&this._attribute(),b=this._compound_statement()),this._updateNode(new Z(m,g,_,b),i)}_match_elseif(){return this._tokens[this._current].type===qe.keywords.else&&this._tokens[this._current+1].type===qe.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(i=[]){const m=this._optional_paren_expression(),g=this._compound_statement();return i.push(this._updateNode(new $e(m,g))),this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),this._elseif_statement(i)),i}_return_statement(){if(!this._match(qe.keywords.return))return null;const i=this._short_circuit_or_expression();return this._updateNode(new Q(i))}_short_circuit_or_expression(){let i=this._short_circuit_and_expr();for(;this._match(qe.tokens.or_or);)i=this._updateNode(new ke(this._previous().toString(),i,this._short_circuit_and_expr()));return i}_short_circuit_and_expr(){let i=this._inclusive_or_expression();for(;this._match(qe.tokens.and_and);)i=this._updateNode(new ke(this._previous().toString(),i,this._inclusive_or_expression()));return i}_inclusive_or_expression(){let i=this._exclusive_or_expression();for(;this._match(qe.tokens.or);)i=this._updateNode(new ke(this._previous().toString(),i,this._exclusive_or_expression()));return i}_exclusive_or_expression(){let i=this._and_expression();for(;this._match(qe.tokens.xor);)i=this._updateNode(new ke(this._previous().toString(),i,this._and_expression()));return i}_and_expression(){let i=this._equality_expression();for(;this._match(qe.tokens.and);)i=this._updateNode(new ke(this._previous().toString(),i,this._equality_expression()));return i}_equality_expression(){const i=this._relational_expression();return this._match([qe.tokens.equal_equal,qe.tokens.not_equal])?this._updateNode(new ke(this._previous().toString(),i,this._relational_expression())):i}_relational_expression(){let i=this._shift_expression();for(;this._match([qe.tokens.less_than,qe.tokens.greater_than,qe.tokens.less_than_equal,qe.tokens.greater_than_equal]);)i=this._updateNode(new ke(this._previous().toString(),i,this._shift_expression()));return i}_shift_expression(){let i=this._additive_expression();for(;this._match([qe.tokens.shift_left,qe.tokens.shift_right]);)i=this._updateNode(new ke(this._previous().toString(),i,this._additive_expression()));return i}_additive_expression(){let i=this._multiplicative_expression();for(;this._match([qe.tokens.plus,qe.tokens.minus]);)i=this._updateNode(new ke(this._previous().toString(),i,this._multiplicative_expression()));return i}_multiplicative_expression(){let i=this._unary_expression();for(;this._match([qe.tokens.star,qe.tokens.forward_slash,qe.tokens.modulo]);)i=this._updateNode(new ke(this._previous().toString(),i,this._unary_expression()));return i}_unary_expression(){return this._match([qe.tokens.minus,qe.tokens.bang,qe.tokens.tilde,qe.tokens.star,qe.tokens.and])?this._updateNode(new we(this._previous().toString(),this._unary_expression())):this._singular_expression()}_singular_expression(){const i=this._primary_expression(),m=this._postfix_expression();return m&&(i.postfix=m),i}_postfix_expression(){if(this._match(qe.tokens.bracket_left)){const i=this._short_circuit_or_expression();this._consume(qe.tokens.bracket_right,"Expected ']'.");const m=this._updateNode(new be(i)),g=this._postfix_expression();return g&&(m.postfix=g),m}if(this._match(qe.tokens.period)){const i=this._consume(qe.tokens.name,"Expected member name."),m=this._postfix_expression(),g=this._updateNode(new fe(i.lexeme));return m&&(g.postfix=m),g}return null}_getStruct(i){return this._context.aliases.has(i)?this._context.aliases.get(i).type:this._context.structs.has(i)?this._context.structs.get(i):null}_getType(i){const m=this._getStruct(i);if(null!==m)return m;switch(i){case"void":return re.void;case"bool":return re.bool;case"i32":return re.i32;case"u32":return re.u32;case"f32":return re.f32;case"f16":return re.f16;case"vec2f":return oe.vec2f;case"vec3f":return oe.vec3f;case"vec4f":return oe.vec4f;case"vec2i":return oe.vec2i;case"vec3i":return oe.vec3i;case"vec4i":return oe.vec4i;case"vec2u":return oe.vec2u;case"vec3u":return oe.vec3u;case"vec4u":return oe.vec4u;case"vec2h":return oe.vec2h;case"vec3h":return oe.vec3h;case"vec4h":return oe.vec4h;case"mat2x2f":return oe.mat2x2f;case"mat2x3f":return oe.mat2x3f;case"mat2x4f":return oe.mat2x4f;case"mat3x2f":return oe.mat3x2f;case"mat3x3f":return oe.mat3x3f;case"mat3x4f":return oe.mat3x4f;case"mat4x2f":return oe.mat4x2f;case"mat4x3f":return oe.mat4x3f;case"mat4x4f":return oe.mat4x4f;case"mat2x2h":return oe.mat2x2h;case"mat2x3h":return oe.mat2x3h;case"mat2x4h":return oe.mat2x4h;case"mat3x2h":return oe.mat3x2h;case"mat3x3h":return oe.mat3x3h;case"mat3x4h":return oe.mat3x4h;case"mat4x2h":return oe.mat4x2h;case"mat4x3h":return oe.mat4x3h;case"mat4x4h":return oe.mat4x4h;case"mat2x2i":return oe.mat2x2i;case"mat2x3i":return oe.mat2x3i;case"mat2x4i":return oe.mat2x4i;case"mat3x2i":return oe.mat3x2i;case"mat3x3i":return oe.mat3x3i;case"mat3x4i":return oe.mat3x4i;case"mat4x2i":return oe.mat4x2i;case"mat4x3i":return oe.mat4x3i;case"mat4x4i":return oe.mat4x4i;case"mat2x2u":return oe.mat2x2u;case"mat2x3u":return oe.mat2x3u;case"mat2x4u":return oe.mat2x4u;case"mat3x2u":return oe.mat3x2u;case"mat3x3u":return oe.mat3x3u;case"mat3x4u":return oe.mat3x4u;case"mat4x2u":return oe.mat4x2u;case"mat4x3u":return oe.mat4x3u;case"mat4x4u":return oe.mat4x4u}return null}_validateTypeRange(i,m){if("i32"===m.name){if(i<-2147483648||i>2147483647)throw this._error(this._previous(),`Value out of range for i32:${i}. Line:${this._currentLine}.`)}else if("u32"===m.name&&(i<0||i>4294967295))throw this._error(this._previous(),`Value out of range for u32:${i}. Line:${this._currentLine}.`)}_primary_expression(){if(this._match(qe.tokens.ident)){const i=this._previous().toString();if(this._check(qe.tokens.paren_left)){const m=this._argument_expression_list(),g=this._getType(i);return null!==g?this._updateNode(new pe(g,m)):this._updateNode(new de(i,m))}if(this._context.constants.has(i)){const m=this._context.constants.get(i);return this._updateNode(new _e(i,m.value))}return this._updateNode(new me(i))}if(this._match(qe.tokens.int_literal)){const i=this._previous().toString();let m=i.endsWith("i")||i.endsWith("i")?re.i32:i.endsWith("u")||i.endsWith("U")?re.u32:re.x32;const g=parseInt(i);return this._validateTypeRange(g,m),this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(m)),m))}if(this._match(qe.tokens.uint_literal)){const i=parseInt(this._previous().toString());return this._validateTypeRange(i,re.u32),this._updateNode(new ge(new Oe(i,this._exec.getTypeInfo(re.u32)),re.u32))}if(this._match([qe.tokens.decimal_float_literal,qe.tokens.hex_float_literal])){let i=this._previous().toString(),m=i.endsWith("h");m&&(i=i.substring(0,i.length-1));const g=parseFloat(i);this._validateTypeRange(g,m?re.f16:re.f32);const _=m?re.f16:re.f32;return this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(_)),_))}if(this._match([qe.keywords.true,qe.keywords.false])){let i=this._previous().toString()===qe.keywords.true.rule;return this._updateNode(new ge(new Oe(i?1:0,this._exec.getTypeInfo(re.bool)),re.bool))}if(this._check(qe.tokens.paren_left))return this._paren_expression();if(this._match(qe.keywords.bitcast)){this._consume(qe.tokens.less_than,"Expected '<'.");const i=this._type_decl();this._consume(qe.tokens.greater_than,"Expected '>'.");const m=this._paren_expression();return this._updateNode(new xe(i,m))}const i=this._type_decl(),m=this._argument_expression_list();return this._updateNode(new pe(i,m))}_argument_expression_list(){if(!this._match(qe.tokens.paren_left))return null;const i=[];do{if(this._check(qe.tokens.paren_right))break;const m=this._short_circuit_or_expression();i.push(m)}while(this._match(qe.tokens.comma));return this._consume(qe.tokens.paren_right,"Expected ')' for agument list"),i}_optional_paren_expression(){this._match(qe.tokens.paren_left);const i=this._short_circuit_or_expression();return this._match(qe.tokens.paren_right),i}_paren_expression(){this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._short_circuit_or_expression();return this._consume(qe.tokens.paren_right,"Expected ')'."),i}_struct_decl(){if(!this._match(qe.keywords.struct))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected name for struct.").toString();this._consume(qe.tokens.brace_left,"Expected '{' for struct body.");const g=[];for(;!this._check(qe.tokens.brace_right);){const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected variable name.").toString();this._consume(qe.tokens.colon,"Expected ':' for struct member type.");const _=this._attribute(),b=this._type_decl();null!=b&&(b.attributes=_),this._check(qe.tokens.brace_right)?this._match(qe.tokens.comma):this._consume(qe.tokens.comma,"Expected ',' for struct member."),g.push(this._updateNode(new Le(m,b,i)))}this._consume(qe.tokens.brace_right,"Expected '}' after struct body.");const _=this._currentLine,b=this._updateNode(new ie(m,g,i,_),i);return this._context.structs.set(m,b),b}_global_variable_decl(){const i=this._variable_decl();if(!i)return null;if(this._match(qe.tokens.equal)){const m=this._const_expression();i.value=m}if(null!==i.type&&i.value instanceof ge){if("x32"!==i.value.type.name&&i.type.getTypeName()!==i.value.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${i.value.type.name} to ${i.type.name}. Line:${this._currentLine}`);i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type),i.value.type=i.type}else null===i.type&&i.value instanceof ge&&(i.type="x32"===i.value.type.name?re.i32:i.value.type,i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type));return i}_override_variable_decl(){const i=this._override_decl();return i&&this._match(qe.tokens.equal)&&(i.value=this._const_expression()),i}_global_const_decl(){var i;if(!this._match(qe.keywords.const))return null;const m=this._consume(qe.tokens.name,"Expected variable name"),g=this._currentLine;let _=null;if(this._match(qe.tokens.colon)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}let b=null;this._consume(qe.tokens.equal,"const declarations require an assignment");const y=this._short_circuit_or_expression();try{let i=[re.f32],g=y.constEvaluate(this._exec,i);g instanceof Oe&&this._validateTypeRange(g.value,i[0]),i[0]instanceof oe&&null===i[0].format&&g.typeInfo instanceof a&&null!==g.typeInfo.format&&("f16"===g.typeInfo.format.name?i[0].format=re.f16:"f32"===g.typeInfo.format.name?i[0].format=re.f32:"i32"===g.typeInfo.format.name?i[0].format=re.i32:"u32"===g.typeInfo.format.name?i[0].format=re.u32:"bool"===g.typeInfo.format.name?i[0].format=re.bool:console.error(`TODO:impelement template format type ${g.typeInfo.format.name}`)),b=this._updateNode(new ge(g,i[0])),this._exec.context.setVariable(m.toString(),g)}catch(i){b=y}if(null!==_&&b instanceof ge){if("x32"!==b.type.name&&_.getTypeName()!==b.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${b.type.name} to ${_.name}. Line:${this._currentLine}`);b.type=_,b.isScalar&&this._validateTypeRange(b.scalarValue,b.type)}else null===_&&b instanceof ge&&(_=null!==(i=null==b?void 0:b.type)&&void 0!==i?i:re.f32,_===re.x32&&(_=re.i32));const T=this._updateNode(new U(m.toString(),_,"","",b),g);return this._context.constants.set(T.name,T),T}_global_let_decl(){if(!this._match(qe.keywords.let))return null;const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected variable name");let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}let _=null;if(this._match(qe.tokens.equal)&&(_=this._const_expression()),null!==g&&_ instanceof ge){if("x32"!==_.type.name&&g.getTypeName()!==_.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${_.type.name} to ${g.name}. Line:${this._currentLine}`);_.type=g}else null===g&&_ instanceof ge&&(g="x32"===_.type.name?re.i32:_.type);return _ instanceof ge&&_.isScalar&&this._validateTypeRange(_.scalarValue,g),this._updateNode(new M(m.toString(),g,"","",_),i)}_const_expression(){return this._short_circuit_or_expression()}_variable_decl(){if(!this._match(qe.keywords.var))return null;const i=this._currentLine;let m="",g="";this._match(qe.tokens.less_than)&&(m=this._consume(qe.storage_class,"Expected storage_class.").toString(),this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode.").toString()),this._consume(qe.tokens.greater_than,"Expected '>'."));const _=this._consume(qe.tokens.name,"Expected variable name");let b=null;if(this._match(qe.tokens.colon)){const i=this._attribute();b=this._type_decl(),null!=b&&(b.attributes=i)}return this._updateNode(new B(_.toString(),b,m,g,null),i)}_override_decl(){if(!this._match(qe.keywords.override))return null;const i=this._consume(qe.tokens.name,"Expected variable name");let m=null;if(this._match(qe.tokens.colon)){const i=this._attribute();m=this._type_decl(),null!=m&&(m.attributes=i)}return this._updateNode(new F(i.toString(),m,null))}_diagnostic(){this._consume(qe.tokens.paren_left,"Expected '('");const i=this._consume(qe.tokens.ident,"Expected severity control name.");this._consume(qe.tokens.comma,"Expected ','");let m=this._consume(qe.tokens.ident,"Expected diagnostic rule name.").toString();return this._match(qe.tokens.period)&&(m+=`.${this._consume(qe.tokens.ident,"Expected diagnostic message.").toString()}`),this._consume(qe.tokens.paren_right,"Expected ')'"),this._updateNode(new J(i.toString(),m))}_enable_directive(){const i=this._consume(qe.tokens.ident,"identity expected.");return this._updateNode(new Y(i.toString()))}_requires_directive(){const i=[this._consume(qe.tokens.ident,"identity expected.").toString()];for(;this._match(qe.tokens.comma);){const m=this._consume(qe.tokens.ident,"identity expected.");i.push(m.toString())}return this._updateNode(new K(i))}_type_alias(){const i=this._consume(qe.tokens.ident,"identity expected.");this._consume(qe.tokens.equal,"Expected '=' for type alias.");let m=this._type_decl();if(null===m)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(m.name)&&(m=this._context.aliases.get(m.name).type);const g=this._updateNode(new ee(i.toString(),m));return this._context.aliases.set(g.name,g),g}_type_decl(){if(this._check([qe.tokens.ident,...qe.texel_format,qe.keywords.bool,qe.keywords.f32,qe.keywords.i32,qe.keywords.u32])){const i=this._advance().toString();if(this._context.structs.has(i))return this._context.structs.get(i);if(this._context.aliases.has(i))return this._context.aliases.get(i).type;if(!this._getType(i)){const m=this._updateNode(new ae(i));return this._forwardTypeCount++,m}return this._updateNode(new re(i))}let i=this._texture_sampler_types();if(i)return i;if(this._check(qe.template_types)){let i=this._advance().toString(),m=null,g=null;return this._match(qe.tokens.less_than)&&(m=this._type_decl(),g=null,this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for type.")),this._updateNode(new oe(i,m,g))}if(this._match(qe.keywords.ptr)){let i=this._previous().toString();this._consume(qe.tokens.less_than,"Expected '<' for pointer.");const m=this._consume(qe.storage_class,"Expected storage_class for pointer");this._consume(qe.tokens.comma,"Expected ',' for pointer.");const g=this._type_decl();let _=null;return this._match(qe.tokens.comma)&&(_=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for pointer."),this._updateNode(new le(i,m.toString(),g,_))}const m=this._attribute();if(this._match(qe.keywords.array)){let g=null,_=-1;const b=this._previous();let y=null;if(this._match(qe.tokens.less_than)){g=this._type_decl(),this._context.aliases.has(g.name)&&(g=this._context.aliases.get(g.name).type);let m="";if(this._match(qe.tokens.comma)){y=this._shift_expression();try{m=y.constEvaluate(this._exec).toString(),y=null}catch(i){m="1"}}this._consume(qe.tokens.greater_than,"Expected '>' for array."),_=m?parseInt(m):0}const T=this._updateNode(new ce(b.toString(),m,g,_));return y&&this._deferArrayCountEval.push({arrayType:T,countNode:y}),T}return null}_texture_sampler_types(){if(this._match(qe.sampler_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.depth_texture_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.sampled_texture_type)||this._match(qe.multisampled_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._type_decl();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,null))}if(this._match(qe.storage_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._consume(qe.texel_format,"Invalid texel format.").toString();this._consume(qe.tokens.comma,"Expected ',' after texel format.");const g=this._consume(qe.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,g))}return null}_attribute(){let i=[];for(;this._match(qe.tokens.attr);){const m=this._consume(qe.attribute_name,"Expected attribute name"),g=this._updateNode(new Ce(m.toString(),null));if(this._match(qe.tokens.paren_left)){if(g.value=this._consume(qe.literal_or_ident,"Expected attribute value").toString(),this._check(qe.tokens.comma)){this._advance();do{const i=this._consume(qe.literal_or_ident,"Expected attribute value").toString();g.value instanceof Array||(g.value=[g.value]),g.value.push(i)}while(this._match(qe.tokens.comma))}this._consume(qe.tokens.paren_right,"Expected ')'")}i.push(g)}return 0==i.length?null:i}}class _t extends rt{constructor(i){super(),i&&this.update(i)}update(i){const m=(new mt).parse(i);this.updateAST(m)}}class UniformType{static get i32(){return{numElements:1,align:4,size:4,type:"i32",wgslType:"i32",View:Int32Array}}static get u32(){return{numElements:1,align:4,size:4,type:"u32",wgslType:"u32",View:Uint32Array}}static get f32(){return{numElements:1,align:4,size:4,type:"f32",wgslType:"f32",View:Float32Array}}static get f16(){return{numElements:1,align:2,size:2,type:"f16",wgslType:"f16",View:Uint16Array}}static get vec2f32(){return{numElements:2,align:8,size:8,type:"f32",wgslType:"vec2<f32>",View:Float32Array}}static get vec2i32(){return{numElements:2,align:8,size:8,type:"i32",wgslType:"vec2<i32>",View:Int32Array}}static get vec2u32(){return{numElements:2,align:8,size:8,type:"u32",wgslType:"vec2<u32>",View:Uint32Array}}static get vec2u16(){return{numElements:2,align:4,size:4,type:"u16",wgslType:"vec2<u16>",View:Uint16Array}}static get vec3i32(){return{numElements:3,align:16,size:12,type:"i32",wgslType:"vec3<i32>",View:Int32Array}}static get vec3u32(){return{numElements:3,align:16,size:12,type:"u32",wgslType:"vec3<u32>",View:Uint32Array}}static get vec3f32(){return{numElements:3,align:16,size:12,type:"f32",wgslType:"vec3<f32>",View:Float32Array}}static get vec3u16(){return{numElements:3,align:8,size:6,type:"u16",wgslType:"vec3<u16>",View:Uint16Array}}static get vec4i32(){return{numElements:4,align:16,size:16,type:"i32",wgslType:"vec4<i32>",View:Int32Array}}static get vec4u32(){return{numElements:4,align:16,size:16,type:"u32",wgslType:"vec4<u32>",View:Uint32Array}}static get vec4f32(){return{numElements:4,align:16,size:16,type:"f32",wgslType:"vec4<f32>",View:Float32Array}}static get vec4u16(){return{numElements:4,align:8,size:8,type:"u16",wgslType:"vec4<u16>",View:Uint16Array}}static get mat2x2f32(){return{numElements:4,align:8,size:16,type:"f32",wgslType:"mat2x2<f32>",View:Float32Array}}static get mat2x2u16(){return{numElements:4,align:4,size:8,type:"u16",wgslType:"mat2x2<u16>",View:Uint16Array}}static get mat3x2f32(){return{numElements:6,align:8,size:24,type:"f32",wgslType:"mat3x2<f32>",View:Float32Array}}static get mat3x2u16(){return{numElements:6,align:4,size:12,type:"u16",wgslType:"mat3x2<u16>",View:Uint16Array}}static get mat3x3f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat3x3<f32>",View:Float32Array}}static get mat4x2f32(){return{numElements:8,align:8,size:32,type:"f32",wgslType:"mat4x2<f32>",View:Float32Array}}static get mat4x2u16(){return{numElements:8,align:4,size:16,type:"u16",wgslType:"mat4x2<u16>",View:Uint16Array}}static get mat2x3f32(){return{numElements:8,align:16,size:32,type:"f32",wgslType:"mat2x3<f32>",View:Float32Array}}static get mat2x3u16(){return{numElements:8,align:8,size:16,type:"u16",wgslType:"mat2x3<u16>",View:Uint16Array}}static get mat4x4f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat4x4<f32>",View:Float32Array}}static get mat4x4u16(){return{numElements:16,align:8,size:32,type:"u16",wgslType:"mat4x4<u16>",View:Uint16Array}}}Object.freeze(UniformType);const processMembers=(i,m=0,g=0)=>{let _=0,b=g;const y=i?.reduce((i,g,y)=>{const{type:T,offset:w,size:P,stride:$,count:H,isArray:q}=g,{format:W}=T,ye="array"===T.name?`${W.name}${W.format?`${W.format.name}`:""}`:`${T.name}${W?`${W.name}`:""}`;if(0===y&&(_=w),b=w+P,i[g.name]=((i,m,g)=>{const _=UniformType[g];return{uniformOffset:i.offset+m,stride:i.stride,isArray:i.isArray,typeInfo:_,View:_?.View}})(g,m,ye),q&&W.members){const m=processMembers(W.members).members;i[g.name].memberList=Array.from({length:H},(i,g)=>{const _={};for(const i in m){const b=_[i]={...m[i]};b.uniformOffset=b.uniformOffset+w+$*g}return _})}else T.members&&(i[g.name]=processMembers(T.members,w+m,b));return i},{});return{members:y,startOffset:_,endOffset:b}},parseWGSL=i=>{const m=parseIncludeWGSL(i),g=new _t(m);return{uniforms:{...(b=g.uniforms,b.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},storage:{...(_=g.storage,_.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride,acccess:m.access,type:m.type},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},samplers:g.samplers,textures:g.textures,vertexEntries:g.entry.vertex.map(i=>i.name),fragmentEntries:g.entry.fragment.map(i=>i.name),computeEntries:g.entry.compute.map(i=>i.name),shaderSource:m};var _,b},Nn={ZERO:"zero",ONE:"one",SRC:"src",ONE_MINUS_SRC:"one-minus-src",SRC_ALPHA:"src-alpha",ONE_MINUS_SRC_ALPHA:"one-minus-src-alpha",DST:"dst",ONE_MINUS_DST:"one-minus-dst",DST_ALPHA:"dst-alpha",ONE_MINUS_DST_ALPHA:"one-minus-dst-alpha",SRC_ALPHA_SATURATED:"src-alpha-saturated",CONSTANT:"constant",ONE_MINUS_CONSTANT:"one-minus-constant",SRC1:"src1",ONE_MINUS_SRC1:"one-minus-src1",SRC1_ALPHA:"src1-alpha",ONE_MINUS_SRC1_ALPHA:"one-minus-src1-alpha"};Object.freeze(Nn);const Fn={ADD:"add",SUBTRACT:"subtract",REVERSE_SUBTRACT:"reverse-subtract",MIN:"min",MAX:"max"};Object.freeze(Fn);class FragmentGPURenderInfo{fragmentShaderModule;fragmentUniformInfo;fragmentBindGroupLayout;fragmentUniformBuffer;fragmentUniformBindGroup;fragmentState;constructor(i,m,g,_,b,y){this.fragmentShaderModule=i,this.fragmentUniformInfo=m,this.fragmentBindGroupLayout=g,this.fragmentUniformBuffer=_,this.fragmentUniformBindGroup=b,this.fragmentState=y}}Object.freeze(FragmentGPURenderInfo);const Gn=Object.values(Nn),Vn=Object.values(Fn);class BlendState{state;#Xe;#je;#Ye;#Ze;constructor(i,m,g,_){this.#Ze=i,this.srcFactor=m,this.dstFactor=g,this.operation=_}get operation(){return this.#Ye}set operation(i){Vn.includes(i)||consoleAndThrowError(`Invalid GPUBlendOperation:${i}. Valid operations are ${Vn.join(",")}`),this.#Ye=i,this.#Je()}get srcFactor(){return this.#Xe}set srcFactor(i){Gn.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid srcFactor factors are ${Gn.join(",")}`),this.#Xe=i,this.#Je()}get dstFactor(){return this.#je}set dstFactor(i){Gn.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid dstFactor factors are ${Gn.join(",")}`),this.#je=i,this.#Je()}#Je(){const i=this.#Ye?{operation:this.#Ye}:{},m=this.#Xe?{srcFactor:this.#Xe}:{},g=this.#je?{dstFactor:this.#je}:{};this.state={...i,...m,...g},this.#Ze.dirtyPipeline=!0}}const $n={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DARKEN:6,OVERLAY:7,COLOR_DODGE:8,COLOR_BURN:9,HARD_LIGHT:10,SOFT_LIGHT:11,DIFFERENCE:12,EXCLUSION:13,DIVIDE:14,VIVID_LIGHT:15,LINEAR_BURN:16,PIN_LIGHT:17,SATURATION:18,HUE:19,LUMINOSITY:20,COLOR:21,NEGATION:22},getBindGroupLayoutDescriptorFromShaderInfo=(i,m,g,_=!0)=>{const{textures:b,samplers:y,uniforms:T,storage:w}=i,P=[];for(const i in w){const _=w[i],{binding:b,name:y,group:T,type:$}=_;if(_.access){const i={write:"write-only-storage",read:"read-only-storage",read_write:"read-write-storage"}[_.access];m===T&&P.push({binding:b,visibility:g,buffer:{type:i}})}else if(m===T){const{access:i,format:m}=$,_={write:"write-only",read:"read-only",read_write:"read-write"}[i],y=m.name;P.push({binding:b,visibility:g,storageTexture:{access:_,format:y}})}}for(const i in b){const y=b[i],{binding:T,name:w,group:$,type:H}=y,{name:q}=H;m===$&&P.push({binding:T,visibility:g,texture:"texture_depth_2d"===q||"texture_depth_multisampled_2d"===q?{viewDimension:"2d",sampleType:"depth",multisampled:_}:"texture_cube"===q?{viewDimension:"cube"}:{}})}for(const i in y){const _=y[i],{binding:b,name:T,group:w}=_;m===w&&P.push({binding:b,visibility:g,sampler:{type:"filtering"}})}for(const i in T){const _=T[i],{binding:b,name:y,group:w}=_;m===w&&P.push({binding:b,visibility:g,buffer:{type:"uniform"}})}return{entries:P}},getFragmentBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.FRAGMENT),getVertexBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.VERTEX),getComputeBindGroupLayoutDescriptorFromShaderInfo=(i,m,g)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.COMPUTE,g);class ABaseMaterial extends ResourceBase{gpuRenderInfo;dirtyPipeline=!1;transparent=!1;#Qe=GPUColorWrite.ALL;#et;#tt;#rt;#nt;#it;#Pe;#at;#st;#ot;#ut;#lt;#ct;#ht;#ft;#dt;#he;#mt=$n.MULTIPLY;constructor(i,m,g,_){super(i),this.#dt=m,this.#at=`FRAGMENT_MODULE_${this.#dt}`,this.#st=`FRAGMENT_BIND_GROUP_DESCRIPTOR_${m}`,this.#ot=`FRAGMENT_BIND_GROUP_LAYOUT_${m}`,this.#ut=g,this.#lt=g?.storage,this.#ct=g?.uniforms.uniforms,this.#ht=g?.textures,this.#ft=g?.samplers,this.#he=i.resourceManager.getGPUBindGroupLayout(this.#ot)||i.resourceManager.createBindGroupLayout(this.#ot,getFragmentBindGroupLayoutDescriptorFromShaderInfo(g,_)),this.#et=new BlendState(this,Nn.SRC_ALPHA,Nn.ONE_MINUS_SRC_ALPHA,Fn.ADD),this.#tt=new BlendState(this,Nn.SRC_ALPHA,Nn.ONE_MINUS_SRC_ALPHA,Fn.ADD),this.#rt=i.resourceManager,this.#nt=this.#rt.basicSampler.gpuSampler,this.#it=this.#rt.emptyBitmapTextureView,this.#Pe=this.#rt.emptyCubeTextureView}get tintBlendMode(){const i=Object.entries($n).find(([,i])=>i===this.#mt);if(!i)throw new Error(`Invalid tint mode value:${this.#mt}`);return i[0]}set tintBlendMode(i){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=this.gpuRenderInfo;let _;if("string"==typeof i){if(!(i in $n))throw new Error(`Invalid tint mode key:${i}`);_=$n[i]}else{if("number"!=typeof i||!Object.values($n).includes(i))throw new Error(`Invalid tint mode:${i}`);_=i}g.writeBuffer(m.members.tintBlendMode,_),this.#mt=_}get MODULE_NAME(){return this.#dt}get FRAGMENT_SHADER_MODULE_NAME(){return this.#at}get FRAGMENT_BIND_GROUP_DESCRIPTOR_NAME(){return this.#st}get STORAGE_STRUCT(){return this.#lt}get UNIFORM_STRUCT(){return this.#ct}get blendColorState(){return this.#et}get blendAlphaState(){return this.#tt}get writeMaskState(){return this.#Qe}set writeMaskState(i){this.#Qe=i}initGPURenderInfos(){const{redGPUContext:i}=this,{resourceManager:m}=i,g=m.createGPUShaderModule(this.#at,{code:this.#ut.shaderSource}),_=new ArrayBuffer(Math.max(this.#ct.arrayBufferByteLength,16)),b=new UniformBuffer(i,_,`UniformBuffer_${this.#dt}_${this.uuid}`);this.gpuRenderInfo=new FragmentGPURenderInfo(g,this.#ct,this.#he,b,null,null),this._updateBaseProperty(),this._updateFragmentState()}_updateFragmentState(){const{gpuDevice:i}=this.redGPUContext,m=[];for(const i in this.#ht){const g=this.#ht[i],{binding:_,name:b,group:y,type:T}=g,{name:w}=T;let P;P="texture_cube"===w?this.getGPUResourceCubeTextureView(this[b]):this[b]instanceof PackedTexture?this[b].gpuTexture?this[b].gpuTexture.createView({}):this.#it:this.getGPUResourceBitmapTextureView(this[b])||this.#it,2===y&&m.push({binding:_,resource:P})}for(const i in this.#ft){const g=this.#ft[i],{binding:_,name:b,group:y}=g;2===y&&m.push({binding:_,resource:this.getGPUResourceSampler(this[b])})}this.#ct&&m.push({binding:this.#ct.binding,resource:{buffer:this.gpuRenderInfo.fragmentUniformBuffer.gpuBuffer,offset:0,size:this.gpuRenderInfo.fragmentUniformBuffer.size}});const g={layout:this.gpuRenderInfo.fragmentBindGroupLayout,label:this.#st,entries:m},_=i.createBindGroup(g);this.gpuRenderInfo.fragmentState=this.getFragmentRenderState(),this.gpuRenderInfo.fragmentUniformBindGroup=_}getFragmentRenderState(i="main"){return{module:this.gpuRenderInfo.fragmentShaderModule,entryPoint:i,targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.blendColorState.state,alpha:this.blendAlphaState.state},writeMask:this.writeMaskState}]}}_updateBaseProperty(){const{fragmentUniformInfo:i,fragmentUniformBuffer:m}=this.gpuRenderInfo,{members:g}=i;for(const _ in g){const g=this[_];g instanceof ColorRGBA?m.writeBuffer(i.members[_],g.rgbaNormal):g instanceof ColorRGB?m.writeBuffer(i.members[_],g.rgbNormal):Hn.test(_)||(this[_]=g)}}getGPUResourceBitmapTextureView(i){return i?.gpuTexture?.createView({label:i.src})||this.#it}getGPUResourceCubeTextureView(i,m){return i?.gpuTexture?.createView(m||i.viewDescriptor||CubeTexture.defaultViewDescriptor)||this.#Pe}getGPUResourceSampler(i){return i?.gpuSampler||this.#nt}}const Hn=/^use\w+Texture$/;dn.defineByPreset(ABaseMaterial,[dn.PRESET_POSITIVE_NUMBER.OPACITY]),dn.defineBoolean(ABaseMaterial,[["useTint",!1]]),dn.defineColorRGBA(ABaseMaterial,["tint","#ff0000"]),Object.freeze(ABaseMaterial);class ABitmapBaseMaterial extends ABaseMaterial{__packingList;constructor(i,m,g,_){super(i,m,g,_)}updateTexture(i,m){i&&i.__removeDirtyPipelineListener(this.#pt),m&&m.__addDirtyPipelineListener(this.#pt),this.#pt()}updateSampler(i,m){i&&i.__removeDirtyPipelineListener(this.#pt),m&&m.__addDirtyPipelineListener(this.#pt),this.#pt()}#pt=()=>{this.dirtyPipeline=!0;{let i=(this.__packingList||[]).length;for(;i--;)this.__packingList[i]()}this.gpuRenderInfo?.fragmentShaderModule?this._updateFragmentState():this.initGPURenderInfos()}}Object.freeze(ABitmapBaseMaterial);const zn=[{textureList:["baseColorTexture"],vec4List:[["baseColorFactor",[1,1,1,1]]]},{textureList:["normalTexture"]},{textureList:["metallicRoughnessTexture"],positiveNumberList:["metallicFactor","roughnessFactor"]},{textureList:["emissiveTexture"],vec3List:["emissiveFactor"]},{textureList:["occlusionTexture"],positiveNumberList:["occlusionStrength"]},{extensionName:"KHR_materials_clearcoat",textureList:["KHR_clearcoatTexture","KHR_clearcoatNormalTexture","KHR_clearcoatRoughnessTexture"],positiveNumberList:[["KHR_clearcoatFactor",0],["KHR_clearcoatRoughnessFactor",0],"KHR_clearcoatNormalScale"]},{extensionName:"KHR_materials_sheen",textureList:["KHR_sheenColorTexture","KHR_sheenRoughnessTexture"],positiveNumberList:[["KHR_sheenRoughnessFactor",0]],vec3List:[["KHR_sheenColorFactor",[0,0,0]]]},{extensionName:"KHR_materials_specular",textureList:["KHR_specularTexture","KHR_specularColorTexture"],positiveNumberList:["KHR_specularFactor"],vec3List:[["KHR_specularColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_transmission",textureList:["KHR_transmissionTexture"],positiveNumberList:[["KHR_transmissionFactor",0]]},{extensionName:"KHR_materials_volume",textureList:["KHR_thicknessTexture"],positiveNumberList:[["KHR_thicknessFactor",0],["KHR_attenuationDistance",1]],vec3List:[["KHR_attenuationColor",[1,1,1]]]},{extensionName:"KHR_materials_diffuse_transmission",textureList:["KHR_diffuseTransmissionTexture","KHR_diffuseTransmissionColorTexture"],positiveNumberList:[["KHR_diffuseTransmissionFactor",0]],vec3List:[["KHR_diffuseTransmissionColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_anisotropy",textureList:["KHR_anisotropyTexture"],positiveNumberList:[["KHR_anisotropyStrength",0],["KHR_anisotropyRotation",0]]},{extensionName:"KHR_materials_iridescence",textureList:["KHR_iridescenceTexture","KHR_iridescenceThicknessTexture"],positiveNumberList:[["KHR_iridescenceFactor",0],["KHR_iridescenceIor",1.3],["KHR_iridescenceThicknessMinimum",100],["KHR_iridescenceThicknessMaximum",400]]}],Kn=parseWGSL((i=>{const m=zn.map(i=>{const{textureList:m,positiveNumberList:g}=i,_=m?.map(i=>`use${i.charAt(0).toUpperCase()+i.slice(1)}:u32,${i}_texCoord_index:u32,use_${i}_KHR_texture_transform:u32,${i}_KHR_texture_transform_offset:vec2<f32>,${i}_KHR_texture_transform_scale:vec2<f32>,${i}_KHR_texture_transform_rotation:f32,`).join("");return[_].join("\n")}).join("");return i.replace(/#redgpu_include KHR_texture_transform/g,m)})("#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include calcDirectionalShadowVisibility;\r\n#redgpu_include calcTintBlendMode;\r\n#redgpu_include normalFunctions;\r\n#redgpu_include drawPicking;\r\nstruct Uniforms {\ruseVertexColor:u32,\ruseCutOff:u32,\rcutOff:f32,\ralphaBlend:u32,\r\n\r\rdoubleSided:u32,\ruseVertexTangent:u32,\r\n\r\ropacity:f32,\ruseTint:u32,\rtint:vec4<f32>,\rtintBlendMode:u32,\r\n\r\rbaseColorFactor:vec4<f32>,\r\remissiveFactor:vec3<f32>,\remissiveStrength:f32,\r\rocclusionStrength:f32,\r\rmetallicFactor:f32,\rroughnessFactor:f32,\r\rnormalScale:f32,\r\n\r\r\ruseKHR_materials_unlit:u32,\r\rKHR_materials_ior:f32,\r\r\ruseKHR_materials_transmission:u32,\rKHR_transmissionFactor:f32,\r\n\r\ruseKHR_materials_diffuse_transmission:u32,\rKHR_diffuseTransmissionFactor:f32,\rKHR_diffuseTransmissionColorFactor:vec3<f32>,\r\n\r\rKHR_dispersion:f32,\r\ruseKHR_materials_volume:u32,\rKHR_thicknessFactor:f32,\rKHR_attenuationDistance:f32,\rKHR_attenuationColor:vec3<f32>,\r\n\r\ruseKHR_materials_specular:u32,\rKHR_specularFactor:f32,\rKHR_specularColorFactor:vec3<f32>,\r\n\r\ruseKHR_materials_anisotropy:u32,\rKHR_anisotropyStrength:f32,\rKHR_anisotropyRotation:f32,\r\n\r\ruseKHR_materials_iridescence:u32,\rKHR_iridescenceFactor:f32,\rKHR_iridescenceIor:f32,\rKHR_iridescenceThicknessMinimum:f32,\rKHR_iridescenceThicknessMaximum:f32,\r\n\r\ruseKHR_materials_sheen:u32,\rKHR_sheenColorFactor:vec3<f32>,\rKHR_sheenRoughnessFactor:f32,\r\n\r\ruseKHR_materials_clearcoat:u32,\rKHR_clearcoatFactor:f32,\rKHR_clearcoatRoughnessFactor:f32,\rKHR_clearcoatNormalScale:f32,\r\r#redgpu_include KHR_texture_transform\r\n\r\n};\r\n\r\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\r\n\r\n\r\n@group(2) @binding(1) var baseColorTextureSampler:sampler;\r\n@group(2) @binding(2) var baseColorTexture:texture_2d<f32>;\r\n\r\n\r\n@group(2) @binding(3) var emissiveTextureSampler:sampler;\r\n@group(2) @binding(4) var emissiveTexture:texture_2d<f32>;\r\n\r\n\r\n@group(2) @binding(5) var normalTextureSampler:sampler;\r\n@group(2) @binding(6) var normalTexture:texture_2d<f32>;\r\n\r\n\r\n\r\n@group(2) @binding(7) var packedORMTexture:texture_2d<f32>;\r\n\r\n\r\n@group(2) @binding(8) var KHR_specularTextureSampler:sampler;\r\n@group(2) @binding(9) var KHR_specularTexture:texture_2d<f32>;\r\n@group(2) @binding(10) var KHR_specularColorTextureSampler:sampler;\r\n@group(2) @binding(11) var KHR_specularColorTexture:texture_2d<f32>;\r\n\r\n\r\n\r\n\r\n\r\n@group(2) @binding(12) var KHR_clearcoatNormalTexture:texture_2d<f32>;\r\n@group(2) @binding(13) var packedKHR_clearcoatTexture_transmission:texture_2d<f32>;\r\n\r\n\r\n\r\n@group(2) @binding(14) var packedKHR_diffuse_transmission:texture_2d<f32>;\r\n\r\n@group(2) @binding(15) var packedKHR_sheen:texture_2d<f32>;\r\n\r\n@group(2) @binding(16) var KHR_anisotropyTexture:texture_2d<f32>;\r\n\r\n@group(2) @binding(17) var packedKHR_iridescence:texture_2d<f32>;\r\n\r\n\r\nstruct InputData {\r\r@builtin(position) position:vec4<f32>,\r\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r\r@location(2) uv:vec2<f32>,\r@location(3) uv1:vec2<f32>,\r\r@location(4) vertexColor_0:vec4<f32>,\r\r@location(5) vertexTangent:vec4<f32>,\r@location(6) shadowPos:vec3<f32>,\r@location(7) receiveShadow:f32,\r@location(8) pickingId:vec4<f32>,\r@location(9) ndcPosition:vec3<f32>,\r@location(10) localNodeScale:f32,\r@location(11) volumeScale:f32,\r\n}\r\n\r\n\r\n@fragment\r\nfn main(inputData:InputData) -> @location(0) vec4<f32> {\r\rlet input_vertexNormal=(inputData.vertexNormal.xyz);\rlet input_vertexPosition=inputData.vertexPosition.xyz;\rlet input_vertexColor_0=inputData.vertexColor_0;\rlet input_vertexTangent=inputData.vertexTangent;\rlet input_ndcPosition=inputData.ndcPosition;\rlet input_uv=inputData.uv;\rlet input_uv1=inputData.uv1;\r\r\rlet u_ambientLight=systemUniforms.ambientLight;\rlet u_ambientLightColor=u_ambientLight.color;\rlet u_ambientLightIntensity=u_ambientLight.intensity;\r\n\r\rlet u_directionalLightCount=systemUniforms.directionalLightCount;\rlet u_directionalLights=systemUniforms.directionalLights;\rlet u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize;\rlet u_bias=systemUniforms.bias;\r\n\rlet u_useIblTexture=systemUniforms.useIblTexture==1u;\r\rlet receiveShadowYn=inputData.receiveShadow !=.0;\r\n\r\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\n\r\rlet u_opacity=uniforms.opacity;\rlet u_doubleSided=uniforms.doubleSided==1u;\rlet u_useCutOff=uniforms.useCutOff==1u;\rlet u_cutOff=uniforms.cutOff;\rlet u_useVertexColor=uniforms.useVertexColor==1u;\rlet u_useVertexTangent=uniforms.useVertexTangent==1u;\r\n\r\rlet u_baseColorFactor=uniforms.baseColorFactor;\rlet u_useBaseColorTexture=uniforms.useBaseColorTexture==1u;\r\n\r\rlet u_metallicFactor=uniforms.metallicFactor;\rlet u_roughnessFactor=uniforms.roughnessFactor;\rlet u_useMetallicRoughnessTexture=uniforms.useMetallicRoughnessTexture==1u;\r\n\r\rlet u_useNormalTexture=uniforms.useNormalTexture==1u;\rlet u_normalScale=uniforms.normalScale;\r\n\r\rlet u_useOcclusionTexture=uniforms.useOcclusionTexture==1u;\rlet u_occlusionStrength=uniforms.occlusionStrength;\r\n\r\rlet u_useEmissiveTexture=uniforms.useEmissiveTexture==1u;\rlet u_emissiveFactor=uniforms.emissiveFactor;\rlet u_emissiveStrength=uniforms.emissiveStrength;\r\n\r\rlet u_useKHR_materials_unlit=uniforms.useKHR_materials_unlit==1u;\rlet u_KHR_materials_ior=uniforms.KHR_materials_ior;\rlet u_KHR_dispersion=uniforms.KHR_dispersion;\r\n\r\r\rlet u_useKHR_materials_transmission=uniforms.useKHR_materials_transmission==1u;\rlet u_KHR_transmissionFactor=uniforms.KHR_transmissionFactor;\rlet u_useKHR_transmissionTexture=uniforms.useKHR_transmissionTexture==1u;\r\n\r\rvar u_useKHR_materials_volume=uniforms.useKHR_materials_volume==1u;\rvar u_KHR_thicknessFactor=uniforms.KHR_thicknessFactor;\rvar u_KHR_attenuationColor=uniforms.KHR_attenuationColor;\rvar u_KHR_attenuationDistance=uniforms.KHR_attenuationDistance;\rvar u_useKHR_thicknessTexture=uniforms.useKHR_thicknessTexture==1u;\r\n\r\rlet u_useKHR_materials_diffuse_transmission=uniforms.useKHR_materials_diffuse_transmission==1u;\rlet u_KHR_diffuseTransmissionFactor=uniforms.KHR_diffuseTransmissionFactor;\rlet u_KHR_diffuseTransmissionColorFactor=uniforms.KHR_diffuseTransmissionColorFactor;\rlet u_useKHR_diffuseTransmissionTexture=uniforms.useKHR_diffuseTransmissionTexture==1u;\rlet u_useKHR_diffuseTransmissionColorTexture=uniforms.useKHR_diffuseTransmissionColorTexture==1u;\r\n\r\rlet u_useKHR_materials_specular=uniforms.useKHR_materials_specular==1u;\rlet u_KHR_specularFactor=uniforms.KHR_specularFactor;\rlet u_KHR_specularColorFactor=uniforms.KHR_specularColorFactor;\rlet u_useKHR_specularTexture=uniforms.useKHR_specularTexture==1u;\rlet u_useKHR_specularColorTexture=uniforms.useKHR_specularColorTexture==1u;\r\n\r\rlet u_useKHR_materials_anisotropy=uniforms.useKHR_materials_anisotropy==1u;\rlet u_KHR_anisotropyStrength=uniforms.KHR_anisotropyStrength;\rlet u_KHR_anisotropyRotation=uniforms.KHR_anisotropyRotation;\rlet u_useKHR_anisotropyTexture=uniforms.useKHR_anisotropyTexture==1u;\r\n\r\rlet u_useKHR_materials_sheen=uniforms.useKHR_materials_sheen==1u;\rlet u_useKHR_sheenColorTexture=uniforms.useKHR_sheenColorTexture==1u;\rlet u_useKHR_sheenRoughnessTexture=uniforms.useKHR_sheenRoughnessTexture==1u;\rlet u_KHR_sheenColorFactor=uniforms.KHR_sheenColorFactor;\rlet u_KHR_sheenRoughnessFactor=uniforms.KHR_sheenRoughnessFactor;\r\n\r\rlet u_useKHR_materials_iridescence=uniforms.useKHR_materials_iridescence==1u;\rlet u_useKHR_iridescenceTexture=uniforms.useKHR_iridescenceTexture==1u;\rlet u_useKHR_iridescenceThicknessTexture=uniforms.useKHR_iridescenceThicknessTexture==1u;\rlet u_KHR_iridescenceFactor=uniforms.KHR_iridescenceFactor;\rlet u_KHR_iridescenceIor=uniforms.KHR_iridescenceIor;\rlet u_KHR_iridescenceThicknessMinimum=uniforms.KHR_iridescenceThicknessMinimum;\rlet u_KHR_iridescenceThicknessMaximum=uniforms.KHR_iridescenceThicknessMaximum;\r\n\r\rlet u_useKHR_materials_clearcoat=uniforms.useKHR_materials_clearcoat==1u;\rlet u_KHR_clearcoatFactor=uniforms.KHR_clearcoatFactor;\rlet u_useKHR_clearcoatTexture=uniforms.useKHR_clearcoatTexture==1u;\rlet u_KHR_clearcoatRoughnessFactor=uniforms.KHR_clearcoatRoughnessFactor;\rlet u_useKHR_clearcoatRoughnessTexture=uniforms.useKHR_clearcoatRoughnessTexture==1u;\rlet u_useKHR_clearcoatNormalTexture=uniforms.useKHR_clearcoatNormalTexture==1u;\rlet u_KHR_clearcoatNormalScale=uniforms.KHR_clearcoatNormalScale;\r\n\r\n\r\r\n\r\rlet diffuseUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.baseColorTexture_texCoord_index,\runiforms.use_baseColorTexture_KHR_texture_transform,\runiforms.baseColorTexture_KHR_texture_transform_offset,\runiforms.baseColorTexture_KHR_texture_transform_rotation,\runiforms.baseColorTexture_KHR_texture_transform_scale\r);\r\n\rlet emissiveUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.emissiveTexture_texCoord_index,\runiforms.use_emissiveTexture_KHR_texture_transform,\runiforms.emissiveTexture_KHR_texture_transform_offset,\runiforms.emissiveTexture_KHR_texture_transform_rotation,\runiforms.emissiveTexture_KHR_texture_transform_scale\r);\r\n\rlet occlusionUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.occlusionTexture_texCoord_index,\runiforms.use_occlusionTexture_KHR_texture_transform,\runiforms.occlusionTexture_KHR_texture_transform_offset,\runiforms.occlusionTexture_KHR_texture_transform_rotation,\runiforms.occlusionTexture_KHR_texture_transform_scale\r);\r\n\rlet metallicRoughnessUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.metallicRoughnessTexture_texCoord_index,\runiforms.use_metallicRoughnessTexture_KHR_texture_transform,\runiforms.metallicRoughnessTexture_KHR_texture_transform_offset,\runiforms.metallicRoughnessTexture_KHR_texture_transform_rotation,\runiforms.metallicRoughnessTexture_KHR_texture_transform_scale\r);\r\n\rlet normalUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.normalTexture_texCoord_index,\runiforms.use_normalTexture_KHR_texture_transform,\runiforms.normalTexture_KHR_texture_transform_offset,\runiforms.normalTexture_KHR_texture_transform_rotation,\runiforms.normalTexture_KHR_texture_transform_scale\r);\r\n\r\rlet KHR_clearcoatUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_clearcoatTexture_texCoord_index,\runiforms.use_KHR_clearcoatTexture_KHR_texture_transform,\runiforms.KHR_clearcoatTexture_KHR_texture_transform_offset,\runiforms.KHR_clearcoatTexture_KHR_texture_transform_rotation,\runiforms.KHR_clearcoatTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_clearcoatNormalUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_clearcoatNormalTexture_texCoord_index,\runiforms.use_KHR_clearcoatNormalTexture_KHR_texture_transform,\runiforms.KHR_clearcoatNormalTexture_KHR_texture_transform_offset,\runiforms.KHR_clearcoatNormalTexture_KHR_texture_transform_rotation,\runiforms.KHR_clearcoatNormalTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_clearcoatRoughnessUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_clearcoatRoughnessTexture_texCoord_index,\runiforms.use_KHR_clearcoatRoughnessTexture_KHR_texture_transform,\runiforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_offset,\runiforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_rotation,\runiforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_scale\r);\r\n\r\rlet KHR_sheenColorUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_sheenColorTexture_texCoord_index,\runiforms.use_KHR_sheenColorTexture_KHR_texture_transform,\runiforms.KHR_sheenColorTexture_KHR_texture_transform_offset,\runiforms.KHR_sheenColorTexture_KHR_texture_transform_rotation,\runiforms.KHR_sheenColorTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_sheenRoughnessUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_sheenRoughnessTexture_texCoord_index,\runiforms.use_KHR_sheenRoughnessTexture_KHR_texture_transform,\runiforms.KHR_sheenRoughnessTexture_KHR_texture_transform_offset,\runiforms.KHR_sheenRoughnessTexture_KHR_texture_transform_rotation,\runiforms.KHR_sheenRoughnessTexture_KHR_texture_transform_scale\r);\r\n\r\rlet KHR_specularTextureUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_specularTexture_texCoord_index,\runiforms.use_KHR_specularTexture_KHR_texture_transform,\runiforms.KHR_specularTexture_KHR_texture_transform_offset,\runiforms.KHR_specularTexture_KHR_texture_transform_rotation,\runiforms.KHR_specularTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_specularColorTextureUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_specularColorTexture_texCoord_index,\runiforms.use_KHR_specularColorTexture_KHR_texture_transform,\runiforms.KHR_specularColorTexture_KHR_texture_transform_offset,\runiforms.KHR_specularColorTexture_KHR_texture_transform_rotation,\runiforms.KHR_specularColorTexture_KHR_texture_transform_scale\r);\r\n\r\rlet KHR_iridescenceTextureUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_iridescenceTexture_texCoord_index,\runiforms.use_KHR_iridescenceTexture_KHR_texture_transform,\runiforms.KHR_iridescenceTexture_KHR_texture_transform_offset,\runiforms.KHR_iridescenceTexture_KHR_texture_transform_rotation,\runiforms.KHR_iridescenceTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_iridescenceThicknessTextureUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_iridescenceThicknessTexture_texCoord_index,\runiforms.use_KHR_iridescenceThicknessTexture_KHR_texture_transform,\runiforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_offset,\runiforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_rotation,\runiforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_scale\r);\r\n\r\rlet KHR_transmissionUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_transmissionTexture_texCoord_index,\runiforms.use_KHR_transmissionTexture_KHR_texture_transform,\runiforms.KHR_transmissionTexture_KHR_texture_transform_offset,\runiforms.KHR_transmissionTexture_KHR_texture_transform_rotation,\runiforms.KHR_transmissionTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_diffuseTransmissionUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_diffuseTransmissionTexture_texCoord_index,\runiforms.use_KHR_diffuseTransmissionTexture_KHR_texture_transform,\runiforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_offset,\runiforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_rotation,\runiforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_diffuseTransmissionColorUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_diffuseTransmissionColorTexture_texCoord_index,\runiforms.use_KHR_diffuseTransmissionColorTexture_KHR_texture_transform,\runiforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_offset,\runiforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_rotation,\runiforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_scale\r);\r\n\rlet KHR_anisotropyUV=get_transformed_uv(\rinput_uv,input_uv1,\runiforms.KHR_anisotropyTexture_texCoord_index,\runiforms.use_KHR_anisotropyTexture_KHR_texture_transform,\runiforms.KHR_anisotropyTexture_KHR_texture_transform_offset,\runiforms.KHR_anisotropyTexture_KHR_texture_transform_rotation,\runiforms.KHR_anisotropyTexture_KHR_texture_transform_scale\r);\r\n\r\n\r\r\rvar N:vec3<f32>=normalize(input_vertexNormal.xyz);\rvar backFaceYn:bool=false;\rif(u_doubleSided) {\rvar fdx:vec3<f32>=dpdx(input_vertexPosition);\rvar fdy:vec3<f32>=dpdy(input_vertexPosition);\rvar faceNormal:vec3<f32>=normalize(cross(fdy,fdx));\rif (dot(N,faceNormal) < 0.0) {\rN=-N;\rbackFaceYn=true;\r};\r}\rlet N2=N;\rif(u_useNormalTexture){\rvar targetUv=select(normalUV,1.0 - normalUV,backFaceYn);\rlet normalSamplerColor=textureSample(normalTexture,normalTextureSampler,normalUV).rgb;\rN=perturb_normal(\rN,\rinput_vertexPosition,\rtargetUv,\rvec3<f32>(normalSamplerColor.r,1.0 - normalSamplerColor.g,normalSamplerColor.b),\ru_normalScale\r);\rN=select(N,select(N,-N,backFaceYn),u_useVertexTangent);\r}else{\rN=N * u_normalScale;\r}\r\r\rlet V:vec3<f32>=normalize(u_cameraPosition - input_vertexPosition);\rlet NdotV=max(dot(N,V),0.04);\rlet VdotN=max(dot(V,N),0.0);\r\r\n\rvar visibility:f32=1.0;\rvisibility=calcDirectionalShadowVisibility(\rdirectionalShadowMap,\rdirectionalShadowMapSampler,\ru_shadowDepthTextureSize,\ru_bias,\rinputData.shadowPos\r);\r\n\rif(!receiveShadowYn){\rvisibility=1.0;\r}\r\r\n\r\rvar finalColor:vec4<f32>;\rvar ior:f32=u_KHR_materials_ior;\rvar baseColor=u_baseColorFactor;\rvar resultAlpha:f32=u_opacity * baseColor.a;\r\rbaseColor *=select(vec4<f32>(1.0),input_vertexColor_0,u_useVertexColor);\r\rif(u_useBaseColorTexture){\rlet diffuseSampleColor= (textureSample(baseColorTexture,baseColorTextureSampler,diffuseUV));\rbaseColor *=diffuseSampleColor;\rresultAlpha *=diffuseSampleColor.a;\r}\rlet albedo:vec3<f32>=baseColor.rgb;\r\n\r\rif(u_useKHR_materials_unlit){\rreturn baseColor;\r}\r\n\r\rvar occlusionParameter:f32=1;\rif(u_useOcclusionTexture){\rocclusionParameter=textureSample(packedORMTexture,packedTextureSampler,occlusionUV).r * u_occlusionStrength;\r}\r\n\r\rvar metallicParameter:f32=u_metallicFactor;\rvar roughnessParameter:f32=u_roughnessFactor;\rif (u_useMetallicRoughnessTexture) {\rlet metallicRoughnessSample=(textureSample(packedORMTexture,packedTextureSampler,metallicRoughnessUV));\rmetallicParameter=metallicRoughnessSample.b * metallicParameter;\rroughnessParameter=metallicRoughnessSample.g * roughnessParameter;\r}\rroughnessParameter=max(roughnessParameter,0.045);\rif (abs(ior - 1.0) < 0.0001) {\rroughnessParameter=0;\r}\r\n\r\rvar clearcoatParameter=u_KHR_clearcoatFactor;\rvar clearcoatRoughnessParameter=u_KHR_clearcoatRoughnessFactor;\rvar clearcoatNormal:vec3<f32>=N;\rif(u_useKHR_materials_clearcoat){\rif(clearcoatParameter==0.0){\r}else{\rif(u_useKHR_clearcoatTexture){\rlet clearcoatSample= textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatUV);\rclearcoatParameter *=clearcoatSample.r;\r}\r\n\rif(u_useKHR_clearcoatRoughnessTexture){\rlet clearcoatRoughnesstSample= textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatRoughnessUV);\rclearcoatRoughnessParameter *=clearcoatRoughnesstSample.g;\r}\r\n\rvar clearcoatNormalSampler= textureSample(KHR_clearcoatNormalTexture,baseColorTextureSampler,KHR_clearcoatNormalUV);\rif(u_useKHR_clearcoatNormalTexture){\rvar targetUv=KHR_clearcoatNormalUV;\rif(backFaceYn){\rtargetUv=1.0 - targetUv;\r}\rclearcoatNormal=clearcoatNormalSampler.rgb;\rclearcoatNormal=perturb_normal(\rN,\rinput_vertexPosition,\rtargetUv,\rclearcoatNormal,\ru_normalScale\r);\rif(u_useVertexTangent){\rif(backFaceYn ){ clearcoatNormal=-clearcoatNormal;}\r}\rclearcoatNormal=normalize(clearcoatNormal);\r}\r}\r}\r\n\r\rvar specularParameter=u_KHR_specularFactor;\rvar specularColor=u_KHR_specularColorFactor;\r\n\rif(u_useKHR_materials_specular){\rif(u_useKHR_specularColorTexture){\rlet specularColorTextureSample=textureSample(\rKHR_specularColorTexture,\rKHR_specularColorTextureSampler,\rKHR_specularColorTextureUV\r);\rspecularColor *=specularColorTextureSample.rgb;\r};\r\n\rif(u_useKHR_specularTexture){\rlet specularTextureSample=textureSample(\rKHR_specularTexture,\rKHR_specularTextureSampler,\rKHR_specularTextureUV\r);\rspecularParameter *=specularTextureSample.a;\r};\r}\r\rvar transmissionParameter:f32=u_KHR_transmissionFactor;\rif (u_useKHR_transmissionTexture) {\r\rlet transmissionSample:vec4<f32>=textureSample(\rpackedKHR_clearcoatTexture_transmission,\rpackedTextureSampler,\rKHR_transmissionUV\r);\rtransmissionParameter *=transmissionSample.b;\r}\r\rvar thicknessParameter:f32=u_KHR_thicknessFactor;\rif (u_useKHR_thicknessTexture) {\rlet thicknessSample:vec4<f32>=textureSample(\rpackedKHR_clearcoatTexture_transmission,\rpackedTextureSampler,\rKHR_transmissionUV\r);\rthicknessParameter *=thicknessSample.a;\r}\r\rvar diffuseTransmissionColor:vec3<f32>=u_KHR_diffuseTransmissionColorFactor;\rvar diffuseTransmissionParameter:f32=u_KHR_diffuseTransmissionFactor;\rif(u_useKHR_materials_diffuse_transmission){\rif(u_useKHR_diffuseTransmissionTexture){\rlet transmissionSample= textureSample(\rpackedKHR_diffuse_transmission,\rpackedTextureSampler,\rKHR_diffuseTransmissionUV\r);\rdiffuseTransmissionParameter *=transmissionSample.a;\r}\rif(u_useKHR_diffuseTransmissionColorTexture){\rlet transmissionSample= textureSample(\rpackedKHR_diffuse_transmission,\rpackedTextureSampler,\rKHR_diffuseTransmissionColorUV\r);\rdiffuseTransmissionColor *=transmissionSample.rgb;\r}\r}\r\n\r\rvar sheenColor=u_KHR_sheenColorFactor;\rvar sheenRoughnessParameter=u_KHR_sheenRoughnessFactor;\rif(u_useKHR_materials_sheen){\rif(u_useKHR_sheenColorTexture){\rlet sheenColorSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenColorUV));\rsheenColor *=sheenColorSample.rgb;\r}\rif(u_useKHR_sheenRoughnessTexture){\rlet sheenRoughnessSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenRoughnessUV));\rsheenRoughnessParameter *=sheenRoughnessSample.a;\r}\r}\r\rvar iridescenceParameter=u_KHR_iridescenceFactor;\rvar iridescenceThickness=u_KHR_iridescenceThicknessMaximum;\rif(u_useKHR_materials_iridescence){\rif (u_useKHR_iridescenceTexture) {\rlet iridescenceTextureSample:vec4<f32>=textureSample(\rpackedKHR_iridescence,\rpackedTextureSampler,\rKHR_iridescenceTextureUV\r);\riridescenceParameter *=iridescenceTextureSample.r;\r}\rif(u_useKHR_iridescenceThicknessTexture){\rlet iridescenceTextureSample:vec4<f32>=textureSample(\rpackedKHR_iridescence,\rpackedTextureSampler,\rKHR_iridescenceThicknessTextureUV\r);\riridescenceThickness= mix(u_KHR_iridescenceThicknessMinimum,u_KHR_iridescenceThicknessMaximum,iridescenceTextureSample.g);\r}\r}\r\rvar anisotropy:f32=u_KHR_anisotropyStrength;\rvar anisotropicT:vec3<f32>;\rvar anisotropicB:vec3<f32>;\r\n\rif (u_useKHR_materials_anisotropy) {\rvar anisotropicDirection:vec2<f32>=vec2<f32>(1.0,0.0);\rif(u_useKHR_anisotropyTexture){\rlet anisotropyTex=textureSample(KHR_anisotropyTexture,baseColorTextureSampler,KHR_anisotropyUV).rgb;\ranisotropicDirection=anisotropyTex.rg * 2.0 - vec2<f32>(1.0,1.0);\rvar anisotropyRotation:vec2<f32>;\rif(u_KHR_anisotropyRotation < 0.0001){\ranisotropyRotation=vec2<f32>(1.0,0.0);\r}else{\ranisotropyRotation=vec2<f32>( cos(u_KHR_anisotropyRotation),sin(u_KHR_anisotropyRotation) );\r}\r\n\rlet rotationMtx:mat2x2<f32>=mat2x2<f32>(\ranisotropyRotation.x,anisotropyRotation.y,\r-anisotropyRotation.y,anisotropyRotation.x\r);\r\n\ranisotropicDirection=rotationMtx * normalize(anisotropicDirection);\ranisotropy *=anisotropyTex.b;\r}\rvar T:vec3<f32>;\rvar B:vec3<f32>;\rif (u_useVertexTangent) {\rif (length(input_vertexTangent.xyz) > 0.0) {\rT=normalize(input_vertexTangent.xyz);\rB=normalize(cross(T,N) * input_vertexTangent.w);\r} else {\rT=vec3<f32>(1.0,0.0,0.0);\rB=normalize(cross(T,N) * 1.0);\r}\r} else {\rT=vec3<f32>(1.0,0.0,0.0);\rB=normalize(cross(T,N) * 1.0);\r}\r\rlet TBN:mat3x3<f32>=mat3x3<f32>(T,B,N);\ranisotropicT=normalize(TBN * vec3<f32>(anisotropicDirection,0.0));\ranisotropicB=normalize(cross(N,anisotropicT));\r}\r\n\r\rvar prePathBackground=vec3<f32>(0.0);\rif(u_useKHR_materials_transmission) {\rprePathBackground=calcPrePathBackground(\ru_useKHR_materials_volume,thicknessParameter * inputData.volumeScale,u_KHR_dispersion,u_KHR_attenuationDistance,u_KHR_attenuationColor,\rior,roughnessParameter,albedo,\rsystemUniforms.projectionCameraMatrix,input_vertexPosition,input_ndcPosition,\rV,N,\rrenderPath1ResultTexture,renderPath1ResultTextureSampler\r);\r}\r\rlet F0_dielectric:vec3<f32>= vec3(pow((1.0 - ior)/(1.0 + ior),2.0));\rlet F0_metal=baseColor.rgb;\rvar F0=mix(F0_dielectric,F0_metal,metallicParameter);\rif(u_useKHR_materials_iridescence){\rF0=mix(\riridescent_fresnel( 1.0,u_KHR_iridescenceIor,F0_dielectric,iridescenceThickness,iridescenceParameter,NdotV),\riridescent_fresnel( 1.0,u_KHR_iridescenceIor,F0_metal,iridescenceThickness,iridescenceParameter,NdotV),\rmetallicParameter\r);\r}\r\n\r\rvar totalDirectLighting=vec3<f32>(0.0);\rfor (var i=0u;i < u_directionalLightCount;i++) {\rtotalDirectLighting +=calcLight(\ru_directionalLights[i].color,u_directionalLights[i].intensity * visibility,\rN,V,-normalize(u_directionalLights[i].direction),\rVdotN,\rroughnessParameter,metallicParameter,albedo,\rF0,ior,\rprePathBackground,\rspecularColor,specularParameter,\ru_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor,\rtransmissionParameter,\rsheenColor,sheenRoughnessParameter,\ranisotropy,anisotropicT,anisotropicB,\rclearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal\r);\r}\r\n\r\r{\rlet clusterIndex=getClusterLightClusterIndex(inputData.position);\rlet lightOffset =clusterLightGroup.lights[clusterIndex].offset;\rlet lightCount:u32 =clusterLightGroup.lights[clusterIndex].count;\r\n\rfor (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) {\rlet i=clusterLightGroup.indices[lightOffset + lightIndex];\rlet targetLight=clusterLightList.lights[i];\rlet u_clusterLightPosition=targetLight.position;\rlet u_clusterLightRadius=targetLight.radius;\rlet u_isSpotLight=targetLight.isSpotLight;\r\n\rlet lightDistance=length(u_clusterLightPosition - input_vertexPosition);\r\n\r\n\rif (lightDistance > u_clusterLightRadius) {\rcontinue;\r}\r\n\rlet lightDir=normalize(u_clusterLightPosition - input_vertexPosition);\rlet attenuation=clamp(1.0 - (lightDistance * lightDistance)/(u_clusterLightRadius * u_clusterLightRadius),0.0,1.0);\r\n\r\n\rvar finalAttenuation=attenuation;\r\n\r\rif (u_isSpotLight > 0.0) {\rlet u_clusterLightDirection=normalize(vec3<f32>(\rtargetLight.directionX,\rtargetLight.directionY,\rtargetLight.directionZ\r));\rlet u_clusterLightInnerAngle=targetLight.innerCutoff;\rlet u_clusterLightOuterCutoff=targetLight.outerCutoff;\r\n\r\rlet lightToVertex=normalize(-lightDir);\rlet cosTheta=dot(lightToVertex,u_clusterLightDirection);\r\n\rlet cosOuter=cos(radians(u_clusterLightOuterCutoff));\rlet cosInner=cos(radians(u_clusterLightInnerAngle));\r\n\r\rif (cosTheta < cosOuter) {\rcontinue;\r}\r\n\r\rlet epsilon=cosInner - cosOuter;\rlet spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0);\r\n\rfinalAttenuation *=spotIntensity;\r}\r\n\r\rtotalDirectLighting +=calcLight(\rtargetLight.color,targetLight.intensity * finalAttenuation,\rN,V,lightDir,\rVdotN,\rroughnessParameter,metallicParameter,albedo,\rF0,ior,\rprePathBackground,\rspecularColor,specularParameter,\ru_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor,\rtransmissionParameter,\rsheenColor,sheenRoughnessParameter,\ranisotropy,anisotropicT,anisotropicB,\rclearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal\r);\r}\r}\r\n\r\rif (u_useIblTexture) {\rlet R=normalize(reflect(-V,N));\rlet NdotV=max(dot(N,V),0.04);\rlet NdotV_fresnel=max(dot(N,V),0.04);\r\n\r\n\r\n\r\rlet F_IBL_dielectric=F0_dielectric + (vec3<f32>(1.0) - F0_dielectric) * pow(1.0 - NdotV_fresnel,5.0);\rlet F_IBL_metal=F0_metal + (vec3<f32>(1.0) - F0_metal) * pow(1.0 - NdotV_fresnel,5.0);\rvar F_IBL=F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - NdotV_fresnel,5.0);\rvar F_IBL_iridescence=F_IBL;\rvar F_metal_iridescent=vec3<f32>(1.0);\rif (iridescenceParameter > 0.0) {\r\rlet F_iridescent=iridescent_fresnel(\r1.0, \ru_KHR_iridescenceIor, \rF0_dielectric, \riridescenceThickness, \riridescenceParameter, \rNdotV \r);\rlet F_metal_iridescent=iridescent_fresnel(\r1.0, \ru_KHR_iridescenceIor, \rbaseColor.rgb, \riridescenceThickness, \riridescenceParameter, \rNdotV \r);\rF_IBL=mix(F_iridescent,F_metal_iridescent,metallicParameter);\r}\r\n\rlet K=(roughnessParameter + 1.0) * (roughnessParameter + 1.0)/8.0;\rlet G=NdotV/(NdotV * (1.0 - K) + K);\rlet a2=roughnessParameter * roughnessParameter;\rlet G_smith=NdotV/(NdotV * (1.0 - a2) + a2);\r\rlet iblMipmapCount:f32=f32(textureNumLevels(ibl_environmentTexture) - 1);\r\n\r\n\r\n\r\n\rlet mipLevel=pow(roughnessParameter,0.4) * iblMipmapCount;\r\n\r\n\r\n\r\rvar reflectedColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,R,mipLevel).rgb;\r\n\r\rlet effectiveTransmission=transmissionParameter * (1.0 - metallicParameter);\r\n\r\n\rlet iblDiffuseColor=textureSampleLevel(ibl_irradianceTexture,iblTextureSampler,N,0).rgb;\rvar envIBL_DIFFUSE:vec3<f32>=albedo * iblDiffuseColor * (vec3<f32>(1.0) - F_IBL_dielectric);\r\n\r\rif (u_useKHR_materials_diffuse_transmission && diffuseTransmissionParameter > 0.0) {\r\rvar backScatteringColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,-N,mipLevel).rgb;\rlet transmittedIBL=backScatteringColor * diffuseTransmissionColor * (vec3<f32>(1.0) - F_IBL);\r\renvIBL_DIFFUSE=mix(envIBL_DIFFUSE,transmittedIBL,diffuseTransmissionParameter);\r}\r\n\r\rvar envIBL_SPECULAR:vec3<f32>;\rlet specularColorCorrected=max(vec3<f32>(0.16),specularColor);\rif (u_useKHR_materials_anisotropy) {\rvar bentNormal=cross(anisotropicB,V);\rbentNormal=normalize(cross(bentNormal,anisotropicB));\rlet temp=1.0 - anisotropy * (1.0 - roughnessParameter);\rlet tempSquared=temp * temp;\rvar a=tempSquared * tempSquared;\rbentNormal=normalize(mix(bentNormal,N,a));\rvar reflectVec=reflect(-V,bentNormal);\rreflectVec=normalize(mix(reflectVec,bentNormal,roughnessParameter * roughnessParameter));\r\n\rlet roughnessT=roughnessParameter * (1.0 + anisotropy);\rlet roughnessB=roughnessParameter * (1.0 - anisotropy);\r\n\rlet TdotR=dot(anisotropicT,reflectVec);\rlet BdotR=dot(anisotropicB,reflectVec);\r\n\rlet TdotV=dot(anisotropicT,V);\rlet BdotV=dot(anisotropicB,V);\r\n\rlet anisotropicR=normalize(reflectVec - anisotropy * (TdotR * anisotropicT - BdotR * anisotropicB));\r\n\rlet VdotN=max(0.04,dot(V,N));\rlet oneMinusVdotN=1.0 - VdotN;\rlet directionFactor=oneMinusVdotN * oneMinusVdotN * oneMinusVdotN;\r\n\rlet VdotT_abs=abs(TdotV);\rlet VdotB_abs=abs(BdotV);\rlet totalWeight=max(0.0001,VdotT_abs + VdotB_abs);\r\n\rlet weightedRoughness=(roughnessT * VdotT_abs + roughnessB * VdotB_abs)/totalWeight;\r\n\rlet anisotropyFactor=max(0.0,min(1.0,anisotropy));\rlet finalRoughness=mix( roughnessParameter,weightedRoughness,anisotropyFactor * directionFactor );\rlet anistropyMipmap=pow(finalRoughness,0.4) * iblMipmapCount;\rreflectedColor=textureSampleLevel( ibl_environmentTexture,iblTextureSampler,anisotropicR,anistropyMipmap ).rgb;\r\n\rlet a2=finalRoughness * finalRoughness;\rlet G_smith=NdotV/(NdotV * (1.0 - a2) + a2);\renvIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter;\r} else {\renvIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter;\r\n\r}\r\n\r\rvar envIBL_SPECULAR_BTDF=vec3<f32>(0.0);\rif (u_useKHR_materials_transmission) {\rvar refractedDir:vec3<f32>;\rlet eta=1.0/ior;\rif (abs(ior - 1.0) < 0.0001) {\rrefractedDir=V;\r} else {\rrefractedDir=refract(-V,-N,eta);\r}\r\n\rif(length(refractedDir) > 0.0001) {\rlet NdotT=abs(dot(N,normalize(refractedDir)));\rlet F_transmission=vec3<f32>(1.0) - F_IBL_dielectric;\r\n\rvar attenuatedBackground=prePathBackground;\rif (u_useKHR_materials_volume) {\rlet localNodeScale=inputData.localNodeScale;\rlet volumeScale=inputData.volumeScale;\r\n\rlet scaledThickness=thicknessParameter * localNodeScale;\r\rlet safeAttenuationColor=clamp(u_KHR_attenuationColor,vec3<f32>(0.0001),vec3<f32>(1.0));\rlet safeAttenuationDistance=max(u_KHR_attenuationDistance,0.0001);\r\n\r\rlet attenuationCoefficient=-log(safeAttenuationColor)/safeAttenuationDistance;\rlet cosTheta=max(NdotT,0.001);\rlet pathLength=scaledThickness/cosTheta;\rlet transmittance=exp(-attenuationCoefficient * pathLength);\rattenuatedBackground *=transmittance;\r}else{\rattenuatedBackground *=albedo;\r}\r\n\renvIBL_SPECULAR_BTDF=attenuatedBackground * F_transmission * transmissionParameter + reflectedColor * G_smith * F_IBL * NdotT;\r}\r}\r\n\r\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\rlet envIBL_DIELECTRIC=envIBL_DIFFUSE * (1.0-transmissionParameter) + envIBL_SPECULAR_BTDF + envIBL_SPECULAR;\r\n\r\rvar envIBL_SHEEN=vec3<f32>(0.0);\rvar sheen_albedo_scaling:f32=1.0;\rlet maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z));\r\n\rif (u_useKHR_materials_sheen) {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\rlet NdotV=max(dot(N,V),0.0001);\rlet sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter;\r\rlet R=reflect(-V,N);\rlet sheenLobe=sheenRoughnessParameter * sheenRoughnessParameter;\rlet sheenSamplingDir=normalize(mix(R,N,sheenLobe));\r\n\rvar sheenMipLevel=log2(sheenRoughnessParameter) * 1.2 + iblMipmapCount - 1.0;\rsheenMipLevel=clamp(sheenMipLevel,0.0,iblMipmapCount - 1.0);\rlet sheenRadiance=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,sheenSamplingDir,sheenMipLevel).rgb;\r\n\r\r\rlet F0=0.04;\rlet sheenFresnel=F0 + (1.0 - F0) * pow(1.0 - NdotV,5.0);\r\n\r\n\r\rlet E_VdotN=1.0 - pow(1.0 - NdotV,5.0);\rsheen_albedo_scaling=max(1.0 - maxSheenColor * E_VdotN,0.04);\r\n\renvIBL_SHEEN= sheenColor * sheenFresnel;\r\n\r}\r\n\r\rlet envIBL_METAL=select(reflectedColor * max(baseColor.rgb,vec3<f32>(0.04)),reflectedColor * F_IBL,iridescenceParameter>0.0);\r\n\r\n\r\rlet metallicPart=envIBL_METAL * metallicParameter * sheen_albedo_scaling;\rlet dielectricPart=envIBL_DIELECTRIC * (1.0 - metallicParameter);\rvar indirectLighting=metallicPart + dielectricPart + envIBL_SHEEN;\r\n\r\rif (clearcoatParameter > 0.0) {\r\rlet clearcoatR=reflect(-V,clearcoatNormal);\rlet clearcoatNdotV=max(dot(clearcoatNormal,V),0.04);\rlet clearcoatMipLevel=pow(clearcoatRoughnessParameter,0.4) * iblMipmapCount;\rlet clearcoatPrefilteredColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,clearcoatR,clearcoatMipLevel).rgb;\rlet clearcoatF0=F0;\rlet clearcoatF=clearcoatF0 + (vec3<f32>(1.0) - clearcoatF0) * pow(1.0 - clearcoatNdotV,5.0);\rlet clearcoatK=(clearcoatRoughnessParameter + 1.0) * (clearcoatRoughnessParameter + 1.0)/8.0;\rlet clearcoatG=clearcoatNdotV/(clearcoatNdotV * (1.0 - clearcoatK) + clearcoatK);\rlet clearcoatBRDF=clearcoatF * clearcoatG;\rlet clearcoatSpecularIBL=clearcoatPrefilteredColor * clearcoatBRDF * clearcoatParameter;\rlet clearcoatFresnel=clearcoatF;\rindirectLighting=clearcoatSpecularIBL + (vec3<f32>(1.0) - clearcoatFresnel) * indirectLighting;\r}\r\n\r\rlet environmentIntensity=1.0;\rlet surfaceColor=totalDirectLighting + indirectLighting * environmentIntensity * occlusionParameter;\r\n\r\rfinalColor=vec4<f32>(surfaceColor,resultAlpha);\r\n\r} else {\r\rlet ambientContribution=albedo * u_ambientLightColor * u_ambientLightIntensity * occlusionParameter;\rfinalColor=vec4<f32>(totalDirectLighting + ambientContribution,resultAlpha);\r}\r\n\r\rif (u_useEmissiveTexture) {\rlet emissiveSamplerColor:vec4<f32>=(textureSample(emissiveTexture,emissiveTextureSampler,emissiveUV));\rfinalColor +=vec4<f32>( emissiveSamplerColor.rgb * u_emissiveFactor * u_emissiveStrength,0);\r} else {\rfinalColor +=(vec4<f32>(u_emissiveFactor * u_emissiveStrength,0));\r}\r\n\r\rfinalColor=linear_to_srgb(finalColor);\r\n\r\rif (u_useCutOff) {\rif (resultAlpha <=u_cutOff) {\rdiscard;\r}\r}\r\n\rreturn finalColor;\r\n};\r\nfn calcPrePathBackground(\ru_useKHR_materials_volume:bool,thicknessParameter:f32,u_KHR_dispersion:f32,u_KHR_attenuationDistance:f32,u_KHR_attenuationColor:vec3<f32>,\rior:f32,roughnessParameter:f32,albedo:vec3<f32>,\rprojectionCameraMatrix:mat4x4<f32>,input_vertexPosition:vec3<f32>,input_ndcPosition:vec3<f32>,\rV:vec3<f32>,N:vec3<f32>,\rrenderPath1ResultTexture:texture_2d<f32>,renderPath1ResultTextureSampler:sampler\r\n) -> vec3<f32> {\rvar prePathBackground=vec3<f32>(0.0);\rlet transmissionMipLevel:f32=roughnessParameter * f32(textureNumLevels(renderPath1ResultTexture) - 1);\r\n\rif(u_useKHR_materials_volume){\rvar iorR:f32=ior;\rvar iorG:f32=ior;\rvar iorB:f32=ior;\rif(u_KHR_dispersion>0.0){\rlet halfSpread:f32=(ior - 1.0) * 0.025 * u_KHR_dispersion;\riorR=ior + halfSpread;\riorG=ior;\riorB=ior - halfSpread;\r}\rlet refractedVecR:vec3<f32>=refract(-V,N,1.0/iorR);\rlet refractedVecG:vec3<f32>=refract(-V,N,1.0/iorG);\rlet refractedVecB:vec3<f32>=refract(-V,N,1.0/iorB);\r\n\r\rlet worldPosR:vec3<f32>=input_vertexPosition + refractedVecR * thicknessParameter;\rlet worldPosG:vec3<f32>=input_vertexPosition + refractedVecG * thicknessParameter;\rlet worldPosB:vec3<f32>=input_vertexPosition + refractedVecB * thicknessParameter;\r\n\r\rlet clipPosR:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosR,1.0);\rlet clipPosG:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosG,1.0);\rlet clipPosB:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosB,1.0);\r\n\rlet ndcR:vec2<f32>=clipPosR.xy/clipPosR.w * 0.5 + 0.5;\rlet ndcG:vec2<f32>=clipPosG.xy/clipPosG.w * 0.5 + 0.5;\rlet ndcB:vec2<f32>=clipPosB.xy/clipPosB.w * 0.5 + 0.5;\r\n\r\rlet finalUV_R:vec2<f32>=vec2<f32>(ndcR.x,1.0 - ndcR.y);\rlet finalUV_G:vec2<f32>=vec2<f32>(ndcG.x,1.0 - ndcG.y);\rlet finalUV_B:vec2<f32>=vec2<f32>(ndcB.x,1.0 - ndcB.y);\r\n\r\rprePathBackground.r=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_R,transmissionMipLevel).r;\rprePathBackground.g=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_G,transmissionMipLevel).g;\rprePathBackground.b=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_B,transmissionMipLevel).b;\r\n\r} else {\rlet refractedVec:vec3<f32>=refract(-V,N,1.0/ior);\rlet worldPos:vec3<f32>=input_vertexPosition + refractedVec * thicknessParameter;\rlet clipPos:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPos,1.0);\rlet ndc:vec2<f32>=clipPos.xy/clipPos.w * 0.5 + 0.5;\rlet finalUV:vec2<f32>=vec2<f32>(ndc.x,1.0 - ndc.y);\rprePathBackground=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV,transmissionMipLevel).rgb;\r}\r\rprePathBackground *=albedo;\rreturn prePathBackground;\r\n}\r\nfn calcLight(\rlightColor:vec3<f32>,lightIntensity:f32,\rN:vec3<f32>,V:vec3<f32>,L:vec3<f32>,\rVdotN:f32,\rroughnessParameter:f32,metallicParameter:f32,albedo:vec3<f32>,\rF0:vec3<f32>,ior:f32,\r\n\rprePathBackground:vec3<f32>,\rspecularColor:vec3<f32>,specularParameter:f32,\ru_useKHR_materials_diffuse_transmission:bool,diffuseTransmissionParameter:f32,diffuseTransmissionColor:vec3<f32>,\rtransmissionParameter:f32,\rsheenColor:vec3<f32>,sheenRoughnessParameter:f32,\ranisotropy:f32,anisotropicT:vec3<f32>,anisotropicB:vec3<f32>,\rclearcoatParameter:f32,clearcoatRoughnessParameter:f32,clearcoatNormal:vec3<f32>\r\n) -> vec3<f32>{\rlet dLight=lightColor * lightIntensity;\r\n\rlet NdotL=max(dot(N,L),0.04);\rlet NdotV=max(dot(N,V),0.04);\rlet H=normalize(L + V);\rlet LdotH=max(dot(L,H),0.0);\rlet NdotH=max(dot(N,H),0.0);\rlet VdotH=max(dot(V,H),0.0);\r\n\r\n\rvar DIFFUSE_BRDF:vec3<f32>=diffuse_brdf_disney(NdotL,NdotV,LdotH,roughnessParameter,albedo);\rif(u_useKHR_materials_diffuse_transmission && diffuseTransmissionParameter > 0.0){\rDIFFUSE_BRDF=mix(DIFFUSE_BRDF,diffuse_btdf(N,L,diffuseTransmissionColor),diffuseTransmissionParameter);\r}\r\n\rvar SPECULAR_BRDF:vec3<f32>;\rif (anisotropy > 0.0) {\rvar TdotL=dot(anisotropicT,L);\rvar TdotV=dot(anisotropicT,V);\rvar BdotL=dot(anisotropicB,L);\rvar TdotH=dot(anisotropicT,H);\rvar BdotH=dot(anisotropicB,H);\rvar BdotV=dot(anisotropicB,V);\rSPECULAR_BRDF= BRDF_specularAnisotropicGGX(\ralbedo,\rvec3<f32>(1.0),\rroughnessParameter * roughnessParameter,\rVdotH,NdotL,NdotV,NdotH,BdotV,TdotV,TdotL,BdotL,TdotH,BdotH,\ranisotropy\r);\r}else{\rSPECULAR_BRDF=specular_brdf( albedo,roughnessParameter,NdotH,NdotV,NdotL,LdotH);\r}\rlet METAL_BRDF=conductor_fresnel( albedo,SPECULAR_BRDF,VdotH);;\r\n\rlet transmissionWeight=transmissionParameter * (vec3<f32>(1.0) - F0);\rvar SPECULAR_BTDF= vec3<f32>(0.0);\rif(transmissionParameter > 0.0){\rSPECULAR_BTDF=specular_btdf( NdotV,NdotL,NdotH,VdotH,LdotH,roughnessParameter,albedo,ior);\r}\r\rlet DIELECTRIC_BRDF=fresnel_mix(\rF0,\rspecularParameter,\rmix(DIFFUSE_BRDF,SPECULAR_BTDF,transmissionParameter),\rSPECULAR_BRDF,\rVdotH\r);\r\n\r\n\rvar SHEEN_BRDF:vec3<f32>=vec3<f32>(0.0);\rvar sheen_albedo_scaling:f32=1.0;\rlet maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z));\rif(sheenRoughnessParameter > 0.0 && maxSheenColor > 0.001 && dot(N,V) > 0) {\rlet NdotV=dot(N,V);\rlet sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter;\rlet invR=1/sheenRoughnessAlpha;\rlet cos2h=NdotH * NdotH;\rlet sin2h=1 - cos2h;\rlet sheenDistribution=(2 + invR) * pow(sin2h,invR * 0.5)/(2 * pi);\rlet sheen_visibility= 1.0/((1.0 + lambda_sheen(NdotV,sheenRoughnessAlpha) + lambda_sheen(NdotL,sheenRoughnessAlpha)) * (4.0 * NdotV * NdotL));\rlet LdotN=max(dot(L,N),0.04);\rlet E_LdotN=1.0 - pow(1.0 - LdotN,5.0);\rlet E_VdotN=1.0 - pow(1.0 - VdotN,5.0);\r\n\r\n\rsheen_albedo_scaling=max(min(1.0 - maxSheenColor * E_VdotN,1.0 - maxSheenColor * E_LdotN),0.04);\r\n\rSHEEN_BRDF=sheenColor * sheenDistribution * sheen_visibility;\r}\r\n\r\r\rlet metallicPart=METAL_BRDF * metallicParameter * sheen_albedo_scaling ;\rlet dielectricPart=DIELECTRIC_BRDF * sheen_albedo_scaling;\r\n\r\n\rlet sheenPart=SHEEN_BRDF;\rvar directLighting=(metallicPart + dielectricPart + sheenPart);\rif(transmissionParameter > 0.0) {\r\r\rdirectLighting=mix(directLighting,prePathBackground,transmissionWeight);\r}\r\rif(clearcoatParameter > 0.0){\rlet clearcoatNdotL=max(dot(clearcoatNormal,L),0.04);\rlet clearcoatNdotV=max(dot(clearcoatNormal,V),0.04);\rlet clearcoatNdotH=max(dot(clearcoatNormal,H),0.0);\rlet CLEARCOAT_BRDF=specular_brdf( F0,clearcoatRoughnessParameter,clearcoatNdotH,clearcoatNdotV,clearcoatNdotL,LdotH);\rdirectLighting=fresnel_coat(clearcoatNdotV,ior,clearcoatParameter,directLighting,CLEARCOAT_BRDF);\r}\rvar lightDirection:f32;\rif (u_useKHR_materials_diffuse_transmission && diffuseTransmissionParameter > 0.0) {\rlightDirection=mix(abs(dot(N,L)),1.0,diffuseTransmissionParameter);\r} else {\r\rlightDirection=NdotL;\r}\r\n\rlet lightContribution=directLighting * dLight * lightDirection;\r\rreturn lightContribution;\r\n}\r\nconst pi:f32=3.14159265359;\r\nfn BRDF_specularAnisotropicGGX( f0:vec3<f32>,f90:vec3<f32>,alphaRoughness:f32,VdotH:f32,NdotL:f32,NdotV:f32,NdotH:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,TdotH:f32,BdotH:f32,anisotropy:f32 ) -> vec3<f32> {\rvar at=mix(alphaRoughness,1.0,anisotropy * anisotropy);\rvar ab=alphaRoughness;\rvar F:vec3<f32>=fresnel_schlick(VdotH,f0);\rvar V:f32=V_GGX_anisotropic(NdotL,NdotV,BdotV,TdotV,TdotL,BdotL,at,ab);\rvar D:f32=D_GGX_anisotropic(NdotH,TdotH,BdotH,at,ab);\rreturn F * (V * D);\r\n}\r\nfn D_GGX_anisotropic( NdotH:f32,TdotH:f32,BdotH:f32,at:f32,ab:f32 ) -> f32 {\rlet a2:f32=at * ab;\rlet f:vec3<f32>=vec3<f32>(ab * TdotH,at * BdotH,a2 * NdotH);\rlet denominator:f32=dot(f,f);\r\n\r\n\r\n\rlet w2:f32=a2/denominator;\rreturn a2 * w2 * w2/pi;\r\n}\r\nfn V_GGX_anisotropic( NdotL:f32,NdotV:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,at:f32,ab:f32 ) -> f32 {\rlet GGXV=NdotL * length(vec3<f32>(at * TdotV,ab * BdotV,NdotV));\rlet GGXL=NdotV * length(vec3<f32>(at * TdotL,ab * BdotL,NdotL));\rlet v=0.5/(GGXV + GGXL);\rreturn clamp(v,0.0,1.0);\r\n}\r\nfn iridescent_fresnel(outside_ior:f32,iridescence_ior:f32,base_f0:vec3<f32>,\riridescence_thickness:f32,iridescence_factor:f32,cos_theta1:f32) -> vec3<f32> {\r\rif (iridescence_thickness <=0.0 || iridescence_factor <=0.0) {\rreturn base_f0;\r}\r\n\r\rlet cos_theta1_abs=abs(cos_theta1);\r\n\r\r\r\rlet min_ior=1.01;\rlet safe_iridescence_ior=max(iridescence_ior,min_ior);\r\n\r\rlet sin_theta1=sqrt(max(0.0,1.0 - cos_theta1_abs * cos_theta1_abs));\rlet sin_theta2=(outside_ior/safe_iridescence_ior) * sin_theta1;\r\n\r\rif (sin_theta2 >=1.0) {\rlet total_reflection=vec3<f32>(1.0);\rreturn base_f0 + iridescence_factor * (total_reflection - base_f0);\r\n\r}\r\n\rlet cos_theta2=sqrt(max(0.0,1.0 - sin_theta2 * sin_theta2));\r\n\r\rlet wavelengths=vec3<f32>(650.0,510.0,475.0);\r\n\r\r\rlet min_thickness=10.0;\rlet effective_thickness=max(iridescence_thickness,min_thickness);\r\n\r\r\rlet ior_scale=max(1.0,1.5 - 0.5 * (safe_iridescence_ior/1.5));\rlet optical_thickness=2.0 * effective_thickness * safe_iridescence_ior * cos_theta2 * ior_scale;\r\n\r\rlet phase=(2.0 * 3.14159265359 * optical_thickness)/wavelengths;\r\n\r\r\rlet r12_s=((outside_ior * cos_theta1_abs) - (safe_iridescence_ior * cos_theta2))/\r((outside_ior * cos_theta1_abs) + (safe_iridescence_ior * cos_theta2));\r\n\rlet r12_p=((safe_iridescence_ior * cos_theta1_abs) - (outside_ior * cos_theta2))/\r((safe_iridescence_ior * cos_theta1_abs) + (outside_ior * cos_theta2));\r\n\rlet t12_s=2.0 * outside_ior * cos_theta1_abs/\r((outside_ior * cos_theta1_abs) + (safe_iridescence_ior * cos_theta2));\r\n\rlet t12_p=2.0 * outside_ior * cos_theta1_abs/\r((safe_iridescence_ior * cos_theta1_abs) + (outside_ior * cos_theta2));\r\n\r\r\rlet n3=vec3<f32>(\r(1.0 + sqrt(clamp(base_f0.r,0.01,0.99)))/(1.0 - sqrt(clamp(base_f0.r,0.01,0.99))),\r(1.0 + sqrt(clamp(base_f0.g,0.01,0.99)))/(1.0 - sqrt(clamp(base_f0.g,0.01,0.99))),\r(1.0 + sqrt(clamp(base_f0.b,0.01,0.99)))/(1.0 - sqrt(clamp(base_f0.b,0.01,0.99)))\r);\r\n\r\rlet safe_n3=max(n3,vec3<f32>(1.2));\r\n\rlet r23_s=vec3<f32>(\r((safe_iridescence_ior * cos_theta2) - (safe_n3.r * cos_theta1_abs))/\r((safe_iridescence_ior * cos_theta2) + (safe_n3.r * cos_theta1_abs)),\r((safe_iridescence_ior * cos_theta2) - (safe_n3.g * cos_theta1_abs))/\r((safe_iridescence_ior * cos_theta2) + (safe_n3.g * cos_theta1_abs)),\r((safe_iridescence_ior * cos_theta2) - (safe_n3.b * cos_theta1_abs))/\r((safe_iridescence_ior * cos_theta2) + (safe_n3.b * cos_theta1_abs))\r);\r\n\rlet r23_p=vec3<f32>(\r((safe_n3.r * cos_theta2) - (safe_iridescence_ior * cos_theta1_abs))/\r((safe_n3.r * cos_theta2) + (safe_iridescence_ior * cos_theta1_abs)),\r((safe_n3.g * cos_theta2) - (safe_iridescence_ior * cos_theta1_abs))/\r((safe_n3.g * cos_theta2) + (safe_iridescence_ior * cos_theta1_abs)),\r((safe_n3.b * cos_theta2) - (safe_iridescence_ior * cos_theta1_abs))/\r((safe_n3.b * cos_theta2) + (safe_iridescence_ior * cos_theta1_abs))\r);\r\n\r\rlet cos_phase=vec3<f32>(cos(phase.r),cos(phase.g),cos(phase.b));\rlet sin_phase=vec3<f32>(sin(phase.r),sin(phase.g),sin(phase.b));\r\n\r\r\rlet numerator_s_real=vec3<f32>(\rr12_s + r23_s.r * cos_phase.r,\rr12_s + r23_s.g * cos_phase.g,\rr12_s + r23_s.b * cos_phase.b\r);\r\n\rlet numerator_s_imag=vec3<f32>(\rr23_s.r * sin_phase.r,\rr23_s.g * sin_phase.g,\rr23_s.b * sin_phase.b\r);\r\n\r\rlet denominator_s_real=vec3<f32>(\r1.0 + r12_s * r23_s.r * cos_phase.r,\r1.0 + r12_s * r23_s.g * cos_phase.g,\r1.0 + r12_s * r23_s.b * cos_phase.b\r);\r\n\rlet denominator_s_imag=vec3<f32>(\rr12_s * r23_s.r * sin_phase.r,\rr12_s * r23_s.g * sin_phase.g,\rr12_s * r23_s.b * sin_phase.b\r);\r\n\r\r\rlet denom_s_squared=vec3<f32>(\rdenominator_s_real.r * denominator_s_real.r + denominator_s_imag.r * denominator_s_imag.r,\rdenominator_s_real.g * denominator_s_real.g + denominator_s_imag.g * denominator_s_imag.g,\rdenominator_s_real.b * denominator_s_real.b + denominator_s_imag.b * denominator_s_imag.b\r);\r\n\r\rlet epsilon=0.001;\r\n\r\rlet r_s_real=vec3<f32>(\r(numerator_s_real.r * denominator_s_real.r + numerator_s_imag.r * denominator_s_imag.r)/\r(denom_s_squared.r + epsilon),\r(numerator_s_real.g * denominator_s_real.g + numerator_s_imag.g * denominator_s_imag.g)/\r(denom_s_squared.g + epsilon),\r(numerator_s_real.b * denominator_s_real.b + numerator_s_imag.b * denominator_s_imag.b)/\r(denom_s_squared.b + epsilon)\r);\r\n\r\rlet r_s_imag=vec3<f32>(\r(numerator_s_imag.r * denominator_s_real.r - numerator_s_real.r * denominator_s_imag.r)/\r(denom_s_squared.r + epsilon),\r(numerator_s_imag.g * denominator_s_real.g - numerator_s_real.g * denominator_s_imag.g)/\r(denom_s_squared.g + epsilon),\r(numerator_s_imag.b * denominator_s_real.b - numerator_s_real.b * denominator_s_imag.b)/\r(denom_s_squared.b + epsilon)\r);\r\n\r\r\rlet numerator_p_real=vec3<f32>(\rr12_p + r23_p.r * cos_phase.r,\rr12_p + r23_p.g * cos_phase.g,\rr12_p + r23_p.b * cos_phase.b\r);\r\n\rlet numerator_p_imag=vec3<f32>(\rr23_p.r * sin_phase.r,\rr23_p.g * sin_phase.g,\rr23_p.b * sin_phase.b\r);\r\n\r\rlet denominator_p_real=vec3<f32>(\r1.0 + r12_p * r23_p.r * cos_phase.r,\r1.0 + r12_p * r23_p.g * cos_phase.g,\r1.0 + r12_p * r23_p.b * cos_phase.b\r);\r\n\rlet denominator_p_imag=vec3<f32>(\rr12_p * r23_p.r * sin_phase.r,\rr12_p * r23_p.g * sin_phase.g,\rr12_p * r23_p.b * sin_phase.b\r);\r\n\r\rlet denom_p_squared=vec3<f32>(\rdenominator_p_real.r * denominator_p_real.r + denominator_p_imag.r * denominator_p_imag.r,\rdenominator_p_real.g * denominator_p_real.g + denominator_p_imag.g * denominator_p_imag.g,\rdenominator_p_real.b * denominator_p_real.b + denominator_p_imag.b * denominator_p_imag.b\r);\r\n\r\rlet r_p_real=vec3<f32>(\r(numerator_p_real.r * denominator_p_real.r + numerator_p_imag.r * denominator_p_imag.r)/\r(denom_p_squared.r + epsilon),\r(numerator_p_real.g * denominator_p_real.g + numerator_p_imag.g * denominator_p_imag.g)/\r(denom_p_squared.g + epsilon),\r(numerator_p_real.b * denominator_p_real.b + numerator_p_imag.b * denominator_p_imag.b)/\r(denom_p_squared.b + epsilon)\r);\r\n\r\rlet r_p_imag=vec3<f32>(\r(numerator_p_imag.r * denominator_p_real.r - numerator_p_real.r * denominator_p_imag.r)/\r(denom_p_squared.r + epsilon),\r(numerator_p_imag.g * denominator_p_real.g - numerator_p_real.g * denominator_p_imag.g)/\r(denom_p_squared.g + epsilon),\r(numerator_p_imag.b * denominator_p_real.b - numerator_p_real.b * denominator_p_imag.b)/\r(denom_p_squared.b + epsilon)\r);\r\n\r\rlet Rs=vec3<f32>(\rr_s_real.r * r_s_real.r + r_s_imag.r * r_s_imag.r,\rr_s_real.g * r_s_real.g + r_s_imag.g * r_s_imag.g,\rr_s_real.b * r_s_real.b + r_s_imag.b * r_s_imag.b\r);\r\n\rlet Rp=vec3<f32>(\rr_p_real.r * r_p_real.r + r_p_imag.r * r_p_imag.r,\rr_p_real.g * r_p_real.g + r_p_imag.g * r_p_imag.g,\rr_p_real.b * r_p_real.b + r_p_imag.b * r_p_imag.b\r);\r\n\r\rlet reflectance=0.5 * (Rs + Rp);\r\n\r\r\rlet ior_influence=smoothstep(1.0,2.0,safe_iridescence_ior);\rlet enhanced_reflectance=mix(\r\rpow(reflectance,vec3<f32>(0.8)) * 1.2,\r\rreflectance,\rior_influence\r);\r\n\r\rlet clamped_reflectance=clamp(enhanced_reflectance,vec3<f32>(0.0),vec3<f32>(1.0));\r\n\r\rreturn mix(base_f0,clamped_reflectance,iridescence_factor);\r\n}\r\nfn specular_btdf(\rNdotV:f32,\rNdotL:f32,\rNdotH:f32,\rVdotH:f32,\rLdotH:f32,\rroughness:f32,\rF0:vec3<f32>,\rior:f32\r\n) -> vec3<f32> {\rlet eta:f32=1.0/ior;\r\n\r\r\rlet D_rough:f32=distribution_ggx(NdotH,roughness * roughness);\r\n\r\r\rlet t:f32=clamp((ior - 1.0) * 100.0,0.0,1.0);\rlet D:f32=mix(1.0,D_rough,t);\r\n\r\rlet G:f32=min(1.0,min((2.0 * NdotH * NdotV)/VdotH,(2.0 * NdotH * NdotL)/VdotH));\r\n\r\rlet F:vec3<f32>=fresnel_schlick(VdotH,F0);\r\n\rlet denom:f32=(eta * VdotH + LdotH) * (eta * VdotH + LdotH);\r\n\r\rlet btdf:vec3<f32>=\r(vec3<f32>(1.0) - F) * \rabs(VdotH * LdotH) * \r(eta * eta) * \rD * \rG/ \r(NdotV * denom + 0.001);\r\n\rreturn btdf;\r\n}\r\n\r\nfn lambda_sheen_calc_l(x:f32,alpha_g:f32) -> f32 {\rlet one_minus_alpha_sq=(1.0 - alpha_g) * (1.0 - alpha_g);\r\n\rlet a=mix(21.5473,25.3245,one_minus_alpha_sq);\rlet b=mix(3.82987,3.32435,one_minus_alpha_sq);\rlet c=mix(0.19823,0.16801,one_minus_alpha_sq);\rlet d=mix(-1.97760,-1.27393,one_minus_alpha_sq);\rlet e=mix(-4.32054,-4.85967,one_minus_alpha_sq);\r\n\rreturn a/(1.0 + b * pow(x,c)) + d * x + e;\r\n}\r\nfn lambda_sheen(cos_theta:f32,alpha_g:f32) -> f32 {\rif (abs(cos_theta) < 0.5) {\rreturn exp(lambda_sheen_calc_l(cos_theta,alpha_g));\r} else {\rreturn exp(2.0 * lambda_sheen_calc_l(0.5,alpha_g) - lambda_sheen_calc_l(1.0 - cos_theta,alpha_g));\r}\r\n}\r\n\r\nfn fresnel_coat(NdotV:f32,ior:f32,weight:f32,base:vec3<f32>,layer:vec3<f32>) -> vec3<f32> {\rlet f0:f32=pow((1.0 - ior)/(1.0 + ior),2.0);\rlet fr:f32=f0 + (1.0 - f0) * pow(1.0 - abs(NdotV),5.0);\rreturn mix(base,layer,weight * fr);\r\n}\r\nfn conductor_fresnel(F0:vec3<f32>,bsdf:vec3<f32>,VdotH:f32) -> vec3<f32> {\rlet fresnel=F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - abs(VdotH),5.0);\rreturn bsdf * fresnel;\r\n}\r\nfn fresnel_mix(\rF0:vec3<f32>,\rweight:f32,\rbase:vec3<f32>,\rlayer:vec3<f32>,\rVdotH:f32\r\n) -> vec3<f32> {\rvar f0=F0;\rf0=min(f0,vec3<f32>(1.0));\rlet fr=f0 + (1.0 - f0) * pow(1.0 - abs(VdotH),5.0);\rreturn (1 - weight * max(max(fr.x,fr.y),fr.z)) * base + weight * fr * layer;\r\n}\r\nfn fresnel_mix_ibl(\rF0:vec3<f32>,\rweight:f32,\rbase:vec3<f32>,\rlayer:vec3<f32>,\rNdotV:f32\r\n) -> vec3<f32> {\rvar f0=F0;\rf0=min(f0,vec3<f32>(1.0));\r\rlet fr=f0 + (1.0 - f0) * pow(1.0 - max(NdotV,0.0),5.0);\r\n\r\rreturn base * (1.0 - fr * weight) + layer * fr * weight;\r\n}\r\n\r\nfn diffuse_brdf_disney(NdotL:f32,NdotV:f32,LdotH:f32,roughness:f32,albedo:vec3<f32>) -> vec3<f32> {\rif (NdotL <=0.0) { return vec3<f32>(0.0);}\r\n\r\rlet energyBias=mix(0.0,0.5,roughness);\rlet energyFactor=mix(1.0,1.0/1.51,roughness);\rlet fd90=energyBias + 2.0 * LdotH * LdotH * roughness;\rlet f0=1.0;\rlet lightScatter=f0 + (fd90 - f0) * pow(1.0 - NdotL,5.0);\rlet viewScatter=f0 + (fd90 - f0) * pow(1.0 - NdotV,5.0);\r\n\rreturn albedo * NdotL * lightScatter * viewScatter * energyFactor/pi;\r\n}\r\n\r\nfn diffuse_brdf(NdotL:f32,albedo:vec3<f32>) -> vec3<f32> {\rreturn albedo * NdotL/pi;\r\n}\r\nfn diffuse_btdf(N:vec3<f32>,L:vec3<f32>,Albedo:vec3<f32>) -> vec3<f32> {\r\rlet cos_theta=max(-dot(N,L),0.0);\rreturn Albedo * cos_theta/pi;\r\n}\r\n\r\nfn specular_brdf(\rF0:vec3<f32>,\rroughness:f32,\rNdotH:f32,\rNdotV:f32,\rNdotL:f32,\rLdotH:f32\r\n) -> vec3<f32> {\r\n\r\rlet D=distribution_ggx(NdotH,roughness);\r\n\r\rlet G=geometry_smith(NdotV,NdotL,roughness);\r\n\r\rlet F=fresnel_schlick(LdotH,F0);\r\n\r\rlet numerator=D * G * F;\rlet denominator=4.0 * NdotV * NdotL + 0.04;\r\n\rreturn (numerator/denominator);\r\n}\r\n\r\n\r\nfn distribution_ggx(NdotH:f32,roughness:f32) -> f32 {\rlet alpha=roughness * roughness;\rlet alpha2=alpha * alpha;\rlet NdotH2=NdotH * NdotH;\r\n\rlet nom=alpha2;\rlet denom=(NdotH2 * (alpha2 - 1.0) + 1.0);\rlet denom_squared=denom * denom;\r\n\rreturn nom/(denom_squared * 3.14159265359);\r\n}\r\n\r\n\r\nfn geometry_smith(NdotV:f32,NdotL:f32,roughness:f32) -> f32 {\rlet alpha=roughness * roughness;\rlet k=alpha/2.0; \r\n\rlet ggx1=NdotV/(NdotV * (1.0 - k) + k);\rlet ggx2=NdotL/(NdotL * (1.0 - k) + k);\r\n\rreturn ggx1 * ggx2;\r\n}\r\n\r\n\r\nfn fresnel_schlick(cosTheta:f32,F0:vec3<f32>) -> vec3<f32> {\rreturn F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - cosTheta,5.0);\r\n}\r\n\r\nfn get_transformed_uv(\rinput_uv:vec2<f32>,\rinput_uv1:vec2<f32>,\rtexCoord_index:u32,\ruse_transform:u32,\rtransform_offset:vec2<f32>,\rtransform_rotation:f32,\rtransform_scale:vec2<f32>\r\n) -> vec2<f32> {\r\rvar result_uv=select(input_uv,input_uv1,texCoord_index==1);\r\n\r\rif (use_transform==1) {\r\rlet translation=mat3x3<f32>(\r1.0,0.0,0.0,\r0.0,1.0,0.0,\rtransform_offset.x,transform_offset.y,1.0\r);\r\n\rlet cos_rot=cos(transform_rotation);\rlet sin_rot=sin(transform_rotation);\rlet rotation_matrix=mat3x3<f32>(\rcos_rot,-sin_rot,0.0,\rsin_rot,cos_rot,0.0,\r0.0,0.0,1.0\r);\r\n\rlet scale_matrix=mat3x3<f32>(\rtransform_scale.x,0.0,0.0,\r0.0,transform_scale.y,0.0,\r0.0,0.0,1.0\r);\r\n\rlet result_matrix=translation * rotation_matrix * scale_matrix;\rresult_uv=(result_matrix * vec3<f32>(result_uv,1.0)).xy;\r}\r\n\rreturn result_uv;\r\n}\r\n\r\nfn linear_to_srgb(linearColor:vec4<f32>) -> vec4<f32> {\rlet cutoff=vec4<f32>(0.0031308);\rlet higher=vec4<f32>(1.055) * pow(linearColor,vec4<f32>(1.0/2.4)) - vec4<f32>(0.055);\rlet lower=linearColor * vec4<f32>(12.92);\r\n\rreturn vec4<f32>(\rmix(higher.r,lower.r,step(linearColor.r,cutoff.r)),\rmix(higher.g,lower.g,step(linearColor.g,cutoff.g)),\rmix(higher.b,lower.b,step(linearColor.b,cutoff.b)),\rlinearColor.a \r);\r\n}\r\n"));class PBRMaterial extends ABitmapBaseMaterial{#gt;#xt;#_t;#vt;#bt;constructor(i){super(i,"PBR_MATERIAL",Kn,2),this.initGPURenderInfos(),this.#gt=new PackedTexture(i),this.#bt=new PackedTexture(i),this.#xt=new PackedTexture(i),this.#_t=new PackedTexture(i),this.#vt=new PackedTexture(i),this.__packingList=[()=>{this.setupPackORMTexture(),this.setupPackedKHR_clearcoatTexture_transmission(),this.setupPackedKHR_diffuse_transmission(),this.setupPackedKHR_sheen(),this.setupPackedKHR_iridescence()}]}get packedKHR_clearcoatTexture_transmission(){return this.#bt}get packedKHR_iridescence(){return this.#vt}get packedORMTexture(){return this.#gt}get packedKHR_sheen(){return this.#_t}get packedKHR_diffuse_transmission(){return this.#xt}async setupPackORMTexture(){const i=Math.max(this.occlusionTexture?.gpuTexture.width||1,this.metallicRoughnessTexture?.gpuTexture.width||1),m=Math.max(this.occlusionTexture?.gpuTexture.height||1,this.metallicRoughnessTexture?.gpuTexture.height||1);await this.#gt.packing({r:this.occlusionTexture?.gpuTexture,g:this.metallicRoughnessTexture?.gpuTexture,b:this.metallicRoughnessTexture?.gpuTexture},i,m,"packedORMTexture")}async setupPackedKHR_clearcoatTexture_transmission(){const i=Math.max(this.KHR_clearcoatTexture?.gpuTexture.width||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture.width||1),m=Math.max(this.KHR_clearcoatTexture?.gpuTexture.height||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture.height||1),g=Math.max(this.KHR_transmissionTexture?.gpuTexture.width||1,this.KHR_thicknessTexture?.gpuTexture.width||1),_=Math.max(this.KHR_transmissionTexture?.gpuTexture.height||1,this.KHR_thicknessTexture?.gpuTexture.height||1),b=Math.max(i,g),y=Math.max(m,_);await this.#bt.packing({r:this.KHR_clearcoatTexture?.gpuTexture,g:this.KHR_clearcoatRoughnessTexture?.gpuTexture,b:this.KHR_transmissionTexture?.gpuTexture,a:this.KHR_thicknessTexture?.gpuTexture},b,y,"packedKHR_clearcoatTexture_transmission",{b:"r",a:"g"})}async setupPackedKHR_diffuse_transmission(){const i=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture.width||1,this.KHR_diffuseTransmissionTexture?.gpuTexture.width||1),m=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture.height||1,this.KHR_diffuseTransmissionTexture?.gpuTexture.height||1);await this.#xt.packing({r:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,g:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,b:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,a:this.KHR_diffuseTransmissionTexture?.gpuTexture},i,m,"packedKHR_diffuse_transmission")}async setupPackedKHR_sheen(){const i=Math.max(this.KHR_sheenColorTexture?.gpuTexture.width||1,this.KHR_sheenRoughnessTexture?.gpuTexture.width||1),m=Math.max(this.KHR_sheenColorTexture?.gpuTexture.height||1,this.KHR_sheenRoughnessTexture?.gpuTexture.height||1);await this.#_t.packing({r:this.KHR_sheenColorTexture?.gpuTexture,g:this.KHR_sheenColorTexture?.gpuTexture,b:this.KHR_sheenColorTexture?.gpuTexture,a:this.KHR_sheenRoughnessTexture?.gpuTexture},i,m,"packedKHR_sheen")}async setupPackedKHR_iridescence(){const i=Math.max(this.KHR_iridescenceTexture?.gpuTexture.width||1,this.KHR_iridescenceThicknessTexture?.gpuTexture.width||1),m=Math.max(this.KHR_iridescenceTexture?.gpuTexture.height||1,this.KHR_iridescenceThicknessTexture?.gpuTexture.height||1);await this.#vt.packing({r:this.KHR_iridescenceTexture?.gpuTexture,g:this.KHR_iridescenceThicknessTexture?.gpuTexture},i,m,"packedKHR_iridescence")}}dn.defineByPreset(PBRMaterial,[dn.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,dn.PRESET_POSITIVE_NUMBER.NORMAL_SCALE]);zn.forEach(i=>{const{extensionName:m,textureList:g,useSampler:_}=i,{positiveNumberList:b,vec3List:y,vec4List:T}=i;m&&dn.defineBoolean(PBRMaterial,[`use${m}`]),((i,m)=>{i?.forEach(i=>{dn.defineBoolean(PBRMaterial,[`use_${i}`]),dn.definePositiveNumber(PBRMaterial,[[`${i}_KHR_texture_transform_rotation`,0]]),dn.defineBoolean(PBRMaterial,[`use_${i}_KHR_texture_transform`]),dn.defineVec2(PBRMaterial,[`${i}_KHR_texture_transform_offset`,[`${i}_KHR_texture_transform_scale`,[1,1]]]),dn.defineUint(PBRMaterial,[`${i}_texCoord_index`]),dn.defineTexture(PBRMaterial,[i]),m&&dn.defineSampler(PBRMaterial,[`${i}Sampler`])})})(g,!_),b?.forEach(i=>{dn.definePositiveNumber(PBRMaterial,[i])}),y?.forEach(i=>{dn.defineVec3(PBRMaterial,[i])}),T?.forEach(i=>{dn.defineVec4(PBRMaterial,[i])})}),dn.definePositiveNumber(PBRMaterial,[["cutOff",0],["KHR_materials_ior",1.5],["KHR_dispersion",0]]),dn.defineUint(PBRMaterial,["alphaBlend"]),dn.defineBoolean(PBRMaterial,["doubleSided","useCutOff","useVertexColor","useVertexTangent","useKHR_materials_unlit"]),Object.freeze(PBRMaterial);var qn="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include drawDirectionalShadowDepth;\r\n#redgpu_include calcDisplacements;\r\nstruct VertexUniforms {\rpickingId:u32,\r\n\t modelMatrix:mat4x4<f32>,\r\n\t normalModelMatrix:mat4x4<f32>,\r\n\t useDisplacementTexture:u32,\r\n\t displacementScale:f32,\r\n\t receiveShadow:f32,\rcombinedOpacity:f32,\r\n};\r\nconst maxDistance:f32=1000.0;\r\nconst maxMipLevel:f32=10.0;\r\n\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n@group(1) @binding(1) var displacementTextureSampler:sampler;\r\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(14) receiveShadow:f32,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn main( inputData:InputData ) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_resolution=systemUniforms.resolution;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\rlet u_displacementScale=vertexUniforms.displacementScale;\rlet u_useDisplacementTexture=vertexUniforms.useDisplacementTexture==1u;\rlet u_receiveShadow=vertexUniforms.receiveShadow;\r\rlet u_directionalLightCount=systemUniforms.directionalLightCount;\rlet u_directionalLights=systemUniforms.directionalLights;\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\rposition=u_modelMatrix * vec4<f32>(input_position,1.0);\r\n\rif (u_useDisplacementTexture) {\rlet distance=distance(position.xyz,u_cameraPosition);\rlet mipLevel=(distance/maxDistance) * maxMipLevel;\rlet displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);\rlet displacedNormal=calcDisplacementNormal(input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);\rposition=u_modelMatrix * vec4<f32>(displacedPosition,1.0);\rnormalPosition=u_normalModelMatrix * vec4<f32>(displacedNormal,1.0);\r} else {\rnormalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);\r}\r\n\r\n\routput.position=u_projectionMatrix * u_cameraMatrix * position;\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.uv=input_uv;\rvar posFromLight= u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0);\r\r\routput.shadowPos=vec3(\rposFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),\rposFromLight.z\r);\routput.receiveShadow=u_receiveShadow;\routput.combinedOpacity=vertexUniforms.combinedOpacity;\r\n\r\n\rreturn output;\r\n}\r\n\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\rvar output:OutputData;\rlet input_position=inputData.position;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rvar position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0);\routput.position=u_projectionMatrix * u_cameraMatrix * position;\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\rreturn output;\r\n}\r\n",Wn="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include drawDirectionalShadowDepth;\r\n#redgpu_include calcDisplacements;\r\nstruct VertexUniforms {\rpickingId:u32,\rlocalMatrix:mat4x4<f32>,\rmodelMatrix:mat4x4<f32>,\rnormalModelMatrix:mat4x4<f32>,\ruseDisplacementTexture:u32,\rdisplacementScale:f32,\rreceiveShadow:f32\r\n};\r\nconst maxDistance:f32=1000.0;\r\nconst maxMipLevel:f32=10.0;\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n@group(1) @binding(1) var displacementTextureSampler:sampler;\r\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(3) uv1:vec2<f32>,\r@location(4) vertexColor_0:vec4<f32>,\r@location(5) vertexWeight:vec4<f32>,\r@location(6) vertexJoint:vec4<f32>,\r@location(7) vertexTangent:vec4<f32>,\r\n};\r\n\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(3) uv1:vec2<f32>,\r@location(4) vertexColor_0:vec4<f32>,\r@location(5) vertexTangent:vec4<f32>,\r@location(6) shadowPos:vec3<f32>,\r@location(7) receiveShadow:f32,\r@location(8) pickingId:vec4<f32>,\r@location(9) ndcPosition:vec3<f32>,\r@location(10) localNodeScale:f32,\r@location(11) volumeScale:f32,\r\n};\r\n@vertex\r\nfn main(inputData:InputData) -> OutputData {\rvar output:OutputData;\r\n\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_localMatrix=vertexUniforms.localMatrix;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\rlet u_directionalLightCount=systemUniforms.directionalLightCount;\rlet u_directionalLights=systemUniforms.directionalLights;\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_receiveShadow=vertexUniforms.receiveShadow;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\rposition= u_modelMatrix * vec4<f32>(input_position,1.0);\rnormalPosition= u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);\r\n\routput.position=u_projectionMatrix * u_cameraMatrix * position;\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.uv=inputData.uv;\routput.uv1=inputData.uv1;\routput.vertexColor_0=inputData.vertexColor_0;\routput.vertexTangent=u_normalModelMatrix * inputData.vertexTangent;\r\n\rlet viewDirection=normalize(position.xyz - u_cameraPosition);\r\n\r\n\rvar posFromLight= u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0);\r\r\routput.shadowPos=vec3(\rposFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),\rposFromLight.z\r);\routput.receiveShadow=u_receiveShadow;\routput.ndcPosition=output.position.xyz/output.position.w;\r\n\r\nlet nodeScaleX:f32=length(u_localMatrix[0].xyz);\r\nlet nodeScaleY:f32=length(u_localMatrix[1].xyz);\r\nlet nodeScaleZ=length(u_localMatrix[2].xyz);\r\noutput.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0);\r\n\r\nlet volumeScaleX:f32=length(u_modelMatrix[0].xyz);\r\nlet volumeScaleY:f32=length(u_modelMatrix[1].xyz);\r\nlet volumeScaleZ=length(u_modelMatrix[2].xyz);\r\noutput.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0);\rreturn output;\r\n}\r\n\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\rvar output:OutputData;\rlet input_position=inputData.position;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rvar position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0);\routput.position=u_projectionMatrix * u_cameraMatrix * position;\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\rreturn output;\r\n}\r\n";class ResourceStateStorageBuffer{static dirtyList=[];buffer;uuid;#x=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#x}set useNum(i){this.#x=i,ResourceStateStorageBuffer.dirtyList.push(this)}}class StorageBuffer extends AUniformBaseBuffer{constructor(i,m,g="",_=""){super(i,"managedStorageBufferState",GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC,m,g);const b=getCacheBufferFromResourceState(this,_);if(b)return b;_&&(this.name=_),basicRegisterResource(this,new ResourceStateStorageBuffer(this))}}Object.freeze(StorageBuffer);const getBasicMeshVertexBindGroupDescriptor=(i,m=!1)=>{const{redGPUContext:g,gpuRenderInfo:_,material:b}=i,{resourceManager:y}=g,{vertexUniformBuffer:T,vertexBindGroupLayout:w}=_,{basicSampler:P,emptyBitmapTextureView:$,emptyCubeTextureView:H}=y,{gpuSampler:q}=P;return{layout:w,label:m?"VERTEX_BIND_GROUP_DESCRIPTOR_MESH_SKIN":"VERTEX_BIND_GROUP_DESCRIPTOR_MESH",entries:m?[{binding:0,resource:{buffer:T.gpuBuffer,offset:0,size:T.size}},{binding:1,resource:getGPUResourceSampler(b?.displacementTextureSampler)||q},{binding:2,resource:getGPUResourceBitmapTextureView(b?.displacementTexture)||$},{binding:3,resource:{buffer:i.animationInfo.skinInfo.vertexStorageBuffer.gpuBuffer,offset:0,size:i.animationInfo.skinInfo.vertexStorageBuffer.size}}]:[{binding:0,resource:{buffer:T.gpuBuffer,offset:0,size:T.size}},{binding:1,resource:getGPUResourceSampler(b?.displacementTextureSampler)||q},{binding:2,resource:getGPUResourceBitmapTextureView(b?.displacementTexture)||$}]}},getGPUResourceBitmapTextureView=i=>i?.gpuTexture?.createView({label:i.src}),getGPUResourceSampler=i=>i?.gpuSampler,Xn=parseWGSL(Wn),jn=Xn.uniforms.vertexUniforms,Yn=parseWGSL(qn),Zn=Yn.uniforms.vertexUniforms,createMeshVertexShaderModule=i=>{const{material:m}=i;let g;return g=m instanceof PBRMaterial?i.animationInfo.skinInfo?((i,m)=>{const{redGPUContext:g,currentShaderModuleName:_}=m,{resourceManager:b}=g,{gpuRenderInfo:y}=m,T=`${m.animationInfo.skinInfo.joints.length}`,w=`${i}_${T}`,P="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include calcDisplacements;\r\nstruct VertexUniforms {\rpickingId:u32,\rlocalMatrix:mat4x4<f32>,\rmodelMatrix:mat4x4<f32>,\rnormalModelMatrix:mat4x4<f32>,\ruseDisplacementTexture:u32,\rdisplacementScale:f32,\rreceiveShadow:f32\r\n};\r\nstruct VertexStorages {\rjointMatrix:array<mat4x4<f32>,#JOINT_NUM>,\r\n};\r\nconst maxDistance:f32=1000.0;\r\nconst maxMipLevel:f32=10.0;\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n@group(1) @binding(1) var displacementTextureSampler:sampler;\r\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\r\n@group(1) @binding(3) var<storage,read> vertexStorages:VertexStorages;\r\nstruct InputDataSkin {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(3) uv1:vec2<f32>,\r@location(4) vertexColor_0:vec4<f32>,\r@location(5) vertexWeight:vec4<f32>,\r@location(6) vertexJoint:vec4<f32>,\r@location(7) vertexTangent:vec4<f32>,\r\n};\r\nstruct OutputDataSkin {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(3) uv1:vec2<f32>,\r@location(4) vertexColor_0:vec4<f32>,\r@location(5) vertexTangent:vec4<f32>,\r@location(6) shadowPos:vec3<f32>,\r@location(7) receiveShadow:f32,\r@location(8) pickingId:vec4<f32>,\r\n\r@location(9) ndcPosition:vec3<f32>,\r@location(10) localNodeScale:f32,\r@location(11) volumeScale:f32,\r\n};\r\n\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n\r\n\r\n@vertex\r\nfn main( inputData:InputDataSkin ) -> OutputDataSkin {\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\r\rlet u_localMatrix=vertexUniforms.localMatrix;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\n\r\rlet u_directionalLightCount=systemUniforms.directionalLightCount;\rlet u_directionalLights=systemUniforms.directionalLights;\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_receiveShadow=vertexUniforms.receiveShadow;\r\n\rvar output:OutputDataSkin;\rvar skinMat:mat4x4<f32>;\rlet vertexJoint:vec4<f32>=inputData.vertexJoint;\rlet vertexWeight:vec4<f32>=inputData.vertexWeight;\rlet jointMatrix=vertexStorages.jointMatrix;\rskinMat=vertexWeight.x * jointMatrix[ u32(vertexJoint.x) ]+\rvertexWeight.y * jointMatrix[ u32(vertexJoint.y) ]+\rvertexWeight.z * jointMatrix[ u32(vertexJoint.z) ]+\rvertexWeight.w * jointMatrix[ u32(vertexJoint.w) ];\r\n\r\n\rlet position= u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0);\rlet normalPosition= u_normalModelMatrix * skinMat * vec4<f32>(inputData.vertexNormal,1.0);\r\n\routput.position=u_projectionCameraMatrix * position;\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.uv=inputData.uv;\routput.uv1=inputData.uv1;\routput.vertexColor_0=inputData.vertexColor_0;\r\n\routput.vertexTangent=u_normalModelMatrix * inputData.vertexTangent;\r\n\rvar posFromLight= u_directionalLightProjectionViewMatrix * position;\r\r\routput.shadowPos=vec3<f32>(\rposFromLight.xy * vec2<f32>(0.5,-0.5) + vec2<f32>(0.5),\rposFromLight.z\r);\routput.receiveShadow=u_receiveShadow;\r\n\rlet nodeScaleX:f32=length(u_localMatrix[0].xyz);\rlet nodeScaleY:f32=length(u_localMatrix[1].xyz);\rlet nodeScaleZ:f32=length(u_localMatrix[2].xyz);\routput.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0);\r\n\rlet volumeScaleX:f32=length(u_modelMatrix[0].xyz);\rlet volumeScaleY:f32=length(u_modelMatrix[1].xyz);\rlet volumeScaleZ:f32=length(u_modelMatrix[2].xyz);\routput.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0);\rreturn output;\r\n}\r\n\r\n@vertex\r\nfn drawDirectionalShadowDepth( inputData:InputDataSkin ) -> OutputShadowData {\rvar output:OutputShadowData;\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet input_position=inputData.position;\rvar position:vec4<f32>;\r\n\rvar skinMat:mat4x4<f32>=mat4x4<f32>(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);\rvar vertexJoint:vec4<f32>=inputData.vertexJoint;\rvar vertexWeight:vec4<f32>=inputData.vertexWeight;\rvar jointMatrix=vertexStorages.jointMatrix;\rskinMat=\r\n\rvertexWeight.x * jointMatrix[ u32(vertexJoint.x) ]+\rvertexWeight.y * jointMatrix[ u32(vertexJoint.y) ]+\rvertexWeight.z * jointMatrix[ u32(vertexJoint.z) ]+\rvertexWeight.w * jointMatrix[ u32(vertexJoint.w) ];\r\n\rposition= u_modelMatrix * skinMat * vec4<f32>(input_position,1.0);\routput.position=u_directionalLightProjectionViewMatrix * position;\rreturn output;\r\n}\r\n@vertex\r\nfn picking(inputData:InputDataSkin) -> OutputDataSkin {\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\r\rvar output:OutputDataSkin;\rvar skinMat:mat4x4<f32>=mat4x4<f32>(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);\rvar vertexJoint:vec4<f32>=inputData.vertexJoint;\rvar vertexWeight:vec4<f32>=inputData.vertexWeight;\rvar jointMatrix=vertexStorages.jointMatrix;\rskinMat=\r\n\rvertexWeight.x * jointMatrix[ u32(vertexJoint.x) ]+\rvertexWeight.y * jointMatrix[ u32(vertexJoint.y) ]+\rvertexWeight.z * jointMatrix[ u32(vertexJoint.z) ]+\rvertexWeight.w * jointMatrix[ u32(vertexJoint.w) ];\r\n\r\n\rvar position:vec4<f32>;\rposition= u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0);\routput.position=u_projectionMatrix * u_cameraMatrix * position;\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\rreturn output;\r\n}\r\n",$={code:P};if(_===w)return b.getGPUShaderModule(w);if($.code=P.replaceAll("#JOINT_NUM",T),y.vertexUniformInfo=parseWGSL($.code).uniforms.vertexUniforms,m.animationInfo.skinInfo){createMeshVertexUniformBuffers(m,!0),m.animationInfo.skinInfo.vertexStorageInfo=parseWGSL($.code).storage.vertexStorages;const i=new ArrayBuffer(m.animationInfo.skinInfo.vertexStorageInfo.arrayBufferByteLength);m.animationInfo.skinInfo.vertexStorageBuffer=new StorageBuffer(m.redGPUContext,i,m.name),y.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m,!0))}else createMeshVertexUniformBuffers(m),y.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m));return b.createGPUShaderModule(w,$)})("VERTEX_MODULE_MESH_PBR_SKIN",i):i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH_PBR",Xn,jn,Wn):i.createCustomMeshVertexShaderModule?i.createCustomMeshVertexShaderModule():i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH",Yn,Zn,qn),i.currentShaderModuleName=g.label,g},Jn={NEVER:"never",LESS:"less",EQUAL:"equal",LESS_EQUAL:"less-equal",GREATER:"greater",NOT_EQUAL:"not-equal",GREATER_EQUAL:"greater-equal",ALWAYS:"always"};Object.freeze(Jn);const Qn="shadow",ei="picking",createBasePipeline=(i,m,g,_)=>{const{redGPUContext:b}=i,{gpuDevice:y}=b,T=i.material.gpuRenderInfo;let w,P;switch(_){case Qn:w="drawDirectionalShadowDepth",P=`${m.label}_shadow_pipelineDescriptor`;break;case ei:w="picking",P=`${m.label}_picking_pipelineDescriptor`;break;default:w="main",P=`${m.label}_pipelineDescriptor`}const $={module:m,entryPoint:w,buffers:i.vertexStateBuffers},H=[b.resourceManager.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),g];_!==Qn&&H.push(T.fragmentBindGroupLayout);const q={bindGroupLayouts:H},W={label:P,layout:y.createPipelineLayout(q),vertex:$,primitive:i.primitiveState.state};switch(_){case Qn:W.depthStencil={depthWriteEnabled:!0,depthCompare:Jn.LESS_EQUAL,format:"depth32float"};break;case ei:i.material&&(W.fragment={module:i.material.gpuRenderInfo.fragmentShaderModule,entryPoint:"picking",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},W.depthStencil=i.depthStencilState.state);break;default:W.fragment=T.fragmentState,W.depthStencil=i.depthStencilState.state,W.multisample={count:b.antialiasingManager.useMSAA?4:1}}return y.createRenderPipeline(W)},updateMeshDirtyPipeline=(i,m)=>{const{material:g,gpuRenderInfo:_,redGPUContext:b}=i,{resourceManager:y}=b;i.dirtyTransform=!0,g.dirtyPipeline&&g._updateFragmentState();const T=createMeshVertexShaderModule(i),w=y.getGPUBindGroupLayout(i.animationInfo.skinInfo?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout);_.vertexShaderModule=T,_.pipeline=createBasePipeline(i,T,w),_.shadowPipeline=i.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("drawDirectionalShadowDepth")?createBasePipeline(i,T,w,Qn):null,_.pickingPipeline=i.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("picking")?createBasePipeline(i,T,w,ei):null;const{vertexUniformInfo:P}=i.gpuRenderInfo,{members:$}=P;for(const m in $)"pickingId"!==m&&(i[m]=i[m]);i.gpuRenderInfo.vertexUniformInfo.members.pickingId&&i.gpuRenderInfo.vertexUniformBuffer.writeBuffer(i.gpuRenderInfo.vertexUniformInfo.members.pickingId,i.pickingId),g.dirtyPipeline=!1,i.dirtyPipeline=!1,m&&m.numDirtyPipelines++},ti=Object.values(Jn);class DepthStencilState{state;#yt;#Q="depth32float";#Tt=["r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm-srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm-srgb","rgb9e5ufloat","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth24plus-stencil8","depth32float","depth32float-stencil8","bc1-rgba-unorm","bc1-rgba-unorm-srgb","bc2-rgba-unorm","bc2-rgba-unorm-srgb","bc3-rgba-unorm","bc3-rgba-unorm-srgb","bc4-r-unorm","bc4-r-snorm","bc5-rg-unorm","bc5-rg-snorm","bc6h-rgb-ufloat","bc6h-rgb-float","bc7-rgba-unorm","bc7-rgba-unorm-srgb","etc2-rgb8unorm","etc2-rgb8unorm-srgb","etc2-rgb8a1unorm","etc2-rgb8a1unorm-srgb","etc2-rgba8unorm","etc2-rgba8unorm-srgb","eac-r11unorm","eac-r11snorm","eac-rg11unorm","eac-rg11snorm","astc-4x4-unorm","astc-4x4-unorm-srgb","astc-5x4-unorm","astc-5x4-unorm-srgb","astc-5x5-unorm","astc-5x5-unorm-srgb","astc-6x5-unorm","astc-6x5-unorm-srgb","astc-6x6-unorm","astc-6x6-unorm-srgb","astc-8x5-unorm","astc-8x5-unorm-srgb","astc-8x6-unorm","astc-8x6-unorm-srgb","astc-8x8-unorm","astc-8x8-unorm-srgb","astc-10x5-unorm","astc-10x5-unorm-srgb","astc-10x6-unorm","astc-10x6-unorm-srgb","astc-10x8-unorm","astc-10x8-unorm-srgb","astc-10x10-unorm","astc-10x10-unorm-srgb","astc-12x10-unorm","astc-12x10-unorm-srgb","astc-12x12-unorm","astc-12x12-unorm-srgb"];#St=!0;#wt=Jn.LESS_EQUAL;#Mt;#Rt;#Pt;#Ct;#It;#Et;#Lt;constructor(i){this.#yt=i,this.#Je()}get format(){return this.#Q}set format(i){this.#Tt.includes(i)?(this.#Q=i,this.#Je()):consoleAndThrowError(`Invalid value for format. Received ${i}. Expected one of:${this.#Tt.join(",")}`)}get depthWriteEnabled(){return this.#St}set depthWriteEnabled(i){this.#St=i,this.#Je()}get depthCompare(){return this.#wt}set depthCompare(i){ti.includes(i)?(this.#wt=i,this.#Je()):consoleAndThrowError(`Invalid value for depthCompare. Received ${i}. Expected one of:${ti.join(",")}`)}get stencilFront(){return this.#Mt}set stencilFront(i){this.#Mt=i,this.#Je()}get stencilBack(){return this.#Rt}set stencilBack(i){this.#Rt=i,this.#Je()}get stencilReadMask(){return this.#Pt}set stencilReadMask(i){this.#Pt=i,this.#Je()}get stencilWriteMask(){return this.#Ct}set stencilWriteMask(i){this.#Ct=i,this.#Je()}get depthBias(){return this.#It}set depthBias(i){this.#It=i,this.#Je()}get depthBiasSlopeScale(){return this.#Et}set depthBiasSlopeScale(i){this.#Et=i,this.#Je()}get depthBiasClamp(){return this.#Lt}set depthBiasClamp(i){this.#Lt=i,this.#Je()}#Je(){this.state={format:this.#Q,depthWriteEnabled:this.#St,depthCompare:this.#wt,stencilFront:this.#Mt,stencilBack:this.#Rt,stencilReadMask:this.#Pt,stencilWriteMask:this.#Ct,depthBias:this.#It,depthBiasSlopeScale:this.#Et,depthBiasClamp:this.#Lt},this.#yt.dirtyPipeline=!0}}const ri={NONE:"none",FRONT:"front",BACK:"back"};Object.freeze(ri);const ni={CW:"cw",CCW:"ccw"};Object.freeze(ni);const ii={UINT16:"uint16",UINT32:"uint32"};Object.freeze(ii);const ai={POINT_LIST:"point-list",LINE_LIST:"line-list",LINE_STRIP:"line-strip",TRIANGLE_LIST:"triangle-list",TRIANGLE_STRIP:"triangle-strip"};Object.freeze(ai);const si=Object.values(ii),oi=Object.values(ni),ui=Object.values(ri),li=["point-list","line-list","line-strip","triangle-list","triangle-strip"];class PrimitiveState{dirtyPipeline=!1;state;#yt;#Bt=ai.TRIANGLE_LIST;#Ut;#Dt=ni.CCW;#At=ri.BACK;#kt=!1;constructor(i){this.#yt=i,this.#Je()}get topology(){return this.#Bt}set topology(i){li.includes(i)?(this.#Bt=i,this.#Je()):consoleAndThrowError(`Invalid value for topology. Received ${i}. Expected one of:${li.join(",")}`)}get stripIndexFormat(){return this.#Ut}set stripIndexFormat(i){si.includes(i)?(this.#Ut=i,this.#Je()):consoleAndThrowError(`Invalid value for stripIndexFormat. Received ${i}. Expected one of:${si.join(",")}`)}get frontFace(){return this.#Dt}set frontFace(i){oi.includes(i)?(this.#Dt=i,this.#Je()):consoleAndThrowError(`Invalid value for frontFace. Received ${i}. Expected one of:${oi.join(",")}`)}get cullMode(){return this.#At}set cullMode(i){ui.includes(i)?(this.#At=i,this.#Je()):consoleAndThrowError(`Invalid value for cullMode. Received ${i}. Expected one of:${ui.join(",")}`)}get unclippedDepth(){return this.#kt}set unclippedDepth(i){"boolean"==typeof i?(this.#kt=i,this.#Je()):consoleAndThrowError(`Invalid type for unclippedDepth. Received ${typeof i}. Expected type:boolean.`)}#Je(){this.state={topology:this.#Bt,stripIndexFormat:this.#Ut,frontFace:this.#Dt,cullMode:this.#At,unclippedDepth:this.#kt},this.#yt.dirtyPipeline=!0}}class Object3DContainer{modelMatrix=create$5();#Ot=[];constructor(){}get children(){return this.#Ot}get numChildren(){return this.#Ot.length}contains(i){return this.#Nt(i),this.#Ot.includes(i)}addChild(i){return this.#Nt(i),this.#Ft(i)?(this.#Ot.push(i),i.dirtyTransform=!0,i):null}addChildAt(i,m){if(validateUintRange(m),this.#Ot.length<m&&(m=this.#Ot.length),!(m<0||m>this.#Ot.length)&&this.#Ft(i))return this.#Ot.splice(m,0,i),i.dirtyTransform=!0,this}getChildAt(i){if(validateUintRange(i),!(i>=this.#Ot.length||i<0))return this.#Ot[i]}getChildIndex(i){this.#Nt(i);const m=this.#Ot.indexOf(i);return-1===m?-1:m}setChildIndex(i,m){this.#Nt(i),validateUintRange(m);const g=this.#Ot.length,_=m>=g,b=this.#Ot.indexOf(i);-1!==b?_?consoleAndThrowError(`Invalid index. Index ${m} is out of bounds. Index should be between 0 and ${g-1}.`):(this.#Ot.splice(b,1),this.#Ot.splice(m,0,i)):consoleAndThrowError(`The provided is not a child of the Object3DContainer.:${i}`)}swapChildren(i,m){if(this.#Nt(i),this.#Nt(m),i===m)return void consoleAndThrowError("Error:child1 and child2 are the same. Cannot swap a child with itself.");const g=this.#Ot.indexOf(i),_=this.#Ot.indexOf(m);-1!==g&&-1!==_||consoleAndThrowError(`Error:${-1===g?"child1":"child2"} is not a child of this Object3DContainer.`),this.swapChildrenAt(g,_)}swapChildrenAt(i,m){validateUintRange(i),validateUintRange(m),i===m&&consoleAndThrowError("Error:index1 and index2 are identical. Cannot swap a child with itself.");const g=this.#Ot.length;(i>=g||m>=g)&&consoleAndThrowError(`Error:Both index1 and index2 should be less than the number of children. Provided index1:${i},index2:${m},number of children:${g}`);let _=this.#Ot[i];this.#Ot[i]=this.#Ot[m],this.#Ot[m]=_}removeChild(i){this.#Nt(i);const m=this.#Ot.indexOf(i);if(m>-1)return i.parent=null,this.#Ot.splice(m,1)[0];consoleAndThrowError("Error:Child not found within parent.")}removeChildAt(i){validateUintRange(i);const m=this.#Ot[i];if(m)return m.parent=null,this.#Ot.splice(i,1)[0];throw new Error(`Error:No child found at provided index:${i}.`)}removeAllChildren(){let i=this.#Ot.length;for(;i--;)this.#Ot[i].parent=null;return this.#Ot.length=0,this}#Nt(i){i instanceof Object3DContainer||consoleAndThrowError("allow only Object3DContainer instance.")}#Ft=i=>(this.#Nt(i),i.parent?!!i.parent?.removeChild(i)&&(i.parent=this,!0):(i.parent=this,!0))}class MeshBase extends Object3DContainer{gpuRenderInfo;animationInfo={skinInfo:null,morphInfo:null,animationsList:null};gltfLoaderInfo;dirtyPipeline=!0;dirtyTransform=!0;dirtyOpacity=!0;modelMatrix=create$5();localMatrix=create$5();normalModelMatrix=create$5();#v;#b;#Gt;#Vt;#$t;#y=[];#_=createUUID();constructor(i){super(),validateRedGPUContext(i),this.#v=i,this.#b=i.gpuDevice,this.#Gt=new PrimitiveState(this),this.#Vt=new DepthStencilState(this)}get uuid(){return this.#_}get currentShaderModuleName(){return this.#$t}set currentShaderModuleName(i){this.#$t=i}get primitiveState(){return this.#Gt}get depthStencilState(){return this.#Vt}get gpuDevice(){return this.#b}get redGPUContext(){return this.#v}worldToLocal(i,m,g){return worldToLocal(this.modelMatrix,i,m,g)}localToWorld(i,m,g){return localToWorld(this.modelMatrix,i,m,g)}getScreenPoint(i){return getScreenPoint(i,this.modelMatrix)}__fireListenerList(i=!1){for(const i of this.#y)i(this);i&&(this.#y.length=0)}}const ci="VERTEX_MODULE_MESH_PBR_SKIN",hi=Math.PI/180,fi=3.141592653589793,di=6.283185307179586,mi=.225,pi=1.27323954,gi=.405284735,xi=1.5707963267948966;class Mesh extends MeshBase{displacementTexture;castShadow=!1;#e;#r;#Ht;#i=0;#a=0;#s=0;#zt=[0,0,0];#Kt=0;#qt=0;#Wt=0;#Xt;#jt=1;#Yt=1;#Zt=1;#Jt=[1,1,1];#o=0;#u=0;#l=0;#Qt=[0,0,0];#er={};#tr=0;#rr=!1;#nr=1;constructor(i,m,g,_){super(i),_&&(this.name=_),this._geometry=m,this._material=g,this.#Xt=uuidToUint(this.uuid)}_material;get material(){return this._material}set material(i){this._material=i,this.dirtyPipeline=!0,"blendMode"in this&&(this.blendMode=this.blendMode)}_geometry;get geometry(){return this._geometry}set geometry(i){this._geometry=i,this.dirtyPipeline=!0,this.dirtyTransform=!0}get opacity(){return this.#nr}set opacity(i){validatePositiveNumberRange(i,0,1),this.#nr=i,this.dirtyOpacity=!0}get ignoreFrustumCulling(){return this.#rr}set ignoreFrustumCulling(i){this.#rr=i}get pickingId(){return this.#Xt}get events(){return this.#er}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get vertexStateBuffers(){return this._geometry.gpuRenderInfo.buffers}get parent(){return this.#Ht}set parent(i){this.#Ht=i}get pivotX(){return this.#Kt}set pivotX(i){this.#Kt=i,this.dirtyTransform=!0}get pivotY(){return this.#qt}set pivotY(i){this.#qt=i,this.dirtyTransform=!0}get pivotZ(){return this.#Wt}set pivotZ(i){this.#Wt=i,this.dirtyTransform=!0}get x(){return this.#i}set x(i){this.#i=this.#zt[0]=i,this.dirtyTransform=!0}get y(){return this.#s}set y(i){this.#s=this.#zt[1]=i,this.dirtyTransform=!0}get z(){return this.#a}set z(i){this.#a=this.#zt[2]=i,this.dirtyTransform=!0}get position(){return this.#zt}get scaleX(){return this.#jt}set scaleX(i){this.#jt=this.#Jt[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#Yt}set scaleY(i){this.#Yt=this.#Jt[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#Zt}set scaleZ(i){this.#Zt=this.#Jt[2]=i,this.dirtyTransform=!0}get scale(){return this.#zt}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#Qt[0]=i,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#Qt[1]=i,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#Qt[2]=i,this.dirtyTransform=!0}get rotation(){return this.#Qt}setCastShadowRecursively(i=!1){Object.hasOwn(this,"castShadow")&&(this.castShadow=i),this.children&&this.children.forEach(m=>{m.setCastShadowRecursively(i)})}setReceiveShadowRecursively(i=!1){Object.hasOwn(this,"receiveShadow")&&(this.receiveShadow=i),this.children&&this.children.forEach(m=>{m.setReceiveShadowRecursively(i)})}getCombinedOpacity(){if(this.is2DMeshType){const i=this.parent;return this.#nr*(i?.getCombinedOpacity?i.getCombinedOpacity():1)}return 1}addListener(i,m){this.#er[i]=m,this.#tr=Object.keys(this.#er).length}lookAt(i,m,g){var _,b=new Float32Array([0,1,0]),y=[];y[0]=i,y[1]=m,y[2]=g,identity$2(this.localMatrix),targetTo(this.localMatrix,[this.#i,this.#s,this.#a],y,b),_=mat4ToEuler(this.localMatrix,[]),this.rotationX=180*-_[0]/Math.PI,this.rotationY=180*-_[1]/Math.PI,this.rotationZ=180*-_[2]/Math.PI}setScale(i,m,g){m=m??i,g=g??i;const _=this.#Jt;this.#jt=_[0]=i,this.#Yt=_[1]=m,this.#Zt=_[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const _=this.#zt;this.#i=_[0]=i,this.#s=_[1]=m,this.#a=_[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const _=this.#Qt;this.#o=_[0]=i,this.#u=_[1]=m,this.#l=_[2]=g,this.dirtyTransform=!0}clone(){const i=new Mesh(this.redGPUContext,this._geometry,this._material);i.setPosition(this.#i,this.#s,this.#a),i.setRotation(this.#o,this.#u,this.#l),i.setScale(this.#jt,this.#Yt,this.#Zt);let m=this.children.length;for(;m--;)i.addChild(this.children[m].clone());return i}render(i){const{redGPUContext:m}=this,{view:g,isScene2DMode:_,currentRenderPassEncoder:b,timestamp:y,frustumPlanes:T,dirtyVertexUniformFromMaterial:w,useDistanceCulling:P,cullingDistanceSquared:$,distanceCulling:H}=i,{scene:q}=g,{shadowManager:W}=q,{directionalShadowManager:ye}=W,{pickingManager:Ge}=g,{castingList:Ke}=ye,Xe=this._geometry,je=this._material,{uuid:Ye}=je||{};let Ze,Je;if(_&&(this.#a=0,this.#Wt=0,this.depthStencilState.depthWriteEnabled&&(this.depthStencilState.depthWriteEnabled=!1)),this.dirtyTransform){Ze=!0;{const{pixelRectObject:i}=g,m=this.parent,b=this.localMatrix;let y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,je,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Pt,Ct,It,Et,Lt,Bt,Ut,Dt;if(b[12]=this.#i,b[13]=this.#s,b[14]=this.#a,b[15]=1,y=this.#o*hi,T=this.#u*hi,w=this.#l*hi,xt=1,vt=0,bt=0,Tt=0,St=1,wt=0,Rt=0,Pt=0,Ct=1,Dt=y%di,Dt<-fi?Dt+=di:Dt>fi&&(Dt-=di),Dt=Dt<0?pi*Dt+gi*Dt*Dt:pi*Dt-gi*Dt*Dt,P=Dt<0?mi*(Dt*-Dt-Dt)+Dt:mi*(Dt*Dt-Dt)+Dt,Dt=(y+xi)%di,Dt<-fi?Dt+=di:Dt>fi&&(Dt-=di),Dt=Dt<0?pi*Dt+gi*Dt*Dt:pi*Dt-gi*Dt*Dt,q=Dt<0?mi*(Dt*-Dt-Dt)+Dt:mi*(Dt*Dt-Dt)+Dt,Dt=T%di,Dt<-fi?Dt+=di:Dt>fi&&(Dt-=di),Dt=Dt<0?pi*Dt+gi*Dt*Dt:pi*Dt-gi*Dt*Dt,$=Dt<0?mi*(Dt*-Dt-Dt)+Dt:mi*(Dt*Dt-Dt)+Dt,Dt=(T+xi)%di,Dt<-fi?Dt+=di:Dt>fi&&(Dt-=di),Dt=Dt<0?pi*Dt+gi*Dt*Dt:pi*Dt-gi*Dt*Dt,W=Dt<0?mi*(Dt*-Dt-Dt)+Dt:mi*(Dt*Dt-Dt)+Dt,Dt=w%di,Dt<-fi?Dt+=di:Dt>fi&&(Dt-=di),Dt=Dt<0?pi*Dt+gi*Dt*Dt:pi*Dt-gi*Dt*Dt,H=Dt<0?mi*(Dt*-Dt-Dt)+Dt:mi*(Dt*Dt-Dt)+Dt,Dt=(w+xi)%di,Dt<-fi?Dt+=di:Dt>fi&&(Dt-=di),Dt=Dt<0?pi*Dt+gi*Dt*Dt:pi*Dt-gi*Dt*Dt,ye=Dt<0?mi*(Dt*-Dt-Dt)+Dt:mi*(Dt*Dt-Dt)+Dt,Ye=W*ye,Ze=P*$*ye-q*H,Je=q*$*ye+P*H,Qe=W*H,et=P*$*H+q*ye,at=q*$*H-P*ye,ht=-$,ft=P*W,gt=q*W,y=this.#jt,T=this.#Yt,w=this.#Zt,this.renderTextureWidth&&(y*=this.renderTextureWidth,T*=this.renderTextureHeight),b[0]=(xt*Ye+Tt*Ze+Rt*Je)*y,b[1]=(vt*Ye+St*Ze+Pt*Je)*y,b[2]=(bt*Ye+wt*Ze+Ct*Je)*y,b[3]=b[3]*y,b[4]=(xt*Qe+Tt*et+Rt*at)*T,b[5]=(vt*Qe+St*et+Pt*at)*T,b[6]=(bt*Qe+wt*et+Ct*at)*T,b[7]=b[7]*T,b[8]=(xt*ht+Tt*ft+Rt*gt)*w,b[9]=(vt*ht+St*ft+Pt*gt)*w,b[10]=(bt*ht+wt*ft+Ct*gt)*w,b[11]=b[11]*w,(this.#Kt||this.#qt||this.#Wt)&&(xt=b[0],vt=b[1],bt=b[2],yt=b[3],Tt=b[4],St=b[5],wt=b[6],Mt=b[7],Rt=b[8],Pt=b[9],Ct=b[10],It=b[11],Et=b[12],Lt=b[13],Bt=b[14],Ut=b[15],Ge=1,Ke=0,Xe=0,je=0,b[0]=Ge*xt+Ke*Tt+Xe*Rt+je*Et,b[1]=Ge*vt+Ke*St+Xe*Pt+je*Lt,b[2]=Ge*bt+Ke*wt+Xe*Ct+je*Bt,b[3]=Ge*yt+Ke*Mt+Xe*It+je*Ut,Ge=0,Ke=1,Xe=0,je=0,b[4]=Ge*xt+Ke*Tt+Xe*Rt+je*Et,b[5]=Ge*vt+Ke*St+Xe*Pt+je*Lt,b[6]=Ge*bt+Ke*wt+Xe*Ct+je*Bt,b[7]=Ge*yt+Ke*Mt+Xe*It+je*Ut,Ge=0,Ke=0,Xe=1,je=0,b[8]=Ge*xt+Ke*Tt+Xe*Rt+je*Et,b[9]=Ge*vt+Ke*St+Xe*Pt+je*Lt,b[10]=Ge*bt+Ke*wt+Xe*Ct+je*Bt,b[11]=Ge*yt+Ke*Mt+Xe*It+je*Ut,_?m?.modelMatrix?(Ge=-this.#Kt,Ke=-this.#qt,Xe=-this.#Wt,je=1):(Ge=-this.#Kt/y,Ke=-this.#qt/T,Xe=-this.#Wt,je=1):(Ge=-this.#Kt,Ke=-this.#qt,Xe=-this.#Wt,je=1),b[12]=Ge*xt+Ke*Tt+Xe*Rt+je*Et,b[13]=Ge*vt+Ke*St+Xe*Pt+je*Lt,b[14]=Ge*bt+Ke*wt+Xe*Ct+je*Bt,b[15]=Ge*yt+Ke*Mt+Xe*It+je*Ut),m?.modelMatrix){let i=m.modelMatrix,g=this.localMatrix,_=this.modelMatrix,b=i[0],y=i[1],T=i[2],w=i[3],P=i[4],$=i[5],H=i[6],q=i[7],W=i[8],ye=i[9],Ge=i[10],Ke=i[11],Xe=i[12],je=i[13],Ye=i[14],Ze=i[15],Je=g[0],Qe=g[1],et=g[2],at=g[3];_[0]=Je*b+Qe*P+et*W+at*Xe,_[1]=Je*y+Qe*$+et*ye+at*je,_[2]=Je*T+Qe*H+et*Ge+at*Ye,_[3]=Je*w+Qe*q+et*Ke+at*Ze,Je=g[4],Qe=g[5],et=g[6],at=g[7],_[4]=Je*b+Qe*P+et*W+at*Xe,_[5]=Je*y+Qe*$+et*ye+at*je,_[6]=Je*T+Qe*H+et*Ge+at*Ye,_[7]=Je*w+Qe*q+et*Ke+at*Ze,Je=g[8],Qe=g[9],et=g[10],at=g[11],_[8]=Je*b+Qe*P+et*W+at*Xe,_[9]=Je*y+Qe*$+et*ye+at*je,_[10]=Je*T+Qe*H+et*Ge+at*Ye,_[11]=Je*w+Qe*q+et*Ke+at*Ze,Je=g[12],Qe=g[13],et=g[14],at=g[15],_[12]=Je*b+Qe*P+et*W+at*Xe,_[13]=Je*y+Qe*$+et*ye+at*je,_[14]=Je*T+Qe*H+et*Ge+at*Ye,_[15]=Je*w+Qe*q+et*Ke+at*Ze}else{const{modelMatrix:i,localMatrix:m}=this;i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]}{let i=this.normalModelMatrix,m=this.modelMatrix,g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],je=m[15],Ye=g*w-_*T,Ze=g*P-b*T,Je=g*$-y*T,Qe=_*P-b*w,et=_*$-y*w,at=b*$-y*P,ht=H*Ke-q*Ge,ft=H*Xe-W*Ge,gt=H*je-ye*Ge,xt=W*je-ye*Xe,vt=q*je-ye*Ke,bt=Ye*xt-Ze*vt+Je*xt+Qe*gt-et*ft+at*ht;bt=1/bt,i[0]=(w*xt-P*vt+$*xt)*bt,i[4]=(-_*xt+b*vt-y*xt)*bt,i[8]=(Ke*at-Xe*et+je*Qe)*bt,i[12]=(-q*at+W*et-ye*Qe)*bt,i[1]=(-T*xt+P*gt-$*ft)*bt,i[5]=(g*xt-b*gt+y*ft)*bt,i[9]=(-Ge*at+Xe*Je-je*Ze)*bt,i[13]=(H*at-W*Je+ye*Ze)*bt,i[2]=(T*vt-w*gt+$*ht)*bt,i[6]=(-g*vt+_*gt-y*ht)*bt,i[10]=(Ge*et-Ke*Je+je*Ye)*bt,i[14]=(-H*et+q*Je-ye*Ye)*bt,i[3]=(-T*xt+w*ft-P*ht)*bt,i[7]=(g*xt-_*ft+b*ht)*bt,i[11]=(-Ge*Qe+Ke*Ze-Xe*Ye)*bt,i[15]=(H*Qe-q*Ze+W*Ye)*bt}}}this.gltfLoaderInfo?.activeAnimations?.length&&((i,m)=>{let g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe=m.length;for(;Xe--;)for(P=m[Xe],w=P.targetAniTrackList,T=w.length;T--;){$=w[T];const{animationTargetMesh:m,timeAnimationInfo:Xe,aniDataAnimationInfo:je,weightMeshes:Ye}=$;for(g=(i-P.startTime)%(1e3*w.maxTime)/1e3,W=Xe.dataList,ye=je.dataList,Ge=W.length,Ke=0,q=W.length-1,H=0,_=W[q],b=W[H];Ke<Ge;Ke++){const i=W[Ke];if(i<g&&(q=Ke,_=W[q],H=null==W[q+1]?0:q+1,b=W[H]),0==Ke&&g<i){q=Ge-1,_=W[q],H=Ke,b=W[H],g=i;break}if(Ke==Ge-1&&g>i){q=0,_=W[q],H=Ge-1,b=W[H],g=i;break}}let Ze,Je,Qe,et,at,ht,ft;switch("CUBICSPLINE"==$.interpolation?(y=b-_,"NaN"==y.toString()&&(y=0),Ze=(g-_)/y,"NaN"==Ze.toString()&&(Ze=0),Je=Ze*Ze,Qe=Je*Ze,ht=-2*Qe+3*Je,ft=Qe-Je,et=1-ht,at=ft-Je+Ze):(y="STEP"==$.interpolation?0:(g-_)/(b-_),"NaN"==y.toString()&&(y=0)),$.key){case"rotation":gltfAnimationLooper_rotation($.interpolation,m,ye,Ge,y,q,H,et,at,ht,ft);break;case"translation":gltfAnimationLooper_transition($.interpolation,m,ye,Ge,y,q,H,et,at,ht,ft);break;case"scale":gltfAnimationLooper_scale($.interpolation,m,ye,Ge,y,q,H,et,at,ht,ft);break;case"weights":gltfAnimationLooper_weight(Ye,ye,y,q,H)}}})(y,this.gltfLoaderInfo.activeAnimations),this.animationInfo.skinInfo&&(this.currentShaderModuleName.includes(ci)||(this.dirtyPipeline=!0),this.currentShaderModuleName===`${ci}_${this.animationInfo.skinInfo.joints?.length}`&&(this.animationInfo.skinInfo.update(m,this),Ze=!1));let Qe=!0;if(P&&Xe){const{rawCamera:i}=g,m=i.x-this.#i,_=i.y-this.#s,b=i.z-this.#a,y=this.modelMatrix;Xe.volume.geometryRadius;y[0],y[5],y[10];const T=m*m;if(T>$)Qe=!1;else{const i=_*_;if(T+i>$)Qe=!1;else{T+i+b*b>$&&(Qe=!1)}}}if(T&&Qe)if(Xe){const i=this.modelMatrix,m=T[0],g=T[1],_=T[2],b=T[3],y=T[4],w=T[5],P=Xe.volume.geometryRadius,$=P*i[0],H=P*i[5],q=P*i[10],W=2*Math.max(P,$,H,q),ye=i[12],Ge=i[13],Ke=i[14];(m[0]*ye+m[1]*Ge+m[2]*Ke+m[3]<=-W||g[0]*ye+g[1]*Ge+g[2]*Ke+g[3]<=-W||_[0]*ye+_[1]*Ge+_[2]*Ke+_[3]<=-W||b[0]*ye+b[1]*Ge+b[2]*Ke+b[3]<=-W||y[0]*ye+y[1]*Ge+y[2]*Ke+y[3]<=-W||w[0]*ye+w[1]*Ge+w[2]*Ke+w[3]<=-W)&&(Qe=!1)}else Qe=!1;this.#rr&&(Qe=!0),Xe?i.num3DObjects++:i.num3DGroups++;const{displacementTexture:et,displacementScale:at}=je||{};(this.dirtyPipeline||je?.dirtyPipeline||w[Ye])&&(w[Ye]=!0);const{antialiasingManager:ht,gpuDevice:ft}=m;if(Xe&&(ht.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.initGPURenderInfos(),(this.dirtyPipeline||w[Ye])&&updateMeshDirtyPipeline(this,i)),Xe&&Qe){{const{gpuRenderInfo:i}=this,{vertexUniformBuffer:m,vertexUniformInfo:g,pipeline:_}=i,{members:b}=g;void 0!==b.displacementScale&&b.displacementScale!==at&&ft.queue.writeBuffer(m.gpuBuffer,b.displacementScale.uniformOffset,new b.displacementScale.View([at])),void 0!==b.useDisplacementTexture&&b.useDisplacementTexture!==et&&ft.queue.writeBuffer(m.gpuBuffer,b.useDisplacementTexture.uniformOffset,new b.useDisplacementTexture.View([et?1:0]))}const{gpuRenderInfo:m}=this,{vertexUniformBuffer:g,vertexUniformBindGroup:_,vertexUniformInfo:y,pipeline:T}=m,{members:w}=y;if(this.dirtyTransform&&(ft.queue.writeBuffer(g.gpuBuffer,w.modelMatrix.uniformOffset,new w.modelMatrix.View(this.is2DMeshType?multiply$5(create$5(),this.modelMatrix,fromValues$5(this.width,0,0,0,0,this.height,0,0,0,0,1,0,0,0,0,1)):this.modelMatrix)),ft.queue.writeBuffer(g.gpuBuffer,w.normalModelMatrix.uniformOffset,new w.normalModelMatrix.View(this.normalModelMatrix)),w.localMatrix&&ft.queue.writeBuffer(g.gpuBuffer,w.localMatrix.uniformOffset,new w.localMatrix.View(this.localMatrix)),Ze=!0,this.dirtyTransform=!1),this.dirtyOpacity&&(Je=!0,w.combinedOpacity&&ft.queue.writeBuffer(g.gpuBuffer,w.combinedOpacity.uniformOffset,new w.combinedOpacity.View([this.getCombinedOpacity()])),this.dirtyOpacity=!1),je.use2PathRender)i.render2PathLayer[i.render2PathLayer.length]=this;else if("particle"===this.meshType)i.particleLayer[i.particleLayer.length]=this;else if("instanceMesh"===this.meshType)i.instanceMeshLayer[i.instanceMeshLayer.length]=this;else if(je.transparent)i.transparentLayer[i.transparentLayer.length]=this;else if(2===je.alphaBlend||je.opacity<1||!this.depthStencilState.depthWriteEnabled)i.alphaLayer[i.alphaLayer.length]=this;else{b.setPipeline(T);const{gpuBuffer:m}=Xe.vertexBuffer,{fragmentUniformBindGroup:g}=je.gpuRenderInfo;if(i.prevVertexGpuBuffer!==m&&(b.setVertexBuffer(0,m),i.prevVertexGpuBuffer=m),b.setBindGroup(1,_),i.prevFragmentUniformBindGroup!==g&&(b.setBindGroup(2,g),i.prevFragmentUniformBindGroup=g),i.numDrawCalls++,Xe.indexBuffer){const{indexBuffer:m}=Xe,{indexNum:g,triangleCount:_,gpuBuffer:y}=m;b.setIndexBuffer(y,"uint32"),this.particleBuffers?b.drawIndexed(g,this.particleNum,0,0,0):b.drawIndexed(g,1,0,0,0),i.numTriangles+=_,i.numPoints+=g}else{const{vertexBuffer:m}=Xe,{vertexCount:g,triangleCount:_}=m;b.draw(g,1,0,0),i.numTriangles+=_,i.numPoints+=g}}this.#tr&&(Ge.castingList[Ge.castingList.length]=this)}(this.castShadow||this.castShadow&&!Xe)&&(Ke[Ke.length]=this);const{children:gt}=this;let xt=0;const vt=gt.length;for(;xt<vt;xt++)Ze&&(gt[xt].dirtyTransform=Ze),Je&&(gt[xt].dirtyOpacity=Je),gt[xt].render(i)}initGPURenderInfos(){this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null),updateMeshDirtyPipeline(this)}createMeshVertexShaderModuleBASIC(i,m,g,_){const{redGPUContext:b}=this,{resourceManager:y}=b,{gpuRenderInfo:T}=this,w={code:_};return T.vertexUniformInfo!==g&&(T.vertexUniformInfo=g,T.vertexStructInfo=m,createMeshVertexUniformBuffers(this)),T.vertexUniformBindGroup=b.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(this)),y.createGPUShaderModule(i,w)}}Object.defineProperty(Mesh.prototype,"meshType",{value:"mesh",writable:!1}),Tr.defineByPreset(Mesh,[Tr.PRESET_BOOLEAN.RECEIVE_SHADOW]),Object.freeze(Mesh);class AController{#ir;constructor(){}get camera(){return this.#ir}set camera(i){this.#ir=i}update(i,m){}getCanvasEventPoint=(i,m)=>{const g=m.htmlCanvas,_=m.detector.isMobile,b=g.getBoundingClientRect(),y="clientX",T="clientY";let w,P;if(_){const m=i.changedTouches[0];w=m[y],P=m[T]}else{const m=i;w=m[y],P=m[T]}return{x:w-b.left,y:P-b.top}}}let _i,vi=create$5();const bi=create$5(),yi=create$4();const validateNumberRange=(i,m=0,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed. input:${i}`),!0);let Ti;var Si=Object.freeze({__proto__:null,BasicController:class extends AController{#ar;#sr={moveForward:"w",moveBack:"s",moveLeft:"a",moveRight:"d",moveUp:"t",moveDown:"g",turnLeft:"q",turnRight:"e",turnUp:"r",turnDown:"f"};#or=1;#ur=.1;#lr=1;#cr=.1;#hr=3;#fr=0;#dr=[0,0,0];#mr=0;#pr=0;#gr;constructor(i){super(),this.#gr=new Mesh(i),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let _,b;const checkArea=m=>{let g=this.#ar;if(_i&&g===_i){let _,b,y=g.pixelRectObject;const{x:T,y:w}=this.getCanvasEventPoint(m,i);if(_=T*window.devicePixelRatio*i.renderScale,b=w*window.devicePixelRatio*i.renderScale,!(y.x<_&&_<y.x+y.width))return;if(!(y.y<b&&b<y.y+y.height))return}return!0};_=0,b=0;const HD_Move=m=>{const{x:g,y:y}=this.getCanvasEventPoint(m,i),T=g-_,w=y-b;_=g,b=y,this.#mr-=T*this.#lr*.1,this.#pr-=w*this.#lr*.1},HD_up=()=>{_i=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{if(_i=this.#ar,!checkArea(m))return;const{x:y,y:T}=this.getCanvasEventPoint(m,i);_=y,b=T,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)})}get x(){return this.#gr.x}set x(i){validateNumber(i),this.#gr.x=i,this.#dr[0]=i}get y(){return this.#gr.y}set y(i){validateNumber(i),this.#gr.y=i,this.#dr[1]=i}get z(){return this.#gr.z}set z(i){validateNumber(i),this.#gr.z=i,this.#dr[2]=i}get tilt(){return this.#pr}set tilt(i){validateNumber(i),this.#gr.rotationX=i,this.#pr=i}get pan(){return this.#mr}set pan(i){validateNumber(i),this.#gr.rotationY=i,this.#mr=i}get keyNameMapper(){return{...this.#sr}}setMoveForwardKey(i){this.#sr.moveForward=i}setMoveBackKey(i){this.#sr.moveBack=i}setMoveLeftKey(i){this.#sr.moveLeft=i}setMoveRightKey(i){this.#sr.moveRight=i}setMoveUpKey(i){this.#sr.moveUp=i}setMoveDownKey(i){this.#sr.moveDown=i}setTurnLeftKey(i){this.#sr.turnLeft=i}setTurnRightKey(i){this.#sr.turnRight=i}setTurnUpKey(i){this.#sr.turnUp=i}setTurnDownKey(i){this.#sr.turnDown=i}update(i,m){this.#ar=i;const g=this.#ur,_=this.#cr,b=this.#dr,y=this.#gr;y.rotationY+=(this.#mr-y.rotationY)*_,y.rotationX+=(this.#pr-y.rotationX)*_,this.#xr(i)&&(vi=y.modelMatrix,identity$2(bi),rotateY$3(bi,bi,y.rotationY*Math.PI/180),rotateX$3(bi,bi,y.rotationX*Math.PI/180),translate$1(bi,bi,yi),identity$2(vi),translate$1(vi,vi,y.position),multiply$5(vi,vi,bi),b[0]=vi[12],b[1]=vi[13],b[2]=vi[14]),y.x+=(b[0]-y.x)*g,y.y+=(b[1]-y.y)*g,y.z+=(b[2]-y.z)*g,y.rotationY+=(this.#mr-y.rotationY)*_,y.rotationX+=(this.#pr-y.rotationX)*_,vi=y.modelMatrix,identity$2(vi),translate$1(vi,vi,y.position),rotateY$3(vi,vi,y.rotationY*Math.PI/180),rotateX$3(vi,vi,y.rotationX*Math.PI/180);const T=clone$5(vi);translate$1(T,T,[0,0,.01]),this.camera.setPosition(T[12],T[13],T[14]),this.camera.lookAt(y.x,y.y,y.z)}#xr(i){if(!i.checkMouseInViewBounds())return;const m=this.#or,g=this.#lr,{keyboardKeyBuffer:_}=i.redGPUContext,b=this.#sr;let y=!1,T=!1,w=0,P=0;yi[0]=0,yi[1]=0,yi[2]=0;const $=this.#fr*m;return _[b.turnLeft]&&(T=!0,w=g),_[b.turnRight]&&(T=!0,w=-g),_[b.turnUp]&&(T=!0,P=g),_[b.turnDown]&&(T=!0,P=-g),_[b.moveForward]&&(y=!0,yi[2]=-$),_[b.moveBack]&&(y=!0,yi[2]=$),_[b.moveLeft]&&(y=!0,yi[0]=-$),_[b.moveRight]&&(y=!0,yi[0]=$),_[b.moveUp]&&(y=!0,yi[1]=$),_[b.moveDown]&&(y=!0,yi[1]=-$),T||y?(this.#fr+=.1,this.#fr>this.#hr&&(this.#fr=this.#hr)):(this.#fr+=-.1,this.#fr<0&&(this.#fr=0)),T&&(this.#mr+=w,this.#pr+=P),y||T}},Camera2D:Camera2D,ObitController:class extends AController{#e;#r;#_r=0;#vr=0;#br=0;#yr=15;#Tr=2;#Sr=.1;#lr=3;#cr=.1;#wr=-35;#Mr=-90;#Rr=90;#Pr=0;#Cr=0;#Ir=0;#Er=0;#Lr=new Set;#Br=-1;constructor(i){super(),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let _,b;const findTargetView=m=>{const{x:g,y:_}=this.getCanvasEventPoint(m,i);let b,y;b=g*window.devicePixelRatio*i.renderScale,y=_*window.devicePixelRatio*i.renderScale;for(const i of this.#Lr){const m=i.pixelRectObject;if(m.x<b&&b<m.x+m.width&&m.y<y&&y<m.y+m.height)return i}return null};_=0,b=0;const HD_Move=m=>{if(!Ti)return;const{x:g,y:y}=this.getCanvasEventPoint(m,i),T=g-_,w=y-b;_=g,b=y,this.#Pr-=T*this.#lr*.1,this.#wr-=w*this.#lr*.1},HD_up=()=>{Ti=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{const y=findTargetView(m);if(!y)return;Ti=y;const{x:T,y:w}=this.getCanvasEventPoint(m,i);_=T,b=w,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)}),i.htmlCanvas.addEventListener("wheel",i=>{findTargetView(i)&&(this.#yr+=i.deltaY/100*this.#Tr)})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get centerX(){return this.#_r}set centerX(i){this.#_r=i}get centerY(){return this.#vr}set centerY(i){this.#vr=i}get centerZ(){return this.#br}set centerZ(i){this.#br=i}get distance(){return this.#yr}set distance(i){validateNumberRange(i,0),this.#yr=i}get speedDistance(){return this.#Tr}set speedDistance(i){validateNumberRange(i,.01),this.#Tr=i}get delayDistance(){return this.#Sr}set delayDistance(i){validateNumberRange(i,.01,.99),this.#Sr=i}get speedRotation(){return this.#lr}set speedRotation(i){validateNumberRange(i,.01),this.#lr=i}get delayRotation(){return this.#cr}set delayRotation(i){validateNumberRange(i,.01,.99),this.#cr=i}get minTilt(){return this.#Mr}set minTilt(i){validateNumberRange(i,-90,90),this.#Mr=i}get maxTilt(){return this.#Rr}set maxTilt(i){validateNumberRange(i,-90,90),this.#Rr=i}get pan(){return this.#Pr}set pan(i){this.#Pr=i}get tilt(){return this.#wr}set tilt(i){validateNumberRange(i,-90,90),this.#wr=i}update(i,m){this.#Br!==m&&(this.#Br=m,this.#Lr.clear()),this.#Lr.add(i),1===this.#Lr.size&&this.#Ur()}#Ur(){const i=Math.PI/180;this.#wr<this.#Mr&&(this.#wr=this.#Mr),this.#wr>this.#Rr&&(this.#wr=this.#Rr);const{camera:m}=this;this.#Cr+=(this.#Pr-this.#Cr)*this.#cr,this.#Ir+=(this.#wr-this.#Ir)*this.#cr,this.#yr<m.nearClipping&&(this.#yr=m.nearClipping),this.#Er+=(this.#yr-this.#Er)*this.#Sr,this.#Er<m.nearClipping&&(this.#Er=m.nearClipping);const g=m.modelMatrix;identity$2(g),translate$1(g,g,[this.#_r,this.#vr,this.#br]),rotateY$3(g,g,this.#Cr*i),rotateX$3(g,g,this.#Ir*i),translate$1(g,g,[0,0,this.#Er]),m.x=g[12],m.y=g[13],m.z=g[14],this.camera.lookAt(this.#_r,this.#vr,this.#br)}},OrthographicCamera:OrthographicCamera,PerspectiveCamera:PerspectiveCamera});class RedGPUContextSizeManager{#Dr;#Ar;#v;#kr=[0,0,0,0];#Or;#Nr=1;constructor(i,m="100%",g="100%"){this.#v=i,this.#Or=i.htmlCanvas,this.#Or.style.boxSizing="border-box",this.#Dr=m,this.#Ar=g}get renderScale(){return this.#Nr}set renderScale(i){validateNumber(i),i<=0&&(i=.01),this.#Nr=i,this.setSize()}get width(){return this.#Dr}set width(i){this.setSize(i,this.#Ar)}get height(){return this.#Ar}set height(i){this.setSize(this.#Dr,i)}get pixelRectArray(){return this.#kr}get pixelRectObject(){return{x:this.#kr[0],y:this.#kr[1],width:this.#kr[2],height:this.#kr[3]}}get parentDomRect(){return(this.#Or.parentNode||document.body).getBoundingClientRect()}get screenRectObject(){return{x:this.#kr[0]/devicePixelRatio,y:this.#kr[1]/devicePixelRatio,width:this.#kr[2]/devicePixelRatio,height:this.#kr[3]/devicePixelRatio}}static validateSizeValue=i=>{switch(typeof i){case"number":validatePositiveNumberRange(i);break;case"string":new RegExp(/^[+]?^[.]?(\d+)(\.\d+)?(?:px|%|$)/gm).test(i)||consoleAndThrowError(`allow positive number,%,px model/input:${i}`);break;default:consoleAndThrowError(`positive number,%,px model/input:${i}`)}};static validatePositionValue=i=>{switch(typeof i){case"number":validateNumber(i);break;case"string":new RegExp(/^-?\d+(\.\d+)?(px|%)?$/).test(i)||consoleAndThrowError(`allow number,%,px model /input:${i}`);break;default:consoleAndThrowError(`number,%,px model/input:${i}`)}};static getPixelDimension(i,m,g){return"number"==typeof g?g:RedGPUContextSizeManager.calculateSizeFromString(i,m,g)}static calculateSizeFromString(i,m,g){return g.includes("%")?Math.floor(i[m]*+g.replace("%","")/100):+g.replace("px","")}setSize(i=this.#Dr,m=this.#Ar){RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#Dr=i,this.#Ar=m;const g=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"width",i),_=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"height",m);this.#Fr(g,_),this.#Gr(g,_),this.#Vr()}#Gr(i,m){this.#kr[2]=Math.floor(i*this.#Nr*window.devicePixelRatio),this.#kr[3]=Math.floor(m*this.#Nr*window.devicePixelRatio)}#Vr(){this.#v.onResize&&this.#v.onResize(this.screenRectObject.width,this.screenRectObject.height),this.#v.viewList.forEach(i=>{i.setSize(),i.setPosition()})}#Fr(i,m){const g=this.#Or,{style:_}=g;g.width=i*this.#Nr*window.devicePixelRatio,g.height=m*this.#Nr*window.devicePixelRatio,_.width=`${i}px`,_.height=`${m}px`}}class PassClusterLightBound{#$r;#Hr;#zr;#Kr;#qr;#v;constructor(i,m){validateRedGPUContext(i),this.#v=i,this.#$r=m,this.#Wr()}get clusterBoundBuffer(){return this.#Hr}render(){const i=this.#$r.systemUniform_Vertex_UniformBindGroup;if(i){const{gpuDevice:m}=this.#v,g=m.createCommandEncoder(),_=g.beginComputePass({label:"Bound cluster"}),b=Yr.getDispatchSize();_.setPipeline(this.#qr),_.setBindGroup(0,i),_.setBindGroup(1,this.#Kr),_.dispatchWorkgroups(b[0],b[1],b[2]),_.end(),m.queue.submit([g.finish()])}}#Wr(){const{gpuDevice:i,resourceManager:m}=this.#v,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\r\n@group(1) @binding(0) var<storage,read_write> clusterLight_Clusters:ClusterLight_Clusters;\r\n\r\nfn lineIntersectionToZPlane(a:vec3<f32>,b:vec3<f32>,zDistance:f32) -> vec3<f32> {\rlet normal=vec3<f32>(0.0,0.0,0.5);\rlet ab=b - a;\rlet t=(zDistance - dot(normal,a))/dot(normal,ab);\rreturn a + t * ab;\r\n}\r\n\r\nfn clipToView(clip:vec4<f32>) -> vec4<f32> {\rlet view=systemUniforms.inverseProjectionMatrix * clip;\rreturn view/vec4<f32>(view.w,view.w,view.w,view.w);\r\n}\r\n\r\nfn screen2View(screen:vec4<f32>) -> vec4<f32> {\rlet texCoord=screen.xy/systemUniforms.resolution.xy;\rlet clip=vec4<f32>(vec2<f32>(texCoord.x,1.0 - texCoord.y) * 2.0 - vec2<f32>(1.0,1.0),screen.z,screen.w );\rreturn clipToView(clip);\r\n}\r\n\r\nconst eyePos=vec3<f32>(0.0);\r\n\r\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\r\n\r\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) {\r\rlet tileIndex=global_id.x +\rglobal_id.y * clusterLight_tileCount.x +\rglobal_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y;\r\n\r\rlet tileSize=vec2<f32>(\rsystemUniforms.resolution.x/f32(clusterLight_tileCount.x),\rsystemUniforms.resolution.y/f32(clusterLight_tileCount.y)\r);\r\n\r\rlet global_id_x_pos_one=vec2<f32>(f32(global_id.x + 1u),f32(global_id.y + 1u)) * tileSize;\rlet global_id_x_y=vec2<f32>(f32(global_id.x),f32(global_id.y)) * tileSize;\r\n\rlet maxPoint_sS=vec4<f32>(global_id_x_pos_one,0.0,1.0);\rlet minPoint_sS=vec4<f32>(global_id_x_y,0.0,1.0);\r\n\rlet maxPoint_vS=screen2View(maxPoint_sS).xyz;\rlet minPoint_vS=screen2View(minPoint_sS).xyz;\r\n\r\rlet nearFarX=systemUniforms.camera.nearClipping;\rlet nearFarY=systemUniforms.camera.farClipping;\r\n\rlet tileZ=f32(global_id.z)/f32(clusterLight_tileCount.z);\rlet tileZ_plus_one=f32(global_id.z + 1u)/f32(clusterLight_tileCount.z);\r\n\rlet tileNear=-nearFarX * pow(nearFarY/nearFarX,tileZ);\rlet tileFar=-nearFarX * pow(nearFarY/nearFarX,tileZ_plus_one);\r\n\r\rlet minPointNear=lineIntersectionToZPlane(eyePos,minPoint_vS,tileNear);\rlet minPointFar=lineIntersectionToZPlane(eyePos,minPoint_vS,tileFar);\rlet maxPointNear=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileNear);\rlet maxPointFar=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileFar);\r\n\r\rlet minAABB=min(min(minPointNear,minPointFar),min(maxPointNear,maxPointFar));\rlet maxAABB=max(max(minPointNear,minPointFar),max(maxPointNear,maxPointFar));\r\n\rclusterLight_Clusters.cubeList[tileIndex].minAABB=vec4<f32>(minAABB,0.0);\rclusterLight_Clusters.cubeList[tileIndex].maxAABB=vec4<f32>(maxAABB,0.0);\r\n}\r\n").shaderSource;this.#Hr=i.createBuffer({size:32*Yr.getTotalTileSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),this.#zr=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),this.#Kr=i.createBindGroup({label:"clusterBoundBindGroup",layout:this.#zr,entries:[{binding:0,resource:{buffer:this.#Hr}}]}),this.#qr=i.createComputePipeline({label:"clusterBoundPipeline",layout:i.createPipelineLayout({bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),this.#zr]}),compute:{module:i.createShaderModule({code:g,label:"Cluster Bounds"}),entryPoint:"main"}})}}const wi=new Uint32Array([0,0,0,0]);class PassClustersLight{#$r;#Xr;#jr;#Yr;#v;constructor(i,m){validateRedGPUContext(i),this.#v=i,this.#$r=m,this.#Wr()}get clusterLightsBuffer(){return this.#Yr}render(){const{gpuDevice:i}=this.#v,m=this.#$r.systemUniform_Vertex_UniformBindGroup;if(m){const g=i.createCommandEncoder(),_=g.beginComputePass({label:"ClusterLight cluster"}),b=Yr.getDispatchSize();this.#v.gpuDevice.queue.writeBuffer(this.clusterLightsBuffer,0,wi),_.setPipeline(this.#jr),_.setBindGroup(0,m),_.setBindGroup(1,this.#Xr),_.dispatchWorkgroups(b[0],b[1],b[2]),_.end(),i.queue.submit([g.finish()])}}#Wr(){const{gpuDevice:i,resourceManager:m}=this.#v,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\r\n@group(1) @binding(0) var<storage> clusterLight_Clusters:ClusterLight_Clusters;\r\n\r\nfn pointLight_testSphereAABB(light:u32, tile:u32) -> bool {\r\rlet targetLight=clusterLightList.lights[light];\rlet targetTile=clusterLight_Clusters.cubeList[tile];\r\n\r\rlet radius:f32=targetLight.radius;\rlet position:vec3<f32>=targetLight.position;\rlet center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz;\r\n\r\rlet squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz);\r\n\rreturn squaredDistance <=(radius * radius);\r\n}\r\n\r\nfn pointLight_sqDistPointAABB(targetPoint:vec3<f32>,tile:u32,minAABB:vec3<f32>,maxAABB:vec3<f32>) -> f32 {\rvar sqDist=0.0;\rfor(var i=0u;i < 3u;i=i + 1u) {\r\rlet v=targetPoint[i];\rlet _minAABB=minAABB[i];\rlet _maxAABB=maxAABB[i];\r\n\rif(v < _minAABB){\rsqDist += (_minAABB - v) * (_minAABB - v);\r}\rif(v > _maxAABB){\rsqDist +=(v - _maxAABB) * (v - _maxAABB);\r}\r}\r\n\rreturn sqDist;\r\n}\r\n\r\nfn spotLight_testSphereAABB(light:u32,tile:u32) -> bool {\rlet targetLight=clusterLightList.lights[light];\rlet targetTile=clusterLight_Clusters.cubeList[tile];\r\n\rlet radius:f32=targetLight.radius;\rlet position:vec3<f32>=targetLight.position;\rlet center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz;\r\n\r\rlet squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz);\r\n\rreturn squaredDistance <=(radius * radius);\r\n}\r\n\r\n\r\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\r\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) {\rlet tileIndex=global_id.x +\rglobal_id.y * clusterLight_tileCount.x +\rglobal_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y;\r\n\rvar clusterLightCount=0u;\rvar clusterLightIndices:array<u32,REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu>;\r\n\r\rfor (var i=0u;i < u32(clusterLightList.count[0]);i=i + 1u) {\rlet lightInCluster=pointLight_testSphereAABB(i,tileIndex);\r\n\rif (lightInCluster) {\rclusterLightIndices[clusterLightCount]=i;\rclusterLightCount=clusterLightCount + 1u;\r}\r\n\rif (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) {\rbreak;\r}\r}\r\n\r\rlet spotLightStartIndex=u32(clusterLightList.count[0]);\rfor (var i=0u;i < u32(clusterLightList.count[1]);i=i + 1u) {\rlet actualLightIndex=spotLightStartIndex + i;\r\n\r\rlet sphereTest=spotLight_testSphereAABB(actualLightIndex,tileIndex);\r\n\rif (sphereTest) {\rclusterLightIndices[clusterLightCount]=actualLightIndex;\rclusterLightCount=clusterLightCount + 1u;\r}\r\n\rif (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) {\rbreak;\r}\r}\r\n\rvar offset=atomicAdd(&clusterLightGroup.offset,clusterLightCount);\r\n\rfor(var i=0u;i < clusterLightCount;i=i + 1u) {\rclusterLightGroup.indices[offset + i]=clusterLightIndices[i];\r}\r\n\rclusterLightGroup.lights[tileIndex].offset=offset;\rclusterLightGroup.lights[tileIndex].count=clusterLightCount;\r\n}\r\n").shaderSource;this.#Yr=i.createBuffer({size:Yr.getClusterLightsBufferSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const _=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]});this.#Xr=i.createBindGroup({label:"clusterLightBindGroup",layout:_,entries:[{binding:0,resource:{buffer:this.#$r.passLightClustersBound.clusterBoundBuffer}}]}),this.#jr=i.createComputePipeline({label:"clusterLightPipeline",layout:i.createPipelineLayout({bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),_]}),compute:{module:i.createShaderModule({code:g,label:"Cluster Light"}),entryPoint:"main"}})}}class PickingEvent{pickingId;mouseX;mouseY;target;time;type;movementX=0;movementY=0;localX=0;localY=0;localZ=0;altKey=!1;ctrlKey=!1;shiftKey=!1;constructor(i,m,g,_,b,y,T){this.pickingId=i,this.mouseX=m,this.mouseY=g,this.target=_,this.time=b,this.type=y,this.altKey=T.altKey,this.ctrlKey=T.ctrlKey,this.shiftKey=T.shiftKey}}const Mi={MOVE:"move",DOWN:"down",UP:"up",OVER:"over",OUT:"out",CLICK:"click"};class PickingManager{lastMouseEvent;lastMouseClickEvent;#Zr;#Jr;#Qr;#en;#v;#$r;#tn=[];#rn=0;#nn=0;#in;#an;get mouseX(){return this.#rn}set mouseX(i){this.#rn=i}get mouseY(){return this.#nn}set mouseY(i){this.#nn=i}get castingList(){return this.#tn}get pickingGPUTexture(){return this.#Qr}get pickingGPUTextureView(){return this.#en}get pickingDepthGPUTextureView(){return this.#Jr}resetCastingList(){this.#tn.length=0}destroy(){this.#Qr&&(this.#Qr.destroy(),this.#Zr.destroy(),this.#Qr=null,this.#en=null,this.#Zr=null,this.#Jr=null)}checkTexture(i){const{redGPUContext:m}=i;this.#$r=i,this.#v=m,this.#Qr?.width===this.#$r.pixelRectObject.width&&this.#Qr?.height===this.#$r.pixelRectObject.height||(this.destroy(),this.#Qr=this.#sn(navigator.gpu.getPreferredCanvasFormat()),this.#en=this.#Qr.createView({label:this.#Qr.label}),this.#Zr=this.#sn("depth32float"),this.#Jr=this.#Zr.createView({label:this.#Zr.label}))}checkEvents(i,m){this.#on(i,m),this.resetCastingList()}#sn(i){const{gpuDevice:m}=this.#v;return m.createTexture({size:[this.#$r.pixelRectObject.width,this.#$r.pixelRectObject.height,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,format:i,sampleCount:1,label:`pickingGPUTexture_${this.#$r.pixelRectObject.width}x${this.#$r.pixelRectObject.height}_${Date.now()}`})}#on=async(i,m,g=1,_=1)=>{const{gpuDevice:b}=i.redGPUContext,{pixelRectArray:y}=i,T=this.#rn,w=this.#nn;if(T<=0||T>=y[2]||w<=0||w>=y[3])return;const P=this.#un(),$=this.#ln(b,g,_,T,w),H=await this.#cn($);$.destroy(),H?(this.#hn(H,T,w,m,P),this.#fn(H,T,w,m,P)):this.#dn(),this.lastMouseEvent=null,this.lastMouseClickEvent=null};#un=()=>this.#tn.reduce((i,m)=>(i[m.pickingId]=m,i),{});#ln=(i,m,g,_,b)=>{const y=i.createCommandEncoder(),T=i.createBuffer({size:16*m*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),w={texture:this.#Qr,origin:{x:_,y:b,z:0}},P={buffer:T,bytesPerRow:Math.max(256,4*m*g),rowsPerImage:1},$={width:m,height:g,depthOrArrayLayers:1};return y.copyTextureToBuffer(w,P,$),i.queue.submit([y.finish()]),T};#hn=(i,m,g,_,b)=>{const y=b[i],T=this.lastMouseClickEvent?.type;if(T===Mi.CLICK){const b=new PickingEvent(i,m,g,y,_,T,this.lastMouseClickEvent);this.#mn(T,b)}};#fn=(i,m,g,_,b)=>{const y=b[i],T=this.lastMouseEvent?.type;if(T){const b=new PickingEvent(i,m,g,y,_,T,this.lastMouseEvent);switch(this.#in&&(b.movementX=m-this.#in.mouseX,b.movementY=g-this.#in.mouseY),T){case Mi.DOWN:case Mi.UP:this.#mn(T,b);break;case Mi.MOVE:this.#pn(i,y,b)}this.#in=b}};#pn=(i,m,g)=>{const _=this.#in?.pickingId;_!==i?(this.#in&&_&&_!==i&&this.#dn(),this.#an!==m&&(this.#mn(Mi.OVER,g),document.body.style.cursor="pointer"),this.#an=m):this.#mn(Mi.MOVE,g)};#dn=()=>{this.#in&&this.#mn(Mi.OUT,this.#in),this.#in=null,this.#an=null,document.body.style.cursor="default"};async#cn(i){await i.mapAsync(GPUMapMode.READ);const m=new DataView(i.getMappedRange()),g="rgba8unorm"==this.#Qr.format?[0,1,2,3]:[2,1,0,3],_=m.getUint8(g[0]),b=m.getUint8(g[1]),y=m.getUint8(g[2]);return(m.getUint8(g[3])<<24|y<<16|b<<8|_)>>>0}#mn(i,m){m.target.events[i]&&m.target.events[i](m)}}Object.freeze(PickingManager);const Ri=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include calcTintBlendMode;\r\n#redgpu_include drawPicking;\r\n\r\nstruct Uniforms {\ruseDiffuseTexture:u32,\r\ropacity:f32,\ruseTint:u32,\rtint:vec4<f32>,\rtintBlendMode:u32,\r\n};\r\n\r\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\r\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\r\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\r\n\r\nstruct InputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n@fragment\r\nfn main(inputData:InputData) -> @location(0) vec4<f32> {\r\rvar finalColor:vec4<f32>=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv);\rfinalColor=vec4<f32>(finalColor.rgb,finalColor.a * uniforms.opacity * inputData.combinedOpacity);\r\n\rif(uniforms.useTint==1u){\rfinalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);\r}\r\n\r\rif (systemUniforms.isView3D==1 && finalColor.a==0.0) {\rdiscard;\r}\r\n\rreturn finalColor;\r\n};\r\n");class BitmapMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"BITMAP_MATERIAL",Ri,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}dn.defineByPreset(BitmapMaterial,[dn.PRESET_TEXTURE.DIFFUSE_TEXTURE,dn.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(BitmapMaterial);const Pi={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DIFFERENCE:6,EXCLUSION:7};const Ci=parseWGSL("#redgpu_include drawPicking;\r\n#redgpu_include calcTintBlendMode;\r\nstruct Uniforms {\rcolor:vec3<f32>,\r\ropacity:f32,\ruseTint:u32,\rtint:vec4<f32>,\rtintBlendMode:u32,\r\n};\r\n\r\nstruct InputData {\r\r@builtin(position) position:vec4<f32>,\r@location(12) combinedOpacity:f32,\r@location(15) pickingId:vec4<f32>,\r\n}\r\n\r\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\r\n@fragment\r\nfn main(inputData:InputData) -> @location(0) vec4<f32> {\rvar finalColor=vec4<f32>( uniforms.color.r,uniforms.color.g,uniforms.color.b,uniforms.opacity * inputData.combinedOpacity);\rif(uniforms.useTint==1u){\rfinalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);\r}\rreturn finalColor;\r\n}\r\n\r\n\r\n");class ColorMaterial extends ABaseMaterial{constructor(i,m="#fff"){super(i,"COLOR_MATERIAL",Ci,2),this.initGPURenderInfos(),this.color.setColorByHEX(m)}}dn.defineByPreset(ColorMaterial,[dn.PRESET_COLOR_RGB.COLOR]),Object.freeze(ColorMaterial);const Ii=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include calcTintBlendMode;\r\n#redgpu_include calcDirectionalShadowVisibility;\r\n#redgpu_include normalFunctions;\r\n#redgpu_include drawPicking;\r\nstruct Uniforms {\ruseDiffuseTexture:u32,\rcolor:vec3<f32>,\r\remissiveColor:vec3<f32>,\remissiveStrength:f32,\ruseEmissiveTexture:u32,\r\rspecularColor:vec3<f32>,\rspecularStrength:f32,\ruseSpecularTexture:u32,\rshininess:f32,\r\ruseAoTexture:u32,\raoStrength:f32,\r\ruseAlphaTexture:u32,\r\ruseNormalTexture:u32,\rnormalScale:f32,\r\ropacity:f32,\ruseTint:u32,\rtint:vec4<f32>,\rtintBlendMode:u32,\r\r\n};\r\n\r\nstruct InputData {\r\r@builtin(position) position:vec4<f32>,\r\n\r\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(14) receiveShadow:f32,\r@location(15) pickingId:vec4<f32>,\r\n}\r\n\r\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\r\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\r\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\r\n@group(2) @binding(3) var alphaTextureSampler:sampler;\r\n@group(2) @binding(4) var alphaTexture:texture_2d<f32>;\r\n@group(2) @binding(5) var specularTextureSampler:sampler;\r\n@group(2) @binding(6) var specularTexture:texture_2d<f32>;\r\n@group(2) @binding(7) var emissiveTextureSampler:sampler;\r\n@group(2) @binding(8) var emissiveTexture:texture_2d<f32>;\r\n@group(2) @binding(9) var aoTextureSampler:sampler;\r\n@group(2) @binding(10) var aoTexture:texture_2d<f32>;\r\n@group(2) @binding(11) var normalTextureSampler:sampler;\r\n@group(2) @binding(12) var normalTexture:texture_2d<f32>;\r\n\r\n\r\n@fragment\r\nfn main(inputData:InputData) -> @location(0) vec4<f32> {\r\n\r\rlet u_ambientLight=systemUniforms.ambientLight;\rlet u_ambientLightColor=u_ambientLight.color;\rlet u_ambientLightIntensity=u_ambientLight.intensity;\r\n\r\rlet u_directionalLightCount=systemUniforms.directionalLightCount;\rlet u_directionalLights=systemUniforms.directionalLights;\rlet u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize;\rlet u_bias=systemUniforms.bias;\r\n\r\n\r\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\n\r\n\r\rlet u_color=uniforms.color;\rlet u_aoStrength=uniforms.aoStrength;\rlet u_emissiveColor=uniforms.emissiveColor;\rlet u_emissiveStrength=uniforms.emissiveStrength;\rlet u_normalScale=uniforms.normalScale;\rlet u_specularColor=uniforms.specularColor;\rlet u_specularStrength=uniforms.specularStrength;\rlet u_shininess=uniforms.shininess;\rlet u_opacity=uniforms.opacity;\rlet E=normalize(u_cameraPosition);\r\rlet u_useDiffuseTexture=uniforms.useDiffuseTexture==1;\rlet u_useAlphaTexture=uniforms.useAlphaTexture==1;\rlet u_useSpecularTexture=uniforms.useSpecularTexture==1;\rlet u_useEmissiveTexture=uniforms.useEmissiveTexture==1;\rlet u_useAoTexture=uniforms.useAoTexture==1;\rlet u_useNormalTexture=uniforms.useNormalTexture==1;\r\rlet receiveShadowYn=inputData.receiveShadow !=.0;\r\n\r\n\r\r\n\r\rvar N=normalize(inputData.vertexNormal);\rif(u_useNormalTexture){\rlet normalSamplerColor=textureSample(normalTexture,normalTextureSampler,inputData.uv).rgb;\rN=perturb_normal( N,inputData.vertexPosition,inputData.uv,normalSamplerColor,u_normalScale );\r}else{\rN=N * u_normalScale;\r}\r\rvar finalColor:vec4<f32>;\rvar resultAlpha:f32=u_opacity * inputData.combinedOpacity;\rvar diffuseColor:vec3<f32>=u_color;\rif(u_useDiffuseTexture){\rlet diffuseSampleColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv);\rdiffuseColor=diffuseSampleColor.rgb;\rresultAlpha=resultAlpha * diffuseSampleColor.a;\r}\r\n\rvar specularSamplerValue:f32=1;\rif(u_useSpecularTexture){\rspecularSamplerValue=textureSample(specularTexture,specularTextureSampler,inputData.uv).r;\r}\rvar mixColor:vec3<f32>;\r\n\rvar visibility:f32=1.0;\rvisibility=calcDirectionalShadowVisibility(\rdirectionalShadowMap,\rdirectionalShadowMapSampler,\ru_shadowDepthTextureSize,\ru_bias,\rinputData.shadowPos,\r\n\r);\r\n\rif(!receiveShadowYn){\rvisibility=1.0;\r}\r\n\rfor (var i=0u;i < u_directionalLightCount;i=i + 1) {\rlet u_directionalLightDirection=u_directionalLights[i].direction;\rlet u_directionalLightColor=u_directionalLights[i].color;\rlet u_directionalLightIntensity=u_directionalLights[i].intensity;\r\n\rlet L=normalize(u_directionalLightDirection);\rlet R=reflect(L,N);\rlet lambertTerm=max(dot(N,-L),0.0);\rlet specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue;\r\n\r\rlet lightContribution=u_directionalLightColor * u_directionalLightIntensity * visibility;\rlet ld=diffuseColor * lightContribution * lambertTerm;\rlet ls=u_specularColor * u_specularStrength * lightContribution * specular;\r\n\rmixColor +=ld + ls;\r\n\r}\r\n\r\rlet clusterIndex=getClusterLightClusterIndex(inputData.position);\rlet lightOffset =clusterLightGroup.lights[clusterIndex].offset;\rlet lightCount:u32 =clusterLightGroup.lights[clusterIndex].count;\r\n\rfor (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) {\rlet i=clusterLightGroup.indices[lightOffset + lightIndex];\rlet u_clusterLightPosition=clusterLightList.lights[i].position;\rlet u_clusterLightColor=clusterLightList.lights[i].color;\rlet u_clusterLightIntensity=clusterLightList.lights[i].intensity;\rlet u_clusterLightRadius=clusterLightList.lights[i].radius;\rlet u_isSpotLight=clusterLightList.lights[i].isSpotLight;\r\n\rlet lightDir=u_clusterLightPosition - inputData.vertexPosition;\rlet lightDistance=length(lightDir);\r\n\r\rif (lightDistance > u_clusterLightRadius) {\rcontinue;\r}\r\n\rlet L=normalize(lightDir);\r\n\rlet attenuation=clamp(1.0 - (lightDistance * lightDistance)/(u_clusterLightRadius * u_clusterLightRadius),0.0,1.0);\r\n\rvar finalAttenuation=attenuation;\r\n\r\rif (u_isSpotLight > 0.0) {\rlet u_clusterLightDirection=normalize(vec3<f32>(\rclusterLightList.lights[i].directionX,\rclusterLightList.lights[i].directionY,\rclusterLightList.lights[i].directionZ\r));\rlet u_clusterLightInnerAngle=clusterLightList.lights[i].innerCutoff;\rlet u_clusterLightOuterCutoff=clusterLightList.lights[i].outerCutoff;\r\n\r\rlet lightToVertex=normalize(-lightDir);\rlet cosTheta=dot(lightToVertex,u_clusterLightDirection);\r\n\rlet cosOuter=cos(radians(u_clusterLightOuterCutoff));\rlet cosInner=cos(radians(u_clusterLightInnerAngle));\r\n\r\rif (cosTheta < cosOuter) {\rcontinue;\r}\r\n\r\rlet epsilon=cosInner - cosOuter;\rlet spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0);\r\n\rfinalAttenuation *=spotIntensity;\r}\r\n\r\rlet R=reflect(-L,N);\rlet diffuse=diffuseColor * max(dot(N,L),0.0);\rlet specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue;\r\n\r\rlet diffuseAttenuation=finalAttenuation;\rlet specularAttenuation=finalAttenuation * finalAttenuation;\r\n\rlet ld=u_clusterLightColor * diffuse * diffuseAttenuation * u_clusterLightIntensity;\rlet ls=u_specularColor * u_specularStrength * specular * specularAttenuation * u_clusterLightIntensity;\r\n\rmixColor +=ld + ls;\r}\r\n\r\n\rif(u_useAlphaTexture){\rlet alphaMapValue:f32=textureSample(alphaTexture,alphaTextureSampler,inputData.uv).r;\rresultAlpha=alphaMapValue * resultAlpha;\rif(resultAlpha==0){\rdiscard;\r}\r}\rvar emissiveColor=u_emissiveColor * u_emissiveStrength;\rif(u_useEmissiveTexture){\remissiveColor=textureSample(emissiveTexture,emissiveTextureSampler,inputData.uv).rgb * u_emissiveStrength;\r}\rif(u_useAoTexture){\rmixColor=mixColor * textureSample(aoTexture,aoTextureSampler,inputData.uv).rgb * u_aoStrength;\r}\rfinalColor=vec4<f32>(mixColor + emissiveColor,resultAlpha);\rif(uniforms.useTint==1u){\rfinalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);\r}\r\rif (systemUniforms.isView3D==1 && finalColor.a==0.0) {\rdiscard;\r}\rreturn finalColor;\r\n}\r\n");class PhongMaterial extends ABitmapBaseMaterial{#gn;#xn=1;constructor(i,m="#fff",g){super(i,"PHONG_MATERIAL",Ii,2),g&&(this.name=g),this.initGPURenderInfos(),this.color.setColorByHEX(m),this.emissiveColor.setColorByHEX(this.emissiveColor.hex),this.specularColor.setColorByHEX(this.specularColor.hex)}get displacementScale(){return this.#xn}set displacementScale(i){this.#xn=i}get displacementTexture(){return this.#gn}set displacementTexture(i){const m=this.#gn;this.#gn=i,this.updateTexture(m,i),this.dirtyPipeline=!0}}dn.defineByPreset(PhongMaterial,[dn.PRESET_COLOR_RGB.COLOR,dn.PRESET_TEXTURE.ALPHA_TEXTURE,dn.PRESET_SAMPLER.ALPHA_TEXTURE_SAMPLER,dn.PRESET_TEXTURE.AO_TEXTURE,dn.PRESET_SAMPLER.AO_TEXTURE_SAMPLER,dn.PRESET_POSITIVE_NUMBER.AO_STRENGTH,dn.PRESET_TEXTURE.DIFFUSE_TEXTURE,dn.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER,dn.PRESET_TEXTURE.EMISSIVE_TEXTURE,dn.PRESET_SAMPLER.EMISSIVE_TEXTURE_SAMPLER,dn.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,[dn.PRESET_COLOR_RGB.EMISSIVE_COLOR,"#000000"],dn.PRESET_TEXTURE.NORMAL_TEXTURE,dn.PRESET_SAMPLER.NORMAL_TEXTURE_SAMPLER,dn.PRESET_POSITIVE_NUMBER.NORMAL_SCALE,dn.PRESET_TEXTURE.SPECULAR_TEXTURE,dn.PRESET_SAMPLER.SPECULAR_TEXTURE_SAMPLER,dn.PRESET_POSITIVE_NUMBER.SPECULAR_STRENGTH,[dn.PRESET_COLOR_RGB.SPECULAR_COLOR,"#ffffff"],[dn.PRESET_POSITIVE_NUMBER.SHININESS,32]]),Object.freeze(PhongMaterial);var Ei=Object.freeze({__proto__:null,ABaseMaterial:ABaseMaterial,ABitmapBaseMaterial:ABitmapBaseMaterial,BLEND_MODE:Pi,BitmapMaterial:BitmapMaterial,COMPOSITE_MODE:{ADDITIVE:"additive",SOURCE_OVER:"source-over",SOURCE_IN:"source-in",SOURCE_OUT:"source-out",SOURCE_ATOP:"source-atop",DESTINATION_OVER:"destination-over",DESTINATION_IN:"destination-in",DESTINATION_OUT:"destination-out",DESTINATION_ATOP:"destination-atop"},ColorMaterial:ColorMaterial,PhongMaterial:PhongMaterial,TINT_BLEND_MODE:$n,getComputeBindGroupLayoutDescriptorFromShaderInfo:getComputeBindGroupLayoutDescriptorFromShaderInfo,getFragmentBindGroupLayoutDescriptorFromShaderInfo:getFragmentBindGroupLayoutDescriptorFromShaderInfo,getVertexBindGroupLayoutDescriptorFromShaderInfo:getVertexBindGroupLayoutDescriptorFromShaderInfo});class ASinglePassPostEffect{#_n;#vn;#bn;#yn;#Tn;#Sn;#wn;#Mn;#Rn;#Pn;#Cn;#In;#r;#En;#Ln;#Bn;#Un=[];#Dn=[];#An=16;#kn=16;#On=1;#Nn=!1;#v;#Fn;#Gn=[];constructor(i){this.#v=i,this.#Fn=i.antialiasingManager}get useDepthTexture(){return this.#Nn}set useDepthTexture(i){this.#Nn=i}get redGPUContext(){return this.#v}get storageInfo(){return this.#In}get shaderInfo(){return this.#Fn.useMSAA?this.#En:this.#Ln}get uniformBuffer(){return this.#Pn}get uniformInfo(){return this.#Cn}get WORK_SIZE_X(){return this.#An}set WORK_SIZE_X(i){this.#An=i}get WORK_SIZE_Y(){return this.#kn}set WORK_SIZE_Y(i){this.#kn=i}get WORK_SIZE_Z(){return this.#On}set WORK_SIZE_Z(i){this.#On=i}get outputTextureView(){return this.#Dn}getOutputTextureView(){return this.#Dn[this.#Dn.length-1]}clear(){this.#Un&&(this.#Un.forEach(i=>i.destroy()),this.#Un.length=0,this.#Dn.length=0)}init(i,m,g,_){this.#r=m;const{resourceManager:b}=i;this.#_n=b.createGPUShaderModule(`${m}_MSAA`,{code:g.msaa}),this.#vn=b.createGPUShaderModule(`${m}_NonMSAA`,{code:g.nonMsaa}),this.#En=parseWGSL(g.msaa),this.#Ln=parseWGSL(g.nonMsaa);const y=this.#En.storage,T=this.#En.uniforms.uniforms;if(this.#In=y,this.#Cn=T,T){const m=new ArrayBuffer(T.arrayBufferByteLength);this.#Pn=new UniformBuffer(i,m,`${this.constructor.name}_UniformBuffer`)}}execute(i,m,g){const _=i.createCommandEncoder(),b=_.beginComputePass();b.setPipeline(this.#Rn),b.setBindGroup(0,this.#Tn),b.setBindGroup(1,this.#Sn),b.dispatchWorkgroups(Math.ceil(m/this.WORK_SIZE_X),Math.ceil(g/this.WORK_SIZE_Y)),b.end(),i.queue.submit([_.finish()])}render(i,m,g,..._){const{gpuDevice:b,antialiasingManager:y}=this.#v,{useMSAA:T}=y,w=this.#Vn(i),P=y.changedMSAA,$=this.#$n(_),H=this.getOutputTextureView(),{redGPUContext:q}=i;if(w||P||$){const m=this.storageInfo,g=this.uniformInfo;this.#wn=[],this.#Mn=[];for(const i in m){const g=m[i],{binding:b,name:y}=g;"outputTexture"!==y&&this.#wn.push({binding:b,resource:_[b]})}this.#Mn.push({binding:0,resource:H}),this.shaderInfo.textures.forEach(m=>{const{name:g,binding:_}=m;"depthTexture"===g&&this.#wn.push({binding:_,resource:i.viewRenderTextureManager.depthTextureView})}),this.#Pn&&g&&this.#Mn.push({binding:g.binding,resource:{buffer:this.#Pn.gpuBuffer,offset:0,size:this.#Pn.size}})}if(w||P||$){const i=T?this.#En:this.#Ln,m=T?this.#_n:this.#vn;this.#bn=q.resourceManager.getGPUBindGroupLayout(`${this.#r}_BIND_GROUP_LAYOUT_0_USE_MSAA_${T}`)||q.resourceManager.createBindGroupLayout(`${this.#r}_BIND_GROUP_LAYOUT_0_USE_MSAA_${T}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(i,0,T)),this.#yn=q.resourceManager.getGPUBindGroupLayout(`${this.#r}_BIND_GROUP_LAYOUT_1_USE_MSAA_${T}`)||q.resourceManager.createBindGroupLayout(`${this.#r}_BIND_GROUP_LAYOUT_1_USE_MSAA_${T}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(i,1,T)),this.#Tn=b.createBindGroup({layout:this.#bn,entries:this.#wn}),this.#Sn=b.createBindGroup({layout:this.#yn,entries:this.#Mn}),this.#Rn=b.createComputePipeline({label:`${this.#r}_COMPUTE_PIPELINE_USE_MSAA_${T}`,layout:b.createPipelineLayout({bindGroupLayouts:[this.#bn,this.#yn]}),compute:{module:m,entryPoint:"main"}}),this.#Hn(_)}return this.update(performance.now()),this.execute(b,m,g),H}update(i){}updateUniform(i,m){this.uniformBuffer.writeBuffer(this.uniformInfo.members[i],m)}#$n(i){if(!this.#Gn||this.#Gn.length!==i.length)return!0;for(let m=0;m<i.length;m++)if(this.#Gn[m]!==i[m])return!0;return!1}#Hn(i){this.#Gn=[...i]}#Vn(i){const{redGPUContext:m,viewRenderTextureManager:g}=i,{colorTexture:_}=g,{gpuDevice:b}=m,{width:y,height:T}=_,w=y!==this.#Bn?.width||T!==this.#Bn?.height;if(w){this.clear();const i=b.createTexture({size:{width:y,height:T},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`PostEffect_${this.#r}_${y}x${T}_${Date.now()}`});this.#Un.push(i),this.#Dn.push(i.createView({label:i.label}))}return this.#Bn={width:y,height:T},w}}Object.freeze(ASinglePassPostEffect);const createCode=(i,m,g="",_=!1)=>{const{WORK_SIZE_X:b,WORK_SIZE_Y:y,WORK_SIZE_Z:T}=i,w=_?"texture_depth_multisampled_2d":"texture_depth_2d";return`${g}@group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>;${i.useDepthTexture?`@group(0) @binding(1) var depthTexture:${w}`:""};\n\t@group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>;${g?"@group(1) @binding(1) var<uniform> uniforms:Uniforms;":""}@compute @workgroup_size(${b},${y},${T})fn main (@builtin(global_invocation_id) global_id:vec3<u32>,){${(i=>i.replace(/\/\/[^\r\n]*(?=\S)/g,"\n").replace(/\/\/[^\r\n]*/g,""))(m)}}`},createBasicPostEffectCode=(i,m,g="")=>({msaa:createCode(i,m,g,!0),nonMsaa:createCode(i,m,g,!1)});Object.freeze(createBasicPostEffectCode);class FXAA extends ASinglePassPostEffect{#zn=.75;#Kn=.166;#qn=.0833;constructor(i){super(i);this.init(i,"POST_EFFECT_FXAA",createBasicPostEffectCode(this,"\nlet index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\n\nvar colorC=textureLoad(sourceTexture,index);\nvar colorN=textureLoad(sourceTexture,vec2<u32>(index.x,u32(max(i32(index.y) - 1,0))));\nvar colorS=textureLoad(sourceTexture,vec2<u32>(index.x,u32(min(i32(index.y) + 1,i32(dimH - 1)))));\nvar colorW=textureLoad(sourceTexture,vec2<u32>(u32(max(i32(index.x) - 1,0)),index.y));\nvar colorE=textureLoad(sourceTexture,vec2<u32>(u32(min(i32(index.x) + 1,i32(dimW - 1))),index.y));\n\nlet lumaC=dot(colorC.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaN=dot(colorN.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaS=dot(colorS.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaW=dot(colorW.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaE=dot(colorE.rgb,vec3<f32>(0.299,0.587,0.114));\n\nlet lumaMin=min(lumaC,min(min(lumaN,lumaS),min(lumaW,lumaE)));\nlet lumaMax=max(lumaC,max(max(lumaN,lumaS),max(lumaW,lumaE)));\nlet range=lumaMax - lumaMin;\n\nlet edgeThreshold=uniforms.edgeThreshold;\nlet edgeThresholdMin=uniforms.edgeThresholdMin;\nlet subpix=uniforms.subpix;\n\nif (range < edgeThresholdMin) {\ntextureStore(outputTexture,index,colorC);\nreturn;\n}\n\nlet blurredColor=(colorN.rgb + colorS.rgb + colorW.rgb + colorE.rgb + colorC.rgb) * 0.2;\n\nlet blendAmount=min(1.0,range * 50.0 + 0.5) * subpix;\n\nlet finalColor=mix(colorC.rgb,blurredColor,blendAmount);\n\ntextureStore(outputTexture,index,vec4<f32>(finalColor,colorC.a));\n","\nstruct Uniforms {subpix:f32,edgeThreshold:f32,edgeThresholdMin:f32 \n};\n")),this.subpix=this.#zn,this.edgeThreshold=this.#Kn,this.edgeThresholdMin=this.#qn}get subpix(){return this.#zn}set subpix(i){validateNumberRange(i,0,1),this.#zn=i,this.updateUniform("subpix",i)}get edgeThreshold(){return this.#Kn}set edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#Kn=i,this.updateUniform("edgeThreshold",i)}get edgeThresholdMin(){return this.#qn}set edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#qn=i,this.updateUniform("edgeThresholdMin",i)}}Object.freeze(FXAA);class PostEffectManager{#$r;#Wn=[];#Xn;#jn;#Yn;#Zn=16;#Jn=4;#Qn=1;#ei;#ti;#ri;#ni;#ii;#ai;constructor(i){this.#$r=i,this.#si()}get view(){return this.#$r}get effectList(){return this.#Wn}addEffect(i){this.#Wn.push(i)}addEffectAt(i){}getEffectAt(i){return this.#Wn[i]}removeEffect(i){}removeEffectAt(i){}removeAllEffect(){this.#Wn.forEach(i=>{i.clear()}),this.#Wn.length=0}render(){const{viewRenderTextureManager:i,redGPUContext:m}=this.#$r,{antialiasingManager:g}=m,{useMSAA:_,useFXAA:b}=g,{colorTextureView:y,colorResolveTextureView:T,colorTexture:w}=i,{width:P,height:$}=w,H=_?T:y;this.#jn=this.#oi(this.#$r,H);let q=this.#jn;return this.#Wn.forEach(i=>{q=i.render(this.#$r,P,$,q)}),b&&(this.#ei||(this.#ei=new FXAA(m)),this.#ei.subpix=g.fxaa_subpix,q=this.#ei.render(this.#$r,P,$,q)),q}clear(){this.#Wn.forEach(i=>{i.clear()})}#si(){const{redGPUContext:i}=this.#$r,{gpuDevice:m,width:g}=i,_=this.#ui();this.#ti=m.createShaderModule({code:_}),this.#ni=this.#li(i),this.#ii=this.#ci(m,this.#ti,this.#ni)}#oi(i,m){const{redGPUContext:g,viewRenderTextureManager:_}=i,{colorTexture:b}=_,{gpuDevice:y,antialiasingManager:T}=g,{useMSAA:w,changedMSAA:P}=T,{width:$,height:H}=b,q=$!==this.#ai?.width||H!==this.#ai?.height;return q&&(this.#Xn&&(this.#Xn.destroy(),this.#Xn=null),this.#Xn=this.#hi(y,$,H),this.#Yn=this.#Xn.createView({label:this.#Xn.label})),(q||P)&&(this.#ri=this.#fi(g,this.#ni,m,this.#Yn)),this.#ai={width:$,height:H},this.#di(y,this.#ii,this.#ri,$,H),this.#Yn}#ui(){return`@group(0) @binding(0) var sourceTextureSampler:sampler;@group(0) @binding(1) var sourceTexture:texture_2d<f32>;@group(0) @binding(2) var outputTexture:texture_storage_2d<rgba8unorm,write>;@compute @workgroup_size(${this.#Zn},${this.#Jn},${this.#Qn})fn main (@builtin(global_invocation_id) global_id:vec3<u32>,){let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>((f32(index.x)+0.5)/dimW,(f32(index.y)+0.5)/dimH);var color:vec4<f32>=textureSampleLevel(sourceTexture,sourceTextureSampler,uv,0);textureStore(outputTexture,index,color );};`}#li(i){return i.resourceManager.createBindGroupLayout("POST_EFFECT_COPY_TO_STORAGE",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#hi(i,m,g){return i.createTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`PostEffect_Storage_${m}x${g}_${Date.now()}`})}#fi(i,m,g,_){return i.gpuDevice.createBindGroup({layout:m,entries:[{binding:0,resource:new Sampler(i).gpuSampler},{binding:1,resource:g},{binding:2,resource:_}]})}#ci(i,m,g){return i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#di(i,m,g,_,b){const y=i.createCommandEncoder(),T=y.beginComputePass();T.setPipeline(m),T.setBindGroup(0,g),T.dispatchWorkgroups(Math.ceil(_/this.#Zn),Math.ceil(b/this.#Jn)),T.end(),i.queue.submit([y.finish()])}}Object.freeze(PostEffectManager);class RenderViewStateData{useDistanceCulling;cullingDistanceSquared;distanceCulling;num3DGroups;num3DObjects;numDrawCalls;numDirtyPipelines;numInstances;numTriangles;numPoints;viewRenderTime;viewportSize;usedVideoMemory;currentRenderPassEncoder;timestamp;frustumPlanes;prevVertexGpuBuffer;prevFragmentUniformBindGroup;dirtyVertexUniformFromMaterial={};alphaLayer=[];transparentLayer=[];particleLayer=[];instanceMeshLayer=[];render2PathLayer=[];startTime;isScene2DMode=!1;#$r;constructor(i){this.#$r=i}get view(){return this.#$r}reset(i,m){if(!m||!this.#$r)throw new Error("Invalid parameters provided");const g=this.#$r,{useFrustumCulling:_,frustumPlanes:b}=g,{colorTexture:y,depthTexture:T}=g.viewRenderTextureManager;if(!y||!T)throw new Error("Invalid view properties");this.useDistanceCulling=g.useDistanceCulling,this.distanceCulling=g.distanceCulling,this.cullingDistanceSquared=this.distanceCulling*this.distanceCulling,this.num3DGroups=0,this.num3DObjects=0,this.numDrawCalls=0,this.numInstances=0,this.numDirtyPipelines=0,this.numTriangles=0,this.numPoints=0,this.viewRenderTime=0,this.currentRenderPassEncoder=i,this.timestamp=m,this.prevVertexGpuBuffer=null,this.prevFragmentUniformBindGroup=null,this.dirtyVertexUniformFromMaterial={},this.alphaLayer=[],this.transparentLayer=[],this.particleLayer=[],this.instanceMeshLayer=[],this.render2PathLayer=[],this.startTime=performance.now(),this.isScene2DMode=g.camera instanceof Camera2D,this.viewportSize={x:g.x,y:g.y,width:g.width,height:g.height,pixelRectArray:g.pixelRectArray};try{this.usedVideoMemory=calculateTextureByteSize({size:[y.width,y.height,y.depthOrArrayLayers],format:y.format,sampleCount:y.sampleCount,usage:y.usage})+calculateTextureByteSize({size:[T.width,T.height,T.depthOrArrayLayers],format:T.format,sampleCount:T.sampleCount,usage:T.usage})}catch(i){throw new Error("Could not calculate texture size:"+i.message)}this.frustumPlanes=_?b:null}}class GeometryGPURenderInfo{buffers;constructor(i){this.buffers=i}}Object.freeze(GeometryGPURenderInfo);class Geometry extends ResourceBase{gpuRenderInfo;#mi;#pi;#gi;constructor(i,m,g){super(i),this.#xi(m),this.#_i(g);const{interleavedStruct:_}=this.#mi;this.gpuRenderInfo=new GeometryGPURenderInfo([{arrayStride:_.arrayStride,attributes:_.attributes}])}get vertexBuffer(){return this.#mi}get indexBuffer(){return this.#pi}get volume(){return this.#gi||(this.#gi=calculateVolume(this.#mi)),this.#gi}#xi(i){const m=this.#mi;this.#mi=i,m&&m.__removeDirtyPipelineListener(this.#vi),i&&i.__addDirtyPipelineListener(this.#vi),this.#gi=null}#_i(i){const m=this.#pi;this.#pi=i,m&&m.__removeDirtyPipelineListener(this.#bi),i&&i.__addDirtyPipelineListener(this.#bi)}#vi(){this.__fireListenerList()}#bi(){this.__fireListenerList()}}Object.freeze(Geometry);class ResourceStateIndexBuffer{static dirtyList=[];buffer;label;uuid;#x=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#x}set useNum(i){this.#x=i,ResourceStateIndexBuffer.dirtyList.push(this)}}class IndexBuffer extends ABaseBuffer{#P;#yi=0;#Ti=0;#C;constructor(i,m,g=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,_=""){super(i,"managedIndexBufferState",g);const b=getCacheBufferFromResourceState(this,_);if(b)return b;_&&(this.name=_),this.changeData(m),basicRegisterResource(this,new ResourceStateIndexBuffer(this))}get gpuBuffer(){return this.#C}get size(){return this.#P.byteLength||0}get triangleCount(){return this.#Ti}get indexNum(){return this.#yi}destroy(){const i=this.#C;i&&(this.#C=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}changeData(i){const{gpuDevice:m}=this;if(Array.isArray(i)&&(i=new Uint32Array(i)),this.#C){this.targetResourceManagedState.videoMemory-=this.#P.byteLength||0;let i=this.#C;requestAnimationFrame(()=>{i.destroy()}),this.#C=null}this.#P=i,this.#yi=i.length,this.targetResourceManagedState.videoMemory+=this.#P.byteLength;const g={size:this.#P.byteLength,usage:this.usage,label:this.name};this.#C=m.createBuffer(g),this.#Ti=this.#yi/3,m.queue.writeBuffer(this.#C,0,this.#P)}updatePartialData(i,m){const{gpuDevice:g}=this;(i<0||i>=this.#P.length)&&consoleAndThrowError(`Offset value is out of data bounds. Tried to access index ${i} on data of length ${this.#P.length}`),Array.isArray(m)&&(m=new Uint32Array(m)),this.#yi=m.length,g.queue.writeBuffer(this.#C,i,m)}}Object.freeze(IndexBuffer);class ResourceStateVertexBuffer{static dirtyList=[];buffer;label;uuid;#x=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#x}set useNum(i){this.#x=i,ResourceStateVertexBuffer.dirtyList.push(this)}}class VertexBuffer extends ABaseBuffer{#Si=0;#wi=0;#Mi;#P;#Ti=0;#C;constructor(i,m,g,_=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,b=""){super(i,"managedVertexBufferState",_);const y=getCacheBufferFromResourceState(this,b);if(y)return y;this.#Mi=g,b&&(this.name=b),this.changeData(m,this.#Mi),basicRegisterResource(this,new ResourceStateVertexBuffer(this))}get gpuBuffer(){return this.#C}get stride(){return this.#wi}get data(){return this.#P}get size(){return this.#P.byteLength||0}get interleavedStruct(){return this.#Mi}get vertexCount(){return this.#Si}get triangleCount(){return this.#Ti}destroy(){const i=this.#C;i&&(this.#C=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}updateAllData(i){const{gpuDevice:m}=this;m.queue.writeBuffer(this.#C,0,this.#P)}changeData(i,m){const{gpuDevice:g}=this;if(Array.isArray(i)&&(i=new Float32Array(i)),this.#P=i,m&&this.#Ri(m),this.#C){this.targetResourceManagedState.videoMemory-=this.#P.byteLength||0;let i=this.#C;requestAnimationFrame(()=>{i.destroy()}),this.#C=null}this.targetResourceManagedState.videoMemory+=this.#P.byteLength;const _={size:this.#P.byteLength,usage:this.usage,label:this.name};this.#C=g.createBuffer(_),this.#Ti=this.#P.length/this.#wi,g.queue.writeBuffer(this.#C,0,this.#P)}#Ri(i){this.#Mi=i,this.#Si=0,this.#wi=0;for(const i in this.#Mi.define){const m=this.#Mi.define[i].attributeStride/Float32Array.BYTES_PER_ELEMENT;this.#Si+=m,this.#wi+=m}this.#Si=this.#P.length/this.#Si}}Object.freeze(VertexBuffer);class InterleaveType{static get float32(){return{numElements:1,stride:Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32",offset:0}}static get float32x2(){return{numElements:2,stride:2*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x2",offset:0}}static get float32x3(){return{numElements:3,stride:3*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x3",offset:0}}static get float32x4(){return{numElements:4,stride:4*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x4",offset:0}}}Object.freeze(InterleaveType);class InterleavedStructElement{attributeName;attributeStride;interleaveType;constructor(i,m,g){this.attributeName=i,this.attributeStride=m,this.interleaveType=g}}class InterleavedStruct{#Pi;#r="";#Ci=[];#Ii=0;constructor(i,m=""){this.#r=m,this.#Ei(i),this.#Li()}get label(){return this.#r}get attributes(){return this.#Ci}get arrayStride(){return this.#Ii}get define(){return{...this.#Pi}}#Ei(i){let m={};for(const g in i){const _=i[g],b=_.stride;m[g]=new InterleavedStructElement(g,b,_),b%4!=0&&consoleAndThrowError(`Invalid attribute stride:${b}`)}this.#Pi=m}#Li(){this.#Ii=0,this.#Ci=[];for(const[i,{attributeStride:m,interleaveType:g}]of Object.entries(this.#Pi))this.#Ci.push({attributeName:i,shaderLocation:this.#Ci.length,offset:this.#Ii,format:g.gpuVertexFormat}),this.#Ii+=m}}class Primitive{#Bi;#mi;#pi;#gi;constructor(i){validateRedGPUContext(i)}static get primitiveInterleaveStruct(){return new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},"primitiveInterleaveStruct")}get gpuRenderInfo(){return this.#Bi}get vertexBuffer(){return this.#mi}get indexBuffer(){return this.#pi}get volume(){return this.#gi||(this.#gi=calculateVolume(this.#mi)),this.#gi}_setData(i){if(this.#mi=i.vertexBuffer,this.#pi=i.indexBuffer,this.#mi){const{interleavedStruct:i}=this.#mi;this.#Bi=new GeometryGPURenderInfo([{arrayStride:i.arrayStride,attributes:i.attributes}])}}}Object.freeze(Primitive);const createPrimitiveGeometry=(i,m,g,_)=>new Geometry(i,new VertexBuffer(i,new Float32Array(m),Primitive.primitiveInterleaveStruct,void 0,`VertexBuffer_${_}`),new IndexBuffer(i,new Uint32Array(g),void 0,`IndexBuffer_${_}`));class Box extends Primitive{#Ui=function(){let i,m;return m=function(m,g,_,b,y,T,w,P,$,H,q,W,ye){let Ge,Ke,Xe=P/q,je=$/W,Ye=P/2,Ze=$/2,Je=H/2,Qe=q+1,et=W+1,at=0,ht=[];for(Ke=0;Ke<et;Ke++){let i=Ke*je-Ze;for(Ge=0;Ge<Qe;Ge++){let g=Ge*Xe-Ye;ht[_]=g*T,ht[b]=i*w,ht[y]=Je,m.push(ht.x,ht.y,ht.z),ht[_]=0,ht[b]=0,ht[y]=H>0?1:-1,m.push(ht.x,ht.y,ht.z),m.push(Ge/q*ye,Ke/W*ye),at+=1}}for(Ke=0;Ke<W;Ke++)for(Ge=0;Ge<q;Ge++){let m=i+Ge+Qe*Ke,_=i+Ge+Qe*(Ke+1),b=i+(Ge+1)+Qe*(Ke+1),y=i+(Ge+1)+Qe*Ke;g.push(m,_,y,_,b,y)}i+=at},function(g,_,b,y,T,w,P,$,H){let q=[],W=[];return i=0,m(q,W,"z","y","x",-1,-1,T,y,b,$,P,H),m(q,W,"z","y","x",1,-1,T,y,-b,$,P,H),m(q,W,"x","z","y",1,1,b,T,y,w,$,H),m(q,W,"x","z","y",1,-1,b,T,-y,w,$,H),m(q,W,"x","y","z",1,-1,b,y,T,w,P,H),m(q,W,"x","y","z",-1,-1,b,y,-T,w,P,H),createPrimitiveGeometry(_,q,W,g)}}();constructor(i,m=1,g=1,_=1,b=1,y=1,T=1,w=1){super(i);const P=`PRIMITIVE_BOX_W${m}_H${g}_D${_}_WS${b}_HS${y}_DS${T}_UV${w}`,$=i.resourceManager.cachedBufferState;let H=$[P];H||(H=$[P]=this.#Ui(P,i,m,g,_,b,y,T,w)),this._setData(H)}}class Cylinder extends Primitive{#Ui=function(){let i,m;return function(g,_,b,y,T,w,P,$,H,q){const W=[],ye=[];let Ge=0;const Ke=[],Xe=T/2;return i=function(){let i,m;const g=[],_=[],$=(y-b)/T;for(m=0;m<=P;m++){const ye=[],je=m/P,Ye=je*(y-b)+b;for(i=0;i<=w;i++){const m=i/w,b=m*q+H,y=Math.sin(b),P=Math.cos(b);_[0]=Ye*y,_[1]=-je*T+Xe,_[2]=Ye*P,W.push(_[0],_[1],_[2]),g[0]=y,g[1]=$,g[2]=P,normalize$4(g,g),W.push(g[0],g[1],g[2]),W.push(m,je),ye.push(Ge++)}Ke.push(ye)}for(i=0;i<w;i++)for(m=0;m<P;m++){const g=Ke[m][i],_=Ke[m+1][i],b=Ke[m+1][i+1],y=Ke[m][i+1];ye.push(g,_,y),ye.push(_,b,y)}},m=function(i){let m,g,_;const T=[],P=[],$=!0===i?b:y,Ke=!0===i?1:-1;for(g=Ge,m=1;m<=w;m++)W.push(0,Xe*Ke,0),W.push(0,Ke,0),W.push(.5,.5),Ge++;for(_=Ge,m=0;m<=w;m++){const i=m/w*q+H,g=Math.cos(i),_=Math.sin(i);P[0]=$*_,P[1]=Xe*Ke,P[2]=$*g,W.push(P[0],P[1],P[2]),W.push(0,Ke,0),T[0]=.5*g+.5,T[1]=.5*_*Ke+.5,W.push(T[0],1-T[1]),Ge++}for(m=0;m<w;m++){const b=g+m,y=_+m;!0===i?ye.push(y,y+1,b):ye.push(y+1,y,b)}},i(),!1===$&&(b>0&&m(!0),y>0&&m(!1)),createPrimitiveGeometry(_,W,ye,g)}}();constructor(i,m=1,g=1,_=1,b=8,y=8,T=!1,w=0,P=2*Math.PI){super(i);const $=`PRIMITIVE_CYLINDER_RT${m}_RB${g}_H${_}_RS${b}_HS${y}_TS${T}_TS${w}_TL${P}`,H=i.resourceManager.cachedBufferState;let q=H[$];q||(q=H[$]=this.#Ui($,i,m,g,_,b,y,T,w,P)),this._setData(q)}}class Sphere extends Primitive{#Ui=function(){let i,m,g,_,b,y,T,w,P=[],$=new Float32Array([0,0,0]),H=new Float32Array([0,0,0]);return function(q,W,ye,Ge,Ke,Xe,je,Ye,Ze,Je){i=Ye+Ze,_=0,P.length=0,$[0]=0,$[1]=0,$[2]=0,H[0]=0,H[1]=0,H[2]=0;let Qe=[],et=[];for(g=0;g<=Ke;g++){let i=[],b=g/Ke;for(m=0;m<=Ge;m++){let g=m/Ge;$.x=-ye*Math.cos(Xe+g*je)*Math.sin(Ye+b*Ze),$.y=ye*Math.cos(Ye+b*Ze),$.z=ye*Math.sin(Xe+g*je)*Math.sin(Ye+b*Ze),Qe.push($.x,$.y,$.z),H[0]=$.x,H[1]=$.y,H[2]=$.z,normalize$4(H,H),Qe.push(H[0],H[1],H[2]),Qe.push(g*Je,b*Je),i.push(_++)}P.push(i)}for(g=0;g<Ke;g++)for(m=0;m<Ge;m++)b=P[g][m+1],y=P[g][m],T=P[g+1][m],w=P[g+1][m+1],(0!==g||Ye>0)&&et.push(b,y,w),(g!==Ke-1||i<Math.PI)&&et.push(y,T,w);return createPrimitiveGeometry(W,Qe,et,q)}}();constructor(i,m=1,g=16,_=16,b=0,y=2*Math.PI,T=0,w=Math.PI,P=1){super(i);const $=`PRIMITIVE_SPHERE_R${m}_WS${g}_HS${_}_PS${b}_PL${y}_TS${T}_TL${w}_UV${P}`,H=i.resourceManager.cachedBufferState;let q=H[$];q||(q=H[$]=this.#Ui($,i,m,g,_,b,y,T,w,P)),this._setData(q)}}class Axis extends Mesh{constructor(i){super(i,null,null);const m=new Mesh(i,new Sphere(i,.5),new ColorMaterial(i));this.addChild(m);const g=new Box(i);this.addChild(this.#Di(g,"#ff0000",[5,.1,.1],[2.5,0,0])),this.addChild(this.#Ai(i,"#ff0000",[.5,1.25],[5.5,0,0],[0,0,-90])),this.addChild(this.#Di(g,"#00ff00",[.1,5,.1],[0,2.5,0])),this.addChild(this.#Ai(i,"#00ff00",[.5,1.25],[0,5.5,0],[180,0,0])),this.addChild(this.#Di(g,"#0000ff",[.1,.1,5],[0,0,2.5])),this.addChild(this.#Ai(i,"#0000ff",[.5,1.25],[0,0,5.5],[90,0,0]))}#Di(i,m,g,_){const{redGPUContext:b}=this,y=new Mesh(b,i,new ColorMaterial(b,m));return y.setScale(...g),y.setPosition(..._),y}#Ai(i,m,g,_,b){const y=new Mesh(i,new Cylinder(i,g[0],.001,g[1],32,1),new ColorMaterial(i,m));return y.setScale(g[0],g[1],g[0]),y.setPosition(..._),y.setRotation(...b),y}}var Li="#redgpu_include SYSTEM_UNIFORM;\r\nstruct VertexIn {\r@location(0) pos:vec4<f32>,\r@location(1) uv:vec2<f32>,\r\n}\r\n\r\nstruct VertexOut {\r@builtin(position) pos:vec4<f32>,\r@location(0) uv:vec2<f32>,\r\n}\r\n\r\n\r\n@vertex\r\nfn vertexMain(in:VertexIn) -> VertexOut {\rvar out:VertexOut;\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\r\rout.pos=u_projectionMatrix * u_cameraMatrix * in.pos;\rout.uv=in.uv;\rreturn out;\r\n}\r\n\r\nfn PristineGrid(uv:vec2<f32>,lineWidth:vec2<f32>) -> f32 {\rlet uvDDXY=vec4<f32>(dpdx(uv),dpdy(uv));\rlet uvDeriv=vec2<f32>(length(uvDDXY.xz),length(uvDDXY.yw));\rlet invertLine:vec2<bool>=lineWidth > vec2f(0.5);\rlet targetWidth:vec2<f32>=select(lineWidth,1 - lineWidth,invertLine);\rlet drawWidth:vec2<f32>=clamp(targetWidth,uvDeriv,vec2f(0.5));\rlet lineAA:vec2<f32>=uvDeriv * 1.5;\rvar gridUV:vec2<f32>=abs(fract(uv) * 2.0 - 1.0);\rgridUV=select(1 - gridUV,gridUV,invertLine);\rvar grid2:vec2<f32>=smoothstep(drawWidth + lineAA,drawWidth - lineAA,gridUV);\rgrid2 *=saturate(targetWidth/drawWidth);\rgrid2=mix(grid2,targetWidth,saturate(uvDeriv * 2.0 - 1.0));\rgrid2=select(grid2,1.0 - grid2,invertLine);\rreturn mix(grid2.x,1.0,grid2.y);\r\n}\r\n\r\n\r\nstruct GridArgs {\rlineColor:vec4<f32>,\rbaseColor:vec4<f32>,\rlineWidth:vec2<f32>,\rsize:f32,\rdistance:f32,\r\n}\r\n@group(1) @binding(0) var<uniform> gridArgs:GridArgs;\r\n\r\n@fragment\r\nfn fragmentMain(in:VertexOut) -> @location(0) vec4<f32> {\rvar lineWidthWeight:f32=1;\rvar color:vec4<f32>=gridArgs.lineColor;\rlet DIVISION_SIZE:f32=gridArgs.size;\rlet ASIX_SIZE:f32=max(DIVISION_SIZE * gridArgs.lineWidth.x,DIVISION_SIZE/20);\r\n\rlet HALF_DIVISION_SIZE:f32=DIVISION_SIZE * 0.5;\rlet PER_SIZE:f32=1/DIVISION_SIZE * ASIX_SIZE;\rlet MIN_RANGE=HALF_DIVISION_SIZE - PER_SIZE;\rlet MAX_RANGE=HALF_DIVISION_SIZE + PER_SIZE;\rif( MIN_RANGE <=in.uv.x && in.uv.x <=MAX_RANGE) {\rcolor=vec4<f32>(0,0,1,1);\rlineWidthWeight=ASIX_SIZE;\r}else if( MIN_RANGE <=in.uv.y && in.uv.y <=MAX_RANGE) {\rcolor=vec4<f32>(1,0,0,1);\rlineWidthWeight=ASIX_SIZE;\r}\rvar grid=PristineGrid(in.uv,gridArgs.lineWidth * lineWidthWeight);\r\n\r\n\rreturn mix(gridArgs.baseColor,color,grid * gridArgs.lineColor.a);\r\n;\r\n}\r\n";const Bi=parseWGSL(Li),Ui=Bi.uniforms.gridArgs;class Grid{#mi;#pi;#Pn;#ki;#Ke;#Oi;#et;#tt;#Ni;#R=100;#e;#r;#Fi=1;constructor(i){validateRedGPUContext(i),this.#e=InstanceIdGenerator.getNextId(this.constructor);const{resourceManager:m,gpuDevice:g}=i,_={code:Li},b=m.createGPUShaderModule("VERTEX_MODULE_GRID",_);this.#et=new BlendState(this,Nn.ONE,Nn.ONE_MINUS_SRC_ALPHA,Fn.ADD),this.#tt=new BlendState(this,Nn.SRC_ALPHA,Nn.ONE_MINUS_SRC_ALPHA,Fn.ADD),this.#Ni=new ColorRGBA(128,128,128,1);const y=m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),T=i.resourceManager.getGPUBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT")||i.resourceManager.createBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Bi,1));this.#Gi(i),this.#ki=g.createBindGroup({label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_GRID",layout:T,entries:[{binding:0,resource:{buffer:this.#Pn.gpuBuffer,offset:0,size:this.#Pn.size}}]});const w={label:"PIPELINE_DESCRIPTOR_GRID",layout:g.createPipelineLayout({bindGroupLayouts:[y,T]}),vertex:{module:b,entryPoint:"vertexMain",buffers:[{arrayStride:this.#mi.interleavedStruct.arrayStride,attributes:this.#mi.interleavedStruct.attributes}]},fragment:{module:b,entryPoint:"fragmentMain",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.#et.state,alpha:this.#tt.state}}]},depthStencil:{format:"depth32float",depthWriteEnabled:!1,depthCompare:Jn.LESS_EQUAL}};this.#Ke=g.createRenderPipeline(w),this.#Oi=g.createRenderPipeline({...w,multisample:{count:4}})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get size(){return this.#R}set size(i){this.#R=i}get lineColor(){return this.#Ni}get lineWidth(){return this.#Fi}set lineWidth(i){validatePositiveNumberRange(i),this.#Fi=i}render(i){const{view:m,currentRenderPassEncoder:g}=i,_=create$4();set$4(_,m.rawCamera.x,m.rawCamera.y,m.rawCamera.z);const b=distance$2(_,[0,0,0]),y=this.#R;i.num3DObjects++,i.numDrawCalls++;const T=1/m.pixelRectObject.width*b*this.#Fi;this.#Pn.writeBuffers([[Ui.members.lineColor,this.#Ni.rgbaNormal],[Ui.members.lineWidth,[T,T]],[Ui.members.size,y],[Ui.members.distance,b]]);const w=[-y/2,-0,-y/2,0,0,y/2,-0,-y/2,y,0,-y/2,-0,y/2,0,y,y/2,-0,y/2,y,y];if(this.#mi.changeData(w),this.#Ke){const{triangleCount:_,indexNum:b}=this.#pi;g.setPipeline(m.redGPUContext.antialiasingManager.useMSAA?this.#Oi:this.#Ke),g.setBindGroup(1,this.#ki),g.setVertexBuffer(0,this.#mi.gpuBuffer),g.setIndexBuffer(this.#pi.gpuBuffer,"uint32"),g.drawIndexed(6),i.numTriangles+=_,i.numPoints+=b}}#Gi(i){const m=this.#R,{resourceManager:g}=i,{cachedBufferState:_}=g;{const g="VertexBuffer_Grid",b=_[g],y=[-m,-0,-m,0,0,m,-0,-m,m,0,-m,-0,m,0,m,m,-0,m,m,m];_[g]=this.#mi=b||new VertexBuffer(i,y,new InterleavedStruct({position:InterleaveType.float32x3,uv:InterleaveType.float32x2}),void 0,g)}{const m="IndexBuffer_Grid",g=_[m],b=[0,1,2,1,2,3];_[m]=this.#pi=g||new IndexBuffer(i,b,void 0,m)}{const m="UniformBuffer_Grid",g=_[m],b=new ArrayBuffer(Ui.arrayBufferByteLength);_[m]=this.#Pn=g||new UniformBuffer(i,b)}}}class BaseLight{#Vi;#$i;constructor(i,m=1){this.#Vi=i,this.#$i=m}get color(){return this.#Vi}set color(i){this.#Vi=i}get intensity(){return this.#$i}set intensity(i){this.#$i=i}}Object.freeze(BaseLight);class AmbientLight extends BaseLight{constructor(i=new ColorRGB(7,7,7),m=.2){super(i,m)}}Object.freeze(AmbientLight);class DirectionalLight extends BaseLight{#Hi;constructor(i=[-1,-1,-1],m="#fff",g=1){super(new ColorRGB(...convertHexToRgb(m,!0)),g),this.#Hi=i}get direction(){return this.#Hi}set direction(i){this.#Hi=i}}Object.freeze(DirectionalLight);class PointLight extends BaseLight{#zi=1;#i=0;#s=0;#a=0;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#i}set x(i){this.#i=i}get y(){return this.#s}set y(i){this.#s=i}get z(){return this.#a}set z(i){this.#a=i}get position(){return[this.#i,this.#s,this.#a]}get radius(){return this.#zi}set radius(i){this.#zi=i}setPosition(i,m,g){Array.isArray(i)?[this.#i,this.#s,this.#a]=i:(this.#i=i,this.#s=m,this.#a=g)}}Object.freeze(PointLight);class SpotLight extends BaseLight{#zi=1;#i=0;#s=2;#a=0;#Ki=0;#qi=-1;#Wi=0;#Xi=15;#ji=22.5;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#i}set x(i){this.#i=i}get y(){return this.#s}set y(i){this.#s=i}get z(){return this.#a}set z(i){this.#a=i}get position(){return[this.#i,this.#s,this.#a]}get radius(){return this.#zi}set radius(i){this.#zi=i}get directionX(){return this.#Ki}set directionX(i){this.#Ki=i}get directionY(){return this.#qi}set directionY(i){this.#qi=i}get directionZ(){return this.#Wi}set directionZ(i){this.#Wi=i}get direction(){return[this.#Ki,this.#qi,this.#Wi]}get innerCutoff(){return this.#Xi}set innerCutoff(i){this.#Xi=i}get outerCutoff(){return this.#ji}set outerCutoff(i){this.#ji=i}get innerCutoffCos(){return Math.cos(this.#Xi*Math.PI/180)}get outerCutoffCos(){return Math.cos(this.#ji*Math.PI/180)}setPosition(i,m,g){Array.isArray(i)?[this.#i,this.#s,this.#a]=i:(this.#i=i,this.#s=m,this.#a=g)}setDirection(i,m,g){Array.isArray(i)?[this.#Ki,this.#qi,this.#Wi]=i:(this.#Ki=i,this.#qi=m,this.#Wi=g)}lookAt(i,m,g){let _,b,y;Array.isArray(i)?[_,b,y]=i:(_=i,b=m,y=g);const T=_-this.#i,w=b-this.#s,P=y-this.#a,$=Math.sqrt(T*T+w*w+P*P);$>0&&(this.#Ki=T/$,this.#qi=w/$,this.#Wi=P/$)}}Object.freeze(SpotLight);class LightManager{#Yi=3;#Zi=Yr.MAX_CLUSTER_LIGHTS;#Ji=[];#Qi=[];#ea=[];#ta=new AmbientLight;#ra=create$5();get spotLights(){return this.#ea}get spotLightCount(){return this.#ea.length}get limitClusterLightCount(){return this.#Zi}get pointLights(){return this.#Qi}get pointLightCount(){return this.#Qi.length}get limitDirectionalLightCount(){return this.#Yi}get directionalLightCount(){return this.#Ji.length}get directionalLights(){return this.#Ji}get ambientLight(){return this.#ta}set ambientLight(i){i instanceof AmbientLight||consoleAndThrowError("allow only AmbientLight instance"),this.#ta=i}addSpotLight(i){i instanceof SpotLight||consoleAndThrowError("allow only SpotLight instance");this.#ea.length+this.#Qi.length>this.#Zi&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#ea.push(i)}addPointLight(i){i instanceof PointLight||consoleAndThrowError("allow only PointLight instance");this.#ea.length+this.#Qi.length>this.#Zi&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#Qi.push(i)}addDirectionalLight(i){i instanceof DirectionalLight||consoleAndThrowError("allow only DirectionalLight instance");this.#Ji.length>this.#Yi&&consoleAndThrowError("Cannot add more directional lights. The limit has been reached."),this.#Ji.push(i)}removeSpotLight(i){const m=this.#ea.indexOf(i);-1!==m&&this.#ea.splice(m,1)}removePointLight(i){const m=this.#Qi.indexOf(i);-1!==m&&this.#Qi.splice(m,1)}removeDirectionalLight(i){const m=this.#Ji.indexOf(i);-1!==m&&this.#Ji.splice(m,1)}removeAllSpotLight(){this.#ea=[]}removeAllPointLight(){this.#Qi=[]}removeAllDirectionalLight(){this.#Ji=[]}removeAllLight(){this.removeAllPointLight(),this.removeAllSpotLight(),this.removeAllDirectionalLight(),this.#ta=null}updateViewSystemUniforms(i){const{scene:m}=i,g=i.systemUniform_Vertex_StructInfo,{systemUniform_Vertex_UniformBuffer:_}=i,{members:b}=g,{lightManager:y,shadowManager:T}=m,{directionalShadowManager:w}=T;if(_.writeBuffers([[b.directionalLightCount,y.directionalLightCount],[b.directionalLightProjectionViewMatrix,this.#na(i)],[b.directionalLightProjectionMatrix,this.#ia(i)],[b.directionalLightViewMatrix,this.#aa(i)],[b.shadowDepthTextureSize,w.shadowDepthTextureSize],[b.bias,w.bias]]),y.directionalLights.forEach((i,m)=>{const{directionalLights:g}=b,{direction:y,color:T,intensity:w}=g.memberList[m];_.writeBuffers([[y,i.direction],[T,i.color.rgbNormal],[w,i.intensity]])}),y.ambientLight){const m=i.scene.lightManager.ambientLight,{ambientLight:g}=b,{color:y,intensity:T}=g.members;_.writeBuffers([[y,m.color.rgbNormal],[T,m.intensity]])}}#na(i){return multiply$5(create$5(),this.#ia(i),this.#aa(i))}#ia(i){const m=create$5(),g=i.rawCamera instanceof Camera2D?fromValues$4(0,0,0):fromValues$4(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),_=Math.max(distance$2(g,create$4()),1);return Ke(m,-_,_,-_,_,3*-_,3*_),m}#aa(i){identity$2(this.#ra);const m=i.rawCamera instanceof Camera2D?fromValues$4(0,0,0):fromValues$4(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),g=Math.max(distance$2(m,create$4()),1),_=fromValues$4(0,1,0),b=fromValues$4(0,0,0),y=i.scene.lightManager.directionalLights.length?fromValues$4(-i.scene.lightManager.directionalLights[0].direction[0]*g,-i.scene.lightManager.directionalLights[0].direction[1]*g,-i.scene.lightManager.directionalLights[0].direction[2]*g):create$4(),T=create$5();return lookAt(T,y,b,_),T}}Object.freeze(LightManager);class DirectionalShadowManager{#sa=2048;#oa=.005;#ua;#la;#ca;#v;#tn=[];get castingList(){return this.#tn}get shadowDepthTextureView(){return this.#la}get shadowDepthTextureViewEmpty(){return this.#ca}get bias(){return this.#oa}set bias(i){validatePositiveNumberRange(i,0,1),this.#oa=i}get shadowDepthTextureSize(){return this.#sa}set shadowDepthTextureSize(i){validateUintRange(i,1),this.#sa=i,this.#ha()}resetCastingList(){this.#tn.length=0}updateViewSystemUniforms(i){this.#v=i,this.#ha()}destroy(){this.#ua&&(this.#ua.destroy(),this.#ua=null,this.#la=null)}#ha(){this.#ua?.width!==this.#sa&&(this.destroy(),this.#fa())}#da(i){const m=i.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_EmptyDepthTexture_1x1_${Date.now()}`});this.#ca=m.createView({label:m.label})}#fa(){const{gpuDevice:i}=this.#v;this.#ua=i.createTexture({size:[this.#sa,this.#sa,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_shadowDepthTextureSize_${this.#sa}x${this.#sa}_${Date.now()}`}),this.#la=this.#ua.createView({label:this.#ua.label}),this.#ca||this.#da(i)}}Object.freeze(DirectionalShadowManager);class ShadowManager{#ma=new DirectionalShadowManager;constructor(){}get directionalShadowManager(){return this.#ma}}Object.freeze(ShadowManager);class Scene extends Object3DContainer{#e;#r;#pa=new ColorRGBA;#ga=!1;#xa=new LightManager;#_a=new ShadowManager;constructor(i){super(),this.#e=InstanceIdGenerator.getNextId(this.constructor),this.#r=i}get lightManager(){return this.#xa}get shadowManager(){return this.#_a}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get backgroundColor(){return this.#pa}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#pa=i}get useBackgroundColor(){return this.#ga}set useBackgroundColor(i){this.#ga=i}}class ViewRenderTextureManager{#va;#ba;#ya;#Ta;#Sa;#wa;#Ma;#Ra;#Pa;#Ca=!0;#Ia=!0;#v;#$r;constructor(i){validateRedGPUContext(i.redGPUContext),this.#v=i.redGPUContext,this.#$r=i}get renderPath1ResultTextureDescriptor(){return this.#Ta}get colorTexture(){return this.#va}get colorResolveTexture(){return this.#Sa}get depthTexture(){return this.#wa}get depthTextureView(){return this.#Ea("depth"),this.#Pa}get colorTextureView(){return this.#Ea("color"),this.#Ma}get colorResolveTextureView(){return this.#Ra}get renderPath1ResultTextureView(){return this.#ya}get renderPath1ResultTexture(){return this.#La(),this.#ba}#La(){const{gpuDevice:i}=this.#v,m=this.#ba,{pixelRectObject:g}=this.#$r,{width:_,height:b}=g;(!m||(m?.width!==_||m?.height!==b))&&(m&&(m?.destroy(),this.#ba=null,this.#ya=null),this.#Ta={size:{width:Math.max(1,_),height:Math.max(1,b),depthOrArrayLayers:1},format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,mipLevelCount:getMipLevelCount(_,b),label:`renderPath1ResultTexture_${_}x${b}_${Date.now()}`},this.#ba=i.createTexture(this.#Ta),this.#ya=this.#ba.createView({label:this.#ba.label}))}#Ea(i){const m="depth"===i,{antialiasingManager:g,gpuDevice:_}=this.#v,{useMSAA:b}=g,y=m?this.#wa:this.#va,{pixelRectObject:T}=this.#$r,{width:w,height:P}=T,$=y?.width!==w||y?.height!==P,H=m?this.#Ia!==b:this.#Ca!==b,q=!y||$||H;if(m?this.#Ia=b:this.#Ca=b,q){y&&(y?.destroy(),m||(this.#Sa?.destroy(),this.#Sa=null,this.#Ra=null));const g=_.createTexture({size:[Math.max(w,1),Math.max(P,1),1],sampleCount:b?4:1,label:`${i}_${w}x${P}_${Date.now()}`,format:m?"depth32float":navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|(m||b?0:GPUTextureUsage.COPY_SRC)});if(m)this.#wa=g,this.#Pa=g.createView({label:g.label});else if(this.#va=g,this.#Ma=g.createView({label:g.label}),b){const m=_.createTexture({size:{width:Math.max(w,1),height:Math.max(P,1),depthOrArrayLayers:1},sampleCount:1,label:`${i}_resolve_${w}x${P}_${Date.now()}`,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC});this.#Sa=m,this.#Ra=m.createView({label:m.label})}}}}Object.freeze(ViewRenderTextureManager);class ViewTransform{onResize=null;#v;#Ba=create$5();#ir;#i=0;#s=0;#Dr;#Ar;#kr=[0,0,0,0];constructor(i){validateRedGPUContext(i),this.#v=i}get redGPUContext(){return this.#v}get camera(){return this.#ir}set camera(i){i instanceof PerspectiveCamera||i instanceof Camera2D||i instanceof Camera2D||i instanceof OrthographicCamera||i instanceof AController||consoleAndThrowError("allow PerspectiveCamera or OrthographicCamera or AController instance"),this.#ir=i}get x(){return this.#i}set x(i){this.setPosition(i,this.y)}get y(){return this.#s}set y(i){this.setPosition(this.x,i)}get width(){return this.#Dr}set width(i){this.setSize(i,this.#Ar)}get height(){return this.#Ar}set height(i){this.setSize(this.#Dr,i)}get pixelRectArray(){return this.#kr}get pixelRectObject(){return{x:this.#kr[0],y:this.#kr[1],width:this.#kr[2],height:this.#kr[3]}}get screenRectObject(){return{x:this.#kr[0]/devicePixelRatio,y:this.#kr[1]/devicePixelRatio,width:this.#kr[2]/devicePixelRatio,height:this.#kr[3]/devicePixelRatio}}get aspect(){return this.#kr[2]/this.#kr[3]}get frustumPlanes(){return this.#ir instanceof AController?computeViewFrustumPlanes(this.projectionMatrix,this.#ir.camera.modelMatrix):computeViewFrustumPlanes(this.projectionMatrix,this.#ir.modelMatrix)}get rawCamera(){return this.#ir instanceof AController?this.#ir.camera:this.#ir}get projectionMatrix(){const{pixelRectObject:i,redGPUContext:m}=this;if(this.rawCamera instanceof OrthographicCamera){const{nearClipping:i,farClipping:m}=this.rawCamera;orthoZO(this.#Ba,this.rawCamera.left,this.rawCamera.right,this.rawCamera.bottom,this.rawCamera.top,i,m)}else if(this.rawCamera instanceof Camera2D)Ke(this.#Ba,-.5,.5,-.5,.5,-1e5,1e5),scale$5(this.#Ba,this.#Ba,[m.renderScale,m.renderScale,1]),translate$1(this.#Ba,this.#Ba,[-.5,.5,0]),scale$5(this.#Ba,this.#Ba,[1/i.width*window.devicePixelRatio,-1/i.height*window.devicePixelRatio,1]),identity$2(this.rawCamera.modelMatrix);else{const{fieldOfView:i,nearClipping:m,farClipping:g}=this.rawCamera;Ge(this.#Ba,Math.PI/180*i,this.aspect,m,g)}return this.#Ba}get inverseProjectionMatrix(){return invert$2(create$5(),this.#Ba)}setPosition(i=this.#i,m=this.#s){const{sizeManager:g}=this.#v;RedGPUContextSizeManager.validatePositionValue(i),RedGPUContextSizeManager.validatePositionValue(m),this.#i=i,this.#s=m;const _=g.pixelRectObject,b=RedGPUContextSizeManager.getPixelDimension(_,"width",i),y=RedGPUContextSizeManager.getPixelDimension(_,"height",m);this.#kr[0]=Math.floor(b*(this.#i.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#kr[1]=Math.floor(y*(this.#s.toString().includes("%")?1:g.renderScale*window.devicePixelRatio))}setSize(i=this.#Dr,m=this.#Ar){const{sizeManager:g}=this.#v;RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#Dr=i,this.#Ar=m;const _=g.pixelRectObject,b=RedGPUContextSizeManager.getPixelDimension(_,"width",i),y=RedGPUContextSizeManager.getPixelDimension(_,"height",m);this.#kr[2]=Math.floor(b*(this.#Dr.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#kr[3]=Math.floor(y*(this.#Ar.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.onResize&&this.onResize(this.screenRectObject.width,this.screenRectObject.height)}}const Di=parseWGSL(Zr.SYSTEM_UNIFORM).uniforms.systemUniforms;class View3D extends ViewTransform{#Ua=Di;#Da;#Aa;#e;#ka;#Oa;#Na;#r;#Fa;#Ga=!0;#Va=!1;#$a=50;#Ha;#za;#Ka;#qa;#Wa=new PickingManager;#Xa=[];#ja;#Ie;#Yr;#Ya;#Za;#Ja;#Qa=void 0;#es=void 0;constructor(i,m,g,_){super(i),this.scene=m,this.camera=g,_&&(this.name=_),this.#si(),this.#qa=new ViewRenderTextureManager(this),this.#za=new RenderViewStateData(this),this.#Ka=new PostEffectManager(this),this.setSize("100%","100%")}get viewRenderTextureManager(){return this.#qa}get systemUniform_Vertex_StructInfo(){return this.#Ua}get systemUniform_Vertex_UniformBindGroup(){return this.#Da}get systemUniform_Vertex_UniformBuffer(){return this.#Aa}get passLightClustersBound(){return this.#Ja}get ibl(){return this.#Ha}set ibl(i){this.#Ha=i}get pickingManager(){return this.#Wa}get postEffectManager(){return this.#Ka}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get debugViewRenderState(){return this.#za}get grid(){return this.#ka}set grid(i){if("boolean"==typeof i)i=!0===i?new Grid(this.redGPUContext):null;else if(!(i instanceof Grid)&&null!==i)throw new TypeError("grid must be of type 'Grid','boolean',or 'null'.");this.#ka=i}get axis(){return this.#Oa}set axis(i){if("boolean"==typeof i)i=!0===i?new Axis(this.redGPUContext):null;else if(!(i instanceof Axis)&&null!==i)throw new TypeError("axis must be of type 'Axis','boolean',or 'null'.");this.#Oa=i}get skybox(){return this.#Na}set skybox(i){this.#Na=i}get useFrustumCulling(){return this.#Ga}set useFrustumCulling(i){this.#Ga=i}get useDistanceCulling(){return this.#Va}set useDistanceCulling(i){this.#Va=i}get distanceCulling(){return this.#$a}set distanceCulling(i){this.#$a=i}get scene(){return this.#Fa}set scene(i){i instanceof Scene||consoleAndThrowError("allow only Scene instance"),this.#Fa=i}update(i,m=!1,g=!1,_){const{scene:b}=i,{shadowManager:y}=b,{directionalShadowManager:T}=y,w=i.ibl,P=w?.environmentTexture?.gpuTexture,$=w?.irradianceTexture?.gpuTexture;let H=m?T.shadowDepthTextureViewEmpty:T.shadowDepthTextureView;const q=i.redGPUContext.viewList.indexOf(i),W=`${q}_${m?"shadowRender":"basic"}_2path${!!_}`;if(q>-1){let m=!0,g=this.#Xa[W];g&&(m=g.ibl!==w||g.ibl_environmentTexture!==P||g.ibl_irradianceTexture!==$||g.renderPath1ResultTextureView!==_||g.shadowDepthTextureView!==H||!this.#Za),m?this.#ts(W,H,i.ibl,_):this.#Da=this.#Xa[W].vertexUniformBindGroup,[{key:"useIblTexture",value:[P?1:0]},{key:"time",value:[i.debugViewRenderState.timestamp||0]},{key:"isView3D",value:[this.constructor===View3D?1:0]}].forEach(({key:i,value:m})=>{this.redGPUContext.gpuDevice.queue.writeBuffer(this.#Aa.gpuBuffer,this.#Ua.members[i].uniformOffset,new this.#Ua.members[i].View(m))}),this.#Xa[W]={ibl:w,ibl_environmentTexture:P,ibl_irradianceTexture:$,renderPath1ResultTextureView:_,shadowDepthTextureView:H,vertexUniformBindGroup:this.#Da}}this.#rs(g)}checkMouseInViewBounds(){const{pixelRectObject:i,pickingManager:m}=this,{mouseX:g,mouseY:_}=m;return 0<g&&g<i.width&&0<_&&_<i.height}#ts(i,m,g,_){this.#rs(!0);const b=g?.environmentTexture,y=g?.irradianceTexture,T={layout:this.redGPUContext.resourceManager.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),label:`SYSTEM_UNIFORM_bindGroup_${i}`,entries:[{binding:0,resource:{buffer:this.#Aa.gpuBuffer,offset:0,size:this.#Aa.size}},{binding:1,resource:this.#ja},{binding:2,resource:m},{binding:3,resource:this.#Ie},{binding:5,resource:{buffer:this.#Yr,offset:0,size:this.#Yr.size}},{binding:6,resource:{buffer:this.#Za.clusterLightsBuffer,offset:0,size:this.#Za.clusterLightsBuffer.size}},{binding:7,resource:this.#Ie},{binding:8,resource:_||this.redGPUContext.resourceManager.emptyBitmapTextureView},{binding:9,resource:this.#Ie},{binding:10,resource:b?.gpuTexture?.createView(b?.viewDescriptor||CubeTexture.defaultViewDescriptor)||this.redGPUContext.resourceManager.emptyCubeTextureView},{binding:11,resource:y?.gpuTexture?.createView(y?.viewDescriptor||CubeTexture.defaultViewDescriptor)||this.redGPUContext.resourceManager.emptyCubeTextureView}]};this.#Da=this.redGPUContext.gpuDevice.createBindGroup(T)}#si(){const i=new ArrayBuffer(Di.arrayBufferByteLength);this.#Aa=new UniformBuffer(this.redGPUContext,i,"#systemUniform_Vertex_UniformBuffer"),this.#Ya=new Float32Array(16*Yr.MAX_CLUSTER_LIGHTS+4),this.#Yr=this.redGPUContext.gpuDevice.createBuffer({label:"clusterLightsBuffer",size:this.#Ya.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#Yr,0,this.#Ya),this.#ja=new Sampler(this.redGPUContext,{addressModeU:wr.CLAMP_TO_EDGE,addressModeV:wr.CLAMP_TO_EDGE,addressModeW:wr.CLAMP_TO_EDGE,compare:Jn.LESS_EQUAL}).gpuSampler,this.#Ie=new Sampler(this.redGPUContext).gpuSampler}#rs(i=!1){if(!i)return;const{redGPUContext:m,scene:g}=this;if(this.#Ja||(this.#Ja=new PassClusterLightBound(m,this)),this.#Za&&(this.#Ja.render(),this.#Qa=this.pixelRectArray[2],this.#es=this.pixelRectArray[3]),this.#Za||(this.#Za=new PassClustersLight(m,this)),g){const{pointLights:i,spotLights:m}=g.lightManager,_=i.length,b=m.length;if(_){let m=_;for(;m--;){const g=i[m],_=4+16*m;this.#Ya.set([...g.position,g.radius,...g.color.rgbNormal,g.intensity,0],_)}}if(b){const i=16,g=_*i;let y=b;for(;y--;){const _=m[y],b=4+i*y+g;this.#Ya.set([..._.position,_.radius,..._.color.rgbNormal,_.intensity,1,..._.direction,_.outerCutoff,_.innerCutoff],b)}}this.#Ya.set([_,b,0,0],0),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#Yr,0,this.#Ya),this.#Za.render()}}}Object.freeze(View3D);class RedGPUContextViewContainer{#ns=[];constructor(){}get viewList(){return this.#ns}get numViews(){return this.#ns.length}contains(i){return this.#ns.includes(i)}addView(i){this.#is(i),this.#ns.push(i)}addViewAt(i,m){this.#is(i),validateUintRange(m);const g=this.#ns.length;g<m&&(m=g),this.#ns[m]=i}getViewAt(i){return validateUintRange(i),this.#ns[i]}getViewIndex(i){return this.#is(i),this.#ns.indexOf(i)}setViewIndex(i,m){this.#is(i),validateUintRange(m);const g=this.#ns.length,_=m>=g,b=this.#ns.indexOf(i);-1===b&&consoleAndThrowError("입력하신 View 는 RedGPUContext instance 에 등록되지 않은 View 입니다."),_&&consoleAndThrowError(`index must be smaller than the viewList length./index:${m}/this.#viewList.length:${g}`),this.#ns.splice(b,1),this.#ns.splice(m,0,i)}swapViews(i,m){this.#is(i),this.#is(m);const g=this.#ns.indexOf(i),_=this.#ns.indexOf(m);-1!==g&&-1!==_||consoleAndThrowError((-1===g?"view1":"view2")+" is not child of this RedGPUContext instance."),this.swapViewsAt(g,_)}swapViewsAt(i,m){i===m&&consoleAndThrowError("The indices to swap cannot be the same."),validateUintRange(i),validateUintRange(m);const g=this.#ns.length;(i>=g||m>=g)&&consoleAndThrowError(`index1,index2 must be smaller than the viewList length./index1:${i}/index2:${m}/this.#viewList.length:${g}`);const _=this.#ns[i];this.#ns[i]=this.#ns[m],this.#ns[m]=_}removeView(i){this.#is(i);const m=this.#ns.indexOf(i);m>-1?this.#ns.splice(m,1):consoleAndThrowError("View3D is not found in the view list.")}removeViewAt(i){validateUintRange(i);const m=this.#ns.length;i<m?this.#ns.splice(i,1):consoleAndThrowError(`Index ${i} is out of range. View list length is ${m}.`)}removeAllViews(){this.#ns.length=0}#is(i){i instanceof View3D||consoleAndThrowError("allow only View3D instance")}}class RedGPUContextDetector{#as;#ss;#os;#us;#ls;constructor(i){this.#si(i.gpuAdapter)}get adapterInfo(){return this.#as}get limits(){return this.#ss}get isFallbackAdapter(){return this.#os}get groupedLimits(){return this.#us}get userAgent(){return this.#ls}get isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Kindle|Silk|PlayBook/i.test(navigator.userAgent)}#si(i){this.#ls=navigator.userAgent,this.#cs(i),this.#hs()}#cs(i){if(i){const{limits:m,info:g}=i,{isFallbackAdapter:_}=g;this.#as=g,this.#os=_,this.#ss=m}}#hs(){const i={TextureLimits:["maxTextureDimension1D","maxTextureDimension2D","maxTextureDimension3D","maxTextureArrayLayers","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage"],BufferLimits:["maxBindGroups","maxBindGroupsPlusVertexBuffers","maxBindingsPerBindGroup","maxDynamicUniformBuffersPerPipelineLayout","maxDynamicStorageBuffersPerPipelineLayout","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxUniformBufferBindingSize","maxStorageBufferBindingSize","minUniformBufferOffsetAlignment","minStorageBufferOffsetAlignment","maxBufferSize"],PipelineAndShaderLimits:["maxVertexBuffers","maxVertexAttributes","maxVertexBufferArrayStride","maxInterStageShaderComponents","maxInterStageShaderVariables"],ComputeLimits:["maxComputeWorkgroupStorageSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeWorkgroupsPerDimension"],ColorLimits:["maxColorAttachments","maxColorAttachmentBytesPerSample"]};let m={TextureLimits:{},BufferLimits:{},PipelineAndShaderLimits:{},ComputeLimits:{},ColorLimits:{},EtcLimit:{}};for(const g in this.#ss){let _=!1;for(const b in i)if(i[b].includes(g)){m[b][g]=this.#ss[g],_=!0;break}_||(m.EtcLimit[g]=this.#ss[g])}this.#us=m}}class AntialiasingManager{#v;#fs=!0;#ds=!1;#ms=.75;#ps=.166;#gs=.0833;#xs=!0;constructor(i){this.#v=i}get fxaa_subpix(){return this.#ms}set fxaa_subpix(i){validateNumberRange(i,0,1),this.#ms=i}get fxaa_edgeThreshold(){return this.#ps}set fxaa_edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#ps=i}get fxaa_edgeThresholdMin(){return this.#gs}set fxaa_edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#gs=i}get useMSAA(){return this.#fs}set useMSAA(i){this.#fs=i,this.#xs=!0}get useFXAA(){return this.#ds}set useFXAA(i){this.#ds=i}get changedMSAA(){return this.#xs}set changedMSAA(i){this.#xs=i}}Object.freeze(AntialiasingManager);class RedGPUContext extends RedGPUContextViewContainer{currentRequestAnimationFrame;onResize=null;#_s;#vs;#bs;#ys;#b;#Or;#Ts;#Ss;#rt;#pa=new ColorRGBA(0,0,0,1);#ws=!1;#Ms={};#Fn;constructor(i,m,g,_,b){super(),this.#vs=m,this.#b=g,this.#ys=_,this.#bs=b,this.#Or=i,this.#Ts=new RedGPUContextSizeManager(this),this.#Ss=new RedGPUContextDetector(this),this.#rt=new ResourceManager(this),this.#Fn=new AntialiasingManager(this),this.#Rs()}get antialiasingManager(){return this.#Fn}get useDebugPanel(){return this.#ws}set useDebugPanel(i){this.#ws=i}get backgroundColor(){return this.#pa}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#pa=i}get detector(){return this.#Ss}get configurationDescription(){return this.#_s}get gpuAdapter(){return this.#vs}get alphaMode(){return this.#bs}set alphaMode(i){this.#bs=i,this.#Ps()}get gpuContext(){return this.#ys}get gpuDevice(){return this.#b}get htmlCanvas(){return this.#Or}get keyboardKeyBuffer(){return this.#Ms}set keyboardKeyBuffer(i){this.#Ms=i}get resourceManager(){return this.#rt}get sizeManager(){return this.#Ts}get width(){return this.#Ts.width}set width(i){this.#Ts.width=i}get height(){return this.#Ts.height}set height(i){this.#Ts.height=i}get screenRectObject(){return this.#Ts.screenRectObject}get renderScale(){return this.#Ts.renderScale}set renderScale(i){this.#Ts.renderScale=i,this.viewList.forEach(i=>{i.setPosition(),i.setSize()})}destroy(){this.#b.destroy()}setSize(i=this.width,m=this.height){this.sizeManager.setSize(i,m)}#Rs(){this.#Ps(),this.sizeManager.setSize("100%","100%"),window?.addEventListener("resize",()=>{this.sizeManager.setSize(),this.viewList.forEach(i=>{i.setSize(),i.setPosition()})});(this.detector.isMobile?["click","touchmove","touchstart","touchend"]:["click","mousemove","mousedown","mouseup"]).forEach(i=>{const m=this.detector.isMobile?{click:Mi.CLICK,touchmove:Mi.MOVE,touchstart:Mi.DOWN,touchend:Mi.UP}:{click:Mi.CLICK,mousemove:Mi.MOVE,mousedown:Mi.DOWN,mouseup:Mi.UP};this.#Or.addEventListener(i,i=>{const g=m[i.type];this.viewList.forEach(m=>{this.detector.isMobile&&i instanceof TouchEvent&&i.touches.length>0?(m.pickingManager.mouseX=i.touches[0].clientX*devicePixelRatio-m.pixelRectObject.x,m.pickingManager.mouseY=i.touches[0].clientY*devicePixelRatio-m.pixelRectObject.y):i instanceof MouseEvent&&(m.pickingManager.mouseX=i.offsetX*devicePixelRatio-m.pixelRectObject.x,m.pickingManager.mouseY=i.offsetY*devicePixelRatio-m.pixelRectObject.y),g===Mi.CLICK?m.pickingManager.lastMouseClickEvent={...i,type:g}:m.pickingManager.lastMouseEvent={...i,type:g}})})});{const HD_keyDown=i=>{this.#Ms[i.key]=!0},HD_keyUp=i=>{this.#Ms[i.key]=!1};window?.addEventListener("keyup",HD_keyUp),window?.addEventListener("keydown",HD_keyDown)}new ResizeObserver(i=>{}).observe(this.#Or)}#Ps(){const i=navigator.gpu.getPreferredCanvasFormat();this.#_s={device:this.#b,format:i,alphaMode:this.#bs},this.#ys.configure(this.#_s)}}Object.freeze(RedGPUContext);const copyGPUBuffer=(i,m,g)=>{const _=i.createCommandEncoder();_.copyBufferToBuffer(m,0,g,0,Math.min(m.size,g.size));const b=_.finish();i.queue.submit([b])},Ai=3.141592653589793,ki=6.283185307179586,Oi=.225,Ni=1.27323954,Fi=.405284735,Gi=1.5707963267948966,Vi=Math.PI/180;class InstancingMeshObject3D{modelMatrix=create$5();localMatrix=create$5();normalModelMatrix=create$5();inited=!1;#i=0;#a=0;#s=0;#zt=[0,0,0];#jt=1;#Yt=1;#Zt=1;#Jt=[1,1,1];#o=0;#u=0;#l=0;#Qt=[0,0,0];#Cs=0;#Is;#v;#nr=1;constructor(i,m,g){validateRedGPUContext(i),this.#v=i,this.#Is=g,this.#Cs=m}get opacity(){return this.#nr}set opacity(i){validatePositiveNumberRange(i,0,1),this.#nr=i,this.#Es()}get x(){return this.#i}set x(i){this.#i=this.#zt[0]=i,this.#Es()}get y(){return this.#s}set y(i){this.#s=this.#zt[1]=i,this.#Es()}get z(){return this.#a}set z(i){this.#a=this.#zt[2]=i,this.#Es()}get position(){return this.#zt}set position(i){this.#i=this.#zt[0]=i,this.#s=this.#zt[1]=i,this.#a=this.#zt[2]=i,this.#Es()}get scaleX(){return this.#jt}set scaleX(i){this.#jt=this.#Jt[0]=i,this.#Es()}get scaleY(){return this.#Yt}set scaleY(i){this.#Yt=this.#Jt[1]=i,this.#Es()}get scaleZ(){return this.#Zt}set scaleZ(i){this.#Zt=this.#Jt[2]=i,this.#Es()}get scale(){return this.#zt}set scale(i){this.#jt=this.#Jt[0]=i,this.#Yt=this.#Jt[1]=i,this.#Zt=this.#Jt[2]=i,this.#Es()}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#Qt[0]=i,this.#Es()}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#Qt[1]=i,this.#Es()}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#Qt[2]=i,this.#Es()}get rotation(){return this.#Qt}set rotation(i){this.#o=this.#Qt[0]=i,this.#u=this.#Qt[1]=i,this.#l=this.#Qt[2]=i,this.#Es()}setScale(i,m,g){m=m??i,g=g??i;const _=this.#Jt;this.#jt=_[0]=i,this.#Yt=_[1]=m,this.#Zt=_[2]=g,this.#Es()}setPosition(i,m,g){m=m??i,g=g??i;const _=this.#zt;this.#i=_[0]=i,this.#s=_[1]=m,this.#a=_[2]=g,this.#Es()}setRotation(i,m,g){m=m??i,g=g??i;const _=this.#Qt;this.#o=_[0]=i,this.#u=_[1]=m,this.#l=_[2]=g,this.#Es()}#Es(){let i,m,g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,je,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Pt,Ct;this.inited=!0;{const W=this.localMatrix;let Xe;$=1,H=0,q=0,ye=0,Ge=1,Ke=0,je=0,Ye=0,Ze=1,W[12]=this.#i,W[13]=this.#s,W[14]=this.#a,W[15]=1,T=this.#o*Vi,w=this.#u*Vi,P=this.#l*Vi,Xe=T%ki,Xe<-Ai?Xe+=ki:Xe>Ai&&(Xe-=ki),Xe=Xe<0?Ni*Xe+Fi*Xe*Xe:Ni*Xe-Fi*Xe*Xe,i=Xe<0?Oi*(Xe*-Xe-Xe)+Xe:Oi*(Xe*Xe-Xe)+Xe,Xe=(T+Gi)%ki,Xe<-Ai?Xe+=ki:Xe>Ai&&(Xe-=ki),Xe=Xe<0?Ni*Xe+Fi*Xe*Xe:Ni*Xe-Fi*Xe*Xe,_=Xe<0?Oi*(Xe*-Xe-Xe)+Xe:Oi*(Xe*Xe-Xe)+Xe,Xe=w%ki,Xe<-Ai?Xe+=ki:Xe>Ai&&(Xe-=ki),Xe=Xe<0?Ni*Xe+Fi*Xe*Xe:Ni*Xe-Fi*Xe*Xe,m=Xe<0?Oi*(Xe*-Xe-Xe)+Xe:Oi*(Xe*Xe-Xe)+Xe,Xe=(w+Gi)%ki,Xe<-Ai?Xe+=ki:Xe>Ai&&(Xe-=ki),Xe=Xe<0?Ni*Xe+Fi*Xe*Xe:Ni*Xe-Fi*Xe*Xe,b=Xe<0?Oi*(Xe*-Xe-Xe)+Xe:Oi*(Xe*Xe-Xe)+Xe,Xe=P%ki,Xe<-Ai?Xe+=ki:Xe>Ai&&(Xe-=ki),Xe=Xe<0?Ni*Xe+Fi*Xe*Xe:Ni*Xe-Fi*Xe*Xe,g=Xe<0?Oi*(Xe*-Xe-Xe)+Xe:Oi*(Xe*Xe-Xe)+Xe,Xe=(P+Gi)%ki,Xe<-Ai?Xe+=ki:Xe>Ai&&(Xe-=ki),Xe=Xe<0?Ni*Xe+Fi*Xe*Xe:Ni*Xe-Fi*Xe*Xe,y=Xe<0?Oi*(Xe*-Xe-Xe)+Xe:Oi*(Xe*Xe-Xe)+Xe,bt=b*y,yt=i*m*y-_*g,Tt=_*m*y+i*g,St=b*g,wt=i*m*g+_*y,Mt=_*m*g-i*y,Rt=-m,Pt=i*b,Ct=_*b,T=this.#jt,w=this.#Yt,P=this.#Zt,W[0]=($*bt+ye*yt+je*Tt)*T,W[1]=(H*bt+Ge*yt+Ye*Tt)*T,W[2]=(q*bt+Ke*yt+Ze*Tt)*T,W[3]=W[3]*T,W[4]=($*St+ye*wt+je*Mt)*w,W[5]=(H*St+Ge*wt+Ye*Mt)*w,W[6]=(q*St+Ke*wt+Ze*Mt)*w,W[7]=W[7]*w,W[8]=($*Rt+ye*Pt+je*Ct)*P,W[9]=(H*Rt+Ge*Pt+Ye*Ct)*P,W[10]=(q*Rt+Ke*Pt+Ze*Ct)*P,W[11]=W[11]*P}this.modelMatrix=this.localMatrix;{let i=this.normalModelMatrix,m=this.modelMatrix;$=m[0],H=m[1],q=m[2],W=m[3],ye=m[4],Ge=m[5],Ke=m[6],Xe=m[7],je=m[8],Ye=m[9],Ze=m[10],Je=m[11],et=m[12],at=m[13],ht=m[14],ft=m[15],Qe=$*Ge-H*ye,gt=$*Ke-q*ye,xt=$*Xe-W*ye,vt=H*Ke-q*Ge,bt=H*Xe-W*Ge,yt=q*Xe-W*Ke,Tt=je*at-Ye*et,St=je*ht-Ze*et,wt=je*ft-Je*et,Rt=Ye*ft-Je*at,Mt=Ze*ft-Je*ht,Ct=Qe*Mt-gt*Rt+xt*Mt+vt*wt-bt*St+yt*Tt,Ct=1/Ct,i[0]=(Ge*Mt-Ke*Rt+Xe*Mt)*Ct,i[4]=(-H*Mt+q*Rt-W*Mt)*Ct,i[8]=(at*yt-ht*bt+ft*vt)*Ct,i[12]=(-Ye*yt+Ze*bt-Je*vt)*Ct,i[1]=(-ye*Mt+Ke*wt-Xe*St)*Ct,i[5]=($*Mt-q*wt+W*St)*Ct,i[9]=(-et*yt+ht*xt-ft*gt)*Ct,i[13]=(je*yt-Ze*xt+Je*gt)*Ct,i[2]=(ye*Rt-Ge*wt+Xe*Tt)*Ct,i[6]=(-$*Rt+H*wt-W*Tt)*Ct,i[10]=(et*bt-at*xt+ft*Qe)*Ct,i[14]=(-je*bt+Ye*xt-Je*Qe)*Ct,i[3]=(-ye*Mt+Ge*St-Ke*Tt)*Ct,i[7]=($*Mt-H*St+q*Tt)*Ct,i[11]=(-et*vt+at*gt-ht*Qe)*Ct,i[15]=(je*vt-Ye*gt+Ze*Qe)*Ct}if(this.#Is.gpuRenderInfo){const{vertexUniformBuffer:i,vertexUniformInfo:m}=this.#Is.gpuRenderInfo,g=m.members.instanceModelMatrixs,_=m.members.instanceNormalModelMatrix,b=m.members.instanceOpacity;this.#v.gpuDevice.queue.writeBuffer(i.gpuBuffer,g.uniformOffset+g.stride*this.#Cs,new g.View(this.modelMatrix)),this.#v.gpuDevice.queue.writeBuffer(i.gpuBuffer,_.uniformOffset+_.stride*this.#Cs,new _.View(this.normalModelMatrix)),this.#v.gpuDevice.queue.writeBuffer(i.gpuBuffer,b.uniformOffset+b.stride*this.#Cs,new b.View([this.opacity]))}}}var $i="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include calcDisplacements;\r\nstruct InstanceUniforms {\rinstanceGroupModelMatrix:mat4x4<f32>,\r\n\t instanceModelMatrixs:array<mat4x4<f32>,100000>,\r\n\t instanceNormalModelMatrix:array<mat4x4<f32>,100000>,\r\n\t instanceOpacity:array<f32,100000>,\ruseDisplacementTexture:u32,\rdisplacementScale:f32,\r\n};\r\n@group(1) @binding(0) var<storage,read> instanceUniforms:InstanceUniforms;\r\n@group(1) @binding(1) var displacementTextureSampler:sampler;\r\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\r\n\r\nstruct InputData {\r@builtin(instance_index) instanceIdx:u32,\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) instanceOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(14) receiveShadow:f32,\r@location(15) pickingId:vec4<f32>,\r\n};\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\nconst maxDistance:f32=1000.0;\r\nconst maxMipLevel:f32=10.0;\r\n@vertex\r\nfn main( inputData:InputData ) -> OutputData {\rvar output:OutputData;\r\n\rlet input_instanceIdx:u32=inputData.instanceIdx;\rlet u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx];\rlet u_normalModelMatrix=instanceUniforms.instanceNormalModelMatrix[input_instanceIdx];\rlet u_instanceGroupModelMatrix=instanceUniforms.instanceGroupModelMatrix;\rlet u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u;\rlet u_displacementScale=instanceUniforms.displacementScale;\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\n\r\n\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0);\r\n\r\r\rlet worldPosition=position.xyz;\r\n\r\rlet margin:f32=0.5;\r\n\r\rvar clipPosition:vec4<f32>=u_projectionMatrix * u_cameraMatrix * vec4<f32>(worldPosition,1.0);\r\n\r\rlet ndcPosition:vec3<f32>=clipPosition.xyz/clipPosition.w;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\noutput.position=clipPosition;\r\n\r\r\n\r\n\rvar normalPosition:vec3<f32>=(u_instanceGroupModelMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0)).xyz;;\r\n\r\n\rif (u_useDisplacementTexture) {\rlet distance=distance(position.xyz,u_cameraPosition);\rlet mipLevel=(distance/maxDistance) * maxMipLevel;\rlet displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);\r\n\rposition=u_modelMatrix * vec4<f32>(displacedPosition,1.0);\r}\r\n\routput.position=u_projectionMatrix * u_cameraMatrix * u_instanceGroupModelMatrix * position;\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition;\routput.uv=input_uv;\routput.instanceOpacity=instanceUniforms.instanceOpacity[input_instanceIdx];\rreturn output;\r\n}\r\n@vertex\r\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {\rvar output:OutputShadowData;\rlet input_instanceIdx:u32=inputData.instanceIdx;\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx];\rlet u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u;\rlet u_displacementScale=instanceUniforms.displacementScale;\r\n\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rposition= u_modelMatrix * vec4<f32>(input_position,1.0);\r\n\r\n\rif (u_useDisplacementTexture) {\rlet distance=distance(position.xyz,u_directionalLightProjectionViewMatrix[3].xyz);\rlet mipLevel=(distance/maxDistance) * maxMipLevel;\rlet displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel);\rposition=u_modelMatrix * vec4<f32>(displacedPosition,1.0);\r}\r\n\r\n\routput.position=u_directionalLightProjectionViewMatrix * position;\rreturn output;\r\n}\r\n";const Hi="VERTEX_BIND_GROUP_DESCRIPTOR_INSTANCING";class InstancingMesh extends Mesh{#v;#Ls=1;#Bs=[];constructor(i,m,g,_){super(i,g,_),this.#v=i,this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null),this.instanceCount=m,this.#Us(i)}get instanceCount(){return this.#Ls}set instanceCount(i){validateUintRange(i),this.gpuRenderInfo.vertexUniformInfo=parseWGSL($i).storage.instanceUniforms;const m=new ArrayBuffer(this.gpuRenderInfo.vertexUniformInfo.arrayBufferByteLength),g=new StorageBuffer(this.#v,m,this.name),_=this.gpuRenderInfo.vertexUniformBuffer;_?.gpuBuffer&&copyGPUBuffer(this.#v.gpuDevice,_.gpuBuffer,g.gpuBuffer),_?.destroy(),this.gpuRenderInfo.vertexUniformBuffer=g;let b=i;for(;b--;)this.#Bs[b]||(this.#Bs[b]=new InstancingMeshObject3D(this.#v,b,this));this.#Ls=i,this.#Us(this.#v)}get instanceChildren(){return this.#Bs}render(i,m=!1){const{view:g,currentRenderPassEncoder:_}=i,{scene:b}=g,{shadowManager:y}=b,{directionalShadowManager:T}=y,{castingList:w}=T,P=this.parent;let $=this.dirtyTransform;$&&(identity$2(this.localMatrix),translate$1(this.localMatrix,this.localMatrix,[this.x,this.y,this.z]),rotateX$3(this.localMatrix,this.localMatrix,this.rotationX),rotateY$3(this.localMatrix,this.localMatrix,this.rotationY),rotateZ$3(this.localMatrix,this.localMatrix,this.rotationZ),scale$5(this.localMatrix,this.localMatrix,[this.scaleX,this.scaleY,this.scaleZ]),P?.modelMatrix?multiply$5(this.modelMatrix,this.localMatrix,P.modelMatrix):this.modelMatrix=clone$5(this.localMatrix)),this.geometry?i.num3DObjects++:i.num3DGroups++;const H=this.#v;if(this.geometry){const{antialiasingManager:g,gpuDevice:b}=H;g.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.#Us(H);const y=this.dirtyPipeline||this.material.dirtyPipeline,{displacementTexture:T,displacementScale:w}=this.material||{};y&&(this.dirtyTransform=!0,this.material.dirtyPipeline&&this.material._updateFragmentState(),this.#Ds(),this.material.dirtyPipeline=!1,this.dirtyPipeline=!1,i.numDirtyPipelines++);const{gpuRenderInfo:P}=this,{vertexUniformBuffer:$,vertexUniformBindGroup:q,vertexUniformInfo:W,pipeline:ye,shadowPipeline:Ge}=P;void 0!==W.members.displacementScale&&b.queue.writeBuffer($.gpuBuffer,W.members.displacementScale.uniformOffset,new W.members.displacementScale.View([w])),void 0!==W.members.useDisplacementTexture&&b.queue.writeBuffer($.gpuBuffer,W.members.useDisplacementTexture.uniformOffset,new W.members.useDisplacementTexture.View([T?1:0])),this.dirtyTransform&&b.queue.writeBuffer($.gpuBuffer,W.members.instanceGroupModelMatrix.uniformOffset,new W.members.instanceGroupModelMatrix.View(this.modelMatrix)),this.dirtyTransform=!1,_.setPipeline(m?Ge:ye);const{gpuBuffer:Ke}=this.geometry.vertexBuffer,{fragmentUniformBindGroup:Xe}=this.material.gpuRenderInfo;if(i.prevVertexGpuBuffer!==Ke&&(_.setVertexBuffer(0,Ke),i.prevVertexGpuBuffer=Ke),_.setBindGroup(1,q),_.setBindGroup(2,Xe),i.numDrawCalls++,i.numInstances++,this.geometry.indexBuffer){const{indexBuffer:m}=this.geometry,{indexNum:g,triangleCount:b,gpuBuffer:y}=m;_.setIndexBuffer(y,"uint32"),_.drawIndexed(g,this.#Ls,0,0,0),i.numTriangles+=b*this.#Ls,i.numPoints+=g*this.#Ls}else{const{vertexBuffer:m}=this.geometry,{vertexCount:g,triangleCount:b}=m;_.draw(g,this.#Ls,0,0),i.numTriangles+=b,i.numPoints+=g}}this.castShadow&&(w[w.length]=this);const{children:q}=this;let W=q.length;for(;W--;)q[W].dirtyTransform=$,q[W].render(i);this.dirtyTransform=!1}#Us(i){this.dirtyPipeline=!0;const{resourceManager:m}=this.#v,g=m.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),{basicSampler:_,emptyBitmapTextureView:b,emptyCubeTextureView:y}=m,{gpuSampler:T}=_,{vertexUniformBuffer:w}=this.gpuRenderInfo,{material:P}=this,$={layout:g,label:Hi,entries:[{binding:0,resource:{buffer:w.gpuBuffer,offset:0,size:w.size}},{binding:1,resource:P?.displacementTextureSampler?.gpuSampler||T},{binding:2,resource:P?.displacementTexture?.gpuTexture?.createView()||b}]},H=i.gpuDevice.createBindGroup($);this.#Ds(),this.gpuRenderInfo.vertexBindGroupLayout=g,this.gpuRenderInfo.vertexUniformBindGroup=H}#Ds(){const{resourceManager:i}=this.#v,m={code:$i},g=i.createGPUShaderModule("VERTEX_MODULE_INSTANCING",m),{vertexUniformBuffer:_}=this.gpuRenderInfo,{material:b}=this,{basicSampler:y,emptyBitmapTextureView:T,emptyCubeTextureView:w}=i,{gpuSampler:P}=y,$=i.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),H={layout:$,label:Hi,entries:[{binding:0,resource:{buffer:_.gpuBuffer,offset:0,size:_.size}},{binding:1,resource:b?.displacementTextureSampler?.gpuSampler||P},{binding:2,resource:b?.displacementTexture?.gpuTexture?.createView()||T}]};this.gpuRenderInfo.vertexUniformBindGroup=this.redGPUContext.gpuDevice.createBindGroup(H),this.gpuRenderInfo.pipeline=createBasePipeline(this,g,$),this.gpuRenderInfo.shadowPipeline=createBasePipeline(this,g,$,Qn)}}Object.defineProperty(InstancingMesh.prototype,"meshType",{value:"instanceMesh",writable:!1});var zi="#redgpu_include SYSTEM_UNIFORM;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n};\r\n\r\nstruct OutData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec4<f32>,\r\n};\r\nstruct VertexUniforms {\r\n\t modelMatrix:mat4x4<f32>,\r\n};\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n@vertex\r\nfn main(inputData:InputData) -> OutData {\rvar outData:OutData;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\routData.position=u_projectionMatrix * u_cameraMatrix * vertexUniforms.modelMatrix * vec4<f32>(inputData.position,1.0);\routData.vertexPosition=0.5 * (vec4<f32>(inputData.position,1.0) + vec4<f32>(1.0,1.0,1.0,1.0));\rreturn outData;\r\n}\r\n";const Ki=parseWGSL("\r\nstruct Uniforms {\ropacity:f32,\ruseSkyboxTexture:u32\r\n};\r\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\r\n@group(2) @binding(1) var skyboxTextureSampler:sampler;\r\n@group(2) @binding(2) var skyboxTexture:texture_cube<f32>;\r\n\r\nstruct InputData {\r@location(0) vertexPosition:vec4<f32>,\r\n};\r\n@fragment\r\nfn main(inputData:InputData) -> @location(0) vec4<f32> {\rvar cubemapVec=inputData.vertexPosition.xyz - vec3<f32>(0.5);\r\n\r\n\rvar sampleColor:vec4<f32>=textureSample(skyboxTexture,skyboxTextureSampler,cubemapVec);\rvar outColor=vec4<f32>(sampleColor.rgb,sampleColor.a * uniforms.opacity);\rif(outColor.a==0.0) {\rdiscard;\r}\rreturn outColor;\r\n}\r\n");class SkyBoxMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m){super(i,"SKYBOX_MATERIAL",Ki,2),this.skyboxTexture=m,this.skyboxTextureSampler=new Sampler(this.redGPUContext,{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}),this.initGPURenderInfos()}}dn.defineCubeTexture(SkyBoxMaterial,["skyboxTexture"]),dn.defineSampler(SkyBoxMaterial,["skyboxTextureSampler"]),Object.freeze(SkyBoxMaterial);const qi=parseWGSL(zi),Wi=qi.uniforms.vertexUniforms;class View2D extends View3D{constructor(i,m,g){super(i,m,new Camera2D,g)}}Object.freeze(View2D);const Xi=Math.PI/180;class GroupBase extends Object3DContainer{modelMatrix=create$5();localMatrix=create$5();#e;#r;#Ht;#i=0;#a=0;#s=0;#zt=[0,0,0];#Kt=0;#qt=0;#Wt=0;#jt=1;#Yt=1;#Zt=1;#Jt=[1,1,1];#o=0;#u=0;#l=0;#Qt=[0,0,0];#As=!0;constructor(i){super(),i&&(this.name=i)}get dirtyTransform(){return this.#As}set dirtyTransform(i){this.#As=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get parent(){return this.#Ht}set parent(i){this.#Ht=i}get pivotX(){return this.#Kt}set pivotX(i){this.#Kt=i,this.dirtyTransform=!0}get pivotY(){return this.#qt}set pivotY(i){this.#qt=i,this.dirtyTransform=!0}get pivotZ(){return this.#Wt}set pivotZ(i){this.#Wt=i,this.dirtyTransform=!0}get x(){return this.#i}set x(i){this.#i=this.#zt[0]=i,this.dirtyTransform=!0}get y(){return this.#s}set y(i){this.#s=this.#zt[1]=i,this.dirtyTransform=!0}get z(){return this.#a}set z(i){this.#a=this.#zt[2]=i,this.dirtyTransform=!0}get position(){return this.#zt}get scaleX(){return this.#jt}set scaleX(i){this.#jt=this.#Jt[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#Yt}set scaleY(i){this.#Yt=this.#Jt[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#Zt}set scaleZ(i){this.#Zt=this.#Jt[2]=i,this.dirtyTransform=!0}get scale(){return this.#zt}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#Qt[0]=i,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#Qt[1]=i,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#Qt[2]=i,this.dirtyTransform=!0}get rotation(){return this.#Qt}setScale(i,m,g){m=m??i,g=g??i;const _=this.#Jt;this.#jt=_[0]=i,this.#Yt=_[1]=m,this.#Zt=_[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const _=this.#zt;this.#i=_[0]=i,this.#s=_[1]=m,this.#a=_[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const _=this.#Qt;this.#o=_[0]=i,this.#u=_[1]=m,this.#l=_[2]=g,this.dirtyTransform=!0}render(i){const{view:m,isScene2DMode:g}=i;let _;if(g&&(this.#a=0,this.#Wt=0),this.dirtyTransform){_=!0;{const{pixelRectObject:i}=m,g=this.parent,_=this.localMatrix;identity$2(_),translate$1(_,_,[this.#i,this.#s,this.#a]),rotateX$3(_,_,this.#o*Xi),rotateY$3(_,_,this.#u*Xi),rotateZ$3(_,_,this.#l*Xi);let b=[this.#jt,this.#Yt,this.#Zt];if(this.renderTextureWidth&&(b[0]*=this.renderTextureWidth/i.height,b[1]*=this.renderTextureHeight/i.height),scale$5(_,_,b),this.#Kt||this.#qt||this.#Wt){translate$1(_,_,[-this.#Kt,-this.#qt,-this.#Wt])}g?.modelMatrix?multiply$5(this.modelMatrix,g.modelMatrix,this.localMatrix):copy$5(this.modelMatrix,this.localMatrix)}}this.dirtyTransform&&(_=!0,this.dirtyTransform=!1),i.num3DGroups++;const{children:b}=this;let y=0;const T=b.length;for(;y<T;y++)_&&(b[y].dirtyTransform=_),b[y].render(i)}}Object.defineProperty(GroupBase.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(GroupBase);class Group2D extends GroupBase{#e;#r;#ks=0;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}get rotation(){return this.#ks}set rotation(i){this.#ks=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}}Object.defineProperty(Group2D.prototype,"is2DMeshType",{value:!0,writable:!1}),Object.freeze(Group2D);class Group3D extends GroupBase{#e;#r;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#r||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#r=i}}Object.defineProperty(Group3D.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(Group3D);const ji={Linear:0,QuintIn:1,QuintOut:2,QuintInOut:3,BackIn:4,BackOut:5,BackInOut:6,CircIn:7,CircOut:8,CircInOut:9,CubicIn:10,CubicOut:11,CubicInOut:12,ExpoIn:13,ExpoOut:14,ExpoInOut:15,QuadIn:16,QuadOut:17,QuadInOut:18,QuartIn:19,QuartOut:20,QuartInOut:21,SineIn:22,SineOut:23,SineInOut:24,ElasticIn:25,ElasticOut:26,ElasticInOut:27};class Plane extends Primitive{#Ui=function(){const i=[],m=[];return function(g,_,b,y,T,w,P,$){const H=b/2,q=y/2,W=Math.floor(T)||1,ye=Math.floor(w)||1,Ge=W+1,Ke=ye+1,Xe=b/W,je=y/ye;i.length=0,m.length=0;for(let g=0;g<Ke;g++){const _=g*je-q,b=$?(1-g/ye)*P:g/ye*P;for(let y=0;y<Ge;y++){const T=y*Xe-H,w=y/W*P;if(i.push(T,-_,0,0,0,1,w,b),g<ye&&y<W){const i=y+Ge*g,_=y+Ge*(g+1),b=y+1+Ge*(g+1),T=y+1+Ge*g;m.push(i,_,T),m.push(_,b,T)}}}return createPrimitiveGeometry(_,i,m,g)}}();constructor(i,m=1,g=1,_=1,b=1,y=1,T=!1){super(i);const w=`PRIMITIVE_PLANE_W${m}_H${g}_WS${_}_HS${b}_UV${y}_FY${T}`,P=i.resourceManager.cachedBufferState;let $=P[w];$||($=P[w]=this.#Ui(w,i,m,g,_,b,y,T)),this._setData($)}}var Yi="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include getBillboardMatrix;\r\nstruct VertexUniforms {\rpickingId:u32,\r\n\t modelMatrix:mat4x4<f32>,\r\n\t normalModelMatrix:mat4x4<f32>,\r\n\t useBillboardPerspective:u32,\r\n\t useBillboard:u32,\r\n\t combinedOpacity:f32,\r\n};\r\n\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n\r\nstruct InputData {\r@location(0) a_position:vec3<f32>,\r@location(1) a_normal:vec3<f32>,\r@location(2) a_uv:vec2<f32>,\r@location(3) position:vec3<f32>,\r@location(4) alpha:f32,\r@location(5) rotation:vec3<f32>,\r@location(6) scale:f32,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(14) receiveShadow:f32,\r@location(15) pickingId:vec4<f32>,\r\n};\r\nfn mat4_inverse(a:mat4x4<f32>) -> mat4x4<f32> {\rvar a00:f32=a[0][0];\rvar a01:f32=a[0][1];\rvar a02:f32=a[0][2];\rvar a03:f32=a[0][3];\rvar a10:f32=a[1][0];\rvar a11:f32=a[1][1];\rvar a12:f32=a[1][2];\rvar a13:f32=a[1][3];\rvar a20:f32=a[2][0];\rvar a21:f32=a[2][1];\rvar a22:f32=a[2][2];\rvar a23:f32=a[2][3];\rvar a30:f32=a[3][0];\rvar a31:f32=a[3][1];\rvar a32:f32=a[3][2];\rvar a33:f32=a[3][3];\r\n\rvar b00:f32=a00*a11 - a01*a10;\rvar b01:f32=a00*a12 - a02*a10;\rvar b02:f32=a00*a13 - a03*a10;\rvar b03:f32=a01*a12 - a02*a11;\rvar b04:f32=a01*a13 - a03*a11;\rvar b05:f32=a02*a13 - a03*a12;\rvar b06:f32=a20*a31 - a21*a30;\rvar b07:f32=a20*a32 - a22*a30;\rvar b08:f32=a20*a33 - a23*a30;\rvar b09:f32=a21*a32 - a22*a31;\rvar b10:f32=a21*a33 - a23*a31;\rvar b11:f32=a22*a33 - a23*a32;\r\n\r\rvar det:f32=b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06;\r\n\r\rif (det !=0.0) {\rdet=1.0/det;\rreturn mat4x4<f32>(\r(a11*b11 - a12*b10 + a13*b09) * det,\r(a02*b10 - a01*b11 - a03*b09) * det,\r(a31*b05 - a32*b04 + a33*b03) * det,\r(a22*b04 - a21*b05 - a23*b03) * det,\r(a12*b08 - a10*b11 - a13*b07) * det,\r(a00*b11 - a02*b08 + a03*b07) * det,\r(a32*b02 - a30*b05 - a33*b01) * det,\r(a20*b05 - a22*b02 + a23*b01) * det,\r(a10*b10 - a11*b08 + a13*b06) * det,\r(a01*b08 - a00*b10 - a03*b06) * det,\r(a30*b04 - a31*b02 + a33*b00) * det,\r(a21*b02 - a20*b04 - a23*b00) * det,\r(a11*b07 - a10*b09 - a12*b06) * det,\r(a00*b09 - a01*b07 + a02*b06) * det,\r(a31*b01 - a30*b03 - a32*b00) * det,\r(a20*b03 - a21*b01 + a22*b00) * det\r);\r}\r\n\r\rreturn mat4x4<f32>(\r0.0,0.0,0.0,0.0,\r0.0,0.0,0.0,0.0,\r0.0,0.0,0.0,0.0,\r0.0,0.0,0.0,0.0\r);\r\n}\r\nfn rotationMTX(t:vec3<f32>)->mat4x4<f32>\r\n{\rvar s:f32=sin(t.x);\rvar c:f32=cos(t.x);\rvar m1=mat4x4<f32>(1,0, 0,0,\r0,c,-s,0,\r0,s, c,0,\r0,0, 0,1);\r\n\rs=sin(t[1]);c=cos(t[1]);\rvar m2=mat4x4<f32>(c,0,s,0,\r0,1,0,0,\r-s,0,c,0,\r0,0,0,1);\r\n\rs=sin(t[2]);c=cos(t[2]);\rvar m3=mat4x4<f32>(c,-s,0,0,\rs,c,0,0,\r0,0,1,0,\r0,0,0,1);\r\n\rreturn m1 * m2 * m3;\r\n}\r\n\r\n@vertex\r\nfn main( inputData:InputData) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_resolution=systemUniforms.resolution;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\n\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective==1u;\rlet u_useBillboard=vertexUniforms.useBillboard==1u;\r\n\r\rlet input_position=inputData.position;\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\rvar scaleMTX=mat4x4<f32>(\rinputData.scale,0,0,0,\r0,inputData.scale,0,0,\r0,0,inputData.scale,0,\r0,0,0,1\r);\r\n\r\n\rvar translateTX=mat4x4<f32>(\r1,0,0,0,\r0,1,0,0,\r0,0,1,0,\rinputData.position.x,inputData.position.y,inputData.position.z,1\r);\r\n\r\n\rvar temp:mat4x4<f32>;\rif(u_useBillboard){\rvar rotateMTX2=rotationMTX( vec3(0,0,inputData.rotation.z) );\rtemp=translateTX * rotateMTX2;\rposition=rotateMTX2 * vec4<f32>(inputData.a_position ,1);\routput.position= u_projectionMatrix * getBillboardMatrixNoScaleRatio( u_cameraMatrix, temp ) * scaleMTX * position;\r}else{\rvar rotateMTX=rotationMTX( inputData.rotation );\rtemp=translateTX * rotateMTX * scaleMTX;\rposition=temp * vec4<f32>(inputData.a_position,1);\routput.position=u_projectionMatrix * u_cameraMatrix * position;\r}\r\n\routput.vertexPosition=position.xyz;\routput.vertexNormal= (transpose(mat4_inverse(temp) ) * vec4<f32>(inputData.a_normal,1.0)).xyz;\routput.uv=inputData.a_uv;\routput.combinedOpacity=vertexUniforms.combinedOpacity;\rreturn output;\r\n}\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n";const Zi=parseWGSL(Yi),Ji=Zi.uniforms.vertexUniforms;class ParticleEmitter extends Mesh{#Os=1e3;#Ns=5e3;#Fs=0;#Gs=0;#Vs=0;#$s=0;#Hs=0;#zs=0;#Ks=-5;#qs=-5;#Ws=-5;#Xs=5;#js=5;#Ys=5;#Zs=0;#Js=0;#Qs=1;#eo=1;#to=0;#ro=1;#no=0;#io=0;#ao=-360;#so=-360;#oo=-360;#uo=360;#lo=360;#co=360;#ho=-360;#fo=-360;#do=-360;#mo=360;#po=360;#go=360;#xo=ji.CubicOut;#_o=ji.CubicOut;#vo=ji.CubicOut;#bo=ji.Linear;#yo=ji.Linear;#To=ji.CubicOut;#So=ji.CubicOut;#wo=ji.CubicOut;#Mo;#Ro;#Po;#Rn;#Co;#Io=2e3;constructor(i){super(i),this.geometry=new Plane(i),this.material=new BitmapMaterial(i),this.ignoreFrustumCulling=!0,this.useBillboard=!0}get vertexStateBuffers(){return[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x3"},{shaderLocation:2,offset:24,format:"float32x2"}]},{arrayStride:48,stepMode:"instance",attributes:[{shaderLocation:3,offset:16,format:"float32x3"},{shaderLocation:4,offset:28,format:"float32"},{shaderLocation:5,offset:32,format:"float32x3"},{shaderLocation:6,offset:44,format:"float32"}]}]}get particleBuffers(){return this.#Ro}get particleNum(){return this.#Io}set particleNum(i){this.#Io=Math.max(Math.min(i,5e5),1),this.#Eo()}get minLife(){return this.#Os}set minLife(i){this.#Os=i}get maxLife(){return this.#Ns}set maxLife(i){this.#Ns=i}get minStartX(){return this.#Fs}set minStartX(i){this.#Fs=i}get minStartY(){return this.#Gs}set minStartY(i){this.#Gs=i}get minStartZ(){return this.#Vs}set minStartZ(i){this.#Vs=i}get maxStartX(){return this.#$s}set maxStartX(i){this.#$s=i}get maxStartY(){return this.#Hs}set maxStartY(i){this.#Hs=i}get maxStartZ(){return this.#zs}set maxStartZ(i){this.#zs=i}get minEndX(){return this.#Ks}set minEndX(i){this.#Ks=i}get minEndY(){return this.#qs}set minEndY(i){this.#qs=i}get minEndZ(){return this.#Ws}set minEndZ(i){this.#Ws=i}get maxEndX(){return this.#Xs}set maxEndX(i){this.#Xs=i}get maxEndY(){return this.#js}set maxEndY(i){this.#js=i}get maxEndZ(){return this.#Ys}set maxEndZ(i){this.#Ys=i}get minStartAlpha(){return this.#Zs}set minStartAlpha(i){this.#Zs=i}get maxStartAlpha(){return this.#Js}set maxStartAlpha(i){this.#Js=i}get minEndAlpha(){return this.#Qs}set minEndAlpha(i){this.#Qs=i}get maxEndAlpha(){return this.#eo}set maxEndAlpha(i){this.#eo=i}get minStartScale(){return this.#to}set minStartScale(i){this.#to=i}get maxStartScale(){return this.#ro}set maxStartScale(i){this.#ro=i}get minEndScale(){return this.#no}set minEndScale(i){this.#no=i}get maxEndScale(){return this.#io}set maxEndScale(i){this.#io=i}get minStartRotationX(){return this.#ao}set minStartRotationX(i){this.#ao=i}get minStartRotationY(){return this.#so}set minStartRotationY(i){this.#so=i}get minStartRotationZ(){return this.#oo}set minStartRotationZ(i){this.#oo=i}get maxStartRotationX(){return this.#uo}set maxStartRotationX(i){this.#uo=i}get maxStartRotationY(){return this.#lo}set maxStartRotationY(i){this.#lo=i}get maxStartRotationZ(){return this.#co}set maxStartRotationZ(i){this.#co=i}get minEndRotationX(){return this.#ho}set minEndRotationX(i){this.#ho=i}get minEndRotationY(){return this.#fo}set minEndRotationY(i){this.#fo=i}get minEndRotationZ(){return this.#do}set minEndRotationZ(i){this.#do=i}get maxEndRotationX(){return this.#mo}set maxEndRotationX(i){this.#mo=i}get maxEndRotationY(){return this.#po}set maxEndRotationY(i){this.#po=i}get maxEndRotationZ(){return this.#go}set maxEndRotationZ(i){this.#go=i}get easeX(){return this.#xo}set easeX(i){this.#xo=i}get easeY(){return this.#_o}set easeY(i){this.#_o=i}get easeZ(){return this.#vo}set easeZ(i){this.#vo=i}get easeAlpha(){return this.#bo}set easeAlpha(i){this.#bo=i}get easeScale(){return this.#yo}set easeScale(i){this.#yo=i}get easeRotationX(){return this.#To}set easeRotationX(i){this.#To=i}get easeRotationY(){return this.#So}set easeRotationY(i){this.#So=i}get easeRotationZ(){return this.#wo}set easeRotationZ(i){this.#wo=i}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_PARTICLE_EMITTER",Zi,Ji,Yi)}render(i){this.#Ro||this.#si(),this.#Lo(i.timestamp),super.render(i)}#Eo(){let i=this.redGPUContext;const m=new Float32Array(12*this.#Io),g=new Float32Array(12*this.#Io),_=new Float32Array(12*this.#Io),b=new Float32Array(4*this.#Io),y=new Float32Array(4*this.#Io),T=performance.now(),w=this.localToWorld(this.x,this.y,this.z);for(let i=0;i<this.#Io;++i){let P=Math.random()*this.#Ns,$=Math.random()*P;const H=w[0]+Math.random()*(this.#$s-this.#Fs)+this.#Fs,q=w[1]+Math.random()*(this.#Hs-this.#Gs)+this.#Gs,W=w[2]+Math.random()*(this.#zs-this.#Vs)+this.#Vs,ye=Math.random()*(this.#uo-this.#ao)+this.#ao,Ge=Math.random()*(this.#lo-this.#so)+this.#so,Ke=Math.random()*(this.#co-this.#oo)+this.#oo;Math.random(),this.#ro,this.#to,this.#to,Math.random(),this.#Js,this.#Zs,this.#Zs,m[12*i]=T-$,m[12*i+1]=P,m[12*i+4]=H,m[12*i+5]=q,m[12*i+6]=W,m[12*i+7]=0,m[12*i+8]=ye,m[12*i+9]=Ge,m[12*i+10]=Ke,m[12*i+11]=0,g[4*i]=H,g[4*i+1]=Math.random()*(this.#Xs-this.#Ks)+this.#Ks,g[4*i+2]=this.#xo,g[4*i+3]=w[0],g[4*i+4]=q,g[4*i+5]=Math.random()*(this.#js-this.#qs)+this.#qs,g[4*i+6]=this.#_o,g[4*i+7]=w[1],g[4*i+8]=W,g[4*i+9]=Math.random()*(this.#Ys-this.#Ws)+this.#Ws,g[4*i+10]=this.#vo,g[4*i+11]=w[2],_[4*i]=ye,_[4*i+1]=Math.random()*(this.#mo-this.#ho)+this.#ho,_[4*i+2]=this.#To,_[4*i+3]=0,_[4*i+4]=Ge,_[4*i+5]=Math.random()*(this.#po-this.#fo)+this.#fo,_[4*i+6]=this.#So,_[4*i+7]=0,_[4*i+8]=Ke,_[4*i+9]=Math.random()*(this.#go-this.#do)+this.#do,_[4*i+10]=this.#wo,_[4*i+11]=0,b[4*i]=0,b[4*i+1]=Math.random()*(this.#io-this.#no)+this.#no,b[4*i+2]=this.#yo,b[4*i+3]=0,y[4*i]=0,y[4*i+1]=Math.random()*(this.#eo-this.#Qs)+this.#Qs,y[4*i+2]=this.#bo,y[4*i+3]=0}const P=this.#Ro;this.#Ro=[];const $=[m,g,_,b,y];$.forEach((m,g)=>{const _=i.gpuDevice.createBuffer({size:m.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE});i.gpuDevice.queue.writeBuffer(_,0,m),this.#Ro.push(_),P?.length&&copyGPUBuffer(i.gpuDevice,P[g],_)}),P&&P.forEach(i=>i.destroy());let H={code:"\r\nstruct Info {\rstartValue:f32,\rendValue:f32,\reaseType:f32,\rbirthCenterValue:f32\r\n};\r\n\r\nstruct InfoGroup {\rinfoX:Info,\rinfoY:Info,\rinfoZ:Info,\r\n};\r\n\r\nstruct Particle {\rstartTime:f32,\rlife:f32,\rvaluePosition:vec3<f32>,\rvalueAlpha:f32,\rvalueRotation:vec3<f32>,\rvalueScale:f32,\r\n};\r\nstruct SimParams {\rtime:f32,\rcurrentPositionX:f32,currentPositionY:f32,currentPositionZ:f32,\rminLife:f32,maxLife:f32,\rminStartX:f32,maxStartX:f32,minEndX:f32,maxEndX:f32,easeX:f32,\rminStartY:f32,maxStartY:f32,minEndY:f32,maxEndY:f32,easeY:f32,\rminStartZ:f32,maxStartZ:f32,minEndZ:f32,maxEndZ:f32,easeZ:f32,\rminStartAlpha:f32,maxStartAlpha:f32,minEndAlpha:f32,maxEndAlpha:f32,easeAlpha:f32,\rminStartScale:f32,maxStartScale:f32,minEndScale:f32,maxEndScale:f32,easeScale:f32,\rminStartRotationX:f32,maxStartRotationX:f32,minEndRotationX:f32,maxEndRotationX:f32,easeRotationX:f32,\rminStartRotationY:f32,maxStartRotationY:f32,minEndRotationY:f32,maxEndRotationY:f32,easeRotationY:f32,\rminStartRotationZ:f32,maxStartRotationZ:f32,minEndRotationZ:f32,maxEndRotationZ:f32,easeRotationZ:f32,\r\n};\r\n\r\n\r\n@group(0) @binding(0) var<uniform> params:SimParams;\r\n@group(0) @binding(1) var<storage,read_write> particles:array<Particle>;\r\n@group(0) @binding(2) var<storage,read_write> infoPosition:array<InfoGroup>;\r\n@group(0) @binding(3) var<storage,read_write> infoRotation:array<InfoGroup>;\r\n@group(0) @binding(4) var<storage,read_write> infoScale:array<Info>;\r\n@group(0) @binding(5) var<storage,read_write> infoAlpha:array<Info>;\r\n\r\nconst PI:f32=3.141592653589793;\r\nconst HPI:f32=PI * 0.5;\r\nconst PI2:f32=PI * 2.0;\r\n\r\nfn calEasing(n:f32,easingType:f32) -> f32 {\rvar m:f32=n;\rlet easingInt:i32=i32(easingType);\r\n\rswitch (easingInt) {\rcase 0:{ m=m;}\rcase 1:{ m=m * m * m * m * m;}\rcase 2:{\rm -=1.0;\rm=(m * m * m * m * m) + 1.0;\r}\rcase 3:{\rif(m * 2.0 < 1.0) {\rm *=2.0;\rm=m * m * m * m * m * 0.5;\r}\relse {\rm=m * 2.0 - 2.0;\rm=0.5 * (m * m * m * m * m + 2.0);\r}\r}\rcase 4:{ m=m * m * (m * 1.70158 + m - 1.70158);}\rcase 5:{\rm -=1.0;\rm=m * m * (m * 1.70158 + m + 1.70158) + 1.0;\r}\rcase 6:{\rif(m * 2.0 < 1.0) {\rm *=2.0;\rm=0.5 * m * m * (m * 1.70158 + m - 1.70158);\r}\relse {\rm=m * 2.0 - 2.0;\rm=0.5 * m * m * (m * 1.70158 + m + 1.70158) + 1.0;\r}\r}\rcase 7:{ m=-1.0 * (sqrt(1.0 - m * m) - 1.0);}\rcase 8:{\rm -=1.0;\rm=sqrt(1.0 - m * m);\r}\rcase 9:{\rif(m * 2.0 < 1.0) {\rm *=2.0;\rm=-0.5 * (sqrt(1.0 - m * m) - 1.0);\r}\relse {\rm=m * 2.0 - 2.0;\rm=0.5 * sqrt(1.0 - m * m) + 0.5;\r}\r}\rcase 10:{ m=m * m * m;}\rcase 11:{\rm -=1.0;\rm=m * m * m + 1.0;\r}\rcase 12:{\rif(m * 2.0 < 1.0) {\rm *=2.0;\rm=m * m * m * 0.5;\r}\relse {\rm=m * 2.0 - 2.0;\rm=0.5 * (m * m * m + 2.0);\r}\r}\rcase 13:{\rif (m==0.0) { m=0.0;}\relse { m=pow(2.0,10.0 * (m - 1.0));}\r}\rcase 14:{\rif (m==1.0) { m=1.0;}\relse { m=-pow(2.0,-10.0 * m) + 1.0;}\r}\rcase 15:{\rif(m * 2.0 < 1.0) {\rif (m==0.0) { m=0.0;}\relse { m *=2.0;m=0.5 * pow(2.0,10.0 * (m - 1.0));}\r}\relse {\rif (m==2.0) { m=1.0;}\relse { m=m * 2.0 - 1.0;m=-0.5 * pow(2.0,-10.0 * m) + 1.0;}\r}\r}\rcase 16:{ m=m * m;}\rcase 17:{ m=(2.0 - m) * m;}\rcase 18:{\rif(m * 2.0 < 1.0) {\rm *=2.0;\rm=m * m * 0.5;\r}\relse {\rm=2.0 - m;\rm=0.5 * (m * m + 1.0);\r}\r}\rcase 19:{ m=m * m * m * m;}\rcase 20:{\rm -=1.0;\rm=1.0 - (m * m * m * m);\r}\rcase 21:{\rif(m * 2.0 < 1.0) {\rm *=2.0;\rm=m * m * m * m * 0.5;\r}\relse {\rm=m * 2.0 - 2.0;\rm=1.0 - (m * m * m * m * 0.5);\r}\r}\rcase 22:{ m=-cos(m * HPI) + 1.0;}\rcase 23:{ m=sin(m * HPI);}\rcase 24:{ m=(-cos(m * PI) + 1.0) * 0.5;}\rcase 25:{\rif (m==0.0) { m=0.0;}\relse if (m==1.0) { m=1.0;}\relse { m -=1.0;m=-1.0 * pow(2.0,10.0 * m) * sin((m - 0.075) * (PI2)/0.3);}\r}\r\rcase 26:{\rif (m==0.0) {\rm=0.0;\r} else if (m==1.0) {\rm=1.0;\r} else {\rm -=1.0;\rm=-pow(2.0,10.0 * m) * sin((m - 0.075) * PI2/0.3);\r}\r}\r\rcase 27:{\rif (m==0.0) {\rm=0.0;\r} else if (m==1.0) {\rm=1.0;\r} else {\rm=pow(2.0,-10.0 * m) * sin((m - 0.075) * PI2/0.3) + 1.0;\r}\r}\rdefault:{ m=m;}\r}\rreturn m;\r\n}\r\nfn rand(n:f32) -> f32 {\rreturn fract(sin(n) * 43758.5453123);\r\n}\r\nfn randomRange(min:f32,max:f32,v:f32)->f32\r\n{\rvar newValue:f32=rand(v);\rreturn (newValue * (max-min)) + min;\r\n}\r\nfn compute_value(tInfo:Info,lifeRatio:f32) -> f32 {\rreturn tInfo.startValue + ((tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio,tInfo.easeType));\r\n}\r\n@compute @workgroup_size(256,1,1)\r\nfn main(\r@builtin(global_invocation_id) global_id:vec3<u32>\r) {\rlet index:u32=(global_id.x);\rlet age:f32=(params.time - particles[index].startTime);\rvar lifeRatio:f32=(age/particles[index].life);\rif (lifeRatio >=1.0 ) {\rlet uuid:f32=(params.time + f32(index));\rparticles[index].startTime=params.time;\rparticles[index].life=randomRange( params.minLife,params.maxLife,uuid );\r\n\r\rinfoPosition[index].infoX.startValue=randomRange( params.minStartX + params.currentPositionX,params.maxStartX + params.currentPositionX,(uuid + 1.0) );\rinfoPosition[index].infoX.endValue =randomRange( params.minEndX + params.currentPositionX,params.maxEndX + params.currentPositionX,(uuid + 2.0) );\rinfoPosition[index].infoX.easeType =params.easeX;\rinfoPosition[index].infoX.birthCenterValue=params.currentPositionX;\r\rinfoPosition[index].infoY.startValue=randomRange( params.minStartY +params.currentPositionY,params.maxStartY+params.currentPositionY,(uuid + 3.0) );\rinfoPosition[index].infoY.endValue =randomRange( params.minEndY+params.currentPositionY,params.maxEndY+params.currentPositionY,(uuid + 4.0) );\rinfoPosition[index].infoY.easeType =params.easeY;\rinfoPosition[index].infoY.birthCenterValue=params.currentPositionY;\r\rinfoPosition[index].infoZ.startValue=randomRange( params.minStartZ+params.currentPositionZ,params.maxStartZ+params.currentPositionZ,(uuid + 5.0) );\rinfoPosition[index].infoZ.endValue =randomRange( params.minEndZ+params.currentPositionZ,params.maxEndZ+params.currentPositionZ,(uuid + 6.0) );\rinfoPosition[index].infoZ.easeType =params.easeZ;\rinfoPosition[index].infoZ.birthCenterValue=params.currentPositionZ;\r\rinfoAlpha[index].startValue=randomRange( params.minStartAlpha,params.maxStartAlpha,(uuid + 7.0) );\rinfoAlpha[index].endValue =randomRange( params.minEndAlpha,params.maxEndAlpha,(uuid + 8.0) );\rinfoAlpha[index].easeType =params.easeAlpha;\r\rinfoScale[index].startValue=randomRange( params.minStartScale,params.maxStartScale,(uuid + 9.0) );\rinfoScale[index].endValue =randomRange( params.minEndScale,params.maxEndScale,(uuid + 10.0));\rinfoScale[index].easeType =params.easeScale;\r\rinfoRotation[index].infoX.startValue=randomRange( params.minStartRotationX,params.maxStartRotationX,(uuid + 11.0));\rinfoRotation[index].infoX.endValue =randomRange( params.minEndRotationX,params.maxEndRotationX,(uuid + 12.0));\rinfoRotation[index].infoX.easeType =params.easeRotationX;\r\rinfoRotation[index].infoY.startValue=randomRange( params.minStartRotationY,params.maxStartRotationY,(uuid + 13.0));\rinfoRotation[index].infoY.endValue =randomRange( params.minEndRotationY,params.maxEndRotationY,(uuid + 14.0));\rinfoRotation[index].infoY.easeType =params.easeRotationY;\r\rinfoRotation[index].infoZ.startValue=randomRange( params.minStartRotationZ,params.maxStartRotationZ,(uuid + 15.0));\rinfoRotation[index].infoZ.endValue =randomRange( params.minEndRotationZ,params.maxEndRotationZ,(uuid + 16.0));\rinfoRotation[index].infoZ.easeType =params.easeRotationZ;\r\n\rlifeRatio=0.0;\r}\rvar targetInfo:Info;\rlet targetParticle=particles[index];\r\rtargetInfo=infoPosition[index].infoX;\rparticles[index].valuePosition.x=compute_value(targetInfo,lifeRatio);\rtargetInfo=infoPosition[index].infoY;\rparticles[index].valuePosition.y= compute_value(targetInfo,lifeRatio);\rtargetInfo=infoPosition[index].infoZ;\rparticles[index].valuePosition.z= compute_value(targetInfo,lifeRatio);\r\rtargetInfo=infoAlpha[index];\rparticles[index].valueAlpha=compute_value(targetInfo,lifeRatio);\r\rtargetInfo=infoScale[index];\rparticles[index].valueScale=compute_value(targetInfo,lifeRatio);\r\rtargetInfo=infoRotation[index].infoX;\rparticles[index].valueRotation.x= compute_value(targetInfo,lifeRatio) * PI/180.0;\rtargetInfo=infoRotation[index].infoY;\rparticles[index].valueRotation.y= compute_value(targetInfo,lifeRatio) * PI/180.0;\rtargetInfo=infoRotation[index].infoZ;\rparticles[index].valueRotation.z= compute_value(targetInfo,lifeRatio) * PI/180.0;\r\n\r\n\r\n}\r\n"},q=i.resourceManager.createGPUShaderModule("PARTICLE_EMITTER_MODULE",H);const W=[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}],ye=[{binding:0,resource:{buffer:this.#Mo,offset:0,size:this.#Po.byteLength}}];$.forEach((i,m)=>{W.push({binding:m+1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}),ye.push({binding:m+1,resource:{buffer:this.#Ro[m],offset:0,size:i.byteLength}})});const Ge=i.gpuDevice.createBindGroupLayout({entries:W}),Ke=i.gpuDevice.createPipelineLayout({bindGroupLayouts:[Ge]});this.#Co=i.gpuDevice.createBindGroup({layout:Ge,entries:ye}),this.#Rn=i.gpuDevice.createComputePipeline({layout:Ke,compute:{module:q,entryPoint:"main"}})}#si(){this.#Po=new Float32Array(46);let i={size:this.#Po.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};const{gpuDevice:m}=this.redGPUContext;this.#Mo=m.createBuffer(i),m.queue.writeBuffer(this.#Mo,0,this.#Po),this.#Eo(),this.depthStencilState.depthWriteEnabled=!1}#Lo(i){const m=this.localToWorld(this.x,this.y,this.z);this.#Po.set([i,...m,this.#Os,this.#Ns,this.#Fs,this.#$s,this.#Ks,this.#Xs,this.#xo,this.#Gs,this.#Hs,this.#qs,this.#js,this.#_o,this.#Vs,this.#zs,this.#Ws,this.#Ys,this.#vo,this.#Zs,this.#Js,this.#Qs,this.#eo,this.#bo,this.#to,this.#ro,this.#no,this.#io,this.#yo,this.#ao,this.#uo,this.#ho,this.#mo,this.#To,this.#so,this.#lo,this.#fo,this.#po,this.#So,this.#oo,this.#co,this.#do,this.#go,this.#wo],0);const{gpuDevice:g}=this.redGPUContext;g.queue.writeBuffer(this.#Mo,0,this.#Po);const _=g.createCommandEncoder({}),b=_.beginComputePass();b.setPipeline(this.#Rn),b.setBindGroup(0,this.#Co),b.dispatchWorkgroups(Math.ceil(this.#Io/256)),b.end(),g.queue.submit([_.finish()])}}function mixInMesh2D(i){const m=class extends i{#ks=0;#Bo=Pi.NORMAL;get blendMode(){const i=Object.entries(Pi).find(([,i])=>i===this.#Bo);if(!i)throw new Error(`Invalid blendMode value:${this.#Bo}`);return i[0]}set blendMode(i){let m;if("string"==typeof i){if(!(i in Pi))throw new Error(`Invalid blendMode key:${i}`);m=Pi[i]}else{if("number"!=typeof i||!Object.values(Pi).includes(i))throw new Error(`Invalid blendMode:${i}`);m=i}this.#Bo=m,this.#Uo(m)}get rotation(){return this.#ks}set rotation(i){this.#ks=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}#Uo(i){const{blendColorState:m,blendAlphaState:g}=this._material;switch(i){case Pi.NORMAL:m.operation=Fn.ADD,m.srcFactor=Nn.SRC_ALPHA,m.dstFactor=Nn.ONE_MINUS_SRC_ALPHA,g.operation=Fn.ADD,g.srcFactor=Nn.SRC_ALPHA,g.dstFactor=Nn.ONE_MINUS_SRC_ALPHA;break;case Pi.MULTIPLY:m.operation=Fn.ADD,m.srcFactor=Nn.ONE_MINUS_DST_ALPHA,m.dstFactor=Nn.ONE_MINUS_SRC_ALPHA,g.operation=Fn.ADD,g.srcFactor=Nn.SRC_ALPHA,g.dstFactor=Nn.ONE_MINUS_SRC_ALPHA;break;case Pi.LIGHTEN:m.operation=Fn.MAX,m.srcFactor=Nn.ONE,m.dstFactor=Nn.ONE,g.operation=Fn.ADD,g.srcFactor=Nn.SRC_ALPHA,g.dstFactor=Nn.ONE_MINUS_SRC_ALPHA;break;case Pi.SCREEN:m.operation=Fn.ADD,m.srcFactor=Nn.ONE,m.dstFactor=Nn.ONE_MINUS_SRC,g.operation=Fn.ADD,g.srcFactor=Nn.SRC_ALPHA,g.dstFactor=Nn.ONE_MINUS_SRC_ALPHA;break;case Pi.LINEAR_DODGE:m.operation=Fn.ADD,m.srcFactor=Nn.ONE,m.dstFactor=Nn.ONE,g.operation=Fn.ADD,g.srcFactor=Nn.SRC_ALPHA,g.dstFactor=Nn.ONE;break;case Pi.SUBTRACT:m.operation=Fn.REVERSE_SUBTRACT,m.srcFactor=Nn.SRC_ALPHA,m.dstFactor=Nn.ONE_MINUS_SRC_ALPHA,g.operation=Fn.REVERSE_SUBTRACT,g.srcFactor=Nn.ONE,g.dstFactor=Nn.ONE;break;case Pi.DIFFERENCE:m.operation=Fn.SUBTRACT,m.srcFactor=Nn.ONE,m.dstFactor=Nn.ONE,g.operation=Fn.SUBTRACT,g.srcFactor=Nn.ONE,g.dstFactor=Nn.ONE;break;case Pi.EXCLUSION:m.operation=Fn.ADD,m.srcFactor=Nn.ONE_MINUS_DST_ALPHA,m.dstFactor=Nn.ONE_MINUS_SRC_ALPHA,g.operation=Fn.ADD,g.srcFactor=Nn.ONE,g.dstFactor=Nn.ONE;break;default:console.warn(`Unsupported blend mode:${i}`)}}};return Object.defineProperty(m.prototype,"is2DMeshType",{value:!0,writable:!1}),m}Object.defineProperty(ParticleEmitter.prototype,"meshType",{value:"particle",writable:!1}),Tr.defineByPreset(ParticleEmitter,[Tr.PRESET_BOOLEAN.USE_BILLBOARD]),Tr.definePositiveNumber(ParticleEmitter,[]),Object.freeze(ParticleEmitter);const Qi=mixInMesh2D(Mesh);class Sprite2D extends Qi{#Dr=1;#Ar=1;constructor(i,m){super(i,new Plane(i,1,1,1,1,1,!0),m),this.primitiveState.cullMode=ri.FRONT}get width(){return this.#Dr}set width(i){validatePositiveNumberRange(i),this.#Dr=i,this.dirtyTransform=!0}get height(){return this.#Ar}set height(i){validatePositiveNumberRange(i),this.#Ar=i,this.dirtyTransform=!0}get material(){return this._material}set material(i){consoleAndThrowError("Sprite2D can not change material")}setSize(i,m){this.width=i,this.height=void 0!==m?m:i}}Object.freeze(Sprite2D);var ea="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include getBillboardMatrix;\r\nstruct VertexUniforms {\rpickingId:u32,\rmodelMatrix:mat4x4<f32>,\rnormalModelMatrix:mat4x4<f32>,\ruseBillboardPerspective:u32,\ruseBillboard:u32,\rbillboardFixedScale:f32,\rcombinedOpacity:f32,\r\n};\r\n\r\n\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn main(inputData:InputData) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_resolution=systemUniforms.resolution;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\n\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\rlet u_billboardFixedScale=vertexUniforms.billboardFixedScale;\r\n\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_positionVec4=vec4<f32>(input_position,1.0);\rlet input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0);\rlet input_uv=inputData.uv;\r\n\r\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\r\n\r\n\r\rif (u_useBillboard==1) {\r\rlet projectionModelMatrix=u_projectionMatrix * u_modelMatrix;\rlet billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix);\rlet billboardNormalMatrix=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix);\rif(u_useBillboardPerspective==1){\rposition=billboardMatrix * input_positionVec4;\rnormalPosition=billboardNormalMatrix * input_vertexNormalVec4;\r}else{\rposition=billboardMatrix * input_positionVec4;\rnormalPosition=billboardNormalMatrix * input_vertexNormalVec4;\r}\r\n\r\routput.position=u_projectionMatrix * position;\r\n\rif (u_useBillboardPerspective !=1) {\r\rvar temp=output.position/output.position.w;\r\n\r\rlet aspectRatio=u_resolution.x/u_resolution.y;\rlet scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio;\rlet scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0);\r\n\r\routput.position=vec4<f32>(\rtemp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),\rtemp.zw\r);\r}\r} else {\r\rposition=u_cameraMatrix * u_modelMatrix * input_positionVec4;\rnormalPosition=u_cameraMatrix * u_normalModelMatrix * input_vertexNormalVec4;\r\n\r\routput.position=u_projectionMatrix * position;\r}\r\n\r\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.uv=input_uv;\routput.combinedOpacity=vertexUniforms.combinedOpacity;\rreturn output;\r\n}\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {\rvar output:OutputShadowData;\r\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix;\rlet u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\rlet u_billboardFixedScale=vertexUniforms.billboardFixedScale;\rlet input_position=inputData.position;\rlet input_positionVec4=vec4<f32>(input_position,1.0);\rvar position:vec4<f32>;\r\n\rreturn output;\r\n}\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_cameraMatrix=systemUniforms.camera.cameraMatrix;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\r\n\r\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\rlet u_billboardFixedScale=vertexUniforms.billboardFixedScale;\r\n\r\rlet input_position=inputData.position;\rlet input_positionVec4=vec4<f32>(input_position,1.0);\r\rlet u_resolution=systemUniforms.resolution;\r\n\r\rvar position:vec4<f32>;\r\n\rif (u_useBillboard==1) {\r\rlet projectionModelMatrix=u_projectionMatrix * u_modelMatrix;\rlet billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix);\rif(u_useBillboardPerspective==1){\rposition=billboardMatrix * input_positionVec4;\r}else{\rposition=billboardMatrix * input_positionVec4;\r}\r\n\r\routput.position=u_projectionMatrix * position;\r\n\rif (u_useBillboardPerspective !=1) {\r\rvar temp=output.position/output.position.w;\r\n\r\rlet aspectRatio=u_resolution.x/u_resolution.y;\rlet scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio;\rlet scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0);\r\n\r\routput.position=vec4<f32>(\rtemp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),\rtemp.zw\r);\r}\r} else {\r\rposition=u_cameraMatrix * u_modelMatrix * input_positionVec4;\routput.position=u_projectionMatrix * position;\r}\r\n\r\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\r\n\rreturn output;\r\n}\r\n";const ta=parseWGSL(ea),ra=ta.uniforms.vertexUniforms;class Sprite3D extends Mesh{constructor(i,m,g){super(i),this._geometry=g||new Plane(i),this._material=m,this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.primitiveState.cullMode=ri.NONE}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_3D",ta,ra,ea)}}Tr.defineByPreset(Sprite3D,[[Tr.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[Tr.PRESET_BOOLEAN.USE_BILLBOARD,!0],[Tr.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(Sprite3D);class ASpriteSheet extends Mesh{#Do=0;#Ao=0;#ko=0;#Oo=!0;#No=!0;#Fo;#Go;#Vo="play";constructor(i,m,g){super(i),this.#Go=g,this._material=new BitmapMaterial(i),this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.spriteSheetInfo=m}get state(){return this.#Vo}get loop(){return this.#No}set loop(i){this.#No=i}get frameRate(){return this.#Do}set frameRate(i){i<0&&(i=0),0===this.#Do&&i&&(this.#Ao=0),this.#Do=i,this.#ko=1e3/this.#Do}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("ASpriteSheet can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("ASpriteSheet can not change material")}get spriteSheetInfo(){return this.#Fo}set spriteSheetInfo(i){this.#Fo=i,this.frameRate=i.frameRate,this.segmentW=i.segmentW,this.segmentH=i.segmentH,this.totalFrame=i.totalFrame,this.currentIndex=i.startIndex,this.#No=!0,this.#Ao=0,this._material.diffuseTexture=i.texture}play(){this.#Oo=!0,this.#Vo="play",this.#Ao=0}pause(){this.#Oo=!1,this.#Vo="pause"}stop(){this.#Oo=!1,this.currentIndex=0,this.#Vo="stop"}render(i){const{diffuseTexture:m}=this._material;this.#Go(m,this.segmentW,this.segmentH);const{timestamp:g}=i;if(this.#Ao||(this.#Ao=this.#ko+g),this.#Oo&&this.#Ao<g&&this.#Do){const i=Math.floor((g-this.#Ao)/this.#ko),m=(Number.isFinite(i)?i:0)||1;this.#Ao=this.#ko+g,this.currentIndex+=m,this.currentIndex>=this.totalFrame&&(this.loop?(this.#Oo=!0,this.currentIndex=0):(this.#Oo=!1,this.currentIndex=this.totalFrame-1))}super.render(i)}}Tr.definePositiveNumber(ASpriteSheet,[["segmentW",5],["segmentH",3],["totalFrame",15],["currentIndex",0]]),Object.freeze(ASpriteSheet);var na="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include getBillboardMatrix;\r\nstruct VertexUniforms {\rpickingId:u32,\rmodelMatrix:mat4x4<f32>,\rnormalModelMatrix:mat4x4<f32>,\rsegmentW:f32,\rsegmentH:f32,\rtotalFrame:f32,\rcurrentIndex:f32,\rcombinedOpacity:f32,\r\n};\r\n\r\n\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n\r\n@vertex\r\nfn main( inputData:InputData ) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\n\r\n\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\rposition=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);\rnormalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);\r\n\routput.position=u_projectionMatrix * position;\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.combinedOpacity=vertexUniforms.combinedOpacity;\r\n\rlet uv=vec2<f32>(\rinput_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW),\rinput_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH)\r);\r\n\routput.uv=uv;\rreturn output;\r\n}\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {\rvar output:OutputShadowData;\r\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix;\rlet u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\rlet input_position=inputData.position;\rvar position:vec4<f32>;\r\n\rreturn output;\r\n}\r\n\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\rvar output:OutputData;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\r\n\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\rposition=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);\rnormalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);\routput.position=u_projectionMatrix * position;\r\n\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\rreturn output;\r\n}\r\n";const ia=parseWGSL(na),aa=ia.uniforms.vertexUniforms,sa=mixInMesh2D(ASpriteSheet);class SpriteSheet2D extends sa{#Dr=1;#Ar=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:_}=i,b=_?.width/m,y=_?.height/g;b===this.#Dr&&y===this.#Ar||(this.#Dr=_?.width/m,this.#Ar=_?.height/g,this.dirtyTransform=!0)}else this.#Dr=1,this.#Ar=1}),this._geometry=new Plane(i,1,1,1,1,1,!0),this.primitiveState.cullMode=ri.FRONT}get width(){return this.#Dr}get height(){return this.#Ar}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_2D",ia,aa,na)}}Object.freeze(SpriteSheet2D);var oa="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include getBillboardMatrix;\r\nstruct VertexUniforms {\rpickingId:u32,\rmodelMatrix:mat4x4<f32>,\rnormalModelMatrix:mat4x4<f32>,\ruseBillboardPerspective:u32,\ruseBillboard:u32,\rsegmentW:f32,\rsegmentH:f32,\rtotalFrame:f32,\rcurrentIndex:f32,\rbillboardFixedScale:f32,\r_renderRatioX:f32,\r_renderRatioY:f32,\rcombinedOpacity:f32,\r\n};\r\n\r\n\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n\r\n@vertex\r\nfn main( inputData:InputData ) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_resolution=systemUniforms.resolution;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\n\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\rlet u_billboardFixedScale=vertexUniforms.billboardFixedScale;\rlet u_renderRatioX=vertexUniforms._renderRatioX;\rlet u_renderRatioY=vertexUniforms._renderRatioY;\rvar ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>(\ru_renderRatioX,0,0,0,\r0,u_renderRatioY,0,0,\r0,0,1,0,\r0,0,0,1\r);\r\n\r\n\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\r\rif (u_useBillboard==1) {\r\rif(u_useBillboardPerspective==1){\rposition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0);\rnormalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix *vec4<f32>(input_vertexNormal,1.0);\r}else{\rposition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix *vec4<f32>(input_position,1.0);\rnormalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0);\r}\r\n\r\routput.position=u_projectionMatrix * position;\r\n\rif (u_useBillboardPerspective !=1) {\r\rvar temp=output.position/output.position.w;\r\n\r\rlet aspectRatio=u_resolution.x/u_resolution.y;\rlet scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX;\rlet scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY;\r\n\r\routput.position=vec4<f32>(\rtemp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),\rtemp.zw\r);\r}\r} else {\r\rposition=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0);\rnormalPosition=u_cameraMatrix * u_normalModelMatrix * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0);\r\n\r\routput.position=u_projectionMatrix * position;\r}\r\n\r\n\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.combinedOpacity=vertexUniforms.combinedOpacity;\r\n\r\n\rlet uv=vec2<f32>(\rinput_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW),\rinput_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH)\r);\r\n\routput.uv=uv;\rreturn output;\r\n}\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData {\rvar output:OutputShadowData;\r\rlet u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix;\rlet u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix;\rlet u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\rlet input_position=inputData.position;\rvar position:vec4<f32>;\r\n\rreturn output;\r\n}\r\n\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_cameraMatrix=systemUniforms.camera.cameraMatrix;\rlet u_modelMatrix=vertexUniforms.modelMatrix;\r\n\r\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\rlet u_billboardFixedScale=vertexUniforms.billboardFixedScale;\rlet u_renderRatioX=vertexUniforms._renderRatioX;\rlet u_renderRatioY=vertexUniforms._renderRatioY;\rvar ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>(\ru_renderRatioX,0,0,0,\r0,u_renderRatioY,0,0,\r0,0,1,0,\r0,0,0,1\r);\r\n\r\rlet input_position=inputData.position;\r\n\r\rlet u_resolution=systemUniforms.resolution;\r\n\r\rvar position:vec4<f32>;\r\n\rif (u_useBillboard==1) {\r\rif(u_useBillboardPerspective==1){\rposition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0);\r}else{\rposition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix *vec4<f32>(input_position,1.0);\r}\r\n\r\routput.position=u_projectionMatrix * position;\r\n\rif (u_useBillboardPerspective !=1) {\r\rvar temp=output.position/output.position.w;\r\n\r\rlet aspectRatio=u_resolution.x/u_resolution.y;\rlet scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX;\rlet scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY;\r\n\r\routput.position=vec4<f32>(\rtemp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale),\rtemp.zw\r);\r}\r} else {\r\rposition=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0);\r\routput.position=u_projectionMatrix * position;\r}\r\n\r\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\r\n\rreturn output;\r\n}\r\n";const ua=parseWGSL(oa),la=ua.uniforms.vertexUniforms;class SpriteSheet3D extends ASpriteSheet{#$o=1;#Ho=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:_}=i,b=_?.width/m,y=_?.height/g;b===this.#$o&&y===this.#Ho||(this.#$o=_?.width/m,this.#Ho=_?.height/g,this.#Ho>this.#$o?(this._renderRatioX=1,this._renderRatioY=this.#Ho/this.#$o):(this._renderRatioX=this.#$o/this.#Ho,this._renderRatioY=1),this.dirtyTransform=!0)}else this.#$o=1,this.#Ho=1}),this._geometry=new Plane(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_3D",ua,la,oa)}}Tr.definePositiveNumber(SpriteSheet3D,[["_renderRatioX",1],["_renderRatioY",1]]),Tr.defineByPreset(SpriteSheet3D,[[Tr.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[Tr.PRESET_BOOLEAN.USE_BILLBOARD,!0],[Tr.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(SpriteSheet3D);class SpriteSheetInfo{#zo=0;#Ko=0;#qo=0;#Wo=0;#Do=0;#No=!0;#Xo;constructor(i,m,g,_,b,y,T=!0,w=60){validateRedGPUContext(i),validateUintRange(g),validateUintRange(_),validateUintRange(b),validateUintRange(y),validateUintRange(w),this.#zo=g,this.#Ko=_,this.#qo=b,this.#Wo=y,this.#Xo=new BitmapTexture(i,m),this.#No=T,this.#Do=w}get segmentW(){return this.#zo}get segmentH(){return this.#Ko}get totalFrame(){return this.#qo}get startIndex(){return this.#Wo}get texture(){return this.#Xo}get frameRate(){return this.#Do}get loop(){return this.#No}}Object.freeze(SpriteSheetInfo);const ca=parseWGSL("#redgpu_include drawPicking;\r\nstruct Uniforms {\r\topacity:f32\r\n};\r\n\r\nstruct InputData {\r\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexColor:vec4<f32>,\r@location(15) pickingId:vec4<f32>,\r\n}\r\n\r\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\r\n@fragment\r\nfn main(inputData:InputData) -> @location(0) vec4<f32> {\rreturn inputData.vertexColor;\r\n}\r\n\r\n\r\n");class LineMaterial extends ABaseMaterial{constructor(i,m){super(i,"LINE_MATERIAL",ca,2),m&&(this.name=m),this.initGPURenderInfos()}}Object.freeze(LineMaterial);class LinePoint{position;colorRGBA;constructor(i=0,m=0,g=0,_){this.position=[i,m,g],this.colorRGBA=_}}const getPointsOnBezierCurveWithSplitting=(i,m,g,_)=>{let b=_||[];if(((i,m)=>{let g=i[m].position,_=i[m+1].position,b=i[m+2].position,y=i[m+3].position,T=3*_[0]-2*g[0]-y[0],w=3*_[1]-2*g[1]-y[1],P=3*b[0]-2*y[0]-g[0],$=3*b[1]-2*y[1]-g[1];return T*=T,w*=w,P*=P,$*=$,T<P&&(T=P),w<$&&(w=$),T+w})(i,m)<g)b.push(i[m],i[m+3]);else{let _=.5,y=i[m],T=i[m+1],w=i[m+2],P=i[m+3],$=lerp$4(create$4(),y.position,T.position,_),H=lerp$4(create$4(),T.position,w.position,_),q=lerp$4(create$4(),w.position,P.position,_),W=lerp$4(create$4(),$,H,_),ye=lerp$4(create$4(),H,q,_),Ge=lerp$4(create$4(),W,ye,_);Ge=new LinePoint(Ge[0],Ge[1],Ge[2],y.colorRGBA),$=new LinePoint($[0],$[1],$[2],$.colorRGBA),q=new LinePoint(q[0],q[1],q[2],q.colorRGBA),W=new LinePoint(W[0],W[1],W[2],W.colorRGBA),ye=new LinePoint(ye[0],ye[1],ye[2],ye.colorRGBA),getPointsOnBezierCurveWithSplitting([y,$,W,Ge],0,g,b),getPointsOnBezierCurveWithSplitting([Ge,ye,q,P],0,g,b)}return b};class LinePointWithInOut{inLinePoint;linePoint;outLinePoint;constructor(i=0,m=0,g=0,_=0,b=0,y=0,T=0,w=0,P=0,$,H){let q=[...convertHexToRgb($,!0)];q=[q[0]/255,q[1]/255,q[2]/255,H],this.inLinePoint=new LinePoint(_,b,y,q),this.linePoint=new LinePoint(i,m,g,q),this.outLinePoint=new LinePoint(T,w,P,q)}}const lineVec2DistanceToSegmentSq=function(i,m,g){i=[i[0],i[1]],m=[m[0],m[1]],g=[g[0],g[1]];let _=dr(m,g);if(0===_)return dr(i,m);let b=((i[0]-m[0])*(g[0]-m[0])+(i[1]-m[1])*(g[1]-m[1]))/_;return b=Math.max(0,Math.min(1,b)),dr(i,lerp([0,0],m,g,b))},lineSimplifyPoints=(i,m,g,_,b)=>{let y=b||[],T=i[m],w=i[g-1],P=0,$=1,H=m+1;for(;H<g-1;++H){let m=lineVec2DistanceToSegmentSq(i[H].position,T.position,w.position);m>P&&(P=m,$=H)}return Math.sqrt(P)>_?(lineSimplifyPoints(i,m,$+1,_,y),lineSimplifyPoints(i,$,g,_,y)):y.push(T,w),y},ha={LINEAR:"linear",CATMULL_ROM:"catmullRom",BEZIER:"bezier"};Object.freeze(ha);var fa="#redgpu_include SYSTEM_UNIFORM;\r\nstruct VertexUniforms {\rpickingId:u32,\rmodelMatrix:mat4x4<f32>,\rnormalModelMatrix:mat4x4<f32>,\r\n};\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexColor:vec4<f32>,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexColor:vec4<f32>,\r\n\r\n\r\n\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn main( inputData:InputData ) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_resolution=systemUniforms.resolution;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\r\rlet input_position=inputData.position;\rlet input_vertexColor=inputData.vertexColor;\r\n\rvar position:vec4<f32>;\rposition=u_modelMatrix * vec4<f32>(input_position,1.0);\routput.position=u_projectionMatrix * u_cameraMatrix * position;\routput.vertexPosition=position.xyz;\routput.vertexColor=input_vertexColor;\rreturn output;\r\n}\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\r\n\rvar output:OutputData;\rreturn output;\r\n}\r\n";const da=parseWGSL(fa),ma=da.uniforms.vertexUniforms;class Line3D extends Mesh{baseColor;#jo;#Yo=1;#Zo=.01;#yr=.01;#Jo=[];#Qo=[];#eu;constructor(i,m=ha.LINEAR,g="#fff"){super(i),this.primitiveState.topology=ai.LINE_STRIP,this.baseColor=g,this.#jo=m,this._geometry=new Geometry(i,new VertexBuffer(i,this.#Jo,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4}))),this._material=new LineMaterial(i)}get originalPoints(){return this.#Qo}get type(){return this.#jo}set type(i){this.#jo=i,this.#tu()}get interleaveData(){return this.#Jo}get tension(){return this.#Yo}set tension(i){validatePositiveNumberRange(i),this.#Yo=i,this.#tu()}get tolerance(){return this.#Zo}set tolerance(i){validatePositiveNumberRange(i),this.#Zo=i,this.#tu()}get distance(){return this.#yr}set distance(i){validatePositiveNumberRange(i),this.#yr=i,this.#tu()}get numPoints(){return this.#Qo.length}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_3D",da,ma,fa)}addPoint(i=0,m=0,g=0,_=this.baseColor,b=1,y=0,T=0,w=0,P=0,$=0,H=0){this.#Qo.push(new LinePointWithInOut(i,m,g,y,T,w,P,$,H,_,b)),this.#tu()}addPointAt(i,m=0,g=0,_=0,b=this.baseColor,y=1,T=0,w=0,P=0,$=0,H=0,q=0){this.#Qo.length<i&&(i=this.#Qo.length),null!=i?this.#Qo.splice(i,0,new LinePointWithInOut(m,g,_,T,w,P,$,H,q,b,y)):this.#Qo.push(new LinePointWithInOut(m,g,_,T,w,P,$,H,q,b,y)),this.#tu()}removePointAt(i){validateUintRange(i),this.#Qo[i]?this.#Qo.splice(i,1):consoleAndThrowError("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값:"+i),this.#tu()}removeAllPoint(){this.#Qo.length=0,this.#tu()}#Je(){if(this._geometry,this.#Qo.length){const{redGPUContext:i}=this;this._geometry=new Geometry(i,new VertexBuffer(i,this.#Jo,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4})))}this.dirtyPipeline=!0}#tu(){const i=this.#Qo,m=this.#Yo,g=this.#Zo,_=this.#yr;let b,y,T,w;switch(this.#Jo.length=0,this.#jo){case ha.CATMULL_ROM:case ha.BEZIER:if(i.length>1)for(this.#eu=(i=>{let m,g=[],_=0,b=0;const y=i.length;for(;_<y;_++){m=i[_];const{inLinePoint:y,linePoint:T,outLinePoint:w}=m;0===b?(g[b++]=T,g[b++]=w):(g[b++]=y,g[b++]=T,i[_+1]&&(g[b++]=w))}return g})(ha.CATMULL_ROM===this.#jo?((i,m=1)=>{const g=i.length,_=g-2;for(let b=0;b<g-1;b++){const g=b?i[b-1].linePoint.position:i[b].linePoint.position,y=i[b].linePoint.position,T=i[b+1].linePoint.position,w=b===_?T:i[b+2].linePoint.position;i[b].outLinePoint.position=[y[0]+(T[0]-g[0])/6*m,y[1]+(T[1]-g[1])/6*m,y[2]+(T[2]-g[2])/6*m],i[b+1].inLinePoint.position=[T[0]-(w[0]-y[0])/6*m,T[1]-(w[1]-y[1])/6*m,T[2]-(w[2]-y[2])/6*m]}return i})(i,m):i),b=((i,m)=>{let g=[],_=(i.length-1)/3;_=Math.floor(_);let b,y=0;for(;y<_;++y)b=3*y,getPointsOnBezierCurveWithSplitting(i,b,m,g);return g})(this.#eu,g),b=lineSimplifyPoints(b,0,b.length,_),y=0,T=b.length;y<T;y++)w=b[y],this.#Jo.push(...w.position,...w.colorRGBA);else this.#Jo.push(0,0,0,1,1,1,1);break;default:for(y=0,T=i.length;y<T;y++){const{linePoint:m}=i[y],g=m.colorRGBA;this.interleaveData.push(...m.position,...g)}}this.#Je()}}Object.freeze(Line3D);const pa=parseWGSL(fa),ga=pa.uniforms.vertexUniforms;const xa=";box-sizing:content-box;white-space:nowrap;",_a={padding:0,background:"transparent",color:"#fff",fontFamily:"Arial",fontSize:16,fontWeight:"normal",fontStyle:"normal",letterSpacing:0,wordBreak:"keep-all",verticalAlign:"middle",textAlign:"center",lineHeight:1.4,border:"",boxShadow:"none",boxSizing:"border-box",filter:""};class ATextField extends Mesh{#ru;#nu;#iu;#au;#su;#ou;#uu;#lu=!0;#v;#cu;#hu=!1;#fu=!1;#du=!1;constructor(i,m,g=!0){super(i),this.#v=i,this.#lu=g,this.#uu=m,this._material=new BitmapMaterial(i,new BitmapTexture(i)),this._material.transparent=!0,this._material.diffuseTextureSampler=new Sampler(i,g?{minFilter:Mr.LINEAR,magFilter:Mr.LINEAR,mipmapFilter:Rr.LINEAR}:{minFilter:Mr.NEAREST,magFilter:Mr.NEAREST,mipmapFilter:null}),this.depthStencilState.depthWriteEnabled=!1,this.#mu(),this.#pu(),this.#gu(),this.#xu(),this.#_u()}get text(){return this.#ou}set text(i){this.#ou=i;const m=this.#iu.querySelector("foreignObject div"),g=this.#vu(i);this.#au.innerHTML=g,m.innerHTML=g,this.#bu()}render(i){this.#uu(this.#su.width,this.#su.height),super.render(i)}#vu(i){return i.toString().replace(/\<br\/>/gi,"<div/>")}#mu(){"undefined"!=typeof OffscreenCanvas?this.#ru=new OffscreenCanvas(100,100):this.#ru=document.createElement("canvas"),this.#nu=this.#ru.getContext("2d")}#yu(){const i=this.#au.getBoundingClientRect();const m=i.width+3+3,g=i.height+3+3;return{width:-2&Math.ceil(m),height:-2&Math.ceil(g),extraTop:3,extraRight:3,extraBottom:3,extraLeft:3}}#bu(){if(this.#hu=!0,this.#fu)return void(this.#du=!0);this.#fu=!0;const updateFrame=()=>{if(this.#hu){this.#hu=!1;const i=this.#iu,m=i.querySelector("foreignObject"),{width:g,height:_,extraTop:b,extraRight:y,extraBottom:T,extraLeft:w}=this.#yu();m.setAttribute("width",g.toString()),m.setAttribute("height",_.toString()),m.style.padding=`${b}px ${y}px ${T}px ${w}px`,i.setAttribute("width",g.toString()),i.setAttribute("height",_.toString()),this.#su.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(i.outerHTML)}this.#du?(this.#hu=!0,this.#du=!1,requestAnimationFrame(updateFrame)):this.#fu=!1};requestAnimationFrame(updateFrame)}#xu(){this.#su=new Image,this.#su.style.cssText="position:absolute;bottom:0px;left:0;",this.#su.onload=i=>{let m,g;const{width:_,height:b}=this.#yu(),y=(this.#lu,2),T=this.#lu?1:2;m=_*y,g=b*y,this.#su.width=m/T,this.#su.height=g/T,this.#ru.width=m,this.#ru.height=g,this.#ru instanceof OffscreenCanvas||(this.#ru.style.width=m/y+"px",this.#ru.style.height=g/y+"px"),this.#nu.imageSmoothingEnabled=!0,this.#nu.imageSmoothingQuality="high",this.#nu.clearRect(0,0,m,g),this.#nu.fillStyle="rgba(0,0,0,0)",this.#nu.fillRect(0,0,m,g),this.#nu.drawImage(this.#su,0,0,m,g),this.dirtyTransform=!0;const callback=i=>{this.material.diffuseTexture.src=URL.createObjectURL(i)};this.#ru instanceof OffscreenCanvas?this.#ru.convertToBlob({type:"image/png"}).then(callback):this.#ru.toBlob(callback,"image/png")}}#Tu=(i,m)=>{const g=this.#iu.querySelector("foreignObject > div").style,_=this.#au.style,b=`_${i}`;this[b]=m,Object.defineProperty(this,i,{get:()=>this[b],set:m=>{this[b]=m,(i=>"number"==typeof i)(m)&&(i=>!["lineHeight","fontWeight"].includes(i))(i)&&(m=`${m}px`),g[i]=m,_[i]=m,this.#cu&&cancelAnimationFrame(this.#cu),this.#cu=requestAnimationFrame(()=>{this.#bu()})}}),this[i]=m};#pu(){this.#au=document.createElement("div"),this.#au.style.cssText=xa+";position:absolute;top:200px;left:0;visibility:hidden;text-rendering:optimizeLegibility",document.body.appendChild(this.#au)}#gu(){const i=this.#iu=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.setAttribute("text-rendering","optimizeLegibility"),i.style.cssText="position:absolute;top:0px;left:0px;z-index:1;margin:0;padding:0;overflow:visible;background:transparent",i.innerHTML=`<rect x="0" y="0" width="100%" height="100%" fill="rgba(0,0,0,0)"/><foreignObject width="100%" height="100%" style="margin:0;padding:0;" overflow="visible"><div xmlns="http://www.w3.org/1999/xhtml" style="${xa}"></div></foreignObject>`}#_u(){for(const[i,m]of Object.entries(_a))this.#Tu(i,m)}}Object.freeze(ATextField);const va=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include calcTintBlendMode;\r\n#redgpu_include drawPicking;\r\n\r\nstruct Uniforms {\ruseDiffuseTexture:u32,\r\ropacity:f32,\ruseTint:u32,\rtint:vec4<f32>,\rtintBlendMode:u32,\r\n};\r\n\r\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\r\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\r\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\r\n\r\nstruct InputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n@fragment\r\nfn main(inputData:InputData) -> @location(0) vec4<f32> {\r\rvar finalColor:vec4<f32>=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv);\r\n\rfinalColor=vec4<f32>(finalColor.rgb/finalColor.a,finalColor.a * uniforms.opacity * inputData.combinedOpacity);\r\n\rif(uniforms.useTint==1u){\rfinalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint);\r}\r\n\r\rif (finalColor.a==0.0) {\rdiscard;\r}\r\n\rreturn finalColor;\r\n};\r\n");class TextFieldMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"TEXT_FILED_MATERIAL",va,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}dn.defineByPreset(TextFieldMaterial,[dn.PRESET_TEXTURE.DIFFUSE_TEXTURE,dn.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(TextFieldMaterial);var ba="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include getBillboardMatrix;\r\nstruct VertexUniforms {\rpickingId:u32,\r\n\t modelMatrix:mat4x4<f32>,\r\n\t normalModelMatrix:mat4x4<f32>,\r\n\t useBillboardPerspective:u32,\r\n\t useBillboard:u32,\r\n\t combinedOpacity:f32,\r\n};\r\n\r\n\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn main( inputData:InputData ) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_resolution=systemUniforms.resolution;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\n\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\r\n\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_positionVec4=vec4<f32>(input_position,1.0);\rlet input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0);\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\r\n\r\nvar scaleMatrix:mat4x4<f32>;\r\rlet cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz);\rlet objectPosition=input_position.xyz;\rlet distance=length(cameraPosition - objectPosition);\r\n\r\rlet scaleFactor=distance;\rscaleMatrix=mat4x4<f32>(\r10,0.0,0.0,0.0,\r0.0,10,0.0,0.0,\r0.0,0.0,1.0,0.0,\r0.0,0.0,0.0,1.0\r);\r\n\r\n\r\n\r\rif (u_useBillboard==1) {\r\r\rif (u_useBillboardPerspective==1) {\r\r\n\r} else {\r\rscaleMatrix=mat4x4<f32>(\rscaleFactor,0.0,0.0,0.0,\r0.0,scaleFactor,0.0,0.0,\r0.0,0.0,1.0,0.0,\r0.0,0.0,0.0,1.0\r);\r}\r\n\r\rposition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0);\rnormalPosition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(input_vertexNormal.xyz,1.0);\r\n\r\rvar temp=output.position/output.position.w;\routput.position=vec4<f32>(\rtemp.xy + objectPosition.xy * vec2<f32>(\r(u_projectionMatrix * u_modelMatrix)[0][0],\r(u_projectionMatrix * u_modelMatrix)[1][1]\r),\rtemp.zw\r);\r\n\r} else {\r\rposition=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0);\rnormalPosition=u_cameraMatrix * u_normalModelMatrix * scaleMatrix * vec4<f32>(input_vertexNormal.xyz,1.0);\r}\r\n\r\routput.position=u_projectionMatrix * position;\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.uv=input_uv;\routput.combinedOpacity=vertexUniforms.combinedOpacity;\rreturn output;\r\n}\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\rvar output:OutputData;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\rlet u_useBillboardPerspective=vertexUniforms.useBillboardPerspective;\rlet u_useBillboard=vertexUniforms.useBillboard;\r\n\r\rlet input_position=inputData.position;\rlet input_positionVec4=vec4<f32>(input_position,1.0);\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\r\n\r\n\rvar scaleMatrix:mat4x4<f32>;\r\rlet cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz);\rlet objectPosition=input_position.xyz;\rlet distance=length(cameraPosition - objectPosition);\r\n\r\rlet scaleFactor=distance;\rscaleMatrix=mat4x4<f32>(\r10,0.0,0.0,0.0,\r0.0,10,0.0,0.0,\r0.0,0.0,1.0,0.0,\r0.0,0.0,0.0,1.0\r);\r\rif (u_useBillboard==1) {\r\rif (u_useBillboardPerspective==1) {\r\r\n\r} else {\r\rscaleMatrix=mat4x4<f32>(\rscaleFactor,0.0,0.0,0.0,\r0.0,scaleFactor,0.0,0.0,\r0.0,0.0,1.0,0.0,\r0.0,0.0,0.0,1.0\r);\r}\r\n\r\rposition=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0);\r\n\r\rvar temp=output.position/output.position.w;\routput.position=vec4<f32>(\rtemp.xy + objectPosition.xy * vec2<f32>(\r(u_projectionMatrix * u_modelMatrix)[0][0],\r(u_projectionMatrix * u_modelMatrix)[1][1]\r),\rtemp.zw\r);\r\n\r} else {\r\rposition=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0);\r}\routput.position=u_projectionMatrix * position;\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\rreturn output;\r\n}\r\n";const ya=parseWGSL(ba),Ta=ya.uniforms.vertexUniforms;class TextField3D extends ATextField{#$o=1;#Ho=1;constructor(i){super(i,(i,m)=>{this.#$o=i/1024,this.#Ho=m/1024}),this._geometry=new Plane(i),this._material=new TextFieldMaterial(i,new BitmapTexture(i)),this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0}get geometry(){return this._geometry}set geometry(i){console.error("TextField3D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField3D can not change material")}get renderTextureWidth(){return this.#$o}get renderTextureHeight(){return this.#Ho}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_3D",ya,Ta,ba)}}Tr.defineByPreset(TextField3D,[[Tr.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],Tr.PRESET_BOOLEAN.USE_BILLBOARD]),Object.freeze(TextField3D);var Sa="#redgpu_include SYSTEM_UNIFORM;\r\n#redgpu_include getBillboardMatrix;\r\nstruct VertexUniforms {\rpickingId:u32,\r\n\t modelMatrix:mat4x4<f32>,\r\n\t normalModelMatrix:mat4x4<f32>,\r\n\t combinedOpacity:f32,\r\n};\r\n\r\n\r\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\r\n\r\nstruct InputData {\r@location(0) position:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r\n};\r\nstruct OutputData {\r@builtin(position) position:vec4<f32>,\r@location(0) vertexPosition:vec3<f32>,\r@location(1) vertexNormal:vec3<f32>,\r@location(2) uv:vec2<f32>,\r@location(12) combinedOpacity:f32,\r@location(13) shadowPos:vec3<f32>,\r@location(15) pickingId:vec4<f32>,\r\n};\r\n\r\n\r\n@vertex\r\nfn main( inputData:InputData ) -> OutputData {\rvar output:OutputData;\r\n\r\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\n\r\n\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\rposition=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);\rnormalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);\routput.position=u_projectionMatrix * position;\r\n\r\n\routput.vertexPosition=position.xyz;\routput.vertexNormal=normalPosition.xyz;\routput.uv=input_uv;\routput.combinedOpacity=vertexUniforms.combinedOpacity;\rreturn output;\r\n}\r\nstruct OutputShadowData {\r@builtin(position) position:vec4<f32>,\r\n};\r\n\r\n@vertex\r\nfn picking(inputData:InputData) -> OutputData {\rvar output:OutputData;\rlet u_projectionMatrix=systemUniforms.projectionMatrix;\rlet u_camera=systemUniforms.camera;\rlet u_cameraMatrix=u_camera.cameraMatrix;\rlet u_cameraPosition=u_camera.cameraPosition;\r\rlet u_modelMatrix=vertexUniforms.modelMatrix;\rlet u_normalModelMatrix=vertexUniforms.normalModelMatrix;\r\r\n\r\n\r\rlet input_position=inputData.position;\rlet input_vertexNormal=inputData.vertexNormal;\rlet input_uv=inputData.uv;\r\n\rvar position:vec4<f32>;\rvar normalPosition:vec4<f32>;\r\n\rposition=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0);\rnormalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0);\routput.position=u_projectionMatrix * position;\r\n\routput.pickingId=unpack4x8unorm(vertexUniforms.pickingId);\rreturn output;\r\n}\r\n";const wa=parseWGSL(Sa),Ma=wa.uniforms.vertexUniforms,Ra=mixInMesh2D(ATextField);class TextField2D extends Ra{#Dr=1;#Ar=1;#Su=!1;constructor(i,m=!1){super(i,(i,m)=>{this.#Dr=i,this.#Ar=m},!1),this._geometry=new Plane(i,1,1,1,1,1,!0),this._material=new TextFieldMaterial(i,new BitmapTexture(i)),this._material.transparent=!0,this.useSmoothing=m,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.primitiveState.cullMode=ri.FRONT}get useSmoothing(){return this.#Su}set useSmoothing(i){this.#Su=i,this.useSmoothing?(this._material.diffuseTextureSampler.minFilter=Mr.LINEAR,this._material.diffuseTextureSampler.magFilter=Mr.LINEAR,this._material.diffuseTextureSampler.mipmapFilter=Rr.LINEAR):(this._material.diffuseTextureSampler.minFilter=Mr.NEAREST,this._material.diffuseTextureSampler.magFilter=Mr.NEAREST,this._material.diffuseTextureSampler.mipmapFilter=null)}get width(){return this.#Dr}get height(){return this.#Ar}get geometry(){return this._geometry}set geometry(i){console.error("TextField2D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_2D",wa,Ma,Sa)}}Object.freeze(TextField2D);var Pa=Object.freeze({__proto__:null,Group2D:Group2D,Group3D:Group3D,InstancingMesh:InstancingMesh,LINE_TYPE:ha,Line2D:class extends Line3D{constructor(i,m=ha.LINEAR,g="#fff"){super(i,m,g),this._material=new LineMaterial(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_2D",pa,ga,fa)}addPoint(i=0,m=0,g=this.baseColor,_=1,b=0,y=0,T=0,w=0){super.addPoint(i,m,0,g,_,b,y,0,T,w,0)}addPointAt(i,m=0,g=0,_=this.baseColor,b=1,y=0,T=0,w=0,P=0){super.addPointAt(i,m,g,0,_,b,y,T,0,w,P,0)}},Line3D:Line3D,Mesh:Mesh,Object3DContainer:Object3DContainer,PARTICLE_EASE:ji,ParticleEmitter:ParticleEmitter,Scene:Scene,SkyBox:class{dirtyPipeline=!0;modelMatrix=create$5();gpuRenderInfo;_geometry;_material;#v;#Gt;#Vt;constructor(i,m){validateRedGPUContext(i),this.#v=i,this._geometry=new Box(i),this._material=new SkyBoxMaterial(i,m),this.#Gt=new PrimitiveState(this),this.#Gt.cullMode=ri.NONE,this.#Vt=new DepthStencilState(this),this.#Vt.depthWriteEnabled=!1}get skyboxTexture(){return this._material.skyboxTexture}set skyboxTexture(i){i?this._material.skyboxTexture=i:consoleAndThrowError("SkyBox requires a valid CubeTexture")}render(i){const{currentRenderPassEncoder:m}=i;this.#wu(),this.gpuRenderInfo||this.#Us(this.#v),this.dirtyPipeline&&(this.gpuRenderInfo.pipeline=this.#Mu(),this.dirtyPipeline=!1,i.numDirtyPipelines++);const{gpuRenderInfo:g}=this,{vertexUniformBindGroup:_,pipeline:b}=g,{indexBuffer:y}=this._geometry,{triangleCount:T,indexNum:w}=y;m.setPipeline(b),m.setVertexBuffer(0,this._geometry.vertexBuffer.gpuBuffer),m.setBindGroup(1,_),m.setBindGroup(2,this._material.gpuRenderInfo.fragmentUniformBindGroup),m.setIndexBuffer(y.gpuBuffer,"uint32"),m.drawIndexed(y.indexNum,1,0,0,0),i.num3DObjects++,i.numDrawCalls++,i.numTriangles+=T,i.numPoints+=w}#wu(){const{changedMSAA:i}=this.#v.antialiasingManager;i&&(this.dirtyPipeline=!0)}#Us(i){const{resourceManager:m}=this.#v,g=m.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||m.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(qi,1)),_=new ArrayBuffer(Wi.arrayBufferByteLength),b=new UniformBuffer(i,_);identity$2(this.modelMatrix),scale$5(this.modelMatrix,this.modelMatrix,[1e4,1e4,1e4]),b.writeBuffer(Wi.members.modelMatrix,this.modelMatrix);const y={layout:g,label:"VERTEX_BIND_GROUP_DESCRIPTOR_SKYBOX",entries:[{binding:0,resource:{buffer:b.gpuBuffer,offset:0,size:b.size}}]},T=i.gpuDevice.createBindGroup(y);this.gpuRenderInfo=new VertexGPURenderInfo(null,Wi,g,b,T,this.#Mu())}#Mu(){const{resourceManager:i,gpuDevice:m,antialiasingManager:g}=this.#v,_={code:zi},b={module:i.createGPUShaderModule("VERTEX_MODULE_SKYBOX",_),entryPoint:"main",buffers:this._geometry.gpuRenderInfo.buffers},y=i.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||i.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(qi,1)),T={bindGroupLayouts:[i.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),y,this._material.gpuRenderInfo.fragmentBindGroupLayout]},w={label:"PIPELINE_DESCRIPTOR_SKYBOX",layout:m.createPipelineLayout(T),vertex:b,fragment:this._material.gpuRenderInfo.fragmentState,primitive:this.#Gt.state,depthStencil:this.#Vt.state,multisample:{count:g.useMSAA?4:1}};return m.createRenderPipeline(w)}},Sprite2D:Sprite2D,Sprite3D:Sprite3D,SpriteSheet2D:SpriteSheet2D,SpriteSheet3D:SpriteSheet3D,SpriteSheetInfo:SpriteSheetInfo,TextField2D:TextField2D,TextField3D:TextField3D,View2D:View2D,View3D:View3D}),Ca=Object.freeze({__proto__:null,AmbientLight:AmbientLight,DirectionalLight:DirectionalLight,PointLight:PointLight,SpotLight:SpotLight});function calculatePositionOnCurve(i,m,g,_,b){const y=Math.cos(i),T=Math.sin(i),w=g/m*i,P=Math.cos(w);b[0]=_*(2+P)*.5*y,b[1]=_*(2+P)*T*.5,b[2]=_*Math.sin(w)*.5}var Ia=Object.freeze({__proto__:null,Box:Box,Circle:class extends Primitive{#Ui=function(){return function(i,m,g,_,b,y){const T=[],w=[];let P,$,H;T.push(0,0,0,0,0,1,.5,.5);let q=0,W=3;for(;q<=_;)P=b+q/_*y,$=Math.cos(P),H=Math.sin(P),T.push(g*$,g*H,0,0,0,1,($/g+1)/2,(H/g+1)/2),q++,W+=3;for(W=1;W<=_;)w.push(W,W+1,0),W++;return createPrimitiveGeometry(m,T,w,i)}}();constructor(i,m=1,g=32,_=0,b=2*Math.PI){super(i);const y=`PRIMITIVE_CIRCLE_R${m}_S${g}_TS${_}_TL${b}`,T=i.resourceManager.cachedBufferState;let w=T[y];w||(w=T[y]=this.#Ui(y,i,m,g,_,b)),this._setData(w)}},Cylinder:Cylinder,Plane:Plane,Primitive:Primitive,Sphere:Sphere,Torus:class extends Primitive{#Ui=function(){return function(i,m,g,_,b,y,T,w){T=T||0;const P=(w=w||2*Math.PI)-T,$=b+1,H=y+1,q=[],W=[];for(let i=0;i<H;++i){const m=i/y,w=m*Math.PI*2,H=Math.sin(w),W=g+H*_,ye=Math.cos(w),Ge=ye*_;for(let i=0;i<$;++i){const g=i/b,_=T+g*P,y=Math.sin(_),w=Math.cos(_),$=y*W,Ke=w*W,Xe=y*H,je=w*H;q.push($,Ge,Ke,Xe,ye,je,g,1-m)}}for(let i=0;i<y;++i)for(let m=0;m<b;++m){const g=1+m,_=1+i;W.push($*i+m,$*_+m,$*i+g),W.push($*_+m,$*_+g,$*i+g)}return createPrimitiveGeometry(m,q,W,i)}}();constructor(i,m=1,g=.5,_=16,b=16,y=0,T=2*Math.PI){if(super(i),_<3)throw new Error("radialSubdivisions must be 3 or greater");if(b<3)throw new Error("verticalSubdivisions must be 3 or greater");const w=`PRIMITIVE_TORUS_R${m}_T${g}_RSD${_}_BSD${b}_SA${y}_EA${T}`,P=i.resourceManager.cachedBufferState;let $=P[w];$||($=P[w]=this.#Ui(w,i,m,g,_,b,y,T)),this._setData($)}},TorusKnot:class extends Primitive{#Ui=function(){return function(i,m,g,_,b,y,T,w){b=Math.floor(b),y=Math.floor(y);const P=[],$=[],H=[],q=[],W=[0,0,0],ye=[0,0,0],Ge=[0,0,0],Ke=[0,0,0],Xe=[0,0,0];for(let i=0;i<=b;++i){const m=i/b*T*Math.PI*2;calculatePositionOnCurve(m,T,w,g,W),calculatePositionOnCurve(m+.01,T,w,g,ye),Ke[0]=ye[0]-W[0],Ke[1]=ye[1]-W[1],Ke[2]=ye[2]-W[2],Xe[0]=ye[0]+W[0],Xe[1]=ye[1]+W[1],Xe[2]=ye[2]+W[2];{const i=Ke[0],m=Ke[1],g=Ke[2],_=Xe[0],b=Xe[1],y=Xe[2];Ge[0]=m*y-g*b,Ge[1]=g*_-i*y,Ge[2]=i*b-m*_}{const i=Ge[0],m=Ge[1],g=Ge[2],_=Ke[0],b=Ke[1],y=Ke[2];Xe[0]=m*y-g*b,Xe[1]=g*_-i*y,Xe[2]=i*b-m*_}{let i=Ge[0],m=Ge[1],g=Ge[2],_=i*i+m*m+g*g;_>0&&(_=1/Math.sqrt(_||1)),Ge[0]=Ge[0]*_,Ge[1]=Ge[1]*_,Ge[2]=Ge[2]*_}{let i=Xe[0],m=Xe[1],g=Xe[2],_=i*i+m*m+g*g;_>0&&(_=1/Math.sqrt(_)),Xe[0]=Xe[0]*_,Xe[1]=Xe[1]*_,Xe[2]=Xe[2]*_}for(let m=0;m<=y;++m){const g=m/y*Math.PI*2,T=-_*Math.cos(g),w=_*Math.sin(g);H[0]=W[0]+(T*Xe[0]+w*Ge[0]),H[1]=W[1]+(T*Xe[1]+w*Ge[1]),H[2]=W[2]+(T*Xe[2]+w*Ge[2]),P.push(H[0],H[1],H[2]);{q[0]=H[0]-W[0],q[1]=H[1]-W[1],q[2]=H[2]-W[2];let i=q[0],m=q[1],g=q[2],_=i*i+m*m+g*g;_>0&&(_=1/Math.sqrt(_)),q[0]=q[0]*_,q[1]=q[1]*_,q[2]=q[2]*_}P.push(q[0],q[1],q[2],i/b,m/y)}}for(let i=1;i<=b;i++)for(let m=1;m<=y;m++){const g=(y+1)*(i-1)+(m-1),_=(y+1)*i+(m-1),b=(y+1)*i+m,T=(y+1)*(i-1)+m;$.push(g,_,T),$.push(_,b,T)}return createPrimitiveGeometry(m,P,$,i)}}();constructor(i,m=1,g=.4,_=64,b=8,y=2,T=3){super(i);const w=`PRIMITIVE_TORUS_NUT_R${m}_T${g}_TS${_}_RS${b}_P${y}_Q${T}`,P=i.resourceManager.cachedBufferState;let $=P[w];$||($=P[w]=this.#Ui(w,i,m,g,_,b,y,T)),this._setData($)}}});async function float32ToUint8WithToneMapping(i,m,g){const _=performance.now(),{gpuDevice:b}=i,{exposure:y,width:T,height:w,workgroupSize:P=[8,8]}=g,$=m.length/4,H=function(i){return`struct Constants {exposure:f32,width:u32,height:u32,}@group(0) @binding(0) var<storage,read> inputData:array<f32>;@group(0) @binding(1) var<storage,read_write> outputData:array<u32>;@group(0) @binding(2) var<uniform> constants:Constants;/* ACES 톤매핑 함수 */fn acesToneMapping(x:f32) -> f32 {let a=2.51;let b=0.03;let c=2.43;let d=0.59;let e=0.14;return max(0.0,(x * (a * x + b))/(x * (c * x + d) + e));}/* Linear → sRGB 감마 보정 */fn linearToSRGB(linearValue:f32) -> f32 {if (linearValue <=0.0031308) {return 12.92 * linearValue;} else {return 1.055 * pow(linearValue,1.0/2.4) - 0.055;}}@compute @workgroup_size(${i[0]},${i[1]})fn main(@builtin(global_invocation_id) global_id:vec3<u32>) {let x=global_id.x;let y=global_id.y;/* 범위 체크 */if (x >=constants.width || y >=constants.height) {return;}let pixelIndex=y * constants.width + x;let baseIndex=pixelIndex * 4u;/* 🎯 RGBA 각 채널 처리 */var processedPixel=0u;for (var channel=0u;channel < 4u;channel++) {let inputIndex=baseIndex + channel;let originalVal=inputData[inputIndex];/* 🎯 노출값 적용 */let exposedVal=originalVal * constants.exposure;/* 🎬 ACES 톤매핑 적용 */let toneMappedVal=acesToneMapping(exposedVal);/* 🔧 감마 보정 적용 (sRGB) */let gammaCorrectedVal=linearToSRGB(toneMappedVal);/* 🎯 최종 8bit 변환 */let uint8Val=u32(round(clamp(gammaCorrectedVal,0.0,1.0) * 255.0));/* 🔧 4개 채널을 하나의 u32에 패킹 */processedPixel |=(uint8Val << (channel * 8u));}outputData[pixelIndex]=processedPixel;}`}(P);try{const i=b.createShaderModule({code:H,label:"hdr_tonemapping_shader"}),g=function(i,m,g){const _=i.createBuffer({size:m.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"hdr_input_float32_buffer"}),b=i.createBuffer({size:4*g,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC,label:"hdr_output_uint8_buffer"}),y=i.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"hdr_constants_buffer"}),T=i.createBuffer({size:4*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"hdr_read_buffer"});return i.queue.writeBuffer(_,0,m),{inputBuffer:_,outputBuffer:b,constantsBuffer:y,readBuffer:T}}(b,m,$);!function(i,m,g,_,b){const y=new ArrayBuffer(12),T=new DataView(y);T.setFloat32(0,g,!0),T.setUint32(4,_,!0),T.setUint32(8,b,!0),i.queue.writeBuffer(m,0,y)}(b,g.constantsBuffer,y,T,w);const{computePipeline:q,bindGroup:W}=function(i,m,g){const _=i.createComputePipeline({layout:"auto",compute:{module:m,entryPoint:"main"},label:"hdr_tonemapping_pipeline"}),b=i.createBindGroup({layout:_.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g.inputBuffer}},{binding:1,resource:{buffer:g.outputBuffer}},{binding:2,resource:{buffer:g.constantsBuffer}}],label:"hdr_tonemapping_bindgroup"});return{computePipeline:_,bindGroup:b}}(b,i,g),ye=await async function(i,m,g,_,b,y,T,w,P){const $=i.createCommandEncoder({label:"hdr_tonemapping_encoder"}),H=$.beginComputePass({label:"hdr_tonemapping_pass"});H.setPipeline(m),H.setBindGroup(0,g);const q=Math.ceil(y/w[0]),W=Math.ceil(T/w[1]);if(q>65535||W>65535)throw new Error(`이미지가 너무 큽니다. 최대 크기:${65535*w[0]} × ${65535*w[1]}`);H.dispatchWorkgroups(q,W),H.end(),$.copyBufferToBuffer(_,0,b,0,4*P),i.queue.submit([$.finish()]),await b.mapAsync(GPUMapMode.READ);const ye=new Uint32Array(b.getMappedRange()),Ge=ye.byteLength>0?new Uint8Array(ye.buffer.slice(ye.byteOffset,ye.byteOffset+ye.byteLength)):new Uint8Array(4);return b.unmap(),Ge}(b,q,W,g.outputBuffer,g.readBuffer,T,w,P,$);!function(i){i.inputBuffer.destroy(),i.outputBuffer.destroy(),i.constantsBuffer.destroy(),i.readBuffer.destroy()}(g);return{data:ye,processedPixels:$,executionTime:performance.now()-_}}catch(i){throw console.error("톤매핑 처리 실패:",i),i}}class HDRLoader{#Ru=!0;constructor(i=!0){this.#Ru=i}get enableDebugLogs(){return this.#Ru}set enableDebugLogs(i){this.#Ru=i}async loadHDRFile(i){this.#Ru&&Xr(`HDR 파일 로딩 시작:${i}`);const m=await fetch(i);if(!m.ok)throw new Error(`HTTP ${m.status}:${m.statusText}`);const g=await m.arrayBuffer(),_=new Uint8Array(g),b=this.#Pu(_,i);return this.#Cu(b)}#Cu(i){this.#Ru&&Xr("HDR 데이터 분석 시작 (원본 데이터 보존)...");const m=this.#Iu(i),g=this.#Eu(m);return this.#Ru&&Xr(`권장 노출값 계산:${g.toFixed(3)} (원본 데이터는 보존)`),{...i,recommendedExposure:g,luminanceStats:m}}#Iu(i){let m=1/0,g=0,_=0;const b=i.width*i.height;for(let b=0;b<i.data.length;b+=4){const y=.2126*i.data[b]+.7152*i.data[b+1]+.0722*i.data[b+2];m=Math.min(m,y),g=Math.max(g,y),_+=y}return{min:Math.max(.001,m),max:g,average:Math.max(.001,_/b),median:Math.max(.001,_/b)}}#Eu(i){const{average:m,median:g,max:_}=i;let b=.18;m<.01?b=.5:m<.05?b=.36:m>2?b=.09:m>.8&&(b=.12);let y=b/Math.max(Math.pow(m*g,.5),.001);const T=_/Math.max(i.min,.001);m<.05?y*=2.5:m<.1&&(y*=1.8),T>1e3?y*=.8:T>100&&(y*=.9),_>10?y*=.5:_>5?y*=.7:_>2&&(y*=.85);const w=g/m;return w<.3?y*=.8:w>1.5&&(y*=1.2),y=Math.max(1,Math.min(15,y)),y}#Pu(i,m){const g=this.#Lu(i);if(this.#Ru&&Xr(`파일 형식:${g.format}`),!g.isValid)throw new Error(g.error||"지원되지 않는 파일 형식입니다");if(m.toLowerCase().endsWith(".hdr")){this.#Ru&&(Xr("파일 첫 200바이트:"),this.#Bu(i.slice(0,200)));const m=this.#Uu(i);return this.#Ru&&this.#Du(m),m}throw m.toLowerCase().endsWith(".exr")?new Error("EXR format not supported yet"):new Error(`Unsupported HDR format:${m}`)}#Uu(i){let m=0,g="";const _={};for(;m<i.length;){const _=String.fromCharCode(i[m++]);if("\n"===_)break;g+=_}if(!g.startsWith("#?RADIANCE")&&!g.startsWith("#?RGBE"))throw new Error("Invalid HDR file header");for(;m<i.length;){for(g="";m<i.length;){const _=String.fromCharCode(i[m++]);if("\n"===_)break;g+=_}if(""===g.trim())break;const b=g.indexOf("=");if(b>0){const i=g.substring(0,b).trim(),m=g.substring(b+1).trim();_[i]=m}}for(g="";m<i.length;){const _=String.fromCharCode(i[m++]);if("\n"===_)break;g+=_}const b=g.match(/-Y\s+(\d+)\s+\+X\s+(\d+)/);if(!b)throw new Error("Invalid resolution format in HDR file");const y=parseInt(b[1]),T=parseInt(b[2]);let w;_.EXPOSURE&&(w=parseFloat(_.EXPOSURE),this.#Ru&&Xr(`파일 노출값:${w.toFixed(3)}`));const P=new Float32Array(T*y*4);let $=0;for(let g=0;g<y;g++){const g=this.#Au(i,m,T);m=g.nextOffset;for(let i=0;i<T;i++){const m=4*i,_=g.data[m],b=g.data[m+1],y=g.data[m+2],T=g.data[m+3];if(0===T)P[$++]=0,P[$++]=0,P[$++]=0,P[$++]=1;else{const i=Math.pow(2,T-128-8);P[$++]=_*i,P[$++]=b*i,P[$++]=y*i,P[$++]=1}}}return{data:P,width:T,height:y,exposure:w}}#Lu(i){if(i.length<50)return{isValid:!1,format:"unknown",error:"파일이 너무 작습니다"};const m=new TextDecoder("ascii",{fatal:!1}).decode(i.slice(0,50));return m.startsWith("#?RADIANCE")||m.startsWith("#?RGBE")?{isValid:!0,format:"RGBE/Radiance"}:m.includes("RADIANCE")||m.includes("RGBE")?{isValid:!0,format:"RGBE/Radiance (variant)"}:{isValid:!1,format:"unknown",error:"지원되지 않는 HDR 형식입니다"}}#Au(i,m,g){const _=new Uint8Array(4*g);if(2===i[m]&&2===i[m+1]&&i[m+2]===(g>>8&255)&&i[m+3]===(255&g)){m+=4;for(let b=0;b<4;b++){let y=b;for(;y<4*g;){const b=i[m++];if(b>128){const T=b-128,w=i[m++];for(let i=0;i<T&&y<4*g;i++)_[y]=w,y+=4}else{const T=b;for(let b=0;b<T&&y<4*g;b++)_[y]=i[m++],y+=4}}}}else for(let b=0;b<4*g;b++)_[b]=i[m++];return{data:_,nextOffset:m}}#Du(i){if(this.#Ru){Xr("HDR 정보:"),Xr(`크기:${i.width} x ${i.height}`),Xr(`데이터 길이:${i.data.length}`),Xr("예상 픽셀 수:"+i.width*i.height*4),Xr("첫 4픽셀 값 (원본):");for(let m=0;m<Math.min(16,i.data.length);m+=4){const g=i.data[m],_=i.data[m+1],b=i.data[m+2],y=i.data[m+3];Xr(`픽셀 ${m/4}:R=${g.toFixed(3)},G=${_.toFixed(3)},B=${b.toFixed(3)},A=${y.toFixed(3)}`)}}}#Bu(i){if(this.#Ru)for(let m=0;m<i.length;m+=16){const g=Array.from(i.slice(m,m+16)).map(i=>i.toString(16).padStart(2,"0")).join(" "),_=Array.from(i.slice(m,m+16)).map(i=>i>=32&&i<=126?String.fromCharCode(i):".").join("");Xr(`${m.toString(16).padStart(8,"0")}:${g.padEnd(48," ")} |${_}|`)}}}class HDRTexture extends ManagedResourceBase{#K;#q;#W;#X;#j;#ku;#Z=0;#Ou=1024;#Nu=new HDRLoader;#Q;#Fu=1;#Gu=1;#Vu;#ee;#te;#$u=!1;constructor(i,m,g,_,b=1024,y=!0){if(super(i,"managedHDRTextureState"),this.#ee=g,this.#te=_,this.#j=y,this.#Q="rgba8unorm",this.#Ou=b,m){this.#Hu(m),this.#q=m,this.#W=m||this.uuid;const{table:i}=this.targetResourceManagedState;let g;for(const m in i)if(i[m].cacheKey===this.#W){g=i[m];break}if(g){const m=i[g.uuid].texture;return this.#ee?.(m),m}this.src=m,this.#re()}}#Hu(i){if(!i||"string"!=typeof i)throw new Error("HDR 파일 경로가 필요합니다");if(!i.toLowerCase().endsWith(".hdr"))throw new Error(`지원되지 않는 형식입니다. .hdr 형식만 지원됩니다. 입력된 파일:${i}`)}get cacheKey(){return this.#W}get videoMemorySize(){return this.#Z}get gpuTexture(){return this.#K}get mipLevelCount(){return this.#X}get src(){return this.#q}set src(i){const m=i?.src||i;this.#Hu(m),this.#q=m,this.#W=i?.cacheKey||m||this.uuid,this.#$u=!1,this.#q&&this.#zu(this.#q)}get useMipmap(){return this.#j}set useMipmap(i){this.#j!==i&&(this.#j=i,this.#$u=!1,this.#ie())}get exposure(){return this.#Fu}#Ku=null;set exposure(i){const m=Math.max(.01,Math.min(20,i));this.#Fu!==m&&(this.#Fu=m,this.#Ku&&clearTimeout(this.#Ku),this.#Ku=setTimeout(()=>{this.#ku&&(this.#$u&&this.#K?this.#qu():this.#ie()),this.#Ku=null},50))}get recommendedExposure(){return this.#Gu}get luminanceAnalysis(){return this.#Vu}resetToRecommendedExposure(){this.exposure=this.#Gu}static isSupportedFormat(i){return!(!i||"string"!=typeof i)&&i.toLowerCase().endsWith(".hdr")}static getSupportedFormats(){return[".hdr"]}destroy(){const i=this.#K;this.#ae(null),this.#$u=!1,this.__fireListenerList(!0),this.#q=null,this.#W=null,this.#Vu=null,this.#se(),i&&i.destroy()}async#zu(i){try{const m=await this.#Nu.loadHDRFile(i);this.#ku=m,this.#Gu=m.recommendedExposure||1,this.#Fu=this.#Gu,m.luminanceStats&&(this.#Vu={averageLuminance:m.luminanceStats.average,maxLuminance:m.luminanceStats.max,minLuminance:m.luminanceStats.min,medianLuminance:m.luminanceStats.median,percentile95:.95*m.luminanceStats.max,percentile99:.99*m.luminanceStats.max,recommendedExposure:this.#Gu},Xr("휘도 분석 완료:",this.#Vu)),Xr(`HDR 데이터 로드 완료:${m.width}x${m.height},권장 노출:${this.#Gu.toFixed(3)},현재 노출:${this.#Fu.toFixed(3)}`),await this.#ie(),this.#ee?.(this)}catch(i){console.error("HDR loading error (.hdr 형식):",i),this.#te?.(i)}}#ae(i){this.#K=i,i||(this.#ku=null,this.#$u=!1),this.__fireListenerList()}#re(){basicRegisterResource(this,new ResourceStateBitmapTexture(this))}#se(){basicUnregisterResource(this)}async#ie(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext;if(this.#$u&&this.#K)return void await this.#qu();await i.queue.onSubmittedWorkDone();const g=this.#K;this.#K=null,this.targetResourceManagedState.videoMemory-=this.#Z,this.#Z=0;const _={size:[this.#Ou,this.#Ou,6],format:this.#Q,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#j?getMipLevelCount(this.#Ou,this.#Ou):1,dimension:"2d",label:`${this.#q}_cubemap_exp${this.#Fu.toFixed(2)}`},b=i.createTexture(_);this.#ae(b),this.#X=_.mipLevelCount||1,this.#Z=calculateTextureByteSize(_),this.targetResourceManagedState.videoMemory+=this.#Z,await this.#qu(),this.#$u=!0,g&&(await i.queue.onSubmittedWorkDone(),g.destroy())}async#qu(){if(!this.#K||!this.#ku)return void console.warn("큐브맵 텍스처 또는 HDR 데이터가 없어 업데이트를 건너뜁니다.");const{gpuDevice:i}=this.redGPUContext,{width:m,height:g}=this.#ku,_={size:[m,g],format:this.#Q,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`${this.#q}_temp_exp${this.#Fu.toFixed(2)}`},b=await this.#Wu(i,this.#ku,_);await this.#Xu(b),b.destroy()}async#Xu(i){const{gpuDevice:m,resourceManager:g}=this.redGPUContext,{mipmapGenerator:_}=g,b=m.createShaderModule({code:"struct VertexOutput {\r@builtin(position) position:vec4<f32>,\r@location(0) texCoord:vec2<f32>,\r\n}\r\n\r\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput {\rvar pos=array<vec2<f32>,6>(\rvec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0, 1.0),\rvec2<f32>(-1.0, 1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0, 1.0)\r);\r\n\rvar texCoord=array<vec2<f32>,6>(\rvec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0),\rvec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0)\r);\r\n\rvar output:VertexOutput;\routput.position=vec4<f32>(pos[vertexIndex],0.0,1.0);\routput.texCoord=texCoord[vertexIndex];\rreturn output;\r\n}\r\n\r\n@group(0) @binding(0) var equirectangularTexture:texture_2d<f32>;\r\n@group(0) @binding(1) var textureSampler:sampler;\r\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\r\n\r\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> {\rlet ndc=vec2<f32>(\rinput.texCoord.x * 2.0 - 1.0,\r(1.0 - input.texCoord.y) * 2.0 - 1.0\r);\r\n\rvar localDirection=vec3<f32>(ndc.x,ndc.y,1.0);\rlet worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz);\r\n\rlet theta=atan2(worldDirection.z,worldDirection.x);\rlet phi=acos(clamp(worldDirection.y,-1.0,1.0));\r\n\rvar u=(theta + 3.14159265359)/(2.0 * 3.14159265359);\rvar v=phi/3.14159265359;\r\n\ru=fract(u + 1.0);\rv=clamp(v,0.0001,0.9999);\r\n\rlet color=textureSample(equirectangularTexture,textureSampler,vec2<f32>(u,v));\rreturn color;\r\n}\r\n"}),y=m.createRenderPipeline({layout:"auto",vertex:{module:b,entryPoint:"vs_main"},fragment:{module:b,entryPoint:"fs_main",targets:[{format:this.#Q}]}}),T=new Sampler(this.redGPUContext,{magFilter:Mr.LINEAR,minFilter:Mr.LINEAR,mipmapFilter:Rr.LINEAR,addressModeU:wr.CLAMP_TO_EDGE,addressModeV:wr.CLAMP_TO_EDGE,addressModeW:wr.CLAMP_TO_EDGE}),w=this.#ju();for(let m=0;m<6;m++)await this.#Yu(y,T,m,w[m],i);this.#j&&_.generateMipmap(this.#K,{size:[this.#Ou,this.#Ou,6],format:this.#Q,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#X,dimension:"2d"})}async#Wu(i,m,g){const _=i.createTexture(g);let b,y;if("rgba8unorm"!==this.#Q)throw new Error(`지원되지 않는 텍스처 포맷:${this.#Q}`);b=4;y=(await this.#Zu(m.data)).buffer;return i.queue.writeTexture({texture:_},y,{bytesPerRow:m.width*b,rowsPerImage:m.height},{width:m.width,height:m.height}),_}async#Zu(i){return(await float32ToUint8WithToneMapping(this.redGPUContext,i,{exposure:this.#Fu,width:this.#ku.width,height:this.#ku.height,workgroupSize:[8,8]})).data}#ju(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}async#Yu(i,m,g,_,b){const{gpuDevice:y}=this.redGPUContext,T=y.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`hdr_face_${g}_uniform`});y.queue.writeBuffer(T,0,_);const w=y.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:b.createView()},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:T}}]}),P=y.createCommandEncoder(),$=P.beginRenderPass({colorAttachments:[{view:this.#K.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});$.setPipeline(i),$.setBindGroup(0,w),$.draw(6,1,0,0),$.end(),y.queue.submit([P.finish()]),T.destroy()}}Object.freeze(HDRTexture);class IBL{#v;#Ju;#Qu;#el;#tl;#rl;#_=createUUID();#Q="rgba8unorm";#nl;get exposure(){if(this.#nl instanceof HDRTexture)return this.#nl.exposure}set exposure(i){validatePositiveNumberRange(i),this.#nl instanceof HDRTexture&&(this.#nl.exposure=i)}constructor(i,m,g=1024){this.#v=i,this.#Qu=new CubeTexture(i,[],!1,void 0,void 0,this.#Q),this.#el=new CubeTexture(i,[],!1,void 0,void 0,this.#Q),this.#nl="string"==typeof m?new HDRTexture(i,m,i=>{this.#Ju=i.gpuTexture,this.#si()},void 0,g,!0):new CubeTexture(i,m,!0,i=>{this.#Ju=i.gpuTexture,this.#si()})}get irradianceTexture(){return this.#el}get environmentTexture(){return this.#Qu}async#si(){this.#Qu.setGPUTextureDirectly(this.#Ju,`${this.#_}_environmentTexture`);const i=await this.#il(this.#Ju);this.#el.setGPUTextureDirectly(i,`${this.#_}_irradianceTexture`,!1)}async#il(i){const{gpuDevice:m}=this.#v,g=m.createTexture({size:[32,32,6],format:this.#Q,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:1,label:`${this.#_}_irradianceTexture`}),_=m.createShaderModule({code:"struct VertexOutput {\r@builtin(position) position:vec4<f32>,\r@location(0) texCoord:vec2<f32>,\r\n}\r\n\r\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput {\rvar pos=array<vec2<f32>,6>(\rvec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0, 1.0),\rvec2<f32>(-1.0, 1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0, 1.0)\r);\r\n\rvar texCoord=array<vec2<f32>,6>(\rvec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0),\rvec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0)\r);\r\n\rvar output:VertexOutput;\routput.position=vec4<f32>(pos[vertexIndex],0.0,1.0);\routput.texCoord=texCoord[vertexIndex];\rreturn output;\r\n}\r\n\r\n@group(0) @binding(0) var environmentTexture:texture_cube<f32>;\r\n@group(0) @binding(1) var environmentSampler:sampler;\r\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\r\n\r\nconst PI=3.14159265359;\r\n\r\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> {\r\rlet ndc=vec2<f32>(\rinput.texCoord.x * 2.0 - 1.0,\r1.0 - input.texCoord.y * 2.0 \r);\r\n\r\rlet localDirection=vec3<f32>(ndc.x,ndc.y,1.0);\r\n\r\rlet worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz);\rlet normal=worldDirection;\r\n\rvar irradiance=vec3<f32>(0.0);\r\n\r\rvar up=vec3<f32>(0.0,1.0,0.0);\rlet tangent=normalize(cross(up,normal));\rlet bitangent=normalize(cross(normal,tangent));\r\n\r\rlet sampleCount=32u;\rlet invSampleCount=1.0/f32(sampleCount);\r\n\rfor (var i=0u;i < sampleCount;i++) {\rfor (var j=0u;j < sampleCount;j++) {\rlet u1=(f32(i) + 0.5) * invSampleCount;\rlet u2=(f32(j) + 0.5) * invSampleCount;\r\n\rlet cosTheta=sqrt(u1);\rlet sinTheta=sqrt(1.0 - u1);\rlet phi=2.0 * PI * u2;\r\n\rlet cosPhi=cos(phi);\rlet sinPhi=sin(phi);\r\n\rlet sampleVec=vec3<f32>(\rsinTheta * cosPhi,\rsinTheta * sinPhi,\rcosTheta\r);\r\n\rlet worldSample=sampleVec.x * tangent +\rsampleVec.y * bitangent +\rsampleVec.z * normal;\r\n\rlet sampleColor=textureSample(environmentTexture,environmentSampler,worldSample);\rirradiance +=sampleColor.rgb * cosTheta;\r}\r}\r\n\rirradiance=irradiance * PI * invSampleCount * invSampleCount;\r\n\rreturn vec4<f32>(irradiance,1.0);\r\n}\r\n"}),b=m.createRenderPipeline({layout:"auto",vertex:{module:_,entryPoint:"vs_main"},fragment:{module:_,entryPoint:"fs_main",targets:[{format:this.#Q}]}}),y=new Sampler(this.#v,{magFilter:Mr.LINEAR,minFilter:Mr.LINEAR,mipmapFilter:Rr.LINEAR,addressModeU:wr.CLAMP_TO_EDGE,addressModeV:wr.CLAMP_TO_EDGE,addressModeW:wr.CLAMP_TO_EDGE}),T=this.#ju();for(let m=0;m<6;m++)await this.#al(b,y,m,T[m],i,g);return g}async#al(i,m,g,_,b,y){const{gpuDevice:T}=this.#v,w=T.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`irradiance_face_${g}_uniform`});T.queue.writeBuffer(w,0,_);const P=T.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:b.createView({dimension:"cube"})},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:w}}]}),$=T.createCommandEncoder({label:`ibl_irradiance_face_${g}_encoder`}),H=$.beginRenderPass({colorAttachments:[{view:y.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],label:`irradiance_face_${g}_renderpass`});H.setPipeline(i),H.setBindGroup(0,P),H.draw(6,1,0,0),H.end(),T.queue.submit([$.finish()]),w.destroy()}#ju(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}}Object.freeze(IBL);const Ea={animationSpeed:1,animationX:.1,animationY:.1};class ANoiseTexture extends ManagedResourceBase{cacheKey;mipLevelCount;videoMemorySize;useMipmap;src;#K;#Zn=8;#Jn=8;#Qn=1;#ti;#ri;#ni;#ii;#Pn;#Cn;#Dr;#Ar;#sl;#ol=0;#ul=1;#ll=Ea.animationX;#cl=Ea.animationY;constructor(i,m=1024,g=1024,_){super(i,"managedBitmapTextureState"),validateUintRange(m,2,2048),validateUintRange(g,2,2048),this.#Dr=m,this.#Ar=g,this.#sl=_,this.#si(i),this.#K=this.#hi(i,m,g),this.#di(),this.#re()}get animationSpeed(){return this.#ul}set animationSpeed(i){validatePositiveNumberRange(i),this.#ul=i,this.updateUniform("animationSpeed",i)}get animationX(){return this.#ll}set animationX(i){validateNumber(i),this.#ll=i,this.updateUniform("animationX",i)}get animationY(){return this.#cl}set animationY(i){validateNumber(i),this.#cl=i,this.updateUniform("animationY",i)}get uniformInfo(){return this.#Cn}get gpuTexture(){return this.#K}get time(){return this.#ol}set time(i){validatePositiveNumberRange(i),this.#ol=i,this.updateUniform("time",i/1e3)}updateUniform(i,m){this.#Cn.members[i]&&(this.#Pn.writeBuffer(this.#Cn.members[i],m),this.#sl[i]=m),this.#di()}updateUniforms(i){Object.entries(i).forEach(([i,m])=>{this.#Cn.members[i]&&(this.#Pn.writeBuffer(this.#Cn.members[i],m),this.#sl[i]=m)}),this.#di()}render(i){this.updateUniform("time",i),this.#di()}#si(i){const{gpuDevice:m}=i,g=this.#hl();this.cacheKey=createUUID(),this.#ti=m.createShaderModule({code:g}),this.#ni=this.#li(i),this.#ii=this.#ci(m,this.#ti,this.#ni);const _=parseWGSL(g);this.#Cn=_.uniforms.uniforms;const b=new ArrayBuffer(this.#Cn.arrayBufferByteLength);this.#Pn=new UniformBuffer(i,b,`${this.constructor.name}_UniformBuffer`),this.#sl.uniformDefaults&&this.updateUniforms({...Ea,...this.#sl.uniformDefaults})}#hl(){return`${`struct Uniforms {time:f32,animationSpeed:f32,animationX:f32,animationY:f32,${this.#sl.uniformStruct||""}};`}@group(0) @binding(0) var<uniform> uniforms:Uniforms;@group(0) @binding(1) var outputTexture:texture_storage_2d<rgba8unorm,write>;${this.#sl.helperFunctions||""}@compute @workgroup_size(${this.#Zn},${this.#Jn},${this.#Qn})fn main (@builtin(global_invocation_id) global_id:vec3<u32>,){let index=vec2<u32>(global_id.xy);let dimensions:vec2<u32>=textureDimensions(outputTexture);/* 경계 체크 */if (index.x >=dimensions.x || index.y >=dimensions.y) {return;}let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let base_uv=vec2<f32>((f32(index.x) + 0.5)/dimW,(f32(index.y) + 0.5)/dimH);${this.#sl.mainLogic}textureStore(outputTexture,index,finalColor);}`}#di(){if(!this.#ri)return;const i=this.redGPUContext.gpuDevice.createCommandEncoder(),m=i.beginComputePass();m.setPipeline(this.#ii),m.setBindGroup(0,this.#ri),m.dispatchWorkgroups(Math.ceil(this.#Dr/this.#Zn),Math.ceil(this.#Ar/this.#Jn)),m.end(),this.redGPUContext.gpuDevice.queue.submit([i.finish()])}#li(i){return i.resourceManager.createBindGroupLayout("NoiseTextureBindGroupLayout",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#hi(i,m,g){const _=i.gpuDevice.createTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`NoiseTexture_${m}x${g}_${Date.now()}`}),b=_.createView();return this.#ri=this.#fi(i,this.#ni,b),_}#fi(i,m,g){return i.gpuDevice.createBindGroup({layout:m,entries:[{binding:0,resource:{buffer:this.#Pn.gpuBuffer,offset:0,size:this.#Pn.gpuBuffer.size}},{binding:1,resource:g}]})}#ci(i,m,g){return i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#re(){basicRegisterResource(this,new Sr(this))}#se(){basicUnregisterResource(this)}}const La={MODE_1D:1,MODE_2D:2,MODE_3D:3};Object.freeze(La);const mergerNoiseUniformStruct=(i,m)=>[i,m].filter(Boolean).join("\n"),mergerNoiseUniformDefault=(i,m)=>({...i,...m||{}}),mergerNoiseHelperFunctions=(i,m)=>[i,m].filter(Boolean).join("\n");const Ba=Object.values(La),Ua={frequency:8,amplitude:1,octaves:1,persistence:.5,lacunarity:2,seed:0,noiseDimension:La.MODE_2D};const Da={EUCLIDEAN:0,MANHATTAN:1,CHEBYSHEV:2};Object.freeze(Da);const Aa={F1:0,F2:1,F2_MINUS_F1:2,F1_PLUS_F2:3,CELL_ID:4,CELL_ID_COLOR:5};Object.freeze(Aa);const ka=Object.values(Da),Oa=Object.values(Aa),Na={frequency:8,distanceScale:1,octaves:1,persistence:.5,lacunarity:2,seed:0,distanceType:Da.EUCLIDEAN,outputType:Aa.F1,jitter:1,cellIdColorIntensity:1};var Fa=Object.freeze({__proto__:null,ANoiseTexture:ANoiseTexture,AUniformBaseBuffer:AUniformBaseBuffer,BitmapTexture:BitmapTexture,CubeTexture:CubeTexture,HDRTexture:HDRTexture,IBL:IBL,IndexBuffer:IndexBuffer,InterleavedStructElement:InterleavedStructElement,NOISE_DIMENSION:La,ResourceBase:ResourceBase,ResourceManager:ResourceManager,ResourceState:ResourceState,Sampler:Sampler,SimplexTexture:class extends ANoiseTexture{#fl=Ua.frequency;#dl=Ua.amplitude;#ml=Ua.octaves;#pl=Ua.persistence;#gl=Ua.lacunarity;#xl=Ua.seed;#_l=Ua.noiseDimension;constructor(i,m=1024,g=1024,_){super(i,m,g,{..._,mainLogic:_?.mainLogic||"let uv=vec2<f32>((base_uv.x + uniforms.time * ( uniforms.animationX * uniforms.animationSpeed )),(base_uv.y + uniforms.time * ( uniforms.animationY * uniforms.animationSpeed )) );let noise=getSimplexNoiseByDimension( uv,uniforms );/* 최종 색상 (그레이스케일) */let finalColor=vec4<f32>(noise,noise,noise,1.0);",uniformStruct:mergerNoiseUniformStruct("noiseDimension:f32,frequency:f32,amplitude:f32,octaves:i32,persistence:f32,lacunarity:f32,seed:f32,",_?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(Ua,_?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("/* Simplex Noise 1D,2D,3D 기본 함수들 */\r\nfn mod289_vec3(x:vec3<f32>) -> vec3<f32> {\rreturn x - floor(x * (1.0/289.0)) * 289.0;\r\n}\r\n\r\nfn mod289_vec2(x:vec2<f32>) -> vec2<f32> {\rreturn x - floor(x * (1.0/289.0)) * 289.0;\r\n}\r\n\r\nfn mod289_vec4(x:vec4<f32>) -> vec4<f32> {\rreturn x - floor(x * (1.0/289.0)) * 289.0;\r\n}\r\n\r\nfn mod289_f32(x:f32) -> f32 {\rreturn x - floor(x * (1.0/289.0)) * 289.0;\r\n}\r\n\r\nfn permute(x:vec3<f32>) -> vec3<f32> {\rreturn mod289_vec3(((x * 34.0) + 1.0) * x);\r\n}\r\n\r\nfn permute4(x:vec4<f32>) -> vec4<f32> {\rreturn mod289_vec4(((x * 34.0) + 1.0) * x);\r\n}\r\n\r\nfn permute_f32(x:f32) -> f32 {\rreturn mod289_f32(((x * 34.0) + 1.0) * x);\r\n}\r\n\r\nfn taylorInvSqrt4(r:vec4<f32>) -> vec4<f32> {\rreturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nfn simplex1D(x:f32) -> f32 {\rvar i=floor(x);\rlet f=fract(x);\r\n\r/* 1D에서는 그래디언트가 단순히 +1 또는 -1 */\rlet g0=select(-1.0,1.0,(permute_f32(i) * 0.024390243902439) >=0.5);\rlet g1=select(-1.0,1.0,(permute_f32(i + 1.0) * 0.024390243902439) >=0.5);\r\n\r/* 거리 계산 */\rlet d0=f;\rlet d1=f - 1.0;\r\n\r/* 가중치 계산 (6t^5 - 15t^4 + 10t^3 smoothstep curve) */\rlet t=f * f * f * (f * (f * 6.0 - 15.0) + 10.0);\r\n\r/* 인터폴레이션 */\rlet n0=g0 * d0;\rlet n1=g1 * d1;\r\n\rreturn mix(n0,n1,t) * 0.395;/* 정규화 상수 */\r\n}\r\n\r\nfn simplex2D(v:vec2<f32>) -> f32 {\rlet C=vec4<f32>(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439);\rvar i=floor(v + dot(v,C.yy));\rlet x0=v - i + dot(i,C.xx);\rlet i1=select(vec2<f32>(0.0,1.0),vec2<f32>(1.0,0.0),x0.x > x0.y);\rvar x12=x0.xyxy + C.xxzz;\rx12.x=x12.x - i1.x;\rx12.y=x12.y - i1.y;\ri=mod289_vec2(i);\rlet p=permute(permute(i.y + vec3<f32>(0.0,i1.y,1.0)) + i.x + vec3<f32>(0.0,i1.x,1.0));\rvar m=max(0.5 - vec3<f32>(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),vec3<f32>(0.0));\rm=m * m;\rm=m * m;\rlet x=2.0 * fract(p * C.www) - 1.0;\rlet h=abs(x) - 0.5;\rlet ox=floor(x + 0.5);\rlet a0=x - ox;\rm=m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h));\rlet g=vec3<f32>(a0.x * x0.x + h.x * x0.y,a0.y * x12.x + h.y * x12.y,a0.z * x12.z + h.z * x12.w);\rreturn 130.0 * dot(m,g);\r\n}\r\n\r\nfn simplex3D(v:vec3<f32>) -> f32 {\rlet C=vec2<f32>(1.0/6.0,1.0/3.0);\rlet D=vec4<f32>(0.0,0.5,1.0,2.0);\r\n\r/* First corner */\rvar i=floor(v + dot(v,C.yyy));\rlet x0=v - i + dot(i,C.xxx);\r\n\r/* Other corners */\rlet g=step(x0.yzx,x0.xyz);\rlet l=1.0 - g;\rlet i1=min(g.xyz,l.zxy);\rlet i2=max(g.xyz,l.zxy);\r\n\rlet x1=x0 - i1 + C.xxx;\rlet x2=x0 - i2 + C.yyy;\rlet x3=x0 - D.yyy; \r\n\r/* Permutations */\ri=mod289_vec3(i);\rlet p=permute4(permute4(permute4(\ri.z + vec4<f32>(0.0,i1.z,i2.z,1.0 )) +\ri.y + vec4<f32>(0.0,i1.y,i2.y,1.0 )) +\ri.x + vec4<f32>(0.0,i1.x,i2.x,1.0 ));\r\n\r/* Gradients:7x7 points over a square,mapped onto an octahedron. */\r/* The ring size 17*17=289 is close to a multiple of 49 (49*6=294) */\rlet n_=0.142857142857;\rlet ns=n_ * D.wyz - D.xzx;\r\n\rlet j=p - 49.0 * floor(p * ns.z * ns.z); \r\n\rlet x_=floor(j * ns.z);\rlet y_=floor(j - 7.0 * x_ ); \r\n\rlet x=x_ *ns.x + ns.yyyy;\rlet y=y_ *ns.x + ns.yyyy;\rlet h=1.0 - abs(x) - abs(y);\r\n\rlet b0=vec4<f32>( x.xy,y.xy );\rlet b1=vec4<f32>( x.zw,y.zw );\r\n\rlet s0=floor(b0)*2.0 + 1.0;\rlet s1=floor(b1)*2.0 + 1.0;\rlet sh=-step(h,vec4<f32>(0.0));\r\n\rlet a0=b0.xzyw + s0.xzyw*sh.xxyy;\rlet a1=b1.xzyw + s1.xzyw*sh.zzww;\r\n\rvar p0=vec3<f32>(a0.xy,h.x);\rvar p1=vec3<f32>(a0.zw,h.y);\rvar p2=vec3<f32>(a1.xy,h.z);\rvar p3=vec3<f32>(a1.zw,h.w);\r\n\r/* Normalise gradients */\rlet norm=taylorInvSqrt4(vec4<f32>(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));\rp0 *=norm.x;\rp1 *=norm.y;\rp2 *=norm.z;\rp3 *=norm.w;\r\n\r/* Mix final noise value */\rvar m=max(0.6 - vec4<f32>(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),vec4<f32>(0.0));\rm=m * m;\rreturn 42.0 * dot( m*m,vec4<f32>( dot(p0,x0),dot(p1,x1),\rdot(p2,x2),dot(p3,x3) ) );\r\n}\r\n\r\nfn fbm1D(pos:f32,octaves:i32) -> f32 {\rvar value=0.0;\rvar amplitude=0.5;\rvar frequency=1.0;\rvar max_value=0.0;\r\n\rfor (var i=0;i < octaves;i++) {\rif (i >=octaves) { break;}\rvalue +=simplex1D(pos * frequency) * amplitude;\rmax_value +=amplitude;\ramplitude *=0.5;\rfrequency *=2.0;\r}\r\n\rreturn value/max_value;\r\n}\r\n\r\nfn fbm(pos:vec2<f32>,octaves:i32) -> f32 {\rvar value=0.0;\rvar amplitude=0.5;\rvar frequency=1.0;\rvar max_value=0.0;\r\n\rfor (var i=0;i < octaves;i++) {\rif (i >=octaves) { break;}\rvalue +=simplex2D(pos * frequency) * amplitude;\rmax_value +=amplitude;\ramplitude *=0.5;\rfrequency *=2.0;\r}\r\n\rreturn value/max_value;\r\n}\r\n\r\nfn fbm3D(pos:vec3<f32>,octaves:i32) -> f32 {\rvar value=0.0;\rvar amplitude=0.5;\rvar frequency=1.0;\rvar max_value=0.0;\r\n\rfor (var i=0;i < octaves;i++) {\rif (i >=octaves) { break;}\rvalue +=simplex3D(pos * frequency) * amplitude;\rmax_value +=amplitude;\ramplitude *=0.5;\rfrequency *=2.0;\r}\r\n\rreturn value/max_value;\r\n}\r\n\r\nfn getSimplexNoise1D(pos:f32,uniforms:Uniforms) -> f32 {\rvar total_amplitude:f32=0.0;\rvar noise_value:f32=0.0;\rvar current_amplitude:f32=1.0;\rvar current_frequency:f32=uniforms.frequency;\r\n\r/* Fractal Brownian Motion (FBM) - 여러 옥타브 합성 */\rfor (var i:i32=0;i < uniforms.octaves;i++) {\rlet noise_pos=(pos + uniforms.seed) * current_frequency;\rlet octave_noise=simplex1D(noise_pos);\r\n\rnoise_value +=octave_noise * current_amplitude;\rtotal_amplitude +=current_amplitude;\r\n\rcurrent_amplitude *=uniforms.persistence;\rcurrent_frequency *=uniforms.lacunarity;\r}\r\n\r/* 정규화 */\rnoise_value/=total_amplitude;\r\n\r/* amplitude를 최종 결과에 적용 */\rnoise_value *=uniforms.amplitude;\r\n\r/* -1 ~ 1 범위를 0 ~ 1로 변환 */\rlet normalized_noise=(noise_value + 1.0) * 0.5;\rreturn normalized_noise;\r\n}\r\n\r\nfn getSimplexNoise2D(uv:vec2<f32>,uniforms:Uniforms) -> f32 {\rvar total_amplitude:f32=0.0;\rvar noise_value:f32=0.0;\rvar current_amplitude:f32=1.0;\rvar current_frequency:f32=uniforms.frequency;\r\n\r/* Fractal Brownian Motion (FBM) - 여러 옥타브 합성 */\rfor (var i:i32=0;i < uniforms.octaves;i++) {\rlet noise_pos=(uv + uniforms.seed) * current_frequency;\rlet octave_noise=simplex2D(noise_pos);\r\n\rnoise_value +=octave_noise * current_amplitude;\rtotal_amplitude +=current_amplitude;\r\n\rcurrent_amplitude *=uniforms.persistence;\rcurrent_frequency *=uniforms.lacunarity;\r}\r\n\r/* 정규화 */\rnoise_value/=total_amplitude;\r\n\r/* amplitude를 최종 결과에 적용 */\rnoise_value *=uniforms.amplitude;\r\n\r/* -1 ~ 1 범위를 0 ~ 1로 변환 */\rlet normalized_noise=(noise_value + 1.0) * 0.5;\rreturn normalized_noise;\r\n}\r\n\r\nfn getSimplexNoise3D(pos:vec3<f32>,uniforms:Uniforms) -> f32 {\rvar total_amplitude:f32=0.0;\rvar noise_value:f32=0.0;\rvar current_amplitude:f32=1.0;\rvar current_frequency:f32=uniforms.frequency;\r\n\r/* Fractal Brownian Motion (FBM) - 여러 옥타브 합성 */\rfor (var i:i32=0;i < uniforms.octaves;i++) {\rlet noise_pos=(pos + vec3<f32>(uniforms.seed)) * current_frequency;\rlet octave_noise=simplex3D(noise_pos);\r\n\rnoise_value +=octave_noise * current_amplitude;\rtotal_amplitude +=current_amplitude;\r\n\rcurrent_amplitude *=uniforms.persistence;\rcurrent_frequency *=uniforms.lacunarity;\r}\r\n\r/* 정규화 */\rnoise_value/=total_amplitude;\r\n\r/* amplitude를 최종 결과에 적용 */\rnoise_value *=uniforms.amplitude;\r\n\r/* -1 ~ 1 범위를 0 ~ 1로 변환 */\rlet normalized_noise=(noise_value + 1.0) * 0.5;\rreturn normalized_noise;\r\n}\r\nfn getSimplexNoiseByDimension(uv:vec2<f32>,uniforms:Uniforms) -> f32 {\rif (uniforms.noiseDimension < 1.1) {\rreturn getSimplexNoise1D(uv.x,uniforms);\r} else if (uniforms.noiseDimension < 2.1) {\rreturn getSimplexNoise2D(uv,uniforms);\r} else if (uniforms.noiseDimension < 3.1) {\rreturn getSimplexNoise3D(vec3<f32>(uv.x,uv.y,uniforms.seed * 0.1),uniforms);\r} else {\rreturn getSimplexNoise2D(uv,uniforms);\r}\r\n}\r\n",_?.helperFunctions)})}get noiseDimension(){return this.#_l}set noiseDimension(i){Ba.includes(i)?(this.#_l=i,this.updateUniform("noiseDimension",i)):consoleAndThrowError(`Invalid value for noiseDimension. Received ${i}. Expected one of:${Ba.join(",")}`)}get frequency(){return this.#fl}set frequency(i){validatePositiveNumberRange(i),this.#fl=i,this.updateUniform("frequency",i)}get amplitude(){return this.#dl}set amplitude(i){validatePositiveNumberRange(i),this.#dl=i,this.updateUniform("amplitude",i)}get octaves(){return this.#ml}set octaves(i){validateUintRange(i,1,8),this.#ml=i,this.updateUniform("octaves",i)}get persistence(){return this.#pl}set persistence(i){validatePositiveNumberRange(i,0,1),this.#pl=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#gl}set lacunarity(i){validatePositiveNumberRange(i),this.#gl=i,this.updateUniform("lacunarity",i)}get seed(){return this.#xl}set seed(i){this.#xl=i,this.updateUniform("seed",i)}randomizeSeed(){this.seed=1e3*Math.random()}getSettings(){return{frequency:this.#fl,amplitude:this.#dl,octaves:this.#ml,persistence:this.#pl,lacunarity:this.#gl,seed:this.#xl}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.amplitude&&(this.amplitude=i.amplitude),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed)}},StorageBuffer:StorageBuffer,UniformBuffer:UniformBuffer,UniformType:UniformType,VORONOI_DISTANCE_TYPE:Da,VORONOI_OUTPUT_TYPE:Aa,VertexBuffer:VertexBuffer,VoronoiTexture:class extends ANoiseTexture{#fl=Na.frequency;#vl=Na.distanceScale;#ml=Na.octaves;#pl=Na.persistence;#gl=Na.lacunarity;#xl=Na.seed;#bl=Na.distanceType;#yl=Na.outputType;#Tl=Na.jitter;#Sl=Na.cellIdColorIntensity;constructor(i,m=1024,g=1024,_){super(i,m,g,{..._,mainLogic:_?.mainLogic||"let uv=vec2<f32>((base_uv.x + uniforms.time * (uniforms.animationX * uniforms.animationSpeed)),(base_uv.y + uniforms.time * (uniforms.animationY * uniforms.animationSpeed)));var finalColor:vec4<f32>;if (uniforms.outputType==5) {let colorNoise=getVoronoiColorNoise(uv,uniforms);finalColor=vec4<f32>(colorNoise,1.0);} else {let noise=getVoronoiNoise(uv,uniforms);finalColor=vec4<f32>(noise,noise,noise,1.0);}",uniformStruct:mergerNoiseUniformStruct("frequency:f32,distanceScale:f32,octaves:i32,persistence:f32,lacunarity:f32,seed:f32,distanceType:i32,outputType:i32,jitter:f32,cellIdColorIntensity:f32,",_?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(Na,_?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("fn hash22(p:vec2<f32>) -> vec2<f32> {\rvar p3=fract(vec3<f32>(p.xyx) * vec3<f32>(0.1031,0.1030,0.0973));\rp3 +=dot(p3,p3.yzx + 33.33);\rreturn fract((p3.xx + p3.yz) * p3.zy);\r\n}\r\n\r\nfn hash12(p:vec2<f32>) -> f32 {\rvar p3=fract(vec3<f32>(p.xyx) * 0.1031);\rp3 +=dot(p3,p3.yzx + 33.33);\rreturn fract((p3.x + p3.y) * p3.z);\r\n}\r\n\r\nfn euclideanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 {\rlet d=a - b;\rreturn sqrt(d.x * d.x + d.y * d.y);\r\n}\r\n\r\nfn manhattanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 {\rlet d=abs(a - b);\rreturn d.x + d.y;\r\n}\r\n\r\nfn chebyshevDistance(a:vec2<f32>,b:vec2<f32>) -> f32 {\rlet d=abs(a - b);\rreturn max(d.x,d.y);\r\n}\r\n\r\nfn calculateDistance(a:vec2<f32>,b:vec2<f32>,distanceType:i32) -> f32 {\rswitch (distanceType) {\rcase 0:{ return euclideanDistance(a,b);}\rcase 1:{ return manhattanDistance(a,b);}\rcase 2:{ return chebyshevDistance(a,b);}\rdefault:{ return euclideanDistance(a,b);}\r}\r\n}\r\n\r\n\r\nfn cellIdToColor(cellId:f32,intensity:f32) -> vec3<f32> {\rlet h=cellId * 6.28318;\rlet s=0.7 + 0.3 * fract(cellId * 7.0);\rlet v=0.6 + 0.4 * fract(cellId * 13.0);\r\n\r\rlet c=v * s;\rlet x=c * (1.0 - abs(((h/1.047198) % 2.0) - 1.0));\rlet m=v - c;\r\n\rvar rgb:vec3<f32>;\rlet sector=i32(h/1.047198) % 6;\rswitch (sector) {\rcase 0:{ rgb=vec3<f32>(c,x,0.0);}\rcase 1:{ rgb=vec3<f32>(x,c,0.0);}\rcase 2:{ rgb=vec3<f32>(0.0,c,x);}\rcase 3:{ rgb=vec3<f32>(0.0,x,c);}\rcase 4:{ rgb=vec3<f32>(x,0.0,c);}\rdefault:{ rgb=vec3<f32>(c,0.0,x);}\r}\r\n\rreturn (rgb + m) * intensity;\r\n}\r\n\r\nstruct VoronoiResult {\rf1:f32,\rf2:f32,\rcellId:f32,\r\n}\r\n\r\nfn voronoiSingle(pos:vec2<f32>,frequency:f32,seed:f32,jitter:f32,distanceType:i32) -> VoronoiResult {\rlet scaledPos=pos * frequency;\rlet gridPos=floor(scaledPos);\rlet localPos=fract(scaledPos);\r\n\rvar minDist1=999.0;\rvar minDist2=999.0;\rvar closestCellId=0.0;\r\n\rfor (var y=-1;y <=1;y++) {\rfor (var x=-1;x <=1;x++) {\rlet neighborGrid=gridPos + vec2<f32>(f32(x),f32(y));\r\n\rlet randomOffset=hash22(neighborGrid + seed);\rlet jitteredOffset=mix(vec2<f32>(0.5),randomOffset,jitter);\rlet cellPoint=vec2<f32>(f32(x),f32(y)) + jitteredOffset;\r\n\rlet dist=calculateDistance(localPos,cellPoint,distanceType);\r\n\rif (dist < minDist1) {\rminDist2=minDist1;\rminDist1=dist;\r\rclosestCellId=hash12(neighborGrid + seed);\r} else if (dist < minDist2) {\rminDist2=dist;\r}\r}\r}\r\n\rreturn VoronoiResult(minDist1,minDist2,closestCellId);\r\n}\r\n\r\nfn getVoronoiNoise(uv:vec2<f32>,uniforms:Uniforms) -> f32 {\rvar total=0.0;\rvar frequency=uniforms.frequency;\rvar amplitude=1.0;\rvar maxValue=0.0;\r\n\rfor (var i=0;i < uniforms.octaves;i++) {\rlet voronoiResult=voronoiSingle(\ruv,\rfrequency,\runiforms.seed + f32(i) * 100.0,\runiforms.jitter,\runiforms.distanceType\r);\r\n\rlet F1=voronoiResult.f1 * uniforms.distanceScale;\rlet F2=voronoiResult.f2 * uniforms.distanceScale;\rlet cellId=voronoiResult.cellId;\r\n\rvar octaveValue:f32;\rswitch (uniforms.outputType) {\rcase 0:{ octaveValue=F1;}\rcase 1:{ octaveValue=F2;}\rcase 2:{ octaveValue=F2 - F1;}\rcase 3:{ octaveValue=(F1 + F2) * 0.5;}\rcase 4:{ octaveValue=cellId;} \rcase 5:{\r\rlet colorRGB=cellIdToColor(cellId,uniforms.cellIdColorIntensity);\roctaveValue=(colorRGB.r + colorRGB.g + colorRGB.b)/3.0;\r}\rdefault:{ octaveValue=F1;}\r}\r\n\rtotal +=octaveValue * amplitude;\rmaxValue +=amplitude;\r\n\rfrequency *=uniforms.lacunarity;\ramplitude *=uniforms.persistence;\r}\r\n\rreturn clamp(total/maxValue,0.0,1.0);\r\n}\r\n\r\n\r\nfn getVoronoiColorNoise(uv:vec2<f32>,uniforms:Uniforms) -> vec3<f32> {\rif (uniforms.outputType==5) { \rlet voronoiResult=voronoiSingle(\ruv,\runiforms.frequency,\runiforms.seed,\runiforms.jitter,\runiforms.distanceType\r);\rreturn cellIdToColor(voronoiResult.cellId,uniforms.cellIdColorIntensity);\r} else {\rlet grayValue=getVoronoiNoise(uv,uniforms);\rreturn vec3<f32>(grayValue,grayValue,grayValue);\r}\r\n}\r\n",_?.helperFunctions)})}get frequency(){return this.#fl}set frequency(i){validatePositiveNumberRange(i),this.#fl=i,this.updateUniform("frequency",i)}get distanceScale(){return this.#vl}set distanceScale(i){validatePositiveNumberRange(i),this.#vl=i,this.updateUniform("distanceScale",i)}get octaves(){return this.#ml}set octaves(i){validateUintRange(i,1,8),this.#ml=i,this.updateUniform("octaves",i)}get persistence(){return this.#pl}set persistence(i){validatePositiveNumberRange(i,0,1),this.#pl=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#gl}set lacunarity(i){validatePositiveNumberRange(i),this.#gl=i,this.updateUniform("lacunarity",i)}get seed(){return this.#xl}set seed(i){this.#xl=i,this.updateUniform("seed",i)}get distanceType(){return this.#bl}set distanceType(i){ka.includes(i)?(this.#bl=i,this.updateUniform("distanceType",i)):consoleAndThrowError(`Invalid value for distanceType. Received ${i}. Expected one of:${ka.join(",")}`)}get outputType(){return this.#yl}set outputType(i){Oa.includes(i)?(this.#yl=i,this.updateUniform("outputType",i)):consoleAndThrowError(`Invalid value for outputType. Received ${i}. Expected one of:${Oa.join(",")}`)}get jitter(){return this.#Tl}set jitter(i){(i<0||i>1)&&consoleAndThrowError(`Jitter must be between 0 and 1. Received:${i}`),validatePositiveNumberRange(i,0,1),this.#Tl=i,this.updateUniform("jitter",i)}get cellIdColorIntensity(){return this.#Sl}set cellIdColorIntensity(i){validatePositiveNumberRange(i),this.#Sl=i,this.updateUniform("cellIdColorIntensity",i)}randomizeSeed(){this.seed=1e3*Math.random()}setEuclideanDistance(){this.distanceType=Da.EUCLIDEAN}setManhattanDistance(){this.distanceType=Da.MANHATTAN}setChebyshevDistance(){this.distanceType=Da.CHEBYSHEV}setF1Output(){this.outputType=Aa.F1}setF2Output(){this.outputType=Aa.F2}setCrackPattern(){this.outputType=Aa.F2_MINUS_F1}setSmoothBlend(){this.outputType=Aa.F1_PLUS_F2}setCellIdOutput(){this.outputType=Aa.CELL_ID}setCellIdColorOutput(){this.outputType=Aa.CELL_ID_COLOR}setCellularPattern(){this.outputType=Aa.F1,this.distanceType=Da.EUCLIDEAN,this.jitter=1}setStonePattern(){this.outputType=Aa.F2_MINUS_F1,this.distanceType=Da.EUCLIDEAN,this.jitter=.8}setOrganicPattern(){this.distanceType=Da.MANHATTAN,this.jitter=.6}setGridPattern(){this.jitter=0,this.distanceType=Da.EUCLIDEAN}setCrystalPattern(){this.outputType=Aa.F2_MINUS_F1,this.distanceType=Da.CHEBYSHEV,this.jitter=.9}setStainedGlassPattern(){this.outputType=Aa.CELL_ID_COLOR,this.distanceType=Da.EUCLIDEAN,this.jitter=.7,this.cellIdColorIntensity=.8}setMosaicPattern(){this.outputType=Aa.CELL_ID_COLOR,this.distanceType=Da.MANHATTAN,this.jitter=.3,this.cellIdColorIntensity=1}setBiomeMapPattern(){this.outputType=Aa.CELL_ID,this.distanceType=Da.EUCLIDEAN,this.jitter=.8,this.frequency=4}getSettings(){return{frequency:this.#fl,distanceScale:this.#vl,octaves:this.#ml,persistence:this.#pl,lacunarity:this.#gl,seed:this.#xl,distanceType:this.#bl,outputType:this.#yl,jitter:this.#Tl,cellIdColorIntensity:this.#Sl}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.distanceScale&&(this.distanceScale=i.distanceScale),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed),void 0!==i.distanceType&&(this.distanceType=i.distanceType),void 0!==i.outputType&&(this.outputType=i.outputType),void 0!==i.jitter&&(this.jitter=i.jitter),void 0!==i.cellIdColorIntensity&&(this.cellIdColorIntensity=i.cellIdColorIntensity)}getDistanceTypeName(){return{[Da.EUCLIDEAN]:"Euclidean",[Da.MANHATTAN]:"Manhattan",[Da.CHEBYSHEV]:"Chebyshev"}[this.#bl]||"Unknown"}getOutputTypeName(){return{[Aa.F1]:"F1",[Aa.F2]:"F2",[Aa.F2_MINUS_F1]:"F2-F1 (Crack)",[Aa.F1_PLUS_F2]:"F1+F2 (Blend)",[Aa.CELL_ID]:"Cell ID",[Aa.CELL_ID_COLOR]:"Cell ID Color"}[this.#yl]||"Unknown"}},getUniformOffsetByRoundUp:(i,m)=>((i+m-1)/m|0)*m,loadAndCreateBitmapImage:loadAndCreateBitmapImage,parseIncludeWGSL:parseIncludeWGSL,parseWGSL:parseWGSL}),Ga=Object.freeze({__proto__:null,BlendState:BlendState,DepthStencilState:DepthStencilState,PrimitiveState:PrimitiveState}),Va="\r\n\r\n@group(1) @binding(0)\r\nvar _sampler:sampler;\r\n\r\n@group(1) @binding(1)\r\nvar _texture:texture_2d<f32>;\r\n\r\n\r\n\r\n@fragment\r\nfn main(@location(0) fragUV:vec2<f32>) -> @location(0) vec4<f32> {\r\rvar diffuseColor:vec4<f32>=textureSample(_texture,_sampler,fragUV);\r\n\r\rdiffuseColor=vec4<f32>(diffuseColor.rgb,diffuseColor.a);\r\n\r\rreturn diffuseColor;\r\n}\r\n",$a="\r\n\r\nstruct VertexUniforms {\rmodelMatrix:mat4x4<f32>,\r\n};\r\n\r\n\r\n@group(0) @binding(0)\r\nvar<uniform> vertexUniforms:VertexUniforms;\r\n\r\n\r\n\r\n\r\nstruct VertexOutput {\r@builtin(position) Position:vec4<f32>,\r@location(0) fragUV:vec2<f32>,\r\n};\r\n\r\n\r\n@vertex\r\nfn main(@builtin(vertex_index) VertexIndex:u32) -> VertexOutput {\r\n\r\rvar pos=array<vec2<f32>,6>(\rvec2( 1.0, 1.0),\rvec2( 1.0,-1.0),\rvec2(-1.0,-1.0),\rvec2( 1.0, 1.0),\rvec2(-1.0,-1.0),\rvec2(-1.0, 1.0),\r);\r\n\r\rvar uv=array<vec2<f32>,6>(\rvec2(1.0,0.0),\rvec2(1.0,1.0),\rvec2(0.0,1.0),\rvec2(1.0,0.0),\rvec2(0.0,1.0),\rvec2(0.0,0.0),\r);\r\n\r\rvar output:VertexOutput;\r\n\r\routput.Position=vertexUniforms.modelMatrix * vec4<f32>(pos[VertexIndex],0.0,1.0);\routput.fragUV=uv[VertexIndex];\r\n\r\rreturn output;\r\n}\r\n";const Ha=parseWGSL($a),za=parseWGSL(Va),Ka=Ha.uniforms.vertexUniforms;class FinalRender{#wl=[];#Ml=[];#Rl;#Pl;#Cl;#Il;#El;#Ll=[];#Ke;#Bl=[];#Ul=[];#ue;constructor(){}render(i,m){const{sizeManager:g,gpuDevice:_,antialiasingManager:b}=i,{changedMSAA:y,useMSAA:T}=b,{pixelRectObject:w}=g,{width:P,height:$}=w;if(0===P||0===$)return;const H=this.#Dl(i),q=_.createCommandEncoder(),W=q.beginRenderPass(H);W.setViewport(0,0,P,$,0,1),W.setScissorRect(0,0,P,$),this.#Rl&&!y||this.#Al(i),this.#kl(i,W,m.map(i=>{const m=i.colorAttachments[0];return m.postEffectView||m.pickingView||m.resolveTarget||m.view}),P,$,T),W.end(),_.queue.submit([q.finish()])}#kl(i,m,g,_,b,y){const{gpuDevice:T}=i;g.forEach((g,y)=>{const w=i.viewList[y],{x:P,y:$,width:H,height:q}=w.pixelRectObject,W=create$5();Ke(W,0,1,0,1,-1e3,1e3),scale$5(W,W,[1/_,1/b,1]),translate$1(W,W,[H/2+P,b-q/2-$,0]),scale$5(W,W,[H/2,q/2,1]),this.#Ol(i,y);const ye=this.#wl[y],Ge=this.#Ml[y];T.queue.writeBuffer(ye.gpuBuffer,Ka.members.modelMatrix.uniformOffset,new Ka.members.modelMatrix.View(W));if(i.antialiasingManager.changedMSAA||!this.#Bl[y]||this.#Bl[y].width!==H||this.#Bl[y].height!==q||this.#Ul[y]!==g){const i={layout:this.#Il,label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:this.#ue.gpuSampler},{binding:1,resource:g}]};this.#Ll[y]=T.createBindGroup(i),this.#Bl[y]={width:H||1,height:q||1},this.#Ul[y]=g}m.setPipeline(this.#Nl(i)),m.setBindGroup(0,Ge),m.setBindGroup(1,this.#Ll[y]),m.draw(6,1,0,0)})}#Al(i){const{resourceManager:m}=i;this.#Rl=m.createBindGroupLayout("FINAL_RENDER_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(Ha,0)),this.#Pl=m.createGPUShaderModule("VERTEX_MODULE_FINAL_RENDER",{code:$a}),this.#Cl={module:this.#Pl,entryPoint:"main"},this.#El=m.createGPUShaderModule("FRAGMENT_MODULE_FINAL_RENDER",{code:Va}),this.#Il=m.createBindGroupLayout("FINAL_RENDER_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(za,1)),this.#ue=new Sampler(i,{minFilter:"linear"})}#Ol(i,m){const{gpuDevice:g}=i;if(!this.#wl[m]){const _=new ArrayBuffer(Ka.arrayBufferByteLength),b=this.#wl[m]=new UniformBuffer(i,_,`FinalRender_View(${m})_VertexUniform`),y={layout:this.#Rl,label:"VERTEX_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:{buffer:b.gpuBuffer,offset:0,size:b.size}}]};this.#Ml[m]=g.createBindGroup(y)}}#Dl(i){const{backgroundColor:m,gpuContext:g}=i,_=m.rgbaNormal;return{colorAttachments:[{view:g.getCurrentTexture().createView({label:"finalRenderTextureView"}),clearValue:{r:_[0]*_[3],g:_[1]*_[3],b:_[2]*_[3],a:_[3]},loadOp:Lr.CLEAR,storeOp:Br.STORE}]}}#Nl(i){if(!this.#Ke||i.antialiasingManager.changedMSAA){const{gpuDevice:m}=i,g={label:"PIPELINE_DESCRIPTOR_FINAL_RENDER",layout:m.createPipelineLayout({bindGroupLayouts:[this.#Rl,this.#Il]}),vertex:this.#Cl,fragment:{module:this.#El,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:{srcFactor:Nn.ONE,dstFactor:Nn.ONE_MINUS_SRC_ALPHA,operation:Fn.ADD},alpha:{srcFactor:Nn.ONE,dstFactor:Nn.ONE_MINUS_SRC_ALPHA,operation:Fn.ADD}}}]}};this.#Ke=m.createRenderPipeline(g)}return this.#Ke}}!function(i,m){void 0===m&&(m={});var g=m.insertAt;if("undefined"!=typeof document){var _=document.head||document.getElementsByTagName("head")[0],b=document.createElement("style");b.type="text/css","top"===g&&_.firstChild?_.insertBefore(b,_.firstChild):_.appendChild(b),b.styleSheet?b.styleSheet.cssText=i:b.appendChild(document.createTextNode(i))}}(".RedGPUDebugPanel{background:rgba(0,0,0,.8);bottom:0;color:#fff;font-size:11px;left:0;line-height:1;max-height:100%;min-width:250px;overflow-y:auto;position:fixed;transform:translateZ(0);will-change:transform;z-index:2}.RedGPUDebugPanel::-webkit-scrollbar{width:6px}.RedGPUDebugPanel::-webkit-scrollbar-track{background:#000}.RedGPUDebugPanel::-webkit-scrollbar-thumb{background:#333}.RedGPUDebugPanel::-webkit-scrollbar-thumb:hover{background:#444}.debug-group{line-height:1.4;padding:10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group{background:linear-gradient(90deg,hsla(0,0%,100%,.1),rgba(0,0,0,.01));border:1px solid hsla(0,0%,100%,.16);border-radius:6px;box-shadow:0 0 10px rgba(0,0,0,.16);line-height:1.4;margin:8px 0;padding:6px 10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group-title{color:#e3b096}.debug-item{align-items:center;color:#ccc;display:flex;font-weight:400;gap:10px;justify-content:space-between;transform:translateZ(0);width:100%;will-change:transform;b{color:#fdb48d;font-weight:700}}.boolean-true{background:green}.boolean-false,.boolean-true{border-radius:2px;line-height:1;margin:2px 0;padding:2px 4px}.boolean-false{background:red}.debug-folder{background:rgba(0,0,0,.5);border-bottom:1px solid hsla(0,0%,100%,.05);display:flex;flex-direction:column;width:100%}.debug-folder-title{align-items:center;background:linear-gradient(0deg,rgba(0,0,0,.95),hsla(0,0%,100%,.055));border-bottom:1px solid hsla(0,0%,100%,.025);border-top:1px solid hsla(0,0%,100%,.05);cursor:pointer;display:flex;font-size:12px;justify-content:space-between;line-height:1;padding:10px 8px;width:100%;b{color:#fdb48d;font-size:11px;font-weight:700}}.debug-item-title{color:#888}.debug-item-cache-key,.debug-item-title{font-weight:500;max-width:250px;overflow:hidden;text-overflow:ellipsis;text-shadow:1px 1px 0 rgba(0,0,0,.3)}.debug-item-cache-key{color:#fff;white-space:nowrap}.div-line{background:hsla(0,0%,100%,.06);border-bottom:1px solid transparent;height:1px;margin:10px 0;width:100%}.root-padding{padding:6px;width:100%}.color-box{border:1px solid hsla(0,0%,100%,.2);border-radius:4px;margin:2px;padding:3px}");const createDebugTitle=i=>`<div>${i}</div>`,makeColorDebug=(i,m)=>`\n<div class='debug-item'>\n\x3c!--\t<span class='debug-item-title'>${i}</span> --\x3e\n\t<span class='debug-item-title'></span> \n\t<div style="border:1px solid rgba(255,255,255,0.2);border-radius:4px;background:rgba(${m.rgba});padding:3px;margin:2px">${m.rgba}\n\t</div>\n</div>\n`,makeBooleanDebug=(i,m)=>`<span class="${m?"boolean-true":"boolean-false"}">${m?"true":"false"}</span>`,getDebugFormatValue=i=>"boolean"==typeof i?i.toString():"number"==typeof i?i.toLocaleString():i,updateDebugItemValue=(i,m,g,_,b="")=>{const y=i.querySelector(`.${m}`);if(!y)return;const T=`${getDebugFormatValue(g)}${b}`;y.innerHTML!==T&&(y.innerHTML=T,_&&(y.style.background=g?"green":"rgba(255,255,255,0.1)"))};let qa=class{dom;#Fl;#Gl=!1;constructor(i){this.#Fl=i,this.dom=document.createElement("div"),this.dom.innerHTML=`<div class="debug-folder">\t<div class="debug-folder-title" style="display:flex;align-items:center;justify-content:space-between;cursor:pointer;">${createDebugTitle(`${i} Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)`)}<div class="onoff">${this.#Gl?"close":"open"}</div></div><div class="item-container" style="display:none"></div></div>\n`;const m=this.dom.querySelector(".debug-folder"),g=this.dom.querySelector(".item-container");m.addEventListener("click",()=>{this.openYn=!this.openYn,g.style.display=this.#Gl?"":"none"})}get openYn(){return this.#Gl}set openYn(i){this.#Gl=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}update(i,m){const{resourceManager:g}=m,_=g[`managed${this.#Fl}State`],{table:b,videoMemory:y,length:T}=_;let w;switch(i.totalUsedVideoMemory+=y,updateDebugItemValue(this.dom,"totalCount",T),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(y)),this.#Fl){case"VertexBuffer":if(w=ResourceStateVertexBuffer,w){const{dirtyList:i}=w;i.length&&(this.#Vl(i),i.length=0)}break;case"IndexBuffer":if(w=ResourceStateIndexBuffer,w){const{dirtyList:i}=w;i.length&&(this.#Vl(i),i.length=0)}break;case"UniformBuffer":w=ResourceStateUniformBuffer,this.#Vl(Object.values(b));break;case"StorageBuffer":w=ResourceStateStorageBuffer,this.#Vl(Object.values(b))}}#Vl(i){const m=this.dom.querySelector(".item-container"),g=new Set,_=this.#Fl,b=new Map;m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${_}_`,"");g.add(m),b.set(m,i)}),i.map((i,y)=>{const{useNum:T,buffer:w}=i,{uuid:P,size:$,name:H}=w,q=`${_}_${P}`;let W=b.get(P);W?g.delete(P):(W=document.createElement("div"),W.className=`debug-group ${q}`,W.innerHTML=`<div class='debug-item'><div><div class='debug-item-title'><span style="white-space:nowrap">${y} <span class="name"></span></span></div><div style="font-size:10px">${P}</div></div><div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"><span class='useNum' style="padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span><span style="white-space:nowrap"><b class="videoMemorySize"></b></span></div></div>`,m.appendChild(W)),updateDebugItemValue(W,"name",H),updateDebugItemValue(W,"useNum",T,!0),updateDebugItemValue(W,"videoMemorySize",formatBytes($))});for(let i of g)b.get(i).remove()}};class DebugBufferList{debugStatisticsDomService;constructor(i){this.debugStatisticsDomService=new qa(i)}get dom(){return this.debugStatisticsDomService.dom}update(i,m){this.debugStatisticsDomService.update(i,m)}}class ADebugItem{debugStatisticsDomService;constructor(){}get dom(){return this.debugStatisticsDomService.dom}update(i,m,g){this.debugStatisticsDomService.update(i,m)}}class ADebugStatisticsDomService{dom;#Gl=!1;constructor(){}get openYn(){return this.#Gl}set openYn(i){this.#Gl=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}init(i,m=!1){this.#Gl=m,this.dom=document.createElement("div"),this.dom.innerHTML=`<div class="debug-folder">\t<div class="debug-folder-title">${i}<div class="onoff">${this.openYn?"close":"open"}</div></div><div class="item-container" style="display:${m?"":"none"}"></div></div>\n`;const g=this.dom.querySelector(".debug-folder-title"),_=this.dom.querySelector(".item-container");g.addEventListener("click",i=>{this.openYn=!this.openYn,_.style.display=this.openYn?"":"none"})}update(i,m){}}const Wa=["useMSAA","alphaMode","renderScale"];let Xa=class extends ADebugStatisticsDomService{constructor(){super(),this.init(`${createDebugTitle("RedGPUContext")}`,!0),this.#Vl()}update(i,m){Wa.forEach(i=>this.#$l(m,i)),this.#Hl(m)}#Vl(){const i=this.dom.querySelector(".item-container"),m=['<div class="debug-group">',...Wa.map(i=>this.#zl(i)),this.#zl("width_height"),this.#zl("pixelRectArray"),this.#zl("backgroundColor"),"</div>"];i.innerHTML=m.join("")}#zl(i){return`<div class='debug-item'>${i}<span class='debug-item-title redGPUContext_${i}'/></div>`}#$l(i,m){const g=i[m];updateDebugItemValue(this.dom,`redGPUContext_${m}`,"useMSAA"===m?makeBooleanDebug(0,g):getDebugFormatValue(g))}#Hl(i){const{sizeManager:m,width:g,height:_,backgroundColor:b}=i,{pixelRectArray:y}=m;updateDebugItemValue(this.dom,"redGPUContext_width_height",`${g},${_}`),updateDebugItemValue(this.dom,"redGPUContext_pixelRectArray",y),updateDebugItemValue(this.dom,"redGPUContext_backgroundColor",makeColorDebug("backgroundColor",b))}};class DebugRedGPUContext extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new Xa}}let ja=class extends ADebugStatisticsDomService{#Kl;constructor(i){super(),this.#Kl=i,this.init(`${createDebugTitle((i?"CubeTexture":"BitmapTexture")+' Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)')}`)}update(i,m){const{resourceManager:g}=m,{managedBitmapTextureState:_,managedCubeTextureState:b}=g,{table:y,videoMemory:T,length:w}=this.#Kl?b:_;i.totalUsedVideoMemory+=T;const P=Object.values(y);updateDebugItemValue(this.dom,"totalCount",w),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(T)),this.#Vl(P)}getTargetSrc(i){if(i instanceof Sr){const{src:m}=i;return m?m.startsWith("data:")?"base64 texture":m:"null"}{const{srcList:m}=i;return`${m[0]}...`}}getUpdatedTdom(i,m,g,_,b,y){return i||((i=document.createElement("div")).className=`debug-group ${g}`,i.innerHTML=`<div class='debug-item'><div><div class='debug-item-title'>${_} <span class="targetSrc">${b}</span></div> <div class='debug-item-cache-key'>cacheKey:<span class="cacheKey">Place holder for cacheKey</span></div><div>mipLevelCount:<span class="mipLevelCount"></span>/useMipmap:<span class="useMipmap"></span></div><div>width:<span class="width"></span>/height:<span class="height"></span></div></div><div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"><span class='useNum' style="padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span><span><b class="videoMemorySize"></b></span></div></div><div style="font-size:10px">${y}</div>`,m.appendChild(i)),i}updateDebugItems(i,m,g,_,b,y,T,w,P){updateDebugItemValue(i,"mipLevelCount",m),updateDebugItemValue(i,"useMipmap",g),updateDebugItemValue(i,"width",_),updateDebugItemValue(i,"height",b),updateDebugItemValue(i,"useNum",y,!0),updateDebugItemValue(i,"cacheKey",T),updateDebugItemValue(i,"targetSrc",w),updateDebugItemValue(i,"videoMemorySize",formatBytes(P))}#Vl(i){const m=this.dom.querySelector(".item-container"),g=new Set,_=this.#Kl?"cube_texture":"bitmap_texture";m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${_}_`,"");g.add(m)}),i.map((i,b)=>{const{useNum:y,cacheKey:T,texture:w}=i;let P=this.getTargetSrc(i);const{mipLevelCount:$,useMipmap:H,gpuTexture:q,uuid:W,videoMemorySize:ye}=w,{width:Ge,height:Ke}=q||{},Xe=`${_}_${w.uuid}`;let je=m.querySelector(`.${Xe}`);je=this.getUpdatedTdom(je,m,Xe,b,P,W),g.delete(w.uuid),this.updateDebugItems(je,$,H,Ge,Ke,y,T,P,ye)});for(let i of g)m.querySelector(`.${_}_${i}`).remove()}};class DebugTextureList extends ADebugItem{constructor(i=!1){super(),this.debugStatisticsDomService=new ja(i)}}const Ya=["totalNum3DGroups","totalNum3DObjects","totalNumInstances","totalNumDrawCalls","totalNumTriangles","totalNumPoints","totalUsedVideoMemory"];let Za=class{dom;constructor(){this.dom=document.createElement("div"),this.#ql()}update(i){Ya.forEach(m=>{const g=i[m],_="totalUsedVideoMemory"===m?`<b>${formatBytes(g)}</b>`:g;updateDebugItemValue(this.dom,m,_)})}#ql(){const i=this.#Vl();this.dom.innerHTML=`<div class="debug-group">${createDebugTitle("Total State")}<div>${i}</div> </div>`}#Vl(){return Ya.map(i=>"totalUsedVideoMemory"===i?`<div class='debug-item'>${i}<span class='debug-item-title'/><b class="${i}"></b></div>`:`<div class='debug-item'>${i}<span class='debug-item-title ${i}'/></div>`).join("")}};class DebugTotalState extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new Za}}const Ja=["usedVideoMemory","viewRenderTime","num3DGroups","num3DObjects","numInstances","numDrawCalls","numTriangles","numPoints"],Qa={viewRenderTime:"ms"},es={camera:"camera.name",scene:"scene.name",useBackgroundColor:"scene.useBackgroundColor",backgroundColor:"scene.backgroundColor",x_y:"x,y",width_height:"width,height"};let ts=class extends ADebugStatisticsDomService{#Wl=0;constructor(){super(),this.init(`${createDebugTitle("ViewList")}`,!0)}update(i,m){const{viewList:g,numViews:_}=m;this.#Wl!==_&&(this.#Xl(g),this.#Wl=_),g.forEach((m,g)=>{Ja.forEach(_=>this.#$l(m,g,_,i)),this.#Hl(m,g)})}#zl(i,m){return`<div class='debug-item'>${es[m]||m}<span class='debug-item-title view${i}_${m}'/></div>`}#Xl(i){const m=this.dom.querySelector(".item-container"),g=i.map((i,m)=>{const{name:g}=i,_=Ja.map(i=>this.#zl(m,i));return _.push('<div class="debug-sub-group">',this.#zl(m,"x_y"),this.#zl(m,"width_height"),this.#zl(m,"pixelRectArray"),this.#zl(m,"camera"),this.#zl(m,"scene"),this.#zl(m,"useBackgroundColor"),this.#zl(m,"backgroundColor"),"</div>"),`${createDebugTitle(`<div class="debug-sub-group-title">${g}</div>`)}${_.join("")}`});return m.innerHTML=`<div class="debug-group">${g.join('<div class="div-line"></div>')}</div>`}#$l(i,m,g,_){const{debugViewRenderState:b}=i,y=`total${g.charAt(0).toUpperCase()}${g.substring(1)}`,T=b[g],w="usedVideoMemory"===g?`<b>${formatBytes(T)}</b>`:T,P=Qa[g];_[y]+=T,updateDebugItemValue(this.dom,`view${m}_${g}`,w,!1,P)}#Hl(i,m){const{debugViewRenderState:g,rawCamera:_,scene:b}=i,{backgroundColor:y,useBackgroundColor:T}=b,{viewportSize:w}=g,{pixelRectArray:P,x:$,y:H,width:q,height:W}=w;updateDebugItemValue(this.dom,`view${m}_x_y`,`${$},${H}`),updateDebugItemValue(this.dom,`view${m}_width_height`,`${q},${W}`),updateDebugItemValue(this.dom,`view${m}_pixelRectArray`,P),updateDebugItemValue(this.dom,`view${m}_useBackgroundColor`,makeBooleanDebug(0,T)),updateDebugItemValue(this.dom,`view${m}_backgroundColor`,makeColorDebug("backgroundColor",y)),updateDebugItemValue(this.dom,`view${m}_camera`,_.name),updateDebugItemValue(this.dom,`view${m}_scene`,b.name)}};class DebugViewList extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new ts}}class DebugStatisticsDomService{dom;constructor(){this.dom=document.createElement("div"),this.dom.style.cssText="z-index:1;position:sticky;top:0;background:#000;border-bottom:1px solid rgba(255,255,255,0.06);box-shadow:0 10px 10px rgba(0,0,0,0.5)",this.#ql()}update(i,m,g){const _={elapsedSeconds:i,currentFps:m,averageFps:g};Object.entries(_).forEach(([i,m])=>this.#jl(i,m))}#ql(){this.dom.innerHTML='<div class="debug-group" ><div class=\'debug-item\'><span class=\'debug-item-title\'>Frame</span><span style="text-align:right"><div class="elapsedSeconds">elapsedSeconds</div><div class="currentFps">currentFps</div><div style="color:#fff" class="averageFps">averageFps</div></span></div></div>'}#jl(i,m){const g=this.dom.querySelector(`.${i}`);if(g){const i=m.toLocaleString();g.innerHTML!==i&&(g.innerHTML=i)}}}class Fps extends ADebugItem{#Yl;#Zl;#Jl=0;#Ql=0;constructor(){super(),this.debugStatisticsDomService=new DebugStatisticsDomService,this.#Zl=performance.now()}update(i,m,g){this.#ec(g);const _=this.#tc(),{elapsedSeconds:b,currentFps:y,averageFps:T}=_;this.debugStatisticsDomService.update(`${b.toLocaleString()}ms`,`${y.toLocaleString()} fps`,`AVG:${T} fps`)}#ec(i){this.#Yl=i-this.#Zl||16,this.#Zl=i,this.#Jl++}#tc(){const i=1/(this.#Yl/1e3),m=Math.round(i);this.#Ql+=i;return{currentFps:m,averageFps:Math.round(this.#Ql/this.#Jl),elapsedSeconds:this.#Yl}}}class DebugRender{fps;debugTotalState;debugViewList;debugRedGPUContext;debugBitmapTextureList;debugCubeTextureList;debugIndexBufferList;debugVertexBufferList;debugUniformBufferList;debugStorageBufferList;totalNum3DGroups;totalNum3DObjects;totalNumDrawCalls;totalNumInstances;totalNumTriangles;totalNumPoints;totalUsedVideoMemory;#rc;constructor(){this.fps=new Fps,this.debugTotalState=new DebugTotalState,this.debugRedGPUContext=new DebugRedGPUContext,this.debugViewList=new DebugViewList,this.debugBitmapTextureList=new DebugTextureList,this.debugCubeTextureList=new DebugTextureList(!0),this.debugIndexBufferList=new DebugBufferList("IndexBuffer"),this.debugVertexBufferList=new DebugBufferList("VertexBuffer"),this.debugUniformBufferList=new DebugBufferList("UniformBuffer"),this.debugStorageBufferList=new DebugBufferList("StorageBuffer"),this.#nc()}render(i,m){i.useDebugPanel?(this.#ic(),this.fps.update(this,i,m),this.debugRedGPUContext.update(this,i,m),this.debugViewList.update(this,i,m),this.debugBitmapTextureList.update(this,i,m),this.debugCubeTextureList.update(this,i,m),this.debugIndexBufferList.update(this,i),this.debugVertexBufferList.update(this,i),this.debugUniformBufferList.update(this,i),this.debugStorageBufferList.update(this,i),this.debugTotalState.update(this,i,m)):this.#ac(),this.#nc()}#nc(){this.totalNum3DGroups=0,this.totalNum3DObjects=0,this.totalNumInstances=0,this.totalNumDrawCalls=0,this.totalNumTriangles=0,this.totalNumPoints=0,this.totalUsedVideoMemory=0}#ic(){this.#rc||(this.#rc=document.createElement("div"),this.#rc.className="RedGPUDebugPanel",document.body.appendChild(this.#rc),[this.fps.debugStatisticsDomService,this.debugTotalState.debugStatisticsDomService,this.debugRedGPUContext.debugStatisticsDomService,this.debugViewList.debugStatisticsDomService,this.debugVertexBufferList.debugStatisticsDomService,this.debugIndexBufferList.debugStatisticsDomService,this.debugUniformBufferList.debugStatisticsDomService,this.debugStorageBufferList.debugStatisticsDomService,this.debugBitmapTextureList.debugStatisticsDomService,this.debugCubeTextureList.debugStatisticsDomService].forEach(i=>this.#rc.appendChild(i.dom)))}#ac(){this.#rc&&(this.#rc.remove(),this.#rc=null)}}Object.freeze(DebugRender);const renderListForLayer=(i,m,g="pipeline")=>{let _=0;const b=i.length,{currentRenderPassEncoder:y}=m;for(;_<b;_++){const b=i[_];if(b.gpuRenderInfo){const i=b._geometry,_=b._material;i?m.num3DObjects++:m.num3DGroups++;const{gpuRenderInfo:T}=b,{vertexUniformBindGroup:w}=T;if(i&&T[g]){y.setPipeline(T[g]);const{gpuBuffer:P}=i.vertexBuffer,{fragmentUniformBindGroup:$}=_.gpuRenderInfo;if(m.prevVertexGpuBuffer!==P&&(y.setVertexBuffer(0,P),m.prevVertexGpuBuffer=P,b.particleBuffers&&(b.particleBuffers.forEach((i,m)=>{y.setVertexBuffer(m+1,i)}),m.prevVertexGpuBuffer=null)),y.setBindGroup(1,w),m.prevFragmentUniformBindGroup!==$&&(y.setBindGroup(2,$),m.prevFragmentUniformBindGroup=$),m.numDrawCalls++,i.indexBuffer){const{indexBuffer:g}=i,{indexNum:_,triangleCount:T,gpuBuffer:w}=g;y.setIndexBuffer(w,"uint32"),b.particleBuffers?y.drawIndexed(_,b.particleNum,0,0,0):y.drawIndexed(_,1,0,0,0),m.numTriangles+=T,m.numPoints+=_}else{const{vertexBuffer:g}=i,{vertexCount:_,triangleCount:b}=g;y.draw(_,1,0,0),m.numTriangles+=b,m.numPoints+=_}}}}m.prevVertexGpuBuffer=null,m.prevFragmentUniformBindGroup=null,m.prevVertexGpuBuffer=null},renderList=(i,m)=>{let g=0;const _=i.length;for(;g<_;g++)i[g].render(m);m.prevVertexGpuBuffer=null,m.prevFragmentUniformBindGroup=null,m.prevVertexGpuBuffer=null};class Renderer{#sc;#oc;#uc=new DebugRender;constructor(){}renderFrame(i,m){this.#oc||(this.#oc=new FinalRender);const g=[];{let _=0;const b=i.viewList.length;for(;_<b;_++){const b=i.viewList[_];g.push(this.renderView(b,m))}}this.#oc.render(i,g),i.antialiasingManager.changedMSAA=!1}start(i,m){cancelAnimationFrame(i.currentRequestAnimationFrame);const HD_render=g=>{m?.(g),this.renderFrame(i,g),this.#uc.render(i,g),i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)};i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)}stop(i){cancelAnimationFrame(i.currentRequestAnimationFrame)}renderView(i,m){const{redGPUContext:g,camera:_,scene:b,pickingManager:y,pixelRectObject:T,axis:w,grid:P,debugViewRenderState:$}=i,{antialiasingManager:H}=g,{useMSAA:q}=H,{shadowManager:W}=b,{directionalShadowManager:ye}=W,{colorAttachment:Ge,depthStencilAttachment:Ke}=this.#lc(i),Xe={colorAttachments:[Ge],depthStencilAttachment:Ke};_.update?.(i,m);const je=g.gpuDevice.createCommandEncoder();if(i.debugViewRenderState.reset(null,m),T.width&&T.height){if(ye.shadowDepthTextureView){const m={colorAttachments:[],depthStencilAttachment:{view:ye.shadowDepthTextureView,depthClearValue:1,depthLoadOp:Lr.CLEAR,depthStoreOp:Br.STORE}},g=je.beginRenderPass(m);this.#cc(i,g,!0,!1),((i,m)=>{const{debugViewRenderState:g,scene:_}=i;g.currentRenderPassEncoder=m;const{shadowManager:b}=_,{directionalShadowManager:y}=b,{castingList:T}=y;renderListForLayer(T,g,"shadowPipeline")})(i,g),g.end(),ye.resetCastingList()}{const m=je.beginRenderPass(Xe);this.#cc(i,m,!1,!0),((i,m)=>{const{debugViewRenderState:g,skybox:_,scene:b}=i;g.currentRenderPassEncoder=m;const{instanceMeshLayer:y}=g,{children:T}=b;_&&_.render(g),renderList(T,g),renderList(y,g)})(i,m),w&&w.render($),P&&P.render($),((i,m)=>{const{debugViewRenderState:g,rawCamera:_}=i;g.currentRenderPassEncoder=m;const{alphaLayer:b,transparentLayer:y,particleLayer:T}=g;renderListForLayer(b,g);const{x:w,y:P,z:$}=_;sortTransparentObjects({x:w,y:P,z:$},y),renderListForLayer(y,g),renderListForLayer(T,g)})(i,m),m.end()}if(i.debugViewRenderState.render2PathLayer.length){const{mipmapGenerator:m}=g.resourceManager;let _=i.viewRenderTextureManager.renderPath1ResultTexture,b=q?i.viewRenderTextureManager.colorResolveTexture:i.viewRenderTextureManager.colorTexture;b||(q?console.error("MSAA가 활성화되어 있지만 colorResolveTexture가 정의되지 않았습니다"):console.error("colorTexture가 정의되지 않았습니다")),_||console.error("renderPath1ResultTexture가 정의되지 않았습니다"),je.copyTextureToTexture({texture:b},{texture:_},{width:i.pixelRectObject.width,height:i.pixelRectObject.height,depthOrArrayLayers:1}),m.generateMipmap(_,i.viewRenderTextureManager.renderPath1ResultTextureDescriptor);const y=je.beginRenderPass({colorAttachments:[{...Ge,loadOp:"load"}],depthStencilAttachment:{...Ke,depthLoadOp:Lr.LOAD}});let T=i.viewRenderTextureManager.renderPath1ResultTextureView;this.#cc(i,y,!1,!0,T),((i,m)=>{const{debugViewRenderState:g}=i;g.currentRenderPassEncoder=m;const{render2PathLayer:_}=g;renderListForLayer(_,g)})(i,y),y.end()}if(Xe.colorAttachments[0].postEffectView=i.postEffectManager.render(),y){y.checkTexture(i);const m={colorAttachments:[{view:y.pickingGPUTextureView,clearValue:{r:0,g:0,b:0,a:0},loadOp:Lr.CLEAR,storeOp:Br.STORE}],depthStencilAttachment:{view:y.pickingDepthGPUTextureView,depthClearValue:1,depthLoadOp:Lr.CLEAR,depthStoreOp:Br.STORE}},g=je.beginRenderPass(m);this.#cc(i,g,!1,!1),((i,m)=>{const{debugViewRenderState:g,pickingManager:_}=i;g.currentRenderPassEncoder=m;const{castingList:b}=_;renderListForLayer(b,g,"pickingPipeline")})(i,g),g.end()}}return g.gpuDevice.queue.submit([je.finish()]),i.debugViewRenderState.viewRenderTime=performance.now()-i.debugViewRenderState.startTime,y.checkEvents(i,m),Xe}#lc(i){const{scene:m,redGPUContext:g,viewRenderTextureManager:_}=i,{depthTextureView:b,colorTextureView:y,colorResolveTextureView:T}=_,{useBackgroundColor:w,backgroundColor:P}=m,{antialiasingManager:$}=g,{useMSAA:H}=$,q=P.rgbaNormal,W={view:y,clearValue:w?{r:q[0]*q[3],g:q[1]*q[3],b:q[2]*q[3],a:q[3]}:{r:0,g:0,b:0,a:0},loadOp:Lr.CLEAR,storeOp:Br.STORE};H&&(W.resolveTarget=T);return{colorAttachment:W,depthStencilAttachment:{view:b,depthClearValue:1,depthLoadOp:Lr.CLEAR,depthStoreOp:Br.STORE}}}#cc(i,m,g=!1,_=!0,b=null){const{inverseProjectionMatrix:y,pixelRectObject:T,projectionMatrix:w,rawCamera:P,redGPUContext:$,scene:H}=i,{gpuDevice:q}=$,{modelMatrix:W,position:ye}=P,Ge=i.systemUniform_Vertex_StructInfo,Ke=i.systemUniform_Vertex_UniformBuffer.gpuBuffer,{shadowManager:Xe,lightManager:je}=H,{directionalShadowManager:Ye}=Xe,Ze=P instanceof Camera2D;if(g){const i=Ye.shadowDepthTextureSize,g=Ye.shadowDepthTextureSize;m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g)}else{const{width:i,height:g}=T;this.#sc&&this.#sc.width===i&&this.#sc.height===g||(m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g),this.#sc={width:i,height:g})}je.updateViewSystemUniforms(i),Ye.updateViewSystemUniforms($),i.update(i,g,_,b),m.setBindGroup(0,i.systemUniform_Vertex_UniformBindGroup),[{key:"projectionMatrix",value:w},{key:"projectionCameraMatrix",value:multiply$5(rs,w,W)},{key:"inverseProjectionMatrix",value:y},{key:"resolution",value:[i.pixelRectObject.width,i.pixelRectObject.height]}].forEach(({key:i,value:m})=>{q.queue.writeBuffer(Ke,Ge.members[i].uniformOffset,new Ge.members[i].View(m))}),[{key:"cameraMatrix",value:W},{key:"cameraPosition",value:ye},{key:"nearClipping",value:[Ze?0:P.nearClipping]},{key:"farClipping",value:[Ze?0:P.farClipping]}].forEach(({key:i,value:m})=>{q.queue.writeBuffer(Ke,Ge.members.camera.members[i].uniformOffset,new Ge.members.camera.members[i].View(m))})}}let rs=create$5();var ns=Object.freeze({__proto__:null,isHexColor:isHexColor,isUint:isUint,validateNumber:validateNumber,validateNumberRange:validateNumberRange,validatePositiveNumberRange:validatePositiveNumberRange,validateRedGPUContext:validateRedGPUContext,validateUintRange:validateUintRange});class MeshInfo_OBJ{name;groupName;materialKey;index;position;resultPosition;resultNormal;resultUV;resultInterleave;use;childrenInfo;ableUV;ableNormal;ableLight;mesh;constructor(i,m){this.name=i,this.groupName=m,this.index=[],this.position=[],this.resultPosition=[],this.resultNormal=[],this.resultUV=[],this.resultInterleave=[],this.use=!0,this.childrenInfo={}}createVertexBuffer(i,m){let g={};return this.resultPosition.length&&(g.aVertexPosition=InterleaveType.float32x3),this.resultNormal.length&&(g.aVertexNormal=InterleaveType.float32x3),this.resultUV.length&&(g.aTexcoord=InterleaveType.float32x2),new VertexBuffer(i,new Float32Array(this.resultInterleave.length?this.resultInterleave:this.resultPosition),new InterleavedStruct(g,`InterleavedStruct_${m}}`),void 0,`VertexBuffer_${m}`)}createBufferIndex(i,m){if(this.index.length)return new IndexBuffer(i,this.index,void 0,`IndexBuffer_${m}`)}createColorMaterial(i){return this.resultUV.length&&this.resultNormal.length||this.resultNormal.length?new ColorMaterial(i,"#00ff00"):new ColorMaterial(i,"#0000ff")}}Object.freeze(MeshInfo_OBJ);class TotalPointInfo_OBJ{position=[];normal=[];uv=[];points=[];normalPoints=[];uvPoints=[];constructor(){}}Object.freeze(TotalPointInfo_OBJ);class OBJMTLLoader{complete;parseData;#hc;#fc;#dc;constructor(i,m,g){this.#hc=getFilePath(m),this.#fc=getFileName(m),this.#dc=m,this.#mc(m,g)}get path(){return this.#hc}get fileName(){return this.#fc}get url(){return this.#dc}#mc(i,m){fetch(i,{method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded;charset=UTF-8"}}).then(i=>{if(!i.ok)throw new Error(`HTTP 오류! 상태값:${i.status}`);return i.text()}).then(i=>{this.complete=!0,this.parseData=function(i,m){let g;const _={},b={single:["newmtl","Ns","Ni","d","illum"],multi:["Ka","Kd","Ks"],maps:["map_Kd","map_Ns","map_bump"]};return(m=m.replace(/^\#[\s\S]+?\n/g,"")).split("\n").forEach(m=>{for(const y in b)for(const T of b[y])if(new RegExp(`^(${T} )`).test(m))switch(y){case"single":if("newmtl"===T){const i=m.replace("newmtl ","").trim();g={name:i},_[i]=g}else g[T]=+m.replace(`${T} `,"").trim();break;case"multi":g[T]=m.replace(`${T} `,"").split(" ");break;case"maps":g[T]=i.path+m.replace(`${T} `,"").trim()}}),_}(this,i),m?.(this.parseData)}).catch(i=>{this.complete=!0,this.parseData={},m?.(this.parseData)})}}Object.freeze(OBJMTLLoader);const is=/^o/,as=/v( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,ss=/f\s+(([\d]{1,}[\s]?){3,})+/,os=/f\s+((([\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,us=/f\s+((([\d]{1,}\/[\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,ls=/f\s+((([\d]{1,}\/\/[\d]{1,}[\s]?){3,})+)/;let cs,hs;function processMaterialLibrary(i,m,g,_,b){b=new OBJMTLLoader(g,`${m.path}${i.split(" ")[1]}`,i=>{m.mtlLoader=i,m.modelParsingComplete&&(((i,m,g)=>{let _,b,y,T;for(_ in T={},m){let w,P;y=m[_];const{use:$,materialKey:H,mesh:q}=y,{ableLight:W,ableNormal:ye}=y,{resultInterleave:Ge}=y;if($&&Ge.length){let m,_,y;b=g.parseData[H],b&&(b.map_Kd?(T[b.map_Kd]?P=T[b.map_Kd]:(P=new BitmapTexture(i,b.map_Kd),T[b.map_Kd]=P),w=new BitmapMaterial(i,P)):b.Kd&&(m=255*b.Kd[0],_=255*b.Kd[1],y=255*b.Kd[2],w=new ColorMaterial(i,convertRgbToHex(m,_,y))),w&&(b.map_Ns&&(T[b.map_Ns]?P=T[b.map_Ns]:(P=new BitmapTexture(i,b.map_Ns),T[b.map_Ns]=P),w.specularTexture=P),b.map_bump&&(T[b.map_bump]?P=T[b.map_bump]:(P=new BitmapTexture(i,b.map_bump),T[b.map_bump]=P),w.normalTexture=P),void 0!==b.Ns&&(w.shininess=b.Ns),q.material=w))}}})(g,_,b),m.callback&&m.callback(m.result))}),m.mtlLoader=b}function processMaterialUsage(i,m,g){m[g].materialKey=i.split(" ").slice(1).join("").trim()}function processGroup(i,m,g,_){const b=i.split(" ").slice(1).join("").trim();m[g].use=!1;const y=new MeshInfo_OBJ(b,g);y.groupName=g,y.materialKey=b.replace(`${g}_`,""),y.position=cs.position,_[b]=cs=y,m[g].childrenInfo[b]=cs}function processNewObject(i,m,g){const _=i.split(" ").slice(1).join("").trim(),b=new MeshInfo_OBJ(_,_);b.groupName=_,b.materialKey=_,m[_]=cs=b,g[_]=cs,hs=_}function processVertexNormals(i,m,g){const _=i.split(" ");m.push(+_[1],+_[2],+_[3]),g[g.length]=[+_[1],+_[2],+_[3]]}function processTextureCoordinates(i,m,g){const _=i.split(" ");m.push(+_[1],1-_[2]),g[g.length]=[+_[1],1-_[2]]}function processVertex(i,m,g){const _=i.split(" ");m.push(+_[1],+_[2],+_[3]),cs.position.push(+_[1],+_[2],+_[3]),g[g.length]=[+_[1],+_[2],+_[3]]}function processFaceVertexNormal(i,m,g,_,b){const y=3*(m.length+g.length);i.split(" ").slice(1,4).forEach(i=>{const[m,,g]=i.split("/").map(i=>Number(i)-1),T=_[m],w=b[g],{index:P,resultInterleave:$}=cs,{resultPosition:H,resultNormal:q,resultUV:W}=cs;P.push($.length/y),H.push(...T),q.push(...w),$.push(...T,...w)})}function processFaceVertexTextureNormal(i,m,g,_,b,y,T){let w=i.split(" ").slice(1,5);if(4===w.length){let i=w[3];w[3]=w[0],w[4]=w[2],w[5]=i}w.forEach(i=>{const[w,P,$]=i.split("/").map(Number).map(i=>i-1),H=b[w],q=T[P],W=y[$],ye=(m.length?3:0)+(g.length?3:0)+(_.length?2:0),{index:Ge,resultInterleave:Ke}=cs,{resultPosition:Xe,resultNormal:je,resultUV:Ye}=cs;Ge.push(Ke.length/ye),m.length&&(Xe.push(...H),Ke.push(...H)),g.length&&(je.push(...W),Ke.push(...W)),_.length&&(Ye.push(...q),Ke.push(...q))})}function processFaceVertexTexture(i,m,g,_,b){i.split(" ").slice(1,4).forEach(i=>{const[y,T]=i.split("/").map(Number).map(i=>i-1),w=_[y];let P;0!==b.length&&(P=b[T]);const $=(m.length?3:0)+(g.length?2:0);cs.index.push(cs.resultInterleave.length/$),m.length&&(cs.resultPosition.push(...w),cs.resultInterleave.push(...w)),g.length&&(cs.resultUV.push(...P),cs.resultInterleave.push(...P))})}function processFaceVertex(i,m){let g=i.split(" ");cs.resultInterleave=cs.resultPosition=cs.position,cs.index.push(+g[1]-1,+g[2]-1,+g[3]-1),cs.index.push(+g[1]-1,+g[3]-1,+g[4]-1)}const parserMesh_OBJ=(i,m,g)=>{for(let _ in g){const b=g[_];let y;if(b.use){const m=b.createVertexBuffer(i,_),g=b.createBufferIndex(i,_),T=b.createColorMaterial(i);y=new Mesh(i,new Geometry(i,m,g),T),b.ableUV=Boolean(b.resultUV.length),b.ableNormal=Boolean(b.resultNormal.length),b.ableLight=b.ableUV&&b.ableNormal}else y=new Mesh(i);y.name=_,b.mesh=y,m.addChild(y),parserMesh_OBJ(i,y,b.childrenInfo)}},parserOBJ=(i,m,g)=>{const _=((i,m,g)=>{let _,b;const y=new TotalPointInfo_OBJ,{points:T,normalPoints:w,uvPoints:P}=y,{position:$,normal:H,uv:q}=y;let W,ye;b={},_={};const Ge=g.length;for(W=0;W<Ge;W++)if(is.test(g[W])){ye=!0;break}if(!ye){const i="objModel"+createUUID();b[i]=cs=new MeshInfo_OBJ(i,i),_[i]=cs,hs=i}const Ke=g.length;for(let y=0;y<Ke;y++){const W=g[y];W.startsWith("mtllib ")?processMaterialLibrary(W,m,i,_,void 0):W.startsWith("usemtl ")?processMaterialUsage(W,_,hs):W.startsWith("g ")?processGroup(W,b,hs,_):W.startsWith("o ")?processNewObject(W,b,_):W.startsWith("vn ")?processVertexNormals(W,H,w):W.startsWith("vt ")?processTextureCoordinates(W,q,P):as.test(W)?processVertex(W,$,T):ls.test(W)?processFaceVertexNormal(W,$,H,T,w):us.test(W)?processFaceVertexTextureNormal(W,$,H,q,T,w,P):os.test(W)?processFaceVertexTexture(W,$,q,T,P):ss.test(W)&&processFaceVertex(W)}return{info:_,infoHierarchy:b}})(i,m,(g=g.replace(/^\#[\s\S]+?\n/g,"")).split("\n")),b=_.infoHierarchy;return parserMesh_OBJ(i,m.resultMesh,b),{...m,..._,parseInfoMaterial:m.mtlLoader}};class OBJLoader{modelParsingComplete=!1;resultMesh;result;callback;mtlLoader;#hc;#fc;#dc;constructor(i,m,g){validateRedGPUContext(i),m&&(fetch(m).then(i=>i.text()).then(m=>{this.result=parserOBJ(i,this,m),this.modelParsingComplete=!0,this.resultMesh=m,g&&(this.mtlLoader?this.mtlLoader.complete&&g(this.result):g(this.result))}).catch(i=>console.error("Error:",i)),this.#hc=getFilePath(m),this.#fc=getFileName(m),this.#dc=m,this.mtlLoader=null,this.callback=g,this.resultMesh=new Mesh(i),this.resultMesh.name="instanceOfOBJLoader_"+createUUID(),this.result=null)}get path(){return this.#hc}get fileName(){return this.#fc}get url(){return this.#dc}}Object.freeze(OBJLoader);class AMultiPassPostEffect extends ASinglePassPostEffect{#pc=[];constructor(i,m){super(i),this.#pc.push(...m)}get passList(){return this.#pc}clear(){this.#pc.forEach(i=>i.clear())}render(i,m,g,_){let b;return this.#pc.forEach((y,T)=>{T&&(_=b),b=y.render(i,m,g,_)}),b}}Object.freeze(AMultiPassPostEffect);class BrightnessContrast extends ASinglePassPostEffect{#gc=0;#xc=0;constructor(i){super(i);this.init(i,"POST_EFFECT_BRIGHTNESS_CONTRAST",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var color:vec4<f32>=textureLoad(sourceTexture,index,);let brightness_value:f32=uniforms.brightness/255.0;let contrast_value:f32=uniforms.contrast/255.0;var tempColor:vec3<f32>;if ( contrast_value > 0.0 ) {tempColor=( color.rgb - 0.5 )/( 1.0 - contrast_value ) + 0.5;}else {tempColor=( color.rgb - 0.5 ) * ( 1.0 + contrast_value ) + 0.5;}color=vec4<f32>(tempColor + brightness_value,color.a);textureStore(outputTexture,index,color );","struct Uniforms {brightness:f32,contrast:f32};"))}get brightness(){return this.#gc}set brightness(i){validateNumberRange(i,-150,150),this.#gc=i,this.updateUniform("brightness",i)}get contrast(){return this.#xc}set contrast(i){validateNumberRange(i,-50,100),this.#xc=i,this.updateUniform("contrast",i)}}Object.freeze(BrightnessContrast);class ColorBalance extends ASinglePassPostEffect{#_c=0;#vc=0;#bc=0;#yc=0;#Tc=0;#Sc=0;#wc=0;#Mc=0;#Rc=0;#Pc=!0;constructor(i){super(i);this.init(i,"POST_EFFECT_COLOR_BALANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var color:vec4<f32>=textureLoad( sourceTexture,index,);let original_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;let shadow_weight=1.0 - smoothstep(0.0,0.5,original_luminance);let highlight_weight=smoothstep(0.5,1.0,original_luminance); let midtone_weight=1.0 - shadow_weight - highlight_weight;let cyan_red=shadow_weight * uniforms.shadowCyanRed + midtone_weight * uniforms.midtoneCyanRed + highlight_weight * uniforms.highlightCyanRed;let magenta_green=shadow_weight * uniforms.shadowMagentaGreen + midtone_weight * uniforms.midtoneMagentaGreen + highlight_weight * uniforms.highlightMagentaGreen;let yellow_blue=shadow_weight * uniforms.shadowYellowBlue + midtone_weight * uniforms.midtoneYellowBlue + highlight_weight * uniforms.highlightYellowBlue;color.r +=cyan_red * 0.01; color.g +=magenta_green * 0.01;color.b +=yellow_blue * 0.01; let adjusted_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;if (uniforms.preserveLuminosity==1 && adjusted_luminance > 0.0) {let ratio=original_luminance/adjusted_luminance;color=color * ratio;}textureStore(outputTexture,index,color );","struct Uniforms {shadowCyanRed:f32,shadowMagentaGreen:f32,shadowYellowBlue:f32,midtoneCyanRed:f32,midtoneMagentaGreen:f32,midtoneYellowBlue:f32,highlightCyanRed:f32,highlightMagentaGreen:f32,highlightYellowBlue:f32,preserveLuminosity:u32};"))}get shadowCyanRed(){return this.#_c}set shadowCyanRed(i){validateNumberRange(i,-100,100),this.#_c=i,this.updateUniform("shadowCyanRed",i)}get shadowMagentaGreen(){return this.#vc}set shadowMagentaGreen(i){validateNumberRange(i,-100,100),this.#vc=i,this.updateUniform("shadowMagentaGreen",i)}get shadowYellowBlue(){return this.#bc}set shadowYellowBlue(i){validateNumberRange(i,-100,100),this.#bc=i,this.updateUniform("shadowYellowBlue",i)}get midtoneCyanRed(){return this.#yc}set midtoneCyanRed(i){validateNumberRange(i,-100,100),this.#yc=i,this.updateUniform("midtoneCyanRed",i)}get midtoneMagentaGreen(){return this.#Tc}set midtoneMagentaGreen(i){validateNumberRange(i,-100,100),this.#Tc=i,this.updateUniform("midtoneMagentaGreen",i)}get midtoneYellowBlue(){return this.#Sc}set midtoneYellowBlue(i){validateNumberRange(i,-100,100),this.#Sc=i,this.updateUniform("midtoneYellowBlue",i)}get highlightCyanRed(){return this.#wc}set highlightCyanRed(i){validateNumberRange(i,-100,100),this.#wc=i,this.updateUniform("highlightCyanRed",i)}get highlightMagentaGreen(){return this.#Mc}set highlightMagentaGreen(i){validateNumberRange(i,-100,100),this.#Mc=i,this.updateUniform("highlightMagentaGreen",i)}get highlightYellowBlue(){return this.#Rc}set highlightYellowBlue(i){validateNumberRange(i,-100,100),this.#Rc=i,this.updateUniform("highlightYellowBlue",i)}get preserveLuminosity(){return this.#Pc}set preserveLuminosity(i){this.#Pc=i,this.updateUniform("preserveLuminosity",i)}}Object.freeze(ColorBalance);class ColorTemperatureTint extends ASinglePassPostEffect{#Cc=6500;#Ic=0;#Ec=100;constructor(i){super(i);this.init(i,"POST_EFFECT_COLOR_TEMPERATURE_TINT",createBasicPostEffectCode(this,"\n\t let index=vec2<u32>(global_id.xy);\n\t let dimensions:vec2<u32>=textureDimensions(sourceTexture);\n\t let dimW=f32(dimensions.x);\n\t let dimH=f32(dimensions.y);\n\t let uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\n\t var color:vec4<f32>=textureLoad(sourceTexture,index);\n\t \n\t let temp=uniforms.temperature;\n\t var tempRGB:vec3<f32>;\n\t \n\t \n\t if (temp <=6600.0) {\n\t tempRGB.r=1.0;\n\t } else {\n\t let t=temp - 6600.0;\n\t tempRGB.r=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n\t }\n\t \n\t \n\t if (temp <=6600.0) {\n\t let t=temp;\n\t tempRGB.g=clamp(0.39008157 * log(t) - 0.63184144,0.0,1.0);\n\t } else {\n\t let t=temp - 6600.0;\n\t tempRGB.g=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n\t }\n\t \n\t \n\t if (temp >=6600.0) {\n\t tempRGB.b=1.0;\n\t } else if (temp <=1900.0) {\n\t tempRGB.b=0.0;\n\t } else {\n\t let t=temp - 1000.0;\n\t tempRGB.b=clamp(0.543206789 * log(t) - 1.19625408,0.0,1.0);\n\t }\n\t \n\t \n\t let neutralTemp:vec3<f32>=vec3<f32>(1.0,1.0,1.0);\n\t let tempAdjust:vec3<f32>=tempRGB/neutralTemp;\n\t \n\t \n\t let tintValue=uniforms.tint * 0.01;\n\t var tintRGB:vec3<f32>;\n\t if (tintValue >=0.0) {\n\t \n\t tintRGB=vec3<f32>(1.0 - tintValue * 0.2,1.0,1.0 - tintValue * 0.2);\n\t } else {\n\t \n\t let mag=-tintValue;\n\t tintRGB=vec3<f32>(1.0,1.0 - mag * 0.2,1.0);\n\t }\n\t \n\t let colorAdjust=tempAdjust * tintRGB;\n\t \n\t let strength=uniforms.strength * 0.01;\n\t let finalAdjust=mix(vec3<f32>(1.0,1.0,1.0),colorAdjust,strength);\n\t \n\t color=vec4<f32>(color.rgb * finalAdjust,color.a);\n\t \n\t color=vec4<f32>(clamp(color.rgb,vec3<f32>(0.0),vec3<f32>(1.0)),color.a);\n\t \n\t textureStore(outputTexture,index,color);","\n\t struct Uniforms {\n\t temperature:f32,\n\t tint:f32,\n\t strength:f32\n\t };")),this.strength=this.#Ec,this.tint=this.#Ic,this.temperature=this.#Cc}get temperature(){return this.#Cc}set temperature(i){validateNumberRange(i,1e3,2e4),this.#Cc=i,this.updateUniform("temperature",i)}get tint(){return this.#Ic}set tint(i){validateNumberRange(i,-100,100),this.#Ic=i,this.updateUniform("tint",i)}get strength(){return this.#Ec}set strength(i){validateNumberRange(i,0,100),this.#Ec=i,this.updateUniform("strength",i)}setWarmTone(){this.temperature=3200,this.tint=-10}setCoolTone(){this.temperature=8e3,this.tint=10}setNeutral(){this.temperature=6500,this.tint=0}setCandleLight(){this.temperature=1900,this.tint=-5}setDaylight(){this.temperature=5600,this.tint=0}setCloudyDay(){this.temperature=7500,this.tint=5}setNeonLight(){this.temperature=9e3,this.tint=15}}Object.freeze(ColorTemperatureTint);class Grayscale extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_GRAYSCALE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var color:vec4<f32>=textureLoad( sourceTexture,index,);let gray=(color.r + color.g + color.b)/3.0;/* 주석테스트 */textureStore(outputTexture,index,vec4<f32>( gray,gray,gray,1.0) );",""))}}Object.freeze(Grayscale);class HueSaturation extends ASinglePassPostEffect{#Lc=0;#Bc=0;constructor(i){super(i);this.init(i,"POST_EFFECT_HUE_SATURATION",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var color:vec4<f32>=textureLoad( sourceTexture,index,);let hue_value:f32=uniforms.hue/180.0;let saturation_value:f32=uniforms.saturation/100.0;let angle:f32=hue_value * 3.1415926535897932384626433832795;let s:f32=sin(angle);let c:f32=cos(angle);var weights:vec3<f32>=(vec3<f32>(2.0 * c,-sqrt(3.0) * s - c,sqrt(3.0) * s - c) + 1.0)/3.0;let len:f32=length(color.rgb);color=vec4<f32>(vec3<f32>(dot(color.rgb,weights.xyz),dot(color.rgb,weights.zxy),dot(color.rgb,weights.yzx)),color.a);let average:f32=(color.r + color.g + color.b)/3.0;if (saturation_value > 0.0) {color=vec4<f32>(color.rgb + (average - color.rgb) * (1.0 - 1.0/(1.001 - saturation_value)),color.a);} else {color=vec4<f32>(color.rgb + (average - color.rgb) * (-saturation_value),color.a);}textureStore(outputTexture,index,color );","struct Uniforms {hue:f32,saturation:f32};"))}get hue(){return this.#Lc}set hue(i){validateNumberRange(i,-180,180),this.#Lc=i,this.updateUniform("hue",i)}get saturation(){return this.#Bc}set saturation(i){validateNumberRange(i,-100,100),this.#Bc=i,this.updateUniform("saturation",i)}}Object.freeze(HueSaturation);class Invert extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_INVERT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var color:vec4<f32>=textureLoad( sourceTexture,index,);color.r=1.0 - color.r;color.g=1.0 - color.g;color.b=1.0 - color.b;textureStore(outputTexture,index,color );",""))}}Object.freeze(Invert);class Threshold extends ASinglePassPostEffect{#Uc=128;constructor(i){super(i);this.init(i,"POST_EFFECT_THRESHOLD",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);var color:vec4<f32>=textureLoad( sourceTexture,index,);let threshold_value:f32=uniforms.threshold/255.0;var v=0.0;if( 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b >=threshold_value) {v=1.0;}color=vec4<f32>(v,v,v,color.a);textureStore(outputTexture,index,color );","struct Uniforms {threshold:f32};")),this.threshold=this.#Uc}get threshold(){return this.#Uc}set threshold(i){validateNumberRange(i,1,255),this.#Uc=i,this.updateUniform("threshold",i)}}Object.freeze(Threshold);class Vibrance extends ASinglePassPostEffect{#Dc=0;#Bc=0;constructor(i){super(i);this.init(i,"POST_EFFECT_VIBRANCE",createBasicPostEffectCode(this,"\n\t let index=vec2<u32>(global_id.xy);\n\t let dimensions:vec2<u32>=textureDimensions(sourceTexture);\n\t let dimW=f32(dimensions.x);\n\t let dimH=f32(dimensions.y);\n\t let uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\n\t var color:vec4<f32>=textureLoad(sourceTexture,index);\n\t \n\t let originalColor=color;\n\t let luminance=0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n\t \n\t if (uniforms.saturation !=0.0) {\n\t let saturationFactor=1.0 + uniforms.saturation * 0.01;\n\t color=vec4<f32>(\n\t mix(luminance,color.r,saturationFactor),\n\t mix(luminance,color.g,saturationFactor),\n\t mix(luminance,color.b,saturationFactor),\n\t color.a\n\t );\n\t }\n\t \n\t if (uniforms.vibrance !=0.0) {\n\t \n\t let maxComponent=max(max(color.r,color.g),color.b);\n\t let minComponent=min(min(color.r,color.g),color.b);\n\t let currentSaturation=maxComponent - minComponent;\n\t \n\t \n\t let protectionFactor=1.0/(1.0 + exp(6.0 * (currentSaturation - 0.6)));\n\t \n\t \n\t var skinToneProtection=1.0;\n\t if (color.r > color.g && color.g > color.b) {\n\t let skinToneAmount=(color.r - color.b)/max(color.r,0.001);\n\t skinToneProtection=1.0 - smoothstep(0.3,0.8,skinToneAmount) * 0.7;\n\t }\n\t \n\t \n\t let finalProtection=protectionFactor * skinToneProtection;\n\t \n\t \n\t let vibranceStrength=uniforms.vibrance * 0.01 * finalProtection;\n\t let vibranceFactor=1.0 + vibranceStrength;\n\t \n\t \n\t color=vec4<f32>(\n\t mix(luminance,color.r,vibranceFactor),\n\t mix(luminance,color.g,vibranceFactor),\n\t mix(luminance,color.b,vibranceFactor),\n\t color.a\n\t );\n\t }\n\t \n\t \n\t color=clamp(color,vec4<f32>(0.0),vec4<f32>(1.0));\n\t \n\t textureStore(outputTexture,index,color);","\n\t struct Uniforms {\n\t vibrance:f32,\n\t saturation:f32\n\t };"))}get vibrance(){return this.#Dc}set vibrance(i){validateNumberRange(i,-100,100),this.#Dc=i,this.updateUniform("vibrance",i)}get saturation(){return this.#Bc}set saturation(i){validateNumberRange(i,-100,100),this.#Bc=i,this.updateUniform("saturation",i)}}Object.freeze(Vibrance);const fs=[0,0,0,0,0,1,0,0,0,0,0,0],ds=[0,-1,0,0,-1,5,-1,0,0,-1,0,0],ms=[1,1,1,0,1,1,1,0,1,1,1,0],ps=[0,1,0,0,1,-4,1,0,0,1,0,0],gs=[-2,-1,0,0,-1,1,1,0,0,1,2,0];class Convolution extends ASinglePassPostEffect{static NORMAL=fs;static SHARPEN=ds;static BLUR=ms;static EDGE=ps;static EMBOSE=gs;#Ac=ms;constructor(i){super(i);this.init(i,"POST_EFFECT_CONVOLUTION",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let perPX=\tvec2<f32>(1.0/dimW,1.0/dimH);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var color:vec4<f32>=vec4<f32>(0.0);let kernelWeight_value:f32=uniforms.kernelWeight;let kernel_value:mat3x3<f32>=uniforms.kernel;color +=textureLoad(sourceTexture,index + vec2<i32>(-1,-1)) * kernel_value[0][0] ;color +=textureLoad(sourceTexture,index + vec2<i32>(0,-1)) * kernel_value[0][1];color +=textureLoad(sourceTexture,index + vec2<i32>(1,-1)) * kernel_value[0][2];color +=textureLoad(sourceTexture,index + vec2<i32>(-1,0)) * kernel_value[1][0];color +=textureLoad(sourceTexture,index + vec2<i32>(0,0)) * kernel_value[1][1];color +=textureLoad(sourceTexture,index + vec2<i32>(1,0)) * kernel_value[1][2];color +=textureLoad(sourceTexture,index + vec2<i32>(-1,1)) * kernel_value[2][0];color +=textureLoad(sourceTexture,index + vec2<i32>(0,1)) * kernel_value[2][1];color +=textureLoad(sourceTexture,index + vec2<i32>(1,1)) * kernel_value[2][2];textureStore(outputTexture,index,vec4<f32>((color/kernelWeight_value).rgb,1.0) );","struct Uniforms {kernelWeight:f32,kernel:mat3x3<f32>};")),this.kernel=this.#Ac}get kernel(){return this.#Ac}set kernel(i){this.#Ac=i;let m=0;for(const i in this.#Ac)m+=this.#Ac[i];this.updateUniform("kernelWeight",m),this.updateUniform("kernel",i)}}Object.freeze(Convolution);class Blur extends AMultiPassPostEffect{#kc;constructor(i){super(i,[new Convolution(i)]),this.#kc=this.passList[0],this.#kc.kernel=Convolution.BLUR}render(i,m,g,_){return this.#kc.render(i,m,g,_)}}Object.freeze(Blur);class BlurX extends ASinglePassPostEffect{#R=32;constructor(i){super(i);this.init(i,"POST_EFFECT_BLUR_X",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);let dimensions=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let size_value:f32=uniforms.size;var sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);var offset=random(global_id,0.0);var total=0.0;let loopSize=10.0;for (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=(t + offset - 0.5)/loopSize;var weight=1.0 - abs(percent);var ix=clamp((f32(global_id.x) + f32(size_value * percent)),0.0,dimW - 1.0);let delta=vec2<i32>(i32(ix),i32(global_id.y));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;}sum/=total;textureStore(outputTexture,vec2<i32>(global_id.xy),sum);","struct Uniforms {size:f32,};fn random(id:vec3<u32>,delta:f32) -> f32 {let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);}")),this.size=this.#R}get size(){return this.#R}set size(i){validateNumberRange(i),this.#R=i,this.updateUniform("size",i)}}Object.freeze(BlurX);class BlurY extends ASinglePassPostEffect{#R=32;constructor(i){super(i);this.init(i,"POST_EFFECT_BLUR_Y",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);let dimensions=textureDimensions(sourceTexture);let dimH=f32(dimensions.y);let size_value:f32=uniforms.size;var sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);var offset=random(global_id,0.0);var total=0.0;let loopSize=10.0;for (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=(t + offset - 0.5)/loopSize;var weight=1.0 - abs(percent);var iy=clamp((f32(global_id.y) + f32(size_value * percent)),0.0,dimH - 1.0);let delta=vec2<i32>(i32(global_id.x),i32(iy));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;}sum/=total;textureStore(outputTexture,vec2<i32>(global_id.xy),sum);","struct Uniforms {size:f32,};fn random(id:vec3<u32>,delta:f32) -> f32 {let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);}")),this.size=this.#R}get size(){return this.#R}set size(i){validateNumberRange(i),this.#R=i,this.updateUniform("size",i)}}Object.freeze(BlurY);class DirectionalBlur extends ASinglePassPostEffect{#Oc=15;#Nc=0;constructor(i){super(i);this.init(i,"POST_EFFECT_DIRECTIONAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let direction=vec2<f32>(uniforms.directionX,uniforms.directionY);let dirLength=length(direction);let normalizedDir=select(vec2<f32>(0.0),direction/dirLength,dirLength > 0.0);let dir=normalizedDir * uniforms.amount;const loopSize=30.0;let offset=random(global_id,0.0);let global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));var sum=vec4<f32>(0.0,0.0,0.0,0.0);var total=0.0;for (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=1.0 - (t + offset - 0.5)/loopSize;var weight=3.0 * (percent - percent * percent);let deltaPercent=dir * percent;let delta=vec2<i32>(i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)),i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;}textureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);","\n\t struct Uniforms {\n\t amount:f32,\n\t directionX:f32,\n\t directionY:f32\n\t };\n\t fn random(id:vec3<u32>,delta:f32) -> f32 {\n\t let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);\n\t let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));\n\t return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n\t }")),this.amount=this.#Oc,this.angle=this.#Nc}get angle(){return this.#Nc}set angle(i){validateNumber(i),this.#Nc=i%360,this.#Fc()}get amount(){return this.#Oc}set amount(i){validateNumberRange(i,0),this.#Oc=i,this.updateUniform("amount",i)}#Fc(){const i=this.#Nc*Math.PI/180,m=Math.cos(i),g=Math.sin(i);this.updateUniform("directionX",m),this.updateUniform("directionY",g)}}Object.freeze(DirectionalBlur);class GaussianBlur extends AMultiPassPostEffect{#R=32;constructor(i){super(i,[new BlurX(i),new BlurY(i)])}get size(){return this.#R}set size(i){this.#R=i,this.passList.forEach(m=>m.size=i)}}Object.freeze(GaussianBlur);class RadialBlur extends ASinglePassPostEffect{#Oc=50;#_r=0;#vr=0;#Gc=16;constructor(i){super(i);this.init(i,"POST_EFFECT_RADIAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);let global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));let toPixel=global_id_vec - center;let distance=length(toPixel);let angle=atan2(toPixel.y,toPixel.x);let maxDist=min(dimW,dimH) * 0.5;let normalizedDistance=distance/maxDist;let rotationAngle=uniforms.amount * normalizedDistance * 0.001;let sampleCount=i32(uniforms.sampleCount);var sum=vec4<f32>(0.0,0.0,0.0,0.0);var totalWeight=0.0;for (var i=0;i < sampleCount;i=i + 1) {let t=f32(i)/f32(sampleCount - 1);let sampleAngle=angle + (t - 0.5) * rotationAngle;let samplePos=center + vec2<f32>(cos(sampleAngle) * distance,sin(sampleAngle) * distance);var weight=1.0 - abs(t - 0.5) * 1.5;weight=max(weight,0.1);let sampleCoord=vec2<i32>(i32(clamp(samplePos.x,0.0,dimW - 1.0)),i32(clamp(samplePos.y,0.0,dimH - 1.0)));sum +=textureLoad(sourceTexture,sampleCoord).xyzw * weight;totalWeight +=weight;}let centerFalloff=smoothstep(0.0,maxDist * 0.2,distance);let originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).xyzw;let blurredColor=sum/totalWeight;let finalColor=mix(originalColor,blurredColor,centerFalloff);textureStore(outputTexture,vec2<i32>(global_id.xy),finalColor);","struct Uniforms {amount:f32,centerX:f32,centerY:f32,sampleCount:f32};")),this.amount=this.#Oc,this.sampleCount=this.#Gc}get centerX(){return this.#_r}set centerX(i){validateNumber(i),this.#_r=i,this.updateUniform("centerX",i)}get centerY(){return this.#vr}set centerY(i){validateNumber(i),this.#vr=i,this.updateUniform("centerY",i)}get amount(){return this.#Oc}set amount(i){validateNumberRange(i,0),this.#Oc=i,this.updateUniform("amount",i)}get sampleCount(){return this.#Gc}set sampleCount(i){validateNumberRange(i,4),this.#Gc=i,this.updateUniform("sampleCount",i)}}Object.freeze(RadialBlur);class ZoomBlur extends ASinglePassPostEffect{#Oc=128;#_r=0;#vr=0;constructor(i){super(i);this.init(i,"POST_EFFECT_ZOOM_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let dimensionsVec=vec2<f32>(dimW,dimH);let amount=uniforms.amount/min(dimW,dimH);const loopSize=30.0;let offset=random(global_id,0.0);let center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);let global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));let dir=(center - global_id_vec) * amount;var sum=vec4<f32>(0.0,0.0,0.0,0.0);var total=0.0;for (var t=-loopSize;t <=loopSize;t=t + 1.0) {var percent=1.0 - (t + offset - 0.5)/loopSize;var weight=3.0 * (percent - percent * percent);let deltaPercent=dir * percent;let delta=vec2<i32>(i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)),i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)));sum +=textureLoad(sourceTexture,delta).xyzw * weight;total +=weight;}textureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);","struct Uniforms {amount:f32,centerX:f32,centerY:f32};fn random(id:vec3<u32>,delta:f32) -> f32 {let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362);let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16));return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);}")),this.amount=this.#Oc}get centerX(){return this.#_r}set centerX(i){validateNumber(i),this.#_r=i,this.updateUniform("centerX",i)}get centerY(){return this.#vr}set centerY(i){validateNumber(i),this.#vr=i,this.updateUniform("centerY",i)}get amount(){return this.#Oc}set amount(i){validateNumberRange(i,0),this.#Oc=i,this.updateUniform("amount",i)}}Object.freeze(ZoomBlur);const xs={filmGrainIntensity:.02,filmGrainResponse:.9,filmGrainScale:2.5,coloredGrain:.3,grainSaturation:.4},_s={filmGrainIntensity:.05,filmGrainResponse:.8,filmGrainScale:3,coloredGrain:.5,grainSaturation:.6},vs={filmGrainIntensity:.12,filmGrainResponse:.6,filmGrainScale:4,coloredGrain:.7,grainSaturation:.8},bs={filmGrainIntensity:.08,filmGrainResponse:.7,filmGrainScale:5,coloredGrain:.9,grainSaturation:1};class FilmGrain extends ASinglePassPostEffect{static SUBTLE=xs;static MEDIUM=_s;static HEAVY=vs;static VINTAGE=bs;#Vc=vs.filmGrainIntensity;#$c=vs.filmGrainResponse;#Hc=vs.filmGrainScale;#zc=vs.coloredGrain;#Kc=vs.grainSaturation;#ol=0;#qc=1;constructor(i){super(i),this.#qc=window?.devicePixelRatio||1;this.init(i,"POST_EFFECT_FILM_GRAIN",createBasicPostEffectCode(this,"\n\t let index=vec2<i32>(global_id.xy);\n\t let dimensions:vec2<u32>=textureDimensions(sourceTexture);\n\t let dimW=f32(dimensions.x);\n\t let dimH=f32(dimensions.y);\n\t let uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\n\t \n\t let originalColor=textureLoad(sourceTexture,index);\n\t \n\t let filmGrainIntensity_value:f32=uniforms.filmGrainIntensity;\n\t let filmGrainResponse_value:f32=uniforms.filmGrainResponse;\n\t let filmGrainScale_value:f32=uniforms.filmGrainScale;\n\t let coloredGrain_value:f32=uniforms.coloredGrain;\n\t let grainSaturation_value:f32=uniforms.grainSaturation;\n\t let time_value:f32=uniforms.time;\n\t let devicePixelRatio_value:f32=uniforms.devicePixelRatio;\n\t \n\t if (filmGrainIntensity_value <=0.0) {\n\t textureStore(outputTexture,index,originalColor);\n\t return;\n\t }\n\t \n\t let baseScale=max(filmGrainScale_value,0.1);\n\t let scaledUV=uv * vec2<f32>(dimW,dimH) * devicePixelRatio_value/baseScale;\n\t \n\t let timeOffset=vec2<f32>(\n\t fract(time_value * 0.0317) * 100.0,\n\t fract(time_value * 0.0271) * 100.0\n\t );\n\t let grainCoord=scaledUV + timeOffset;\n\t \n\t let sampleOffset=1.0/baseScale;\n\t let noiseR=(filmGrainNoise(grainCoord) + \n\t filmGrainNoise(grainCoord + vec2<f32>(sampleOffset,0.0)) +\n\t filmGrainNoise(grainCoord + vec2<f32>(0.0,sampleOffset)))/3.0;\n\t let noiseG=filmGrainNoise(grainCoord + vec2<f32>(127.1,311.7));\n\t let noiseB=filmGrainNoise(grainCoord + vec2<f32>(269.5,183.3));\n\t \n\t let monoGrain=(noiseR + noiseG + noiseB)/3.0;\n\t let colorGrain=vec3<f32>(noiseR,noiseG,noiseB);\n\t \n\t var grainColor=mix(vec3<f32>(monoGrain),colorGrain,coloredGrain_value);\n\t \n\t let grainLuminance=dot(grainColor,vec3<f32>(0.299,0.587,0.114));\n\t grainColor=mix(vec3<f32>(grainLuminance),grainColor,grainSaturation_value);\n\t \n\t let luminance=dot(originalColor.rgb,vec3<f32>(0.299,0.587,0.114));\n\t let luminanceWeight=pow(max(luminance,0.01),filmGrainResponse_value);\n\t \n\t let grainIntensity=filmGrainIntensity_value * luminanceWeight;\n\t let grain=grainColor * grainIntensity;\n\t \n\t let finalColor=originalColor.rgb + grain;\n\t \n\t let outputColor=vec4<f32>(clamp(finalColor,vec3<f32>(0.0),vec3<f32>(1.0)),originalColor.a);\n\t \n\t textureStore(outputTexture,index,outputColor);","struct Uniforms {filmGrainIntensity:f32,filmGrainResponse:f32,filmGrainScale:f32,coloredGrain:f32,grainSaturation:f32,time:f32,devicePixelRatio:f32};fn filmGrainNoise(coord:vec2<f32>) -> f32 {let p=floor(coord);let f=fract(coord);let u=f * f * f * (f * (f * 6.0 - 15.0) + 10.0);let a=hash(p);let b=hash(p + vec2<f32>(1.0,0.0));let c=hash(p + vec2<f32>(0.0,1.0));let d=hash(p + vec2<f32>(1.0,1.0));let noise=mix(mix(a,b,u.x),mix(c,d,u.x),u.y);return (noise - 0.5) * 2.0;}fn hash(p:vec2<f32>) -> f32 {var p3=fract(vec3<f32>(p.xyx) * 0.1031);p3 +=dot(p3,p3.yzx + 33.33);return fract((p3.x + p3.y) * p3.z);}")),this.#Wc()}get filmGrainIntensity(){return this.#Vc}set filmGrainIntensity(i){this.#Vc=Math.max(0,Math.min(1,i)),this.updateUniform("filmGrainIntensity",this.#Vc)}get filmGrainResponse(){return this.#$c}set filmGrainResponse(i){this.#$c=Math.max(0,Math.min(2,i)),this.updateUniform("filmGrainResponse",this.#$c)}get filmGrainScale(){return this.#Hc}set filmGrainScale(i){this.#Hc=Math.max(.1,Math.min(20,i)),this.updateUniform("filmGrainScale",this.#Hc)}get coloredGrain(){return this.#zc}set coloredGrain(i){this.#zc=Math.max(0,Math.min(1,i)),this.updateUniform("coloredGrain",this.#zc)}get grainSaturation(){return this.#Kc}set grainSaturation(i){this.#Kc=Math.max(0,Math.min(2,i)),this.updateUniform("grainSaturation",this.#Kc)}applyPreset(i){this.#Vc=i.filmGrainIntensity,this.#$c=i.filmGrainResponse,this.#Hc=i.filmGrainScale,this.#zc=i.coloredGrain,this.#Kc=i.grainSaturation,this.#Wc()}update(i){this.#ol+=i,this.updateUniform("time",this.#ol)}#Wc(){this.updateUniform("filmGrainIntensity",this.#Vc),this.updateUniform("filmGrainResponse",this.#$c),this.updateUniform("filmGrainScale",this.#Hc),this.updateUniform("coloredGrain",this.#zc),this.updateUniform("grainSaturation",this.#Kc),this.updateUniform("time",this.#ol),this.updateUniform("devicePixelRatio",this.#qc)}}Object.freeze(FilmGrain);class ChromaticAberration extends ASinglePassPostEffect{#Ec=.015;#_r=.5;#vr=.5;#Xc=1;constructor(i){super(i);this.init(i,"POST_EFFECT_CHROMATIC_ABERRATION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=vec2<f32>(f32(global_id.x),f32(global_id.y))/vec2<f32>(dimW,dimH);let center=vec2<f32>(uniforms.centerX,uniforms.centerY);let offset=uv - center;let distance=length(offset);let distortion=uniforms.strength * pow(distance,uniforms.falloff);let redOffset=uv + offset * distortion * vec2<f32>(-1.0,-1.0);let greenOffset=uv;let blueOffset=uv + offset * distortion * vec2<f32>(1.0,1.0);var finalColor=vec3<f32>(0.0);if (redOffset.x >=0.0 && redOffset.x <=1.0 && redOffset.y >=0.0 && redOffset.y <=1.0) {let redCoord=vec2<i32>(i32(clamp(redOffset.x * dimW,0.0,dimW - 1.0)),i32(clamp(redOffset.y * dimH,0.0,dimH - 1.0)));finalColor.r=textureLoad(sourceTexture,redCoord).r;}let greenCoord=vec2<i32>(i32(clamp(greenOffset.x * dimW,0.0,dimW - 1.0)),i32(clamp(greenOffset.y * dimH,0.0,dimH - 1.0)));finalColor.g=textureLoad(sourceTexture,greenCoord).g;if (blueOffset.x >=0.0 && blueOffset.x <=1.0 && blueOffset.y >=0.0 && blueOffset.y <=1.0) {let blueCoord=vec2<i32>(i32(clamp(blueOffset.x * dimW,0.0,dimW - 1.0)),i32(clamp(blueOffset.y * dimH,0.0,dimH - 1.0)));finalColor.b=textureLoad(sourceTexture,blueCoord).b;}let originalAlpha=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).a;textureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(finalColor,originalAlpha));","struct Uniforms {strength:f32,centerX:f32,centerY:f32,falloff:f32};")),this.strength=this.#Ec,this.centerX=this.#_r,this.centerY=this.#vr,this.falloff=this.#Xc}get strength(){return this.#Ec}set strength(i){validateNumberRange(i,0),this.#Ec=i,this.updateUniform("strength",i)}get centerX(){return this.#_r}set centerX(i){validateNumberRange(i,0,1),this.#_r=i,this.updateUniform("centerX",i)}get centerY(){return this.#vr}set centerY(i){validateNumberRange(i,0,1),this.#vr=i,this.updateUniform("centerY",i)}get falloff(){return this.#Xc}set falloff(i){validateNumberRange(i,0,5),this.#Xc=i,this.updateUniform("falloff",i)}}Object.freeze(ChromaticAberration);class DOFCoC extends ASinglePassPostEffect{#jc=15;#Yc=1.4;#Zc=32;#Jc=.1;#Qc=1e3;constructor(i){super(i),this.useDepthTexture=!0;const m=createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);let coord=vec2<i32>(global_id.xy);let originalColor=textureLoad(sourceTexture,coord).xyzw;let depth=textureLoad(depthTexture,coord,0);let linearDepth=linearizeDepth(depth);let coc=calculateCoC(linearDepth);\n/* CoC를 0~1 범위로 인코딩해서 저장 */let encodedCoC=encodeCoC(coc);textureStore(outputTexture,coord,vec4<f32>(originalColor.rgb,encodedCoC));","struct Uniforms {focusDistance:f32,aperture:f32,maxCoC:f32,nearPlane:f32,farPlane:f32,};fn linearizeDepth(depth:f32) -> f32 {let z=depth * 2.0 - 1.0;return (2.0 * uniforms.nearPlane * uniforms.farPlane)/(uniforms.farPlane + uniforms.nearPlane - z * (uniforms.farPlane - uniforms.nearPlane));}\n/* CoC 값을 0~1 범위로 인코딩 */fn encodeCoC(coc:f32) -> f32 {return (coc + 1.0) * 0.5;}fn calculateCoC(linearDepth:f32) -> f32 {let subjectDistance=linearDepth;let focalLength=50.0;let focusRange=uniforms.focusDistance * 0.15; let transitionRange=uniforms.focusDistance * 0.35;let distanceFromFocus=abs(subjectDistance - uniforms.focusDistance);if (distanceFromFocus < focusRange) {let focusFactor=smoothstep(0.0,focusRange,distanceFromFocus);return mix(0.0,0.02,focusFactor);/* 완전히 0이 아닌 미세한 값 */}var rawCoC:f32;var signedCoC:f32;if (subjectDistance < uniforms.focusDistance) {\n/* Near field 처리 */let nearDistance=uniforms.focusDistance - subjectDistance;let nearFactor=nearDistance/uniforms.focusDistance;rawCoC=(uniforms.aperture * focalLength * nearDistance)/(subjectDistance * (uniforms.focusDistance - focalLength));\n/* Near 필드 강화 (하지만 부드럽게) */rawCoC=rawCoC * (1.0 + nearFactor * 1.5);/* 2.0 → 1.5로 완화 */signedCoC=-(rawCoC/uniforms.maxCoC);\n/* 🎯 부드러운 강화 적용 */let absCoC=abs(signedCoC);if (absCoC > 0.05) {\n/* 급격한 증폭 대신 부드러운 곡선 사용 */signedCoC=-min(1.0,absCoC * smoothstep(0.05,0.3,absCoC) * 1.5);}\n/* 🎯 전환 영역에서 추가 부드러움 */if (distanceFromFocus < transitionRange) {let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus);signedCoC=mix(0.0,signedCoC,transitionFactor);}return clamp(signedCoC,-1.0,0.0);} else {\n/* Far field 처리 */let farDistance=subjectDistance - uniforms.focusDistance;rawCoC=(uniforms.aperture * focalLength * farDistance)/(subjectDistance * (uniforms.focusDistance + focalLength));rawCoC=rawCoC * (1.0 + farDistance * 0.08);/* 0.1 → 0.08로 완화 */signedCoC=rawCoC/uniforms.maxCoC;let absCoC=abs(signedCoC);if (absCoC > 0.1) {signedCoC=min(1.0,absCoC * smoothstep(0.1,0.5,absCoC) * 1.2);}if (distanceFromFocus < transitionRange) {let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus);signedCoC=mix(0.0,signedCoC,transitionFactor);}return clamp(signedCoC,0.0,1.0);}}");this.init(i,"POST_EFFECT_DOF_COC",m),this.focusDistance=this.#jc,this.aperture=this.#Yc,this.maxCoC=this.#Zc,this.nearPlane=this.#Jc,this.farPlane=this.#Qc}get focusDistance(){return this.#jc}set focusDistance(i){validateNumberRange(i),this.#jc=i,this.updateUniform("focusDistance",i)}get aperture(){return this.#Yc}set aperture(i){validateNumberRange(i),this.#Yc=i,this.updateUniform("aperture",i)}get maxCoC(){return this.#Zc}set maxCoC(i){validateNumberRange(i),this.#Zc=i,this.updateUniform("maxCoC",i)}get nearPlane(){return this.#Jc}set nearPlane(i){validateNumberRange(i),this.#Jc=i,this.updateUniform("nearPlane",i)}get farPlane(){return this.#Qc}set farPlane(i){validateNumberRange(i),this.#Qc=i,this.updateUniform("farPlane",i)}}Object.freeze(DOFCoC);class DOFUnified extends ASinglePassPostEffect{#eh=16;#th=24;#rh=1;#nh=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:_}=this,b=`struct Uniforms {nearBlurSize:f32,farBlurSize:f32,nearStrength:f32,farStrength:f32,};@group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>;@group(0) @binding(1) var cocTexture:texture_storage_2d<rgba8unorm,read>;@group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>;@group(1) @binding(1) var<uniform> uniforms:Uniforms;/* CoC 디코딩 함수 */fn decodeCoC(encoded:f32) -> f32 {/* 0~1 범위를 -1~1 범위로 복원 */return encoded * 2.0 - 1.0;}@compute @workgroup_size(${m},${g},${_})fn main (@builtin(global_invocation_id) global_id:vec3<u32>) {let index=vec2<u32>(global_id.xy);let dimensions:vec2<u32>=textureDimensions(sourceTexture);if (index.x >=dimensions.x || index.y >=dimensions.y) {return;}let originalColor=textureLoad(sourceTexture,index).rgb;let encodedCoC=textureLoad(cocTexture,index).a;/* CoC 값 디코딩 */let cocValue=decodeCoC(encodedCoC);/* CoC 임계값 체크 */if (abs(cocValue) < 0.005) {textureStore(outputTexture,index,vec4<f32>(originalColor,1.0));return;}var finalColor=originalColor;/* Near blur 처리 (CoC < 0) */if (cocValue < 0.0) {let nearBlur=calculateBlur(index,abs(cocValue),uniforms.nearBlurSize,true);/* Near strength 블렌딩 개선 - 더 강한 효과 */let nearBlend=saturate(pow(abs(cocValue) * uniforms.nearStrength,0.7));finalColor=mix(originalColor,nearBlur,nearBlend);}/* Far blur 처리 (CoC > 0) */else if (cocValue > 0.0) {let farBlur=calculateBlur(index,cocValue,uniforms.farBlurSize,false);let rawBlend=cocValue * uniforms.farStrength;let farBlend=saturate(smoothstep(0.0,0.8,rawBlend));finalColor=mix(originalColor,farBlur,farBlend);}textureStore(outputTexture,index,vec4<f32>(finalColor,1.0));}fn calculateBlur(center:vec2<u32>,intensity:f32,maxBlurSize:f32,isNear:bool) -> vec3<f32> {let dimensions:vec2<u32>=textureDimensions(sourceTexture);let blurRadius=intensity * maxBlurSize;/* 최소 블러 반경 조정 */if (blurRadius < 0.3) {return textureLoad(sourceTexture,center).rgb;}var sum:vec3<f32>=vec3<f32>(0.0);var totalWeight=0.0;let maxRadius=min(blurRadius,maxBlurSize);/* Near blur에 더 많은 샘플 적용 */let samples=select(8,16,isNear);/* near=16,far=8 */let angleStep=6.28318530718/f32(samples);let originalColor=textureLoad(sourceTexture,center).rgb;/* Near blur에 더 강한 중앙 가중치 */let centerWeight=select(0.4,0.2,isNear);/* near=0.2,far=0.4 */sum +=originalColor * centerWeight;totalWeight +=centerWeight;/* 방사형 샘플링 */for (var i=0;i < samples;i=i + 1) {for (var r=1.0;r <=maxRadius;r=r + 1.0) {let angle=f32(i) * angleStep;let offset=vec2<f32>(cos(angle) * r,sin(angle) * r);let samplePos=vec2<i32>(clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1),clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1));let sampleColor=textureLoad(sourceTexture,vec2<u32>(samplePos)).rgb;let sampleEncodedCoC=textureLoad(cocTexture,vec2<u32>(samplePos)).a;let sampleCoC=decodeCoC(sampleEncodedCoC);/* 디코딩 추가 *//* 가우시안 가중치 */var weight=exp(-r * r/(maxRadius * maxRadius * 0.5));/* CoC 기반 가중치 조정 */if (isNear) {/* Near blur:더 강한 조건으로 가중치 증가 */if (sampleCoC < 0.0 && abs(sampleCoC) >=intensity * 0.5) {weight *=1.5;}} else {/* Far blur:기존 조건 유지 */if (sampleCoC > 0.0 && sampleCoC >=intensity * 0.7) {weight *=1.2;}}sum +=sampleColor * weight;totalWeight +=weight;}}/* 추가 근거리 샘플링 (near blur만) */if (isNear && maxRadius > 2.0) {let additionalSamples=8;let innerRadius=maxRadius * 0.3;let innerAngleStep=6.28318530718/f32(additionalSamples);for (var i=0;i < additionalSamples;i=i + 1) {let angle=f32(i) * innerAngleStep + 0.5;/* 약간의 오프셋 */let offset=vec2<f32>(cos(angle) * innerRadius,sin(angle) * innerRadius);let samplePos=vec2<i32>(clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1),clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1));let sampleColor=textureLoad(sourceTexture,vec2<u32>(samplePos)).rgb;let weight=0.8;sum +=sampleColor * weight;totalWeight +=weight;}}if (totalWeight > 0.0) {return sum/totalWeight;} else {return originalColor;}}`;this.init(i,"POST_EFFECT_DOF_UNIFIED",{msaa:b,nonMsaa:b}),this.nearBlurSize=this.#eh,this.farBlurSize=this.#th,this.nearStrength=this.#rh,this.farStrength=this.#nh}get nearBlurSize(){return this.#eh}set nearBlurSize(i){validateNumberRange(i),this.#eh=i,this.updateUniform("nearBlurSize",i)}get farBlurSize(){return this.#th}set farBlurSize(i){validateNumberRange(i),this.#th=i,this.updateUniform("farBlurSize",i)}get nearStrength(){return this.#rh}set nearStrength(i){validateNumberRange(i),this.#rh=i,this.updateUniform("nearStrength",i)}get farStrength(){return this.#nh}set farStrength(i){validateNumberRange(i),this.#nh=i,this.updateUniform("farStrength",i)}render(i,m,g,_,b){return super.render(i,m,g,_,b)}}Object.freeze(DOFUnified);class DOF extends AMultiPassPostEffect{#ih;#ah;#jc=15;#Yc=2.8;#Zc=25;#Jc=.1;#Qc=1e3;#eh=15;#th=15;#rh=1;#nh=1;constructor(i){super(i,[new DOFCoC(i),new DOFUnified(i)]),this.#ih=this.passList[0],this.#ah=this.passList[1],this.#ih.focusDistance=this.#jc,this.#ih.aperture=this.#Yc,this.#ih.maxCoC=this.#Zc,this.#ih.nearPlane=this.#Jc,this.#ih.farPlane=this.#Qc,this.#ah.nearBlurSize=this.#eh,this.#ah.farBlurSize=this.#th,this.#ah.nearStrength=this.#rh,this.#ah.farStrength=this.#nh}get focusDistance(){return this.#jc}set focusDistance(i){this.#jc=i,this.#ih.focusDistance=i}get aperture(){return this.#Yc}set aperture(i){this.#Yc=i,this.#ih.aperture=i}get maxCoC(){return this.#Zc}set maxCoC(i){this.#Zc=i,this.#ih.maxCoC=i}get nearPlane(){return this.#Jc}set nearPlane(i){this.#Jc=i,this.#ih.nearPlane=i}get farPlane(){return this.#Qc}set farPlane(i){this.#Qc=i,this.#ih.farPlane=i}get nearBlurSize(){return this.#eh}set nearBlurSize(i){this.#eh=i,this.#ah.nearBlurSize=i}get farBlurSize(){return this.#th}set farBlurSize(i){this.#th=i,this.#ah.farBlurSize=i}get nearStrength(){return this.#rh}set nearStrength(i){this.#rh=i,this.#ah.nearStrength=i}get farStrength(){return this.#nh}set farStrength(i){this.#nh=i,this.#ah.farStrength=i}setGameDefault(){this.focusDistance=15,this.aperture=2.8,this.maxCoC=25,this.nearBlurSize=15,this.farBlurSize=15,this.nearStrength=1,this.farStrength=1}setCinematic(){this.focusDistance=20,this.aperture=1.4,this.maxCoC=40,this.nearBlurSize=25,this.farBlurSize=30,this.nearStrength=1.2,this.farStrength=1.3}setPortrait(){this.focusDistance=8,this.aperture=1.8,this.maxCoC=35,this.nearBlurSize=12,this.farBlurSize=25,this.nearStrength=.8,this.farStrength=1.4}setLandscape(){this.focusDistance=50,this.aperture=8,this.maxCoC=20,this.nearBlurSize=20,this.farBlurSize=10,this.nearStrength=1.1,this.farStrength=.6}setMacro(){this.focusDistance=2,this.aperture=1,this.maxCoC=50,this.nearBlurSize=30,this.farBlurSize=35,this.nearStrength=1.5,this.farStrength=1.6}setSports(){this.focusDistance=25,this.aperture=4,this.maxCoC=18,this.nearBlurSize=10,this.farBlurSize=12,this.nearStrength=.8,this.farStrength=.9}setNightMode(){this.focusDistance=12,this.aperture=2,this.maxCoC=30,this.nearBlurSize=18,this.farBlurSize=20,this.nearStrength=1.1,this.farStrength=1.2}render(i,m,g,_){const b=this.#ih.render(i,m,g,_);return this.#ah.render(i,m,g,_,b)}}Object.freeze(DOF);class LensDistortion extends ASinglePassPostEffect{#sh=.1;#oh=0;#_r=0;#vr=0;constructor(i){super(i);this.init(i,"POST_EFFECT_LENS_DISTORTION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);let global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));let uv=global_id_vec/vec2<f32>(dimW,dimH);let uvCenter=center/vec2<f32>(dimW,dimH);let offset=uv - uvCenter;let distance=length(offset);let barrelFactor=1.0 + uniforms.barrelStrength * distance * distance;let pincushionFactor=1.0 - uniforms.pincushionStrength * distance * distance;let distortionFactor=barrelFactor * pincushionFactor;let distortedUV=uvCenter + offset * distortionFactor;\nif (distortedUV.x < 0.0 || distortedUV.x > 1.0 || distortedUV.y < 0.0 || distortedUV.y > 1.0) {textureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(0.0,0.0,0.0,1.0));} else {let sampleCoord=vec2<i32>(i32(clamp(distortedUV.x * dimW,0.0,dimW - 1.0)),i32(clamp(distortedUV.y * dimH,0.0,dimH - 1.0)));let sampledColor=textureLoad(sourceTexture,sampleCoord).xyzw;textureStore(outputTexture,vec2<i32>(global_id.xy),sampledColor);}","struct Uniforms {barrelStrength:f32,pincushionStrength:f32,centerX:f32,centerY:f32};")),this.barrelStrength=this.#sh,this.pincushionStrength=this.#oh,this.centerX=this.#_r,this.centerY=this.#vr}get barrelStrength(){return this.#sh}set barrelStrength(i){validateNumberRange(i,0),this.#sh=i,this.updateUniform("barrelStrength",i)}get pincushionStrength(){return this.#oh}set pincushionStrength(i){validateNumberRange(i,0),this.#oh=i,this.updateUniform("pincushionStrength",i)}get centerX(){return this.#_r}set centerX(i){validateNumber(i),this.#_r=i,this.updateUniform("centerX",i)}get centerY(){return this.#vr}set centerY(i){validateNumber(i),this.#vr=i,this.updateUniform("centerY",i)}}Object.freeze(LensDistortion);class Vignetting extends ASinglePassPostEffect{#uh=.2;#R=.5;constructor(i){super(i);this.init(i,"POST_EFFECT_VIGNETTING",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let index=vec2<u32>(global_id.xy);let uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);let smoothness=uniforms.smoothness;let size=uniforms.size;var color:vec4<f32>=textureLoad(sourceTexture,index);var diff=size - distance(uv,vec2<f32>(0.5));let vignette=smoothstep(-smoothness,smoothness,diff);color.r *=vignette;color.g *=vignette;color.b *=vignette;textureStore(outputTexture,index,color);","struct Uniforms {smoothness:f32,size:f32,};")),this.smoothness=this.#uh,this.size=this.#R}get size(){return this.#R}set size(i){validateNumberRange(i,0),this.#R=i,this.updateUniform("size",i)}get smoothness(){return this.#uh}set smoothness(i){validateNumberRange(i,0,1),this.#uh=i,this.updateUniform("smoothness",i)}}Object.freeze(Vignetting);class OldBloomBlend extends ASinglePassPostEffect{#lh=1;#Fu=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:_}=this,b=`struct Uniforms {bloomStrength:f32,exposure:f32};@group(0) @binding(0) var sourceTexture0:texture_storage_2d<rgba8unorm,read>;@group(0) @binding(1) var sourceTexture1:texture_storage_2d<rgba8unorm,read>;@group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>;@group(1) @binding(1) var<uniform> uniforms:Uniforms;@compute @workgroup_size(${m},${g},${_})fn main (@builtin(global_invocation_id) global_id:vec3<u32>,){let index=vec2<u32>(global_id.xy );let dimensions:vec2<u32>=textureDimensions(sourceTexture0);let dimW=f32(dimensions.x);let dimH=f32(dimensions.y);let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);var diffuse:vec4<f32>=textureLoad(sourceTexture0,index,);var blur:vec4<f32>=textureLoad(sourceTexture1,index,);let finalColor=vec4<f32>((diffuse.rgb + blur.rgb * uniforms.bloomStrength ) * uniforms.exposure,diffuse.a);textureStore(outputTexture,index,finalColor );};`;this.init(i,"POST_EFFECT_OLD_BLOOM",{msaa:b,nonMsaa:b}),this.exposure=this.#Fu,this.bloomStrength=this.#lh}get bloomStrength(){return this.#lh}set bloomStrength(i){this.#lh=i,this.updateUniform("bloomStrength",i)}get exposure(){return this.#Fu}set exposure(i){this.#Fu=i,this.updateUniform("exposure",i)}render(i,m,g,_,b){return super.render(i,m,g,_,b)}}Object.freeze(OldBloomBlend);class OldBloom extends AMultiPassPostEffect{#ch;#hh;#fh;#Uc=156;#dh=32;#Fu=1;#lh=1.2;constructor(i){super(i,[new Threshold(i),new GaussianBlur(i),new OldBloomBlend(i)]),this.#ch=this.passList[0],this.#hh=this.passList[1],this.#fh=this.passList[2],this.#ch.threshold=this.#Uc,this.#hh.size=this.#dh,this.#fh.exposure=this.#Fu,this.#fh.bloomStrength=this.#lh}get threshold(){return this.#Uc}set threshold(i){this.#Uc=i,this.#ch.threshold=i}get gaussianBlurSize(){return this.#dh}set gaussianBlurSize(i){this.#dh=i,this.#hh.size=i}get exposure(){return this.#Fu}set exposure(i){this.#Fu=i,this.#fh.exposure=i}get bloomStrength(){return this.#lh}set bloomStrength(i){this.#lh=i,this.#fh.bloomStrength=i}render(i,m,g,_){const b=this.#ch.render(i,m,g,_),y=this.#hh.render(i,m,g,b);return this.#fh.render(i,m,g,_,y)}}Object.freeze(OldBloom);class Sharpen extends AMultiPassPostEffect{#kc;constructor(i){super(i,[new Convolution(i)]),this.#kc=this.passList[0],this.#kc.kernel=Convolution.SHARPEN}render(i,m,g,_){return this.#kc.render(i,m,g,_)}}Object.freeze(Sharpen);var ys=Object.freeze({__proto__:null,AMultiPassPostEffect:AMultiPassPostEffect,ASinglePassPostEffect:ASinglePassPostEffect,Blur:Blur,BlurX:BlurX,BlurY:BlurY,BrightnessContrast:BrightnessContrast,ChromaticAberration:ChromaticAberration,ColorBalance:ColorBalance,ColorTemperatureTint:ColorTemperatureTint,Convolution:Convolution,DOF:DOF,DirectionalBlur:DirectionalBlur,FilmGrain:FilmGrain,GaussianBlur:GaussianBlur,Grayscale:Grayscale,HueSaturation:HueSaturation,Invert:Invert,LensDistortion:LensDistortion,OldBloom:OldBloom,PostEffectManager:PostEffectManager,RadialBlur:RadialBlur,Sharpen:Sharpen,Threshold:Threshold,Vibrance:Vibrance,Vignetting:Vignetting,ZoomBlur:ZoomBlur}),Ts=Object.freeze({__proto__:null,PICKING_EVENT_TYPE:Mi,PickingEvent:PickingEvent,PickingManager:PickingManager});const init=async(i,m,g,_,b="premultiplied",y={powerPreference:"high-performance",forceFallbackAdapter:!1})=>{const{gpu:T}=navigator,errorHandler=(i,m)=>{const _=generateErrorMessage(i,m);console.error("\n============\n",_,"\n============\n"),g?.(_)},validateAndRequestDevice=async m=>{const g=[];m.features.has("texture-compression-astc")&&g.push("texture-compression-astc");const _={requiredFeatures:g};try{const g=await m.requestDevice(_);validateAndInitializeContext(i,m,g)}catch(i){errorHandler(null,`Failed to request device. Adapter was ${m},error message is ${i.message}`)}},validateAndInitializeContext=(i,y,T)=>{const w=i.getContext("webgpu");if(w)try{const g=new RedGPUContext(i,y,T,w,b);m(g),T.addEventListener("uncapturederror",i=>{console.warn("TODO A WebGPU error was not captured:",i),console.warn(i.error?.message),window.cancelAnimationFrame(g.currentRequestAnimationFrame)}),T.lost.then(i=>{console.warn(i),console.warn(`Device lost occurred:${i.message}`),"destroyed"===i.reason&&_?.(i)})}catch(i){g(errorHandler(i,""))}else errorHandler(new Error(`Failed to get context from canvas:${i.id||i}`),"Failed to get webgpu initialize from canvas")},initializeWebGPU=async()=>{m instanceof Function?i instanceof HTMLCanvasElement?await(async i=>{i||errorHandler(null,"Cannot find navigator.gpu");try{const m=await i.requestAdapter(y);await validateAndRequestDevice(m)}catch(m){errorHandler(m,`Failed to request adapter or validate device with target GPU:${i},error message is ${m.message}`)}})(T):errorHandler(null,`Expected HTMLCanvasElement,but received:${i}`):errorHandler(null,`Expected onWebGPUInitialized,but received:${m}`)};try{await initializeWebGPU()}catch(i){errorHandler(i,`Unexpected error occurred during WebGPU initialization:${i.message}`)}},generateErrorMessage=(i,m)=>{let g=m;return i instanceof Error?(g=i.message??m,"string"==typeof i.stack&&(g+=`\nStack Trace:${i.stack}`)):console.warn("generateErrorMessage function expected an Error instance,but got:",i),g};class TextureLoaderData{src;texture;loadEnd;loadSuccess;srcInfo;idx;constructor(i,m,g){this.src=i,this.texture=null,this.loadEnd=!1,this.loadSuccess=!1,this.srcInfo=m,this.idx=g}}class TextureLoader{textures=[];#mh=0;#v;#ph;#gh;#xh;constructor(i,m=[],g,_){this.#v=i,this.#ph=m,this.#gh=g,this.#xh=_,this.#ph.length?this.#ph.forEach((i,m)=>this.#_h(i,m)):this.#vh()}getTextureByIndex(i){if(this.textures[i])return this.textures[i].texture}#_h(i,m){let g,_,b=BitmapTexture;_=i.hasOwnProperty("src")?i.src:i,_ instanceof Array&&(b=CubeTexture),g=new TextureLoaderData(_,i,m);const onLoadHandler=()=>{g.loadSuccess=!0,g.loadEnd=!0,this.#bh()},onErrorHandler=()=>{g.loadSuccess=!1,g.loadEnd=!0,this.#bh()};g.texture=b===BitmapTexture?new b(this.#v,i,!0,onLoadHandler,onErrorHandler,i.format,!1):new b(this.#v,i,!0,onLoadHandler,onErrorHandler,i.format),this.textures.push(g)}#bh(){this.#mh++,this.#xh&&this.#xh.call(this,{totalNum:this.#ph.length,loaded:this.#mh}),this.#mh===this.#ph.length&&this.#vh()}#vh(){requestAnimationFrame(()=>{this.#gh&&this.#gh.call(this,this)})}}const arrayBufferLoader=(i,m,g)=>{fetch(i).then(i=>{if(!i.ok)throw new Error(`Network response was not ok ${i.statusText}`);return i.arrayBuffer()}).then(i=>{m&&m(i)}).catch(i=>{})},Ss={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};Object.freeze(Ss);class AccessorInfo_GLTF{accessor;bufferView;bufferGlTfId;buffer;bufferURIDataView;componentType;componentType_BYTES_PER_ELEMENT;getMethod;accessorBufferOffset;bufferViewOffset;bufferViewByteStride;startIndex;constructor(i,m,g){switch(this.accessor=m.accessors[g],this.bufferView=m.bufferViews[this.accessor.bufferView],this.bufferGlTfId=this.bufferView.buffer,this.buffer=m.buffers[this.bufferGlTfId],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=i.parsingResult.uris.buffers[this.bufferGlTfId]),this.componentType=Ss[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:consoleAndThrowError("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}class AnimationData_GLTF{gltfLoader;scenesData;accessorGlTfId;dataList;constructor(i,m,g){this.gltfLoader=i,this.scenesData=m,this.accessorGlTfId=g;const _=new AccessorInfo_GLTF(this.gltfLoader,this.scenesData,this.accessorGlTfId),{accessor:b,startIndex:y,componentType_BYTES_PER_ELEMENT:T,bufferURIDataView:w,getMethod:P}=_,{type:$,count:H}=b;let q=y,W=1;switch($){case"SCALAR":W=1;break;case"VEC4":W=4;break;case"VEC3":W=3}this.dataList=[];let ye=0;for(;ye<H*W;q++,ye++)this.dataList[ye]=w[P](q*T,!0)}}class AniTrack_GLTF{key;timeAnimationInfo;aniDataAnimationInfo;interpolation;animationTargetMesh;weightMeshes;constructor(i,m,g,_,b,y){this.key=i,this.timeAnimationInfo=m,this.aniDataAnimationInfo=g,this.interpolation=_,this.animationTargetMesh=b,this.weightMeshes=y}}const parseAnimations=(i,m)=>new Promise(async g=>{m.animations||(m.animations=[]);const{parsingResult:_}=i,{animations:b}=_,{animations:y}=m;if(y.length){const g=y.map(async g=>{const{samplers:_,channels:y}=g,T=[];T.minTime=1e7,T.maxTime=-1,T.name=g.name,b.push(T),await Promise.all(y.map(async g=>((i,m,g,_,b)=>{let y,T;const{nodes:w,meshes:P}=b,$=[],{sampler:H,target:q}=g,W=_[H],{node:ye,path:Ge}=q,Ke=w[ye];if("mesh"in Ke){y=Ke.Mesh;const{primitives:i}=P[Ke.mesh];let m=i.length;for(;m--;)$.push(i[m].Mesh)}else{let m;if(!i.parsingResult.groups[ye])return;m=i.parsingResult.groups[ye],y=m}if("scale"!=Ge&&"rotation"!=Ge&&"translation"!=Ge&&"weights"!=Ge||(T=new AniTrack_GLTF(Ge,new AnimationData_GLTF(i,b,W.input),new AnimationData_GLTF(i,b,W.output),W.interpolation,y,$),m.push(T)),T){const{timeAnimationInfo:i}=T,{dataList:g}=i;m.minTime>g[0]&&(m.minTime=g[0]),m.maxTime<g[g.length-1]&&(m.maxTime=g[g.length-1])}})(i,T,g,_,m)))});await Promise.all(g),b.length&&b.forEach(m=>i.playAnimation(m))}g()});let ws=new Float32Array(16),Ms=new Float32Array(16);class ParsedSkinInfo_GLTF{joints;inverseBindMatrices;skeletonMesh;isInverseBindMatrixUpdated=!1;vertexStorageInfo;vertexStorageBuffer;#yh;#Th;constructor(){this.joints=[],this.inverseBindMatrices=null,this.skeletonMesh=null}update(i,m){const g=this.#Sh(m.modelMatrix),_=this.#wh(this.joints,g);this.#Mh(i,m.animationInfo.skinInfo,_)}#Sh(i){return this.#yh=this.#yh||new Float32Array(i.length),this.#yh.set(i),invert$2(this.#yh,this.#yh),this.#yh}#wh(i,m){const g=16*i.length;this.#Th&&this.#Th.length==g||(this.#Th=new Float32Array(g));for(let g=0;g<i.length;g++){const _=multiply$5(ws,m,i[g].modelMatrix),b=multiply$5(Ms,_,this.inverseBindMatrices[g]);this.#Th.set(b,16*g)}return this.#Th}#Mh(i,m,g){const{vertexStorageBuffer:_,vertexStorageInfo:b}=m,{gpuBuffer:y}=_,{jointMatrix:T}=b.members;i.gpuDevice.queue.writeBuffer(y,T.uniformOffset,g)}}const parseJoint_GLTF=(i,m,g,_)=>{const b=g[_].Mesh;b?(m.joints.push(b),b.depthCompare=Jn.NEVER):requestAnimationFrame(function(){parseJoint_GLTF(i,m,g,_)})},parseAttributeInfo_GLTF=function(i,m,g,_,b,y,T,w,P,$,H){const{accessor:q,startIndex:W,getMethod:ye,bufferViewByteStride:Ge,bufferURIDataView:Ke,componentType_BYTES_PER_ELEMENT:Xe}=m,{type:je,count:Ye}=q;let Ze=0;const Je=Ge/Xe;let Qe,et=W;switch(je){case"VEC4":if(Ge)for(Qe=et+Ye*(Ge/Xe);et<Qe;et++)Ze%Je<4&&("WEIGHTS_0"==i?w.push(Ke[ye](et*Xe,!0)):"JOINTS_0"==i?P.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?$.push(Ke[ye](et*Xe,!0)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i)),Ze++;else for(Qe=et+4*Ye;et<Qe;et++)"WEIGHTS_0"==i?w.push(Ke[ye](et*Xe,!0)):"JOINTS_0"==i?P.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?$.push(Ke[ye](et*Xe,!0)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i),Ze++;break;case"VEC3":if(Ge)for(Qe=et+Ye*(Ge/Xe);et<Qe;et++)Ze%Je<3&&("NORMAL"==i?T.push(Ke[ye](et*Xe,!0)):"POSITION"==i?g.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?($.push(Ke[ye](et*Xe,!0)),Ze%Je==2&&$.push(1)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i)),Ze++;else for(Qe=et+3*Ye;et<Qe;et++)"NORMAL"==i?T.push(Ke[ye](et*Xe,!0)):"POSITION"==i?g.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?($.push(Ke[ye](et*Xe,!0)),Ze%3==2&&$.push(1)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i),Ze++;break;case"VEC2":if(Ge)for(Qe=et+Ye*(Ge/Xe);et<Qe;et++)Ze%Je<2&&("TEXCOORD_0"==i?_.push(Ke[ye](et*Xe,!0)):"TEXCOORD_1"==i?b.push(Ke[ye](et*Xe,!0)):"TEXCOORD_2"==i?y.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i)),Ze++;else for(Qe=et+2*Ye;et<Qe;et++)"TEXCOORD_0"==i?_.push(Ke[ye](et*Xe,!0)):"TEXCOORD_1"==i?b.push(Ke[ye](et*Xe,!0)):"TEXCOORD_2"==i?y.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i),Ze++}},parseSparse_GLTF=(i,m,g,_,b)=>{const y=g.sparse;if(!y)return;const{values:T,indices:w,count:P}=y,$=_.bufferViews,H=$[T.bufferView],q=H.buffer,W=_.buffers,ye=W[q],Ge=[],Ke=[],Xe=$[w.bufferView],je=Xe.buffer,Ye=W[je];let Ze;ye.uri&&(Ze=i.parsingResult.uris.buffers[q]);const Je=Ss[g.componentType],{BYTES_PER_ELEMENT:Qe}=Je;let et;switch(Je){case Float32Array:et="getFloat32";break;case Uint32Array:et="getUint32";break;case Uint16Array:et="getUint16";break;case Int16Array:et="getInt16";break;case Uint8Array:et="getUint8";break;case Int8Array:et="getInt8"}const at=g.byteOffset||0;let ht,ft,gt=((H.byteOffset||0)+at)/Qe;switch(g.type){case"VEC3":for(ht=gt+Qe*P/Qe*3;gt<ht;gt++){const i=Ze[et](gt*Qe,!0);"NORMAL"==m||"POSITION"==m&&Ge.push(i)}break;case"VEC2":for(ht=gt+Qe*P/Qe*2;gt<ht;gt++)"TEXCOORD_0"==m&&Ke.push(Ze[et](gt*Qe,!0))}Ye.uri&&(ft=i.parsingResult.uris.buffers[je]);const xt=Ss[w.componentType],vt=xt.BYTES_PER_ELEMENT,bt=xt===Uint16Array?"getUint16":"getUint8",yt=w.byteOffset||0;let Tt=((Xe.byteOffset||0)+yt)/vt;const St=Tt+vt*P/vt;let wt=0;for(;Tt<St;Tt++){const i=ft[bt](Tt*vt,!0);b[3*i]=Ge[3*wt],b[3*i+1]=Ge[3*wt+1],b[3*i+2]=Ge[3*wt+2],wt++}};class MorphInfoData_GLTF{vertices=[];verticesColor_0=[];normals=[];uvs=[];uvs1=[];uvs2=[];jointWeights=[];joints=[];tangents=[];interleaveData;constructor(i=[],m=[],g=[],_=[],b=[],y=[],T=[],w=[],P=[]){this.vertices=i,this.verticesColor_0=m,this.normals=g,this.uvs=_,this.uvs1=b,this.uvs2=b,this.jointWeights=T,this.joints=w,this.tangents=P}}class MorphInfo_GLTF{morphInfoDataList=[];weights;cacheData={};origin;constructor(i,m,g,_){g.targets&&(this.morphInfoDataList=g.targets.map(g=>{const _=new MorphInfoData_GLTF;for(let b in g){const{vertices:y,verticesColor_0:T,normals:w,uvs:P,uvs1:$,uvs2:H,jointWeights:q,joints:W,tangents:ye}=_,Ge=g[b],Ke=new AccessorInfo_GLTF(i,m,Ge),{accessor:Xe}=Ke;parseAttributeInfo_GLTF(b,Ke,y,P,$,H,w,q,W,T,ye),Xe.sparse&&parseSparse_GLTF(i,b,Xe,m,y)}return _})),this.weights=_||[],this.origin=null}}const parseMaterialTexture=(i,m,g,_,b)=>{const{redGPUContext:y,gltfData:T}=i,{textureRawList:w}=i.parsingResult,P=g.index,$=T.textures[P],H=$.extensions?.EXT_texture_webp?.source||$.source,q=getURL(i,T,H);if(q){const P=$.sampler,W=getSamplerInfo(i,T,P),{parsedURI:ye,cacheKey:Ge}=q,Ke=`${_}SourceGlTfId_${H}`;if(w[Ke]?(w[Ke].materialList.push(m),w[Ke].samplerList.push(new Sampler(y,W))):w[Ke]={src:ye,cacheKey:Ge,targetTextureKey:_,targetSamplerKey:`${_}Sampler`,materialList:[m],samplerList:[new Sampler(y,W)],format:b||navigator.gpu.getPreferredCanvasFormat()},m[`${_}_texCoord_index`]=g.texCoord||0,"extensions"in g){const{extensions:i}=g,{KHR_texture_transform:b}=i;b&&((i,m,g)=>{i[`${m}_KHR_texture_transform_offset`]=g.offset||[0,0],i[`${m}_KHR_texture_transform_scale`]=g.scale||[1,1],i[`${m}_KHR_texture_transform_rotation`]=g.rotation||0,i[`use_${m}_KHR_texture_transform`]=!0})(m,_,b)}}},getURL=function(i,m,g){if(!m.images[g])return null;const{uri:_}=m.images[g];let b;const y=`${i.url}_${g}`;return b=_.indexOf("blob:http")>-1?_:(_.indexOf(";base64,")>-1?"":i.filePath)+_,{parsedURI:b,cacheKey:y}},getSamplerInfo=function(i,m,g){const _={magFilter:Rr.LINEAR,minFilter:Rr.LINEAR,mipmapFilter:Rr.LINEAR,addressModeU:wr.REPEAT,addressModeV:wr.REPEAT,addressModeW:wr.REPEAT},b={33071:wr.CLAMP_TO_EDGE,33648:wr.MIRRORED_REPEAT,10497:wr.REPEAT},y={9728:Rr.NEAREST,9729:Rr.LINEAR},T={9728:Rr.NEAREST,9729:Rr.LINEAR};if(m.samplers){let i=m.samplers[g];i&&("magFilter"in i&&(_.magFilter=y[i.magFilter]||Rr.LINEAR),"minFilter"in i&&(_.minFilter=T[i.minFilter]||Rr.LINEAR),"wrapS"in i&&(_.addressModeU=b[i.wrapS]),"wrapT"in i&&(_.addressModeV=b[i.wrapT]))}return _.string=JSON.stringify(_),_},parseMaterialInfo_GLTF=(i,m,g)=>{const{redGPUContext:_}=i;let b,y=!1,T="OPAQUE",w=.5;if("material"in g){b=new PBRMaterial(_);const P=g.material,$=m.materials[P];y=!!$.doubleSided,T=$.alphaMode??T,w=$.alphaCutoff??w;const{pbrMetallicRoughness:H,normalTexture:q,emissiveTexture:W,occlusionTexture:ye}=$;if(b.emissiveFactor=$.emissiveFactor||[0,0,0],H){const{metallicRoughnessTexture:m,baseColorTexture:g}=H;let _,y;b.baseColorFactor=H.baseColorFactor||[1,1,1,1],"metallicFactor"in H&&(_=H.metallicFactor),"roughnessFactor"in H&&(y=H.roughnessFactor),b.metallicFactor=null!=_?_:1,b.roughnessFactor=null!=y?y:1,g&&parseMaterialTexture(i,b,g,"baseColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),m&&parseMaterialTexture(i,b,m,"metallicRoughnessTexture")}if(q){parseMaterialTexture(i,b,q,"normalTexture");const{scale:m}=q;b.normalScale=null!=m?m:1}if(W&&parseMaterialTexture(i,b,W,"emissiveTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),ye&&(parseMaterialTexture(i,b,ye,"occlusionTexture"),b.occlusionStrength=$.occlusionTexture.strength||1),"extensions"in $){const{extensions:m}=$,{KHR_materials_clearcoat:g,KHR_materials_emissive_strength:_,KHR_materials_transmission:y,KHR_materials_diffuse_transmission:w,KHR_materials_volume:P,KHR_materials_unlit:H,KHR_materials_ior:q,KHR_materials_sheen:W,KHR_materials_specular:ye,KHR_materials_dispersion:Ge,KHR_materials_anisotropy:Ke,KHR_materials_iridescence:Xe}=m;if(Xe&&((i,m,g)=>{i.useKHR_materials_iridescence=!0,i.KHR_iridescenceFactor=m.iridescenceFactor||0,i.KHR_iridescenceIor=m.iridescenceIor||1.3,i.KHR_iridescenceThicknessMinimum=m.iridescenceThicknessMinimum||100,i.KHR_iridescenceThicknessMaximum=m.iridescenceThicknessMaximum||400,i.transparent=!0;{const{iridescenceTexture:_,iridescenceThicknessTexture:b}=m;_&&parseMaterialTexture(g,i,_,"KHR_iridescenceTexture"),b&&parseMaterialTexture(g,i,b,"KHR_iridescenceThicknessTexture")}})(b,Xe,i),Ke&&((i,m,g)=>{i.useKHR_materials_anisotropy=!0,i.KHR_anisotropyStrength=m.anisotropyStrength||0,i.KHR_anisotropyRotation=m.anisotropyRotation||0;const{anisotropyTexture:_}=m;_&&parseMaterialTexture(g,i,_,"KHR_anisotropyTexture")})(b,Ke,i),g&&((i,m,g)=>{i.KHR_clearcoatFactor=m.clearcoatFactor||0,i.KHR_clearcoatRoughnessFactor=m.clearcoatRoughnessFactor||0,i.useKHR_materials_clearcoat=!0;const{clearcoatTexture:_,clearcoatNormalTexture:b,clearcoatRoughnessTexture:y}=m;_&&parseMaterialTexture(g,i,_,"KHR_clearcoatTexture"),b&&parseMaterialTexture(g,i,b,"KHR_clearcoatNormalTexture"),y&&parseMaterialTexture(g,i,y,"KHR_clearcoatRoughnessTexture")})(b,g,i),_){const{emissiveStrength:i}=_;b.emissiveStrength=null!=i?i:1}if(y&&(((i,m,g)=>{i.useKHR_materials_transmission=!0,i.KHR_transmissionFactor=m.transmissionFactor||0,i.use2PathRender=!0;{const _=m.transmissionTexture;_&&parseMaterialTexture(g,i,_,"KHR_transmissionTexture")}})(b,y,i),b.transparent="BLEND"===T),w&&((i,m,g)=>{i.useKHR_materials_diffuse_transmission=!0,i.KHR_diffuseTransmissionFactor=m.diffuseTransmissionFactor||0,i.KHR_diffuseTransmissionColorFactor=m.diffuseTransmissionColorFactor||[1,1,1],i.transparent=!0;{const _=m.diffuseTransmissionTexture;_&&parseMaterialTexture(g,i,_,"KHR_diffuseTransmissionTexture");const b=m.diffuseTransmissionColorTexture;b&&parseMaterialTexture(g,i,b,"KHR_diffuseTransmissionColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`)}})(b,w,i),P&&(((i,m,g)=>{i.useKHR_materials_volume=!0,i.KHR_thicknessFactor=m.thicknessFactor||1,i.KHR_attenuationDistance=m.attenuationDistance||1,i.KHR_attenuationColor=m.attenuationColor||[1,1,1],i.use2PathRender=!0,i.transparent=!0;{const _=m.thicknessTexture;_&&parseMaterialTexture(g,i,_,"KHR_thicknessTexture")}})(b,P,i),T="BLEND"),H&&(b.useKHR_materials_unlit=!0),q){const{ior:i}=q;b.KHR_materials_ior=null!=i?i:1.5,b.use2PathRender=!0,b.transparent=!0}if(Ge){const{dispersion:i}=Ge;b.KHR_dispersion=i||0,b.use2PathRender=!0,b.transparent=!0}W&&((i,m,g)=>{i.KHR_sheenColorFactor=m.sheenColorFactor||[0,0,0],i.KHR_sheenRoughnessFactor=m.sheenRoughnessFactor||0,i.useKHR_materials_sheen=!0;const{sheenColorTexture:_,sheenRoughnessTexture:b}=m;_&&parseMaterialTexture(g,i,_,"KHR_sheenColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),b&&parseMaterialTexture(g,i,b,"KHR_sheenRoughnessTexture")})(b,W,i),ye&&((i,m,g)=>{i.useKHR_materials_specular=!0,i.KHR_specularFactor=m.specularFactor??1,i.KHR_specularColorFactor=m.specularColorFactor||[1,1,1];const{specularTexture:_,specularColorTexture:b}=m;_&&parseMaterialTexture(g,i,_,"KHR_specularTexture"),b&&parseMaterialTexture(g,i,b,"KHR_specularColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`)})(b,ye,i)}}else b=new PBRMaterial(_);Object.hasOwn(g.attributes,"COLOR_0")&&(b.useVertexColor=!0),b.doubleSided=y,b.cutOff=w;const{blendColorState:P,blendAlphaState:$}=b;switch(T){case"BLEND":b.alphaBlend=2,P.srcFactor=Nn.SRC_ALPHA,P.dstFactor=Nn.ONE_MINUS_SRC_ALPHA,$.srcFactor=Nn.SRC_ALPHA,$.dstFactor=Nn.ONE_MINUS_SRC_ALPHA,b.transparent=!0;break;case"MASK":b.alphaBlend=1,b.useCutOff=!0,P.srcFactor=Nn.ONE,P.dstFactor=Nn.ZERO,$.srcFactor=Nn.ONE,$.dstFactor=Nn.ZERO;break;default:P.srcFactor=Nn.ONE,P.dstFactor=Nn.ZERO,$.srcFactor=Nn.ONE,$.dstFactor=Nn.ZERO,b.alphaBlend=0}return b},parseIndicesInfo_GLTF=(i,m)=>{const{accessor:g,startIndex:_,getMethod:b,bufferURIDataView:y,componentType_BYTES_PER_ELEMENT:T}=i,{type:w,count:P}=g;let $,H=_;if("SCALAR"===w)for($=H+P;H<$;H++)m.push(y[b](H*T,!0))},parseInterleaveData_GLTF=(i,m,g,_,b,y,T,w,P,$)=>{let H,q,W,ye,Ge,Ke,Xe,je,Ye,Ze=0,Je=m.length/3,Qe=0;const et=m.length,at=_.length,ht=y.length,ft=T.length,gt=g.length,xt=w.length,vt=P.length,bt=$.length;for(H=W=Ke=0,q=ye=Xe=1,Ge=je=2,Ye=3;Ze<Je;Ze++)et&&(i[Qe++]=m[W],i[Qe++]=m[ye],i[Qe++]=m[Ge]),at?(i[Qe++]=_[W],i[Qe++]=_[ye],i[Qe++]=_[Ge]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),b.length||b.push(0,0),b.length&&(i[Qe++]=b[H],i[Qe++]=b[q]),ft?(i[Qe++]=T[H],i[Qe++]=T[q]):ht?(i[Qe++]=y[H],i[Qe++]=y[q]):b.length&&(i[Qe++]=b[H],i[Qe++]=b[q]),gt?(i[Qe++]=g[Ke],i[Qe++]=g[Xe],i[Qe++]=g[je],i[Qe++]=g[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),xt?(i[Qe++]=w[Ke],i[Qe++]=w[Xe],i[Qe++]=w[je],i[Qe++]=w[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),vt?(i[Qe++]=P[Ke],i[Qe++]=P[Xe],i[Qe++]=P[je],i[Qe++]=P[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),bt?(i[Qe++]=$[Ke],i[Qe++]=$[Xe],i[Qe++]=$[je],i[Qe++]=$[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),H+=2,q+=2,W+=3,ye+=3,Ge+=3,Ke+=4,Xe+=4,je+=4,Ye+=4},Rs=180/Math.PI,setMeshRotation=(i,m)=>{m.setRotation(-i[0]*Rs,-i[1]*Rs,-i[2]*Rs)},parseTRSAndMATRIX_GLTF=(i,m)=>{const{matrix:g,rotation:_,translation:b,scale:y}=m;let T,w;if("matrix"in m){T=create$5(),w=create$4(),mat4ToEuler(g,w),setMeshRotation(w,i),i.setPosition(g[12],g[13],g[14]);const m=fromValues$4(1,1,1);getScaling(m,g),i.setScale(m[0],m[1],m[2])}"rotation"in m&&(T=create$5(),w=create$4(),quaternionToRotationMat4(_,T),mat4ToEuler(T,w),setMeshRotation(w,i)),"translation"in m&&i.setPosition(b[0],b[1],b[2]),"scale"in m&&(i.setScale(y[0],y[1],y[2]),(y[0]<0||y[1]<0||y[2]<0)&&(i.primitiveState.frontFace=ni.CW))},parseChildrenAndSkin=(i,m,g,_,b)=>{if("children"in _){const b=_.children,y=b.length;for(let _=0;_<y;_++)parseNode_GLTF(i,m,b[_],g)}"skin"in _&&((i,m,g,_)=>{const b=new ParsedSkinInfo_GLTF,y=[],{nodes:T}=m,{joints:w,skeleton:P}=g;{let m=0;const g=w.length;for(;m<g;m++){const g=w[m];parseJoint_GLTF(i,b,T,g)}}P&&(b.skeletonMesh=T[P].Mesh);const $=g.inverseBindMatrices,H=new AccessorInfo_GLTF(i,m,$),{startIndex:q,accessor:W,componentType_BYTES_PER_ELEMENT:ye,bufferViewByteStride:Ge,bufferURIDataView:Ke,getMethod:Xe}=H,{type:je,count:Ye}=W;let Ze=0;const Je=Ge/ye;let Qe,et=q;if("MAT4"===je)if(Ge)for(Qe=et+Ye*(Ge/ye);et<Qe;et++)Ze%Je<16&&y.push(Ke[Xe](et*ye,!0)),Ze++;else for(Qe=et+16*Ye;et<Qe;et++)y.push(Ke[Xe](et*ye,!0)),Ze++;b.inverseBindMatrices=[];for(let i=0;i<w.length;i++)b.inverseBindMatrices.push(new Float32Array([y[16*i],y[16*i+1],y[16*i+2],y[16*i+3],y[16*i+4],y[16*i+5],y[16*i+6],y[16*i+7],y[16*i+8],y[16*i+9],y[16*i+10],y[16*i+11],y[16*i+12],y[16*i+13],y[16*i+14],y[16*i+15]]));_.animationInfo.skinInfo=b,_.material.useSkin=!!_.animationInfo.skinInfo})(i,m,b[_.skin],g)},parseNode_GLTF=(i,m,g,_)=>{const{redGPUContext:b,parsingResult:y}=i,{nodes:T,meshes:w,skins:P}=m,{groups:$,cameras:H}=y,q=T[g];if("mesh"in q){const g=function(i,m,g){const{redGPUContext:_}=i;let b;g.name&&(b=g.name);const y=[],{primitives:T}=g;let w=0;const P=T.length;for(;w<P;w++){const P=T[w];let $,H,q,W=[],ye=[],Ge=[],Ke=[],Xe=[],je=[],Ye=[],Ze=[],Je=[],Qe=[];const{attributes:et}=P;if(et)for(const g in et){const _=et[g],b=new AccessorInfo_GLTF(i,m,_);parseAttributeInfo_GLTF(g,b,ye,Ke,Xe,je,Ye,Ze,Je,Ge,Qe),b.accessor.sparse&&parseSparse_GLTF(i,g,b.accessor,m,ye)}if("indices"in P){let g=P.indices,_=new AccessorInfo_GLTF(i,m,g);parseIndicesInfo_GLTF(_,W)}H=parseMaterialInfo_GLTF(i,m,P),H instanceof PBRMaterial&&i.parsingResult.materials.push(H);let at,ht=!1;if("mode"in P)switch(P.mode){case 0:q=ai.POINT_LIST;break;case 1:case 2:q=ai.LINE_LIST;break;case 3:q=ai.LINE_STRIP,ht=!0;break;case 4:case 6:q=ai.TRIANGLE_LIST;break;case 5:q=ai.TRIANGLE_STRIP,ht=!0}Ge.length&&(H.useVertexColor_0=!0),Qe.length&&(H.useVertexTangent=!0),at=Ye.length?Ye:calculateNormals(ye,W);let ft,gt=[];parseInterleaveData_GLTF(gt,ye,Ge,at,Ke,Xe,je,Ze,Je,Qe);let xt={};if(ye.length&&(xt.aVertexPosition=InterleaveType.float32x3),at.length&&(xt.aVertexNormal=InterleaveType.float32x3),Ke.length&&(xt.aTexcoord=InterleaveType.float32x2),(je.length||Xe.length||Ke.length)&&(xt.aTexcoord1=InterleaveType.float32x2),xt.aVertexColor_0=InterleaveType.float32x4,xt.aVertexWeight=InterleaveType.float32x4,xt.aVertexJoint=InterleaveType.float32x4,xt.aVertexTangent=InterleaveType.float32x4,ft=new Geometry(_,new VertexBuffer(_,gt,new InterleavedStruct(xt)),!ht&&W.length?new IndexBuffer(_,new Uint32Array(W)):null),H||consoleAndThrowError("재질을 파싱할수없는경우 ",P),$=new Mesh(_,ft,H),b&&($.name=b,i.parsingOption))for(let m in i.parsingOption)b.toLowerCase().indexOf(m)>-1&&i.parsingOption[m]($);$.primitiveState.topology=q||ai.TRIANGLE_LIST,$.material.doubleSided&&($.primitiveState.cullMode=ri.NONE),$.material.use2PathRender&&($.primitiveState.cullMode=ri.NONE,$.depthStencilState.depthCompare=Jn.LESS),2===$.material.alphaBlend&&($.depthStencilState.depthCompare=Jn.LESS);{let _=new MorphInfo_GLTF(i,m,P,g.weights),b=0,y=_.morphInfoDataList;const T=y.length;for(;b<T;){const i=y[b],m=i.normals.length?i.normals:calculateNormals(i.vertices,W),g=[];parseInterleaveData_GLTF(g,i.vertices,i.verticesColor_0,m,i.uvs,i.uvs1,i.uvs2,i.jointWeights,i.joints,i.tangents),i.interleaveData=g,b++}$.animationInfo.morphInfo=_,$.animationInfo.morphInfo.origin=new Float32Array(gt)}let vt=$.geometry.vertexBuffer.data;$.gpuRenderInfo||$.initGPURenderInfos();let bt=0;for(const i in xt)bt+=xt[i].numElements;{const i=$.animationInfo.morphInfo.morphInfoDataList;let m=0;const g=i.length,_=vt.length;for(;m<g;){const g=i[m].vertices;let b=0,y=_/bt,T=null==$.animationInfo.morphInfo.weights[m]?.5:$.animationInfo.morphInfo.weights[m];for(;b<y;)vt[b*bt]+=g[3*b]*T,vt[b*bt+1]+=g[3*b+1]*T,vt[b*bt+2]+=g[3*b+2]*T,b++;m++}}$.geometry.vertexBuffer.updateAllData(vt),$.animationInfo.morphInfo.origin=new Float32Array(vt),P.Mesh=$,y.push($)}return y}(i,m,w[q.mesh]),b=g.length;for(let y=0;y<b;y++){let b=g[y];_.addChild(q.Mesh=b),parseTRSAndMATRIX_GLTF(b,q),parseChildrenAndSkin(i,m,b,q,P)}}else{let y;$[g]?(y=$[g],q.Mesh=y):(y=new Mesh(b),_.addChild(y),q.Mesh=y,y.name=q.name,$[g]=y),parseTRSAndMATRIX_GLTF(y,q),parseChildrenAndSkin(i,m,y,q,P)}},parseGLTF=(i,m,g)=>{(i=>{const m=i?.asset;m||consoleAndThrowError("GLTFLoader - asset must be defined"),m.version||consoleAndThrowError("GLTFLoader - asset version must be defined");const g=parseFloat(m.version);isNaN(g)&&consoleAndThrowError("GLTFLoader - asset version must be a numerical value"),g<2&&consoleAndThrowError("GLTFLoader - asset version must be 2.0 or higher")})(m),((i,m,g)=>{const{parsingResult:_}=i,{uris:b}=_,y="buffers",T=b[y],w=m.buffers,P=w.length;let $=0;w.forEach((m,_)=>{var b;function checkLoadingStatus(){$===P&&g&&g()}m._redURIkey=y,m._redURIIndex=_,m.uri instanceof ArrayBuffer?(b=new DataView(m.uri),$++,T[_]=b,checkLoadingStatus()):function(m){const g=m.startsWith("data:")?m:i.filePath+m;arrayBufferLoader(g,function(i){$++,T[_]=new DataView(i),checkLoadingStatus()})}(m.uri)})})(i,m,()=>{((i,m,g)=>{const{scenes:_}=m;_[0].nodes.forEach(g=>{parseNode_GLTF(i,m,g,i.resultMesh)}),g?.()})(i,m,()=>{((i,m)=>{const{cameras:g}=m;g&&g.forEach(function(m){let g=new PerspectiveCamera;"orthographic"==m.type||(g.fieldOfView=180*m.perspective.yfieldOfView/Math.PI,g.farClipping=m.perspective.zfar,g.nearClipping=m.perspective.znear),i.parsingResult.cameras.push(g)})})(i,m),new TextureLoader(i.redGPUContext,Object.values(i.parsingResult.textureRawList),_=>{_.textures.forEach(i=>{const{targetTextureKey:m,targetSamplerKey:g,samplerList:_}=i.srcInfo;i.srcInfo.materialList.forEach((b,y)=>{b[m]=i.texture,_[y]&&(b[g]=_[y])})}),parseAnimations(i,m).then(i=>{g&&g()})})})})},parseFileGLB=async(i,m)=>{const g=i.filePath+i.fileName;await(async(i,m,g=()=>{})=>{try{const g=await fetch(i);m(await g.arrayBuffer())}catch(i){g(i)}})(g,async g=>{const{content:_,binaryChunk:b}=parseBuffer(g);if(null===_)throw new Error("JSON content not found");const y=JSON.parse(_);processImagesIfExist(y,b),y.buffers[0].uri=b,i.gltfData=y,parseGLTF(i,y,m)},i=>{})},parseBuffer=i=>{let m=null,g=null;const _=new DataView(i,12),b=_.byteLength;for(let y=0;y<b;){const b=_.getUint32(y,!0);y+=4;const T=_.getUint32(y,!0);switch(y+=4,T){case 1313821514:const _=new Uint8Array(i,12+y,b);m=convertUint8ArrayToString(_);break;case 5130562:const T=12+y;g=i.slice(T,T+b)}y+=b}return{content:m,binaryChunk:g}},processImagesIfExist=(i,m)=>{const{images:g,bufferViews:_}=i,b=["image/png","image/jpeg","image/gif","image/webp"];if(g)for(let i=0;i<g.length;i++){const y=g[i],{mimeType:T,bufferView:w}=y;if(b.includes(T)){const i=_[w].byteOffset||0,g=m.slice(i,i+_[w].byteLength),b=new Blob([new Uint8Array(g)],{type:T});y.uri=URL.createObjectURL(b)}}},convertUint8ArrayToString=i=>{let m="";for(let g of i)m+=String.fromCharCode(g);return m};class GLTFLoader{parsingResult;resultMesh;parsingOption;activeAnimations=[];#v;#Rh;#fc;#dc;#Ph;#Ch;#ee;#te;#Ih;constructor(i,m,g,_){validateRedGPUContext(i),this.#v=i,this.#dc=m,this.#Rh=getFilePath(m),this.#fc=getFileName(m),this.#Ph=getFileExtension(m),this.#ee=g,this.#te=_,this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.resultMesh=new Mesh(this.#v),this.resultMesh.gltfLoaderInfo=this,this.resultMesh.animationInfo.animationsList=this.parsingResult.animations,this.#Eh()}get redGPUContext(){return this.#v}get filePath(){return this.#Rh}get gltfData(){return this.#Ch}set gltfData(i){this.#Ch=i}get fileName(){return this.#fc}get url(){return this.#dc}stopAnimation(){const{activeAnimations:i}=this;let m=i.indexOf(this.#Ih);m>-1&&i.splice(m,1)}playAnimation(i){const{activeAnimations:m}=this;m.push(this.#Ih=new PlayAnimationInfo(performance.now(),i))}async#Eh(){try{"glb"===this.#Ph?await parseFileGLB(this,()=>this.#ee(this)):"gltf"===this.#Ph?await(async(i,m)=>{const g=await fetch(i.url);i.gltfData=await g.json(),parseGLTF(i,i.gltfData,m)})(this,()=>this.#ee(this)):consoleAndThrowError("Unknown file extension:"+this.#Ph)}catch(i){this.#te?.(i)}}}Object.freeze(GLTFLoader);class PlayAnimationInfo{startTime;targetAniTrackList;constructor(i,m){this.startTime=i,this.targetAniTrackList=m}}export{Si as Camera,ColorRGB,ColorRGBA,Pa as Display,FinalRender,GLTFLoader,wr as GPU_ADDRESS_MODE,Nn as GPU_BLEND_FACTOR,Fn as GPU_BLEND_OPERATION,Jn as GPU_COMPARE_FUNCTION,ri as GPU_CULL_MODE,Mr as GPU_FILTER_MODE,ni as GPU_FRONT_FACE,ii as GPU_INDEX_FORMAT,Lr as GPU_LOAD_OP,Rr as GPU_MIPMAP_FILTER_MODE,ai as GPU_PRIMITIVE_TOPOLOGY,Br as GPU_STORE_OP,Geometry,Ca as Light,Ei as Material,OBJLoader,OBJMTLLoader,Ts as Picking,ys as PostEffect,Ia as Primitive,RedGPUContext,RedGPUContextDetector,RedGPUContextSizeManager,RedGPUContextViewContainer,Ga as RenderState,Renderer,Fa as Resource,ns as RuntimeChecker,Zr as SystemCode,jr as Util,xr as glMatrix,init};