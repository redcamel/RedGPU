const consoleAndThrowError=(...i)=>{const m=Array.prototype.slice.call(i).join(" ");throw new Error(m)},validatePositiveNumberRange=(i,m=0,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(m<0||i<0||i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed.`),!0),isUint=i=>Number.isInteger(i)&&i>=0,validateUintRange=(i,m=0,g=4503599627370496)=>{const x=isUint(i),_=isUint(m),b=isUint(g),y="is not Uint!/value:",T=`(check range:${m}u ~ ${g}u)`;return x||consoleAndThrowError(`value ${y}${i}/${T}`),_||consoleAndThrowError(`min ${y}${m}/${T}`),b||consoleAndThrowError(`max ${y}${g}/${T}`),m>=g&&consoleAndThrowError(`maximum value is bigger than minimum value./${T}`),m>i&&consoleAndThrowError(`value is smaller than minimum value./value:${i}/${T}`),g<i&&consoleAndThrowError(`value is bigger than maximum value./value:${i}/${T}`),!0},isHexColor=i=>{const m=/^([A-Fa-f0-9]{3}){1,2}$/;return i.startsWith("#")?m.test(i.substring(1)):!!i.startsWith("0x")&&m.test(i.substring(2))},convertHexToRgb=(i,m=!1)=>{if("number"==typeof i&&(i=`#${i.toString(16)}`),isHexColor(i)){"#"===i.charAt(0)&&(i=i.substring(1)),3===i.length&&(i=i.charAt(0)+i.charAt(0)+i.charAt(1)+i.charAt(1)+i.charAt(2)+i.charAt(2));const g=parseInt("0x"+i),x=g>>16&255,_=g>>8&255,b=255&g;return m?[x,_,b]:{r:x,g:_,b:b}}throw Error(`from ${convertHexToRgb.constructor.name}:input value - ${i}/Only hex string allowed`)},convertRgbToHex=(i,m,g)=>{validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255);return`#${i.toString(16).padStart(2,"0").toUpperCase()}${m.toString(16).padStart(2,"0").toUpperCase()}${g.toString(16).padStart(2,"0").toUpperCase()}`};class ColorRGB{#e;#t;#n;#r;constructor(i=255,m=255,g=255,x=void 0){this.#i(i,m,g),this.#a(i,m,g),x&&(this.#r=x)}get r(){return this.#e}set r(i){validateUintRange(i,0,255),this.#e=i,this.#r?.()}get g(){return this.#t}set g(i){validateUintRange(i,0,255),this.#t=i,this.#r?.()}get b(){return this.#n}set b(i){validateUintRange(i,0,255),this.#n=i,this.#r?.()}get rgb(){return[this.#e,this.#t,this.#n]}get rgbNormal(){return[this.#e/255,this.#t/255,this.#n/255]}get hex(){return convertRgbToHex(this.#e,this.#t,this.#n)}setColorByRGB(i,m,g){this.#i(i,m,g),this.#a(i,m,g)}setColorByHEX(i){const{r:m,g:g,b:x}=convertHexToRgb(i);this.#a(m,g,x)}setColorByRGBString(i){const m=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(i);m||consoleAndThrowError(`유효하지 않은 rgb 색상 값입니다:${i}`);const[,g,x,_]=m.map(Number);this.#i(g,x,_),this.#a(g,x,_)}#a(i,m,g){this.#e=i,this.#t=m,this.#n=g,this.#r?.()}#i(i,m,g){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255)}}Object.freeze(ColorRGB);class ColorRGBA extends ColorRGB{#s;#r;constructor(i=255,m=255,g=255,x=1,_=void 0){super(i,m,g,_),validatePositiveNumberRange(x,0,1),this.#s=x,_&&(this.#r=_)}get a(){return this.#s}set a(i){validatePositiveNumberRange(i,0,1),this.#s=i,this.#r?.()}get rgba(){return[this.r,this.g,this.b,this.#s]}get rgbaNormal(){return[this.r/255,this.g/255,this.b/255,this.#s]}setColorByRGBA(i,m,g,x){this.#o(i,m,g,x),this.r=i,this.g=m,this.b=g,this.#s=x,this.#r?.()}setColorByRGBAString(i){const m=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d*(?:\.\d+)?)\s*\)/.exec(i);if(!m)throw new Error(`유효하지 않은 rgba 색상 값입니다:${i}`);const[,g,x,_,b]=m.map(Number);this.#o(g,x,_,b),this.r=g,this.g=x,this.b=_,this.#s=b,this.#r?.()}#o(i,m,g,x){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255),validatePositiveNumberRange(x,0,1)}}const i={MOVE:"move",DOWN:"down",UP:"up",OVER:"over",OUT:"out",CLICK:"click"},copyGPUBuffer=(i,m,g)=>{const x=i.createCommandEncoder({label:"copyGPUBuffer_CommandEncoder"});x.copyBufferToBuffer(m,0,g,0,Math.min(m.size,g.size));const _=x.finish();i.queue.submit([_])};function getAbsoluteURL(i,m){try{return new URL(m,i).href}catch(i){return m}}const getFileExtension=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");const m=i.split("/"),g=m[m.length-1],x=g.lastIndexOf(".");return-1===x?"":g.substring(x+1).toLowerCase()},getFileName=(i,m=!0)=>{const g=i.substring(i.lastIndexOf("/")+1);return m?g:g.split(".").slice(0,-1).join(".")},getFilePath=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");return i.substring(0,i.lastIndexOf("/")+1)},calculateNormals=(i,m)=>{let g,x,_=[];for(g=0;g<i.length;g+=3)_[g+0]=0,_[g+1]=0,_[g+2]=0;for(g=0;g<m.length;g+=3){let b,y,T,w,P=[],z=[],H=[];for(b=3*m[g],y=3*m[g+1],T=3*m[g+2],P[0]=i[T+0]-i[y+0],P[1]=i[T+1]-i[y+1],P[2]=i[T+2]-i[y+2],z[0]=i[b+0]-i[y+0],z[1]=i[b+1]-i[y+1],z[2]=i[b+2]-i[y+2],H[0]=P[1]*z[2]-P[2]*z[1],H[1]=P[2]*z[0]-P[0]*z[2],H[2]=P[0]*z[1]-P[1]*z[0],x=0;x<3;x++)w=3*m[g+x],_[w+0]=_[w+0]+H[0],_[w+1]=_[w+1]+H[1],_[w+2]=_[w+2]+H[2]}for(g=0;g<i.length;g+=3){let i=[];i[0]=_[g+0],i[1]=_[g+1],i[2]=_[g+2];let m=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);0===m&&(m=1),i[0]=i[0]/m,i[1]=i[1]/m,i[2]=i[2]/m,_[g+0]=i[0],_[g+1]=i[1],_[g+2]=i[2]}return _};var m=1e-6,g="undefined"!=typeof Float32Array?Float32Array:Array;function multiply$1(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],z=m[7],H=m[8],$=g[0],W=g[1],q=g[2],ye=g[3],Ge=g[4],Ke=g[5],je=g[6],Xe=g[7],Ye=g[8];return i[0]=$*x+W*y+q*P,i[1]=$*_+W*T+q*z,i[2]=$*b+W*w+q*H,i[3]=ye*x+Ge*y+Ke*P,i[4]=ye*_+Ge*T+Ke*z,i[5]=ye*b+Ge*w+Ke*H,i[6]=je*x+Xe*y+Ye*P,i[7]=je*_+Xe*T+Ye*z,i[8]=je*b+Xe*w+Ye*H,i}function subtract$2(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i}Math.hypot||(Math.hypot=function(){for(var i=0,m=arguments.length;m--;)i+=arguments[m]*arguments[m];return Math.sqrt(i)});var x=multiply$1,_=subtract$2,b=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i},adjoint:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],z=m[8];return i[0]=y*z-T*P,i[1]=_*P-x*z,i[2]=x*T-_*y,i[3]=T*w-b*z,i[4]=g*z-_*w,i[5]=_*b-g*T,i[6]=b*P-y*w,i[7]=x*w-g*P,i[8]=g*y-x*b,i},clone:function(i){var m=new g(9);return m[0]=i[0],m[1]=i[1],m[2]=i[2],m[3]=i[3],m[4]=i[4],m[5]=i[5],m[6]=i[6],m[7]=i[7],m[8]=i[8],m},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},create:function(){var i=new g(9);return g!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[5]=0,i[6]=0,i[7]=0),i[0]=1,i[4]=1,i[8]=1,i},determinant:function(i){var m=i[0],g=i[1],x=i[2],_=i[3],b=i[4],y=i[5],T=i[6],w=i[7],P=i[8];return m*(P*b-y*w)+g*(-P*_+y*T)+x*(w*_-b*T)},equals:function(i,g){var x=i[0],_=i[1],b=i[2],y=i[3],T=i[4],w=i[5],P=i[6],z=i[7],H=i[8],$=g[0],W=g[1],q=g[2],ye=g[3],Ge=g[4],Ke=g[5],je=g[6],Xe=g[7],Ye=g[8];return Math.abs(x-$)<=m*Math.max(1,Math.abs(x),Math.abs($))&&Math.abs(_-W)<=m*Math.max(1,Math.abs(_),Math.abs(W))&&Math.abs(b-q)<=m*Math.max(1,Math.abs(b),Math.abs(q))&&Math.abs(y-ye)<=m*Math.max(1,Math.abs(y),Math.abs(ye))&&Math.abs(T-Ge)<=m*Math.max(1,Math.abs(T),Math.abs(Ge))&&Math.abs(w-Ke)<=m*Math.max(1,Math.abs(w),Math.abs(Ke))&&Math.abs(P-je)<=m*Math.max(1,Math.abs(P),Math.abs(je))&&Math.abs(z-Xe)<=m*Math.max(1,Math.abs(z),Math.abs(Xe))&&Math.abs(H-Ye)<=m*Math.max(1,Math.abs(H),Math.abs(Ye))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8])},fromMat2d:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=0,i[3]=m[2],i[4]=m[3],i[5]=0,i[6]=m[4],i[7]=m[5],i[8]=1,i},fromMat4:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[4],i[4]=m[5],i[5]=m[6],i[6]=m[8],i[7]=m[9],i[8]=m[10],i},fromQuat:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=g+g,T=x+x,w=_+_,P=g*y,z=x*y,H=x*T,$=_*y,W=_*T,q=_*w,ye=b*y,Ge=b*T,Ke=b*w;return i[0]=1-H-q,i[3]=z-Ke,i[6]=$+Ge,i[1]=z+Ke,i[4]=1-P-q,i[7]=W-ye,i[2]=$-Ge,i[5]=W+ye,i[8]=1-P-H,i},fromRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=g,i[2]=0,i[3]=-g,i[4]=x,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=m[1],i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=m[0],i[7]=m[1],i[8]=1,i},fromValues:function(i,m,x,_,b,y,T,w,P){var z=new g(9);return z[0]=i,z[1]=m,z[2]=x,z[3]=_,z[4]=b,z[5]=y,z[6]=T,z[7]=w,z[8]=P,z},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},invert:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],z=m[8],H=z*y-T*P,$=-z*b+T*w,W=P*b-y*w,q=g*H+x*$+_*W;return q?(q=1/q,i[0]=H*q,i[1]=(-z*x+_*P)*q,i[2]=(T*x-_*y)*q,i[3]=$*q,i[4]=(z*g-_*w)*q,i[5]=(-T*g+_*b)*q,i[6]=W*q,i[7]=(-P*g+x*w)*q,i[8]=(y*g-x*b)*q,i):null},mul:x,multiply:multiply$1,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i},multiplyScalarAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i[3]=m[3]+g[3]*x,i[4]=m[4]+g[4]*x,i[5]=m[5]+g[5]*x,i[6]=m[6]+g[6]*x,i[7]=m[7]+g[7]*x,i[8]=m[8]+g[8]*x,i},normalFromMat4:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],z=m[8],H=m[9],$=m[10],W=m[11],q=m[12],ye=m[13],Ge=m[14],Ke=m[15],je=g*T-x*y,Xe=g*w-_*y,Ye=g*P-b*y,Ze=x*w-_*T,Je=x*P-b*T,Qe=_*P-b*w,et=z*ye-H*q,at=z*Ge-$*q,ht=z*Ke-W*q,ft=H*Ge-$*ye,gt=H*Ke-W*ye,xt=$*Ke-W*Ge,vt=je*xt-Xe*gt+Ye*ft+Ze*ht-Je*at+Qe*et;return vt?(vt=1/vt,i[0]=(T*xt-w*gt+P*ft)*vt,i[1]=(w*ht-y*xt-P*at)*vt,i[2]=(y*gt-T*ht+P*et)*vt,i[3]=(_*gt-x*xt-b*ft)*vt,i[4]=(g*xt-_*ht+b*at)*vt,i[5]=(x*ht-g*gt-b*et)*vt,i[6]=(ye*Qe-Ge*Je+Ke*Ze)*vt,i[7]=(Ge*Ye-q*Qe-Ke*Xe)*vt,i[8]=(q*Je-ye*Ye+Ke*je)*vt,i):null},projection:function(i,m,g){return i[0]=2/m,i[1]=0,i[2]=0,i[3]=0,i[4]=-2/g,i[5]=0,i[6]=-1,i[7]=1,i[8]=1,i},rotate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],z=m[7],H=m[8],$=Math.sin(g),W=Math.cos(g);return i[0]=W*x+$*y,i[1]=W*_+$*T,i[2]=W*b+$*w,i[3]=W*y-$*x,i[4]=W*T-$*_,i[5]=W*w-$*b,i[6]=P,i[7]=z,i[8]=H,i},scale:function(i,m,g){var x=g[0],_=g[1];return i[0]=x*m[0],i[1]=x*m[1],i[2]=x*m[2],i[3]=_*m[3],i[4]=_*m[4],i[5]=_*m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},set:function(i,m,g,x,_,b,y,T,w,P){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i[4]=b,i[5]=y,i[6]=T,i[7]=w,i[8]=P,i},str:function(i){return"mat3("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+")"},sub:_,subtract:subtract$2,translate:function(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],z=m[7],H=m[8],$=g[0],W=g[1];return i[0]=x,i[1]=_,i[2]=b,i[3]=y,i[4]=T,i[5]=w,i[6]=$*x+W*y+P,i[7]=$*_+W*T+z,i[8]=$*b+W*w+H,i},transpose:function(i,m){if(i===m){var g=m[1],x=m[2],_=m[5];i[1]=m[3],i[2]=m[6],i[3]=g,i[5]=m[7],i[6]=x,i[7]=_}else i[0]=m[0],i[1]=m[3],i[2]=m[6],i[3]=m[1],i[4]=m[4],i[5]=m[7],i[6]=m[2],i[7]=m[5],i[8]=m[8];return i}});function create$2(){var i=new g(16);return g!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0),i[0]=1,i[5]=1,i[10]=1,i[15]=1,i}function clone(i){var m=new g(16);return m[0]=i[0],m[1]=i[1],m[2]=i[2],m[3]=i[3],m[4]=i[4],m[5]=i[5],m[6]=i[6],m[7]=i[7],m[8]=i[8],m[9]=i[9],m[10]=i[10],m[11]=i[11],m[12]=i[12],m[13]=i[13],m[14]=i[14],m[15]=i[15],m}function copy(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function fromValues$1(i,m,x,_,b,y,T,w,P,z,H,$,W,q,ye,Ge){var Ke=new g(16);return Ke[0]=i,Ke[1]=m,Ke[2]=x,Ke[3]=_,Ke[4]=b,Ke[5]=y,Ke[6]=T,Ke[7]=w,Ke[8]=P,Ke[9]=z,Ke[10]=H,Ke[11]=$,Ke[12]=W,Ke[13]=q,Ke[14]=ye,Ke[15]=Ge,Ke}function identity(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i}function invert(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],z=m[8],H=m[9],$=m[10],W=m[11],q=m[12],ye=m[13],Ge=m[14],Ke=m[15],je=g*T-x*y,Xe=g*w-_*y,Ye=g*P-b*y,Ze=x*w-_*T,Je=x*P-b*T,Qe=_*P-b*w,et=z*ye-H*q,at=z*Ge-$*q,ht=z*Ke-W*q,ft=H*Ge-$*ye,gt=H*Ke-W*ye,xt=$*Ke-W*Ge,vt=je*xt-Xe*gt+Ye*ft+Ze*ht-Je*at+Qe*et;return vt?(vt=1/vt,i[0]=(T*xt-w*gt+P*ft)*vt,i[1]=(_*gt-x*xt-b*ft)*vt,i[2]=(ye*Qe-Ge*Je+Ke*Ze)*vt,i[3]=($*Je-H*Qe-W*Ze)*vt,i[4]=(w*ht-y*xt-P*at)*vt,i[5]=(g*xt-_*ht+b*at)*vt,i[6]=(Ge*Ye-q*Qe-Ke*Xe)*vt,i[7]=(z*Qe-$*Ye+W*Xe)*vt,i[8]=(y*gt-T*ht+P*et)*vt,i[9]=(x*ht-g*gt-b*et)*vt,i[10]=(q*Je-ye*Ye+Ke*je)*vt,i[11]=(H*Ye-z*Je-W*je)*vt,i[12]=(T*at-y*ft-w*et)*vt,i[13]=(g*ft-x*at+_*et)*vt,i[14]=(ye*Xe-q*Ze-Ge*je)*vt,i[15]=(z*Ze-H*Xe+$*je)*vt,i):null}function multiply(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],z=m[7],H=m[8],$=m[9],W=m[10],q=m[11],ye=m[12],Ge=m[13],Ke=m[14],je=m[15],Xe=g[0],Ye=g[1],Ze=g[2],Je=g[3];return i[0]=Xe*x+Ye*T+Ze*H+Je*ye,i[1]=Xe*_+Ye*w+Ze*$+Je*Ge,i[2]=Xe*b+Ye*P+Ze*W+Je*Ke,i[3]=Xe*y+Ye*z+Ze*q+Je*je,Xe=g[4],Ye=g[5],Ze=g[6],Je=g[7],i[4]=Xe*x+Ye*T+Ze*H+Je*ye,i[5]=Xe*_+Ye*w+Ze*$+Je*Ge,i[6]=Xe*b+Ye*P+Ze*W+Je*Ke,i[7]=Xe*y+Ye*z+Ze*q+Je*je,Xe=g[8],Ye=g[9],Ze=g[10],Je=g[11],i[8]=Xe*x+Ye*T+Ze*H+Je*ye,i[9]=Xe*_+Ye*w+Ze*$+Je*Ge,i[10]=Xe*b+Ye*P+Ze*W+Je*Ke,i[11]=Xe*y+Ye*z+Ze*q+Je*je,Xe=g[12],Ye=g[13],Ze=g[14],Je=g[15],i[12]=Xe*x+Ye*T+Ze*H+Je*ye,i[13]=Xe*_+Ye*w+Ze*$+Je*Ge,i[14]=Xe*b+Ye*P+Ze*W+Je*Ke,i[15]=Xe*y+Ye*z+Ze*q+Je*je,i}function translate(i,m,g){var x,_,b,y,T,w,P,z,H,$,W,q,ye=g[0],Ge=g[1],Ke=g[2];return m===i?(i[12]=m[0]*ye+m[4]*Ge+m[8]*Ke+m[12],i[13]=m[1]*ye+m[5]*Ge+m[9]*Ke+m[13],i[14]=m[2]*ye+m[6]*Ge+m[10]*Ke+m[14],i[15]=m[3]*ye+m[7]*Ge+m[11]*Ke+m[15]):(x=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],z=m[7],H=m[8],$=m[9],W=m[10],q=m[11],i[0]=x,i[1]=_,i[2]=b,i[3]=y,i[4]=T,i[5]=w,i[6]=P,i[7]=z,i[8]=H,i[9]=$,i[10]=W,i[11]=q,i[12]=x*ye+T*Ge+H*Ke+m[12],i[13]=_*ye+w*Ge+$*Ke+m[13],i[14]=b*ye+P*Ge+W*Ke+m[14],i[15]=y*ye+z*Ge+q*Ke+m[15]),i}function scale(i,m,g){var x=g[0],_=g[1],b=g[2];return i[0]=m[0]*x,i[1]=m[1]*x,i[2]=m[2]*x,i[3]=m[3]*x,i[4]=m[4]*_,i[5]=m[5]*_,i[6]=m[6]*_,i[7]=m[7]*_,i[8]=m[8]*b,i[9]=m[9]*b,i[10]=m[10]*b,i[11]=m[11]*b,i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function rotateX(i,m,g){var x=Math.sin(g),_=Math.cos(g),b=m[4],y=m[5],T=m[6],w=m[7],P=m[8],z=m[9],H=m[10],$=m[11];return m!==i&&(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[4]=b*_+P*x,i[5]=y*_+z*x,i[6]=T*_+H*x,i[7]=w*_+$*x,i[8]=P*_-b*x,i[9]=z*_-y*x,i[10]=H*_-T*x,i[11]=$*_-w*x,i}function rotateY(i,m,g){var x=Math.sin(g),_=Math.cos(g),b=m[0],y=m[1],T=m[2],w=m[3],P=m[8],z=m[9],H=m[10],$=m[11];return m!==i&&(i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=b*_-P*x,i[1]=y*_-z*x,i[2]=T*_-H*x,i[3]=w*_-$*x,i[8]=b*x+P*_,i[9]=y*x+z*_,i[10]=T*x+H*_,i[11]=w*x+$*_,i}function rotateZ(i,m,g){var x=Math.sin(g),_=Math.cos(g),b=m[0],y=m[1],T=m[2],w=m[3],P=m[4],z=m[5],H=m[6],$=m[7];return m!==i&&(i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=b*_+P*x,i[1]=y*_+z*x,i[2]=T*_+H*x,i[3]=w*_+$*x,i[4]=P*_-b*x,i[5]=z*_-y*x,i[6]=H*_-T*x,i[7]=$*_-w*x,i}function fromRotationTranslation(i,m,g){var x=m[0],_=m[1],b=m[2],y=m[3],T=x+x,w=_+_,P=b+b,z=x*T,H=x*w,$=x*P,W=_*w,q=_*P,ye=b*P,Ge=y*T,Ke=y*w,je=y*P;return i[0]=1-(W+ye),i[1]=H+je,i[2]=$-Ke,i[3]=0,i[4]=H-je,i[5]=1-(z+ye),i[6]=q+Ge,i[7]=0,i[8]=$+Ke,i[9]=q-Ge,i[10]=1-(z+W),i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i}function getScaling(i,m){var g=m[0],x=m[1],_=m[2],b=m[4],y=m[5],T=m[6],w=m[8],P=m[9],z=m[10];return i[0]=Math.hypot(g,x,_),i[1]=Math.hypot(b,y,T),i[2]=Math.hypot(w,P,z),i}function perspectiveNO(i,m,g,x,_){var b,y=1/Math.tan(m/2);return i[0]=y/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=y,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=_&&_!==1/0?(b=1/(x-_),i[10]=(_+x)*b,i[14]=2*_*x*b):(i[10]=-1,i[14]=-2*x),i}var y=perspectiveNO;function orthoNO(i,m,g,x,_,b,y){var T=1/(m-g),w=1/(x-_),P=1/(b-y);return i[0]=-2*T,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*w,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=2*P,i[11]=0,i[12]=(m+g)*T,i[13]=(_+x)*w,i[14]=(y+b)*P,i[15]=1,i}var T=orthoNO;function orthoZO(i,m,g,x,_,b,y){var T=1/(m-g),w=1/(x-_),P=1/(b-y);return i[0]=-2*T,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*w,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=P,i[11]=0,i[12]=(m+g)*T,i[13]=(_+x)*w,i[14]=b*P,i[15]=1,i}function lookAt(i,g,x,_){var b,y,T,w,P,z,H,$,W,q,ye=g[0],Ge=g[1],Ke=g[2],je=_[0],Xe=_[1],Ye=_[2],Ze=x[0],Je=x[1],Qe=x[2];return Math.abs(ye-Ze)<m&&Math.abs(Ge-Je)<m&&Math.abs(Ke-Qe)<m?identity(i):(H=ye-Ze,$=Ge-Je,W=Ke-Qe,b=Xe*(W*=q=1/Math.hypot(H,$,W))-Ye*($*=q),y=Ye*(H*=q)-je*W,T=je*$-Xe*H,(q=Math.hypot(b,y,T))?(b*=q=1/q,y*=q,T*=q):(b=0,y=0,T=0),w=$*T-W*y,P=W*b-H*T,z=H*y-$*b,(q=Math.hypot(w,P,z))?(w*=q=1/q,P*=q,z*=q):(w=0,P=0,z=0),i[0]=b,i[1]=w,i[2]=H,i[3]=0,i[4]=y,i[5]=P,i[6]=$,i[7]=0,i[8]=T,i[9]=z,i[10]=W,i[11]=0,i[12]=-(b*ye+y*Ge+T*Ke),i[13]=-(w*ye+P*Ge+z*Ke),i[14]=-(H*ye+$*Ge+W*Ke),i[15]=1,i)}function targetTo(i,m,g,x){var _=m[0],b=m[1],y=m[2],T=x[0],w=x[1],P=x[2],z=_-g[0],H=b-g[1],$=y-g[2],W=z*z+H*H+$*$;W>0&&(z*=W=1/Math.sqrt(W),H*=W,$*=W);var q=w*$-P*H,ye=P*z-T*$,Ge=T*H-w*z;return(W=q*q+ye*ye+Ge*Ge)>0&&(q*=W=1/Math.sqrt(W),ye*=W,Ge*=W),i[0]=q,i[1]=ye,i[2]=Ge,i[3]=0,i[4]=H*Ge-$*ye,i[5]=$*q-z*Ge,i[6]=z*ye-H*q,i[7]=0,i[8]=z,i[9]=H,i[10]=$,i[11]=0,i[12]=_,i[13]=b,i[14]=y,i[15]=1,i}function subtract$1(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i[9]=m[9]-g[9],i[10]=m[10]-g[10],i[11]=m[11]-g[11],i[12]=m[12]-g[12],i[13]=m[13]-g[13],i[14]=m[14]-g[14],i[15]=m[15]-g[15],i}var w=multiply,P=subtract$1,z=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i[9]=m[9]+g[9],i[10]=m[10]+g[10],i[11]=m[11]+g[11],i[12]=m[12]+g[12],i[13]=m[13]+g[13],i[14]=m[14]+g[14],i[15]=m[15]+g[15],i},adjoint:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=m[4],T=m[5],w=m[6],P=m[7],z=m[8],H=m[9],$=m[10],W=m[11],q=m[12],ye=m[13],Ge=m[14],Ke=m[15];return i[0]=T*($*Ke-W*Ge)-H*(w*Ke-P*Ge)+ye*(w*W-P*$),i[1]=-(x*($*Ke-W*Ge)-H*(_*Ke-b*Ge)+ye*(_*W-b*$)),i[2]=x*(w*Ke-P*Ge)-T*(_*Ke-b*Ge)+ye*(_*P-b*w),i[3]=-(x*(w*W-P*$)-T*(_*W-b*$)+H*(_*P-b*w)),i[4]=-(y*($*Ke-W*Ge)-z*(w*Ke-P*Ge)+q*(w*W-P*$)),i[5]=g*($*Ke-W*Ge)-z*(_*Ke-b*Ge)+q*(_*W-b*$),i[6]=-(g*(w*Ke-P*Ge)-y*(_*Ke-b*Ge)+q*(_*P-b*w)),i[7]=g*(w*W-P*$)-y*(_*W-b*$)+z*(_*P-b*w),i[8]=y*(H*Ke-W*ye)-z*(T*Ke-P*ye)+q*(T*W-P*H),i[9]=-(g*(H*Ke-W*ye)-z*(x*Ke-b*ye)+q*(x*W-b*H)),i[10]=g*(T*Ke-P*ye)-y*(x*Ke-b*ye)+q*(x*P-b*T),i[11]=-(g*(T*W-P*H)-y*(x*W-b*H)+z*(x*P-b*T)),i[12]=-(y*(H*Ge-$*ye)-z*(T*Ge-w*ye)+q*(T*$-w*H)),i[13]=g*(H*Ge-$*ye)-z*(x*Ge-_*ye)+q*(x*$-_*H),i[14]=-(g*(T*Ge-w*ye)-y*(x*Ge-_*ye)+q*(x*w-_*T)),i[15]=g*(T*$-w*H)-y*(x*$-_*H)+z*(x*w-_*T),i},clone:clone,copy:copy,create:create$2,determinant:function(i){var m=i[0],g=i[1],x=i[2],_=i[3],b=i[4],y=i[5],T=i[6],w=i[7],P=i[8],z=i[9],H=i[10],$=i[11],W=i[12],q=i[13],ye=i[14],Ge=i[15];return(m*y-g*b)*(H*Ge-$*ye)-(m*T-x*b)*(z*Ge-$*q)+(m*w-_*b)*(z*ye-H*q)+(g*T-x*y)*(P*Ge-$*W)-(g*w-_*y)*(P*ye-H*W)+(x*w-_*T)*(P*q-z*W)},equals:function(i,g){var x=i[0],_=i[1],b=i[2],y=i[3],T=i[4],w=i[5],P=i[6],z=i[7],H=i[8],$=i[9],W=i[10],q=i[11],ye=i[12],Ge=i[13],Ke=i[14],je=i[15],Xe=g[0],Ye=g[1],Ze=g[2],Je=g[3],Qe=g[4],et=g[5],at=g[6],ht=g[7],ft=g[8],gt=g[9],xt=g[10],vt=g[11],bt=g[12],yt=g[13],St=g[14],Tt=g[15];return Math.abs(x-Xe)<=m*Math.max(1,Math.abs(x),Math.abs(Xe))&&Math.abs(_-Ye)<=m*Math.max(1,Math.abs(_),Math.abs(Ye))&&Math.abs(b-Ze)<=m*Math.max(1,Math.abs(b),Math.abs(Ze))&&Math.abs(y-Je)<=m*Math.max(1,Math.abs(y),Math.abs(Je))&&Math.abs(T-Qe)<=m*Math.max(1,Math.abs(T),Math.abs(Qe))&&Math.abs(w-et)<=m*Math.max(1,Math.abs(w),Math.abs(et))&&Math.abs(P-at)<=m*Math.max(1,Math.abs(P),Math.abs(at))&&Math.abs(z-ht)<=m*Math.max(1,Math.abs(z),Math.abs(ht))&&Math.abs(H-ft)<=m*Math.max(1,Math.abs(H),Math.abs(ft))&&Math.abs($-gt)<=m*Math.max(1,Math.abs($),Math.abs(gt))&&Math.abs(W-xt)<=m*Math.max(1,Math.abs(W),Math.abs(xt))&&Math.abs(q-vt)<=m*Math.max(1,Math.abs(q),Math.abs(vt))&&Math.abs(ye-bt)<=m*Math.max(1,Math.abs(ye),Math.abs(bt))&&Math.abs(Ge-yt)<=m*Math.max(1,Math.abs(Ge),Math.abs(yt))&&Math.abs(Ke-St)<=m*Math.max(1,Math.abs(Ke),Math.abs(St))&&Math.abs(je-Tt)<=m*Math.max(1,Math.abs(je),Math.abs(Tt))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]&&i[9]===m[9]&&i[10]===m[10]&&i[11]===m[11]&&i[12]===m[12]&&i[13]===m[13]&&i[14]===m[14]&&i[15]===m[15]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11],i[12],i[13],i[14],i[15])},fromQuat:function(i,m){var g=m[0],x=m[1],_=m[2],b=m[3],y=g+g,T=x+x,w=_+_,P=g*y,z=x*y,H=x*T,$=_*y,W=_*T,q=_*w,ye=b*y,Ge=b*T,Ke=b*w;return i[0]=1-H-q,i[1]=z+Ke,i[2]=$-Ge,i[3]=0,i[4]=z-Ke,i[5]=1-P-q,i[6]=W+ye,i[7]=0,i[8]=$+Ge,i[9]=W-ye,i[10]=1-P-H,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromQuat2:function(i,m){var x=new g(3),_=-m[0],b=-m[1],y=-m[2],T=m[3],w=m[4],P=m[5],z=m[6],H=m[7],$=_*_+b*b+y*y+T*T;return $>0?(x[0]=2*(w*T+H*_+P*y-z*b)/$,x[1]=2*(P*T+H*b+z*_-w*y)/$,x[2]=2*(z*T+H*y+w*b-P*_)/$):(x[0]=2*(w*T+H*_+P*y-z*b),x[1]=2*(P*T+H*b+z*_-w*y),x[2]=2*(z*T+H*y+w*b-P*_)),fromRotationTranslation(i,m,x),i},fromRotation:function(i,g,x){var _,b,y,T=x[0],w=x[1],P=x[2],z=Math.hypot(T,w,P);return z<m?null:(T*=z=1/z,w*=z,P*=z,_=Math.sin(g),y=1-(b=Math.cos(g)),i[0]=T*T*y+b,i[1]=w*T*y+P*_,i[2]=P*T*y-w*_,i[3]=0,i[4]=T*w*y-P*_,i[5]=w*w*y+b,i[6]=P*w*y+T*_,i[7]=0,i[8]=T*P*y+w*_,i[9]=w*P*y-T*_,i[10]=P*P*y+b,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i)},fromRotationTranslation:fromRotationTranslation,fromRotationTranslationScale:function(i,m,g,x){var _=m[0],b=m[1],y=m[2],T=m[3],w=_+_,P=b+b,z=y+y,H=_*w,$=_*P,W=_*z,q=b*P,ye=b*z,Ge=y*z,Ke=T*w,je=T*P,Xe=T*z,Ye=x[0],Ze=x[1],Je=x[2];return i[0]=(1-(q+Ge))*Ye,i[1]=($+Xe)*Ye,i[2]=(W-je)*Ye,i[3]=0,i[4]=($-Xe)*Ze,i[5]=(1-(H+Ge))*Ze,i[6]=(ye+Ke)*Ze,i[7]=0,i[8]=(W+je)*Je,i[9]=(ye-Ke)*Je,i[10]=(1-(H+q))*Je,i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i},fromRotationTranslationScaleOrigin:function(i,m,g,x,_){var b=m[0],y=m[1],T=m[2],w=m[3],P=b+b,z=y+y,H=T+T,$=b*P,W=b*z,q=b*H,ye=y*z,Ge=y*H,Ke=T*H,je=w*P,Xe=w*z,Ye=w*H,Ze=x[0],Je=x[1],Qe=x[2],et=_[0],at=_[1],ht=_[2],ft=(1-(ye+Ke))*Ze,gt=(W+Ye)*Ze,xt=(q-Xe)*Ze,vt=(W-Ye)*Je,bt=(1-($+Ke))*Je,yt=(Ge+je)*Je,St=(q+Xe)*Qe,Tt=(Ge-je)*Qe,wt=(1-($+ye))*Qe;return i[0]=ft,i[1]=gt,i[2]=xt,i[3]=0,i[4]=vt,i[5]=bt,i[6]=yt,i[7]=0,i[8]=St,i[9]=Tt,i[10]=wt,i[11]=0,i[12]=g[0]+et-(ft*et+vt*at+St*ht),i[13]=g[1]+at-(gt*et+bt*at+Tt*ht),i[14]=g[2]+ht-(xt*et+yt*at+wt*ht),i[15]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=m[1],i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=m[2],i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=m[0],i[13]=m[1],i[14]=m[2],i[15]=1,i},fromValues:fromValues$1,fromXRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=x,i[6]=g,i[7]=0,i[8]=0,i[9]=-g,i[10]=x,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromYRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=0,i[2]=-g,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=g,i[9]=0,i[10]=x,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromZRotation:function(i,m){var g=Math.sin(m),x=Math.cos(m);return i[0]=x,i[1]=g,i[2]=0,i[3]=0,i[4]=-g,i[5]=x,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},frustum:function(i,m,g,x,_,b,y){var T=1/(g-m),w=1/(_-x),P=1/(b-y);return i[0]=2*b*T,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*b*w,i[6]=0,i[7]=0,i[8]=(g+m)*T,i[9]=(_+x)*w,i[10]=(y+b)*P,i[11]=-1,i[12]=0,i[13]=0,i[14]=y*b*2*P,i[15]=0,i},getRotation:function(i,m){var x=new g(3);getScaling(x,m);var _=1/x[0],b=1/x[1],y=1/x[2],T=m[0]*_,w=m[1]*b,P=m[2]*y,z=m[4]*_,H=m[5]*b,$=m[6]*y,W=m[8]*_,q=m[9]*b,ye=m[10]*y,Ge=T+H+ye,Ke=0;return Ge>0?(Ke=2*Math.sqrt(Ge+1),i[3]=.25*Ke,i[0]=($-q)/Ke,i[1]=(W-P)/Ke,i[2]=(w-z)/Ke):T>H&&T>ye?(Ke=2*Math.sqrt(1+T-H-ye),i[3]=($-q)/Ke,i[0]=.25*Ke,i[1]=(w+z)/Ke,i[2]=(W+P)/Ke):H>ye?(Ke=2*Math.sqrt(1+H-T-ye),i[3]=(W-P)/Ke,i[0]=(w+z)/Ke,i[1]=.25*Ke,i[2]=($+q)/Ke):(Ke=2*Math.sqrt(1+ye-T-H),i[3]=(w-z)/Ke,i[0]=(W+P)/Ke,i[1]=($+q)/Ke,i[2]=.25*Ke),i},getScaling:getScaling,getTranslation:function(i,m){return i[0]=m[12],i[1]=m[13],i[2]=m[14],i},identity:identity,invert:invert,lookAt:lookAt,mul:w,multiply:multiply,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i[9]=m[9]*g,i[10]=m[10]*g,i[11]=m[11]*g,i[12]=m[12]*g,i[13]=m[13]*g,i[14]=m[14]*g,i[15]=m[15]*g,i},multiplyScalarAndAdd:function(i,m,g,x){return i[0]=m[0]+g[0]*x,i[1]=m[1]+g[1]*x,i[2]=m[2]+g[2]*x,i[3]=m[3]+g[3]*x,i[4]=m[4]+g[4]*x,i[5]=m[5]+g[5]*x,i[6]=m[6]+g[6]*x,i[7]=m[7]+g[7]*x,i[8]=m[8]+g[8]*x,i[9]=m[9]+g[9]*x,i[10]=m[10]+g[10]*x,i[11]=m[11]+g[11]*x,i[12]=m[12]+g[12]*x,i[13]=m[13]+g[13]*x,i[14]=m[14]+g[14]*x,i[15]=m[15]+g[15]*x,i},ortho:T,orthoNO:orthoNO,orthoZO:orthoZO,perspective:y,perspectiveFromFieldOfView:function(i,m,g,x){var _=Math.tan(m.upDegrees*Math.PI/180),b=Math.tan(m.downDegrees*Math.PI/180),y=Math.tan(m.leftDegrees*Math.PI/180),T=Math.tan(m.rightDegrees*Math.PI/180),w=2/(y+T),P=2/(_+b);return i[0]=w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=P,i[6]=0,i[7]=0,i[8]=-(y-T)*w*.5,i[9]=(_-b)*P*.5,i[10]=x/(g-x),i[11]=-1,i[12]=0,i[13]=0,i[14]=x*g/(g-x),i[15]=0,i},perspectiveNO:perspectiveNO,perspectiveZO:function(i,m,g,x,_){var b,y=1/Math.tan(m/2);return i[0]=y/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=y,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=_&&_!==1/0?(b=1/(x-_),i[10]=_*b,i[14]=_*x*b):(i[10]=-1,i[14]=-x),i},rotate:function(i,g,x,_){var b,y,T,w,P,z,H,$,W,q,ye,Ge,Ke,je,Xe,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt=_[0],vt=_[1],bt=_[2],yt=Math.hypot(xt,vt,bt);return yt<m?null:(xt*=yt=1/yt,vt*=yt,bt*=yt,b=Math.sin(x),T=1-(y=Math.cos(x)),w=g[0],P=g[1],z=g[2],H=g[3],$=g[4],W=g[5],q=g[6],ye=g[7],Ge=g[8],Ke=g[9],je=g[10],Xe=g[11],Ye=xt*xt*T+y,Ze=vt*xt*T+bt*b,Je=bt*xt*T-vt*b,Qe=xt*vt*T-bt*b,et=vt*vt*T+y,at=bt*vt*T+xt*b,ht=xt*bt*T+vt*b,ft=vt*bt*T-xt*b,gt=bt*bt*T+y,i[0]=w*Ye+$*Ze+Ge*Je,i[1]=P*Ye+W*Ze+Ke*Je,i[2]=z*Ye+q*Ze+je*Je,i[3]=H*Ye+ye*Ze+Xe*Je,i[4]=w*Qe+$*et+Ge*at,i[5]=P*Qe+W*et+Ke*at,i[6]=z*Qe+q*et+je*at,i[7]=H*Qe+ye*et+Xe*at,i[8]=w*ht+$*ft+Ge*gt,i[9]=P*ht+W*ft+Ke*gt,i[10]=z*ht+q*ft+je*gt,i[11]=H*ht+ye*ft+Xe*gt,g!==i&&(i[12]=g[12],i[13]=g[13],i[14]=g[14],i[15]=g[15]),i)},rotateX:rotateX,rotateY:rotateY,rotateZ:rotateZ,scale:scale,set:function(i,m,g,x,_,b,y,T,w,P,z,H,$,W,q,ye,Ge){return i[0]=m,i[1]=g,i[2]=x,i[3]=_,i[4]=b,i[5]=y,i[6]=T,i[7]=w,i[8]=P,i[9]=z,i[10]=H,i[11]=$,i[12]=W,i[13]=q,i[14]=ye,i[15]=Ge,i},str:function(i){return"mat4("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+","+i[9]+","+i[10]+","+i[11]+","+i[12]+","+i[13]+","+i[14]+","+i[15]+")"},sub:P,subtract:subtract$1,targetTo:targetTo,translate:translate,transpose:function(i,m){if(i===m){var g=m[1],x=m[2],_=m[3],b=m[6],y=m[7],T=m[11];i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=g,i[6]=m[9],i[7]=m[13],i[8]=x,i[9]=b,i[11]=m[14],i[12]=_,i[13]=y,i[14]=T}else i[0]=m[0],i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=m[1],i[5]=m[5],i[6]=m[9],i[7]=m[13],i[8]=m[2],i[9]=m[6],i[10]=m[10],i[11]=m[14],i[12]=m[3],i[13]=m[7],i[14]=m[11],i[15]=m[15];return i}});function create$1(){var i=new g(3);return g!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i}function length(i){var m=i[0],g=i[1],x=i[2];return Math.hypot(m,g,x)}function fromValues(i,m,x){var _=new g(3);return _[0]=i,_[1]=m,_[2]=x,_}function set(i,m,g,x){return i[0]=m,i[1]=g,i[2]=x,i}function subtract(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i}function distance(i,m){var g=m[0]-i[0],x=m[1]-i[1],_=m[2]-i[2];return Math.hypot(g,x,_)}function normalize(i,m){var g=m[0],x=m[1],_=m[2],b=g*g+x*x+_*_;return b>0&&(b=1/Math.sqrt(b)),i[0]=m[0]*b,i[1]=m[1]*b,i[2]=m[2]*b,i}function dot(i,m){return i[0]*m[0]+i[1]*m[1]+i[2]*m[2]}function lerp$1(i,m,g,x){var _=m[0],b=m[1],y=m[2];return i[0]=_+x*(g[0]-_),i[1]=b+x*(g[1]-b),i[2]=y+x*(g[2]-y),i}function transformMat4(i,m,g){var x=m[0],_=m[1],b=m[2],y=g[3]*x+g[7]*_+g[11]*b+g[15];return y=y||1,i[0]=(g[0]*x+g[4]*_+g[8]*b+g[12])/y,i[1]=(g[1]*x+g[5]*_+g[9]*b+g[13])/y,i[2]=(g[2]*x+g[6]*_+g[10]*b+g[14])/y,i}create$1();var sqrDist=function(i,m){var g=m[0]-i[0],x=m[1]-i[1];return g*g+x*x};!function(){var i,m=(i=new g(2),g!=Float32Array&&(i[0]=0,i[1]=0),i)}();const H=create$2(),computeViewFrustumPlanes=(i,m)=>{multiply(H,i,m);const g=[[H[3]-H[0],H[7]-H[4],H[11]-H[8],H[15]-H[12]],[H[3]+H[0],H[7]+H[4],H[11]+H[8],H[15]+H[12]],[H[3]+H[1],H[7]+H[5],H[11]+H[9],H[15]+H[13]],[H[3]-H[1],H[7]-H[5],H[11]-H[9],H[15]-H[13]],[H[3]-H[2],H[7]-H[6],H[11]-H[10],H[15]-H[14]],[H[3]+H[2],H[7]+H[6],H[11]+H[10],H[15]+H[14]]];for(let i=0;i<6;i++){const m=g[i],x=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]);m[0]/=x,m[1]/=x,m[2]/=x,m[3]/=x}return g},formatBytes=(i,m=2)=>{if(("number"!=typeof i||i<0||Number.isNaN(i)||!Number.isInteger(i))&&consoleAndThrowError("Invalid input:'bytes' must be a uint"),0===i)return"0 Bytes";const g=m<0?0:m,x=Math.floor(Math.log(i)/Math.log(1024));return parseFloat((i/Math.pow(1024,x)).toFixed(g))+" "+["Bytes","KB","MB","GB"][x]},mat4ToEuler=(i,m,g)=>{m=m||[0,0,0],g=g||"XYZ";let x=i[0],_=i[4],b=i[8],y=i[1],T=i[5],w=i[9],P=i[2],z=i[6],H=i[10];return"XYZ"===g?(m[1]=Math.asin(clamp(b,-1,1)),Math.abs(b)<.99999?(m[0]=Math.atan2(-w,H),m[2]=Math.atan2(-_,x)):(m[0]=Math.atan2(z,T),m[2]=0)):"YXZ"===g?(m[0]=Math.asin(-clamp(w,-1,1)),Math.abs(w)<.99999?(m[1]=Math.atan2(b,H),m[2]=Math.atan2(y,T)):(m[1]=Math.atan2(-P,x),m[2]=0)):"ZXY"===g?(m[0]=Math.asin(clamp(z,-1,1)),Math.abs(z)<.99999?(m[1]=Math.atan2(-P,H),m[2]=Math.atan2(-_,T)):(m[1]=0,m[2]=Math.atan2(y,x))):"ZYX"===g?(m[1]=Math.asin(-clamp(P,-1,1)),Math.abs(P)<.99999?(m[0]=Math.atan2(z,H),m[2]=Math.atan2(y,x)):(m[0]=0,m[2]=Math.atan2(-_,T))):"YZX"===g?(m[2]=Math.asin(clamp(y,-1,1)),Math.abs(y)<.99999?(m[0]=Math.atan2(-w,T),m[1]=Math.atan2(-P,x)):(m[0]=0,m[1]=Math.atan2(b,H))):"XZY"===g&&(m[2]=Math.asin(-clamp(_,-1,1)),Math.abs(_)<.99999?(m[0]=Math.atan2(z,T),m[1]=Math.atan2(b,x)):(m[0]=Math.atan2(-w,H),m[1]=0)),m};let clamp=function(i,m,g){return Math.max(m,Math.min(g,i))};const quaternionToRotationMat4=(i,m)=>{let g=i[0],x=i[1],_=i[2],b=i[3],y=g+g,T=x+x,w=_+_,P=g*y,z=g*T,H=g*w,$=x*T,W=x*w,q=_*w,ye=b*y,Ge=b*T,Ke=b*w;return m[0]=1-($+q),m[4]=z-Ke,m[8]=H+Ge,m[1]=z+Ke,m[5]=1-(P+q),m[9]=W-ye,m[2]=H-Ge,m[6]=W+ye,m[10]=1-(P+$),m[3]=0,m[7]=0,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1,m};function sortTransparentObjects(i,m){const g={},{x:x,y:_,z:b}=i;return m.sort((i,m)=>{if(i=i.mesh,m=m.mesh,!g[i.uuid]){const m=i.x-x,y=i.y-_,T=i.z-b;g[i.uuid]=m*m+y*y+T*T}if(!g[m.uuid]){const i=m.x-x,y=m.y-_,T=m.z-b;g[m.uuid]=i*i+y*y+T*T}return g[m.uuid]-g[i.uuid]})}class AABB{minX;maxX;minY;maxY;minZ;maxZ;centerX;centerY;centerZ;xSize;ySize;zSize;geometryRadius;constructor(i,m,g,x,_,b){this.minX=i,this.maxX=m,this.minY=g,this.maxY=x,this.minZ=_,this.maxZ=b,this.centerX=(m+i)/2,this.centerY=(x+g)/2,this.centerZ=(b+_)/2,this.xSize=m-i,this.ySize=x-g,this.zSize=b-_,this.geometryRadius=Math.sqrt((this.xSize/2)**2+(this.ySize/2)**2+(this.zSize/2)**2)}intersects(i){return i instanceof AABB||consoleAndThrowError("allow only AABB instance"),this.minX<=i.maxX&&this.maxX>=i.minX&&this.minY<=i.maxY&&this.maxY>=i.minY&&this.minZ<=i.maxZ&&this.maxZ>=i.minZ}contains(i,m,g){if(Array.isArray(i)){const[m,g,x]=i;return m>=this.minX&&m<=this.maxX&&g>=this.minY&&g<=this.maxY&&x>=this.minZ&&x<=this.maxZ}return i>=this.minX&&i<=this.maxX&&m>=this.minY&&m<=this.maxY&&g>=this.minZ&&g<=this.maxZ}clone(){return new AABB(this.minX,this.maxX,this.minY,this.maxY,this.minZ,this.maxZ)}}const calculateGeometryAABB=i=>{if(!i||!i.data||0===i.vertexCount)return new AABB(0,0,0,0,0,0);const m=i.stride,g=i.data,x=i.vertexCount;let _=1/0,b=1/0,y=1/0,T=-1/0,w=-1/0,P=-1/0,z=0;for(;z<=x-4;z+=4){let i=z*m;const x=g[i],H=g[i+1],$=g[i+2];i=(z+1)*m;const W=g[i],q=g[i+1],ye=g[i+2];i=(z+2)*m;const Ge=g[i],Ke=g[i+1],je=g[i+2];i=(z+3)*m;const Xe=g[i],Ye=g[i+1],Ze=g[i+2];x<_&&(_=x),W<_&&(_=W),Ge<_&&(_=Ge),Xe<_&&(_=Xe),x>T&&(T=x),W>T&&(T=W),Ge>T&&(T=Ge),Xe>T&&(T=Xe),H<b&&(b=H),q<b&&(b=q),Ke<b&&(b=Ke),Ye<b&&(b=Ye),H>w&&(w=H),q>w&&(w=q),Ke>w&&(w=Ke),Ye>w&&(w=Ye),$<y&&(y=$),ye<y&&(y=ye),je<y&&(y=je),Ze<y&&(y=Ze),$>P&&(P=$),ye>P&&(P=ye),je>P&&(P=je),Ze>P&&(P=Ze)}for(;z<x;z++){const i=z*m,x=g[i],H=g[i+1],$=g[i+2];x<_&&(_=x),H<b&&(b=H),$<y&&(y=$),x>T&&(T=x),H>w&&(w=H),$>P&&(P=$)}return new AABB(_,T,b,w,y,P)};create$1(),create$1();const calculateMeshAABB=i=>{if(!i||!i._geometry)return new AABB(0,0,0,0,0,0);const m=i._geometry.volume,{minX:g,maxX:x,minY:_,maxY:b,minZ:y,maxZ:T}=m;if(0===g&&0===x&&0===_&&0===b&&0===y&&0===T)return new AABB(0,0,0,0,0,0);let w=1/0,P=1/0,z=1/0,H=-1/0,$=-1/0,W=-1/0;const q=i.modelMatrix;for(let i=0;i<8;i++){const m=1&i?x:g,ye=2&i?b:_,Ge=4&i?T:y,Ke=q[0]*m+q[4]*ye+q[8]*Ge+q[12],je=q[1]*m+q[5]*ye+q[9]*Ge+q[13],Xe=q[2]*m+q[6]*ye+q[10]*Ge+q[14];Ke<w&&(w=Ke),je<P&&(P=je),Xe<z&&(z=Xe),Ke>H&&(H=Ke),je>$&&($=je),Xe>W&&(W=Xe)}return new AABB(w,H,P,$,z,W)},defineProperty=(i,m,g,x,..._)=>{Object.defineProperty(i.prototype,m,g(m,x,..._))},defineProperties=i=>(m,g)=>{g.forEach(g=>{if(Array.isArray(g)){const[x,_,...b]=g;defineProperty(m,x,i,_,...b)}else defineProperty(m,g,i)})},createDefineByPreset=i=>{const m={};return Object.keys(i).forEach(g=>{const[x,_]=i[g];Object.assign(m,(i=>m=>m.reduce((m,g)=>({...m,[g]:i}),{}))(x)(Object.values(_)))}),{defineByPreset:(i,g)=>((i,m,g)=>{m.forEach(m=>{if(Array.isArray(m)){const[x,_,...b]=m,y=g[x];y||consoleAndThrowError(x,"is a key not defined in Define Preset."),defineProperty(i,x,y,_,...b)}else{const x=g[m];x||consoleAndThrowError(m,"is a key not defined in Define Preset."),defineProperty(i,m,x)}})})(i,g,m)}},$={enumerable:!0,configurable:!1};function createSetter$5(i,m,g){return function(x){this[m]=x;const{gpuRenderInfo:_}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=_;g.writeOnlyBuffer(m.members[i],x?1:0),this.dirtyPipeline=!0}else if(_){const{vertexUniformInfo:m,vertexUniformBuffer:g}=_;m.members[i]&&(g.writeOnlyBuffer(m.members[i],x?1:0),this.dirtyPipeline=!0)}}}function defineBoolean(i,m=!1,g=!0){const x=Symbol(i);return{get:function(){return void 0===this[x]&&(this[x]=m),this[x]},set:createSetter$5(i,x,g),...$}}function createSetter$4(i,m,g,x=0,_){return function(b){void 0!==x&&b<x&&(console.warn(`Value for ${i} is below the minimum (${x}). Received:${b}. Adjusted to ${x}.`),b=x),void 0!==_&&b>_&&(console.warn(`Value for ${i} exceeds the maximum (${_}). Received:${b}. Adjusted to ${_}.`),b=_),validatePositiveNumberRange(b),this[m]=b;const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=y;x.writeOnlyBuffer(g.members[i],this[m])}else if(y){const{vertexUniformInfo:g,vertexUniformBuffer:x}=y;x.writeOnlyBuffer(g.members[i],this[m])}}}function definePositiveNumberRange(i,m=1,g=!0,x=0,_){const b=Symbol(i);return{get:function(){return void 0===this[b]&&(this[b]=m),this[b]},set:createSetter$4(i,b,g,x,_),...$}}function createSetter$3(i,m,g,x=0,_){return function(b){validateUintRange(b),void 0!==x&&b<x&&(console.warn(`Value for ${i} is below the minimum (${x}). Received:${b}. Adjusted to ${x}.`),b=x),void 0!==_&&b>_&&(console.warn(`Value for ${i} exceeds the maximum (${_}). Received:${b}. Adjusted to ${_}.`),b=_),this[m]=b;const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:x}=y;x.writeOnlyBuffer(g.members[i],this[m])}else if(y){const{vertexUniformInfo:g,vertexUniformBuffer:x}=y;x.writeOnlyBuffer(g.members[i],this[m])}}}function defineUintRange(i,m=0,g=!0,x=0,_){const b=Symbol(i);return{get:function(){return void 0===this[b]&&(this[b]=m),this[b]},set:createSetter$3(i,b,g,x,_),...$}}function createSetter$2(i,m,g){return function(x){this[m]=x;const{gpuRenderInfo:_}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=_;g.writeOnlyBuffer(m.members[i],x)}else if(_){const{vertexUniformInfo:m,vertexUniformBuffer:g}=_;g.writeOnlyBuffer(m.members[i],x)}}}function defineVector(i,m,g=!0){const x=Symbol(i);return{get:function(){return void 0===this[x]&&(this[x]=m),this[x]},set:createSetter$2(i,x,g),...$}}function defineProperty_boolean(i,m=!1){return defineBoolean(i,m,!1)}function defineProperty_uintRange(i,m=0,g,x){return defineUintRange(i,m,!1,g,x)}function defineProperty_PositiveNumberRange$1(i,m=1,g,x){return definePositiveNumberRange(i,m,!1,g,x)}Object.freeze($),Object.freeze(defineBoolean),Object.freeze(definePositiveNumberRange),Object.freeze(defineUintRange),Object.freeze(defineVector);const W={USE_BILLBOARD_PERSPECTIVE:"useBillboardPerspective",USE_BILLBOARD:"useBillboard",RECEIVE_SHADOW:"receiveShadow"},q={BILLBOARD_FIXED_SCALE:"billboardFixedScale"},ye={},Ge={...createDefineByPreset({defineBoolean:[defineProperty_boolean,W],defineUint:[defineProperty_uintRange,ye],definePositiveNumber:[defineProperty_PositiveNumberRange$1,q]}),defineBoolean:defineProperties(defineProperty_boolean),defineUint:defineProperties(defineProperty_uintRange),definePositiveNumber:defineProperties(defineProperty_PositiveNumberRange$1),defineVec4:defineProperties(function(i,m=[0,0,0,0]){return defineVector(i,m,!1)}),defineVec3:defineProperties(function(i,m=[0,0,0]){return defineVector(i,m,!1)}),defineVec2:defineProperties(function(i,m=[0,0]){return defineVector(i,m,!1)}),PRESET_BOOLEAN:W,PRESET_POSITIVE_NUMBER:q,PRESET_UINT:ye,PRESET_SAMPLER:{},PRESET_TEXTURE:{},PRESET_CUBE_TEXTURE:{},PRESET_VEC2:{},PRESET_VEC3:{},PRESET_VEC4:{},PRESET_COLOR_RGB:{}};Object.freeze(Ge);class DrawBufferManager{static#u;#l;#c=[];#h=[];#f;#d=0;#m=0;#p;#g=new Set;static#x=5;constructor(i){this.#l=i,this.#_()}static getInstance(i){return DrawBufferManager.#u||(DrawBufferManager.#u=new DrawBufferManager(i)),DrawBufferManager.#u}#_(){this.#v(),this.#b()}#v(){const i=this.#l.gpuDevice.limits;this.#p=Math.floor(.9*Math.min(i.maxBufferSize||268435456,i.maxStorageBufferBindingSize||134217728)),this.#f=Math.floor(this.#p/(4*DrawBufferManager.#x))}#b(){this.#y()}#y(){const i=this.#f*DrawBufferManager.#x*4,m=this.#l.gpuDevice.createBuffer({size:i,usage:GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_DST,label:`DrawBuffer_${this.#c.length}`}),g=new Uint32Array(this.#f*DrawBufferManager.#x);return this.#c.push(m),this.#h.push(g),this.#c.length-1}allocateDrawCommand(i){this.#m>=this.#f&&(this.#d=this.#y(),this.#m=0),this.#g.add(this.#d);const m={bufferIndex:this.#d,commandOffset:this.#m*DrawBufferManager.#x,buffer:this.#c[this.#d],dataArray:this.#h[this.#d]};return this.#m++,m}setIndexedIndirectCommand(i,m,g=1,x=0,_=0,b=0){const y=i.commandOffset,T=i.dataArray;T[y]=m,T[y+1]=g,T[y+2]=x,T[y+3]=_,T[y+4]=b}setIndirectCommand(i,m,g=1,x=0,_=0){const b=i.commandOffset,y=i.dataArray;y[b]=m,y[b+1]=g,y[b+2]=x,y[b+3]=_}updateSingleCommand(i){const m=this.#c[i.bufferIndex],g=this.#h[i.bufferIndex],x=DrawBufferManager.#x,_=4*i.commandOffset,b=x;this.#l.gpuDevice.queue.writeBuffer(m,_,g,i.commandOffset,b)}getTotalCommandCount(){let i=0;for(const m of this.#g)m===this.#d?i+=this.#m:i+=this.#f;return i}getMemoryUsage(){const i=this.#c.length,m=this.#g.size,g=i*this.#p,x=m*this.#p;return{totalBuffers:i,usedBuffers:m,maxCommandsPerBuffer:this.#f,totalMemory:formatBytes(g),usedMemory:formatBytes(x),totalCommands:this.getTotalCommandCount()}}}class VertexGPURenderInfo{vertexShaderModule;vertexShaderSourceVariant;vertexShaderVariantConditionalBlocks;vertexStructInfo;vertexUniformInfo;vertexBindGroupLayout;vertexUniformBindGroup;vertexUniformBuffer;pipeline;shadowPipeline;pickingPipeline;constructor(i,m,g,x,_,b,y,T,w,P){this.vertexShaderModule=i,this.vertexShaderSourceVariant=m,this.vertexShaderVariantConditionalBlocks=g,this.vertexUniformInfo=x,this.vertexBindGroupLayout=_,this.vertexUniformBindGroup=y,this.vertexUniformBuffer=b,this.pipeline=T,this.shadowPipeline=w,this.pickingPipeline=P}}Object.freeze(VertexGPURenderInfo);class OBB{centerX;centerY;centerZ;halfExtentX;halfExtentY;halfExtentZ;orientation;center;halfExtents;geometryRadius;constructor(i,m,g){this.centerX=i[0],this.centerY=i[1],this.centerZ=i[2],this.halfExtentX=m[0],this.halfExtentY=m[1],this.halfExtentZ=m[2],this.center=[this.centerX,this.centerY,this.centerZ],this.halfExtents=[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation=clone(g),this.geometryRadius=Math.sqrt(this.halfExtentX**2+this.halfExtentY**2+this.halfExtentZ**2)}intersects(i){i instanceof OBB||consoleAndThrowError("allow only OBB instance");const m=subtract(create$1(),this.center,i.center);if(length(m)>this.geometryRadius+i.geometryRadius)return!1;const g=[...this.#S(),...i.#S()];for(const x of g){const g=this.#T(x),_=i.#T(x);if(Math.abs(dot(m,x))>g+_)return!1}return!0}contains(i,m,g){let x;x=Array.isArray(i)?fromValues(i[0],i[1],i[2]):fromValues(i,m,g);const _=subtract(create$1(),x,this.center),b=this.#S();for(let i=0;i<3;i++){const m=dot(_,b[i]);if(Math.abs(m)>this.halfExtents[i])return!1}return!0}clone(){return new OBB([this.centerX,this.centerY,this.centerZ],[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation)}#S(){return[fromValues(this.orientation[0],this.orientation[1],this.orientation[2]),fromValues(this.orientation[4],this.orientation[5],this.orientation[6]),fromValues(this.orientation[8],this.orientation[9],this.orientation[10])]}#T(i){const m=this.#S();return Math.abs(dot(m[0],i))*this.halfExtentX+Math.abs(dot(m[1],i))*this.halfExtentY+Math.abs(dot(m[2],i))*this.halfExtentZ}}const calculateMeshOBB=i=>{if(!i||!i._geometry){const i=create$2();return new OBB([0,0,0],[0,0,0],i)}const m=i._geometry.volume;if(0===m.minX&&0===m.maxX&&0===m.minY&&0===m.maxY&&0===m.minZ&&0===m.maxZ){const i=create$2();return new OBB([0,0,0],[0,0,0],i)}const g=[m.centerX,m.centerY,m.centerZ],x=[(m.maxX-m.minX)/2,(m.maxY-m.minY)/2,(m.maxZ-m.minZ)/2],_=create$1();transformMat4(_,g,i.modelMatrix);const b=create$2();copy(b,i.modelMatrix),b[12]=0,b[13]=0,b[14]=0;const y=[create$1(),create$1(),create$1()],T=[0,0,0];for(let i=0;i<3;i++){const m=[0,0,0];m[i]=x[i],transformMat4(y[i],m,b),T[i]=length(y[i]),normalize(y[i],y[i])}const w=create$2();return w[0]=y[0][0],w[1]=y[0][1],w[2]=y[0][2],w[3]=0,w[4]=y[1][0],w[5]=y[1][1],w[6]=y[1][2],w[7]=0,w[8]=y[2][0],w[9]=y[2][1],w[10]=y[2][2],w[11]=0,w[12]=0,w[13]=0,w[14]=0,w[15]=1,new OBB([_[0],_[1],_[2]],T,w)};class InstanceIdGenerator{static idMaps=new Map;static getNextId(i){let m=this.idMaps.get(i)||0;return this.idMaps.set(i,m+1),m}}Object.freeze(InstanceIdGenerator);const uuidToUint=i=>{const m=i.replace(/-/g,"").substring(0,8);return parseInt(m,16)};class GeometryGPURenderInfo{buffers;constructor(i){this.buffers=i}}Object.freeze(GeometryGPURenderInfo);const validateRedGPUContext=i=>{if("RedGPUContext"!==i?.constructor?.name){return consoleAndThrowError(`from ${i?.constructor?.name}:requires a RedGPUContext instance,but received:${i}`),!1}return!0},createUUID=()=>{const i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let m,g=0,x=["","","","","-","","","","-","4","","","-","","","","-","","","","","","-","","","","","","","","","","","",""];for(;g<36;)""===x[g]&&(m=16*Math.random()|0,x[g]=i[19===g?3&m|8:15&m]),g++;return x.join("")};class ResourceBase{#w=createUUID();#l;#M;#C="";#R;#P;#E=[];#B;constructor(i,m){validateRedGPUContext(i),this.#B=m,this.#l=i,this.#M=i.gpuDevice}get cacheKey(){return this.#P}set cacheKey(i){this.#P=i}get resourceManagerKey(){return this.#B}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get uuid(){return this.#w}get gpuDevice(){return this.#M}get redGPUContext(){return this.#l}__addDirtyPipelineListener(i){this.#I(!0),this.#E.push(i)}__removeDirtyPipelineListener(i){const m=this.#E.indexOf(i);m>-1&&(this.#E.splice(m,1),this.#I(!1))}__fireListenerList(i=!1){for(const i of this.#E)i(this);i&&(this.#E.length=0)}#I(i){const{resourceManager:m}=this.#l;if("Sampler"!==this.constructor.name&&m){const g=m[this.#B];g||consoleAndThrowError("need managedStateKey",this.constructor.name);const x=g?.table.get(this.cacheKey);x&&(i?x.useNum++:x.useNum--)}}}class Geometry extends ResourceBase{gpuRenderInfo;#L;#D;#U;constructor(i,m,g){super(i),this.#A(m),this.#k(g);const{interleavedStruct:x}=this.#L;this.gpuRenderInfo=new GeometryGPURenderInfo([{arrayStride:x.arrayStride,attributes:x.attributes}])}get vertexBuffer(){return this.#L}get indexBuffer(){return this.#D}get volume(){return this.#U||(this.#U=calculateGeometryAABB(this.#L)),this.#U}#A(i){const m=this.#L;this.#L=i,m&&m.__removeDirtyPipelineListener(this.#O),i&&i.__addDirtyPipelineListener(this.#O),this.#U=null}#k(i){const m=this.#D;this.#D=i,m&&m.__removeDirtyPipelineListener(this.#G),i&&i.__addDirtyPipelineListener(this.#G)}#O(){this.__fireListenerList()}#G(){this.__fireListenerList()}}Object.freeze(Geometry);const Ke={POINT_LIST:"point-list",LINE_LIST:"line-list",LINE_STRIP:"line-strip",TRIANGLE_LIST:"triangle-list",TRIANGLE_STRIP:"triangle-strip"};function defineColorRGB(i,m="#fff",g=!0){const x=Symbol(i);return{get:function(){if(void 0===this[x]){let _=255,b=255,y=255;if(isHexColor(m)){const i=convertHexToRgb(m);_=i.r,b=i.g,y=i.b}this[x]=new ColorRGB(_,b,y,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=m;_.writeOnlyBuffer(g.members[i],this[x].rgbNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:_}=m;_.writeOnlyBuffer(g.members[i],this[x].rgbNormal)}})}return this[x]},...$}}function defineColorRGBA(i,m="#fff",g=!0){const x=Symbol(i);return{get:function(){if(void 0===this[x]){let _=255,b=255,y=255,T=1;if(isHexColor(m)){const i=convertHexToRgb(m);_=i.r,b=i.g,y=i.b}this[x]=new ColorRGBA(_,b,y,T,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=m;_.writeOnlyBuffer(g.members[i],this[x].rgbaNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:_}=m;_.writeOnlyBuffer(g.members[i],this[x].rgbaNormal)}})}return this[x]},...$}}function createSetter$1(i,m,g){const x=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const _=this[m];this[m]=i,this.updateTexture(_,i);const{gpuRenderInfo:b}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=b;x in this?this[x]=!!i:m.members[x]&&g.writeOnlyBuffer(m.members[x],i?1:0)}else if(b){const{vertexUniformInfo:m,vertexUniformBuffer:g}=b;m.members[x]&&g.writeOnlyBuffer(g.members[x],i?1:0)}}}function defineCubeTexture(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter$1(i,g,m),...$}}function defineSampler(i){const m=Symbol(i);return{get:function(){return this[m]},set:function(i){const g=this[m];this[m]=i,this.updateSampler(g,i)},...$}}function createSetter(i,m,g){const x=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const _=this[m];this[m]=i,this.updateTexture(_,i);const{gpuRenderInfo:b}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=b;x in this?this[x]=!!i:m.members[x]&&g.writeOnlyBuffer(m.members[x],i?1:0)}else if(b){const{vertexUniformInfo:m,vertexUniformBuffer:g}=b;m.members[x]&&g.writeOnlyBuffer(g.members[x],i?1:0)}}}function defineTexture$1(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter(i,g,m),...$}}function defineProperty_vec4(i,m=[0,0,0,0]){return defineVector(i,m)}function defineProperty_vec3(i,m=[0,0,0]){return defineVector(i,m)}function defineProperty_vec2(i,m=[0,0]){return defineVector(i,m)}function defineProperty_PositiveNumberRange(i,m=1,g,x){return definePositiveNumberRange(i,m,!0,g,x)}Object.freeze(Ke),Object.freeze(defineColorRGB),Object.freeze(defineColorRGBA),Object.freeze(defineCubeTexture),Object.freeze(defineSampler),Object.freeze(defineTexture$1);const je={},Xe={AO_STRENGTH:"aoStrength",SPECULAR_STRENGTH:"specularStrength",EMISSIVE_STRENGTH:"emissiveStrength",OPACITY:"opacity",SHININESS:"shininess",NORMAL_SCALE:"normalScale"},Ye={},Ze={ALPHA_TEXTURE_SAMPLER:"alphaTextureSampler",AO_TEXTURE_SAMPLER:"aoTextureSampler",DIFFUSE_TEXTURE_SAMPLER:"diffuseTextureSampler",EMISSIVE_TEXTURE_SAMPLER:"emissiveTextureSampler",ENVIRONMENT_TEXTURE_SAMPLER:"environmentTextureSampler",NORMAL_TEXTURE_SAMPLER:"normalTextureSampler",SPECULAR_TEXTURE_SAMPLER:"specularTextureSampler"},Je={ENVIRONMENT_TEXTURE:"environmentTexture"},Qe={},et={},at={},ht={ALPHA_TEXTURE:"alphaTexture",AO_TEXTURE:"aoTexture",DIFFUSE_TEXTURE:"diffuseTexture",EMISSIVE_TEXTURE:"emissiveTexture",NORMAL_TEXTURE:"normalTexture",SPECULAR_TEXTURE:"specularTexture"},ft={COLOR:"color",EMISSIVE_COLOR:"emissiveColor",SPECULAR_COLOR:"specularColor"},gt={...createDefineByPreset({defineBoolean:[defineBoolean,je],definePositiveNumber:[defineProperty_PositiveNumberRange,Xe],defineUint:[defineUintRange,Ye],defineVec2:[defineProperty_vec2,Qe],defineVec3:[defineProperty_vec3,et],defineVec4:[defineProperty_vec4,at],defineColorRGB:[defineColorRGB,ft],defineSampler:[defineSampler,Ze],defineTexture:[defineTexture$1,ht],defineCubeTexture:[defineCubeTexture,Je]}),defineBoolean:defineProperties(defineBoolean),definePositiveNumber:defineProperties(defineProperty_PositiveNumberRange),defineUint:defineProperties(defineUintRange),defineVec2:defineProperties(defineProperty_vec2),defineVec3:defineProperties(defineProperty_vec3),defineVec4:defineProperties(defineProperty_vec4),defineColorRGB:defineProperties(defineColorRGB),defineColorRGBA:defineProperties(defineColorRGBA),defineSampler:defineProperties(defineSampler),defineTexture:defineProperties(defineTexture$1),defineCubeTexture:defineProperties(defineCubeTexture),PRESET_BOOLEAN:je,PRESET_POSITIVE_NUMBER:Xe,PRESET_UINT:Ye,PRESET_SAMPLER:Ze,PRESET_TEXTURE:ht,PRESET_CUBE_TEXTURE:Je,PRESET_VEC2:Qe,PRESET_VEC3:et,PRESET_VEC4:at,PRESET_COLOR_RGB:ft};Object.freeze(gt);class e{constructor(i,m){this.name=i,this.attributes=m,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}get isPointer(){return!1}getTypeName(){return this.name}}class t{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class n extends e{constructor(i,m){super(i,m),this.members=[],this.align=0,this.startLine=-1,this.endLine=-1,this.inUse=!1}get isStruct(){return!0}}class s extends e{constructor(i,m){super(i,m),this.count=0,this.stride=0}get isArray(){return!0}getTypeName(){return`array<${this.format.getTypeName()},${this.count}>`}}class r extends e{constructor(i,m,g){super(i,g),this.format=m}get isPointer(){return!0}getTypeName(){return`&${this.format.getTypeName()}`}}class a extends e{constructor(i,m,g,x){super(i,g),this.format=m,this.access=x}get isTemplate(){return!0}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}var xt;(i=>{i[i.Uniform=0]="Uniform",i[i.Storage=1]="Storage",i[i.Texture=2]="Texture",i[i.Sampler=3]="Sampler",i[i.StorageTexture=4]="StorageTexture"})(xt||(xt={}));class o{constructor(i,m,g,x,_,b,y){this.name=i,this.type=m,this.group=g,this.binding=x,this.attributes=_,this.resourceType=b,this.access=y}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class l{constructor(i,m){this.name=i,this.type=m}}class c{constructor(i,m,g,x){this.name=i,this.type=m,this.locationType=g,this.location=x,this.interpolation=null}}class u{constructor(i,m,g,x){this.name=i,this.type=m,this.locationType=g,this.location=x}}class h{constructor(i,m,g,x){this.name=i,this.type=m,this.attributes=g,this.id=x}}class f{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g}}class p{constructor(i,m=null,g){this.stage=null,this.inputs=[],this.outputs=[],this.arguments=[],this.returnType=null,this.resources=[],this.overrides=[],this.startLine=-1,this.endLine=-1,this.inUse=!1,this.calls=new Set,this.name=i,this.stage=m,this.attributes=g}}class d{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}const vt=new Float32Array(1),bt=new Int32Array(vt.buffer),yt=new Uint16Array(1);function x$1(i){vt[0]=i;const m=bt[0],g=m>>31&1;let x=m>>23&255,_=8388607&m;if(255===x)return yt[0]=g<<15|31744|(0!==_?512:0),yt[0];if(0===x){if(0===_)return yt[0]=g<<15,yt[0];_|=8388608;let i=113;for(;!(8388608&_);)_<<=1,i--;return x=127-i,_&=8388607,x>0?(_=(_>>126-x)+(_>>127-x&1),yt[0]=g<<15|x<<10|_>>13,yt[0]):(yt[0]=g<<15,yt[0])}return x=x-127+15,x>=31?(yt[0]=g<<15|31744,yt[0]):x<=0?x<-10?(yt[0]=g<<15,yt[0]):(_=(8388608|_)>>1-x,yt[0]=g<<15|_>>13,yt[0]):(_>>=13,yt[0]=g<<15|x<<10|_,yt[0])}const St=new Uint32Array(1),Tt=new Float32Array(St.buffer,0,1);function v(i){const m=112+(i>>6&31)<<23|(63&i)<<17;return St[0]=m,Tt[0]}function k(i,m,g,x){const _=[0,0,0,0];for(let P=0;P<x;++P)switch(g){case"8unorm":_[P]=i[m]/255,m++;break;case"8snorm":_[P]=i[m]/255*2-1,m++;break;case"8uint":_[P]=i[m],m++;break;case"8sint":_[P]=i[m]-127,m++;break;case"16uint":_[P]=i[m]|i[m+1]<<8,m+=2;break;case"16sint":_[P]=(i[m]|i[m+1]<<8)-32768,m+=2;break;case"16float":_[P]=(void 0,void 0,void 0,y=(32768&(b=i[m]|i[m+1]<<8))>>15,w=1023&b,0==(T=(31744&b)>>10)?(y?-1:1)*Math.pow(2,-14)*(w/Math.pow(2,10)):31==T?w?NaN:1/0*(y?-1:1):(y?-1:1)*Math.pow(2,T-15)*(1+w/Math.pow(2,10))),m+=2;break;case"32uint":case"32sint":_[P]=i[m]|i[m+1]<<8|i[m+2]<<16|i[m+3]<<24,m+=4;break;case"32float":_[P]=new Float32Array(i.buffer,m,1)[0],m+=4}var b,y,T,w;return _}function I(i,m,g,x,_){for(let b=0;b<x;++b)switch(g){case"8unorm":i[m]=255*_[b],m++;break;case"8snorm":i[m]=.5*(_[b]+1)*255,m++;break;case"8uint":i[m]=_[b],m++;break;case"8sint":i[m]=_[b]+127,m++;break;case"16uint":new Uint16Array(i.buffer,m,1)[0]=_[b],m+=2;break;case"16sint":new Int16Array(i.buffer,m,1)[0]=_[b],m+=2;break;case"16float":{const g=x$1(_[b]);new Uint16Array(i.buffer,m,1)[0]=g,m+=2;break}case"32uint":new Uint32Array(i.buffer,m,1)[0]=_[b],m+=4;break;case"32sint":new Int32Array(i.buffer,m,1)[0]=_[b],m+=4;break;case"32float":new Float32Array(i.buffer,m,1)[0]=_[b],m+=4}return _}const wt={r8unorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8snorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8uint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8sint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg8unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8snorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"rgba8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8snorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},bgra8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bgra8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r16uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16float:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg16uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba16uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r32uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg32uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba32uint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32sint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32float:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rg11b10ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},stencil8:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!1,hasStencil:!0,channels:1},depth16unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},depth24plus:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,depthOnlyFormat:"depth32float",channels:1},"depth24plus-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,depthOnlyFormat:"depth32float",channels:1},depth32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},"depth32float-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,stencilOnlyFormat:"depth32float",channels:1},rgb9e5ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bc1-rgba-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc1-rgba-unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc4-r-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc4-r-snorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc5-rg-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc5-rg-snorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc6h-rgb-ufloat":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc6h-rgb-float":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"eac-r11unorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-r11snorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-rg11unorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"eac-rg11snorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"astc-4x4-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-4x4-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x5-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-5x5-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x6-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-6x6-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-8x5-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x5-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x6-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x6-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x8-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-8x8-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-10x5-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x5-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x6-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x6-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x8-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x8-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x10-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-10x10-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x12-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4},"astc-12x12-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4}};class S{constructor(){this.id=S._id++,this.line=0}get isAstNode(){return!0}get astNodeType(){return""}search(i){i(this)}searchBlock(i,m){if(i){m(A.instance);for(const g of i)g instanceof Array?this.searchBlock(g,m):g.search(m);m(E.instance)}}constEvaluate(i,m){throw new Error("Cannot evaluate node")}constEvaluateString(i){return this.constEvaluate(i).toString()}}S._id=0;class A extends S{}A.instance=new A;class E extends S{}E.instance=new E;const Mt=new Set(["all","all","any","select","arrayLength","abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","clamp","cos","cosh","countLeadingZeros","countOneBits","countTrailingZeros","cross","degrees","determinant","distance","dot","dot4U8Packed","dot4I8Packed","exp","exp2","extractBits","faceForward","firstLeadingBit","firstTrailingBit","floor","fma","fract","frexp","insertBits","inverseSqrt","ldexp","length","log","log2","max","min","mix","modf","normalize","pow","quantizeToF16","radians","reflect","refract","reverseBits","round","saturate","sign","sin","sinh","smoothStep","sqrt","step","tan","tanh","transpose","trunc","dpdx","dpdxCoarse","dpdxFine","dpdy","dpdyCoarse","dpdyFine","fwidth","fwidthCoarse","fwidthFine","textureDimensions","textureGather","textureGatherCompare","textureLoad","textureNumLayers","textureNumLevels","textureNumSamples","textureSample","textureSampleBias","textureSampleCompare","textureSampleCompareLevel","textureSampleGrad","textureSampleLevel","textureSampleBaseClampToEdge","textureStore","atomicLoad","atomicStore","atomicAdd","atomicSub","atomicMax","atomicMin","atomicAnd","atomicOr","atomicXor","atomicExchange","atomicCompareExchangeWeak","pack4x8snorm","pack4x8unorm","pack4xI8","pack4xU8","pack4x8Clamp","pack4xU8Clamp","pack2x16snorm","pack2x16unorm","pack2x16float","unpack4x8snorm","unpack4x8unorm","unpack4xI8","unpack4xU8","unpack2x16snorm","unpack2x16unorm","unpack2x16float","storageBarrier","textureBarrier","workgroupBarrier","workgroupUniformLoad","subgroupAdd","subgroupExclusiveAdd","subgroupInclusiveAdd","subgroupAll","subgroupAnd","subgroupAny","subgroupBallot","subgroupBroadcast","subgroupBroadcastFirst","subgroupElect","subgroupMax","subgroupMin","subgroupMul","subgroupExclusiveMul","subgroupInclusiveMul","subgroupOr","subgroupShuffle","subgroupShuffleDown","subgroupShuffleUp","subgroupShuffleXor","subgroupXor","quadBroadcast","quadSwapDiagonal","quadSwapX","quadSwapY"]);class L extends S{constructor(){super()}}class C extends L{constructor(i,m,g,x,_,b){super(),this.calls=new Set,this.name=i,this.args=m,this.returnType=g,this.body=x,this.startLine=_,this.endLine=b}get astNodeType(){return"function"}search(i){if(this.attributes)for(const m of this.attributes)i(m);i(this);for(const m of this.args)i(m);this.searchBlock(this.body,i)}}class D extends L{constructor(i){super(),this.expression=i}get astNodeType(){return"staticAssert"}search(i){this.expression.search(i)}}class N extends L{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"while"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class V extends L{constructor(i,m){super(),this.body=i,this.loopId=m}get astNodeType(){return"continuing"}search(i){this.searchBlock(this.body,i)}}class O extends L{constructor(i,m,g,x){super(),this.init=i,this.condition=m,this.increment=g,this.body=x}get astNodeType(){return"for"}search(i){var m,g,x;null===(m=this.init)||void 0===m||m.search(i),null===(g=this.condition)||void 0===g||g.search(i),null===(x=this.increment)||void 0===x||x.search(i),this.searchBlock(this.body,i)}}class B extends L{constructor(i,m,g,x,_){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=x,this.value=_}get astNodeType(){return"var"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class F extends L{constructor(i,m,g){super(),this.attributes=null,this.name=i,this.type=m,this.value=g}get astNodeType(){return"override"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class M extends L{constructor(i,m,g,x,_){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=x,this.value=_}get astNodeType(){return"let"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class U extends L{constructor(i,m,g,x,_){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=x,this.value=_}get astNodeType(){return"const"}constEvaluate(i,m){return this.value.constEvaluate(i,m)}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}var Ct,Rt,Pt,Et;(i=>{i.increment="++",i.decrement="--"})(Ct||(Ct={})),(i=>{i.parse=function(m){const g=m;if("parse"==g)throw new Error("Invalid value for IncrementOperator");return i[g]}})(Ct||(Ct={}));let Bt=class extends L{constructor(i,m){super(),this.operator=i,this.variable=m}get astNodeType(){return"increment"}search(i){this.variable.search(i)}};(i=>{i.assign="=",i.addAssign="+=",i.subtractAssin="-=",i.multiplyAssign="*=",i.divideAssign="/=",i.moduloAssign="%=",i.andAssign="&=",i.orAssign="|=",i.xorAssign="^=",i.shiftLeftAssign="<<=",i.shiftRightAssign=">>="})(Rt||(Rt={})),(Rt||(Rt={})).parse=function(i){const m=i;if("parse"==m)throw new Error("Invalid value for AssignOperator");return m};class R extends L{constructor(i,m,g){super(),this.operator=i,this.variable=m,this.value=g}get astNodeType(){return"assign"}search(i){this.variable.search(i),this.value.search(i)}}class G extends L{constructor(i,m){super(),this.name=i,this.args=m}get astNodeType(){return"call"}isBuiltin(){return Mt.has(this.name)}search(i){for(const m of this.args)m.search(i);i(this)}}class X extends L{constructor(i,m){super(),this.body=i,this.continuing=m}get astNodeType(){return"loop"}}class j extends L{constructor(i,m){super(),this.condition=i,this.cases=m}get astNodeType(){return"switch"}search(i){i(this);for(const m of this.cases)m.search(i)}}class Z extends L{constructor(i,m,g,x){super(),this.condition=i,this.body=m,this.elseif=g,this.else=x}get astNodeType(){return"if"}search(i){this.condition.search(i),this.searchBlock(this.body,i),this.searchBlock(this.elseif,i),this.searchBlock(this.else,i)}}class Q extends L{constructor(i){super(),this.value=i}get astNodeType(){return"return"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class Y extends L{constructor(i){super(),this.name=i}get astNodeType(){return"enable"}}class K extends L{constructor(i){super(),this.extensions=i}get astNodeType(){return"requires"}}class J extends L{constructor(i,m){super(),this.severity=i,this.rule=m}get astNodeType(){return"diagnostic"}}class ee extends L{constructor(i,m){super(),this.name=i,this.type=m}get astNodeType(){return"alias"}}class te extends L{constructor(){super()}get astNodeType(){return"discard"}}class ne extends L{constructor(){super(),this.condition=null,this.loopId=-1}get astNodeType(){return"break"}}class se extends L{constructor(){super(),this.loopId=-1}get astNodeType(){return"continue"}}class re extends L{constructor(i){super(),this.attributes=null,this.name=i}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}static maxFormatType(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const x=re._priority.get(m.name);re._priority.get(i[g].name)<x&&(m=i[g])}return"x32"===m.name?re.i32:m}getTypeName(){return this.name}}re.x32=new re("x32"),re.f32=new re("f32"),re.i32=new re("i32"),re.u32=new re("u32"),re.f16=new re("f16"),re.bool=new re("bool"),re.void=new re("void"),re._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class ae extends re{constructor(i){super(i)}}class ie extends re{constructor(i,m,g,x){super(i),this.members=m,this.startLine=g,this.endLine=x}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(i){for(let m=0;m<this.members.length;m++)if(this.members[m].name==i)return m;return-1}search(i){for(const m of this.members)i(m)}}class oe extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"template"}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}oe.vec2f=new oe("vec2",re.f32,null),oe.vec3f=new oe("vec3",re.f32,null),oe.vec4f=new oe("vec4",re.f32,null),oe.vec2i=new oe("vec2",re.i32,null),oe.vec3i=new oe("vec3",re.i32,null),oe.vec4i=new oe("vec4",re.i32,null),oe.vec2u=new oe("vec2",re.u32,null),oe.vec3u=new oe("vec3",re.u32,null),oe.vec4u=new oe("vec4",re.u32,null),oe.vec2h=new oe("vec2",re.f16,null),oe.vec3h=new oe("vec3",re.f16,null),oe.vec4h=new oe("vec4",re.f16,null),oe.vec2b=new oe("vec2",re.bool,null),oe.vec3b=new oe("vec3",re.bool,null),oe.vec4b=new oe("vec4",re.bool,null),oe.mat2x2f=new oe("mat2x2",re.f32,null),oe.mat2x3f=new oe("mat2x3",re.f32,null),oe.mat2x4f=new oe("mat2x4",re.f32,null),oe.mat3x2f=new oe("mat3x2",re.f32,null),oe.mat3x3f=new oe("mat3x3",re.f32,null),oe.mat3x4f=new oe("mat3x4",re.f32,null),oe.mat4x2f=new oe("mat4x2",re.f32,null),oe.mat4x3f=new oe("mat4x3",re.f32,null),oe.mat4x4f=new oe("mat4x4",re.f32,null),oe.mat2x2h=new oe("mat2x2",re.f16,null),oe.mat2x3h=new oe("mat2x3",re.f16,null),oe.mat2x4h=new oe("mat2x4",re.f16,null),oe.mat3x2h=new oe("mat3x2",re.f16,null),oe.mat3x3h=new oe("mat3x3",re.f16,null),oe.mat3x4h=new oe("mat3x4",re.f16,null),oe.mat4x2h=new oe("mat4x2",re.f16,null),oe.mat4x3h=new oe("mat4x3",re.f16,null),oe.mat4x4h=new oe("mat4x4",re.f16,null),oe.mat2x2i=new oe("mat2x2",re.i32,null),oe.mat2x3i=new oe("mat2x3",re.i32,null),oe.mat2x4i=new oe("mat2x4",re.i32,null),oe.mat3x2i=new oe("mat3x2",re.i32,null),oe.mat3x3i=new oe("mat3x3",re.i32,null),oe.mat3x4i=new oe("mat3x4",re.i32,null),oe.mat4x2i=new oe("mat4x2",re.i32,null),oe.mat4x3i=new oe("mat4x3",re.i32,null),oe.mat4x4i=new oe("mat4x4",re.i32,null),oe.mat2x2u=new oe("mat2x2",re.u32,null),oe.mat2x3u=new oe("mat2x3",re.u32,null),oe.mat2x4u=new oe("mat2x4",re.u32,null),oe.mat3x2u=new oe("mat3x2",re.u32,null),oe.mat3x3u=new oe("mat3x3",re.u32,null),oe.mat3x4u=new oe("mat3x4",re.u32,null),oe.mat4x2u=new oe("mat4x2",re.u32,null),oe.mat4x3u=new oe("mat4x3",re.u32,null),oe.mat4x4u=new oe("mat4x4",re.u32,null);class le extends re{constructor(i,m,g,x){super(i),this.storage=m,this.type=g,this.access=x}get astNodeType(){return"pointer"}}class ce extends re{constructor(i,m,g,x){super(i),this.attributes=m,this.format=g,this.count=x}get astNodeType(){return"array"}get isArray(){return!0}}class ue extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"sampler"}}class he extends S{constructor(){super(),this.postfix=null}}class fe extends he{constructor(i){super(),this.value=i}get astNodeType(){return"stringExpr"}toString(){return this.value}constEvaluateString(){return this.value}}class pe extends he{constructor(i,m){super(),this.type=i,this.args=m}get astNodeType(){return"createExpr"}search(i){if(i(this),this.args)for(const m of this.args)m.search(i)}constEvaluate(i,m){return m&&(m[0]=this.type),i.evalExpression(this,i.context)}}class de extends he{constructor(i,m){super(),this.cachedReturnValue=null,this.name=i,this.args=m}get astNodeType(){return"callExpr"}setCachedReturnValue(i){this.cachedReturnValue=i}get isBuiltin(){return Mt.has(this.name)}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){for(const m of this.args)m.search(i);i(this)}}class me extends he{constructor(i){super(),this.name=i}get astNodeType(){return"varExpr"}search(i){i(this),this.postfix&&this.postfix.search(i)}constEvaluate(i,m){return i.evalExpression(this,i.context)}}class _e extends he{constructor(i,m){super(),this.name=i,this.initializer=m}get astNodeType(){return"constExpr"}constEvaluate(i,m){if(this.initializer){const m=i.evalExpression(this.initializer,i.context);return null!==m&&this.postfix?m.getSubData(i,this.postfix,i.context):m}return null}search(i){this.initializer.search(i)}}class ge extends he{constructor(i,m){super(),this.value=i,this.type=m}get astNodeType(){return"literalExpr"}constEvaluate(i,m){return void 0!==m&&(m[0]=this.type),this.value}get isScalar(){return this.value instanceof Oe}get isVector(){return this.value instanceof Fe||this.value instanceof Me}get scalarValue(){return this.value instanceof Oe?this.value.value:(console.error("Value is not scalar."),0)}get vectorValue(){return this.value instanceof Fe||this.value instanceof Me?this.value.data:(console.error("Value is not a vector or matrix."),new Float32Array(0))}}class xe extends he{constructor(i,m){super(),this.type=i,this.value=m}get astNodeType(){return"bitcastExpr"}search(i){this.value.search(i)}}class be extends he{constructor(i){super(),this.index=i}search(i){this.index.search(i)}}class ve extends he{constructor(){super()}}class we extends ve{constructor(i,m){super(),this.operator=i,this.right=m}get astNodeType(){return"unaryOp"}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.right.search(i)}}class ke extends ve{constructor(i,m,g){super(),this.operator=i,this.left=m,this.right=g}get astNodeType(){return"binaryOp"}_getPromotedType(i,m){return i.name===m.name?i:"f32"===i.name||"f32"===m.name?re.f32:"u32"===i.name||"u32"===m.name?re.u32:re.i32}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.left.search(i),this.right.search(i)}}class Ie extends S{constructor(i){super(),this.body=i}search(i){i(this),this.searchBlock(this.body,i)}}class Te extends he{constructor(){super()}get astNodeType(){return"default"}}class Se extends Ie{constructor(i,m){super(m),this.selectors=i}get astNodeType(){return"case"}search(i){this.searchBlock(this.body,i)}}class Ae extends Ie{constructor(i){super(i)}get astNodeType(){return"default"}search(i){this.searchBlock(this.body,i)}}class Ee extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"argument"}}class $e extends S{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"elseif"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class Le extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"member"}}class Ce extends S{constructor(i,m){super(),this.name=i,this.value=m}get astNodeType(){return"attribute"}}class De{constructor(i,m){this.parent=null,this.typeInfo=i,this.parent=m,this.id=De._id++}clone(){throw`Clone:Not implemented for ${this.constructor.name}`}setDataValue(i,m,g,x){console.error(`SetDataValue:Not implemented for ${this.constructor.name}`)}getSubData(i,m,g){return console.error(`GetDataValue:Not implemented for ${this.constructor.name}`),null}toString(){return`<${this.typeInfo.getTypeName()}>`}}De._id=0;class Ne extends De{constructor(){super(new e("void",null),null)}toString(){return"void"}}Ne.void=new Ne;class Ve extends De{constructor(i){super(new r("pointer",i.typeInfo,null),null),this.reference=i}clone(){return this}setDataValue(i,m,g,x){this.reference.setDataValue(i,m,g,x)}getSubData(i,m,g){return m?this.reference.getSubData(i,m,g):this}toString(){return`&${this.reference.toString()}`}}class Oe extends De{constructor(i,m,g=null){super(m,g),i instanceof Int32Array||i instanceof Uint32Array||i instanceof Float32Array?this.data=i:"x32"===this.typeInfo.name?i-Math.floor(i)!=0?this.data=new Float32Array([i]):this.data=i>=0?new Uint32Array([i]):new Int32Array([i]):"i32"===this.typeInfo.name||"bool"===this.typeInfo.name?this.data=new Int32Array([i]):"u32"===this.typeInfo.name?this.data=new Uint32Array([i]):"f32"===this.typeInfo.name||"f16"===this.typeInfo.name?this.data=new Float32Array([i]):console.error("ScalarData2:Invalid type",m)}clone(){if(this.data instanceof Float32Array)return new Oe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Oe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Oe(new Uint32Array(this.data),this.typeInfo,null);throw"ScalarData:Invalid data type"}get value(){return this.data[0]}set value(i){this.data[0]=i}setDataValue(i,m,g,x){if(g)return void console.error("SetDataValue:Scalar data does not support postfix",g);if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);let _=m.data[0];"i32"===this.typeInfo.name||"u32"===this.typeInfo.name?_=Math.floor(_):"bool"===this.typeInfo.name&&(_=_?1:0),this.data[0]=_}getSubData(i,m,g){return m?(console.error("getSubData:Scalar data does not support postfix",m),null):this}toString(){return`${this.value}`}}function Be(i,m,g){const x=m.length;return 2===x?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec2i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec2u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2h")):(console.error(`getSubData:Unknown format ${g}`),null):3===x?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec3i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec3u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3h")):(console.error(`getSubData:Unknown format ${g}`),null):4===x?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec4i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec4u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4h")):(console.error(`getSubData:Unknown format ${g}`),null):(console.error(`getSubData:Invalid vector size ${m.length}`),null)}class Fe extends De{constructor(i,m,g=null){if(super(m,g),i instanceof Float32Array||i instanceof Uint32Array||i instanceof Int32Array)this.data=i;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?this.data=new Float32Array(i):"vec2i"===m||"vec3i"===m||"vec4i"===m?this.data=new Int32Array(i):"vec2u"===m||"vec3u"===m||"vec4u"===m?this.data=new Uint32Array(i):"vec2h"===m||"vec3h"===m||"vec4h"===m?this.data=new Float32Array(i):"vec2b"===m||"vec3b"===m||"vec4b"===m?this.data=new Int32Array(i):"vec2"===m||"vec3"===m||"vec4"===m?this.data=new Float32Array(i):console.error(`VectorData:Invalid type ${m}`)}}clone(){if(this.data instanceof Float32Array)return new Fe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Fe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Fe(new Uint32Array(this.data),this.typeInfo,null);throw"VectorData:Invalid data type"}setDataValue(i,m,g,x){g instanceof fe?console.error("TODO:Set vector postfix"):m instanceof Fe?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;let x=i.getTypeInfo("f32");if(this.typeInfo instanceof a)x=this.typeInfo.format||x;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?x=i.getTypeInfo("f32"):"vec2i"===m||"vec3i"===m||"vec4i"===m?x=i.getTypeInfo("i32"):"vec2b"===m||"vec3b"===m||"vec4b"===m?x=i.getTypeInfo("bool"):"vec2u"===m||"vec3u"===m||"vec4u"===m?x=i.getTypeInfo("u32"):"vec2h"===m||"vec3h"===m||"vec4h"===m?x=i.getTypeInfo("f16"):console.error(`GetSubData:Unknown type ${m}`)}let _=this;for(;null!==m&&null!==_;){if(m instanceof be){const b=m.index;let y=-1;if(b instanceof ge){if(!(b.value instanceof Oe))return console.error(`GetSubData:Invalid array index ${b.value}`),null;y=b.value.value}else{const m=i.evalExpression(b,g);if(!(m instanceof Oe))return console.error("GetSubData:Unknown index type",b),null;y=m.value}if(y<0||y>=_.data.length)return console.error("GetSubData:Index out of range",y),null;if(_.data instanceof Float32Array){const i=new Float32Array(_.data.buffer,_.data.byteOffset+4*y,1);return new Oe(i,x)}if(_.data instanceof Int32Array){const i=new Int32Array(_.data.buffer,_.data.byteOffset+4*y,1);return new Oe(i,x)}if(_.data instanceof Uint32Array){const i=new Uint32Array(_.data.buffer,_.data.byteOffset+4*y,1);return new Oe(i,x)}throw"GetSubData:Invalid data type"}if(!(m instanceof fe))return console.error("GetSubData:Unknown postfix",m),null;{const g=m.value.toLowerCase();if(1===g.length){let i=0;if("x"===g||"r"===g)i=0;else if("y"===g||"g"===g)i=1;else if("z"===g||"b"===g)i=2;else{if("w"!==g&&"a"!==g)return console.error(`GetSubData:Unknown member ${g}`),null;i=3}if(this.data instanceof Float32Array){let m=new Float32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,x,this)}if(this.data instanceof Int32Array){let m=new Int32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,x,this)}if(this.data instanceof Uint32Array){let m=new Uint32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,x,this)}}const b=[];for(const i of g)"x"===i||"r"===i?b.push(this.data[0]):"y"===i||"g"===i?b.push(this.data[1]):"z"===i||"b"===i?b.push(this.data[2]):"w"===i||"a"===i?b.push(this.data[3]):console.error(`GetDataValue:Unknown member ${i}`);_=Be(i,b,x.name)}m=m.postfix}return _}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Me extends De{constructor(i,m,g=null){super(m,g),i instanceof Float32Array?this.data=i:this.data=new Float32Array(i)}clone(){return new Me(new Float32Array(this.data),this.typeInfo,null)}setDataValue(i,m,g,x){g instanceof fe?console.error("TODO:Set matrix postfix"):m instanceof Me?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;const x=this.typeInfo.name;if(i.getTypeInfo("f32"),this.typeInfo instanceof a)this.typeInfo.format;else if(x.endsWith("f"))i.getTypeInfo("f32");else if(x.endsWith("i"))i.getTypeInfo("i32");else if(x.endsWith("u"))i.getTypeInfo("u32");else{if(!x.endsWith("h"))return console.error(`GetDataValue:Unknown type ${x}`),null;i.getTypeInfo("f16")}if(m instanceof be){const _=m.index;let b=-1;if(_ instanceof ge){if(!(_.value instanceof Oe))return console.error(`GetDataValue:Invalid array index ${_.value}`),null;b=_.value.value}else{const m=i.evalExpression(_,g);if(!(m instanceof Oe))return console.error("GetDataValue:Unknown index type",_),null;b=m.value}if(b<0||b>=this.data.length)return console.error("GetDataValue:Index out of range",b),null;const y=x.endsWith("h")?"h":"f";let T;if("mat2x2"===x||"mat2x2f"===x||"mat2x2h"===x||"mat3x2"===x||"mat3x2f"===x||"mat3x2h"===x||"mat4x2"===x||"mat4x2f"===x||"mat4x2h"===x)T=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+2*b*4,2),i.getTypeInfo(`vec2${y}`));else if("mat2x3"===x||"mat2x3f"===x||"mat2x3h"===x||"mat3x3"===x||"mat3x3f"===x||"mat3x3h"===x||"mat4x3"===x||"mat4x3f"===x||"mat4x3h"===x)T=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+3*b*4,3),i.getTypeInfo(`vec3${y}`));else{if("mat2x4"!==x&&"mat2x4f"!==x&&"mat2x4h"!==x&&"mat3x4"!==x&&"mat3x4f"!==x&&"mat3x4h"!==x&&"mat4x4"!==x&&"mat4x4f"!==x&&"mat4x4h"!==x)return console.error(`GetDataValue:Unknown type ${x}`),null;T=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+4*b*4,4),i.getTypeInfo(`vec4${y}`))}return m.postfix?T.getSubData(i,m.postfix,g):T}return console.error("GetDataValue:Invalid postfix",m),null}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Ue extends De{constructor(i,m,g=0,x=null){super(m,x),this.buffer=i instanceof ArrayBuffer?i:i.buffer,this.offset=g}clone(){const i=new Uint8Array(new Uint8Array(this.buffer,this.offset,this.typeInfo.size));return new Ue(i.buffer,this.typeInfo,0,null)}setDataValue(i,m,g,x){if(null===m)return void console.log("setDataValue:NULL data.");let _=this.offset,b=this.typeInfo;for(;g;){if(g instanceof be)if(b instanceof s){const m=g.index;if(m instanceof ge){if(!(m.value instanceof Oe))return void console.error(`SetDataValue:Invalid index type ${m.value}`);_+=m.value.value*b.stride}else{const g=i.evalExpression(m,x);if(!(g instanceof Oe))return void console.error("SetDataValue:Unknown index type",m);_+=g.value*b.stride}b=b.format}else console.error(`SetDataValue:Type ${b.getTypeName()} is not an array`);else{if(!(g instanceof fe))return void console.error("SetDataValue:Unknown postfix type",g);{const i=g.value;if(b instanceof n){let m=!1;for(const g of b.members)if(g.name===i){_+=g.offset,b=g.type,m=!0;break}if(!m)return void console.error(`SetDataValue:Member ${i} not found`)}else if(b instanceof e){const g=b.getTypeName();let x=0;if("x"===i||"r"===i)x=0;else if("y"===i||"g"===i)x=1;else if("z"===i||"b"===i)x=2;else{if("w"!==i&&"a"!==i)return void console.error(`SetDataValue:Unknown member ${i}`);x=3}if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);const y=m.value;return"vec2f"===g?void(new Float32Array(this.buffer,_,2)[x]=y):"vec3f"===g?void(new Float32Array(this.buffer,_,3)[x]=y):"vec4f"===g?void(new Float32Array(this.buffer,_,4)[x]=y):"vec2i"===g?void(new Int32Array(this.buffer,_,2)[x]=y):"vec3i"===g?void(new Int32Array(this.buffer,_,3)[x]=y):"vec4i"===g?void(new Int32Array(this.buffer,_,4)[x]=y):"vec2u"===g?void(new Uint32Array(this.buffer,_,2)[x]=y):"vec3u"===g?void(new Uint32Array(this.buffer,_,3)[x]=y):"vec4u"===g?void(new Uint32Array(this.buffer,_,4)[x]=y):void console.error(`SetDataValue:Type ${g} is not a struct`)}}}g=g.postfix}this.setData(i,m,b,_,x)}setData(i,m,g,x,_){const b=g.getTypeName();if("f32"!==b&&"f16"!==b)if("i32"!==b&&"atomic<i32>"!==b&&"x32"!==b)if("u32"!==b&&"atomic<u32>"!==b)if("bool"!==b)if("vec2f"!==b&&"vec2h"!==b)if("vec3f"!==b&&"vec3h"!==b)if("vec4f"!==b&&"vec4h"!==b)if("vec2i"!==b)if("vec3i"!==b)if("vec4i"!==b)if("vec2u"!==b)if("vec3u"!==b)if("vec4u"!==b)if("vec2b"!==b)if("vec3b"!==b)if("vec4b"!==b)if("mat2x2f"!==b&&"mat2x2h"!==b)if("mat2x3f"!==b&&"mat2x3h"!==b)if("mat2x4f"!==b&&"mat2x4h"!==b)if("mat3x2f"!==b&&"mat3x2h"!==b)if("mat3x3f"!==b&&"mat3x3h"!==b)if("mat3x4f"!==b&&"mat3x4h"!==b)if("mat4x2f"!==b&&"mat4x2h"!==b)if("mat4x3f"!==b&&"mat4x3h"!==b)if("mat4x4f"!==b&&"mat4x4h"!==b)if(m instanceof Ue){if(g===m.typeInfo)return void new Uint8Array(this.buffer,x,m.buffer.byteLength).set(new Uint8Array(m.buffer));console.error("SetDataValue:Type mismatch",b,m.typeInfo.getTypeName())}else console.error(`SetData:Unknown type ${b}`);else{const i=new Float32Array(this.buffer,x,16);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11],i[12]=m.data[12],i[13]=m.data[13],i[14]=m.data[14],i[15]=m.data[15]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15])}else{const i=new Float32Array(this.buffer,x,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,x,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,x,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,x,9);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8])}else{const i=new Float32Array(this.buffer,x,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,x,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,x,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,x,4);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Uint32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Int32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Int32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Int32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Float32Array(this.buffer,x,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Float32Array(this.buffer,x,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Float32Array(this.buffer,x,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else m instanceof Oe&&(new Int32Array(this.buffer,x,1)[0]=m.value);else m instanceof Oe&&(new Uint32Array(this.buffer,x,1)[0]=m.value);else m instanceof Oe&&(new Int32Array(this.buffer,x,1)[0]=m.value);else m instanceof Oe&&(new Float32Array(this.buffer,x,1)[0]=m.value)}getSubData(i,m,g){var x,_,b;if(null===m)return this;let y=this.offset,T=this.typeInfo;for(;m;){if(m instanceof be){const x=m.index,_=x instanceof he?i.evalExpression(x,g):x;let b=0;if(_ instanceof Oe?b=_.value:"number"==typeof _?b=_:console.error("GetDataValue:Invalid index type",x),T instanceof s)y+=b*T.stride,T=T.format;else{const m=T.getTypeName();"mat4x4"===m||"mat4x4f"===m||"mat4x4h"===m?(y+=16*b,T=i.getTypeInfo("vec4f")):console.error(`getDataValue:Type ${T.getTypeName()} is not an array`)}}else{if(!(m instanceof fe))return console.error("GetDataValue:Unknown postfix type",m),null;{const g=m.value;if(T instanceof n){let i=!1;for(const m of T.members)if(m.name===g){y+=m.offset,T=m.type,i=!0;break}if(!i)return console.error(`GetDataValue:Member ${g} not found`),null}else if(T instanceof e){const m=T.getTypeName();if("vec2f"===m||"vec3f"===m||"vec4f"===m||"vec2i"===m||"vec3i"===m||"vec4i"===m||"vec2u"===m||"vec3u"===m||"vec4u"===m||"vec2b"===m||"vec3b"===m||"vec4b"===m||"vec2h"===m||"vec3h"===m||"vec4h"===m||"vec2"===m||"vec3"===m||"vec4"===m){if(g.length>0&&g.length<5){let x="f";const _=[];for(let b=0;b<g.length;++b){const T=g[b].toLowerCase();let w=0;if("x"===T||"r"===T)w=0;else if("y"===T||"g"===T)w=1;else if("z"===T||"b"===T)w=2;else{if("w"!==T&&"a"!==T)return console.error(`Unknown member ${g}`),null;w=3}if(1===g.length){if(m.endsWith("f"))return this.buffer.byteLength<y+4*w+4?(console.log("Insufficient buffer data"),null):new Oe(new Float32Array(this.buffer,y+4*w,1),i.getTypeInfo("f32"),this);if(m.endsWith("h"))return new Oe(new Float32Array(this.buffer,y+4*w,1),i.getTypeInfo("f16"),this);if(m.endsWith("i"))return new Oe(new Int32Array(this.buffer,y+4*w,1),i.getTypeInfo("i32"),this);if(m.endsWith("b"))return new Oe(new Int32Array(this.buffer,y+4*w,1),i.getTypeInfo("bool"),this);if(m.endsWith("u"))return new Oe(new Uint32Array(this.buffer,y+4*w,1),i.getTypeInfo("i32"),this)}if("vec2f"===m)_.push(new Float32Array(this.buffer,y,2)[w]);else if("vec3f"===m){if(y+12>=this.buffer.byteLength)return console.log("Insufficient buffer data"),null;const i=new Float32Array(this.buffer,y,3);_.push(i[w])}else if("vec4f"===m)_.push(new Float32Array(this.buffer,y,4)[w]);else if("vec2i"===m)x="i",_.push(new Int32Array(this.buffer,y,2)[w]);else if("vec3i"===m)x="i",_.push(new Int32Array(this.buffer,y,3)[w]);else if("vec4i"===m)x="i",_.push(new Int32Array(this.buffer,y,4)[w]);else if("vec2u"===m){x="u";const i=new Uint32Array(this.buffer,y,2);_.push(i[w])}else"vec3u"===m?(x="u",_.push(new Uint32Array(this.buffer,y,3)[w])):"vec4u"===m&&(x="u",_.push(new Uint32Array(this.buffer,y,4)[w]))}return 2===_.length?T=i.getTypeInfo(`vec2${x}`):3===_.length?T=i.getTypeInfo(`vec3${x}`):4===_.length?T=i.getTypeInfo(`vec4${x}`):console.error(`GetDataValue:Invalid vector length ${_.length}`),new Fe(_,T,null)}return console.error(`GetDataValue:Unknown member ${g}`),null}return console.error(`GetDataValue:Type ${m} is not a struct`),null}}}m=m.postfix}const w=T.getTypeName();return"f32"===w?new Oe(new Float32Array(this.buffer,y,1),T,this):"i32"===w?new Oe(new Int32Array(this.buffer,y,1),T,this):"u32"===w?new Oe(new Uint32Array(this.buffer,y,1),T,this):"vec2f"===w?new Fe(new Float32Array(this.buffer,y,2),T,this):"vec3f"===w?new Fe(new Float32Array(this.buffer,y,3),T,this):"vec4f"===w?new Fe(new Float32Array(this.buffer,y,4),T,this):"vec2i"===w?new Fe(new Int32Array(this.buffer,y,2),T,this):"vec3i"===w?new Fe(new Int32Array(this.buffer,y,3),T,this):"vec4i"===w?new Fe(new Int32Array(this.buffer,y,4),T,this):"vec2u"===w?new Fe(new Uint32Array(this.buffer,y,2),T,this):"vec3u"===w?new Fe(new Uint32Array(this.buffer,y,3),T,this):"vec4u"===w?new Fe(new Uint32Array(this.buffer,y,4),T,this):T instanceof a&&"atomic"===T.name?"u32"===(null===(x=T.format)||void 0===x?void 0:x.name)?new Oe(new Uint32Array(this.buffer,y,1)[0],T.format,this):"i32"===(null===(_=T.format)||void 0===_?void 0:_.name)?new Oe(new Int32Array(this.buffer,y,1)[0],T.format,this):(console.error(`GetDataValue:Invalid atomic format ${null===(b=T.format)||void 0===b?void 0:b.name}`),null):new Ue(this.buffer,T,y,this)}toString(){let i="";if(this.typeInfo instanceof s)if("f32"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("i32"===this.typeInfo.format.name){const m=new Int32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("u32"===this.typeInfo.format.name){const m=new Uint32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("vec2f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]}]`;for(let g=1;g<m.length/2;++g)i+=`,[${m[2*g]},${m[2*g+1]}]`}else if("vec3f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]}]`}else if("vec4f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]},${m[3]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]},${m[g+3]}]`}else i="[...]";else this.typeInfo instanceof n?i+="{...}":i="[...]";return i}}class Pe extends De{constructor(i,m,g,x){super(m,null),this.data=i,this.descriptor=g,this.view=x}clone(){return new Pe(this.data,this.typeInfo,this.descriptor,this.view)}get width(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>0?null!==(i=g[0])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.width)&&void 0!==m?m:0}get height(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>1?null!==(i=g[1])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.height)&&void 0!==m?m:0}get depthOrArrayLayers(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>2?null!==(i=g[2])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.depthOrArrayLayers)&&void 0!==m?m:0}get format(){var i;return this.descriptor&&null!==(i=this.descriptor.format)&&void 0!==i?i:"rgba8unorm"}get sampleCount(){var i;return this.descriptor&&null!==(i=this.descriptor.sampleCount)&&void 0!==i?i:1}get mipLevelCount(){var i;return this.descriptor&&null!==(i=this.descriptor.mipLevelCount)&&void 0!==i?i:1}get dimension(){var i;return this.descriptor&&null!==(i=this.descriptor.dimension)&&void 0!==i?i:"2d"}getMipLevelSize(i){if(i>=this.mipLevelCount)return[0,0,0];const m=[this.width,this.height,this.depthOrArrayLayers];for(let g=0;g<m.length;++g)m[g]=Math.max(1,m[g]>>i);return m}get texelByteSize(){const i=this.format,m=wt[i];return m?m.isDepthStencil?4:m.bytesPerBlock:0}get bytesPerRow(){return this.width*this.texelByteSize}get isDepthStencil(){const i=this.format,m=wt[i];return!!m&&m.isDepthStencil}getGpuSize(){const i=this.format,m=wt[i],g=this.width;if(!i||g<=0||!m)return-1;const x=this.height,_=this.depthOrArrayLayers,b=this.dimension;return g/m.blockWidth*("1d"===b?1:x/m.blockHeight)*m.bytesPerBlock*_}getPixel(i,m,g=0,x=0){const _=this.texelByteSize,b=this.bytesPerRow,y=this.height,T=this.data[x];return function(i,m,g,x,_,b,y,T,w){const P=x*(y>>=_)*(b>>=_)+g*y+m*T;switch(w){case"r8unorm":return[k(i,P,"8unorm",1)[0]];case"r8snorm":return[k(i,P,"8snorm",1)[0]];case"r8uint":return[k(i,P,"8uint",1)[0]];case"r8sint":return[k(i,P,"8sint",1)[0]];case"rg8unorm":{const m=k(i,P,"8unorm",2);return[m[0],m[1]]}case"rg8snorm":{const m=k(i,P,"8snorm",2);return[m[0],m[1]]}case"rg8uint":{const m=k(i,P,"8uint",2);return[m[0],m[1]]}case"rg8sint":{const m=k(i,P,"8sint",2);return[m[0],m[1]]}case"rgba8unorm-srgb":case"rgba8unorm":{const m=k(i,P,"8unorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8snorm":{const m=k(i,P,"8snorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8uint":{const m=k(i,P,"8uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba8sint":{const m=k(i,P,"8sint",4);return[m[0],m[1],m[2],m[3]]}case"bgra8unorm-srgb":case"bgra8unorm":{const m=k(i,P,"8unorm",4);return[m[2],m[1],m[0],m[3]]}case"r16uint":return[k(i,P,"16uint",1)[0]];case"r16sint":return[k(i,P,"16sint",1)[0]];case"r16float":return[k(i,P,"16float",1)[0]];case"rg16uint":{const m=k(i,P,"16uint",2);return[m[0],m[1]]}case"rg16sint":{const m=k(i,P,"16sint",2);return[m[0],m[1]]}case"rg16float":{const m=k(i,P,"16float",2);return[m[0],m[1]]}case"rgba16uint":{const m=k(i,P,"16uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16sint":{const m=k(i,P,"16sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16float":{const m=k(i,P,"16float",4);return[m[0],m[1],m[2],m[3]]}case"r32uint":return[k(i,P,"32uint",1)[0]];case"r32sint":return[k(i,P,"32sint",1)[0]];case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return[k(i,P,"32float",1)[0]];case"rg32uint":{const m=k(i,P,"32uint",2);return[m[0],m[1]]}case"rg32sint":{const m=k(i,P,"32sint",2);return[m[0],m[1]]}case"rg32float":{const m=k(i,P,"32float",2);return[m[0],m[1]]}case"rgba32uint":{const m=k(i,P,"32uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32sint":{const m=k(i,P,"32sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32float":{const m=k(i,P,"32float",4);return[m[0],m[1],m[2],m[3]]}case"rg11b10ufloat":{const m=new Uint32Array(i.buffer,P,1)[0],g=(4192256&m)>>11,x=(4290772992&m)>>22;return[v(2047&m),v(g),function(i){const m=112+(i>>5&31)<<23|(31&i)<<18;return St[0]=m,Tt[0]}(x),1]}}return null}(new Uint8Array(T),i,m,g,x,y,b,_,this.format)}setPixel(i,m,g,x,_){const b=this.texelByteSize,y=this.bytesPerRow,T=this.height,w=this.data[x];!function(i,m,g,x,_,b,y,T,w,P){const z=x*(y>>=_)*(b>>=_)+g*y+m*T;switch(w){case"r8unorm":return void I(i,z,"8unorm",1,P);case"r8snorm":return void I(i,z,"8snorm",1,P);case"r8uint":return void I(i,z,"8uint",1,P);case"r8sint":return void I(i,z,"8sint",1,P);case"rg8unorm":return void I(i,z,"8unorm",2,P);case"rg8snorm":return void I(i,z,"8snorm",2,P);case"rg8uint":return void I(i,z,"8uint",2,P);case"rg8sint":return void I(i,z,"8sint",2,P);case"rgba8unorm-srgb":case"rgba8unorm":case"bgra8unorm-srgb":case"bgra8unorm":return void I(i,z,"8unorm",4,P);case"rgba8snorm":return void I(i,z,"8snorm",4,P);case"rgba8uint":return void I(i,z,"8uint",4,P);case"rgba8sint":return void I(i,z,"8sint",4,P);case"r16uint":return void I(i,z,"16uint",1,P);case"r16sint":return void I(i,z,"16sint",1,P);case"r16float":return void I(i,z,"16float",1,P);case"rg16uint":return void I(i,z,"16uint",2,P);case"rg16sint":return void I(i,z,"16sint",2,P);case"rg16float":return void I(i,z,"16float",2,P);case"rgba16uint":return void I(i,z,"16uint",4,P);case"rgba16sint":return void I(i,z,"16sint",4,P);case"rgba16float":return void I(i,z,"16float",4,P);case"r32uint":return void I(i,z,"32uint",1,P);case"r32sint":return void I(i,z,"32sint",1,P);case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return void I(i,z,"32float",1,P);case"rg32uint":return void I(i,z,"32uint",2,P);case"rg32sint":return void I(i,z,"32sint",2,P);case"rg32float":return void I(i,z,"32float",2,P);case"rgba32uint":return void I(i,z,"32uint",4,P);case"rgba32sint":return void I(i,z,"32sint",4,P);case"rgba32float":return void I(i,z,"32float",4,P);case"rg11b10ufloat":console.error("TODO:rg11b10ufloat not supported for writing")}}(new Uint8Array(w),i,m,g,x,T,y,b,this.format,_)}}(i=>{i[i.token=0]="token",i[i.keyword=1]="keyword",i[i.reserved=2]="reserved"})(Et||(Et={}));class We{constructor(i,m,g){this.name=i,this.type=m,this.rule=g}toString(){return this.name}}class qe{}Pt=qe,qe.none=new We("",Et.reserved,""),qe.eof=new We("EOF",Et.token,""),qe.reserved={asm:new We("asm",Et.reserved,"asm"),bf16:new We("bf16",Et.reserved,"bf16"),do:new We("do",Et.reserved,"do"),enum:new We("enum",Et.reserved,"enum"),f16:new We("f16",Et.reserved,"f16"),f64:new We("f64",Et.reserved,"f64"),handle:new We("handle",Et.reserved,"handle"),i8:new We("i8",Et.reserved,"i8"),i16:new We("i16",Et.reserved,"i16"),i64:new We("i64",Et.reserved,"i64"),mat:new We("mat",Et.reserved,"mat"),premerge:new We("premerge",Et.reserved,"premerge"),regardless:new We("regardless",Et.reserved,"regardless"),typedef:new We("typedef",Et.reserved,"typedef"),u8:new We("u8",Et.reserved,"u8"),u16:new We("u16",Et.reserved,"u16"),u64:new We("u64",Et.reserved,"u64"),unless:new We("unless",Et.reserved,"unless"),using:new We("using",Et.reserved,"using"),vec:new We("vec",Et.reserved,"vec"),void:new We("void",Et.reserved,"void")},qe.keywords={array:new We("array",Et.keyword,"array"),atomic:new We("atomic",Et.keyword,"atomic"),bool:new We("bool",Et.keyword,"bool"),f32:new We("f32",Et.keyword,"f32"),i32:new We("i32",Et.keyword,"i32"),mat2x2:new We("mat2x2",Et.keyword,"mat2x2"),mat2x3:new We("mat2x3",Et.keyword,"mat2x3"),mat2x4:new We("mat2x4",Et.keyword,"mat2x4"),mat3x2:new We("mat3x2",Et.keyword,"mat3x2"),mat3x3:new We("mat3x3",Et.keyword,"mat3x3"),mat3x4:new We("mat3x4",Et.keyword,"mat3x4"),mat4x2:new We("mat4x2",Et.keyword,"mat4x2"),mat4x3:new We("mat4x3",Et.keyword,"mat4x3"),mat4x4:new We("mat4x4",Et.keyword,"mat4x4"),ptr:new We("ptr",Et.keyword,"ptr"),sampler:new We("sampler",Et.keyword,"sampler"),sampler_comparison:new We("sampler_comparison",Et.keyword,"sampler_comparison"),struct:new We("struct",Et.keyword,"struct"),texture_1d:new We("texture_1d",Et.keyword,"texture_1d"),texture_2d:new We("texture_2d",Et.keyword,"texture_2d"),texture_2d_array:new We("texture_2d_array",Et.keyword,"texture_2d_array"),texture_3d:new We("texture_3d",Et.keyword,"texture_3d"),texture_cube:new We("texture_cube",Et.keyword,"texture_cube"),texture_cube_array:new We("texture_cube_array",Et.keyword,"texture_cube_array"),texture_multisampled_2d:new We("texture_multisampled_2d",Et.keyword,"texture_multisampled_2d"),texture_storage_1d:new We("texture_storage_1d",Et.keyword,"texture_storage_1d"),texture_storage_2d:new We("texture_storage_2d",Et.keyword,"texture_storage_2d"),texture_storage_2d_array:new We("texture_storage_2d_array",Et.keyword,"texture_storage_2d_array"),texture_storage_3d:new We("texture_storage_3d",Et.keyword,"texture_storage_3d"),texture_depth_2d:new We("texture_depth_2d",Et.keyword,"texture_depth_2d"),texture_depth_2d_array:new We("texture_depth_2d_array",Et.keyword,"texture_depth_2d_array"),texture_depth_cube:new We("texture_depth_cube",Et.keyword,"texture_depth_cube"),texture_depth_cube_array:new We("texture_depth_cube_array",Et.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new We("texture_depth_multisampled_2d",Et.keyword,"texture_depth_multisampled_2d"),texture_external:new We("texture_external",Et.keyword,"texture_external"),u32:new We("u32",Et.keyword,"u32"),vec2:new We("vec2",Et.keyword,"vec2"),vec3:new We("vec3",Et.keyword,"vec3"),vec4:new We("vec4",Et.keyword,"vec4"),bitcast:new We("bitcast",Et.keyword,"bitcast"),block:new We("block",Et.keyword,"block"),break:new We("break",Et.keyword,"break"),case:new We("case",Et.keyword,"case"),continue:new We("continue",Et.keyword,"continue"),continuing:new We("continuing",Et.keyword,"continuing"),default:new We("default",Et.keyword,"default"),diagnostic:new We("diagnostic",Et.keyword,"diagnostic"),discard:new We("discard",Et.keyword,"discard"),else:new We("else",Et.keyword,"else"),enable:new We("enable",Et.keyword,"enable"),fallthrough:new We("fallthrough",Et.keyword,"fallthrough"),false:new We("false",Et.keyword,"false"),fn:new We("fn",Et.keyword,"fn"),for:new We("for",Et.keyword,"for"),function:new We("function",Et.keyword,"function"),if:new We("if",Et.keyword,"if"),let:new We("let",Et.keyword,"let"),const:new We("const",Et.keyword,"const"),loop:new We("loop",Et.keyword,"loop"),while:new We("while",Et.keyword,"while"),private:new We("private",Et.keyword,"private"),read:new We("read",Et.keyword,"read"),read_write:new We("read_write",Et.keyword,"read_write"),return:new We("return",Et.keyword,"return"),requires:new We("requires",Et.keyword,"requires"),storage:new We("storage",Et.keyword,"storage"),switch:new We("switch",Et.keyword,"switch"),true:new We("true",Et.keyword,"true"),alias:new We("alias",Et.keyword,"alias"),type:new We("type",Et.keyword,"type"),uniform:new We("uniform",Et.keyword,"uniform"),var:new We("var",Et.keyword,"var"),override:new We("override",Et.keyword,"override"),workgroup:new We("workgroup",Et.keyword,"workgroup"),write:new We("write",Et.keyword,"write"),r8unorm:new We("r8unorm",Et.keyword,"r8unorm"),r8snorm:new We("r8snorm",Et.keyword,"r8snorm"),r8uint:new We("r8uint",Et.keyword,"r8uint"),r8sint:new We("r8sint",Et.keyword,"r8sint"),r16uint:new We("r16uint",Et.keyword,"r16uint"),r16sint:new We("r16sint",Et.keyword,"r16sint"),r16float:new We("r16float",Et.keyword,"r16float"),rg8unorm:new We("rg8unorm",Et.keyword,"rg8unorm"),rg8snorm:new We("rg8snorm",Et.keyword,"rg8snorm"),rg8uint:new We("rg8uint",Et.keyword,"rg8uint"),rg8sint:new We("rg8sint",Et.keyword,"rg8sint"),r32uint:new We("r32uint",Et.keyword,"r32uint"),r32sint:new We("r32sint",Et.keyword,"r32sint"),r32float:new We("r32float",Et.keyword,"r32float"),rg16uint:new We("rg16uint",Et.keyword,"rg16uint"),rg16sint:new We("rg16sint",Et.keyword,"rg16sint"),rg16float:new We("rg16float",Et.keyword,"rg16float"),rgba8unorm:new We("rgba8unorm",Et.keyword,"rgba8unorm"),rgba8unorm_srgb:new We("rgba8unorm_srgb",Et.keyword,"rgba8unorm_srgb"),rgba8snorm:new We("rgba8snorm",Et.keyword,"rgba8snorm"),rgba8uint:new We("rgba8uint",Et.keyword,"rgba8uint"),rgba8sint:new We("rgba8sint",Et.keyword,"rgba8sint"),bgra8unorm:new We("bgra8unorm",Et.keyword,"bgra8unorm"),bgra8unorm_srgb:new We("bgra8unorm_srgb",Et.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new We("rgb10a2unorm",Et.keyword,"rgb10a2unorm"),rg11b10float:new We("rg11b10float",Et.keyword,"rg11b10float"),rg32uint:new We("rg32uint",Et.keyword,"rg32uint"),rg32sint:new We("rg32sint",Et.keyword,"rg32sint"),rg32float:new We("rg32float",Et.keyword,"rg32float"),rgba16uint:new We("rgba16uint",Et.keyword,"rgba16uint"),rgba16sint:new We("rgba16sint",Et.keyword,"rgba16sint"),rgba16float:new We("rgba16float",Et.keyword,"rgba16float"),rgba32uint:new We("rgba32uint",Et.keyword,"rgba32uint"),rgba32sint:new We("rgba32sint",Et.keyword,"rgba32sint"),rgba32float:new We("rgba32float",Et.keyword,"rgba32float"),static_assert:new We("static_assert",Et.keyword,"static_assert")},qe.tokens={decimal_float_literal:new We("decimal_float_literal",Et.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/),hex_float_literal:new We("hex_float_literal",Et.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/),int_literal:new We("int_literal",Et.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new We("uint_literal",Et.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),name:new We("name",Et.token,/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u),ident:new We("ident",Et.token,/[_a-zA-Z][0-9a-zA-Z_]*/),and:new We("and",Et.token,"&"),and_and:new We("and_and",Et.token,"&&"),arrow:new We("arrow ",Et.token,"->"),attr:new We("attr",Et.token,"@"),forward_slash:new We("forward_slash",Et.token,"/"),bang:new We("bang",Et.token,"!"),bracket_left:new We("bracket_left",Et.token,"["),bracket_right:new We("bracket_right",Et.token,"]"),brace_left:new We("brace_left",Et.token,"{"),brace_right:new We("brace_right",Et.token,"}"),colon:new We("colon",Et.token,":"),comma:new We("comma",Et.token,","),equal:new We("equal",Et.token,"="),equal_equal:new We("equal_equal",Et.token,"=="),not_equal:new We("not_equal",Et.token,"!="),greater_than:new We("greater_than",Et.token,">"),greater_than_equal:new We("greater_than_equal",Et.token,">="),shift_right:new We("shift_right",Et.token,">>"),less_than:new We("less_than",Et.token,"<"),less_than_equal:new We("less_than_equal",Et.token,"<="),shift_left:new We("shift_left",Et.token,"<<"),modulo:new We("modulo",Et.token,"%"),minus:new We("minus",Et.token,"-"),minus_minus:new We("minus_minus",Et.token,"--"),period:new We("period",Et.token,"."),plus:new We("plus",Et.token,"+"),plus_plus:new We("plus_plus",Et.token,"++"),or:new We("or",Et.token,"|"),or_or:new We("or_or",Et.token,"||"),paren_left:new We("paren_left",Et.token,"("),paren_right:new We("paren_right",Et.token,")"),semicolon:new We("semicolon",Et.token,";"),star:new We("star",Et.token,"*"),tilde:new We("tilde",Et.token,"~"),underscore:new We("underscore",Et.token,"_"),xor:new We("xor",Et.token,"^"),plus_equal:new We("plus_equal",Et.token,"+="),minus_equal:new We("minus_equal",Et.token,"-="),times_equal:new We("times_equal",Et.token,"*="),division_equal:new We("division_equal",Et.token,"/="),modulo_equal:new We("modulo_equal",Et.token,"%="),and_equal:new We("and_equal",Et.token,"&="),or_equal:new We("or_equal",Et.token,"|="),xor_equal:new We("xor_equal",Et.token,"^="),shift_right_equal:new We("shift_right_equal",Et.token,">>="),shift_left_equal:new We("shift_left_equal",Et.token,"<<=")},qe.simpleTokens={"@":Pt.tokens.attr,"{":Pt.tokens.brace_left,"}":Pt.tokens.brace_right,":":Pt.tokens.colon,",":Pt.tokens.comma,"(":Pt.tokens.paren_left,")":Pt.tokens.paren_right,";":Pt.tokens.semicolon},qe.literalTokens={"&":Pt.tokens.and,"&&":Pt.tokens.and_and,"->":Pt.tokens.arrow,"/":Pt.tokens.forward_slash,"!":Pt.tokens.bang,"[":Pt.tokens.bracket_left,"]":Pt.tokens.bracket_right,"=":Pt.tokens.equal,"==":Pt.tokens.equal_equal,"!=":Pt.tokens.not_equal,">":Pt.tokens.greater_than,">=":Pt.tokens.greater_than_equal,">>":Pt.tokens.shift_right,"<":Pt.tokens.less_than,"<=":Pt.tokens.less_than_equal,"<<":Pt.tokens.shift_left,"%":Pt.tokens.modulo,"-":Pt.tokens.minus,"--":Pt.tokens.minus_minus,".":Pt.tokens.period,"+":Pt.tokens.plus,"++":Pt.tokens.plus_plus,"|":Pt.tokens.or,"||":Pt.tokens.or_or,"*":Pt.tokens.star,"~":Pt.tokens.tilde,_:Pt.tokens.underscore,"^":Pt.tokens.xor,"+=":Pt.tokens.plus_equal,"-=":Pt.tokens.minus_equal,"*=":Pt.tokens.times_equal,"/=":Pt.tokens.division_equal,"%=":Pt.tokens.modulo_equal,"&=":Pt.tokens.and_equal,"|=":Pt.tokens.or_equal,"^=":Pt.tokens.xor_equal,">>=":Pt.tokens.shift_right_equal,"<<=":Pt.tokens.shift_left_equal},qe.regexTokens={decimal_float_literal:Pt.tokens.decimal_float_literal,hex_float_literal:Pt.tokens.hex_float_literal,int_literal:Pt.tokens.int_literal,uint_literal:Pt.tokens.uint_literal,ident:Pt.tokens.ident},qe.storage_class=[Pt.keywords.function,Pt.keywords.private,Pt.keywords.workgroup,Pt.keywords.uniform,Pt.keywords.storage],qe.access_mode=[Pt.keywords.read,Pt.keywords.write,Pt.keywords.read_write],qe.sampler_type=[Pt.keywords.sampler,Pt.keywords.sampler_comparison],qe.sampled_texture_type=[Pt.keywords.texture_1d,Pt.keywords.texture_2d,Pt.keywords.texture_2d_array,Pt.keywords.texture_3d,Pt.keywords.texture_cube,Pt.keywords.texture_cube_array],qe.multisampled_texture_type=[Pt.keywords.texture_multisampled_2d],qe.storage_texture_type=[Pt.keywords.texture_storage_1d,Pt.keywords.texture_storage_2d,Pt.keywords.texture_storage_2d_array,Pt.keywords.texture_storage_3d],qe.depth_texture_type=[Pt.keywords.texture_depth_2d,Pt.keywords.texture_depth_2d_array,Pt.keywords.texture_depth_cube,Pt.keywords.texture_depth_cube_array,Pt.keywords.texture_depth_multisampled_2d],qe.texture_external_type=[Pt.keywords.texture_external],qe.any_texture_type=[...Pt.sampled_texture_type,...Pt.multisampled_texture_type,...Pt.storage_texture_type,...Pt.depth_texture_type,...Pt.texture_external_type],qe.texel_format=[Pt.keywords.r8unorm,Pt.keywords.r8snorm,Pt.keywords.r8uint,Pt.keywords.r8sint,Pt.keywords.r16uint,Pt.keywords.r16sint,Pt.keywords.r16float,Pt.keywords.rg8unorm,Pt.keywords.rg8snorm,Pt.keywords.rg8uint,Pt.keywords.rg8sint,Pt.keywords.r32uint,Pt.keywords.r32sint,Pt.keywords.r32float,Pt.keywords.rg16uint,Pt.keywords.rg16sint,Pt.keywords.rg16float,Pt.keywords.rgba8unorm,Pt.keywords.rgba8unorm_srgb,Pt.keywords.rgba8snorm,Pt.keywords.rgba8uint,Pt.keywords.rgba8sint,Pt.keywords.bgra8unorm,Pt.keywords.bgra8unorm_srgb,Pt.keywords.rgb10a2unorm,Pt.keywords.rg11b10float,Pt.keywords.rg32uint,Pt.keywords.rg32sint,Pt.keywords.rg32float,Pt.keywords.rgba16uint,Pt.keywords.rgba16sint,Pt.keywords.rgba16float,Pt.keywords.rgba32uint,Pt.keywords.rgba32sint,Pt.keywords.rgba32float],qe.const_literal=[Pt.tokens.int_literal,Pt.tokens.uint_literal,Pt.tokens.decimal_float_literal,Pt.tokens.hex_float_literal,Pt.keywords.true,Pt.keywords.false],qe.literal_or_ident=[Pt.tokens.ident,Pt.tokens.int_literal,Pt.tokens.uint_literal,Pt.tokens.decimal_float_literal,Pt.tokens.hex_float_literal,Pt.tokens.name],qe.element_count_expression=[Pt.tokens.int_literal,Pt.tokens.uint_literal,Pt.tokens.ident],qe.template_types=[Pt.keywords.vec2,Pt.keywords.vec3,Pt.keywords.vec4,Pt.keywords.mat2x2,Pt.keywords.mat2x3,Pt.keywords.mat2x4,Pt.keywords.mat3x2,Pt.keywords.mat3x3,Pt.keywords.mat3x4,Pt.keywords.mat4x2,Pt.keywords.mat4x3,Pt.keywords.mat4x4,Pt.keywords.atomic,Pt.keywords.bitcast,...Pt.any_texture_type],qe.attribute_name=[Pt.tokens.ident,Pt.keywords.block,Pt.keywords.diagnostic],qe.assignment_operators=[Pt.tokens.equal,Pt.tokens.plus_equal,Pt.tokens.minus_equal,Pt.tokens.times_equal,Pt.tokens.division_equal,Pt.tokens.modulo_equal,Pt.tokens.and_equal,Pt.tokens.or_equal,Pt.tokens.xor_equal,Pt.tokens.shift_right_equal,Pt.tokens.shift_left_equal],qe.increment_operators=[Pt.tokens.plus_plus,Pt.tokens.minus_minus];class He{constructor(i,m,g,x,_){this.type=i,this.lexeme=m,this.line=g,this.start=x,this.end=_}toString(){return this.lexeme}isTemplateType(){return-1!=qe.template_types.indexOf(this.type)}isArrayType(){return this.type==qe.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class ze{constructor(i){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=i?i:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new He(qe.eof,"",this._line,this._current,this._current)),this._tokens}scanToken(){let i=this._advance();if("\n"==i)return this._line++,!0;if(this._isWhitespace(i))return!0;if("/"==i){if("/"==this._peekAhead()){for(;"\n"!=i;){if(this._isAtEnd())return!0;i=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let m=1;for(;m>0;){if(this._isAtEnd())return!0;if(i=this._advance(),"\n"==i)this._line++;else if("*"==i){if("/"==this._peekAhead()&&(this._advance(),m--,0==m))return!0}else"/"==i&&"*"==this._peekAhead()&&(this._advance(),m++)}return!0}}const m=qe.simpleTokens[i];if(m)return this._addToken(m),!0;let g=qe.none;const x=this._isAlpha(i),_="_"===i;if(this._isAlphaNumeric(i)){let m=this._peekAhead();for(;this._isAlphaNumeric(m);)i+=this._advance(),m=this._peekAhead()}if(x){const m=qe.keywords[i];if(m)return this._addToken(m),!0}if(x||_)return this._addToken(qe.tokens.ident),!0;for(;;){let m=this._findType(i);const x=this._peekAhead();if("-"==i&&this._tokens.length>0){if("="==x)return this._current++,i+=x,this._addToken(qe.tokens.minus_equal),!0;if("-"==x)return this._current++,i+=x,this._addToken(qe.tokens.minus_minus),!0;const g=this._tokens.length-1;if((-1!=qe.literal_or_ident.indexOf(this._tokens[g].type)||this._tokens[g].type==qe.tokens.paren_right)&&">"!=x)return this._addToken(m),!0}if(">"==i&&(">"==x||"="==x)){let i=!1,g=this._tokens.length-1;for(let m=0;m<5&&g>=0&&-1===qe.assignment_operators.indexOf(this._tokens[g].type);++m,--g)if(this._tokens[g].type===qe.tokens.less_than){g>0&&this._tokens[g-1].isArrayOrTemplateType()&&(i=!0);break}if(i)return this._addToken(m),!0}if(m===qe.none){let x=i,_=0;const b=2;for(let i=0;i<b;++i)if(x+=this._peekAhead(i),m=this._findType(x),m!==qe.none){_=i;break}if(m===qe.none)return g!==qe.none&&(this._current--,this._addToken(g),!0);i=x,this._current+=_+1}if(g=m,this._isAtEnd())break;i+=this._advance()}return g!==qe.none&&(this._addToken(g),!0)}_findType(i){for(const m in qe.regexTokens){const g=qe.regexTokens[m];if(this._match(i,g.rule))return g}return qe.literalTokens[i]||qe.none}_match(i,m){const g=m.exec(i);return g&&0==g.index&&g[0]==i}_isAtEnd(){return this._current>=this._source.length}_isAlpha(i){return!this._isNumeric(i)&&!this._isWhitespace(i)&&"_"!==i&&"."!==i&&"("!==i&&")"!==i&&"["!==i&&"]"!==i&&"{"!==i&&"}"!==i&&","!==i&&";"!==i&&":"!==i&&"="!==i&&"!"!==i&&"<"!==i&&">"!==i&&"+"!==i&&"-"!==i&&"*"!==i&&"/"!==i&&"%"!==i&&"&"!==i&&"|"!==i&&"^"!==i&&"~"!==i&&"@"!==i&&"#"!==i&&"?"!==i&&"'"!==i&&"`"!==i&&'"'!==i&&"\\"!==i&&"\n"!==i&&"\r"!==i&&"\t"!==i&&"\0"!==i}_isNumeric(i){return i>="0"&&i<="9"}_isAlphaNumeric(i){return this._isAlpha(i)||this._isNumeric(i)||"_"===i}_isWhitespace(i){return" "==i||"\t"==i||"\r"==i}_advance(i=0){let m=this._source[this._current];return i=i||0,i++,this._current+=i,m}_peekAhead(i=0){return i=i||0,this._current+i>=this._source.length?"\0":this._source[this._current+i]}_addToken(i){const m=this._source.substring(this._start,this._current);this._tokens.push(new He(i,m,this._line,this._start,this._current))}}function Re(i){return Array.isArray(i)||(null==i?void 0:i.buffer)instanceof ArrayBuffer}const It=new Float32Array(1),Lt=new Uint32Array(It.buffer),Dt=new Uint32Array(It.buffer),Ut=new Int32Array(1),At=new Float32Array(Ut.buffer),kt=new Uint32Array(Ut.buffer),Ot=new Uint32Array(1),Gt=new Float32Array(Ot.buffer),Ft=new Int32Array(Ot.buffer);function tt(i,m,g){if(m===g)return i;if("f32"===m){if("i32"===g||"x32"===g)return It[0]=i,Lt[0];if("u32"===g)return It[0]=i,Dt[0]}else if("i32"===m||"x32"===m){if("f32"===g)return Ut[0]=i,At[0];if("u32"===g)return Ut[0]=i,kt[0]}else if("u32"===m){if("f32"===g)return Ot[0]=i,Gt[0];if("i32"===g||"x32"===g)return Ot[0]=i,Ft[0]}return console.error(`Unsupported cast from ${m} to ${g}`),i}class nt{constructor(i){this.resources=null,this.inUse=!1,this.info=null,this.node=i}}class st{constructor(i,m){this.align=i,this.size=m}}class rt{constructor(){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new d,this.functions=[],this._types=new Map,this._functions=new Map}_isStorageTexture(i){return"texture_storage_1d"==i.name||"texture_storage_2d"==i.name||"texture_storage_2d_array"==i.name||"texture_storage_3d"==i.name}updateAST(i){for(const m of i)m instanceof C&&this._functions.set(m.name,new nt(m));for(const m of i)if(m instanceof ie){const i=this.getTypeInfo(m,null);i instanceof n&&this.structs.push(i)}for(const m of i)if(m instanceof ee)this.aliases.push(this._getAliasInfo(m));else if(m instanceof F){const i=m,g=this._getAttributeNum(i.attributes,"id",0),x=null!=i.type?this.getTypeInfo(i.type,i.attributes):null;this.overrides.push(new h(i.name,x,i.attributes,g))}else if(this._isUniformVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=new o(i.name,_,g,x,i.attributes,xt.Uniform,i.access);b.access||(b.access="read"),this.uniforms.push(b)}else if(this._isStorageVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=this._isStorageTexture(_),y=new o(i.name,_,g,x,i.attributes,b?xt.StorageTexture:xt.Storage,i.access);y.access||(y.access="read"),this.storage.push(y)}else if(this._isTextureVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=this._isStorageTexture(_),y=new o(i.name,_,g,x,i.attributes,b?xt.StorageTexture:xt.Texture,i.access);y.access||(y.access="read"),b?this.storage.push(y):this.textures.push(y)}else if(this._isSamplerVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),x=this._getAttributeNum(i.attributes,"binding",0),_=this.getTypeInfo(i.type,i.attributes),b=new o(i.name,_,g,x,i.attributes,xt.Sampler,i.access);this.samplers.push(b)}for(const m of i)if(m instanceof C){const i=this._getAttribute(m,"vertex"),g=this._getAttribute(m,"fragment"),x=this._getAttribute(m,"compute"),_=i||g||x,b=new p(m.name,null==_?void 0:_.name,m.attributes);b.attributes=m.attributes,b.startLine=m.startLine,b.endLine=m.endLine,this.functions.push(b),this._functions.get(m.name).info=b,_&&(this._functions.get(m.name).inUse=!0,b.inUse=!0,b.resources=this._findResources(m,!!_),b.inputs=this._getInputs(m.args),b.outputs=this._getOutputs(m.returnType),this.entry[_.name].push(b)),b.arguments=m.args.map(i=>new f(i.name,this.getTypeInfo(i.type,i.attributes),i.attributes)),b.returnType=m.returnType?this.getTypeInfo(m.returnType,m.attributes):null}for(const i of this._functions.values())i.info&&(i.info.inUse=i.inUse,this._addCalls(i.node,i.info.calls));for(const i of this._functions.values())i.node.search(m=>{var g,x,_;if(m instanceof Ce){if(m.value)if(Re(m.value))for(const x of m.value)for(const m of this.overrides)x===m.name&&(null===(g=i.info)||void 0===g||g.overrides.push(m));else for(const g of this.overrides)m.value===g.name&&(null===(x=i.info)||void 0===x||x.overrides.push(g))}else if(m instanceof me)for(const g of this.overrides)m.name===g.name&&(null===(_=i.info)||void 0===_||_.overrides.push(g))});for(const i of this.uniforms)this._markStructsInUse(i.type);for(const i of this.storage)this._markStructsInUse(i.type)}getStructInfo(i){for(const m of this.structs)if(m.name==i)return m;return null}getOverrideInfo(i){for(const m of this.overrides)if(m.name==i)return m;return null}_markStructsInUse(i){if(i)if(i.isStruct){if(i.inUse=!0,i.members)for(const m of i.members)this._markStructsInUse(m.type)}else if(i.isArray)this._markStructsInUse(i.format);else if(i.isTemplate)i.format&&this._markStructsInUse(i.format);else{const m=this._getAlias(i.name);m&&this._markStructsInUse(m)}}_addCalls(i,m){var g;for(const x of i.calls){const i=null===(g=this._functions.get(x.name))||void 0===g?void 0:g.info;i&&m.add(i)}}findResource(i,m,g){if(g){for(const x of this.entry.compute)if(x.name===g)for(const g of x.resources)if(g.group==i&&g.binding==m)return g;for(const x of this.entry.vertex)if(x.name===g)for(const g of x.resources)if(g.group==i&&g.binding==m)return g;for(const x of this.entry.fragment)if(x.name===g)for(const g of x.resources)if(g.group==i&&g.binding==m)return g}for(const g of this.uniforms)if(g.group==i&&g.binding==m)return g;for(const g of this.storage)if(g.group==i&&g.binding==m)return g;for(const g of this.textures)if(g.group==i&&g.binding==m)return g;for(const g of this.samplers)if(g.group==i&&g.binding==m)return g;return null}_findResource(i){for(const m of this.uniforms)if(m.name==i)return m;for(const m of this.storage)if(m.name==i)return m;for(const m of this.textures)if(m.name==i)return m;for(const m of this.samplers)if(m.name==i)return m;return null}_markStructsFromAST(i){const m=this.getTypeInfo(i,null);this._markStructsInUse(m)}_findResources(i,m){const g=[],x=this,_=[];return i.search(b=>{if(b instanceof A)_.push({});else if(b instanceof E)_.pop();else if(b instanceof B){const i=b;m&&null!==i.type&&this._markStructsFromAST(i.type),_.length>0&&(_[_.length-1][i.name]=i)}else if(b instanceof pe){const i=b;m&&null!==i.type&&this._markStructsFromAST(i.type)}else if(b instanceof M){const i=b;m&&null!==i.type&&this._markStructsFromAST(i.type),_.length>0&&(_[_.length-1][i.name]=i)}else if(b instanceof me){const i=b;if(_.length>0&&_[_.length-1][i.name])return;const m=x._findResource(i.name);m&&g.push(m)}else if(b instanceof de){const _=b,y=x._functions.get(_.name);y&&(m&&(y.inUse=!0),i.calls.add(y.node),null===y.resources&&(y.resources=x._findResources(y.node,m)),g.push(...y.resources))}else if(b instanceof G){const _=b,y=x._functions.get(_.name);y&&(m&&(y.inUse=!0),i.calls.add(y.node),null===y.resources&&(y.resources=x._findResources(y.node,m)),g.push(...y.resources))}}),[...new Map(g.map(i=>[i.name,i])).values()]}getBindGroups(){const i=[];function t(m,g){m>=i.length&&(i.length=m+1),void 0===i[m]&&(i[m]=[]),g>=i[m].length&&(i[m].length=g+1)}for(const m of this.uniforms)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.storage)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.textures)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.samplers)t(m.group,m.binding),i[m.group][m.binding]=m;return i}_getOutputs(i,m=void 0){if(void 0===m&&(m=[]),i instanceof ie)this._getStructOutputs(i,m);else{const g=this._getOutputInfo(i);null!==g&&m.push(g)}return m}_getStructOutputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructOutputs(g.type,m);else{const i=this._getAttribute(g,"location")||this._getAttribute(g,"builtin");if(null!==i){const x=this.getTypeInfo(g.type,g.type.attributes),_=this._parseInt(i.value),b=new u(g.name,x,i.name,_);m.push(b)}}}_getOutputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this.getTypeInfo(i,i.attributes),x=this._parseInt(m.value);return new u("",g,m.name,x)}return null}_getInputs(i,m=void 0){void 0===m&&(m=[]);for(const g of i)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}return m}_getStructInputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}}_getInputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this._getAttribute(i,"interpolation"),x=this.getTypeInfo(i.type,i.attributes),_=this._parseInt(m.value),b=new c(i.name,x,m.name,_);return null!==g&&(b.interpolation=this._parseString(g.value)),b}return null}_parseString(i){return i instanceof Array&&(i=i[0]),i}_parseInt(i){i instanceof Array&&(i=i[0]);const m=parseInt(i);return isNaN(m)?i:m}_getAlias(i){for(const m of this.aliases)if(m.name==i)return m.type;return null}_getAliasInfo(i){return new l(i.name,this.getTypeInfo(i.type,null))}getTypeInfoByName(i){for(const m of this.structs)if(m.name==i)return m;for(const m of this.aliases)if(m.name==i)return m.type;return null}getTypeInfo(i,m=null){if(this._types.has(i))return this._types.get(i);if(i instanceof le){const g=i.type?this.getTypeInfo(i.type,i.attributes):null,x=new r(i.name,g,m);return this._types.set(i,x),this._updateTypeInfo(x),x}if(i instanceof ce){const g=i,x=g.format?this.getTypeInfo(g.format,g.attributes):null,_=new s(g.name,m);return _.format=x,_.count=g.count,this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof ie){const g=i,x=new n(g.name,m);x.startLine=g.startLine,x.endLine=g.endLine;for(const i of g.members){const m=this.getTypeInfo(i.type,i.attributes);x.members.push(new t(i.name,m,i.attributes))}return this._types.set(i,x),this._updateTypeInfo(x),x}if(i instanceof ue){const g=i,x=g.format instanceof re,_=g.format?x?this.getTypeInfo(g.format,null):new e(g.format,null):null,b=new a(g.name,_,m,g.access);return this._types.set(i,b),this._updateTypeInfo(b),b}if(i instanceof oe){const g=i,x=g.format?this.getTypeInfo(g.format,null):null,_=new a(g.name,x,m,g.access);return this._types.set(i,_),this._updateTypeInfo(_),_}const g=new e(i.name,m);return this._types.set(i,g),this._updateTypeInfo(g),g}_updateTypeInfo(i){var m,g,x;const _=this._getTypeSize(i);if(i.size=null!==(m=null==_?void 0:_.size)&&void 0!==m?m:0,i instanceof s&&i.format){const m=this._getTypeSize(i.format);i.stride=Math.max(null!==(g=null==m?void 0:m.size)&&void 0!==g?g:0,null!==(x=null==m?void 0:m.align)&&void 0!==x?x:0),this._updateTypeInfo(i.format)}i instanceof r&&this._updateTypeInfo(i.format),i instanceof n&&this._updateStructInfo(i)}_updateStructInfo(i){var m;let g=0,x=0,_=0,b=0;for(let y=0,T=i.members.length;y<T;++y){const T=i.members[y],w=this._getTypeSize(T);if(!w)continue;null!==(m=this._getAlias(T.type.name))&&void 0!==m||T.type;const P=w.align,z=w.size;g=this._roundUp(P,g+x),x=z,_=g,b=Math.max(b,P),T.offset=g,T.size=z,this._updateTypeInfo(T.type)}i.size=this._roundUp(b,_+x),i.align=b}_getTypeSize(i){var m,g;if(null==i)return null;const x=this._getAttributeNum(i.attributes,"size",0),_=this._getAttributeNum(i.attributes,"align",0);if(i instanceof t&&(i=i.type),i instanceof e){const m=this._getAlias(i.name);null!==m&&(i=m)}{const g=rt._typeInfo[i.name];if(void 0!==g){const b="f16"===(null===(m=i.format)||void 0===m?void 0:m.name)?2:1;return new st(Math.max(_,g.align/b),Math.max(x,g.size/b))}}{const m=rt._typeInfo[i.name.substring(0,i.name.length-1)];if(m){const g="h"===i.name[i.name.length-1]?2:1;return new st(Math.max(_,m.align/g),Math.max(x,m.size/g))}}if(i instanceof s){let m=i,b=8,y=8;const T=this._getTypeSize(m.format);return null!==T&&(y=T.size,b=T.align),y=m.count*this._getAttributeNum(null!==(g=null==i?void 0:i.attributes)&&void 0!==g?g:null,"stride",this._roundUp(b,y)),x&&(y=x),new st(Math.max(_,b),Math.max(x,y))}if(i instanceof n){let m=0,g=0,b=0,y=0,T=0;for(const g of i.members){const i=this._getTypeSize(g.type);null!==i&&(m=Math.max(i.align,m),b=this._roundUp(i.align,b+y),y=i.size,T=b)}return g=this._roundUp(m,T+y),new st(Math.max(_,m),Math.max(x,g))}return null}_isUniformVar(i){return i instanceof B&&"uniform"==i.storage}_isStorageVar(i){return i instanceof B&&"storage"==i.storage}_isTextureVar(i){return i instanceof B&&null!==i.type&&-1!=rt._textureTypes.indexOf(i.type.name)}_isSamplerVar(i){return i instanceof B&&null!==i.type&&-1!=rt._samplerTypes.indexOf(i.type.name)}_getAttribute(i,m){const g=i;if(!g||!g.attributes)return null;const x=g.attributes;for(let i of x)if(i.name==m)return i;return null}_getAttributeNum(i,m,g){if(null===i)return g;for(let x of i)if(x.name==m){let i=null!==x&&null!==x.value?x.value:g;return i instanceof Array&&(i=i[0]),"number"==typeof i?i:"string"==typeof i?parseInt(i):g}return g}_roundUp(i,m){return Math.ceil(m/i)*i}}rt._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},rt._textureTypes=qe.any_texture_type.map(i=>i.name),rt._samplerTypes=qe.sampler_type.map(i=>i.name);let Nt=0;class it{constructor(i,m,g){this.id=Nt++,this.name=i,this.value=m,this.node=g}clone(){return new it(this.name,this.value,this.node)}}class ot{constructor(i){this.id=Nt++,this.name=i.name,this.node=i}clone(){return new ot(this.node)}}class lt{constructor(i){this.parent=null,this.variables=new Map,this.functions=new Map,this.currentFunctionName="",this.id=Nt++,i&&(this.parent=i,this.currentFunctionName=i.currentFunctionName)}getVariable(i){var m;return this.variables.has(i)?null!==(m=this.variables.get(i))&&void 0!==m?m:null:this.parent?this.parent.getVariable(i):null}getFunction(i){var m;return this.functions.has(i)?null!==(m=this.functions.get(i))&&void 0!==m?m:null:this.parent?this.parent.getFunction(i):null}createVariable(i,m,g){this.variables.set(i,new it(i,m,null!=g?g:null))}setVariable(i,m,g){const x=this.getVariable(i);null!==x?x.value=m:this.createVariable(i,m,g)}getVariableValue(i){var m;const g=this.getVariable(i);return null!==(m=null==g?void 0:g.value)&&void 0!==m?m:null}clone(){return new lt(this)}}class ct{evalExpression(i,m){return null}getTypeInfo(i){return null}getVariableName(i,m){return""}}class ut{constructor(i){this.exec=i}getTypeInfo(i){return this.exec.getTypeInfo(i)}All(i,m){const g=this.exec.evalExpression(i.args[0],m);let x=!0;if(g instanceof Fe)return g.data.forEach(i=>{i||(x=!1)}),new Oe(x?1:0,this.getTypeInfo("bool"));throw new Error(`All() expects a vector argument. Line ${i.line}`)}Any(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const i=g.data.some(i=>i);return new Oe(i?1:0,this.getTypeInfo("bool"))}throw new Error(`Any() expects a vector argument. Line ${i.line}`)}Select(i,m){const g=this.exec.evalExpression(i.args[2],m);if(!(g instanceof Oe))throw new Error(`Select() expects a bool condition. Line ${i.line}`);return g.value?this.exec.evalExpression(i.args[1],m):this.exec.evalExpression(i.args[0],m)}ArrayLength(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.evalExpression(g,m);if(x instanceof Ue&&0===x.typeInfo.size){const i=x.typeInfo,m=x.buffer.byteLength/i.stride;return new Oe(m,this.getTypeInfo("u32"))}return new Oe(x.typeInfo.size,this.getTypeInfo("u32"))}Abs(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.abs(i)),g.typeInfo);const x=g;return new Oe(Math.abs(x.value),x.typeInfo)}Acos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acos(i)),g.typeInfo);const x=g;return new Oe(Math.acos(x.value),g.typeInfo)}Acosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acosh(i)),g.typeInfo);const x=g;return new Oe(Math.acosh(x.value),g.typeInfo)}Asin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asin(i)),g.typeInfo);const x=g;return new Oe(Math.asin(x.value),g.typeInfo)}Asinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asinh(i)),g.typeInfo);const x=g;return new Oe(Math.asinh(x.value),g.typeInfo)}Atan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atan(i)),g.typeInfo);const x=g;return new Oe(Math.atan(x.value),g.typeInfo)}Atanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atanh(i)),g.typeInfo);const x=g;return new Oe(Math.atanh(x.value),g.typeInfo)}Atan2(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.atan2(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.atan2(_.value,b.value),g.typeInfo)}Ceil(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.ceil(i)),g.typeInfo);const x=g;return new Oe(Math.ceil(x.value),g.typeInfo)}_clamp(i,m,g){return Math.min(Math.max(i,m),g)}Clamp(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>this._clamp(i,x.data[m],_.data[m])),g.typeInfo);const b=g,y=x,T=_;return new Oe(this._clamp(b.value,y.value,T.value),g.typeInfo)}Cos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cos(i)),g.typeInfo);const x=g;return new Oe(Math.cos(x.value),g.typeInfo)}Cosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cosh(i)),g.typeInfo);const x=g;return new Oe(Math.cos(x.value),g.typeInfo)}CountLeadingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.clz32(i)),g.typeInfo);const x=g;return new Oe(Math.clz32(x.value),g.typeInfo)}_countOneBits(i){let m=0;for(;0!==i;)1&i&&m++,i>>=1;return m}CountOneBits(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countOneBits(i)),g.typeInfo);const x=g;return new Oe(this._countOneBits(x.value),g.typeInfo)}_countTrailingZeros(i){if(0===i)return 32;let m=0;for(;!(1&i);)i>>=1,m++;return m}CountTrailingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countTrailingZeros(i)),g.typeInfo);const x=g;return new Oe(this._countTrailingZeros(x.value),g.typeInfo)}Cross(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe){if(3!==g.data.length||3!==x.data.length)return console.error(`Cross() expects 3D vectors. Line ${i.line}`),null;const m=g.data,_=x.data;return new Fe([m[1]*_[2]-_[1]*m[2],m[2]*_[0]-_[2]*m[0],m[0]*_[1]-_[0]*m[1]],g.typeInfo)}return console.error(`Cross() expects vector arguments. Line ${i.line}`),null}Degrees(i,m){const g=this.exec.evalExpression(i.args[0],m),x=180/Math.PI;return g instanceof Fe?new Fe(g.data.map(i=>i*x),g.typeInfo):new Oe(g.value*x,this.getTypeInfo("f32"))}Determinant(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Me){const i=g.data,m=g.typeInfo.getTypeName(),x=m.endsWith("h")?this.getTypeInfo("f16"):this.getTypeInfo("f32");if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m)return new Oe(i[0]*i[3]-i[1]*i[2],x);if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),x);if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m)console.error(`TODO:Determinant for ${m}`);else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m)console.error(`TODO:Determinant for ${m}`);else{if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),x);"mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m||"mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m||"mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m?console.error(`TODO:Determinant for ${m}`):"mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m||console.error(`TODO:Determinant for ${m}`)}}return console.error(`Determinant expects a matrix argument. Line ${i.line}`),null}Distance(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe){let i=0;for(let m=0;m<g.data.length;++m)i+=(g.data[m]-x.data[m])*(g.data[m]-x.data[m]);return new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const _=g,b=x;return new Oe(Math.abs(_.value-b.value),g.typeInfo)}_dot(i,m){let g=0;for(let x=0;x<i.length;++x)g+=m[x]*i[x];return g}Dot(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);return g instanceof Fe&&x instanceof Fe?new Oe(this._dot(g.data,x.data),this.getTypeInfo("f32")):(console.error(`Dot() expects vector arguments. Line ${i.line}`),null)}Dot4U8Packed(i,m){return console.error(`TODO:dot4U8Packed. Line ${i.line}`),null}Dot4I8Packed(i,m){return console.error(`TODO:dot4I8Packed. Line ${i.line}`),null}Exp(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.exp(i)),g.typeInfo);const x=g;return new Oe(Math.exp(x.value),g.typeInfo)}Exp2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.pow(2,i)),g.typeInfo);const x=g;return new Oe(Math.pow(2,x.value),g.typeInfo)}ExtractBits(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if("u32"!==x.typeInfo.name&&"x32"!==x.typeInfo.name)return console.error(`ExtractBits() expects an i32 offset argument. Line ${i.line}`),null;if("u32"!==_.typeInfo.name&&"x32"!==_.typeInfo.name)return console.error(`ExtractBits() expects an i32 count argument. Line ${i.line}`),null;const b=x.value,y=_.value;if(g instanceof Fe)return new Fe(g.data.map(i=>i>>b&(1<<y)-1),g.typeInfo);if("i32"!==g.typeInfo.name&&"x32"!==g.typeInfo.name)return console.error(`ExtractBits() expects an i32 argument. Line ${i.line}`),null;const T=g.value;return new Oe(T>>b&(1<<y)-1,this.getTypeInfo("i32"))}FaceForward(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe){const i=this._dot(x.data,_.data);return new Fe(i<0?Array.from(g.data):g.data.map(i=>-i),g.typeInfo)}return console.error(`FaceForward() expects vector arguments. Line ${i.line}`),null}_firstLeadingBit(i){return 0===i?-1:31-Math.clz32(i)}FirstLeadingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstLeadingBit(i)),g.typeInfo);const x=g;return new Oe(this._firstLeadingBit(x.value),g.typeInfo)}_firstTrailingBit(i){return 0===i?-1:Math.log2(i&-i)}FirstTrailingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstTrailingBit(i)),g.typeInfo);const x=g;return new Oe(this._firstTrailingBit(x.value),g.typeInfo)}Floor(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.floor(i)),g.typeInfo);const x=g;return new Oe(Math.floor(x.value),g.typeInfo)}Fma(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe)return g.data.length!==x.data.length||g.data.length!==_.data.length?(console.error(`Fma() expects vectors of the same length. Line ${i.line}`),null):new Fe(g.data.map((i,m)=>i*x.data[m]+_.data[m]),g.typeInfo);const b=g,y=x,T=_;return new Oe(b.value*y.value+T.value,b.typeInfo)}Fract(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>i-Math.floor(i)),g.typeInfo);const x=g;return new Oe(x.value-Math.floor(x.value),g.typeInfo)}Frexp(i,m){return console.error(`TODO:frexp. Line ${i.line}`),null}InsertBits(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m),b=this.exec.evalExpression(i.args[3],m);if("u32"!==_.typeInfo.name&&"x32"!==_.typeInfo.name)return console.error(`InsertBits() expects an i32 offset argument. Line ${i.line}`),null;const y=_.value,T=(1<<b.value)-1<<y,w=~T;if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>i&w|x.data[m]<<y&T),g.typeInfo);const P=g.value,z=x.value;return new Oe(P&w|z<<y&T,g.typeInfo)}InverseSqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>1/Math.sqrt(i)),g.typeInfo);const x=g;return new Oe(1/Math.sqrt(x.value),g.typeInfo)}Ldexp(i,m){return console.error(`TODO:ldexp. Line ${i.line}`),null}Length(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){let i=0;return g.data.forEach(m=>{i+=m*m}),new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const x=g;return new Oe(Math.abs(x.value),g.typeInfo)}Log(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log(i)),g.typeInfo);const x=g;return new Oe(Math.log(x.value),g.typeInfo)}Log2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log2(i)),g.typeInfo);const x=g;return new Oe(Math.log2(x.value),g.typeInfo)}Max(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.max(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.max(_.value,b.value),g.typeInfo)}Min(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.min(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.min(_.value,b.value),g.typeInfo)}Mix(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>g.data[m]*(1-_.data[m])+x.data[m]*_.data[m]),g.typeInfo);const b=x,y=_;return new Oe(g.value*(1-y.value)+b.value*y.value,g.typeInfo)}Modf(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>i%x.data[m]),g.typeInfo);const _=x;return new Oe(g.value%_.value,g.typeInfo)}Normalize(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const x=this.Length(i,m).value;return new Fe(g.data.map(i=>i/x),g.typeInfo)}return console.error(`Normalize() expects a vector argument. Line ${i.line}`),null}Pow(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe)return new Fe(g.data.map((i,m)=>Math.pow(i,x.data[m])),g.typeInfo);const _=g,b=x;return new Oe(Math.pow(_.value,b.value),g.typeInfo)}QuantizeToF16(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i),g.typeInfo):new Oe(g.value,g.typeInfo)}Radians(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i*Math.PI/180),g.typeInfo):new Oe(g.value*Math.PI/180,this.getTypeInfo("f32"))}Reflect(i,m){let g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&x instanceof Fe){const i=this._dot(g.data,x.data);return new Fe(g.data.map((m,g)=>m-2*i*x.data[g]),g.typeInfo)}return console.error(`Reflect() expects vector arguments. Line ${i.line}`),null}Refract(i,m){let g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&x instanceof Fe&&_ instanceof Oe){const i=this._dot(x.data,g.data);return new Fe(g.data.map((m,g)=>{const b=1-_.value*_.value*(1-i*i);if(b<0)return 0;const y=Math.sqrt(b);return _.value*m-(_.value*i+y)*x.data[g]}),g.typeInfo)}return console.error(`Refract() expects vector arguments and a scalar argument. Line ${i.line}`),null}ReverseBits(i,m){return console.error(`TODO:reverseBits. Line ${i.line}`),null}Round(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.round(i)),g.typeInfo);const x=g;return new Oe(Math.round(x.value),g.typeInfo)}Saturate(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.min(Math.max(i,0),1)),g.typeInfo);const x=g;return new Oe(Math.min(Math.max(x.value,0),1),g.typeInfo)}Sign(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sign(i)),g.typeInfo);const x=g;return new Oe(Math.sign(x.value),g.typeInfo)}Sin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sin(i)),g.typeInfo);const x=g;return new Oe(Math.sin(x.value),g.typeInfo)}Sinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sinh(i)),g.typeInfo);const x=g;return new Oe(Math.sinh(x.value),g.typeInfo)}_smoothstep(i,m,g){const x=Math.min(Math.max((g-i)/(m-i),0),1);return x*x*(3-2*x)}SmoothStep(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m),_=this.exec.evalExpression(i.args[2],m);if(_ instanceof Fe&&g instanceof Fe&&x instanceof Fe)return new Fe(_.data.map((i,m)=>this._smoothstep(g.data[m],x.data[m],i)),_.typeInfo);const b=g,y=x,T=_;return new Oe(this._smoothstep(b.value,y.value,T.value),_.typeInfo)}Sqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sqrt(i)),g.typeInfo);const x=g;return new Oe(Math.sqrt(x.value),g.typeInfo)}Step(i,m){const g=this.exec.evalExpression(i.args[0],m),x=this.exec.evalExpression(i.args[1],m);if(x instanceof Fe&&g instanceof Fe)return new Fe(x.data.map((i,m)=>i<g.data[m]?0:1),x.typeInfo);const _=g;return new Oe(x.value<_.value?0:1,_.typeInfo)}Tan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tan(i)),g.typeInfo);const x=g;return new Oe(Math.tan(x.value),g.typeInfo)}Tanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tanh(i)),g.typeInfo);const x=g;return new Oe(Math.tanh(x.value),g.typeInfo)}_getTransposeType(i){const m=i.getTypeName();return"mat2x2f"===m||"mat2x2h"===m?i:"mat2x3f"===m?this.getTypeInfo("mat3x2f"):"mat2x3h"===m?this.getTypeInfo("mat3x2h"):"mat2x4f"===m?this.getTypeInfo("mat4x2f"):"mat2x4h"===m?this.getTypeInfo("mat4x2h"):"mat3x2f"===m?this.getTypeInfo("mat2x3f"):"mat3x2h"===m?this.getTypeInfo("mat2x3h"):"mat3x3f"===m||"mat3x3h"===m?i:"mat3x4f"===m?this.getTypeInfo("mat4x3f"):"mat3x4h"===m?this.getTypeInfo("mat4x3h"):"mat4x2f"===m?this.getTypeInfo("mat2x4f"):"mat4x2h"===m?this.getTypeInfo("mat2x4h"):"mat4x3f"===m?this.getTypeInfo("mat3x4f"):"mat4x3h"===m?this.getTypeInfo("mat3x4h"):("mat4x4f"===m||"mat4x4h"===m||console.error(`Invalid matrix type ${m}`),i)}Transpose(i,m){const g=this.exec.evalExpression(i.args[0],m);if(!(g instanceof Me))return console.error(`Transpose() expects a matrix argument. Line ${i.line}`),null;const x=this._getTransposeType(g.typeInfo);if("mat2x2"===g.typeInfo.name||"mat2x2f"===g.typeInfo.name||"mat2x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[2],i[1],i[3]],x)}if("mat2x3"===g.typeInfo.name||"mat2x3f"===g.typeInfo.name||"mat2x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7]],x)}if("mat2x4"===g.typeInfo.name||"mat2x4f"===g.typeInfo.name||"mat2x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13]],x)}if("mat3x2"===g.typeInfo.name||"mat3x2f"===g.typeInfo.name||"mat3x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[1],i[4],i[2],i[5]],x)}if("mat3x3"===g.typeInfo.name||"mat3x3f"===g.typeInfo.name||"mat3x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7],i[2],i[5],i[8]],x)}if("mat3x4"===g.typeInfo.name||"mat3x4f"===g.typeInfo.name||"mat3x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14]],x)}if("mat4x2"===g.typeInfo.name||"mat4x2f"===g.typeInfo.name||"mat4x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[1],i[5],i[2],i[6]],x)}if("mat4x3"===g.typeInfo.name||"mat4x3f"===g.typeInfo.name||"mat4x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]],x)}if("mat4x4"===g.typeInfo.name||"mat4x4f"===g.typeInfo.name||"mat4x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14],i[3],i[7],i[11],i[15]],x)}return console.error(`Invalid matrix type ${g.typeInfo.name}`),null}Trunc(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.trunc(i)),g.typeInfo);const x=g;return new Oe(Math.trunc(x.value),g.typeInfo)}Dpdx(i,m){return console.error(`TODO:dpdx. Line ${i.line}`),null}DpdxCoarse(i,m){return console.error(`TODO:dpdxCoarse. Line ${i.line}`),null}DpdxFine(i,m){return console.error("TODO:dpdxFine"),null}Dpdy(i,m){return console.error("TODO:dpdy"),null}DpdyCoarse(i,m){return console.error("TODO:dpdyCoarse"),null}DpdyFine(i,m){return console.error("TODO:dpdyFine"),null}Fwidth(i,m){return console.error("TODO:fwidth"),null}FwidthCoarse(i,m){return console.error("TODO:fwidthCoarse"),null}FwidthFine(i,m){return console.error("TODO:fwidthFine"),null}TextureDimensions(i,m){const g=i.args[0],x=i.args.length>1?this.exec.evalExpression(i.args[1],m).value:0;if(g instanceof me){const _=g.name,b=m.getVariableValue(_);if(b instanceof Pe){if(x<0||x>=b.mipLevelCount)return console.error(`Invalid mip level for textureDimensions. Line ${i.line}`),null;const m=b.getMipLevelSize(x),g=b.dimension;return"1d"===g?new Oe(m[0],this.getTypeInfo("u32")):"3d"===g?new Fe(m,this.getTypeInfo("vec3u")):"2d"===g?new Fe(m.slice(0,2),this.getTypeInfo("vec2u")):(console.error(`Invalid texture dimension ${g} not found. Line ${i.line}`),null)}return console.error(`Texture ${_} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureDimensions. Line ${i.line}`),null}TextureGather(i,m){return console.error("TODO:textureGather"),null}TextureGatherCompare(i,m){return console.error("TODO:textureGatherCompare"),null}TextureLoad(i,m){const g=i.args[0],x=this.exec.evalExpression(i.args[1],m),_=i.args.length>2?this.exec.evalExpression(i.args[2],m).value:0;if(!(x instanceof Fe)||2!==x.data.length)return console.error(`Invalid UV argument for textureLoad. Line ${i.line}`),null;if(g instanceof me){const b=g.name,y=m.getVariableValue(b);if(y instanceof Pe){const m=Math.floor(x.data[0]),g=Math.floor(x.data[1]);if(m<0||m>=y.width||g<0||g>=y.height)return console.error(`Texture ${b} out of bounds. Line ${i.line}`),null;const T=y.getPixel(m,g,0,_);return null===T?(console.error(`Invalid texture format for textureLoad. Line ${i.line}`),null):new Fe(T,this.getTypeInfo("vec4f"))}return console.error(`Texture ${b} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureLoad. Line ${i.line}`),null}TextureNumLayers(i,m){const g=i.args[0];if(g instanceof me){const x=g.name,_=m.getVariableValue(x);return _ instanceof Pe?new Oe(_.depthOrArrayLayers,this.getTypeInfo("u32")):(console.error(`Texture ${x} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLayers. Line ${i.line}`),null}TextureNumLevels(i,m){const g=i.args[0];if(g instanceof me){const x=g.name,_=m.getVariableValue(x);return _ instanceof Pe?new Oe(_.mipLevelCount,this.getTypeInfo("u32")):(console.error(`Texture ${x} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLevels. Line ${i.line}`),null}TextureNumSamples(i,m){const g=i.args[0];if(g instanceof me){const x=g.name,_=m.getVariableValue(x);return _ instanceof Pe?new Oe(_.sampleCount,this.getTypeInfo("u32")):(console.error(`Texture ${x} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumSamples. Line ${i.line}`),null}TextureSample(i,m){return console.error("TODO:textureSample"),null}TextureSampleBias(i,m){return console.error("TODO:textureSampleBias"),null}TextureSampleCompare(i,m){return console.error("TODO:textureSampleCompare"),null}TextureSampleCompareLevel(i,m){return console.error("TODO:textureSampleCompareLevel"),null}TextureSampleGrad(i,m){return console.error("TODO:textureSampleGrad"),null}TextureSampleLevel(i,m){return console.error("TODO:textureSampleLevel"),null}TextureSampleBaseClampToEdge(i,m){return console.error("TODO:textureSampleBaseClampToEdge"),null}TextureStore(i,m){const g=i.args[0],x=this.exec.evalExpression(i.args[1],m),_=4===i.args.length?this.exec.evalExpression(i.args[2],m).value:0,b=4===i.args.length?this.exec.evalExpression(i.args[3],m).data:this.exec.evalExpression(i.args[2],m).data;if(4!==b.length)return console.error(`Invalid value argument for textureStore. Line ${i.line}`),null;if(!(x instanceof Fe)||2!==x.data.length)return console.error(`Invalid UV argument for textureStore. Line ${i.line}`),null;if(g instanceof me){const y=g.name,T=m.getVariableValue(y);if(T instanceof Pe){const m=T.getMipLevelSize(0),g=Math.floor(x.data[0]),w=Math.floor(x.data[1]);return g<0||g>=m[0]||w<0||w>=m[1]?(console.error(`Texture ${y} out of bounds. Line ${i.line}`),null):(T.setPixel(g,w,0,_,Array.from(b)),null)}return console.error(`Texture ${y} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureStore. Line ${i.line}`),null}AtomicLoad(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m);return m.getVariable(x).value.getSubData(this.exec,g.postfix,m)}AtomicStore(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m);return T instanceof Oe&&y instanceof Oe&&(T.value=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),null}AtomicAdd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value+=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicSub(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value-=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicMax(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=Math.max(T.value,y.value)),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicMin(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=Math.min(T.value,y.value)),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicAnd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=T.value&y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicOr(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=T.value|y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicXor(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=T.value^y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicExchange(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const x=this.exec.getVariableName(g,m),_=m.getVariable(x);let b=i.args[1];const y=this.exec.evalExpression(b,m),T=_.value.getSubData(this.exec,g.postfix,m),w=new Oe(T.value,T.typeInfo);return T instanceof Oe&&y instanceof Oe&&(T.value=y.value),_.value instanceof Ue&&_.value.setDataValue(this.exec,T,g.postfix,m),w}AtomicCompareExchangeWeak(i,m){return console.error("TODO:atomicCompareExchangeWeak"),null}Pack4x8snorm(i,m){return console.error("TODO:pack4x8snorm"),null}Pack4x8unorm(i,m){return console.error("TODO:pack4x8unorm"),null}Pack4xI8(i,m){return console.error("TODO:pack4xI8"),null}Pack4xU8(i,m){return console.error("TODO:pack4xU8"),null}Pack4x8Clamp(i,m){return console.error("TODO:pack4x8Clamp"),null}Pack4xU8Clamp(i,m){return console.error("TODO:pack4xU8Clamp"),null}Pack2x16snorm(i,m){return console.error("TODO:pack2x16snorm"),null}Pack2x16unorm(i,m){return console.error("TODO:pack2x16unorm"),null}Pack2x16float(i,m){return console.error("TODO:pack2x16float"),null}Unpack4x8snorm(i,m){return console.error("TODO:unpack4x8snorm"),null}Unpack4x8unorm(i,m){return console.error("TODO:unpack4x8unorm"),null}Unpack4xI8(i,m){return console.error("TODO:unpack4xI8"),null}Unpack4xU8(i,m){return console.error("TODO:unpack4xU8"),null}Unpack2x16snorm(i,m){return console.error("TODO:unpack2x16snorm"),null}Unpack2x16unorm(i,m){return console.error("TODO:unpack2x16unorm"),null}Unpack2x16float(i,m){return console.error("TODO:unpack2x16float"),null}StorageBarrier(i,m){return null}TextureBarrier(i,m){return null}WorkgroupBarrier(i,m){return null}WorkgroupUniformLoad(i,m){return null}SubgroupAdd(i,m){return console.error("TODO:subgroupAdd"),null}SubgroupExclusiveAdd(i,m){return console.error("TODO:subgroupExclusiveAdd"),null}SubgroupInclusiveAdd(i,m){return console.error("TODO:subgroupInclusiveAdd"),null}SubgroupAll(i,m){return console.error("TODO:subgroupAll"),null}SubgroupAnd(i,m){return console.error("TODO:subgroupAnd"),null}SubgroupAny(i,m){return console.error("TODO:subgroupAny"),null}SubgroupBallot(i,m){return console.error("TODO:subgroupBallot"),null}SubgroupBroadcast(i,m){return console.error("TODO:subgroupBroadcast"),null}SubgroupBroadcastFirst(i,m){return console.error("TODO:subgroupBroadcastFirst"),null}SubgroupElect(i,m){return console.error("TODO:subgroupElect"),null}SubgroupMax(i,m){return console.error("TODO:subgroupMax"),null}SubgroupMin(i,m){return console.error("TODO:subgroupMin"),null}SubgroupMul(i,m){return console.error("TODO:subgroupMul"),null}SubgroupExclusiveMul(i,m){return console.error("TODO:subgroupExclusiveMul"),null}SubgroupInclusiveMul(i,m){return console.error("TODO:subgroupInclusiveMul"),null}SubgroupOr(i,m){return console.error("TODO:subgroupOr"),null}SubgroupShuffle(i,m){return console.error("TODO:subgroupShuffle"),null}SubgroupShuffleDown(i,m){return console.error("TODO:subgroupShuffleDown"),null}SubgroupShuffleUp(i,m){return console.error("TODO:subgroupShuffleUp"),null}SubgroupShuffleXor(i,m){return console.error("TODO:subgroupShuffleXor"),null}SubgroupXor(i,m){return console.error("TODO:subgroupXor"),null}QuadBroadcast(i,m){return console.error("TODO:quadBroadcast"),null}QuadSwapDiagonal(i,m){return console.error("TODO:quadSwapDiagonal"),null}QuadSwapX(i,m){return console.error("TODO:quadSwapX"),null}QuadSwapY(i,m){return console.error("TODO:quadSwapY"),null}}const Vt={vec2:2,vec2f:2,vec2i:2,vec2u:2,vec2b:2,vec2h:2,vec3:3,vec3f:3,vec3i:3,vec3u:3,vec3b:3,vec3h:3,vec4:4,vec4f:4,vec4i:4,vec4u:4,vec4b:4,vec4h:4},zt={mat2x2:[2,2,4],mat2x2f:[2,2,4],mat2x2h:[2,2,4],mat2x3:[2,3,6],mat2x3f:[2,3,6],mat2x3h:[2,3,6],mat2x4:[2,4,8],mat2x4f:[2,4,8],mat2x4h:[2,4,8],mat3x2:[3,2,6],mat3x2f:[3,2,6],mat3x2h:[3,2,6],mat3x3:[3,3,9],mat3x3f:[3,3,9],mat3x3h:[3,3,9],mat3x4:[3,4,12],mat3x4f:[3,4,12],mat3x4h:[3,4,12],mat4x2:[4,2,8],mat4x2f:[4,2,8],mat4x2h:[4,2,8],mat4x3:[4,3,12],mat4x3f:[4,3,12],mat4x3h:[4,3,12],mat4x4:[4,4,16],mat4x4f:[4,4,16],mat4x4h:[4,4,16]};class pt extends ct{constructor(i,m){var g;super(),this.ast=null!=i?i:[],this.reflection=new rt,this.reflection.updateAST(this.ast),this.context=null!==(g=null==m?void 0:m.clone())&&void 0!==g?g:new lt,this.builtins=new ut(this),this.typeInfo={bool:this.getTypeInfo(re.bool),i32:this.getTypeInfo(re.i32),u32:this.getTypeInfo(re.u32),f32:this.getTypeInfo(re.f32),f16:this.getTypeInfo(re.f16),vec2f:this.getTypeInfo(oe.vec2f),vec2u:this.getTypeInfo(oe.vec2u),vec2i:this.getTypeInfo(oe.vec2i),vec2h:this.getTypeInfo(oe.vec2h),vec3f:this.getTypeInfo(oe.vec3f),vec3u:this.getTypeInfo(oe.vec3u),vec3i:this.getTypeInfo(oe.vec3i),vec3h:this.getTypeInfo(oe.vec3h),vec4f:this.getTypeInfo(oe.vec4f),vec4u:this.getTypeInfo(oe.vec4u),vec4i:this.getTypeInfo(oe.vec4i),vec4h:this.getTypeInfo(oe.vec4h),mat2x2f:this.getTypeInfo(oe.mat2x2f),mat2x3f:this.getTypeInfo(oe.mat2x3f),mat2x4f:this.getTypeInfo(oe.mat2x4f),mat3x2f:this.getTypeInfo(oe.mat3x2f),mat3x3f:this.getTypeInfo(oe.mat3x3f),mat3x4f:this.getTypeInfo(oe.mat3x4f),mat4x2f:this.getTypeInfo(oe.mat4x2f),mat4x3f:this.getTypeInfo(oe.mat4x3f),mat4x4f:this.getTypeInfo(oe.mat4x4f)}}getVariableValue(i){var m,g;const x=null!==(g=null===(m=this.context.getVariable(i))||void 0===m?void 0:m.value)&&void 0!==g?g:null;if(null===x)return null;if(x instanceof Oe)return x.value;if(x instanceof Fe)return Array.from(x.data);if(x instanceof Me)return Array.from(x.data);if(x instanceof Ue&&x.typeInfo instanceof s){if("u32"===x.typeInfo.format.name)return Array.from(new Uint32Array(x.buffer,x.offset,x.typeInfo.count));if("i32"===x.typeInfo.format.name)return Array.from(new Int32Array(x.buffer,x.offset,x.typeInfo.count));if("f32"===x.typeInfo.format.name)return Array.from(new Float32Array(x.buffer,x.offset,x.typeInfo.count))}return console.error(`Unsupported return variable type ${x.typeInfo.name}`),null}execute(i){(i=null!=i?i:{}).constants&&this._setOverrides(i.constants,this.context),this._execStatements(this.ast,this.context)}dispatchWorkgroups(i,m,g,x){const _=this.context.clone();(x=null!=x?x:{}).constants&&this._setOverrides(x.constants,_),this._execStatements(this.ast,_);const b=_.getFunction(i);if(!b)return void console.error(`Function ${i} not found`);if("number"==typeof m)m=[m,1,1];else{if(0===m.length)return void console.error("Invalid dispatch count");1===m.length?m=[m[0],1,1]:2===m.length?m=[m[0],m[1],1]:m.length>3&&(m=[m[0],m[1],m[2]])}const y=m[0],T=m[1],w=m[2],P=this.getTypeInfo("vec3u");_.setVariable("@num_workgroups",new Fe(m,P));for(const i in g)for(const m in g[i]){const x=g[i][m];_.variables.forEach(g=>{var _;const b=g.node;if(null==b?void 0:b.attributes){let y=null,T=null;for(const i of b.attributes)"binding"===i.name?y=i.value:"group"===i.name&&(T=i.value);if(m==y&&i==T)if(void 0!==x.texture&&void 0!==x.descriptor){const i=new Pe(x.texture,this.getTypeInfo(b.type),x.descriptor,null!==(_=x.texture.view)&&void 0!==_?_:null);g.value=i}else void 0!==x.uniform?g.value=new Ue(x.uniform,this.getTypeInfo(b.type)):g.value=new Ue(x,this.getTypeInfo(b.type))}})}for(let i=0;i<w;++i)for(let m=0;m<T;++m)for(let g=0;g<y;++g)_.setVariable("@workgroup_id",new Fe([g,m,i],this.getTypeInfo("vec3u"))),this._dispatchWorkgroup(b,[g,m,i],_)}execStatement(i,m){if(i instanceof Q)return this.evalExpression(i.value,m);if(i instanceof ne){if(i.condition){const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))throw new Error("Invalid break-if condition");if(!g.value)return null}return pt._breakObj}if(i instanceof se)return pt._continueObj;if(i instanceof M)this._let(i,m);else if(i instanceof B)this._var(i,m);else if(i instanceof U)this._const(i,m);else if(i instanceof C)this._function(i,m);else{if(i instanceof Z)return this._if(i,m);if(i instanceof j)return this._switch(i,m);if(i instanceof O)return this._for(i,m);if(i instanceof N)return this._while(i,m);if(i instanceof X)return this._loop(i,m);if(i instanceof V){const g=m.clone();return g.currentFunctionName=m.currentFunctionName,this._execStatements(i.body,g)}if(i instanceof R)this._assign(i,m);else if(i instanceof Bt)this._increment(i,m);else{if(i instanceof ie)return null;if(i instanceof F){const g=i.name;null===m.getVariable(g)&&m.setVariable(g,new Oe(0,this.getTypeInfo("u32")))}else if(i instanceof G)this._call(i,m);else{if(i instanceof J)return null;if(i instanceof ee)return null;console.error("Invalid statement type.",i,`Line ${i.line}`)}}}return null}evalExpression(i,m){return i instanceof ke?this._evalBinaryOp(i,m):i instanceof ge?this._evalLiteral(i,m):i instanceof me?this._evalVariable(i,m):i instanceof de?this._evalCall(i,m):i instanceof pe?this._evalCreate(i,m):i instanceof _e?this._evalConst(i,m):i instanceof xe?this._evalBitcast(i,m):i instanceof we?this._evalUnaryOp(i,m):(console.error("Invalid expression type",i,`Line ${i.line}`),null)}getTypeInfo(i){var m;if(i instanceof re){const m=this.reflection.getTypeInfo(i);if(null!==m)return m}let g=null!==(m=this.typeInfo[i])&&void 0!==m?m:null;return null!==g||(g=this.reflection.getTypeInfoByName(i)),g}_setOverrides(i,m){for(const g in i){const x=i[g],_=this.reflection.getOverrideInfo(g);null!==_?(null===_.type&&(_.type=this.getTypeInfo("u32")),"u32"===_.type.name||"i32"===_.type.name||"f32"===_.type.name||"f16"===_.type.name?m.setVariable(g,new Oe(x,_.type)):"bool"===_.type.name?m.setVariable(g,new Oe(x?1:0,_.type)):"vec2"===_.type.name||"vec3"===_.type.name||"vec4"===_.type.name||"vec2f"===_.type.name||"vec3f"===_.type.name||"vec4f"===_.type.name||"vec2i"===_.type.name||"vec3i"===_.type.name||"vec4i"===_.type.name||"vec2u"===_.type.name||"vec3u"===_.type.name||"vec4u"===_.type.name||"vec2h"===_.type.name||"vec3h"===_.type.name||"vec4h"===_.type.name?m.setVariable(g,new Fe(x,_.type)):console.error(`Invalid constant type for ${g}`)):console.error(`Override ${g} does not exist in the shader.`)}}_dispatchWorkgroup(i,m,g){const x=[1,1,1];for(const m of i.node.attributes)if("workgroup_size"===m.name){if(m.value.length>0){const i=g.getVariableValue(m.value[0]);x[0]=i instanceof Oe?i.value:parseInt(m.value[0])}if(m.value.length>1){const i=g.getVariableValue(m.value[1]);x[1]=i instanceof Oe?i.value:parseInt(m.value[1])}if(m.value.length>2){const i=g.getVariableValue(m.value[2]);x[2]=i instanceof Oe?i.value:parseInt(m.value[2])}}const _=this.getTypeInfo("vec3u"),b=this.getTypeInfo("u32");g.setVariable("@workgroup_size",new Fe(x,_));const y=x[0],T=x[1],w=x[2];for(let P=0,z=0;P<w;++P)for(let w=0;w<T;++w)for(let T=0;T<y;++T,++z){const y=[T,w,P],H=[T+m[0]*x[0],w+m[1]*x[1],P+m[2]*x[2]];g.setVariable("@local_invocation_id",new Fe(y,_)),g.setVariable("@global_invocation_id",new Fe(H,_)),g.setVariable("@local_invocation_index",new Oe(z,b)),this._dispatchExec(i,g)}}_dispatchExec(i,m){for(const g of i.node.args)for(const i of g.attributes)if("builtin"===i.name){const x=`@${i.value}`,_=m.getVariable(x);void 0!==_&&m.variables.set(g.name,_)}this._execStatements(i.node.body,m)}getVariableName(i,m){for(;i instanceof we;)i=i.right;return i instanceof me?i.name:(console.error("Unknown variable type",i,"Line",i.line),null)}_execStatements(i,m){for(const g of i){if(g instanceof Array){const i=m.clone(),x=this._execStatements(g,i);if(x)return x;continue}const i=this.execStatement(g,m);if(i)return i}return null}_call(i,m){const g=m.clone();g.currentFunctionName=i.name;const x=m.getFunction(i.name);if(x){for(let m=0;m<x.node.args.length;++m){const _=x.node.args[m],b=this.evalExpression(i.args[m],g);g.setVariable(_.name,b,_)}this._execStatements(x.node.body,g)}else i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)&&this._evalCreate(i,m)}_increment(i,m){const g=this.getVariableName(i.variable,m),x=m.getVariable(g);x?"++"===i.operator?x.value instanceof Oe?x.value.value++:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):"--"===i.operator?x.value instanceof Oe?x.value.value--:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):console.error(`Unknown increment operator ${i.operator}. Line ${i.line}`):console.error(`Variable ${g} not found. Line ${i.line}`)}_getVariableData(i,m){if(i instanceof me){const g=this.getVariableName(i,m),x=m.getVariable(g);return null===x?(console.error(`Variable ${g} not found. Line ${i.line}`),null):x.value.getSubData(this,i.postfix,m)}if(i instanceof we){if("*"===i.operator){const g=this._getVariableData(i.right,m);return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Variable ${i.right} is not a pointer. Line ${i.line}`),null)}if("&"===i.operator){const g=this._getVariableData(i.right,m);return new Ve(g)}}return null}_assign(i,m){let g=null,x="<var>",_=null;if(i.variable instanceof we){const g=this._getVariableData(i.variable,m),x=this.evalExpression(i.value,m),_=i.operator;if("="===_){if(g instanceof Oe||g instanceof Fe||g instanceof Me){if(x instanceof Oe||x instanceof Fe||x instanceof Me&&g.data.length===x.data.length)return void g.data.set(x.data);console.error(`Invalid assignment. Line ${i.line}`)}else if(g instanceof Ue&&x instanceof Ue&&g.buffer.byteLength-g.offset>=x.buffer.byteLength-x.offset)return void(g.buffer.byteLength%4==0?new Uint32Array(g.buffer,g.offset,g.typeInfo.size/4).set(new Uint32Array(x.buffer,x.offset,x.typeInfo.size/4)):new Uint8Array(g.buffer,g.offset,g.typeInfo.size).set(new Uint8Array(x.buffer,x.offset,x.typeInfo.size)));return console.error(`Invalid assignment. Line ${i.line}`),null}if("+="===_)return g instanceof Oe||g instanceof Fe||g instanceof Me?x instanceof Oe||x instanceof Fe||x instanceof Me?void g.data.set(x.data.map((i,m)=>g.data[m]+i)):void console.error(`Invalid assignment . Line ${i.line}`):void console.error(`Invalid assignment. Line ${i.line}`);if("-="===_)return(g instanceof Oe||g instanceof Fe||g instanceof Me)&&(x instanceof Oe||x instanceof Fe||x instanceof Me)?void g.data.set(x.data.map((i,m)=>g.data[m]-i)):void console.error(`Invalid assignment. Line ${i.line}`)}if(i.variable instanceof we){if("*"===i.variable.operator){x=this.getVariableName(i.variable.right,m);const _=m.getVariable(x);if(!(_&&_.value instanceof Ve))return void console.error(`Variable ${x} is not a pointer. Line ${i.line}`);g=_.value.reference;let b=i.variable.postfix;if(!b){let m=i.variable.right;for(;m instanceof we;){if(m.postfix){b=m.postfix;break}m=m.right}}b&&(g=g.getSubData(this,b,m))}}else{_=i.variable.postfix,x=this.getVariableName(i.variable,m);const b=m.getVariable(x);if(null===b)return void console.error(`Variable ${x} not found. Line ${i.line}`);g=b.value}if(g instanceof Ve&&(g=g.reference),null===g)return void console.error(`Variable ${x} not found. Line ${i.line}`);const b=this.evalExpression(i.value,m),y=i.operator;if("="===y)if(g instanceof Ue)g.setDataValue(this,b,_,m);else if(_){if(!(g instanceof Fe||g instanceof Me))return void console.error(`Variable ${x} is not a vector or matrix. Line ${i.line}`);if(_ instanceof be){const y=this.evalExpression(_.index,m).value;if(g instanceof Fe){if(!(b instanceof Oe))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[y]=b.value}else{if(!(g instanceof Me))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);{const y=this.evalExpression(_.index,m).value;if(y<0)return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);if(!(b instanceof Fe))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);{const m=g.typeInfo.getTypeName();if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m){if(!(y<2&&2===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[2*y]=b.data[0],g.data[2*y+1]=b.data[1]}else if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m){if(!(y<2&&3===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[3*y]=b.data[0],g.data[3*y+1]=b.data[1],g.data[3*y+2]=b.data[2]}else if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m){if(!(y<2&&4===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[4*y]=b.data[0],g.data[4*y+1]=b.data[1],g.data[4*y+2]=b.data[2],g.data[4*y+3]=b.data[3]}else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m){if(!(y<3&&2===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[2*y]=b.data[0],g.data[2*y+1]=b.data[1]}else if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m){if(!(y<3&&3===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[3*y]=b.data[0],g.data[3*y+1]=b.data[1],g.data[3*y+2]=b.data[2]}else if("mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m){if(!(y<3&&4===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[4*y]=b.data[0],g.data[4*y+1]=b.data[1],g.data[4*y+2]=b.data[2],g.data[4*y+3]=b.data[3]}else if("mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m){if(!(y<4&&2===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[2*y]=b.data[0],g.data[2*y+1]=b.data[1]}else if("mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m){if(!(y<4&&3===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[3*y]=b.data[0],g.data[3*y+1]=b.data[1],g.data[3*y+2]=b.data[2]}else{if("mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m)return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);if(!(y<4&&4===b.data.length))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);g.data[4*y]=b.data[0],g.data[4*y+1]=b.data[1],g.data[4*y+2]=b.data[2],g.data[4*y+3]=b.data[3]}}}}}else if(_ instanceof fe){const m=_.value;if(!(g instanceof Fe))return void console.error(`Invalid assignment to ${m}. Variable ${x} is not a vector. Line ${i.line}`);if(b instanceof Oe){if(m.length>1)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);if("x"===m)g.data[0]=b.value;else if("y"===m){if(g.data.length<2)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);g.data[1]=b.value}else if("z"===m){if(g.data.length<3)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);g.data[2]=b.value}else if("w"===m){if(g.data.length<4)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);g.data[3]=b.value}}else{if(!(b instanceof Fe))return void console.error(`Invalid assignment to ${x}. Line ${i.line}`);if(m.length!==b.data.length)return void console.error(`Invalid assignment to ${m} for variable ${x}. Line ${i.line}`);for(let _=0;_<m.length;++_){const y=m[_];if("x"===y||"r"===y)g.data[0]=b.data[_];else if("y"===y||"g"===y){if(b.data.length<2)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);g.data[1]=b.data[_]}else if("z"===y||"b"===y){if(b.data.length<3)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);g.data[2]=b.data[_]}else{if("w"!==y&&"a"!==y)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);if(b.data.length<4)return void console.error(`Invalid assignment to ${y} for variable ${x}. Line ${i.line}`);g.data[3]=b.data[_]}}}}}else g instanceof Oe&&b instanceof Oe?g.value=b.value:g instanceof Fe&&b instanceof Fe||g instanceof Me&&b instanceof Me?g.data.set(b.data):console.error(`Invalid assignment to ${x}. Line ${i.line}`);else{const x=g.getSubData(this,_,m);if(x instanceof Fe&&b instanceof Oe){const m=x.data,g=b.value;if("+="===y)for(let i=0;i<m.length;++i)m[i]+=g;else if("-="===y)for(let i=0;i<m.length;++i)m[i]-=g;else if("*="===y)for(let i=0;i<m.length;++i)m[i]*=g;else if("/="===y)for(let i=0;i<m.length;++i)m[i]/=g;else if("%="===y)for(let i=0;i<m.length;++i)m[i]%=g;else if("&="===y)for(let i=0;i<m.length;++i)m[i]&=g;else if("|="===y)for(let i=0;i<m.length;++i)m[i]|=g;else if("^="===y)for(let i=0;i<m.length;++i)m[i]^=g;else if("<<="===y)for(let i=0;i<m.length;++i)m[i]<<=g;else if(">>="===y)for(let i=0;i<m.length;++i)m[i]>>=g;else console.error(`Invalid operator ${y}. Line ${i.line}`)}else if(x instanceof Fe&&b instanceof Fe){const m=x.data,g=b.data;if(m.length!==g.length)return void console.error(`Vector length mismatch. Line ${i.line}`);if("+="===y)for(let i=0;i<m.length;++i)m[i]+=g[i];else if("-="===y)for(let i=0;i<m.length;++i)m[i]-=g[i];else if("*="===y)for(let i=0;i<m.length;++i)m[i]*=g[i];else if("/="===y)for(let i=0;i<m.length;++i)m[i]/=g[i];else if("%="===y)for(let i=0;i<m.length;++i)m[i]%=g[i];else if("&="===y)for(let i=0;i<m.length;++i)m[i]&=g[i];else if("|="===y)for(let i=0;i<m.length;++i)m[i]|=g[i];else if("^="===y)for(let i=0;i<m.length;++i)m[i]^=g[i];else if("<<="===y)for(let i=0;i<m.length;++i)m[i]<<=g[i];else if(">>="===y)for(let i=0;i<m.length;++i)m[i]>>=g[i];else console.error(`Invalid operator ${y}. Line ${i.line}`)}else{if(!(x instanceof Oe&&b instanceof Oe))return void console.error(`Invalid type for ${i.operator} operator. Line ${i.line}`);"+="===y?x.value+=b.value:"-="===y?x.value-=b.value:"*="===y?x.value*=b.value:"/="===y?x.value/=b.value:"%="===y?x.value%=b.value:"&="===y?x.value&=b.value:"|="===y?x.value|=b.value:"^="===y?x.value^=b.value:"<<="===y?x.value<<=b.value:">>="===y?x.value>>=b.value:console.error(`Invalid operator ${y}. Line ${i.line}`)}g instanceof Ue&&g.setDataValue(this,x,_,m)}}_function(i,m){const g=new ot(i);m.functions.set(i.name,g)}_const(i,m){let g=null;null!==i.value&&(g=this.evalExpression(i.value,m)),m.createVariable(i.name,g,i)}_let(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{const x=i.type.name;if("f32"===x||"i32"===x||"u32"===x||"bool"===x||"f16"===x||"vec2"===x||"vec3"===x||"vec4"===x||"vec2f"===x||"vec3f"===x||"vec4f"===x||"vec2i"===x||"vec3i"===x||"vec4i"===x||"vec2u"===x||"vec3u"===x||"vec4u"===x||"vec2h"===x||"vec3h"===x||"vec4h"===x||"vec2b"===x||"vec3b"===x||"vec4b"===x||"mat2x2"===x||"mat2x3"===x||"mat2x4"===x||"mat3x2"===x||"mat3x3"===x||"mat3x4"===x||"mat4x2"===x||"mat4x3"===x||"mat4x4"===x||"mat2x2f"===x||"mat2x3f"===x||"mat2x4f"===x||"mat3x2f"===x||"mat3x3f"===x||"mat3x4f"===x||"mat4x2f"===x||"mat4x3f"===x||"mat4x4f"===x||"mat2x2h"===x||"mat2x3h"===x||"mat2x4h"===x||"mat3x2h"===x||"mat3x3h"===x||"mat3x4h"===x||"mat4x2h"===x||"mat4x3h"===x||"mat4x4h"===x||"array"===x){const x=new pe(i.type,[]);g=this._evalCreate(x,m)}}m.createVariable(i.name,g,i)}_var(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{if(null===i.type)return void console.error(`Variable ${i.name} has no type. Line ${i.line}`);const x=i.type.name;if("f32"===x||"i32"===x||"u32"===x||"bool"===x||"f16"===x||"vec2"===x||"vec3"===x||"vec4"===x||"vec2f"===x||"vec3f"===x||"vec4f"===x||"vec2i"===x||"vec3i"===x||"vec4i"===x||"vec2u"===x||"vec3u"===x||"vec4u"===x||"vec2h"===x||"vec3h"===x||"vec4h"===x||"vec2b"===x||"vec3b"===x||"vec4b"===x||"mat2x2"===x||"mat2x3"===x||"mat2x4"===x||"mat3x2"===x||"mat3x3"===x||"mat3x4"===x||"mat4x2"===x||"mat4x3"===x||"mat4x4"===x||"mat2x2f"===x||"mat2x3f"===x||"mat2x4f"===x||"mat3x2f"===x||"mat3x3f"===x||"mat3x4f"===x||"mat4x2f"===x||"mat4x3f"===x||"mat4x4f"===x||"mat2x2h"===x||"mat2x3h"===x||"mat2x4h"===x||"mat3x2h"===x||"mat3x3h"===x||"mat3x4h"===x||"mat4x2h"===x||"mat4x3h"===x||"mat4x4h"===x||i.type instanceof ce||i.type instanceof ie||i.type instanceof oe){const x=new pe(i.type,[]);g=this._evalCreate(x,m)}}m.createVariable(i.name,g,i)}_switch(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;let x=null;for(const _ of i.cases)if(_ instanceof Se)for(const b of _.selectors){if(b instanceof Te){x=_;continue}const y=this.evalExpression(b,m);if(!(y instanceof Oe))return console.error(`Invalid case selector. Line ${i.line}`),null;if(y.value===g.value)return this._execStatements(_.body,m)}else _ instanceof Ae&&(x=_);return x?this._execStatements(x.body,m):null}_if(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(g.value)return this._execStatements(i.body,m);for(const g of i.elseif){const x=this.evalExpression(g.condition,m);if(!(x instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(x.value)return this._execStatements(g.body,m)}return i.else?this._execStatements(i.else,m):null}_getScalarValue(i){return i instanceof Oe?i.value:(console.error("Expected scalar value.",i),0)}_for(i,m){for(m=m.clone(),this.execStatement(i.init,m);this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(null!==g&&g!==pt._continueObj)return g;this.execStatement(i.increment,m)}return null}_loop(i,m){for(m=m.clone();;){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g===pt._continueObj){if(i.continuing&&this._execStatements(i.continuing.body,m)===pt._breakObj)break}else if(null!==g)return g}return null}_while(i,m){for(m=m.clone();this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g!==pt._continueObj&&null!==g)return g}return null}_evalBitcast(i,m){const g=this.evalExpression(i.value,m),x=i.type;if(g instanceof Oe){const i=tt(g.value,g.typeInfo.name,x.name);return new Oe(i,this.getTypeInfo(x))}if(g instanceof Fe){const m=g.typeInfo.getTypeName();let _="";if(m.endsWith("f"))_="f32";else if(m.endsWith("i"))_="i32";else if(m.endsWith("u"))_="u32";else if(m.endsWith("b"))_="bool";else{if(!m.endsWith("h"))return console.error(`Unknown vector type ${m}. Line ${i.line}`),null;_="f16"}const b=x.getTypeName();let y="";if(b.endsWith("f"))y="f32";else if(b.endsWith("i"))y="i32";else if(b.endsWith("u"))y="u32";else if(b.endsWith("b"))y="bool";else{if(!b.endsWith("h"))return console.error(`Unknown vector type ${y}. Line ${i.line}`),null;y="f16"}const T=function(i,m,g){if(m===g)return i;const x=new Array(i.length);for(let _=0;_<i.length;_++)x[_]=tt(i[_],m,g);return x}(Array.from(g.data),_,y);return new Fe(T,this.getTypeInfo(x))}return console.error(`TODO:bitcast for ${g.typeInfo.name}. Line ${i.line}`),null}_evalConst(i,m){return m.getVariableValue(i.name).clone().getSubData(this,i.postfix,m)}_evalCreate(i,m){var g;if(i instanceof pe){if(null===i.type)return Ne.void;switch(i.type.getTypeName()){case"bool":case"i32":case"u32":case"f32":case"f16":return this._callConstructorValue(i,m);case"vec2":case"vec3":case"vec4":case"vec2f":case"vec3f":case"vec4f":case"vec2h":case"vec3h":case"vec4h":case"vec2i":case"vec3i":case"vec4i":case"vec2u":case"vec3u":case"vec4u":case"vec2b":case"vec3b":case"vec4b":return this._callConstructorVec(i,m);case"mat2x2":case"mat2x2f":case"mat2x2h":case"mat2x3":case"mat2x3f":case"mat2x3h":case"mat2x4":case"mat2x4f":case"mat2x4h":case"mat3x2":case"mat3x2f":case"mat3x2h":case"mat3x3":case"mat3x3f":case"mat3x3h":case"mat3x4":case"mat3x4f":case"mat3x4h":case"mat4x2":case"mat4x2f":case"mat4x2h":case"mat4x3":case"mat4x3f":case"mat4x3h":case"mat4x4":case"mat4x4f":case"mat4x4h":return this._callConstructorMatrix(i,m)}}const x=i instanceof pe?i.type.name:i.name,_=i instanceof pe?this.getTypeInfo(i.type):this.getTypeInfo(i.name);if(null===_)return console.error(`Unknown type ${x}. Line ${i.line}`),null;if(0===_.size)return null;const b=new Ue(new ArrayBuffer(_.size),_,0);if(_ instanceof n){if(i.args)for(let g=0;g<i.args.length;++g){const x=_.members[g],y=i.args[g],T=this.evalExpression(y,m);b.setData(this,T,x.type,x.offset,m)}}else if(_ instanceof s){let x=0;if(i.args)for(let y=0;y<i.args.length;++y){const T=i.args[y],w=this.evalExpression(T,m);null===_.format&&("x32"===(null===(g=w.typeInfo)||void 0===g?void 0:g.name)?_.format=this.getTypeInfo("i32"):_.format=w.typeInfo),b.setData(this,w,_.format,x,m),x+=_.stride}}else console.error(`Unknown type "${x}". Line ${i.line}`);return i instanceof pe?b.getSubData(this,i.postfix,m):b}_evalLiteral(i,m){const g=this.getTypeInfo(i.type),x=g.name;return"x32"===x||"u32"===x||"f32"===x||"f16"===x||"i32"===x||"bool"===x?new Oe(i.scalarValue,g):"vec2"===x||"vec3"===x||"vec4"===x||"vec2f"===x||"vec3f"===x||"vec4f"===x||"vec2h"===x||"vec3h"===x||"vec4h"===x||"vec2i"===x||"vec3i"===x||"vec4i"===x||"vec2u"===x||"vec3u"===x||"vec4u"===x?this._callConstructorVec(i,m):"mat2x2"===x||"mat2x3"===x||"mat2x4"===x||"mat3x2"===x||"mat3x3"===x||"mat3x4"===x||"mat4x2"===x||"mat4x3"===x||"mat4x4"===x||"mat2x2f"===x||"mat2x3f"===x||"mat2x4f"===x||"mat3x2f"===x||"mat3x3f"===x||"mat3x4f"===x||"mat4x2f"===x||"mat4x3f"===x||"mat4x4f"===x||"mat2x2h"===x||"mat2x3h"===x||"mat2x4h"===x||"mat3x2h"===x||"mat3x3h"===x||"mat3x4h"===x||"mat4x2h"===x||"mat4x3h"===x||"mat4x4h"===x?this._callConstructorMatrix(i,m):i.value}_evalVariable(i,m){const g=m.getVariableValue(i.name);return null===g?g:g.getSubData(this,i.postfix,m)}_maxFormatTypeInfo(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const x=pt._priority.get(m.name);pt._priority.get(i[g].name)<x&&(m=i[g])}return"x32"===m.name?this.getTypeInfo("i32"):m}_evalUnaryOp(i,m){const g=this.evalExpression(i.right,m);if("&"===i.operator)return new Ve(g);if("*"===i.operator)return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Invalid dereference. Line ${i.line}`),null);const x=g instanceof Oe?g.value:g instanceof Fe?Array.from(g.data):null;switch(i.operator){case"+":{if(Re(x)){const i=x.map((i,m)=>+i);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(+i,m)}case"-":{if(Re(x)){const i=x.map((i,m)=>-i);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(-i,m)}case"!":{if(Re(x)){const i=x.map((i,m)=>i?0:1);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(i?0:1,m)}case"~":{if(Re(x)){const i=x.map((i,m)=>~i);return new Fe(i,g.typeInfo)}const i=x,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(~i,m)}}return console.error(`Invalid unary operator ${i.operator}. Line ${i.line}`),null}_evalBinaryOp(i,m){const g=this.evalExpression(i.left,m),x=this.evalExpression(i.right,m),_=g instanceof Oe?g.value:g instanceof Fe||g instanceof Me?Array.from(g.data):null,b=x instanceof Oe?x.value:x instanceof Fe||x instanceof Me?Array.from(x.data):null;switch(i.operator){case"+":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i+x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m+i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i+m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m+y,T)}case"-":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i-x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m-i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i-m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m-y,T)}case"*":{if(Re(_)&&Re(b)){const m=_,y=b;if(g instanceof Me&&x instanceof Me){const _=function(i,m,g,x){if(void 0===zt[m.name]||void 0===zt[x.name])return null;const _=zt[m.name][0],b=zt[m.name][1],y=zt[x.name][0];if(_!==zt[x.name][1])return null;const T=new Array(y*b);for(let m=0;m<b;m++)for(let x=0;x<y;x++){let w=0;for(let y=0;y<_;y++)w+=i[y*b+m]*g[x*_+y];T[m*y+x]=w}return T}(m,g.typeInfo,y,x.typeInfo);if(null===_)return console.error(`Matrix multiplication failed. Line ${i.line}.`),null;const b=zt[x.typeInfo.name][0],T=zt[g.typeInfo.name][1],w=this.getTypeInfo(`mat${b}x${T}f`);return new Me(_,w)}if(g instanceof Me&&x instanceof Fe){const _=function(i,m,g,x){if(void 0===zt[m.name]||void 0===Vt[x.name])return null;const _=zt[m.name][0],b=zt[m.name][1];if(_!==g.length)return null;const y=new Array(b);for(let m=0;m<b;m++){let x=0;for(let y=0;y<_;y++)x+=i[y*b+m]*g[y];y[m]=x}return y}(m,g.typeInfo,y,x.typeInfo);return null===_?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(_,x.typeInfo)}if(g instanceof Fe&&x instanceof Me){const _=function(i,m,g,x){if(void 0===Vt[m.name]||void 0===zt[x.name])return null;const _=zt[x.name][0],b=zt[x.name][1];if(b!==i.length)return null;const y=[];for(let m=0;m<_;m++){let x=0;for(let y=0;y<b;y++)x+=i[y]*g[y*_+m];y[m]=x}return y}(m,g.typeInfo,y,x.typeInfo);return null===_?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(_,g.typeInfo)}{if(m.length!==y.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const x=m.map((i,m)=>i*y[m]);return new Fe(x,g.typeInfo)}}if(Re(_)){const i=b,m=_.map((m,g)=>m*i);return g instanceof Me?new Me(m,g.typeInfo):new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i*m);return x instanceof Me?new Me(m,x.typeInfo):new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m*y,T)}case"%":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i%x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m%i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i%m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m%y,T)}case"/":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i/x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m/i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i/m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m/y,T)}case"&":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i&x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m&i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i&m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m&y,T)}case"|":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i|x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m|i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i|m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m|y,T)}case"^":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i^x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m^i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i^m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m^y,T)}case"<<":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i<<x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m<<i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i<<m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m<<y,T)}case">>":{if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i>>x[m]);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m>>i);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i>>m);return new Fe(m,x.typeInfo)}const m=_,y=b,T=this._maxFormatTypeInfo([g.typeInfo,x.typeInfo]);return new Oe(m>>y,T)}case">":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i>x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m>i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i>m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_>b?1:0,this.getTypeInfo("bool"));case"<":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i<x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m<i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i<m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_<b?1:0,this.getTypeInfo("bool"));case"==":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i===x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m==i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i==m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_===b?1:0,this.getTypeInfo("bool"));case"!=":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i!==x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m!==i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i!==m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_!==b?1:0,this.getTypeInfo("bool"));case">=":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i>=x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m>=i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i>=m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_>=b?1:0,this.getTypeInfo("bool"));case"<=":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i<=x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m<=i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i<=m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_<=b?1:0,this.getTypeInfo("bool"));case"&&":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i&&x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m&&i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i&&m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_&&b?1:0,this.getTypeInfo("bool"));case"||":if(Re(_)&&Re(b)){const m=_,x=b;if(m.length!==x.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const y=m.map((i,m)=>i||x[m]?1:0);return new Fe(y,g.typeInfo)}if(Re(_)){const i=b,m=_.map((m,g)=>m||i?1:0);return new Fe(m,g.typeInfo)}if(Re(b)){const i=_,m=b.map((m,g)=>i||m?1:0);return new Fe(m,x.typeInfo)}return new Oe(_||b?1:0,this.getTypeInfo("bool"))}return console.error(`Unknown operator ${i.operator}. Line ${i.line}`),null}_evalCall(i,m){if(null!==i.cachedReturnValue)return i.cachedReturnValue;const g=m.clone();g.currentFunctionName=i.name;const x=m.getFunction(i.name);if(!x)return i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)?this._evalCreate(i,m):(console.error(`Unknown function "${i.name}". Line ${i.line}`),null);for(let m=0;m<x.node.args.length;++m){const _=x.node.args[m],b=this.evalExpression(i.args[m],g);g.createVariable(_.name,b,_)}return this._execStatements(x.node.body,g)}_callBuiltinFunction(i,m){switch(i.name){case"all":return this.builtins.All(i,m);case"any":return this.builtins.Any(i,m);case"select":return this.builtins.Select(i,m);case"arrayLength":return this.builtins.ArrayLength(i,m);case"abs":return this.builtins.Abs(i,m);case"acos":return this.builtins.Acos(i,m);case"acosh":return this.builtins.Acosh(i,m);case"asin":return this.builtins.Asin(i,m);case"asinh":return this.builtins.Asinh(i,m);case"atan":return this.builtins.Atan(i,m);case"atanh":return this.builtins.Atanh(i,m);case"atan2":return this.builtins.Atan2(i,m);case"ceil":return this.builtins.Ceil(i,m);case"clamp":return this.builtins.Clamp(i,m);case"cos":return this.builtins.Cos(i,m);case"cosh":return this.builtins.Cosh(i,m);case"countLeadingZeros":return this.builtins.CountLeadingZeros(i,m);case"countOneBits":return this.builtins.CountOneBits(i,m);case"countTrailingZeros":return this.builtins.CountTrailingZeros(i,m);case"cross":return this.builtins.Cross(i,m);case"degrees":return this.builtins.Degrees(i,m);case"determinant":return this.builtins.Determinant(i,m);case"distance":return this.builtins.Distance(i,m);case"dot":return this.builtins.Dot(i,m);case"dot4U8Packed":return this.builtins.Dot4U8Packed(i,m);case"dot4I8Packed":return this.builtins.Dot4I8Packed(i,m);case"exp":return this.builtins.Exp(i,m);case"exp2":return this.builtins.Exp2(i,m);case"extractBits":return this.builtins.ExtractBits(i,m);case"faceForward":return this.builtins.FaceForward(i,m);case"firstLeadingBit":return this.builtins.FirstLeadingBit(i,m);case"firstTrailingBit":return this.builtins.FirstTrailingBit(i,m);case"floor":return this.builtins.Floor(i,m);case"fma":return this.builtins.Fma(i,m);case"fract":return this.builtins.Fract(i,m);case"frexp":return this.builtins.Frexp(i,m);case"insertBits":return this.builtins.InsertBits(i,m);case"inverseSqrt":return this.builtins.InverseSqrt(i,m);case"ldexp":return this.builtins.Ldexp(i,m);case"length":return this.builtins.Length(i,m);case"log":return this.builtins.Log(i,m);case"log2":return this.builtins.Log2(i,m);case"max":return this.builtins.Max(i,m);case"min":return this.builtins.Min(i,m);case"mix":return this.builtins.Mix(i,m);case"modf":return this.builtins.Modf(i,m);case"normalize":return this.builtins.Normalize(i,m);case"pow":return this.builtins.Pow(i,m);case"quantizeToF16":return this.builtins.QuantizeToF16(i,m);case"radians":return this.builtins.Radians(i,m);case"reflect":return this.builtins.Reflect(i,m);case"refract":return this.builtins.Refract(i,m);case"reverseBits":return this.builtins.ReverseBits(i,m);case"round":return this.builtins.Round(i,m);case"saturate":return this.builtins.Saturate(i,m);case"sign":return this.builtins.Sign(i,m);case"sin":return this.builtins.Sin(i,m);case"sinh":return this.builtins.Sinh(i,m);case"smoothStep":return this.builtins.SmoothStep(i,m);case"sqrt":return this.builtins.Sqrt(i,m);case"step":return this.builtins.Step(i,m);case"tan":return this.builtins.Tan(i,m);case"tanh":return this.builtins.Tanh(i,m);case"transpose":return this.builtins.Transpose(i,m);case"trunc":return this.builtins.Trunc(i,m);case"dpdx":return this.builtins.Dpdx(i,m);case"dpdxCoarse":return this.builtins.DpdxCoarse(i,m);case"dpdxFine":return this.builtins.DpdxFine(i,m);case"dpdy":return this.builtins.Dpdy(i,m);case"dpdyCoarse":return this.builtins.DpdyCoarse(i,m);case"dpdyFine":return this.builtins.DpdyFine(i,m);case"fwidth":return this.builtins.Fwidth(i,m);case"fwidthCoarse":return this.builtins.FwidthCoarse(i,m);case"fwidthFine":return this.builtins.FwidthFine(i,m);case"textureDimensions":return this.builtins.TextureDimensions(i,m);case"textureGather":return this.builtins.TextureGather(i,m);case"textureGatherCompare":return this.builtins.TextureGatherCompare(i,m);case"textureLoad":return this.builtins.TextureLoad(i,m);case"textureNumLayers":return this.builtins.TextureNumLayers(i,m);case"textureNumLevels":return this.builtins.TextureNumLevels(i,m);case"textureNumSamples":return this.builtins.TextureNumSamples(i,m);case"textureSample":return this.builtins.TextureSample(i,m);case"textureSampleBias":return this.builtins.TextureSampleBias(i,m);case"textureSampleCompare":return this.builtins.TextureSampleCompare(i,m);case"textureSampleCompareLevel":return this.builtins.TextureSampleCompareLevel(i,m);case"textureSampleGrad":return this.builtins.TextureSampleGrad(i,m);case"textureSampleLevel":return this.builtins.TextureSampleLevel(i,m);case"textureSampleBaseClampToEdge":return this.builtins.TextureSampleBaseClampToEdge(i,m);case"textureStore":return this.builtins.TextureStore(i,m);case"atomicLoad":return this.builtins.AtomicLoad(i,m);case"atomicStore":return this.builtins.AtomicStore(i,m);case"atomicAdd":return this.builtins.AtomicAdd(i,m);case"atomicSub":return this.builtins.AtomicSub(i,m);case"atomicMax":return this.builtins.AtomicMax(i,m);case"atomicMin":return this.builtins.AtomicMin(i,m);case"atomicAnd":return this.builtins.AtomicAnd(i,m);case"atomicOr":return this.builtins.AtomicOr(i,m);case"atomicXor":return this.builtins.AtomicXor(i,m);case"atomicExchange":return this.builtins.AtomicExchange(i,m);case"atomicCompareExchangeWeak":return this.builtins.AtomicCompareExchangeWeak(i,m);case"pack4x8snorm":return this.builtins.Pack4x8snorm(i,m);case"pack4x8unorm":return this.builtins.Pack4x8unorm(i,m);case"pack4xI8":return this.builtins.Pack4xI8(i,m);case"pack4xU8":return this.builtins.Pack4xU8(i,m);case"pack4x8Clamp":return this.builtins.Pack4x8Clamp(i,m);case"pack4xU8Clamp":return this.builtins.Pack4xU8Clamp(i,m);case"pack2x16snorm":return this.builtins.Pack2x16snorm(i,m);case"pack2x16unorm":return this.builtins.Pack2x16unorm(i,m);case"pack2x16float":return this.builtins.Pack2x16float(i,m);case"unpack4x8snorm":return this.builtins.Unpack4x8snorm(i,m);case"unpack4x8unorm":return this.builtins.Unpack4x8unorm(i,m);case"unpack4xI8":return this.builtins.Unpack4xI8(i,m);case"unpack4xU8":return this.builtins.Unpack4xU8(i,m);case"unpack2x16snorm":return this.builtins.Unpack2x16snorm(i,m);case"unpack2x16unorm":return this.builtins.Unpack2x16unorm(i,m);case"unpack2x16float":return this.builtins.Unpack2x16float(i,m);case"storageBarrier":return this.builtins.StorageBarrier(i,m);case"textureBarrier":return this.builtins.TextureBarrier(i,m);case"workgroupBarrier":return this.builtins.WorkgroupBarrier(i,m);case"workgroupUniformLoad":return this.builtins.WorkgroupUniformLoad(i,m);case"subgroupAdd":return this.builtins.SubgroupAdd(i,m);case"subgroupExclusiveAdd":return this.builtins.SubgroupExclusiveAdd(i,m);case"subgroupInclusiveAdd":return this.builtins.SubgroupInclusiveAdd(i,m);case"subgroupAll":return this.builtins.SubgroupAll(i,m);case"subgroupAnd":return this.builtins.SubgroupAnd(i,m);case"subgroupAny":return this.builtins.SubgroupAny(i,m);case"subgroupBallot":return this.builtins.SubgroupBallot(i,m);case"subgroupBroadcast":return this.builtins.SubgroupBroadcast(i,m);case"subgroupBroadcastFirst":return this.builtins.SubgroupBroadcastFirst(i,m);case"subgroupElect":return this.builtins.SubgroupElect(i,m);case"subgroupMax":return this.builtins.SubgroupMax(i,m);case"subgroupMin":return this.builtins.SubgroupMin(i,m);case"subgroupMul":return this.builtins.SubgroupMul(i,m);case"subgroupExclusiveMul":return this.builtins.SubgroupExclusiveMul(i,m);case"subgroupInclusiveMul":return this.builtins.SubgroupInclusiveMul(i,m);case"subgroupOr":return this.builtins.SubgroupOr(i,m);case"subgroupShuffle":return this.builtins.SubgroupShuffle(i,m);case"subgroupShuffleDown":return this.builtins.SubgroupShuffleDown(i,m);case"subgroupShuffleUp":return this.builtins.SubgroupShuffleUp(i,m);case"subgroupShuffleXor":return this.builtins.SubgroupShuffleXor(i,m);case"subgroupXor":return this.builtins.SubgroupXor(i,m);case"quadBroadcast":return this.builtins.QuadBroadcast(i,m);case"quadSwapDiagonal":return this.builtins.QuadSwapDiagonal(i,m);case"quadSwapX":return this.builtins.QuadSwapX(i,m);case"quadSwapY":return this.builtins.QuadSwapY(i,m)}const g=m.getFunction(i.name);if(g){const x=m.clone();for(let m=0;m<g.node.args.length;++m){const _=g.node.args[m],b=this.evalExpression(i.args[m],x);x.setVariable(_.name,b,_)}return this._execStatements(g.node.body,x)}return null}_callConstructorValue(i,m){if(!i.args||0===i.args.length)return new Oe(0,this.getTypeInfo(i.type));const g=this.evalExpression(i.args[0],m);return g.typeInfo=this.getTypeInfo(i.type),g.getSubData(this,i.postfix,m).clone()}_callConstructorVec(i,m){const g=this.getTypeInfo(i.type),x=i.type.getTypeName(),_=Vt[x];if(void 0===_)return console.error(`Invalid vec constructor ${x}. Line ${i.line}`),null;const b=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)b.push(i)}else b.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);if(i instanceof Fe){const m=i.data;for(let i=0;i<m.length;++i){let g=m[i];b.push(g)}}else if(i instanceof Oe){let m=i.value;b.push(m)}}if(i.type instanceof oe&&null===i.type.format&&(i.type.format=oe.f32),0===b.length){const x=new Array(_).fill(0);return new Fe(x,g).getSubData(this,i.postfix,m)}if(1===b.length)for(;b.length<_;)b.push(b[0]);return b.length<_?(console.error(`Invalid vec constructor. Line ${i.line}`),null):new Fe(b.length>_?b.slice(0,_):b,g).getSubData(this,i.postfix,m)}_callConstructorMatrix(i,m){const g=this.getTypeInfo(i.type),x=i.type.getTypeName(),_=zt[x];if(void 0===_)return console.error(`Invalid matrix constructor ${x}. Line ${i.line}`),null;const b=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)b.push(i)}else b.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);i instanceof Fe?b.push(...i.data):i instanceof Oe?b.push(i.value):i instanceof Me&&b.push(...i.data)}if(g instanceof a&&null===g.format&&(g.format=this.getTypeInfo("f32")),0===b.length){const x=new Array(_[2]).fill(0);return new Me(x,g).getSubData(this,i.postfix,m)}return b.length!==_[2]?(console.error(`Invalid matrix constructor. Line ${i.line}`),null):new Me(b,g).getSubData(this,i.postfix,m)}}pt._breakObj=new De(new e("BREAK",null),null),pt._continueObj=new De(new e("CONTINUE",null),null),pt._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class dt{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class mt{constructor(){this._tokens=[],this._current=0,this._currentLine=1,this._deferArrayCountEval=[],this._currentLoop=[],this._context=new dt,this._exec=new pt,this._forwardTypeCount=0}parse(i){this._initialize(i),this._deferArrayCountEval.length=0;const m=[];for(;!this._isAtEnd();){const i=this._global_decl_or_directive();if(!i)break;m.push(i)}if(this._deferArrayCountEval.length>0){for(const m of this._deferArrayCountEval){const g=m.arrayType,x=m.countNode;if(x instanceof me){const m=x.name,_=this._context.constants.get(m);if(_)try{const i=_.constEvaluate(this._exec);g.count=i}catch(i){}}}this._deferArrayCountEval.length=0}if(this._forwardTypeCount>0)for(const i of m)i.search(i=>{i instanceof Le||i instanceof le?i.type=this._forwardType(i.type):i instanceof ce?i.format=this._forwardType(i.format):i instanceof B||i instanceof M||i instanceof U?i.type=this._forwardType(i.type):i instanceof C?i.returnType=this._forwardType(i.returnType):i instanceof Ee&&(i.type=this._forwardType(i.type))});return m}_forwardType(i){if(i instanceof ae){const m=this._getType(i.name);if(m)return m}else i instanceof le?i.type=this._forwardType(i.type):i instanceof ce&&(i.format=this._forwardType(i.format));return i}_initialize(i){if(i)if("string"==typeof i){const m=new ze(i);this._tokens=m.scanTokens()}else this._tokens=i;else this._tokens=[];this._current=0}_updateNode(i,m){return i.line=null!=m?m:this._currentLine,i}_error(i,m){return{token:i,message:m,toString:()=>`${m}`}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==qe.eof}_match(i){if(i instanceof We)return!!this._check(i)&&(this._advance(),!0);for(let m=0,g=i.length;m<g;++m){const g=i[m];if(this._check(g))return this._advance(),!0}return!1}_consume(i,m){if(this._check(i))return this._advance();throw this._error(this._peek(),`${m}. Line:${this._currentLine}`)}_check(i){if(this._isAtEnd())return!1;const m=this._peek();if(i instanceof Array){const g=m.type;let x=!1;for(const m of i){if(g===m)return!0;m===qe.tokens.name&&(x=!0)}if(x){const i=qe.tokens.name.rule.exec(m.lexeme);if(i&&0==i.index&&i[0]==m.lexeme)return!0}return!1}if(m.type===i)return!0;if(i===qe.tokens.name){const i=qe.tokens.name.rule.exec(m.lexeme);return i&&0==i.index&&i[0]==m.lexeme}return!1}_advance(){var i,m;return this._currentLine=null!==(m=null===(i=this._peek())||void 0===i?void 0:i.line)&&void 0!==m?m:-1,this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._match(qe.keywords.alias)){const i=this._type_alias();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.diagnostic)){const i=this._diagnostic();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.requires)){const i=this._requires_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.enable)){const i=this._enable_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}const i=this._attribute();if(this._check(qe.keywords.var)){const m=this._global_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.override)){const m=this._override_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.let)){const m=this._global_let_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.const)){const m=this._global_const_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.struct)){const m=this._struct_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.fn)){const m=this._function_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}return null}_function_decl(){if(!this._match(qe.keywords.fn))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected function name.").toString();this._consume(qe.tokens.paren_left,"Expected '(' for function arguments.");const g=[];if(!this._check(qe.tokens.paren_right))do{if(this._check(qe.tokens.paren_right))break;const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected argument name.").toString();this._consume(qe.tokens.colon,"Expected ':' for argument type.");const x=this._attribute(),_=this._type_decl();null!=_&&(_.attributes=x,g.push(this._updateNode(new Ee(m,_,i))))}while(this._match(qe.tokens.comma));this._consume(qe.tokens.paren_right,"Expected ')' after function arguments.");let x=null;if(this._match(qe.tokens.arrow)){const i=this._attribute();x=this._type_decl(),null!=x&&(x.attributes=i)}const _=this._compound_statement(),b=this._currentLine;return this._updateNode(new C(m,g,x,_,i,b),i)}_compound_statement(){const i=[];for(this._consume(qe.tokens.brace_left,"Expected '{' for block.");!this._check(qe.tokens.brace_right);){const m=this._statement();null!==m&&i.push(m)}return this._consume(qe.tokens.brace_right,"Expected '}' for block."),i}_statement(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._check(qe.tokens.attr)&&this._attribute(),this._check(qe.keywords.if))return this._if_statement();if(this._check(qe.keywords.switch))return this._switch_statement();if(this._check(qe.keywords.loop))return this._loop_statement();if(this._check(qe.keywords.for))return this._for_statement();if(this._check(qe.keywords.while))return this._while_statement();if(this._check(qe.keywords.continuing))return this._continuing_statement();if(this._check(qe.keywords.static_assert))return this._static_assert_statement();if(this._check(qe.tokens.brace_left))return this._compound_statement();let i=null;if(this._check(qe.keywords.return))i=this._return_statement();else if(this._check([qe.keywords.var,qe.keywords.let,qe.keywords.const]))i=this._variable_statement();else if(this._match(qe.keywords.discard))i=this._updateNode(new te);else if(this._match(qe.keywords.break)){const m=this._updateNode(new ne);if(this._currentLoop.length>0){const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m,this._check(qe.keywords.if)&&(this._advance(),m.condition=this._optional_paren_expression())}else if(this._match(qe.keywords.continue)){const m=this._updateNode(new se);if(!(this._currentLoop.length>0))throw this._error(this._peek(),`Continue statement must be inside a loop. Line:${m.line}`);{const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m}else i=this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement();return null!=i&&this._consume(qe.tokens.semicolon,"Expected ';' after statement."),i}_static_assert_statement(){if(!this._match(qe.keywords.static_assert))return null;const i=this._currentLine,m=this._optional_paren_expression();return this._updateNode(new D(m),i)}_while_statement(){if(!this._match(qe.keywords.while))return null;const i=this._updateNode(new N(null,null));return this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_continuing_statement(){const i=this._currentLoop.length>0?this._currentLoop[this._currentLoop.length-1].id:-1;if(!this._match(qe.keywords.continuing))return null;const m=this._currentLine,g=this._compound_statement();return this._updateNode(new V(g,i),m)}_for_statement(){if(!this._match(qe.keywords.for))return null;this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._updateNode(new O(null,null,null,null));return this._currentLoop.push(i),i.init=this._check(qe.tokens.semicolon)?null:this._for_init(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.condition=this._check(qe.tokens.semicolon)?null:this._short_circuit_or_expression(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.increment=this._check(qe.tokens.paren_right)?null:this._for_increment(),this._consume(qe.tokens.paren_right,"Expected ')'."),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(qe.keywords.var)){const i=this._variable_decl();if(null===i)throw this._error(this._peek(),"Variable declaration expected.");let m=null;return this._match(qe.tokens.equal)&&(m=this._short_circuit_or_expression()),this._updateNode(new B(i.name,i.type,i.storage,i.access,m),i.line)}if(this._match(qe.keywords.let)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for let.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for let.");const x=this._short_circuit_or_expression();return this._updateNode(new M(m,g,null,null,x),i)}if(this._match(qe.keywords.const)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for const.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for const.");const x=this._short_circuit_or_expression();return null===g&&x instanceof ge&&(g=x.type),this._updateNode(new U(m,g,null,null,x),i)}return null}_increment_decrement_statement(){const i=this._current,m=this._unary_expression();if(null==m)return null;if(!this._check(qe.increment_operators))return this._current=i,null;const g=this._consume(qe.increment_operators,"Expected increment operator");return this._updateNode(new Bt(g.type===qe.tokens.plus_plus?Ct.increment:Ct.decrement,m))}_assignment_statement(){let i=null;const m=this._currentLine;if(this._check(qe.tokens.brace_right))return null;let g=this._match(qe.tokens.underscore);if(g||(i=this._unary_expression()),!g&&null==i)return null;const x=this._consume(qe.assignment_operators,"Expected assignment operator."),_=this._short_circuit_or_expression();return this._updateNode(new R(Rt.parse(x.lexeme),i,_),m)}_func_call_statement(){if(!this._check(qe.tokens.ident))return null;const i=this._currentLine,m=this._current,g=this._consume(qe.tokens.ident,"Expected function name."),x=this._argument_expression_list();return null===x?(this._current=m,null):this._updateNode(new G(g.lexeme,x),i)}_loop_statement(){if(!this._match(qe.keywords.loop))return null;this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for loop.");const i=this._updateNode(new X([],null));this._currentLoop.push(i);let m=this._statement();for(;null!==m;){if(Array.isArray(m))for(let g of m)i.body.push(g);else i.body.push(m);if(m instanceof V){i.continuing=m;break}m=this._statement()}return this._currentLoop.pop(),this._consume(qe.tokens.brace_right,"Expected '}' for loop."),i}_switch_statement(){if(!this._match(qe.keywords.switch))return null;const i=this._updateNode(new j(null,[]));if(this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for switch."),i.cases=this._switch_body(),null==i.cases||0==i.cases.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(qe.tokens.brace_right,"Expected '}' for switch."),this._currentLoop.pop(),i}_switch_body(){const i=[];let m=!1;for(;this._check([qe.keywords.default,qe.keywords.case]);){if(this._match(qe.keywords.case)){const g=this._case_selectors();for(const i of g)if(i instanceof Te){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");m=!0;break}this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch case.");const x=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch case."),i.push(this._updateNode(new Se(g,x)))}if(this._match(qe.keywords.default)){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch default.");const g=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch default."),i.push(this._updateNode(new Ae(g)))}}return i}_case_selectors(){const i=[];for(this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());this._match(qe.tokens.comma);)this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());return i}_case_body(){if(this._match(qe.keywords.fallthrough))return this._consume(qe.tokens.semicolon,"Expected ';'"),[];let i=this._statement();if(null==i)return[];i instanceof Array||(i=[i]);const m=this._case_body();return 0==m.length?i:[...i,m[0]]}_if_statement(){if(!this._match(qe.keywords.if))return null;const i=this._currentLine,m=this._optional_paren_expression();this._check(qe.tokens.attr)&&this._attribute();const g=this._compound_statement();let x=[];this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),x=this._elseif_statement(x));let _=null;return this._match(qe.keywords.else)&&(this._check(qe.tokens.attr)&&this._attribute(),_=this._compound_statement()),this._updateNode(new Z(m,g,x,_),i)}_match_elseif(){return this._tokens[this._current].type===qe.keywords.else&&this._tokens[this._current+1].type===qe.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(i=[]){const m=this._optional_paren_expression(),g=this._compound_statement();return i.push(this._updateNode(new $e(m,g))),this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),this._elseif_statement(i)),i}_return_statement(){if(!this._match(qe.keywords.return))return null;const i=this._short_circuit_or_expression();return this._updateNode(new Q(i))}_short_circuit_or_expression(){let i=this._short_circuit_and_expr();for(;this._match(qe.tokens.or_or);)i=this._updateNode(new ke(this._previous().toString(),i,this._short_circuit_and_expr()));return i}_short_circuit_and_expr(){let i=this._inclusive_or_expression();for(;this._match(qe.tokens.and_and);)i=this._updateNode(new ke(this._previous().toString(),i,this._inclusive_or_expression()));return i}_inclusive_or_expression(){let i=this._exclusive_or_expression();for(;this._match(qe.tokens.or);)i=this._updateNode(new ke(this._previous().toString(),i,this._exclusive_or_expression()));return i}_exclusive_or_expression(){let i=this._and_expression();for(;this._match(qe.tokens.xor);)i=this._updateNode(new ke(this._previous().toString(),i,this._and_expression()));return i}_and_expression(){let i=this._equality_expression();for(;this._match(qe.tokens.and);)i=this._updateNode(new ke(this._previous().toString(),i,this._equality_expression()));return i}_equality_expression(){const i=this._relational_expression();return this._match([qe.tokens.equal_equal,qe.tokens.not_equal])?this._updateNode(new ke(this._previous().toString(),i,this._relational_expression())):i}_relational_expression(){let i=this._shift_expression();for(;this._match([qe.tokens.less_than,qe.tokens.greater_than,qe.tokens.less_than_equal,qe.tokens.greater_than_equal]);)i=this._updateNode(new ke(this._previous().toString(),i,this._shift_expression()));return i}_shift_expression(){let i=this._additive_expression();for(;this._match([qe.tokens.shift_left,qe.tokens.shift_right]);)i=this._updateNode(new ke(this._previous().toString(),i,this._additive_expression()));return i}_additive_expression(){let i=this._multiplicative_expression();for(;this._match([qe.tokens.plus,qe.tokens.minus]);)i=this._updateNode(new ke(this._previous().toString(),i,this._multiplicative_expression()));return i}_multiplicative_expression(){let i=this._unary_expression();for(;this._match([qe.tokens.star,qe.tokens.forward_slash,qe.tokens.modulo]);)i=this._updateNode(new ke(this._previous().toString(),i,this._unary_expression()));return i}_unary_expression(){return this._match([qe.tokens.minus,qe.tokens.bang,qe.tokens.tilde,qe.tokens.star,qe.tokens.and])?this._updateNode(new we(this._previous().toString(),this._unary_expression())):this._singular_expression()}_singular_expression(){const i=this._primary_expression(),m=this._postfix_expression();return m&&(i.postfix=m),i}_postfix_expression(){if(this._match(qe.tokens.bracket_left)){const i=this._short_circuit_or_expression();this._consume(qe.tokens.bracket_right,"Expected ']'.");const m=this._updateNode(new be(i)),g=this._postfix_expression();return g&&(m.postfix=g),m}if(this._match(qe.tokens.period)){const i=this._consume(qe.tokens.name,"Expected member name."),m=this._postfix_expression(),g=this._updateNode(new fe(i.lexeme));return m&&(g.postfix=m),g}return null}_getStruct(i){return this._context.aliases.has(i)?this._context.aliases.get(i).type:this._context.structs.has(i)?this._context.structs.get(i):null}_getType(i){const m=this._getStruct(i);if(null!==m)return m;switch(i){case"void":return re.void;case"bool":return re.bool;case"i32":return re.i32;case"u32":return re.u32;case"f32":return re.f32;case"f16":return re.f16;case"vec2f":return oe.vec2f;case"vec3f":return oe.vec3f;case"vec4f":return oe.vec4f;case"vec2i":return oe.vec2i;case"vec3i":return oe.vec3i;case"vec4i":return oe.vec4i;case"vec2u":return oe.vec2u;case"vec3u":return oe.vec3u;case"vec4u":return oe.vec4u;case"vec2h":return oe.vec2h;case"vec3h":return oe.vec3h;case"vec4h":return oe.vec4h;case"mat2x2f":return oe.mat2x2f;case"mat2x3f":return oe.mat2x3f;case"mat2x4f":return oe.mat2x4f;case"mat3x2f":return oe.mat3x2f;case"mat3x3f":return oe.mat3x3f;case"mat3x4f":return oe.mat3x4f;case"mat4x2f":return oe.mat4x2f;case"mat4x3f":return oe.mat4x3f;case"mat4x4f":return oe.mat4x4f;case"mat2x2h":return oe.mat2x2h;case"mat2x3h":return oe.mat2x3h;case"mat2x4h":return oe.mat2x4h;case"mat3x2h":return oe.mat3x2h;case"mat3x3h":return oe.mat3x3h;case"mat3x4h":return oe.mat3x4h;case"mat4x2h":return oe.mat4x2h;case"mat4x3h":return oe.mat4x3h;case"mat4x4h":return oe.mat4x4h;case"mat2x2i":return oe.mat2x2i;case"mat2x3i":return oe.mat2x3i;case"mat2x4i":return oe.mat2x4i;case"mat3x2i":return oe.mat3x2i;case"mat3x3i":return oe.mat3x3i;case"mat3x4i":return oe.mat3x4i;case"mat4x2i":return oe.mat4x2i;case"mat4x3i":return oe.mat4x3i;case"mat4x4i":return oe.mat4x4i;case"mat2x2u":return oe.mat2x2u;case"mat2x3u":return oe.mat2x3u;case"mat2x4u":return oe.mat2x4u;case"mat3x2u":return oe.mat3x2u;case"mat3x3u":return oe.mat3x3u;case"mat3x4u":return oe.mat3x4u;case"mat4x2u":return oe.mat4x2u;case"mat4x3u":return oe.mat4x3u;case"mat4x4u":return oe.mat4x4u}return null}_validateTypeRange(i,m){if("i32"===m.name){if(i<-2147483648||i>2147483647)throw this._error(this._previous(),`Value out of range for i32:${i}. Line:${this._currentLine}.`)}else if("u32"===m.name&&(i<0||i>4294967295))throw this._error(this._previous(),`Value out of range for u32:${i}. Line:${this._currentLine}.`)}_primary_expression(){if(this._match(qe.tokens.ident)){const i=this._previous().toString();if(this._check(qe.tokens.paren_left)){const m=this._argument_expression_list(),g=this._getType(i);return null!==g?this._updateNode(new pe(g,m)):this._updateNode(new de(i,m))}if(this._context.constants.has(i)){const m=this._context.constants.get(i);return this._updateNode(new _e(i,m.value))}return this._updateNode(new me(i))}if(this._match(qe.tokens.int_literal)){const i=this._previous().toString();let m=i.endsWith("i")||i.endsWith("i")?re.i32:i.endsWith("u")||i.endsWith("U")?re.u32:re.x32;const g=parseInt(i);return this._validateTypeRange(g,m),this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(m)),m))}if(this._match(qe.tokens.uint_literal)){const i=parseInt(this._previous().toString());return this._validateTypeRange(i,re.u32),this._updateNode(new ge(new Oe(i,this._exec.getTypeInfo(re.u32)),re.u32))}if(this._match([qe.tokens.decimal_float_literal,qe.tokens.hex_float_literal])){let i=this._previous().toString(),m=i.endsWith("h");m&&(i=i.substring(0,i.length-1));const g=parseFloat(i);this._validateTypeRange(g,m?re.f16:re.f32);const x=m?re.f16:re.f32;return this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(x)),x))}if(this._match([qe.keywords.true,qe.keywords.false])){let i=this._previous().toString()===qe.keywords.true.rule;return this._updateNode(new ge(new Oe(i?1:0,this._exec.getTypeInfo(re.bool)),re.bool))}if(this._check(qe.tokens.paren_left))return this._paren_expression();if(this._match(qe.keywords.bitcast)){this._consume(qe.tokens.less_than,"Expected '<'.");const i=this._type_decl();this._consume(qe.tokens.greater_than,"Expected '>'.");const m=this._paren_expression();return this._updateNode(new xe(i,m))}const i=this._type_decl(),m=this._argument_expression_list();return this._updateNode(new pe(i,m))}_argument_expression_list(){if(!this._match(qe.tokens.paren_left))return null;const i=[];do{if(this._check(qe.tokens.paren_right))break;const m=this._short_circuit_or_expression();i.push(m)}while(this._match(qe.tokens.comma));return this._consume(qe.tokens.paren_right,"Expected ')' for agument list"),i}_optional_paren_expression(){this._match(qe.tokens.paren_left);const i=this._short_circuit_or_expression();return this._match(qe.tokens.paren_right),i}_paren_expression(){this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._short_circuit_or_expression();return this._consume(qe.tokens.paren_right,"Expected ')'."),i}_struct_decl(){if(!this._match(qe.keywords.struct))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected name for struct.").toString();this._consume(qe.tokens.brace_left,"Expected '{' for struct body.");const g=[];for(;!this._check(qe.tokens.brace_right);){const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected variable name.").toString();this._consume(qe.tokens.colon,"Expected ':' for struct member type.");const x=this._attribute(),_=this._type_decl();null!=_&&(_.attributes=x),this._check(qe.tokens.brace_right)?this._match(qe.tokens.comma):this._consume(qe.tokens.comma,"Expected ',' for struct member."),g.push(this._updateNode(new Le(m,_,i)))}this._consume(qe.tokens.brace_right,"Expected '}' after struct body.");const x=this._currentLine,_=this._updateNode(new ie(m,g,i,x),i);return this._context.structs.set(m,_),_}_global_variable_decl(){const i=this._variable_decl();if(!i)return null;if(this._match(qe.tokens.equal)){const m=this._const_expression();i.value=m}if(null!==i.type&&i.value instanceof ge){if("x32"!==i.value.type.name&&i.type.getTypeName()!==i.value.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${i.value.type.name} to ${i.type.name}. Line:${this._currentLine}`);i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type),i.value.type=i.type}else null===i.type&&i.value instanceof ge&&(i.type="x32"===i.value.type.name?re.i32:i.value.type,i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type));return i}_override_variable_decl(){const i=this._override_decl();return i&&this._match(qe.tokens.equal)&&(i.value=this._const_expression()),i}_global_const_decl(){var i;if(!this._match(qe.keywords.const))return null;const m=this._consume(qe.tokens.name,"Expected variable name"),g=this._currentLine;let x=null;if(this._match(qe.tokens.colon)){const i=this._attribute();x=this._type_decl(),null!=x&&(x.attributes=i)}let _=null;this._consume(qe.tokens.equal,"const declarations require an assignment");const b=this._short_circuit_or_expression();try{let i=[re.f32],g=b.constEvaluate(this._exec,i);g instanceof Oe&&this._validateTypeRange(g.value,i[0]),i[0]instanceof oe&&null===i[0].format&&g.typeInfo instanceof a&&null!==g.typeInfo.format&&("f16"===g.typeInfo.format.name?i[0].format=re.f16:"f32"===g.typeInfo.format.name?i[0].format=re.f32:"i32"===g.typeInfo.format.name?i[0].format=re.i32:"u32"===g.typeInfo.format.name?i[0].format=re.u32:"bool"===g.typeInfo.format.name?i[0].format=re.bool:console.error(`TODO:impelement template format type ${g.typeInfo.format.name}`)),_=this._updateNode(new ge(g,i[0])),this._exec.context.setVariable(m.toString(),g)}catch(i){_=b}if(null!==x&&_ instanceof ge){if("x32"!==_.type.name&&x.getTypeName()!==_.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${_.type.name} to ${x.name}. Line:${this._currentLine}`);_.type=x,_.isScalar&&this._validateTypeRange(_.scalarValue,_.type)}else null===x&&_ instanceof ge&&(x=null!==(i=null==_?void 0:_.type)&&void 0!==i?i:re.f32,x===re.x32&&(x=re.i32));const y=this._updateNode(new U(m.toString(),x,"","",_),g);return this._context.constants.set(y.name,y),y}_global_let_decl(){if(!this._match(qe.keywords.let))return null;const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected variable name");let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}let x=null;if(this._match(qe.tokens.equal)&&(x=this._const_expression()),null!==g&&x instanceof ge){if("x32"!==x.type.name&&g.getTypeName()!==x.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${x.type.name} to ${g.name}. Line:${this._currentLine}`);x.type=g}else null===g&&x instanceof ge&&(g="x32"===x.type.name?re.i32:x.type);return x instanceof ge&&x.isScalar&&this._validateTypeRange(x.scalarValue,g),this._updateNode(new M(m.toString(),g,"","",x),i)}_const_expression(){return this._short_circuit_or_expression()}_variable_decl(){if(!this._match(qe.keywords.var))return null;const i=this._currentLine;let m="",g="";this._match(qe.tokens.less_than)&&(m=this._consume(qe.storage_class,"Expected storage_class.").toString(),this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode.").toString()),this._consume(qe.tokens.greater_than,"Expected '>'."));const x=this._consume(qe.tokens.name,"Expected variable name");let _=null;if(this._match(qe.tokens.colon)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}return this._updateNode(new B(x.toString(),_,m,g,null),i)}_override_decl(){if(!this._match(qe.keywords.override))return null;const i=this._consume(qe.tokens.name,"Expected variable name");let m=null;if(this._match(qe.tokens.colon)){const i=this._attribute();m=this._type_decl(),null!=m&&(m.attributes=i)}return this._updateNode(new F(i.toString(),m,null))}_diagnostic(){this._consume(qe.tokens.paren_left,"Expected '('");const i=this._consume(qe.tokens.ident,"Expected severity control name.");this._consume(qe.tokens.comma,"Expected ','");let m=this._consume(qe.tokens.ident,"Expected diagnostic rule name.").toString();return this._match(qe.tokens.period)&&(m+=`.${this._consume(qe.tokens.ident,"Expected diagnostic message.").toString()}`),this._consume(qe.tokens.paren_right,"Expected ')'"),this._updateNode(new J(i.toString(),m))}_enable_directive(){const i=this._consume(qe.tokens.ident,"identity expected.");return this._updateNode(new Y(i.toString()))}_requires_directive(){const i=[this._consume(qe.tokens.ident,"identity expected.").toString()];for(;this._match(qe.tokens.comma);){const m=this._consume(qe.tokens.ident,"identity expected.");i.push(m.toString())}return this._updateNode(new K(i))}_type_alias(){const i=this._consume(qe.tokens.ident,"identity expected.");this._consume(qe.tokens.equal,"Expected '=' for type alias.");let m=this._type_decl();if(null===m)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(m.name)&&(m=this._context.aliases.get(m.name).type);const g=this._updateNode(new ee(i.toString(),m));return this._context.aliases.set(g.name,g),g}_type_decl(){if(this._check([qe.tokens.ident,...qe.texel_format,qe.keywords.bool,qe.keywords.f32,qe.keywords.i32,qe.keywords.u32])){const i=this._advance().toString();if(this._context.structs.has(i))return this._context.structs.get(i);if(this._context.aliases.has(i))return this._context.aliases.get(i).type;if(!this._getType(i)){const m=this._updateNode(new ae(i));return this._forwardTypeCount++,m}return this._updateNode(new re(i))}let i=this._texture_sampler_types();if(i)return i;if(this._check(qe.template_types)){let i=this._advance().toString(),m=null,g=null;return this._match(qe.tokens.less_than)&&(m=this._type_decl(),g=null,this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for type.")),this._updateNode(new oe(i,m,g))}if(this._match(qe.keywords.ptr)){let i=this._previous().toString();this._consume(qe.tokens.less_than,"Expected '<' for pointer.");const m=this._consume(qe.storage_class,"Expected storage_class for pointer");this._consume(qe.tokens.comma,"Expected ',' for pointer.");const g=this._type_decl();let x=null;return this._match(qe.tokens.comma)&&(x=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for pointer."),this._updateNode(new le(i,m.toString(),g,x))}const m=this._attribute();if(this._match(qe.keywords.array)){let g=null,x=-1;const _=this._previous();let b=null;if(this._match(qe.tokens.less_than)){g=this._type_decl(),this._context.aliases.has(g.name)&&(g=this._context.aliases.get(g.name).type);let m="";if(this._match(qe.tokens.comma)){b=this._shift_expression();try{m=b.constEvaluate(this._exec).toString(),b=null}catch(i){m="1"}}this._consume(qe.tokens.greater_than,"Expected '>' for array."),x=m?parseInt(m):0}const y=this._updateNode(new ce(_.toString(),m,g,x));return b&&this._deferArrayCountEval.push({arrayType:y,countNode:b}),y}return null}_texture_sampler_types(){if(this._match(qe.sampler_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.depth_texture_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.sampled_texture_type)||this._match(qe.multisampled_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._type_decl();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,null))}if(this._match(qe.storage_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._consume(qe.texel_format,"Invalid texel format.").toString();this._consume(qe.tokens.comma,"Expected ',' after texel format.");const g=this._consume(qe.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,g))}return null}_attribute(){let i=[];for(;this._match(qe.tokens.attr);){const m=this._consume(qe.attribute_name,"Expected attribute name"),g=this._updateNode(new Ce(m.toString(),null));if(this._match(qe.tokens.paren_left)){if(g.value=this._consume(qe.literal_or_ident,"Expected attribute value").toString(),this._check(qe.tokens.comma)){this._advance();do{const i=this._consume(qe.literal_or_ident,"Expected attribute value").toString();g.value instanceof Array||(g.value=[g.value]),g.value.push(i)}while(this._match(qe.tokens.comma))}this._consume(qe.tokens.paren_right,"Expected ')'")}i.push(g)}return 0==i.length?null:i}}class _t extends rt{constructor(i){super(),i&&this.update(i)}update(i){const m=(new mt).parse(i);this.updateAST(m)}}const Ht={TILE_COUNT_X:32,TILE_COUNT_Y:32,TILE_COUNT_Z:48,WORKGROUP_SIZE_X:8,WORKGROUP_SIZE_Y:4,WORKGROUP_SIZE_Z:8,MAX_LIGHTS_PER_CLUSTER:100,MAX_CLUSTER_LIGHTS:1024,getTotalTileSize:()=>Ht.TILE_COUNT_X*Ht.TILE_COUNT_Y*Ht.TILE_COUNT_Z,getClusterLightsBufferSize:()=>{const i=Ht.getTotalTileSize();return 8*i+8*Ht.MAX_LIGHTS_PER_CLUSTER*i+4},getDispatchSize:()=>[Math.ceil(Ht.TILE_COUNT_X/Ht.WORKGROUP_SIZE_X),Math.ceil(Ht.TILE_COUNT_Y/Ht.WORKGROUP_SIZE_Y),Math.ceil(Ht.TILE_COUNT_Z/Ht.WORKGROUP_SIZE_Z)]};Object.freeze(Ht);const $t=Object.freeze({calcTintBlendMode:"\nfn rgbToHsl(rgb:vec3<f32>) -> vec3<f32> { let maxVal:f32=max(max(rgb.r,rgb.g),rgb.b); let minVal:f32=min(min(rgb.r,rgb.g),rgb.b); let delta:f32=maxVal - minVal; let eps=1e-6; let lightness:f32=(maxVal + minVal) * 0.5; if (delta < eps) { return vec3<f32>(0.0,0.0,lightness); } var saturation:f32; if (lightness < 0.5) { saturation=delta/(maxVal + minVal + eps); } else { saturation=delta/(2.0 - maxVal - minVal + eps); } var hue:f32=0.0; if (abs(rgb.r - maxVal) < eps) { hue=(rgb.g - rgb.b)/delta; if (rgb.g < rgb.b) { hue +=6.0; } } else if (abs(rgb.g - maxVal) < eps) { hue=(rgb.b - rgb.r)/delta + 2.0; } else { hue=(rgb.r - rgb.g)/delta + 4.0; } hue=hue/6.0; return vec3<f32>(hue,saturation,lightness);\n}\nfn hslToRgb(hsl:vec3<f32>) -> vec3<f32> { let h=hsl.x; let s=hsl.y; let l=hsl.z; if (s==0.0) { return vec3<f32>(l,l,l); } var q:f32; if (l < 0.5) { q=l * (1.0 + s); } else { q=l + s - l * s; } let p=2.0 * l - q; var r:f32; var g:f32; var b:f32; for (var i:i32=0;i < 3;i=i + 1) { var t:f32; if (i==0) { t=h + 1.0/3.0; } else if (i==1) { t=h; } else { t=h - 1.0/3.0; } if (t < 0.0) { t=t + 1.0; } if (t > 1.0) { t=t - 1.0; } var color:f32; if (t < 1.0/6.0) { color=p + (q - p) * 6.0 * t; } else if (t < 1.0/2.0) { color=q; } else if (t < 2.0/3.0) { color=p + (q - p) * (2.0/3.0 - t) * 6.0; } else { color=p; } if (i==0) { r=color; } else if (i==1) { g=color; } else { b=color; } } return vec3<f32>(r,g,b);\n}\nfn calcTintBlendMode(baseColor:vec4<f32>,tintBlendMode:u32,tint:vec4<f32>) -> vec4<f32> { var tintedColor:vec3<f32>; let eps=1e-6; switch (tintBlendMode) { case 0u:{  tintedColor=mix(baseColor.rgb,tint.rgb,tint.a); } case 1u:{  tintedColor=baseColor.rgb * tint.rgb; } case 2u:{  tintedColor=max(baseColor.rgb,tint.rgb); } case 3u:{  tintedColor=1.0 - (1.0 - baseColor.rgb) * (1.0 - tint.rgb); } case 4u:{  tintedColor=clamp(baseColor.rgb + tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0)); } case 5u:{  tintedColor=clamp(baseColor.rgb - tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0)); } case 6u:{  tintedColor=min(baseColor.rgb,tint.rgb); } case 7u:{  tintedColor=mix( 2.0 * baseColor.rgb * tint.rgb, 1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb), step(vec3<f32>(0.5),baseColor.rgb) ); } case 8u:{  tintedColor=clamp(baseColor.rgb/(1.0 - tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 9u:{  tintedColor=1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 10u:{  tintedColor=mix( 2.0 * baseColor.rgb * tint.rgb, 1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb), step(vec3<f32>(0.5),tint.rgb) ); } case 11u:{  tintedColor=mix( baseColor.rgb * (tint.rgb + tint.rgb - vec3<f32>(1.0)), baseColor.rgb + tint.rgb - baseColor.rgb * tint.rgb, step(vec3<f32>(0.5),tint.rgb) ); } case 12u:{  tintedColor=abs(baseColor.rgb - tint.rgb); } case 13u:{  tintedColor=baseColor.rgb + tint.rgb - 2.0 * baseColor.rgb * tint.rgb; } case 14u:{  tintedColor=clamp(baseColor.rgb/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 15u:{  tintedColor=mix( clamp(baseColor.rgb/(1.0 - (tint.rgb - vec3<f32>(0.5)) * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)), 1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)), step(vec3<f32>(0.5),tint.rgb) ); } case 16u:{  tintedColor=clamp(baseColor.rgb + tint.rgb - vec3<f32>(1.0),vec3<f32>(0.0),vec3<f32>(1.0)); } case 17u:{  tintedColor=mix( min(baseColor.rgb,2.0 * tint.rgb), max(baseColor.rgb,2.0 * tint.rgb - vec3<f32>(1.0)), step(vec3<f32>(0.5),tint.rgb) ); } case 18u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(baseHsl.x,tintHsl.y,baseHsl.z)); } case 19u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(tintHsl.x,baseHsl.y,baseHsl.z)); } case 20u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(baseHsl.x,baseHsl.y,tintHsl.z)); } case 21u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(tintHsl.x,tintHsl.y,baseHsl.z)); } case 22u:{  tintedColor=1.0 - abs(1.0 - baseColor.rgb - tint.rgb); } default:{ tintedColor=baseColor.rgb; } } return vec4<f32>(tintedColor,baseColor.a * tint.a);\n}\n",calcDirectionalShadowVisibility:"fn calcDirectionalShadowVisibility( directionalShadowMap:texture_depth_2d, directionalShadowMapSampler:sampler_comparison, shadowDepthTextureSize:u32, bias:f32, shadowPos:vec3<f32>\n) -> f32 { let oneOverShadowDepthTextureSize=1.0/f32(shadowDepthTextureSize); let shadowDepth=clamp(shadowPos.z,0.0,1.0); var visibility:f32=0.0; for (var y=-1;y <=1;y++) { for (var x=-1;x <=1;x++) { let offset=vec2f(vec2(x,y)) * oneOverShadowDepthTextureSize; let tUV=shadowPos.xy + offset; let sampleVisibility=textureSampleCompare( directionalShadowMap, directionalShadowMapSampler, tUV, shadowDepth - bias ); if (tUV.x < 0.0 || tUV.x > 1.0 || tUV.y < 0.0 || tUV.y > 1.0) { visibility +=1.0; } else { visibility +=sampleVisibility; } } } visibility/=9.0; let depthFactor=shadowDepth; let minVisibility=0.2 + depthFactor * 0.6; return max(visibility,minVisibility);\n}\n",drawDirectionalShadowDepth:"struct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); #redgpu_if useDisplacementTexture { let distance=distance(position.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition( input_position, input_vertexNormal, displacementTexture, displacementTextureSampler, vertexUniforms.displacementScale, input_uv, mipLevel ); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } #redgpu_endIf output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n",normalFunctions:"\nfn cotangent_frame( N:vec3<f32>,p:vec3<f32>,uv:vec2<f32>) -> mat3x3<f32>{ let dp1:vec3<f32>=dpdx( p ); let dp2:vec3<f32>=dpdy( p ); let duv1:vec2<f32>=dpdx( uv ); let duv2:vec2<f32>=dpdy( uv ); let dp2perp:vec3<f32>=cross( dp2,N ); let dp1perp:vec3<f32>=cross( N,dp1 ); let T:vec3<f32>=dp2perp * duv1.x + dp1perp * duv2.x; let B:vec3<f32>=dp2perp * duv1.y + dp1perp * duv2.y; let invmax:f32=inverseSqrt( max( dot(T,T),dot(B,B) ) ); return mat3x3<f32>( T * invmax,B * invmax,N );\n}\nfn perturb_normal( N:vec3<f32>,V:vec3<f32>,texcoord:vec2<f32>,normalColor:vec3<f32>,normalPower:f32 ) -> vec3<f32> { var map:vec3<f32>=normalColor; map=map * 255./127. - 128./127.; map=vec3<f32>(map.xy * -normalPower,map.z); let TBN:mat3x3<f32>=cotangent_frame(N,V,texcoord); return normalize(TBN * map);\n}\n",calcPrePathBackground:"fn calcPrePathBackground( u_useKHR_materials_volume:bool,thicknessParameter:f32,u_KHR_dispersion:f32,u_KHR_attenuationDistance:f32,u_KHR_attenuationColor:vec3<f32>, ior:f32,roughnessParameter:f32,albedo:vec3<f32>, projectionCameraMatrix:mat4x4<f32>,input_vertexPosition:vec3<f32>,input_ndcPosition:vec3<f32>, V:vec3<f32>,N:vec3<f32>, renderPath1ResultTexture:texture_2d<f32>,renderPath1ResultTextureSampler:sampler\n) -> vec3<f32> { var prePathBackground=vec3<f32>(0.0); let transmissionMipLevel:f32=roughnessParameter * f32(textureNumLevels(renderPath1ResultTexture) - 1); if(u_useKHR_materials_volume){ var iorR:f32=ior; var iorG:f32=ior; var iorB:f32=ior; if(u_KHR_dispersion>0.0){ let halfSpread:f32=(ior - 1.0) * 0.025 * u_KHR_dispersion; iorR=ior + halfSpread; iorG=ior; iorB=ior - halfSpread; } let refractedVecR:vec3<f32>=refract(-V,N,1.0/iorR); let refractedVecG:vec3<f32>=refract(-V,N,1.0/iorG); let refractedVecB:vec3<f32>=refract(-V,N,1.0/iorB); let worldPosR:vec3<f32>=input_vertexPosition + refractedVecR * thicknessParameter; let worldPosG:vec3<f32>=input_vertexPosition + refractedVecG * thicknessParameter; let worldPosB:vec3<f32>=input_vertexPosition + refractedVecB * thicknessParameter; let clipPosR:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosR,1.0); let clipPosG:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosG,1.0); let clipPosB:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosB,1.0); let ndcR:vec2<f32>=clipPosR.xy/clipPosR.w * 0.5 + 0.5; let ndcG:vec2<f32>=clipPosG.xy/clipPosG.w * 0.5 + 0.5; let ndcB:vec2<f32>=clipPosB.xy/clipPosB.w * 0.5 + 0.5; let finalUV_R:vec2<f32>=vec2<f32>(ndcR.x,1.0 - ndcR.y); let finalUV_G:vec2<f32>=vec2<f32>(ndcG.x,1.0 - ndcG.y); let finalUV_B:vec2<f32>=vec2<f32>(ndcB.x,1.0 - ndcB.y); prePathBackground.r=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_R,transmissionMipLevel).r; prePathBackground.g=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_G,transmissionMipLevel).g; prePathBackground.b=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_B,transmissionMipLevel).b; } else { let refractedVec:vec3<f32>=refract(-V,N,1.0/ior); let worldPos:vec3<f32>=input_vertexPosition + refractedVec * thicknessParameter; let clipPos:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPos,1.0); let ndc:vec2<f32>=clipPos.xy/clipPos.w * 0.5 + 0.5; let finalUV:vec2<f32>=vec2<f32>(ndc.x,1.0 - ndc.y); prePathBackground=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV,transmissionMipLevel).rgb; } prePathBackground *=albedo; return prePathBackground;\n}\n",FragmentOutput:"struct FragmentOutput { @location(0) color:vec4<f32>, @location(1) gBufferNormal:vec4<f32>, @location(2) gBufferMotionVector:vec4<f32>,\n}\n",picking:"@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let input_position=inputData.position; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0); output.position=u_projectionCameraMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n",drawPicking:"\n@fragment\nfn picking(inputData:InputData) -> @location(0) vec4<f32> { var finalColor:vec4<f32>=inputData.pickingId; return finalColor;\n}\n"});Object.freeze($t);const Wt=Object.freeze({calcDisplacements:"fn calcDisplacementPosition(input_position:vec3<f32>,input_vertexNormal:vec3<f32>,displacementTexture:texture_2d<f32>,displacementTextureSampler:sampler,displacementScale:f32,input_uv:vec2<f32>,mipLevel:f32) -> vec3<f32> { let displacementSample=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,mipLevel).r; let scaledDisplacement=(displacementSample - 0.5) * displacementScale; let displacedPosition=input_position + input_vertexNormal * scaledDisplacement; return displacedPosition;\n}\nfn calcDisplacementNormal( input_vertexNormal:vec3<f32>, displacementTexture:texture_2d<f32>, displacementTextureSampler:sampler, displacementScale:f32, input_uv:vec2<f32>, mipLevel:f32\n) -> vec3<f32> { let textureDimensions=vec2<f32>(textureDimensions(displacementTexture,0)); let adaptiveOffset=vec2<f32>(1.0)/textureDimensions; let actualMipLevel=mipLevel; let center=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,actualMipLevel).r; let left=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(adaptiveOffset.x,0.0),actualMipLevel).r; let right=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(adaptiveOffset.x,0.0),actualMipLevel).r; let down=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(0.0,adaptiveOffset.y),actualMipLevel).r; let up=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(0.0,adaptiveOffset.y),actualMipLevel).r; let ddx=((right - 0.5) - (left - 0.5)) * displacementScale/(2.0 * adaptiveOffset.x); let ddy=((up - 0.5) - (down - 0.5)) * displacementScale/(2.0 * adaptiveOffset.y); let tangentSpaceNormal=normalize(vec3<f32>(-ddx,-ddy,1.0)); let worldNormal=normalize(input_vertexNormal); let normalStrength=clamp(1.0 - mipLevel * 0.1,0.2,1.0); let blendedNormal=normalize(mix(worldNormal,tangentSpaceNormal,normalStrength * 0.3)); return blendedNormal;\n}\n",calculateMotionVector:"fn calculateMotionVector( currentClipPos:vec4<f32>, prevClipPos:vec4<f32>, resolution:vec2<f32>\n) -> vec2<f32> { let currentW=max(currentClipPos.w,0.000001); let prevW=max(prevClipPos.w,0.000001); let currentNDC=currentClipPos.xy/currentW; let prevNDC=prevClipPos.xy/prevW; let motionVectorNDC=currentNDC - prevNDC; let screenMotionVector=motionVectorNDC * resolution * 0.5; let maxMotionPixels=16.0; let motionMagnitude=length(screenMotionVector); let clampedMotionVector=screenMotionVector * min(1.0,maxMotionPixels/max(motionMagnitude,0.000001)); return clampedMotionVector;\n}\n",getBillboardMatrix:"fn getBillboardMatrix(cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>) -> mat4x4<f32> { let scaleX=length(vec3<f32>(modelMatrix[0].xyz)); let scaleY=length(vec3<f32>(modelMatrix[1].xyz)); let scaleZ=length(vec3<f32>(modelMatrix[2].xyz)); let scaleMatrix=mat4x4<f32>( vec4<f32>(scaleX,0.0,0.0,0.0), vec4<f32>(0.0,scaleY,0.0,0.0), vec4<f32>(0.0,0.0,scaleZ,0.0), vec4<f32>(0.0,0.0,0.0,1.0) ); var resultMatrix=cameraMatrix * modelMatrix; resultMatrix[0][0]=1.0;resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0; resultMatrix[1][0]=0.0;resultMatrix[1][1]=1.0;resultMatrix[1][2]=0.0; resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=1.0; return resultMatrix * scaleMatrix;\n}\nfn getBillboardMatrixNoScaleRatio( cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>)-> mat4x4<f32>{ var resultMatrix=cameraMatrix * modelMatrix; resultMatrix[0][0]=modelMatrix[0][0];resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0; resultMatrix[1][0]=0.0;resultMatrix[1][1]=modelMatrix[1][1];resultMatrix[1][2]=0.0; resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=modelMatrix[2][2]; return resultMatrix;\n}\n",extractScaleAndTranslation:"fn extractScaleAndTranslation(modelMatrix:mat4x4<f32>) -> mat4x4<f32> { let scaleX=length(vec3<f32>(modelMatrix[0].xyz)); let scaleY=length(vec3<f32>(modelMatrix[1].xyz)); let scaleZ=length(vec3<f32>(modelMatrix[2].xyz)); let scaleMatrix=mat4x4<f32>( vec4<f32>(scaleX,0.0,0.0,0.0), vec4<f32>(0.0,scaleY,0.0,0.0), vec4<f32>(0.0,0.0,scaleZ,0.0), vec4<f32>(0.0,0.0,0.0,1.0) ); return mat4x4<f32>( scaleMatrix[0], scaleMatrix[1], scaleMatrix[2], modelMatrix[3]  );\n}\n"});Object.freeze(Wt);const Kt=Object.freeze({SYSTEM_UNIFORM:"struct DirectionalLight { direction:vec3<f32>, color:vec3<f32>, intensity:f32,\n};\nstruct AmbientLight { color:vec3<f32>, intensity:f32\n};\nstruct Camera { cameraMatrix:mat4x4<f32>, cameraPosition:vec3<f32>, nearClipping:f32, farClipping:f32\n};\nstruct SystemUniform { projectionMatrix:mat4x4<f32>, projectionCameraMatrix:mat4x4<f32>, noneJitterProjectionMatrix:mat4x4<f32>, noneJitterProjectionCameraMatrix:mat4x4<f32>, inverseProjectionMatrix:mat4x4<f32>, prevProjectionCameraMatrix:mat4x4<f32>, resolution:vec2<f32>, camera:Camera, time:f32, useIblTexture:u32, isView3D:u32, shadowDepthTextureSize:u32, bias:f32, directionalLightCount:u32, directionalLightProjectionViewMatrix:mat4x4<f32>, directionalLightProjectionMatrix:mat4x4<f32>, directionalLightViewMatrix:mat4x4<f32>, directionalLights:array<DirectionalLight,3>, ambientLight:AmbientLight,\n};\n@group(0) @binding(0) var<uniform> systemUniforms:SystemUniform;\n@group(0) @binding(1) var directionalShadowMapSampler:sampler_comparison;\n@group(0) @binding(2) var directionalShadowMap:texture_depth_2d;\n@group(0) @binding(3) var iblTextureSampler:sampler;\n@group(0) @binding(7) var renderPath1ResultTextureSampler:sampler;\n@group(0) @binding(8) var renderPath1ResultTexture:texture_2d<f32>;\n@group(0) @binding(9) var packedTextureSampler:sampler;\n@group(0) @binding(10) var ibl_environmentTexture:texture_cube<f32>;\n@group(0) @binding(11) var ibl_irradianceTexture:texture_cube<f32>;\nconst clusterLight_indicesLength:u32=u32(REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu * REDGPU_DEFINE_TOTAL_TILESu);\nconst clusterLight_tileCount=vec3<u32>(REDGPU_DEFINE_TILE_COUNT_Xu,REDGPU_DEFINE_TILE_COUNT_Yu,REDGPU_DEFINE_TILE_COUNT_Zu);\nstruct ClusterLights { offset:u32, count:u32\n};\nstruct ClusterLightsGroup { offset:atomic<u32>, lights:array<ClusterLights,REDGPU_DEFINE_TOTAL_TILES>, indices:array<u32,clusterLight_indicesLength>\n};\nstruct ClusterLight_ClusterCube { minAABB:vec4<f32>, maxAABB:vec4<f32> };\nstruct ClusterLight_Clusters { cubeList:array<ClusterLight_ClusterCube,REDGPU_DEFINE_TOTAL_TILES>\n};\nfn linearDepth(depthSample:f32) -> f32 { return systemUniforms.camera.farClipping*systemUniforms.camera.nearClipping/fma(depthSample,systemUniforms.camera.nearClipping-systemUniforms.camera.farClipping,systemUniforms.camera.farClipping);\n}\nfn getClusterLightClusterIndex(fragCoord:vec4<f32>) -> u32 { let tile=getClusterLightTile(fragCoord); return tile.x + tile.y * clusterLight_tileCount.x + tile.z * clusterLight_tileCount.x * clusterLight_tileCount.y;\n}\nfn getClusterLightTile(fragCoord:vec4<f32>) -> vec3<u32> { let sliceScale=f32(clusterLight_tileCount.z)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping); let sliceBias=-(f32(clusterLight_tileCount.z) * log2(systemUniforms.camera.nearClipping)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping)); let zTile=u32(max(log2(linearDepth(fragCoord.z)) * sliceScale + sliceBias,0.0)); return vec3<u32>(u32(fragCoord.x/(systemUniforms.resolution.x/f32(clusterLight_tileCount.x))), u32(fragCoord.y/(systemUniforms.resolution.y/f32(clusterLight_tileCount.y))), zTile);\n}\nstruct ClusterLight { position:vec3<f32>,radius:f32, color:vec3<f32>,intensity:f32, isSpotLight:f32,directionX:f32,directionY:f32,directionZ:f32, outerCutoff:f32,innerCutoff:f32,\n};\nstruct ClusterLightList { count:vec4<f32>, lights:array<ClusterLight>\n};\n@group(0) @binding(5) var<storage> clusterLightList:ClusterLightList;\n@group(0) @binding(6) var<storage,read_write> clusterLightGroup:ClusterLightsGroup;\n",...Wt,...$t});Object.freeze(Kt);class ShaderVariantGenerator{#F=new Map;#N;#V;constructor(i,m){this.#N=i,this.#V=m}getVariant(i){if(this.#F.has(i))return this.#F.get(i);const m="none"===i?[]:i.split("+"),g=this.#z(m);return this.#F.set(i,g),g}getCachedVariants(){return Array.from(this.#F.keys())}#z(i){let m=this.#N;for(let g=this.#V.length-1;g>=0;g--){const x=this.#V[g];m=i.includes(x.uniformName)?m.replace(x.fullMatch,x.ifBlock):m.replace(x.fullMatch,x.elseBlock||"")}return m}}const jt=Object.keys(Kt).join("|"),Xt=new RegExp(`#redgpu_include (${jt})`,"g"),qt=/REDGPU_DEFINE_(?:TILE_COUNT_[XYZ]|TOTAL_TILES|WORKGROUP_SIZE_[XYZ]|MAX_LIGHTS_PER_CLUSTER)/g,Yt={REDGPU_DEFINE_TILE_COUNT_X:Ht.TILE_COUNT_X.toString(),REDGPU_DEFINE_TILE_COUNT_Y:Ht.TILE_COUNT_Y.toString(),REDGPU_DEFINE_TILE_COUNT_Z:Ht.TILE_COUNT_Z.toString(),REDGPU_DEFINE_TOTAL_TILES:Ht.getTotalTileSize().toString(),REDGPU_DEFINE_WORKGROUP_SIZE_X:Ht.WORKGROUP_SIZE_X.toString(),REDGPU_DEFINE_WORKGROUP_SIZE_Y:Ht.WORKGROUP_SIZE_Y.toString(),REDGPU_DEFINE_WORKGROUP_SIZE_Z:Ht.WORKGROUP_SIZE_Z.toString(),REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTER:Ht.MAX_LIGHTS_PER_CLUSTER.toString()},Zt=/#redgpu_if\s+(\w+)\b([\s\S]*?)(?:#redgpu_else([\s\S]*?))?#redgpu_endIf/g,Jt=new Map,preprocessWGSL=i=>{const m=(i=>{let m=0;for(let g=0;g<i.length;g++)m=(m<<5)-m+i.charCodeAt(g),m&=m;return m.toString(36)})(i),g=Jt.get(m);if(g)return g;const x=(i=>i.replace(Xt,(i,m)=>Kt[m]||i))(i),_=(i=>i.replace(qt,i=>Yt[i]||i))(x),b=(i=>{const m=[];let g,x=0;for(Zt.lastIndex=0;null!==(g=Zt.exec(i));){const[i,_,b,y]=g;m.push({uniformName:_,ifBlock:b.trim(),elseBlock:y?.trim(),fullMatch:i,blockIndex:x++})}return m})(_);(i=>{if(!i.length)return;const m=new Map;i.forEach(i=>{m.set(i.uniformName,(m.get(i.uniformName)||0)+1)}),Array.from(m.entries()).filter(([i,m])=>m>1).length})(b);const y=((i,m)=>{let g=i;for(let i=m.length-1;i>=0;i--){const x=m[i];g=g.replace(x.fullMatch,x.ifBlock)}return g})(_,b),T=[...new Set(b.map(i=>i.uniformName))],w={cacheKey:m,defaultSource:y,shaderSourceVariant:new ShaderVariantGenerator(_,b),conditionalBlocks:T};return Math.pow(2,T.length),Jt.set(m,w),w};class WGSLUniformTypes{static get i32(){return{numElements:1,align:4,size:4,type:"i32",wgslType:"i32",View:Int32Array}}static get u32(){return{numElements:1,align:4,size:4,type:"u32",wgslType:"u32",View:Uint32Array}}static get f32(){return{numElements:1,align:4,size:4,type:"f32",wgslType:"f32",View:Float32Array}}static get f16(){return{numElements:1,align:2,size:2,type:"f16",wgslType:"f16",View:Uint16Array}}static get vec2f32(){return{numElements:2,align:8,size:8,type:"f32",wgslType:"vec2<f32>",View:Float32Array}}static get vec2i32(){return{numElements:2,align:8,size:8,type:"i32",wgslType:"vec2<i32>",View:Int32Array}}static get vec2u32(){return{numElements:2,align:8,size:8,type:"u32",wgslType:"vec2<u32>",View:Uint32Array}}static get vec2u16(){return{numElements:2,align:4,size:4,type:"u16",wgslType:"vec2<u16>",View:Uint16Array}}static get vec3i32(){return{numElements:3,align:16,size:12,type:"i32",wgslType:"vec3<i32>",View:Int32Array}}static get vec3u32(){return{numElements:3,align:16,size:12,type:"u32",wgslType:"vec3<u32>",View:Uint32Array}}static get vec3f32(){return{numElements:3,align:16,size:12,type:"f32",wgslType:"vec3<f32>",View:Float32Array}}static get vec3u16(){return{numElements:3,align:8,size:6,type:"u16",wgslType:"vec3<u16>",View:Uint16Array}}static get vec4i32(){return{numElements:4,align:16,size:16,type:"i32",wgslType:"vec4<i32>",View:Int32Array}}static get vec4u32(){return{numElements:4,align:16,size:16,type:"u32",wgslType:"vec4<u32>",View:Uint32Array}}static get vec4f32(){return{numElements:4,align:16,size:16,type:"f32",wgslType:"vec4<f32>",View:Float32Array}}static get vec4u16(){return{numElements:4,align:8,size:8,type:"u16",wgslType:"vec4<u16>",View:Uint16Array}}static get mat2x2f32(){return{numElements:4,align:8,size:16,type:"f32",wgslType:"mat2x2<f32>",View:Float32Array}}static get mat2x2u16(){return{numElements:4,align:4,size:8,type:"u16",wgslType:"mat2x2<u16>",View:Uint16Array}}static get mat3x2f32(){return{numElements:6,align:8,size:24,type:"f32",wgslType:"mat3x2<f32>",View:Float32Array}}static get mat3x2u16(){return{numElements:6,align:4,size:12,type:"u16",wgslType:"mat3x2<u16>",View:Uint16Array}}static get mat3x3f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat3x3<f32>",View:Float32Array}}static get mat4x2f32(){return{numElements:8,align:8,size:32,type:"f32",wgslType:"mat4x2<f32>",View:Float32Array}}static get mat4x2u16(){return{numElements:8,align:4,size:16,type:"u16",wgslType:"mat4x2<u16>",View:Uint16Array}}static get mat2x3f32(){return{numElements:8,align:16,size:32,type:"f32",wgslType:"mat2x3<f32>",View:Float32Array}}static get mat2x3u16(){return{numElements:8,align:8,size:16,type:"u16",wgslType:"mat2x3<u16>",View:Uint16Array}}static get mat4x4f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat4x4<f32>",View:Float32Array}}static get mat4x4u16(){return{numElements:16,align:8,size:32,type:"u16",wgslType:"mat4x4<u16>",View:Uint16Array}}}function ensureVertexIndexBuiltin(i){if(/@builtin\s*\(\s*vertex_index\s*\)/.test(i))return i;return i.replace(/(@vertex\s+fn\s+)([a-zA-Z_][a-zA-Z0-9_]*)\s*\(([^)]*)(\))/,(i,m,g,x,_)=>{const b=x.trim(),y="@builtin(vertex_index) redgpu_auto_builtin_vertex_index:u32";return`${m}${g}(${0===b.length?y:`${b},${y}`}${_}`})}Object.freeze(WGSLUniformTypes);const processMembers=(i,m=0,g=0)=>{let x=0,_=g;const b=i?.reduce((i,g,b)=>{const{type:y,offset:T,size:w,stride:P,count:z,isArray:H}=g,{format:$}=y,W="array"===y.name?`${$.name}${$.format?`${$.format.name}`:""}`:`${y.name}${$?`${$.name}`:""}`;if(x=m,_=T+w,i[g.name]=((i,m,g)=>{const x=WGSLUniformTypes[g];return{uniformOffset:i.offset+m,uniformOffsetForData:i.offset,stride:i.stride,isArray:i.isArray,typeInfo:x,View:x?.View}})(g,m,W),H&&$.members){const m=processMembers($.members).members;i[g.name].memberList=Array.from({length:z},(i,g)=>{const x={};for(const i in m){const _=x[i]={...m[i]};_.uniformOffset=_.uniformOffset+T+P*g}return x})}else y.members&&(i[g.name]=processMembers(y.members,T+m,_));return i},{});return{members:b,startOffset:x,endOffset:_}},Qt=new Map;console.log.bind(console);const parseWGSL=i=>{i=ensureVertexIndexBuiltin(i);const{defaultSource:m,shaderSourceVariant:g,conditionalBlocks:x,cacheKey:_}=preprocessWGSL(i),b=Qt.get(_);let y;if(b)y=b;else{const i=new _t(m);y={uniforms:{...(w=i.uniforms,w.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},storage:{...(T=i.storage,T.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride,acccess:m.access,type:m.type},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},samplers:i.samplers,textures:i.textures,vertexEntries:i.entry.vertex.map(i=>i.name),fragmentEntries:i.entry.fragment.map(i=>i.name),computeEntries:i.entry.compute.map(i=>i.name)},Qt.set(_,y)}var T,w;return{...y,defaultSource:m,shaderSourceVariant:g,conditionalBlocks:x}},en={ZERO:"zero",ONE:"one",SRC:"src",ONE_MINUS_SRC:"one-minus-src",SRC_ALPHA:"src-alpha",ONE_MINUS_SRC_ALPHA:"one-minus-src-alpha",DST:"dst",ONE_MINUS_DST:"one-minus-dst",DST_ALPHA:"dst-alpha",ONE_MINUS_DST_ALPHA:"one-minus-dst-alpha",SRC_ALPHA_SATURATED:"src-alpha-saturated",CONSTANT:"constant",ONE_MINUS_CONSTANT:"one-minus-constant",SRC1:"src1",ONE_MINUS_SRC1:"one-minus-src1",SRC1_ALPHA:"src1-alpha",ONE_MINUS_SRC1_ALPHA:"one-minus-src1-alpha"};Object.freeze(en);const tn={ADD:"add",SUBTRACT:"subtract",REVERSE_SUBTRACT:"reverse-subtract",MIN:"min",MAX:"max"};Object.freeze(tn);class FragmentGPURenderInfo{fragmentShaderModule;fragmentShaderSourceVariant;fragmentShaderVariantConditionalBlocks;fragmentUniformInfo;fragmentBindGroupLayout;fragmentUniformBuffer;fragmentUniformBindGroup;fragmentState;constructor(i,m,g,x,_,b,y,T){this.fragmentShaderModule=i,this.fragmentShaderSourceVariant=m,this.fragmentShaderVariantConditionalBlocks=g,this.fragmentUniformInfo=x,this.fragmentBindGroupLayout=_,this.fragmentUniformBuffer=b,this.fragmentUniformBindGroup=y,this.fragmentState=T}}Object.freeze(FragmentGPURenderInfo);const nn=Object.values(en),rn=Object.values(tn);class BlendState{state;#H;#$;#W;#K;constructor(i,m,g,x){this.#K=i,this.srcFactor=m,this.dstFactor=g,this.operation=x}get operation(){return this.#W}set operation(i){rn.includes(i)||consoleAndThrowError(`Invalid GPUBlendOperation:${i}. Valid operations are ${rn.join(",")}`),this.#W=i,this.#j()}get srcFactor(){return this.#H}set srcFactor(i){nn.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid srcFactor factors are ${nn.join(",")}`),this.#H=i,this.#j()}get dstFactor(){return this.#$}set dstFactor(i){nn.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid dstFactor factors are ${nn.join(",")}`),this.#$=i,this.#j()}#j(){const i=this.#W?{operation:this.#W}:{},m=this.#H?{srcFactor:this.#H}:{},g=this.#$?{dstFactor:this.#$}:{};this.state={...i,...m,...g},this.#K.dirtyPipeline=!0}}class ResourceStateUniformBuffer{static dirtyList=[];buffer;uuid;#X=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateUniformBuffer.dirtyList.push(this)}}class ManagementResourceBase extends ResourceBase{#q;constructor(i,m){super(i,m),m||consoleAndThrowError("need managedStateKey",this.constructor.name),this.#q=i.resourceManager[m],this.#q||consoleAndThrowError(m,"is not exist in RedGPUContext.resourceManager",this.constructor.name)}get targetResourceManagedState(){return this.#q}}const an=Symbol("gpuBuffer"),sn=Symbol("gpuBufferData"),on=Symbol("gpuBufferCacheKey");class ABaseBuffer extends ManagementResourceBase{[an];[on];#Y;constructor(i,m,g){super(i,m),this.#Y=g}get cacheKey(){return this[on]||this.uuid}get gpuBuffer(){return this[an]}get usage(){return this.#Y}get size(){return this[sn].byteLength||0}get videoMemorySize(){return this.size}destroy(){const i=this[an];i&&(this[an]=null,this.__fireListenerList(!0),this.redGPUContext.resourceManager.unregisterManagementResource(this),i&&i.destroy())}}class AUniformBaseBuffer extends ABaseBuffer{[sn];#Z;#J;constructor(i,m,g,x,_=""){super(i,m,g),this.#J=x.byteLength,this.#Z={size:this.#J,usage:this.usage,label:_};try{this[an]=i.gpuDevice.createBuffer(this.#Z)}catch(i){console.error("GPU 버퍼 생성에 실패했습니다:",i)}i.gpuDevice.queue.writeBuffer(this[an],0,x),this[sn]=x}get data(){return this[sn]}get size(){return this.#J}get uniformBufferDescriptor(){return this.#Z}writeOnlyBuffer(i,m){this.redGPUContext.gpuDevice.queue.writeBuffer(this.gpuBuffer,i.uniformOffset,new i.View("number"==typeof m?[m]:m))}}class UniformBuffer extends AUniformBaseBuffer{constructor(i,m,g="",x=""){super(i,"managedUniformBufferState",GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,m,g);const{table:_}=this.targetResourceManagedState,b=_.get(x);if(b)return b.buffer;x&&(this.name=x,this[on]=x),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateUniformBuffer(this))}}Object.freeze(UniformBuffer);const getMipLevelCount=(i,m)=>Math.floor(Math.log2(Math.max(i,m)))+1,un={CLAMP_TO_EDGE:"clamp-to-edge",REPEAT:"repeat",MIRRORED_REPEAT:"mirror-repeat"};Object.freeze(un);const ln={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(ln);const cn={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(cn);const hn=new Map,fn=Object.values(ln),dn=Object.values(un),mn=Object.values(cn);class Sampler extends ResourceBase{#Q;#ee=ln.LINEAR;#te=ln.LINEAR;#ne=cn.LINEAR;#re=un.CLAMP_TO_EDGE;#ie=un.CLAMP_TO_EDGE;#ae=un.REPEAT;#se;#oe;#ue;#le=1;constructor(i,m){super(i),this.#ce(m)}get addressModeU(){return this.#re}set addressModeU(i){this.#he(i,"addressModeU")}get addressModeV(){return this.#ie}set addressModeV(i){this.#he(i,"addressModeV")}get addressModeW(){return this.#ae}set addressModeW(i){this.#he(i,"addressModeW")}get mipmapFilter(){return this.#ne}set mipmapFilter(i){this.#fe(i,mn,"mipmapFilter")}get gpuSampler(){return this.#Q}get magFilter(){return this.#ee}set magFilter(i){this.#fe(i,fn,"magFilter")}get minFilter(){return this.#te}set minFilter(i){this.#fe(i,fn,"minFilter")}get maxAnisotropy(){return this.#le}set maxAnisotropy(i){validateUintRange(i,1,16),this.#le=i,this.#ce()}get isAnisotropyValid(){return!this.#le||"linear"===this.#ee&&"linear"===this.#te&&"linear"===this.#ne}#de(){this.__fireListenerList()}#he(i,m){if(dn.includes(i)){switch(m){case"addressModeU":this.#re=i;break;case"addressModeV":this.#ie=i;break;case"addressModeW":this.#ae=i}this.#ce()}else consoleAndThrowError(`Invalid ${m} value. Must be one of ${dn.join(",")},but received:${i}.`)}#fe(i,m,g){if(m.includes(i)||null===i){switch(g){case"mipmapFilter":this.#ne=i;break;case"magFilter":this.#ee=i;break;case"minFilter":this.#te=i}this.#ce()}else consoleAndThrowError(`Invalid ${g} value. Must be one of ${m.join(",")},but received:${i}.`)}#me(){return`${this.#ee}:${this.#te}:${this.#ne}:${this.#re}:${this.#ie}:${this.#ae}:${this.#se}:${this.#oe}:${this.#ue}:${this.#le}`}#ce(i){i&&(i.magFilter&&(this.#ee=i.magFilter),i.minFilter&&(this.#te=i.minFilter),i.mipmapFilter&&(this.#ne=i.mipmapFilter),i.addressModeU&&(this.#re=i.addressModeU),i.addressModeV&&(this.#ie=i.addressModeV),i.addressModeW&&(this.#ae=i.addressModeW),void 0!==i.lodMinClamp&&(this.#se=i.lodMinClamp),void 0!==i.lodMaxClamp&&(this.#oe=i.lodMaxClamp),i.compare&&(this.#ue=i.compare),i.maxAnisotropy&&(this.#le=i.maxAnisotropy)),this.isAnisotropyValid||1===this.#le||(console.warn(`Invalid maxAnisotropy setting (${this.#le}) detected:magFilter(${this.#ee}),minFilter(${this.#te}),mipmapFilter(${this.#ne}) must all be set to 'linear' for anisotropic filtering to work. Falling back to default (1).`),this.#le=1);const m=this.#me();if(!hn.has(m)){let i={};this.#ee&&(i.magFilter=this.#ee),this.#te&&(i.minFilter=this.#te),this.#ne&&(i.mipmapFilter=this.#ne),this.#re&&(i.addressModeU=this.#re),this.#ie&&(i.addressModeV=this.#ie),this.#ae&&(i.addressModeW=this.#ae),void 0!==this.#se&&(i.lodMinClamp=this.#se),void 0!==this.#oe&&(i.lodMaxClamp=this.#oe),this.#ue&&(i.compare=this.#ue),this.#le&&(i.maxAnisotropy=this.#le),hn.set(m,this.redGPUContext.gpuDevice.createSampler(i))}this.#Q=hn.get(m),this.#de()}}Object.freeze(Sampler);const pn=new Map,gn=new WeakMap;let xn,_n,vn;class PackedTexture{#w=createUUID();#l;#pe;#ge;#M;#xe;#_e=new Map;constructor(i){this.#l=i,this.#M=i.gpuDevice,this.#ve(),this.#pe=this.#be()}get uuid(){return this.#w}get gpuTexture(){return this.#ge}static getCacheMap(){return pn}async packing(i,m,g,x,_){const b={r:"r",g:"g",b:"b",a:"a",..._},y=`${i.r?.label||""}_${i.g?.label||""}_${i.b?.label||""}_${i.a?.label||""}`,T=`${JSON.stringify(b)}_${y}`;if(!(i.r||i.g||i.b||i.a))return;this.#ye(T);pn.get(T)||await this.#Se(i,m,g,x,b,T)}destroy(){const i=gn.get(this);if(i){const m=pn.get(i);m&&(m.useNum--,0===m.useNum&&(m.gpuTexture?.destroy(),pn.delete(i))),gn.delete(this)}}#ve(){vn=this.#l.resourceManager.createGPUBuffer("PACK_TEXTURE_MAPPING_BUFFER",{size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),_n||(_n=this.#l.resourceManager.createBindGroupLayout("PACK_TEXTURE_BIND_GROUP_LAYOUT",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]})),xn||(xn=this.#Te())}#we(i){const m=`${i.r?.label||"empty"}_${i.g?.label||"empty"}_${i.b?.label||"empty"}_${i.a?.label||"empty"}`,{resourceManager:g}=this.#l;if(!this.#_e.has(m)){const x=[{binding:0,resource:g.getGPUResourceBitmapTextureView(i.r)},{binding:1,resource:g.getGPUResourceBitmapTextureView(i.g)},{binding:2,resource:g.getGPUResourceBitmapTextureView(i.b)},{binding:3,resource:g.getGPUResourceBitmapTextureView(i.a)},{binding:4,resource:this.#pe},{binding:5,resource:{buffer:vn}}],_=this.#M.createBindGroup({label:`PACK_TEXTURE_BIND_GROUP_${m}`,layout:_n,entries:x});this.#_e.set(m,_)}this.#xe=this.#_e.get(m)}#ye(i){const m=gn.get(this);if(m&&m!==i){const i=pn.get(m);i&&(i.useNum--,0===i.useNum&&(i.gpuTexture?.destroy(),pn.delete(m)))}const g=pn.get(i);g&&(this.#ge=g.gpuTexture,g.useNum++),gn.set(this,i)}async#Se(i,m,g,x,_,b){const y={size:[m,g,1],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,label:x||`PACK_TEXTURE_${createUUID()}`,mipLevelCount:getMipLevelCount(m,g)};this.#ge&&(this.#ge=null);const T=this.#l.resourceManager.createManagedTexture(y),w=new Uint32Array([["r","g","b","a"].indexOf(_.r),["r","g","b","a"].indexOf(_.g),["r","g","b","a"].indexOf(_.b),["r","g","b","a"].indexOf(_.a)]);this.#M.queue.writeBuffer(vn,0,w),this.#we(i),this.#Me(T),this.#ge=y.mipLevelCount>1?this.#l.resourceManager.mipmapGenerator.generateMipmap(T,y):T,pn.set(b,{gpuTexture:this.#ge,useNum:1,mappingKey:b,uuid:this.#w}),this.#xe=null}#Me(i){const{resourceManager:m}=this.#l,g=this.#M.createCommandEncoder({label:"PackedTexture_CommandEncoder"}),x=g.beginRenderPass({colorAttachments:[{view:m.getGPUResourceBitmapTextureView(i,{baseMipLevel:0,mipLevelCount:1,dimension:"2d",label:`${i.label}_RENDER_TARGET`}),loadOp:"clear",storeOp:"store",clearValue:[0,0,0,0]}]});x.setPipeline(xn),x.setBindGroup(0,this.#xe),x.draw(6,1,0,0),x.end(),this.#M.queue.submit([g.finish()])}#Te(){const i="struct VertexOut { @builtin(position) position:vec4<f32>, @location(0) uv:vec2<f32>,\n};\n@vertex\nfn vertexMain(@builtin(vertex_index) VertexIndex:u32) -> VertexOut { var pos=array<vec2<f32>,6>( vec2(-1.0,-1.0), vec2( 1.0,-1.0), vec2(-1.0,1.0), vec2(-1.0,1.0), vec2( 1.0,-1.0), vec2( 1.0,1.0) ); var uv=array<vec2<f32>,6>( vec2(0.0,1.0), vec2(1.0,1.0), vec2(0.0,0.0), vec2(0.0,0.0), vec2(1.0,1.0), vec2(1.0,0.0) ); var output:VertexOut; output.position=vec4(pos[VertexIndex],0.0,1.0); output.uv=uv[VertexIndex]; return output;\n}\nstruct ComponentMapping { r_component:u32, g_component:u32, b_component:u32, a_component:u32,\n};\n@group(0) @binding(0) var textureR:texture_2d<f32>;\n@group(0) @binding(1) var textureG:texture_2d<f32>;\n@group(0) @binding(2) var textureB:texture_2d<f32>;\n@group(0) @binding(3) var textureA:texture_2d<f32>;\n@group(0) @binding(4) var sampler0:sampler;\n@group(0) @binding(5) var<uniform> mapping:ComponentMapping;\nfn getComponent(color:vec4<f32>,componentIndex:u32) -> f32 { switch componentIndex { case 0u:{ return color.r;} case 1u:{ return color.g;} case 2u:{ return color.b;} case 3u:{ return color.a;} default:{ return 0.0;} }\n}\n@fragment\nfn fragmentMain(input:VertexOut) -> @location(0) vec4<f32> { let colorR=textureSample(textureR,sampler0,input.uv); let colorG=textureSample(textureG,sampler0,input.uv); let colorB=textureSample(textureB,sampler0,input.uv); let colorA=textureSample(textureA,sampler0,input.uv); let r=getComponent(colorR,mapping.r_component); let g=getComponent(colorG,mapping.g_component); let b=getComponent(colorB,mapping.b_component); let a=getComponent(colorA,mapping.a_component); return vec4(r,g,b,a);\n}\n",{resourceManager:m}=this.#l,g=this.#M.createPipelineLayout({label:"PACK_TEXTURE_PIPELINE_LAYOUT",bindGroupLayouts:[_n]});return this.#M.createRenderPipeline({label:"PACK_TEXTURE_PIPELINE",layout:g,vertex:{module:m.createGPUShaderModule("PACK_TEXTURE_SHADER_MODULE",{code:i}),entryPoint:"vertexMain"},fragment:{module:m.createGPUShaderModule("PACK_TEXTURE_SHADER_MODULE",{code:i}),entryPoint:"fragmentMain",targets:[{format:"rgba8unorm"}]},primitive:{topology:"triangle-list"}})}#be(){return new Sampler(this.#l).gpuSampler}}const bn={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DARKEN:6,OVERLAY:7,COLOR_DODGE:8,COLOR_BURN:9,HARD_LIGHT:10,SOFT_LIGHT:11,DIFFERENCE:12,EXCLUSION:13,DIVIDE:14,VIVID_LIGHT:15,LINEAR_BURN:16,PIN_LIGHT:17,SATURATION:18,HUE:19,LUMINOSITY:20,COLOR:21,NEGATION:22},getBindGroupLayoutDescriptorFromShaderInfo=(i,m,g,x=!0)=>{const{textures:_,samplers:b,uniforms:y,storage:T}=i,w=[];for(const i in T){const x=T[i],{binding:_,name:b,group:y,type:P}=x;if(x.access){const i={write:"write-only-storage",read:"read-only-storage",read_write:"read-write-storage"}[x.access];m===y&&w.push({binding:_,visibility:g,buffer:{type:i}})}else if(m===y){const{access:i,format:m}=P,x={write:"write-only",read:"read-only",read_write:"read-write"}[i],b=m.name;w.push({binding:_,visibility:g,storageTexture:{access:x,format:b}})}}for(const i in _){const b=_[i],{binding:y,name:T,group:P,type:z}=b,{name:H}=z;m===P&&w.push({binding:y,visibility:g,texture:"texture_depth_2d"===H||"texture_depth_multisampled_2d"===H?{viewDimension:"2d",sampleType:"depth",multisampled:x}:"texture_cube"===H?{viewDimension:"cube"}:"texture_2d_array"===H?{viewDimension:"2d-array",sampleType:"float",multisampled:!1}:{}})}for(const i in b){const x=b[i],{binding:_,name:y,group:T}=x;m===T&&w.push({binding:_,visibility:g,sampler:{type:"filtering"}})}for(const i in y){const x=y[i],{binding:_,name:b,group:T}=x;m===T&&w.push({binding:_,visibility:g,buffer:{type:"uniform"}})}return{entries:w}},getFragmentBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.FRAGMENT),getVertexBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.VERTEX),getComputeBindGroupLayoutDescriptorFromShaderInfo=(i,m,g)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.COMPUTE,g);class ABaseMaterial extends ResourceBase{use2PathRender;gpuRenderInfo;dirtyPipeline=!1;transparent=!1;#Ce;#Re;#Pe=GPUColorWrite.ALL;#Ee;#Be;#Ie;#Le;#De;#Ue;#Ae;#ke;#Oe;#Ge;#Fe;#Ne;#Ve;#ze;#He=bn.MULTIPLY;constructor(i,m,g,x){super(i),this.#Ve=m,this.#De=`FRAGMENT_MODULE_${this.#Ve}`,this.#Ue=`FRAGMENT_BIND_GROUP_DESCRIPTOR_${m}`,this.#Ae=`FRAGMENT_BIND_GROUP_LAYOUT_${m}`,this.#ke=g,this.#Oe=g?.storage,this.#Ge=g?.uniforms.uniforms,this.#Fe=g?.textures,this.#Ne=g?.samplers,this.#ze=i.resourceManager.getGPUBindGroupLayout(this.#Ae)||i.resourceManager.createBindGroupLayout(this.#Ae,getFragmentBindGroupLayoutDescriptorFromShaderInfo(g,x)),this.#Ce=new BlendState(this,en.SRC_ALPHA,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#Re=new BlendState(this,en.SRC_ALPHA,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#Ee=i.resourceManager,this.#Be=this.#Ee.basicSampler.gpuSampler,this.#Ie=this.#Ee.emptyBitmapTextureView,this.#Le=this.#Ee.emptyCubeTextureView}get tintBlendMode(){const i=Object.entries(bn).find(([,i])=>i===this.#He);if(!i)throw new Error(`Invalid tint mode value:${this.#He}`);return i[0]}set tintBlendMode(i){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=this.gpuRenderInfo;let x;if("string"==typeof i){if(!(i in bn))throw new Error(`Invalid tint mode key:${i}`);x=bn[i]}else{if("number"!=typeof i||!Object.values(bn).includes(i))throw new Error(`Invalid tint mode:${i}`);x=i}g.writeOnlyBuffer(m.members.tintBlendMode,x),this.#He=x}get MODULE_NAME(){return this.#Ve}get FRAGMENT_SHADER_MODULE_NAME(){return this.#De}get FRAGMENT_BIND_GROUP_DESCRIPTOR_NAME(){return this.#Ue}get STORAGE_STRUCT(){return this.#Oe}get UNIFORM_STRUCT(){return this.#Ge}get blendColorState(){return this.#Ce}get blendAlphaState(){return this.#Re}get writeMaskState(){return this.#Pe}set writeMaskState(i){this.#Pe=i}initGPURenderInfos(){const{redGPUContext:i}=this,{resourceManager:m}=i,g=m.createGPUShaderModule(this.#De,{code:this.#ke.defaultSource}),x=new ArrayBuffer(Math.max(this.#Ge.arrayBufferByteLength,16)),_=new UniformBuffer(i,x,`UniformBuffer_${this.#Ve}_${this.uuid}`);this.gpuRenderInfo=new FragmentGPURenderInfo(g,this.#ke.shaderSourceVariant,this.#ke.conditionalBlocks,this.#Ge,this.#ze,_,null,null),this._updateBaseProperty(),this._updateFragmentState()}_updateFragmentState(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext;this.#$e();const g=[];for(const i in this.#Fe){const x=this.#Fe[i],{binding:_,name:b,group:y,type:T}=x,{name:w}=T;let P;P="texture_cube"===w?m.getGPUResourceCubeTextureView(this[b]):this[b]instanceof PackedTexture?m.getGPUResourceBitmapTextureView(this[b]):m.getGPUResourceBitmapTextureView(this[b])||this.#Ie,2===y&&g.push({binding:_,resource:P})}for(const i in this.#Ne){const m=this.#Ne[i],{binding:x,name:_,group:b}=m;2===b&&g.push({binding:x,resource:this.getGPUResourceSampler(this[_])})}this.#Ge&&g.push({binding:this.#Ge.binding,resource:{buffer:this.gpuRenderInfo.fragmentUniformBuffer.gpuBuffer,offset:0,size:this.gpuRenderInfo.fragmentUniformBuffer.size}});const x={layout:this.gpuRenderInfo.fragmentBindGroupLayout,label:this.#Ue,entries:g},_=i.createBindGroup(x);this.gpuRenderInfo.fragmentState=this.getFragmentRenderState(),this.gpuRenderInfo.fragmentUniformBindGroup=_}getFragmentRenderState(i="main"){return{module:this.gpuRenderInfo.fragmentShaderModule,entryPoint:i,targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.blendColorState.state,alpha:this.blendAlphaState.state},writeMask:this.writeMaskState},{format:navigator.gpu.getPreferredCanvasFormat(),blend:void 0,writeMask:this.writeMaskState},{format:"rgba16float",blend:void 0,writeMask:this.writeMaskState}]}}_updateBaseProperty(){const{fragmentUniformInfo:i,fragmentUniformBuffer:m}=this.gpuRenderInfo,{members:g}=i;for(const x in g){const g=this[x];g instanceof ColorRGBA?m.writeOnlyBuffer(i.members[x],g.rgbaNormal):g instanceof ColorRGB?m.writeOnlyBuffer(i.members[x],g.rgbNormal):yn.test(x)||(this[x]=g)}}getGPUResourceSampler(i){return i?.gpuSampler||this.#Be}#$e(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,g=this.#We(),x=`${this.#De}_${g}`;let _=m.getGPUShaderModule(x);if(!_){const i=this.gpuRenderInfo.fragmentShaderSourceVariant.getVariant(g);i?_=m.createGPUShaderModule(x,{code:i}):(console.warn("⚠️ 바리안트 소스를 찾을 수 없음:",g),_=this.gpuRenderInfo.fragmentShaderModule)}this.gpuRenderInfo.fragmentShaderModule=_}#We(){const{fragmentShaderVariantConditionalBlocks:i}=this.gpuRenderInfo,m=new Set;for(const g of i)this[g]&&m.add(g);const g=m.size>0?Array.from(m).sort().join("+"):"none";return m.size,g}}const yn=/^use\w+Texture$/;gt.defineByPreset(ABaseMaterial,[gt.PRESET_POSITIVE_NUMBER.OPACITY]),gt.defineBoolean(ABaseMaterial,[["useTint",!1]]),gt.defineColorRGBA(ABaseMaterial,["tint","#ff0000"]),Object.freeze(ABaseMaterial);const Sn=parseWGSL("#redgpu_include drawPicking;\n#redgpu_include calcTintBlendMode;\n#redgpu_include FragmentOutput;\nstruct Uniforms { color:vec3<f32>, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; var finalColor=vec4<f32>( uniforms.color.r,uniforms.color.g,uniforms.color.b,uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf output.color=finalColor; output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n}\n");class ColorMaterial extends ABaseMaterial{constructor(i,m="#fff"){super(i,"COLOR_MATERIAL",Sn,2),this.initGPURenderInfos(),this.color.setColorByHEX(m)}}gt.defineByPreset(ColorMaterial,[gt.PRESET_COLOR_RGB.COLOR]),Object.freeze(ColorMaterial);class ResourceStateVertexBuffer{static dirtyList=[];buffer;label;uuid;#X=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateVertexBuffer.dirtyList.push(this)}}class VertexBuffer extends ABaseBuffer{[sn];#Ke=0;#je=0;#Xe;#qe=0;constructor(i,m,g,x=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE,_=""){super(i,"managedVertexBufferState",x);const{table:b}=this.targetResourceManagedState,y=b.get(_);if(y)return y.buffer;this.#Xe=g,_&&(this.name=_,this[on]=_),this.changeData(m,this.#Xe),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateVertexBuffer(this))}get data(){return this[sn]}get stride(){return this.#je}get interleavedStruct(){return this.#Xe}get vertexCount(){return this.#Ke}get triangleCount(){return this.#qe}changeData(i,m){const{gpuDevice:g}=this;if(Array.isArray(i)&&(i=new Float32Array(i)),this[sn]=i,m&&this.#Ye(m),this[an]){this.targetResourceManagedState.videoMemory-=this[sn].byteLength||0;let i=this[an];requestAnimationFrame(()=>{i.destroy()}),this[an]=null}const x={size:this[sn].byteLength,usage:this.usage,label:this.name};this[an]=g.createBuffer(x),this.targetResourceManagedState.videoMemory+=this[sn].byteLength||0,this.#qe=this[sn].length/this.#je,g.queue.writeBuffer(this[an],0,this[sn])}updateData(i,m=0){i instanceof Array&&(i=new Float32Array(i));const{gpuDevice:g}=this;g.queue.writeBuffer(this[an],m,i)}updateAllData(i){const{gpuDevice:m}=this;m.queue.writeBuffer(this[an],0,this[sn])}#Ye(i){this.#Xe=i,this.#Ke=0,this.#je=0;for(const i in this.#Xe.define){const m=this.#Xe.define[i].attributeStride/Float32Array.BYTES_PER_ELEMENT;this.#Ke+=m,this.#je+=m}this.#Ke=this[sn].length/this.#Ke}}Object.freeze(VertexBuffer);class VertexInterleavedStructElement{attributeName;attributeStride;interleaveType;constructor(i,m,g){this.attributeName=i,this.attributeStride=m,this.interleaveType=g}}class VertexInterleavedStruct{#Ze;#C="";#Je=[];#Qe=0;constructor(i,m=""){this.#C=m,this.#et(i),this.#tt()}get label(){return this.#C}get attributes(){return this.#Je}get arrayStride(){return this.#Qe}get define(){return{...this.#Ze}}#et(i){let m={};for(const g in i){const x=i[g],_=x.stride;m[g]=new VertexInterleavedStructElement(g,_,x),_%4!=0&&consoleAndThrowError(`Invalid attribute stride:${_}`)}this.#Ze=m}#tt(){this.#Qe=0,this.#Je=[];for(const[i,{attributeStride:m,interleaveType:g}]of Object.entries(this.#Ze))this.#Je.push({attributeName:i,shaderLocation:this.#Je.length,offset:this.#Qe,format:g.gpuVertexFormat}),this.#Qe+=m}}class VertexInterleaveType{static get float32(){return{numElements:1,stride:Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32",offset:0}}static get float32x2(){return{numElements:2,stride:2*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x2",offset:0}}static get float32x3(){return{numElements:3,stride:3*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x3",offset:0}}static get float32x4(){return{numElements:4,stride:4*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x4",offset:0}}}Object.freeze(VertexInterleaveType);class DrawDebuggerMesh{#l;#nt;#L;#rt;#it;#at="AABB";#st;#ot;#ut=null;#lt=null;constructor(i,m){this.#l=i,this.#nt=m;const g=this.#ct(i);this.#L=g.vertexBuffer,this.#rt=new ColorMaterial(i),this.#rt.color.setColorByRGB(255,0,0),this.#it=new Mesh(i,g,this.#rt),this.#it.primitiveState.cullMode="none",this.#it.primitiveState.topology=Ke.LINE_LIST;const x=this.#ct(i);this.#st=new ColorMaterial(i),this.#st.color.setColorByRGB(0,255,0),this.#ot=new Mesh(i,x,this.#st),this.#ot.primitiveState.cullMode="none",this.#ot.primitiveState.topology=Ke.LINE_LIST}get debugMode(){return this.#at}set debugMode(i){this.#at=i,"OBB"===i?this.#rt.color.setColorByRGB(255,0,0):"AABB"===i||"COMBINED_AABB"===i?this.#rt.color.setColorByRGB(0,255,0):"BOTH"===i&&(this.#rt.color.setColorByRGB(255,0,0),this.#st.color.setColorByRGB(0,255,0)),this.#ut=null,this.#lt=null}render(i){if(this.#nt.enableDebugger)if("OBB"===this.#at){const m=this.#nt.boundingOBB;this.#ht(m)&&(this.#ft(m,this.#L),this.#dt(m)),this.#it.setPosition(0,0,0),this.#it.setRotation(0,0,0),this.#it.setScale(1,1,1),this.#it.render(i)}else if("AABB"===this.#at||"COMBINED_AABB"===this.#at){const m="COMBINED_AABB"===this.#at?this.#nt.combinedBoundingAABB:this.#nt.boundingAABB;this.#mt(m)&&(this.#pt(m,this.#L),this.#gt(m)),this.#it.setPosition(0,0,0),this.#it.setRotation(0,0,0),this.#it.setScale(1,1,1),this.#it.render(i)}else if("BOTH"===this.#at){const m=this.#nt.boundingOBB,g=this.#nt.boundingAABB;this.#ht(m)&&(this.#ft(m,this.#L),this.#dt(m)),this.#it.setPosition(0,0,0),this.#it.setRotation(0,0,0),this.#it.setScale(1,1,1),this.#it.render(i),this.#mt(g)&&(this.#pt(g,this.#ot.geometry.vertexBuffer),this.#gt(g)),this.#ot.setPosition(0,0,0),this.#ot.setRotation(0,0,0),this.#ot.setScale(1,1,1),this.#ot.render(i)}}#ct(i){const m=new Float32Array(192),g=new VertexInterleavedStruct({vertexPosition:VertexInterleaveType.float32x3,vertexNormal:VertexInterleaveType.float32x3,texcoord:VertexInterleaveType.float32x2},`wireframeBoxStruct_${Math.random()}`),x=new VertexBuffer(i,m,g);return new Geometry(i,x)}#ht(i){if(!this.#ut)return!0;const m=this.#ut;return m.center[0]!==i.center[0]||m.center[1]!==i.center[1]||m.center[2]!==i.center[2]||m.halfExtents[0]!==i.halfExtents[0]||m.halfExtents[1]!==i.halfExtents[1]||m.halfExtents[2]!==i.halfExtents[2]||!this.#xt(m.orientation,i.orientation)}#mt(i){if(!this.#lt)return!0;const m=this.#lt;return m.minX!==i.minX||m.maxX!==i.maxX||m.minY!==i.minY||m.maxY!==i.maxY||m.minZ!==i.minZ||m.maxZ!==i.maxZ}#xt(i,m){if(i.length!==m.length)return!1;for(let g=0;g<i.length;g++)if(Math.abs(i[g]-m[g])>1e-4)return!1;return!0}#dt(i){this.#ut=new OBB(i.center,i.halfExtents,i.orientation)}#gt(i){this.#lt=i.clone()}#ft(i,m){const{center:g,halfExtents:x,orientation:_}=i,b=[[-1,-1,-1],[1,-1,-1],[1,1,-1],[-1,1,-1],[-1,-1,1],[1,-1,1],[1,1,1],[-1,1,1]].map(i=>{const m=[i[0]*x[0],i[1]*x[1],i[2]*x[2]],b=[_[0]*m[0]+_[4]*m[1]+_[8]*m[2],_[1]*m[0]+_[5]*m[1]+_[9]*m[2],_[2]*m[0]+_[6]*m[1]+_[10]*m[2]];return[b[0]+g[0],b[1]+g[1],b[2]+g[2]]});this.#A(b,m)}#pt(i,m){const{minX:g,maxX:x,minY:_,maxY:b,minZ:y,maxZ:T}=i,w=[[g,_,y],[x,_,y],[x,b,y],[g,b,y],[g,_,T],[x,_,T],[x,b,T],[g,b,T]];this.#A(w,m)}#A(i,m){const g=m.data;let x=0;[[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]].forEach(([m,_])=>{g[x++]=i[m][0],g[x++]=i[m][1],g[x++]=i[m][2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0,g[x++]=i[_][0],g[x++]=i[_][1],g[x++]=i[_][2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0}),m.updateAllData(g)}}Object.freeze(DrawDebuggerMesh);const Tn={MESH:"mesh",PARTICLE:"particle",INSTANCED_MESH:"instancedMesh"};Object.freeze(Tn);const createMeshVertexUniformBuffers=(i,m=!1)=>{const{gpuRenderInfo:g,redGPUContext:x}=i,{resourceManager:_}=x,b=_.getGPUBindGroupLayout(m?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout),y=new ArrayBuffer(g.vertexUniformInfo.arrayBufferByteLength),T=new UniformBuffer(x,y,i.name);g.vertexBindGroupLayout=b,g.vertexUniformBuffer=T},wn={NEVER:"never",LESS:"less",EQUAL:"equal",LESS_EQUAL:"less-equal",GREATER:"greater",NOT_EQUAL:"not-equal",GREATER_EQUAL:"greater-equal",ALWAYS:"always"};Object.freeze(wn);const Mn=Object.values(wn);class DepthStencilState{#_t;#vt="depth32float";#bt=["r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm-srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm-srgb","rgb9e5ufloat","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth24plus-stencil8","depth32float","depth32float-stencil8","bc1-rgba-unorm","bc1-rgba-unorm-srgb","bc2-rgba-unorm","bc2-rgba-unorm-srgb","bc3-rgba-unorm","bc3-rgba-unorm-srgb","bc4-r-unorm","bc4-r-snorm","bc5-rg-unorm","bc5-rg-snorm","bc6h-rgb-ufloat","bc6h-rgb-float","bc7-rgba-unorm","bc7-rgba-unorm-srgb","etc2-rgb8unorm","etc2-rgb8unorm-srgb","etc2-rgb8a1unorm","etc2-rgb8a1unorm-srgb","etc2-rgba8unorm","etc2-rgba8unorm-srgb","eac-r11unorm","eac-r11snorm","eac-rg11unorm","eac-rg11snorm","astc-4x4-unorm","astc-4x4-unorm-srgb","astc-5x4-unorm","astc-5x4-unorm-srgb","astc-5x5-unorm","astc-5x5-unorm-srgb","astc-6x5-unorm","astc-6x5-unorm-srgb","astc-6x6-unorm","astc-6x6-unorm-srgb","astc-8x5-unorm","astc-8x5-unorm-srgb","astc-8x6-unorm","astc-8x6-unorm-srgb","astc-8x8-unorm","astc-8x8-unorm-srgb","astc-10x5-unorm","astc-10x5-unorm-srgb","astc-10x6-unorm","astc-10x6-unorm-srgb","astc-10x8-unorm","astc-10x8-unorm-srgb","astc-10x10-unorm","astc-10x10-unorm-srgb","astc-12x10-unorm","astc-12x10-unorm-srgb","astc-12x12-unorm","astc-12x12-unorm-srgb"];#yt=!0;#St=wn.LESS_EQUAL;#Tt;#wt;#Mt;#Ct;#Rt=1;#Pt=1;#Et=1;constructor(i){this.#_t=i}get format(){return this.#vt}set format(i){this.#bt.includes(i)?(this.#vt=i,this.#_t.dirtyPipeline=!0):consoleAndThrowError(`Invalid value for format. Received ${i}. Expected one of:${this.#bt.join(",")}`)}get depthWriteEnabled(){return this.#yt}set depthWriteEnabled(i){this.#yt=i,this.#_t.dirtyPipeline=!0}get depthCompare(){return this.#St}set depthCompare(i){Mn.includes(i)?(this.#St=i,this.#_t.dirtyPipeline=!0):consoleAndThrowError(`Invalid value for depthCompare. Received ${i}. Expected one of:${Mn.join(",")}`)}get stencilFront(){return this.#Tt}set stencilFront(i){this.#Tt=i,this.#_t.dirtyPipeline=!0}get stencilBack(){return this.#wt}set stencilBack(i){this.#wt=i,this.#_t.dirtyPipeline=!0}get stencilReadMask(){return this.#Mt}set stencilReadMask(i){this.#Mt=i,this.#_t.dirtyPipeline=!0}get stencilWriteMask(){return this.#Ct}set stencilWriteMask(i){this.#Ct=i,this.#_t.dirtyPipeline=!0}get depthBias(){return this.#Rt}set depthBias(i){this.#Rt=i,this.#_t.dirtyPipeline=!0}get depthBiasSlopeScale(){return this.#Pt}set depthBiasSlopeScale(i){this.#Pt=i,this.#_t.dirtyPipeline=!0}get depthBiasClamp(){return this.#Et}set depthBiasClamp(i){this.#Et=i,this.#_t.dirtyPipeline=!0}get state(){let i=!1;if(this.#_t?.primitiveState){const{topology:m}=this.#_t.primitiveState;i=m===Ke.TRIANGLE_LIST||m===Ke.TRIANGLE_STRIP}return{format:this.#vt,depthWriteEnabled:this.#yt,depthCompare:this.#St,stencilFront:this.#Tt,stencilBack:this.#wt,stencilReadMask:this.#Mt,stencilWriteMask:this.#Ct,depthBias:i?this.#Rt:null,depthBiasSlopeScale:i?this.#Pt:null,depthBiasClamp:i?this.#Et:null}}}const Cn={NONE:"none",FRONT:"front",BACK:"back"};Object.freeze(Cn);const Rn={CW:"cw",CCW:"ccw"};Object.freeze(Rn);const Pn={UINT16:"uint16",UINT32:"uint32"};Object.freeze(Pn);const En=Object.values(Pn),Bn=Object.values(Rn),In=Object.values(Cn),Ln=["point-list","line-list","line-strip","triangle-list","triangle-strip"];class PrimitiveState{dirtyPipeline=!1;state;#_t;#Bt=Ke.TRIANGLE_LIST;#It;#Lt=Rn.CCW;#Dt=Cn.BACK;#Ut=!1;constructor(i){this.#_t=i,this.#j()}get topology(){return this.#Bt}set topology(i){Ln.includes(i)?(this.#Bt=i,this.#j()):consoleAndThrowError(`Invalid value for topology. Received ${i}. Expected one of:${Ln.join(",")}`)}get stripIndexFormat(){return this.#It}set stripIndexFormat(i){En.includes(i)?(this.#It=i,this.#j()):consoleAndThrowError(`Invalid value for stripIndexFormat. Received ${i}. Expected one of:${En.join(",")}`)}get frontFace(){return this.#Lt}set frontFace(i){Bn.includes(i)?(this.#Lt=i,this.#j()):consoleAndThrowError(`Invalid value for frontFace. Received ${i}. Expected one of:${Bn.join(",")}`)}get cullMode(){return this.#Dt}set cullMode(i){In.includes(i)?(this.#Dt=i,this.#j()):consoleAndThrowError(`Invalid value for cullMode. Received ${i}. Expected one of:${In.join(",")}`)}get unclippedDepth(){return this.#Ut}set unclippedDepth(i){"boolean"==typeof i?(this.#Ut=i,this.#j()):consoleAndThrowError(`Invalid type for unclippedDepth. Received ${typeof i}. Expected type:boolean.`)}#j(){this.state={topology:this.#Bt,stripIndexFormat:this.#It,frontFace:this.#Lt,cullMode:this.#Dt,unclippedDepth:this.#Ut},this.#_t.dirtyPipeline=!0}}const Dn=create$2(),Un={x:0,y:0,z:0,w:0},getScreenPoint=(i,m)=>{"View3D"!==i?.constructor?.name&&consoleAndThrowError("allow only View3D instance"),identity(Dn);const{noneJitterProjectionMatrix:g,rawCamera:x,pixelRectArray:_}=i;return multiply(Dn,g,x.modelMatrix),multiply(Dn,Dn,m),Un.z=Dn[14],Un.w=Dn[15],Un.x=.5*Dn[12]/Un.w+.5,Un.y=.5*Dn[13]/Un.w+.5,[(_[0]+Un.x*_[2])/window.devicePixelRatio,(_[1]+(1-Un.y)*_[3])/window.devicePixelRatio]},validateNumber=i=>"number"==typeof i||(consoleAndThrowError("Only numbers allowed."),!1),An=create$2(),localToWorld=(i,m,g,x)=>(validateNumber(m),validateNumber(g),validateNumber(x),identity(An),translate(An,An,[m,g,x]),multiply(An,i,An),[An[12],An[13],An[14]]),kn=create$2(),On=create$1(),worldToLocal=(i,m,g,x)=>(validateNumber(m),validateNumber(g),validateNumber(x),invert(kn,i),set(On,m,g,x),transformMat4(On,On,kn),[On[0],On[1],On[2]]);class Object3DContainer{modelMatrix=create$2();#At=[];constructor(){}get children(){return this.#At}get numChildren(){return this.#At.length}contains(i){return this.#kt(i),this.#At.includes(i)}addChild(i){return this.#kt(i),this.#Ot(i)?(this.#At.push(i),i.dirtyTransform=!0,i):null}addChildAt(i,m){if(validateUintRange(m),this.#At.length<m&&(m=this.#At.length),!(m<0||m>this.#At.length)&&this.#Ot(i))return this.#At.splice(m,0,i),i.dirtyTransform=!0,this}getChildAt(i){if(validateUintRange(i),!(i>=this.#At.length||i<0))return this.#At[i]}getChildIndex(i){this.#kt(i);const m=this.#At.indexOf(i);return-1===m?-1:m}setChildIndex(i,m){this.#kt(i),validateUintRange(m);const g=this.#At.length,x=m>=g,_=this.#At.indexOf(i);-1!==_?x?consoleAndThrowError(`Invalid index. Index ${m} is out of bounds. Index should be between 0 and ${g-1}.`):(this.#At.splice(_,1),this.#At.splice(m,0,i)):consoleAndThrowError(`The provided is not a child of the Object3DContainer.:${i}`)}swapChildren(i,m){if(this.#kt(i),this.#kt(m),i===m)return void consoleAndThrowError("Error:child1 and child2 are the same. Cannot swap a child with itself.");const g=this.#At.indexOf(i),x=this.#At.indexOf(m);-1!==g&&-1!==x||consoleAndThrowError(`Error:${-1===g?"child1":"child2"} is not a child of this Object3DContainer.`),this.swapChildrenAt(g,x)}swapChildrenAt(i,m){validateUintRange(i),validateUintRange(m),i===m&&consoleAndThrowError("Error:index1 and index2 are identical. Cannot swap a child with itself.");const g=this.#At.length;(i>=g||m>=g)&&consoleAndThrowError(`Error:Both index1 and index2 should be less than the number of children. Provided index1:${i},index2:${m},number of children:${g}`);let x=this.#At[i];this.#At[i]=this.#At[m],this.#At[m]=x}removeChild(i){this.#kt(i);const m=this.#At.indexOf(i);if(m>-1)return i.parent=null,this.#At.splice(m,1)[0];consoleAndThrowError("Error:Child not found within parent.")}removeChildAt(i){validateUintRange(i);const m=this.#At[i];if(m)return m.parent=null,this.#At.splice(i,1)[0];throw new Error(`Error:No child found at provided index:${i}.`)}removeAllChildren(){let i=this.#At.length;for(;i--;)this.#At[i].parent=null;return this.#At.length=0,this}#kt(i){i instanceof Object3DContainer||consoleAndThrowError("allow only Object3DContainer instance.")}#Ot=i=>(this.#kt(i),i.parent?!!i.parent?.removeChild(i)&&(i.parent=this,!0):(i.parent=this,!0))}class MeshBase extends Object3DContainer{gpuRenderInfo;animationInfo={skinInfo:null,morphInfo:null,weightBuffer:null,jointBuffer:null,animationsList:null};gltfLoaderInfo;dirtyPipeline=!0;dirtyTransform=!0;dirtyOpacity=!0;modelMatrix=create$2();localMatrix=create$2();normalModelMatrix=create$2();#l;#M;#Gt;#Ft;#Nt;#E=[];#w=createUUID();constructor(i){super(),validateRedGPUContext(i),this.#l=i,this.#M=i.gpuDevice,this.#Gt=new PrimitiveState(this),this.#Ft=new DepthStencilState(this)}get uuid(){return this.#w}get currentShaderModuleName(){return this.#Nt}set currentShaderModuleName(i){this.#Nt=i}get primitiveState(){return this.#Gt}get depthStencilState(){return this.#Ft}get gpuDevice(){return this.#M}get redGPUContext(){return this.#l}worldToLocal(i,m,g){return worldToLocal(this.modelMatrix,i,m,g)}localToWorld(i,m,g){return localToWorld(this.modelMatrix,i,m,g)}getScreenPoint(i){return getScreenPoint(i,this.modelMatrix)}__fireListenerList(i=!1){for(const i of this.#E)i(this);i&&(this.#E.length=0)}}class ABitmapBaseMaterial extends ABaseMaterial{__packingList;constructor(i,m,g,x){super(i,m,g,x)}updateTexture(i,m){i&&i.__removeDirtyPipelineListener(this.#Vt),m&&m.__addDirtyPipelineListener(this.#Vt),this.#Vt()}updateSampler(i,m){i&&i.__removeDirtyPipelineListener(this.#Vt),m&&m.__addDirtyPipelineListener(this.#Vt),this.#Vt()}#Vt=()=>{this.dirtyPipeline=!0;{let i=(this.__packingList||[]).length;for(;i--;)this.__packingList[i]()}this.gpuRenderInfo?.fragmentShaderModule?this._updateFragmentState():this.initGPURenderInfos()}}Object.freeze(ABitmapBaseMaterial);const Gn=[{textureList:["baseColorTexture"],vec4List:[["baseColorFactor",[1,1,1,1]]]},{textureList:["normalTexture"]},{textureList:["metallicRoughnessTexture"],positiveNumberList:["metallicFactor","roughnessFactor"]},{textureList:["emissiveTexture"],vec3List:["emissiveFactor"]},{textureList:["occlusionTexture"],positiveNumberList:["occlusionStrength"]},{extensionName:"KHR_materials_clearcoat",textureList:["KHR_clearcoatTexture","KHR_clearcoatNormalTexture","KHR_clearcoatRoughnessTexture"],positiveNumberList:[["KHR_clearcoatFactor",0],["KHR_clearcoatRoughnessFactor",0],"KHR_clearcoatNormalScale"]},{extensionName:"KHR_materials_sheen",textureList:["KHR_sheenColorTexture","KHR_sheenRoughnessTexture"],positiveNumberList:[["KHR_sheenRoughnessFactor",0]],vec3List:[["KHR_sheenColorFactor",[0,0,0]]]},{extensionName:"KHR_materials_specular",textureList:["KHR_specularTexture","KHR_specularColorTexture"],positiveNumberList:["KHR_specularFactor"],vec3List:[["KHR_specularColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_transmission",textureList:["KHR_transmissionTexture"],positiveNumberList:[["KHR_transmissionFactor",0]]},{extensionName:"KHR_materials_volume",textureList:["KHR_thicknessTexture"],positiveNumberList:[["KHR_thicknessFactor",0],["KHR_attenuationDistance",1]],vec3List:[["KHR_attenuationColor",[1,1,1]]]},{extensionName:"KHR_materials_diffuse_transmission",textureList:["KHR_diffuseTransmissionTexture","KHR_diffuseTransmissionColorTexture"],positiveNumberList:[["KHR_diffuseTransmissionFactor",0]],vec3List:[["KHR_diffuseTransmissionColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_anisotropy",textureList:["KHR_anisotropyTexture"],positiveNumberList:[["KHR_anisotropyStrength",0],["KHR_anisotropyRotation",0]]},{extensionName:"KHR_materials_iridescence",textureList:["KHR_iridescenceTexture","KHR_iridescenceThicknessTexture"],positiveNumberList:[["KHR_iridescenceFactor",0],["KHR_iridescenceIor",1.3],["KHR_iridescenceThicknessMinimum",100],["KHR_iridescenceThicknessMaximum",400]]}],Fn=parseWGSL((i=>{const m=Gn.map(i=>{const{textureList:m,positiveNumberList:g}=i,x=m?.map(i=>` use${i.charAt(0).toUpperCase()}${i.substring(1)}:u32, ${i}_texCoord_index:u32, use_${i}_KHR_texture_transform:u32, ${i}_KHR_texture_transform_offset:vec2<f32>, ${i}_KHR_texture_transform_scale:vec2<f32>, ${i}_KHR_texture_transform_rotation:f32,`).join("");return[x].join("\n")}).join("");return i.replace(/#redgpu_include KHR_texture_transform/g,m)})("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include calcTintBlendMode;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\n#redgpu_include calcPrePathBackground\n#redgpu_include FragmentOutput\nstruct Uniforms { useVertexColor:u32, useCutOff:u32, cutOff:f32, alphaBlend:u32, doubleSided:u32, useVertexTangent:u32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32, baseColorFactor:vec4<f32>, emissiveFactor:vec3<f32>, emissiveStrength:f32, occlusionStrength:f32, metallicFactor:f32, roughnessFactor:f32, normalScale:f32, useKHR_materials_unlit:u32, KHR_materials_ior:f32, useKHR_materials_transmission:u32, KHR_transmissionFactor:f32, useKHR_materials_diffuse_transmission:u32, KHR_diffuseTransmissionFactor:f32, KHR_diffuseTransmissionColorFactor:vec3<f32>, KHR_dispersion:f32, useKHR_materials_volume:u32, KHR_thicknessFactor:f32, KHR_attenuationDistance:f32, KHR_attenuationColor:vec3<f32>, useKHR_materials_specular:u32, KHR_specularFactor:f32, KHR_specularColorFactor:vec3<f32>, useKHR_materials_anisotropy:u32, KHR_anisotropyStrength:f32, KHR_anisotropyRotation:f32, useKHR_materials_iridescence:u32, KHR_iridescenceFactor:f32, KHR_iridescenceIor:f32, KHR_iridescenceThicknessMinimum:f32, KHR_iridescenceThicknessMaximum:f32, useKHR_materials_sheen:u32, KHR_sheenColorFactor:vec3<f32>, KHR_sheenRoughnessFactor:f32, useKHR_materials_clearcoat:u32, KHR_clearcoatFactor:f32, KHR_clearcoatRoughnessFactor:f32, KHR_clearcoatNormalScale:f32, #redgpu_include KHR_texture_transform\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var baseColorTextureSampler:sampler;\n@group(2) @binding(2) var baseColorTexture:texture_2d<f32>;\n@group(2) @binding(3) var emissiveTextureSampler:sampler;\n@group(2) @binding(4) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(5) var normalTextureSampler:sampler;\n@group(2) @binding(6) var normalTexture:texture_2d<f32>;\n@group(2) @binding(7) var packedORMTexture:texture_2d<f32>;\n@group(2) @binding(8) var KHR_specularTextureSampler:sampler;\n@group(2) @binding(9) var KHR_specularTexture:texture_2d<f32>;\n@group(2) @binding(10) var KHR_specularColorTextureSampler:sampler;\n@group(2) @binding(11) var KHR_specularColorTexture:texture_2d<f32>;\n@group(2) @binding(12) var KHR_clearcoatNormalTexture:texture_2d<f32>;\n@group(2) @binding(13) var packedKHR_clearcoatTexture_transmission:texture_2d<f32>;\n@group(2) @binding(14) var packedKHR_diffuse_transmission:texture_2d<f32>;\n@group(2) @binding(15) var packedKHR_sheen:texture_2d<f32>;\n@group(2) @binding(16) var KHR_anisotropyTexture:texture_2d<f32>;\n@group(2) @binding(17) var packedKHR_iridescence:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32, @location(12) motionVector:vec3<f32>,\n}\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; let input_vertexNormal=(inputData.vertexNormal.xyz); let input_vertexPosition=inputData.vertexPosition.xyz; let input_vertexColor_0=inputData.vertexColor_0; let input_vertexTangent=inputData.vertexTangent; let input_ndcPosition=inputData.ndcPosition; let input_uv=inputData.uv; let input_uv1=inputData.uv1; let u_ambientLight=systemUniforms.ambientLight; let u_ambientLightColor=u_ambientLight.color; let u_ambientLightIntensity=u_ambientLight.intensity; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize; let u_bias=systemUniforms.bias; let u_useIblTexture=systemUniforms.useIblTexture==1u; let receiveShadowYn=inputData.receiveShadow !=.0; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_opacity=uniforms.opacity; let u_cutOff=uniforms.cutOff; let u_useVertexColor=uniforms.useVertexColor==1u; let u_useVertexTangent=uniforms.useVertexTangent==1u; let u_baseColorFactor=uniforms.baseColorFactor; let u_metallicFactor=uniforms.metallicFactor; let u_roughnessFactor=uniforms.roughnessFactor; let u_normalScale=uniforms.normalScale; let u_occlusionStrength=uniforms.occlusionStrength; let u_emissiveFactor=uniforms.emissiveFactor; let u_emissiveStrength=uniforms.emissiveStrength; let u_useKHR_materials_unlit=uniforms.useKHR_materials_unlit==1u; let u_KHR_materials_ior=uniforms.KHR_materials_ior; let u_KHR_dispersion=uniforms.KHR_dispersion; let u_KHR_transmissionFactor=uniforms.KHR_transmissionFactor; var u_useKHR_materials_volume=uniforms.useKHR_materials_volume==1u; var u_KHR_thicknessFactor=uniforms.KHR_thicknessFactor; var u_KHR_attenuationColor=uniforms.KHR_attenuationColor; var u_KHR_attenuationDistance=uniforms.KHR_attenuationDistance; let u_useKHR_materials_diffuse_transmission=uniforms.useKHR_materials_diffuse_transmission==1u; let u_KHR_diffuseTransmissionFactor=uniforms.KHR_diffuseTransmissionFactor; let u_KHR_diffuseTransmissionColorFactor=uniforms.KHR_diffuseTransmissionColorFactor; let u_KHR_specularFactor=uniforms.KHR_specularFactor; let u_KHR_specularColorFactor=uniforms.KHR_specularColorFactor; let u_KHR_anisotropyStrength=uniforms.KHR_anisotropyStrength; let u_KHR_anisotropyRotation=uniforms.KHR_anisotropyRotation; let u_useKHR_anisotropyTexture=uniforms.useKHR_anisotropyTexture==1u; let u_KHR_sheenColorFactor=uniforms.KHR_sheenColorFactor; let u_KHR_sheenRoughnessFactor=uniforms.KHR_sheenRoughnessFactor; let u_useKHR_materials_iridescence=uniforms.useKHR_materials_iridescence==1u; let u_KHR_iridescenceFactor=uniforms.KHR_iridescenceFactor; let u_KHR_iridescenceIor=uniforms.KHR_iridescenceIor; let u_KHR_iridescenceThicknessMinimum=uniforms.KHR_iridescenceThicknessMinimum; let u_KHR_iridescenceThicknessMaximum=uniforms.KHR_iridescenceThicknessMaximum; let u_KHR_clearcoatFactor=uniforms.KHR_clearcoatFactor; let u_KHR_clearcoatRoughnessFactor=uniforms.KHR_clearcoatRoughnessFactor; let u_KHR_clearcoatNormalScale=uniforms.KHR_clearcoatNormalScale; let diffuseUV=get_transformed_uv( input_uv,input_uv1, uniforms.baseColorTexture_texCoord_index, uniforms.use_baseColorTexture_KHR_texture_transform, uniforms.baseColorTexture_KHR_texture_transform_offset, uniforms.baseColorTexture_KHR_texture_transform_rotation, uniforms.baseColorTexture_KHR_texture_transform_scale ); let emissiveUV=get_transformed_uv( input_uv,input_uv1, uniforms.emissiveTexture_texCoord_index, uniforms.use_emissiveTexture_KHR_texture_transform, uniforms.emissiveTexture_KHR_texture_transform_offset, uniforms.emissiveTexture_KHR_texture_transform_rotation, uniforms.emissiveTexture_KHR_texture_transform_scale ); let occlusionUV=get_transformed_uv( input_uv,input_uv1, uniforms.occlusionTexture_texCoord_index, uniforms.use_occlusionTexture_KHR_texture_transform, uniforms.occlusionTexture_KHR_texture_transform_offset, uniforms.occlusionTexture_KHR_texture_transform_rotation, uniforms.occlusionTexture_KHR_texture_transform_scale ); let metallicRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.metallicRoughnessTexture_texCoord_index, uniforms.use_metallicRoughnessTexture_KHR_texture_transform, uniforms.metallicRoughnessTexture_KHR_texture_transform_offset, uniforms.metallicRoughnessTexture_KHR_texture_transform_rotation, uniforms.metallicRoughnessTexture_KHR_texture_transform_scale ); let normalUV=get_transformed_uv( input_uv,input_uv1, uniforms.normalTexture_texCoord_index, uniforms.use_normalTexture_KHR_texture_transform, uniforms.normalTexture_KHR_texture_transform_offset, uniforms.normalTexture_KHR_texture_transform_rotation, uniforms.normalTexture_KHR_texture_transform_scale ); let KHR_clearcoatUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatTexture_texCoord_index, uniforms.use_KHR_clearcoatTexture_KHR_texture_transform, uniforms.KHR_clearcoatTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatTexture_KHR_texture_transform_scale ); let KHR_clearcoatNormalUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatNormalTexture_texCoord_index, uniforms.use_KHR_clearcoatNormalTexture_KHR_texture_transform, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_scale ); let KHR_clearcoatRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatRoughnessTexture_texCoord_index, uniforms.use_KHR_clearcoatRoughnessTexture_KHR_texture_transform, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_scale ); let KHR_sheenColorUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_sheenColorTexture_texCoord_index, uniforms.use_KHR_sheenColorTexture_KHR_texture_transform, uniforms.KHR_sheenColorTexture_KHR_texture_transform_offset, uniforms.KHR_sheenColorTexture_KHR_texture_transform_rotation, uniforms.KHR_sheenColorTexture_KHR_texture_transform_scale ); let KHR_sheenRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_sheenRoughnessTexture_texCoord_index, uniforms.use_KHR_sheenRoughnessTexture_KHR_texture_transform, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_offset, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_rotation, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_scale ); let KHR_specularTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_specularTexture_texCoord_index, uniforms.use_KHR_specularTexture_KHR_texture_transform, uniforms.KHR_specularTexture_KHR_texture_transform_offset, uniforms.KHR_specularTexture_KHR_texture_transform_rotation, uniforms.KHR_specularTexture_KHR_texture_transform_scale ); let KHR_specularColorTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_specularColorTexture_texCoord_index, uniforms.use_KHR_specularColorTexture_KHR_texture_transform, uniforms.KHR_specularColorTexture_KHR_texture_transform_offset, uniforms.KHR_specularColorTexture_KHR_texture_transform_rotation, uniforms.KHR_specularColorTexture_KHR_texture_transform_scale ); let KHR_iridescenceTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_iridescenceTexture_texCoord_index, uniforms.use_KHR_iridescenceTexture_KHR_texture_transform, uniforms.KHR_iridescenceTexture_KHR_texture_transform_offset, uniforms.KHR_iridescenceTexture_KHR_texture_transform_rotation, uniforms.KHR_iridescenceTexture_KHR_texture_transform_scale ); let KHR_iridescenceThicknessTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_iridescenceThicknessTexture_texCoord_index, uniforms.use_KHR_iridescenceThicknessTexture_KHR_texture_transform, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_offset, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_rotation, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_scale ); let KHR_transmissionUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_transmissionTexture_texCoord_index, uniforms.use_KHR_transmissionTexture_KHR_texture_transform, uniforms.KHR_transmissionTexture_KHR_texture_transform_offset, uniforms.KHR_transmissionTexture_KHR_texture_transform_rotation, uniforms.KHR_transmissionTexture_KHR_texture_transform_scale ); let KHR_diffuseTransmissionUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_diffuseTransmissionTexture_texCoord_index, uniforms.use_KHR_diffuseTransmissionTexture_KHR_texture_transform, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_offset, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_rotation, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_scale ); let KHR_diffuseTransmissionColorUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_diffuseTransmissionColorTexture_texCoord_index, uniforms.use_KHR_diffuseTransmissionColorTexture_KHR_texture_transform, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_offset, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_rotation, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_scale ); let KHR_anisotropyUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_anisotropyTexture_texCoord_index, uniforms.use_KHR_anisotropyTexture_KHR_texture_transform, uniforms.KHR_anisotropyTexture_KHR_texture_transform_offset, uniforms.KHR_anisotropyTexture_KHR_texture_transform_rotation, uniforms.KHR_anisotropyTexture_KHR_texture_transform_scale ); var N:vec3<f32>=normalize(input_vertexNormal.xyz); var backFaceYn:bool=false; #redgpu_if doubleSided { var fdx:vec3<f32>=dpdx(input_vertexPosition); var fdy:vec3<f32>=dpdy(input_vertexPosition); var faceNormal:vec3<f32>=normalize(cross(fdy,fdx)); if (dot(N,faceNormal) < 0.0) { N=-N; backFaceYn=true; }; } #redgpu_endIf #redgpu_if normalTexture { var targetUv=select(normalUV,1.0 - normalUV,backFaceYn); let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,normalUV).rgb; N=perturb_normal( N, input_vertexPosition, targetUv, vec3<f32>(normalSamplerColor.r,1.0 - normalSamplerColor.g,normalSamplerColor.b), u_normalScale ); N=select(N,select(N,-N,backFaceYn),u_useVertexTangent); } #redgpu_else { N=N * u_normalScale; } #redgpu_endIf let V:vec3<f32>=normalize(u_cameraPosition - input_vertexPosition); let NdotV=max(dot(N,V),0.04); let VdotN=max(dot(V,N),0.0); var visibility:f32=1.0; visibility=calcDirectionalShadowVisibility( directionalShadowMap, directionalShadowMapSampler, u_shadowDepthTextureSize, u_bias, inputData.shadowPos ); if(!receiveShadowYn){ visibility=1.0; } var finalColor:vec4<f32>; var ior:f32=u_KHR_materials_ior; var baseColor=u_baseColorFactor; var resultAlpha:f32=u_opacity * baseColor.a; baseColor *=select(vec4<f32>(1.0),input_vertexColor_0,u_useVertexColor); #redgpu_if baseColorTexture let diffuseSampleColor=(textureSample(baseColorTexture,baseColorTextureSampler,diffuseUV)); baseColor *=diffuseSampleColor; resultAlpha *=diffuseSampleColor.a; #redgpu_endIf let albedo:vec3<f32>=baseColor.rgb; #redgpu_if useKHR_materials_unlit if(u_useKHR_materials_unlit){ output.color=baseColor; return output; } #redgpu_endIf var occlusionParameter:f32=1; #redgpu_if useOcclusionTexture occlusionParameter=textureSample(packedORMTexture,packedTextureSampler,occlusionUV).r * u_occlusionStrength; #redgpu_endIf var metallicParameter:f32=u_metallicFactor; var roughnessParameter:f32=u_roughnessFactor; #redgpu_if useMetallicRoughnessTexture let metallicRoughnessSample=(textureSample(packedORMTexture,packedTextureSampler,metallicRoughnessUV)); metallicParameter=metallicRoughnessSample.b * metallicParameter; roughnessParameter=metallicRoughnessSample.g * roughnessParameter; #redgpu_endIf roughnessParameter=max(roughnessParameter,0.045); if (abs(ior - 1.0) < 0.0001) { roughnessParameter=0;} var clearcoatParameter=u_KHR_clearcoatFactor; var clearcoatRoughnessParameter=u_KHR_clearcoatRoughnessFactor; var clearcoatNormal:vec3<f32>=N; if(clearcoatParameter !=0.0){ #redgpu_if useKHR_clearcoatTexture let clearcoatSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatUV); clearcoatParameter *=clearcoatSample.r; #redgpu_endIf #redgpu_if useKHR_clearcoatRoughnessTexture let clearcoatRoughnesstSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatRoughnessUV); clearcoatRoughnessParameter *=clearcoatRoughnesstSample.g; #redgpu_endIf var clearcoatNormalSampler=textureSample(KHR_clearcoatNormalTexture,baseColorTextureSampler,KHR_clearcoatNormalUV); #redgpu_if useKHR_clearcoatNormalTexture { var targetUv=KHR_clearcoatNormalUV; if(backFaceYn){ targetUv=1.0 - targetUv; } clearcoatNormal=clearcoatNormalSampler.rgb; clearcoatNormal=perturb_normal( N, input_vertexPosition, targetUv, clearcoatNormal, u_normalScale ); if(u_useVertexTangent){ if(backFaceYn ){ clearcoatNormal=-clearcoatNormal;} } clearcoatNormal=normalize(clearcoatNormal); } #redgpu_endIf } var specularParameter=u_KHR_specularFactor; var specularColor=u_KHR_specularColorFactor; #redgpu_if KHR_specularColorTexture let specularColorTextureSample=textureSample( KHR_specularColorTexture, KHR_specularColorTextureSampler, KHR_specularColorTextureUV ); specularColor *=specularColorTextureSample.rgb; #redgpu_endIf #redgpu_if KHR_specularTexture let specularTextureSample=textureSample( KHR_specularTexture, KHR_specularTextureSampler, KHR_specularTextureUV ); specularParameter *=specularTextureSample.a; #redgpu_endIf var transmissionParameter:f32=u_KHR_transmissionFactor; #redgpu_if useKHR_transmissionTexture let transmissionSample:vec4<f32>=textureSample( packedKHR_clearcoatTexture_transmission, packedTextureSampler, KHR_transmissionUV ); transmissionParameter *=transmissionSample.b; #redgpu_endIf var thicknessParameter:f32=u_KHR_thicknessFactor; #redgpu_if useKHR_thicknessTexture let thicknessSample:vec4<f32>=textureSample( packedKHR_clearcoatTexture_transmission, packedTextureSampler, KHR_transmissionUV ); thicknessParameter *=thicknessSample.a; #redgpu_endIf var diffuseTransmissionColor:vec3<f32>=u_KHR_diffuseTransmissionColorFactor; var diffuseTransmissionParameter:f32=u_KHR_diffuseTransmissionFactor; #redgpu_if useKHR_diffuseTransmissionTexture let diffuseTransmissionTextureSample=textureSample( packedKHR_diffuse_transmission, packedTextureSampler, KHR_diffuseTransmissionUV ); diffuseTransmissionParameter *=diffuseTransmissionTextureSample.a; #redgpu_endIf #redgpu_if useKHR_diffuseTransmissionColorTexture let diffuseTransmissionColorTextureSample=textureSample( packedKHR_diffuse_transmission, packedTextureSampler, KHR_diffuseTransmissionColorUV ); diffuseTransmissionColor *=diffuseTransmissionColorTextureSample.rgb; #redgpu_endIf var sheenColor=u_KHR_sheenColorFactor; var sheenRoughnessParameter=u_KHR_sheenRoughnessFactor; #redgpu_if useKHR_sheenColorTexture let sheenColorSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenColorUV)); sheenColor *=sheenColorSample.rgb; #redgpu_endIf #redgpu_if useKHR_sheenRoughnessTexture let sheenRoughnessSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenRoughnessUV)); sheenRoughnessParameter *=sheenRoughnessSample.a; #redgpu_endIf var iridescenceParameter=u_KHR_iridescenceFactor; var iridescenceThickness=u_KHR_iridescenceThicknessMaximum; #redgpu_if useKHR_iridescenceTexture let iridescenceTextureSample:vec4<f32>=textureSample( packedKHR_iridescence, packedTextureSampler, KHR_iridescenceTextureUV ); iridescenceParameter *=iridescenceTextureSample.r; #redgpu_endIf #redgpu_if useKHR_iridescenceThicknessTexture let iridescenceThicknessTextureSample:vec4<f32>=textureSample( packedKHR_iridescence, packedTextureSampler, KHR_iridescenceThicknessTextureUV ); iridescenceThickness=mix(u_KHR_iridescenceThicknessMinimum,u_KHR_iridescenceThicknessMaximum,iridescenceThicknessTextureSample.g); #redgpu_endIf var anisotropy:f32=u_KHR_anisotropyStrength; var anisotropicT:vec3<f32>=vec3<f32>(1.0); var anisotropicB:vec3<f32>=vec3<f32>(1.0); #redgpu_if useKHR_materials_anisotropy { var anisotropicDirection:vec2<f32>=vec2<f32>(1.0,0.0); if(u_useKHR_anisotropyTexture){ let anisotropyTex=textureSample(KHR_anisotropyTexture,baseColorTextureSampler,KHR_anisotropyUV).rgb; anisotropicDirection=anisotropyTex.rg * 2.0 - vec2<f32>(1.0,1.0); var anisotropyRotation:vec2<f32>; if( u_KHR_anisotropyRotation < 0.0001 ){ anisotropyRotation=vec2<f32>(1.0,0.0);} else{ anisotropyRotation=vec2<f32>( cos(u_KHR_anisotropyRotation),sin(u_KHR_anisotropyRotation) );} let rotationMtx:mat2x2<f32>=mat2x2<f32>( anisotropyRotation.x,anisotropyRotation.y, -anisotropyRotation.y,anisotropyRotation.x ); anisotropicDirection=rotationMtx * normalize(anisotropicDirection); anisotropy *=anisotropyTex.b; } var T:vec3<f32>; var B:vec3<f32>; if (u_useVertexTangent) { if (length(input_vertexTangent.xyz) > 0.0) { T=normalize(input_vertexTangent.xyz); B=normalize(cross(T,N) * input_vertexTangent.w); } else { T=vec3<f32>(1.0,0.0,0.0); B=normalize(cross(T,N) * 1.0); } } else { T=vec3<f32>(1.0,0.0,0.0); B=normalize(cross(T,N) * 1.0); } let TBN:mat3x3<f32>=mat3x3<f32>(T,B,N); anisotropicT=normalize(TBN * vec3<f32>(anisotropicDirection,0.0)); anisotropicB=normalize(cross(N,anisotropicT)); } #redgpu_endIf var prePathBackground=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission prePathBackground=calcPrePathBackground( u_useKHR_materials_volume,thicknessParameter * inputData.volumeScale,u_KHR_dispersion,u_KHR_attenuationDistance,u_KHR_attenuationColor, ior,roughnessParameter,albedo, systemUniforms.projectionCameraMatrix,input_vertexPosition,input_ndcPosition, V,N, renderPath1ResultTexture,renderPath1ResultTextureSampler ); #redgpu_endIf let F0_dielectric:vec3<f32>=vec3(pow((1.0 - ior)/(1.0 + ior),2.0)); let F0_metal=baseColor.rgb; var F0=mix(F0_dielectric,F0_metal,metallicParameter); #redgpu_if useKHR_materials_iridescence if (iridescenceParameter > 0.0) { F0=iridescent_fresnel(1.0,u_KHR_iridescenceIor,F0,iridescenceThickness,iridescenceParameter,NdotV); } #redgpu_endIf var totalDirectLighting=vec3<f32>(0.0); for (var i=0u;i < u_directionalLightCount;i++) { totalDirectLighting +=calcLight( u_directionalLights[i].color,u_directionalLights[i].intensity * visibility, N,V,-normalize(u_directionalLights[i].direction), VdotN, roughnessParameter,metallicParameter,albedo, F0,ior, prePathBackground, specularColor,specularParameter, u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor, transmissionParameter, sheenColor,sheenRoughnessParameter, anisotropy,anisotropicT,anisotropicB, clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal ); } { let clusterIndex=getClusterLightClusterIndex(inputData.position); let lightOffset=clusterLightGroup.lights[clusterIndex].offset; let lightCount:u32=clusterLightGroup.lights[clusterIndex].count; for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) { let i=clusterLightGroup.indices[lightOffset + lightIndex]; let targetLight=clusterLightList.lights[i]; let u_clusterLightPosition=targetLight.position; let u_clusterLightRadius=targetLight.radius; let u_isSpotLight=targetLight.isSpotLight; let lightDistance=length(u_clusterLightPosition - input_vertexPosition); if (lightDistance > u_clusterLightRadius) { continue; } let lightDir=normalize(u_clusterLightPosition - input_vertexPosition);\nlet Lvec=u_clusterLightPosition - input_vertexPosition;\nlet dist2=max(dot(Lvec,Lvec),0.0001);\nlet d=sqrt(dist2);\nlet rangePart=pow(clamp(1.0 - d/u_clusterLightRadius,0.0,1.0),2.0);\nlet invSquare=(u_clusterLightRadius * u_clusterLightRadius)/dist2;\nlet attenuation=rangePart * invSquare; var finalAttenuation=attenuation; if (u_isSpotLight > 0.0) { let u_clusterLightDirection=normalize(vec3<f32>( targetLight.directionX, targetLight.directionY, targetLight.directionZ )); let u_clusterLightInnerAngle=targetLight.innerCutoff; let u_clusterLightOuterCutoff=targetLight.outerCutoff; let lightToVertex=normalize(-lightDir); let cosTheta=dot(lightToVertex,u_clusterLightDirection); let cosOuter=cos(radians(u_clusterLightOuterCutoff)); let cosInner=cos(radians(u_clusterLightInnerAngle)); if (cosTheta < cosOuter) { continue; } let epsilon=cosInner - cosOuter; let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0); finalAttenuation *=spotIntensity; } totalDirectLighting +=calcLight( targetLight.color,targetLight.intensity * finalAttenuation, N,V,lightDir, VdotN, roughnessParameter,metallicParameter,albedo, F0,ior, prePathBackground, specularColor,specularParameter, u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor, transmissionParameter, sheenColor,sheenRoughnessParameter, anisotropy,anisotropicT,anisotropicB, clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal ); } } if (u_useIblTexture) { let R=normalize(reflect(-V,N)); let NdotV=max(dot(N,V),0.04); let NdotV_fresnel=max(dot(N,V),0.04); let fresnel=pow(1.0 - NdotV_fresnel,5.0); let F_IBL_dielectric=F0_dielectric + (vec3<f32>(1.0) - F0_dielectric) * fresnel; let F_IBL_metal=F0_metal + (vec3<f32>(1.0) - F0_metal) * fresnel; var F_IBL=F0 + (vec3<f32>(1.0) - F0) * fresnel; #redgpu_if useKHR_materials_iridescence if (iridescenceParameter > 0.0) { let base_f0=mix(F0_dielectric,baseColor.rgb,metallicParameter); let iridescence_effect=iridescent_fresnel( 1.0, u_KHR_iridescenceIor, base_f0, iridescenceThickness, iridescenceParameter, NdotV  ); F_IBL=iridescence_effect; } #redgpu_endIf let K=(roughnessParameter + 1.0) * (roughnessParameter + 1.0)/8.0; let G=NdotV/(NdotV * (1.0 - K) + K); let a2=roughnessParameter * roughnessParameter; let G_smith=NdotV/(NdotV * (1.0 - a2) + a2); let iblMipmapCount:f32=f32(textureNumLevels(ibl_environmentTexture) - 1); let mipLevel=pow(roughnessParameter,0.4) * iblMipmapCount; var reflectedColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,R,mipLevel).rgb; let effectiveTransmission=transmissionParameter * (1.0 - metallicParameter); let iblDiffuseColor=textureSampleLevel(ibl_irradianceTexture,iblTextureSampler,N,0).rgb; var envIBL_DIFFUSE:vec3<f32>=albedo * iblDiffuseColor * (vec3<f32>(1.0) - F_IBL_dielectric); #redgpu_if useKHR_materials_diffuse_transmission { var backScatteringColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,-N,mipLevel).rgb; let transmittedIBL=backScatteringColor * diffuseTransmissionColor * (vec3<f32>(1.0) - F_IBL); envIBL_DIFFUSE=mix(envIBL_DIFFUSE,transmittedIBL,diffuseTransmissionParameter); } #redgpu_endIf var envIBL_SPECULAR:vec3<f32>; let specularColorCorrected=max(vec3<f32>(0.04),specularColor); envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter; #redgpu_if useKHR_materials_anisotropy { var bentNormal=cross(anisotropicB,V); bentNormal=normalize(cross(bentNormal,anisotropicB)); let temp=1.0 - anisotropy * (1.0 - roughnessParameter); let tempSquared=temp * temp; var a=tempSquared * tempSquared; bentNormal=normalize(mix(bentNormal,N,a)); var reflectVec=reflect(-V,bentNormal); reflectVec=normalize(mix(reflectVec,bentNormal,roughnessParameter * roughnessParameter)); let roughnessT=roughnessParameter * (1.0 + anisotropy); let roughnessB=roughnessParameter * (1.0 - anisotropy); let TdotR=dot(anisotropicT,reflectVec); let BdotR=dot(anisotropicB,reflectVec); let TdotV=dot(anisotropicT,V); let BdotV=dot(anisotropicB,V); let anisotropicR=normalize(reflectVec - anisotropy * (TdotR * anisotropicT - BdotR * anisotropicB)); let VdotN=max(0.04,dot(V,N)); let oneMinusVdotN=1.0 - VdotN; let directionFactor=oneMinusVdotN * oneMinusVdotN * oneMinusVdotN; let VdotT_abs=abs(TdotV); let VdotB_abs=abs(BdotV); let totalWeight=max(0.0001,VdotT_abs + VdotB_abs); let weightedRoughness=(roughnessT * VdotT_abs + roughnessB * VdotB_abs)/totalWeight; let anisotropyFactor=max(0.0,min(1.0,anisotropy)); let finalRoughness=mix( roughnessParameter,weightedRoughness,anisotropyFactor * directionFactor ); let anistropyMipmap=pow(finalRoughness,0.4) * iblMipmapCount; reflectedColor=textureSampleLevel( ibl_environmentTexture,iblTextureSampler,anisotropicR,anistropyMipmap ).rgb; let a2=finalRoughness * finalRoughness; let G_smith=NdotV/(NdotV * (1.0 - a2) + a2); envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter; } #redgpu_endIf var envIBL_SPECULAR_BTDF=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission var refractedDir:vec3<f32>; let eta=1.0/ior; if (abs(ior - 1.0) < 0.0001) { refractedDir=V;} else { refractedDir=refract(-V,-N,eta);} if(length(refractedDir) > 0.0001) { let NdotT=abs(dot(N,normalize(refractedDir))); let F_transmission=vec3<f32>(1.0) - F_IBL_dielectric; var attenuatedBackground=prePathBackground; if (u_useKHR_materials_volume) { let localNodeScale=inputData.localNodeScale; let volumeScale=inputData.volumeScale; let scaledThickness=thicknessParameter * localNodeScale; let safeAttenuationColor=clamp(u_KHR_attenuationColor,vec3<f32>(0.0001),vec3<f32>(1.0)); let safeAttenuationDistance=max(u_KHR_attenuationDistance,0.0001); let attenuationCoefficient=-log(safeAttenuationColor)/safeAttenuationDistance; let cosTheta=max(NdotT,0.001); let pathLength=scaledThickness/cosTheta; let transmittance=exp(-attenuationCoefficient * pathLength); attenuatedBackground *=transmittance; }else{ attenuatedBackground *=albedo; } envIBL_SPECULAR_BTDF=attenuatedBackground * F_transmission * transmissionParameter + reflectedColor * G_smith * F_IBL * NdotT; } #redgpu_endIf let envIBL_DIELECTRIC=mix(envIBL_DIFFUSE,envIBL_SPECULAR_BTDF,transmissionParameter) + envIBL_SPECULAR; var envIBL_SHEEN=vec3<f32>(0.0); var sheen_albedo_scaling:f32=1.0; let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z)); #redgpu_if useKHR_materials_sheen let sheenResult=calcIBLSheen( N, V, sheenColor, maxSheenColor, sheenRoughnessParameter, iblMipmapCount ); envIBL_SHEEN=sheenResult.envIBL_SHEEN; sheen_albedo_scaling=sheenResult.sheen_albedo_scaling; #redgpu_endIf let envIBL_METAL=select(reflectedColor * max(baseColor.rgb,vec3<f32>(0.04)),reflectedColor * F_IBL,iridescenceParameter>0.0); let metallicPart=envIBL_METAL * metallicParameter * sheen_albedo_scaling; let dielectricPart=envIBL_DIELECTRIC * (1.0 - metallicParameter); var indirectLighting=metallicPart + dielectricPart + envIBL_SHEEN; #redgpu_if useKHR_materials_clearcoat if (clearcoatParameter > 0.0) { let clearcoatR=reflect(-V,clearcoatNormal); let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04); let clearcoatMipLevel=pow(clearcoatRoughnessParameter,0.4) * iblMipmapCount; let clearcoatPrefilteredColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,clearcoatR,clearcoatMipLevel).rgb; let clearcoatF0=F0; let clearcoatF=clearcoatF0 + (vec3<f32>(1.0) - clearcoatF0) * pow(1.0 - clearcoatNdotV,5.0); let clearcoatK=(clearcoatRoughnessParameter + 1.0) * (clearcoatRoughnessParameter + 1.0)/8.0; let clearcoatG=clearcoatNdotV/(clearcoatNdotV * (1.0 - clearcoatK) + clearcoatK); let clearcoatBRDF=clearcoatF * clearcoatG; let clearcoatSpecularIBL=clearcoatPrefilteredColor * clearcoatBRDF * clearcoatParameter; let clearcoatFresnel=clearcoatF; indirectLighting=clearcoatSpecularIBL + (vec3<f32>(1.0) - clearcoatFresnel) * indirectLighting; } #redgpu_endIf let environmentIntensity=1.0; let surfaceColor=totalDirectLighting + indirectLighting * environmentIntensity * occlusionParameter; finalColor=vec4<f32>(surfaceColor,resultAlpha); } else { let ambientContribution=albedo * u_ambientLightColor * u_ambientLightIntensity * occlusionParameter; finalColor=vec4<f32>(totalDirectLighting + ambientContribution,resultAlpha); } var emissiveSamplerColor=vec3<f32>(1.0); #redgpu_if emissiveTexture emissiveSamplerColor=textureSample(emissiveTexture,emissiveTextureSampler,emissiveUV).rgb; #redgpu_endIf finalColor +=vec4<f32>( emissiveSamplerColor.rgb * u_emissiveFactor * u_emissiveStrength,0); finalColor=linear_to_srgb(finalColor); #redgpu_if useCutOff if (resultAlpha <=u_cutOff) { discard;} #redgpu_endIf output.color=finalColor; #redgpu_if useSSR { let smoothness=1.0 - roughnessParameter; let smoothnessCurved=smoothness * smoothness * (3.0 - 2.0 * smoothness); let metallicWeight=metallicParameter * metallicParameter; let baseReflection=0.04 + 0.96 * metallicWeight; let baseReflectionStrength=smoothnessCurved * baseReflection; output.gBufferNormal=vec4<f32>(N * 0.5 + 0.5,baseReflectionStrength); } #redgpu_endIf output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n};\nstruct SheenResult { envIBL_SHEEN:vec3<f32>, sheen_albedo_scaling:f32\n}\nfn calcIBLSheen( N:vec3<f32>, V:vec3<f32>, sheenColor:vec3<f32>, maxSheenColor:f32, sheenRoughnessParameter:f32, iblMipmapCount:f32\n) -> SheenResult { let NdotV=max(dot(N,V),0.0001); let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter; let R=reflect(-V,N); let sheenLobe=sheenRoughnessParameter * sheenRoughnessParameter; let sheenSamplingDir=normalize(mix(R,N,sheenLobe)); var sheenMipLevel=log2(sheenRoughnessParameter) * 1.2 + iblMipmapCount - 1.0; sheenMipLevel=clamp(sheenMipLevel,0.0,iblMipmapCount - 1.0); let sheenRadiance=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,sheenSamplingDir,sheenMipLevel).rgb; let F0=0.04; let sheenFresnel=F0 + (1.0 - F0) * pow(1.0 - NdotV,5.0); let E_VdotN=1.0 - pow(1.0 - NdotV,5.0); let sheen_albedo_scaling=max(1.0 - maxSheenColor * E_VdotN,0.04); let envIBL_SHEEN=sheenColor * sheenFresnel; return SheenResult(envIBL_SHEEN,sheen_albedo_scaling);\n}\nfn calcLight( lightColor:vec3<f32>,lightIntensity:f32, N:vec3<f32>,V:vec3<f32>,L:vec3<f32>, VdotN:f32, roughnessParameter:f32,metallicParameter:f32,albedo:vec3<f32>, F0:vec3<f32>,ior:f32, prePathBackground:vec3<f32>, specularColor:vec3<f32>,specularParameter:f32, u_useKHR_materials_diffuse_transmission:bool,diffuseTransmissionParameter:f32,diffuseTransmissionColor:vec3<f32>, transmissionParameter:f32, sheenColor:vec3<f32>,sheenRoughnessParameter:f32, anisotropy:f32,anisotropicT:vec3<f32>,anisotropicB:vec3<f32>, clearcoatParameter:f32,clearcoatRoughnessParameter:f32,clearcoatNormal:vec3<f32>\n) -> vec3<f32>{ let dLight=lightColor * lightIntensity; let NdotL=max(dot(N,L),0.04); let NdotV=max(dot(N,V),0.04); let H=normalize(L + V); let LdotH=max(dot(L,H),0.0); let NdotH=max(dot(N,H),0.0); let VdotH=max(dot(V,H),0.0); var DIFFUSE_BRDF:vec3<f32>=diffuse_brdf_disney(NdotL,NdotV,LdotH,roughnessParameter,albedo); #redgpu_if useKHR_materials_diffuse_transmission DIFFUSE_BRDF=mix(DIFFUSE_BRDF,diffuse_btdf(N,L,diffuseTransmissionColor),diffuseTransmissionParameter); #redgpu_endIf var SPECULAR_BRDF:vec3<f32>; if (anisotropy > 0.0) { #redgpu_if useKHR_materials_anisotropy var TdotL=dot(anisotropicT,L); var TdotV=dot(anisotropicT,V); var BdotL=dot(anisotropicB,L); var TdotH=dot(anisotropicT,H); var BdotH=dot(anisotropicB,H); var BdotV=dot(anisotropicB,V); SPECULAR_BRDF=BRDF_specularAnisotropicGGX( albedo, vec3<f32>(1.0), roughnessParameter * roughnessParameter, VdotH,NdotL,NdotV,NdotH,BdotV,TdotV,TdotL,BdotL,TdotH,BdotH, anisotropy ); #redgpu_endIf }else{ SPECULAR_BRDF=specular_brdf( albedo,roughnessParameter,NdotH,NdotV,NdotL,LdotH); } let METAL_BRDF=conductor_fresnel( albedo,SPECULAR_BRDF,VdotH);; var SPECULAR_BTDF=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission if(transmissionParameter > 0.0){ SPECULAR_BTDF=specular_btdf( NdotV,NdotL,NdotH,VdotH,LdotH,roughnessParameter,albedo,ior); } #redgpu_endIf let DIELECTRIC_BRDF=fresnel_mix( F0, specularParameter, mix(DIFFUSE_BRDF,SPECULAR_BTDF,transmissionParameter), SPECULAR_BRDF, VdotH ); var SHEEN_BRDF:vec3<f32>=vec3<f32>(0.0); var sheen_albedo_scaling:f32=1.0; #redgpu_if useKHR_materials_sheen let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z)); if(sheenRoughnessParameter > 0.0 && maxSheenColor > 0.001 && dot(N,V) > 0) { let NdotV=dot(N,V); let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter; let invR=1/sheenRoughnessAlpha; let cos2h=NdotH * NdotH; let sin2h=1 - cos2h; let sheenDistribution=(2 + invR) * pow(sin2h,invR * 0.5)/(2 * pi); let sheen_visibility=1.0/((1.0 + lambda_sheen(NdotV,sheenRoughnessAlpha) + lambda_sheen(NdotL,sheenRoughnessAlpha)) * (4.0 * NdotV * NdotL)); let LdotN=max(dot(L,N),0.04); let E_LdotN=1.0 - pow(1.0 - LdotN,5.0); let E_VdotN=1.0 - pow(1.0 - VdotN,5.0); sheen_albedo_scaling=max(min(1.0 - maxSheenColor * E_VdotN,1.0 - maxSheenColor * E_LdotN),0.04); SHEEN_BRDF=sheenColor * sheenDistribution * sheen_visibility; } #redgpu_endIf let metallicPart=METAL_BRDF * metallicParameter * sheen_albedo_scaling; let dielectricPart=DIELECTRIC_BRDF * sheen_albedo_scaling; let sheenPart=SHEEN_BRDF; var directLighting=(metallicPart + dielectricPart + sheenPart); #redgpu_if useKHR_materials_transmission if(transmissionParameter > 0.0) { let transmissionWeight=transmissionParameter * (vec3<f32>(1.0) - F0); directLighting=mix(directLighting,prePathBackground,transmissionWeight); } #redgpu_endIf #redgpu_if useKHR_materials_clearcoat if(clearcoatParameter > 0.0){ let clearcoatNdotL=max(dot(clearcoatNormal,L),0.04); let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04); let clearcoatNdotH=max(dot(clearcoatNormal,H),0.0); let CLEARCOAT_BRDF=specular_brdf( F0,clearcoatRoughnessParameter,clearcoatNdotH,clearcoatNdotV,clearcoatNdotL,LdotH); directLighting=fresnel_coat(clearcoatNdotV,ior,clearcoatParameter,directLighting,CLEARCOAT_BRDF); } #redgpu_endIf var lightDirection:f32; #redgpu_if useKHR_materials_diffuse_transmission lightDirection=mix(abs(dot(N,L)),1.0,diffuseTransmissionParameter); #redgpu_else lightDirection=NdotL; #redgpu_endIf let lightContribution=directLighting * dLight * lightDirection; return lightContribution;\n}\nconst pi:f32=3.14159265359;\nfn BRDF_specularAnisotropicGGX( f0:vec3<f32>,f90:vec3<f32>,alphaRoughness:f32,VdotH:f32,NdotL:f32,NdotV:f32,NdotH:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,TdotH:f32,BdotH:f32,anisotropy:f32 ) -> vec3<f32> { var at=mix(alphaRoughness,1.0,anisotropy * anisotropy); var ab=alphaRoughness; var F:vec3<f32>=fresnel_schlick(VdotH,f0); var V:f32=V_GGX_anisotropic(NdotL,NdotV,BdotV,TdotV,TdotL,BdotL,at,ab); var D:f32=D_GGX_anisotropic(NdotH,TdotH,BdotH,at,ab); return F * (V * D);\n}\nfn D_GGX_anisotropic( NdotH:f32,TdotH:f32,BdotH:f32,at:f32,ab:f32 ) -> f32 { let a2:f32=at * ab; let f:vec3<f32>=vec3<f32>(ab * TdotH,at * BdotH,a2 * NdotH); let denominator:f32=dot(f,f); let w2:f32=a2/denominator; return a2 * w2 * w2/pi;\n}\nfn V_GGX_anisotropic( NdotL:f32,NdotV:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,at:f32,ab:f32 ) -> f32 { let GGXV=NdotL * length(vec3<f32>(at * TdotV,ab * BdotV,NdotV)); let GGXL=NdotV * length(vec3<f32>(at * TdotL,ab * BdotL,NdotL)); let v=0.5/(GGXV + GGXL); return clamp(v,0.0,1.0);\n}\nfn iridescent_fresnel(outside_ior:f32,iridescence_ior:f32,base_f0:vec3<f32>, iridescence_thickness:f32,iridescence_factor:f32,cos_theta1:f32) -> vec3<f32> { if (iridescence_thickness <=0.0 || iridescence_factor <=0.0) { return base_f0; } let cos_theta1_abs=abs(cos_theta1); let safe_iridescence_ior=max(iridescence_ior,1.01); let sin_theta1=sqrt(max(0.0,1.0 - cos_theta1_abs * cos_theta1_abs)); let sin_theta2=(outside_ior/safe_iridescence_ior) * sin_theta1; if (sin_theta2 >=1.0) { return base_f0 + iridescence_factor * (vec3<f32>(1.0) - base_f0); } let cos_theta2=sqrt(max(0.0,1.0 - sin_theta2 * sin_theta2)); let wavelengths=vec3<f32>(650.0,510.0,475.0); let effective_thickness=max(iridescence_thickness,10.0); let ior_scale=max(1.0,1.5 - 0.5 * (safe_iridescence_ior/1.5)); let optical_thickness=2.0 * effective_thickness * safe_iridescence_ior * cos_theta2 * ior_scale; let phase=(2.0 * 3.14159265359 * optical_thickness)/wavelengths; let cos_phase=cos(phase); let sin_phase=sin(phase); let outside_cos1=outside_ior * cos_theta1_abs; let iridescence_cos2=safe_iridescence_ior * cos_theta2; let iridescence_cos1=safe_iridescence_ior * cos_theta1_abs; let outside_cos2=outside_ior * cos_theta2; let r12_s=(outside_cos1 - iridescence_cos2)/(outside_cos1 + iridescence_cos2); let r12_p=(iridescence_cos1 - outside_cos2)/(iridescence_cos1 + outside_cos2); let sqrt_f0=sqrt(clamp(base_f0,vec3<f32>(0.01),vec3<f32>(0.99))); let safe_n3=max((1.0 + sqrt_f0)/(1.0 - sqrt_f0),vec3<f32>(1.2)); let iridescence_cos2_vec=vec3<f32>(iridescence_cos2); let cos_theta1_abs_vec=vec3<f32>(cos_theta1_abs); let iridescence_cos1_vec=vec3<f32>(iridescence_cos1); let cos_theta2_vec=vec3<f32>(cos_theta2); let r23_s=(iridescence_cos2_vec - safe_n3 * cos_theta1_abs_vec)/ (iridescence_cos2_vec + safe_n3 * cos_theta1_abs_vec); let r23_p=(safe_n3 * cos_theta2_vec - iridescence_cos1_vec)/ (safe_n3 * cos_theta2_vec + iridescence_cos1_vec); let r12_s_vec=vec3<f32>(r12_s); let r12_p_vec=vec3<f32>(r12_p); let num_s_real=r12_s_vec + r23_s * cos_phase; let num_s_imag=r23_s * sin_phase; let den_s_real=vec3<f32>(1.0) + r12_s_vec * r23_s * cos_phase; let den_s_imag=r12_s_vec * r23_s * sin_phase; let num_p_real=r12_p_vec + r23_p * cos_phase; let num_p_imag=r23_p * sin_phase; let den_p_real=vec3<f32>(1.0) + r12_p_vec * r23_p * cos_phase; let den_p_imag=r12_p_vec * r23_p * sin_phase; let den_s_squared=den_s_real * den_s_real + den_s_imag * den_s_imag + vec3<f32>(0.001); let rs_real=(num_s_real * den_s_real + num_s_imag * den_s_imag)/den_s_squared; let rs_imag=(num_s_imag * den_s_real - num_s_real * den_s_imag)/den_s_squared; let Rs=rs_real * rs_real + rs_imag * rs_imag; let den_p_squared=den_p_real * den_p_real + den_p_imag * den_p_imag + vec3<f32>(0.001); let rp_real=(num_p_real * den_p_real + num_p_imag * den_p_imag)/den_p_squared; let rp_imag=(num_p_imag * den_p_real - num_p_real * den_p_imag)/den_p_squared; let Rp=rp_real * rp_real + rp_imag * rp_imag; let reflectance=0.5 * (Rs + Rp); let ior_influence=smoothstep(1.0,2.0,safe_iridescence_ior); let enhanced_reflectance=mix( pow(reflectance,vec3<f32>(0.8)) * 1.2, reflectance, ior_influence ); let clamped_reflectance=clamp(enhanced_reflectance,vec3<f32>(0.0),vec3<f32>(1.0)); return mix(base_f0,clamped_reflectance,iridescence_factor);\n}\nfn specular_btdf( NdotV:f32, NdotL:f32, NdotH:f32, VdotH:f32, LdotH:f32, roughness:f32, F0:vec3<f32>, ior:f32\n) -> vec3<f32> { let eta:f32=1.0/ior; let D_rough:f32=distribution_ggx(NdotH,roughness * roughness); let t:f32=clamp((ior - 1.0) * 100.0,0.0,1.0); let D:f32=mix(1.0,D_rough,t); let G:f32=min(1.0,min((2.0 * NdotH * NdotV)/VdotH,(2.0 * NdotH * NdotL)/VdotH)); let F:vec3<f32>=fresnel_schlick(VdotH,F0); let denom:f32=(eta * VdotH + LdotH) * (eta * VdotH + LdotH); let btdf:vec3<f32>= (vec3<f32>(1.0) - F) *  abs(VdotH * LdotH) *  (eta * eta) *  D *  G/ (NdotV * denom + 0.001); return btdf;\n}\nfn lambda_sheen_calc_l(x:f32,alpha_g:f32) -> f32 { let one_minus_alpha_sq=(1.0 - alpha_g) * (1.0 - alpha_g); let a=mix(21.5473,25.3245,one_minus_alpha_sq); let b=mix(3.82987,3.32435,one_minus_alpha_sq); let c=mix(0.19823,0.16801,one_minus_alpha_sq); let d=mix(-1.97760,-1.27393,one_minus_alpha_sq); let e=mix(-4.32054,-4.85967,one_minus_alpha_sq); return a/(1.0 + b * pow(x,c)) + d * x + e;\n}\nfn lambda_sheen(cos_theta:f32,alpha_g:f32) -> f32 { if (abs(cos_theta) < 0.5) { return exp(lambda_sheen_calc_l(cos_theta,alpha_g)); } else { return exp(2.0 * lambda_sheen_calc_l(0.5,alpha_g) - lambda_sheen_calc_l(1.0 - cos_theta,alpha_g)); }\n}\nfn fresnel_coat(NdotV:f32,ior:f32,weight:f32,base:vec3<f32>,layer:vec3<f32>) -> vec3<f32> { let f0:f32=pow((1.0 - ior)/(1.0 + ior),2.0); let fr:f32=f0 + (1.0 - f0) * pow(1.0 - abs(NdotV),5.0); return mix(base,layer,weight * fr);\n}\nfn conductor_fresnel(F0:vec3<f32>,bsdf:vec3<f32>,VdotH:f32) -> vec3<f32> { let fresnel=F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - abs(VdotH),5.0); return bsdf * fresnel;\n}\nfn fresnel_mix( F0:vec3<f32>, weight:f32, base:vec3<f32>, layer:vec3<f32>, VdotH:f32\n) -> vec3<f32> { var f0=F0; f0=min(f0,vec3<f32>(1.0)); let fr=f0 + (1.0 - f0) * pow(1.0 - abs(VdotH),5.0); return (1 - weight * max(max(fr.x,fr.y),fr.z)) * base + weight * fr * layer;\n}\nfn fresnel_mix_ibl( F0:vec3<f32>, weight:f32, base:vec3<f32>, layer:vec3<f32>, NdotV:f32\n) -> vec3<f32> { var f0=F0; f0=min(f0,vec3<f32>(1.0)); let fr=f0 + (1.0 - f0) * pow(1.0 - max(NdotV,0.0),5.0); return base * (1.0 - fr * weight) + layer * fr * weight;\n}\nfn diffuse_brdf_disney(NdotL:f32,NdotV:f32,LdotH:f32,roughness:f32,albedo:vec3<f32>) -> vec3<f32> { if (NdotL <=0.0) { return vec3<f32>(0.0);} let energyBias=mix(0.0,0.5,roughness); let energyFactor=mix(1.0,1.0/1.51,roughness); let fd90=energyBias + 2.0 * LdotH * LdotH * roughness; let f0=1.0; let lightScatter=f0 + (fd90 - f0) * pow(1.0 - NdotL,5.0); let viewScatter=f0 + (fd90 - f0) * pow(1.0 - NdotV,5.0); return albedo * NdotL * lightScatter * viewScatter * energyFactor/pi;\n}\nfn diffuse_brdf(NdotL:f32,albedo:vec3<f32>) -> vec3<f32> { return albedo * NdotL/pi;\n}\nfn diffuse_btdf(N:vec3<f32>,L:vec3<f32>,Albedo:vec3<f32>) -> vec3<f32> { let cos_theta=max(-dot(N,L),0.0); return Albedo * cos_theta/pi;\n}\nfn specular_brdf( F0:vec3<f32>, roughness:f32, NdotH:f32, NdotV:f32, NdotL:f32, LdotH:f32\n) -> vec3<f32> { let D=distribution_ggx(NdotH,roughness); let G=geometry_smith(NdotV,NdotL,roughness); let F=fresnel_schlick(LdotH,F0); let numerator=D * G * F; let denominator=4.0 * NdotV * NdotL + 0.04; return (numerator/denominator);\n}\nfn distribution_ggx(NdotH:f32,roughness:f32) -> f32 { let alpha=roughness * roughness; let alpha2=alpha * alpha; let NdotH2=NdotH * NdotH; let nom=alpha2; let denom=(NdotH2 * (alpha2 - 1.0) + 1.0); let denom_squared=denom * denom; return nom/(denom_squared * 3.14159265359);\n}\nfn geometry_smith(NdotV:f32,NdotL:f32,roughness:f32) -> f32 { let alpha=roughness * roughness; let k=alpha/2.0; let ggx1=NdotV/(NdotV * (1.0 - k) + k); let ggx2=NdotL/(NdotL * (1.0 - k) + k); return ggx1 * ggx2;\n}\nfn fresnel_schlick(cosTheta:f32,F0:vec3<f32>) -> vec3<f32> { return F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - cosTheta,5.0);\n}\nfn get_transformed_uv( input_uv:vec2<f32>, input_uv1:vec2<f32>, texCoord_index:u32, use_transform:u32, transform_offset:vec2<f32>, transform_rotation:f32, transform_scale:vec2<f32>\n) -> vec2<f32> { var result_uv=select(input_uv,input_uv1,texCoord_index==1); if (use_transform==1) { let translation=mat3x3<f32>( 1.0,0.0,0.0, 0.0,1.0,0.0, transform_offset.x,transform_offset.y,1.0 ); let cos_rot=cos(transform_rotation); let sin_rot=sin(transform_rotation); let rotation_matrix=mat3x3<f32>( cos_rot,-sin_rot,0.0, sin_rot,cos_rot,0.0, 0.0,0.0,1.0 ); let scale_matrix=mat3x3<f32>( transform_scale.x,0.0,0.0, 0.0,transform_scale.y,0.0, 0.0,0.0,1.0 ); let result_matrix=translation * rotation_matrix * scale_matrix; result_uv=(result_matrix * vec3<f32>(result_uv,1.0)).xy; } return result_uv;\n}\nfn linear_to_srgb(linearColor:vec4<f32>) -> vec4<f32> { let cutoff=vec4<f32>(0.0031308); let higher=vec4<f32>(1.055) * pow(linearColor,vec4<f32>(1.0/2.4)) - vec4<f32>(0.055); let lower=linearColor * vec4<f32>(12.92); return vec4<f32>( mix(higher.r,lower.r,step(linearColor.r,cutoff.r)), mix(higher.g,lower.g,step(linearColor.g,cutoff.g)), mix(higher.b,lower.b,step(linearColor.b,cutoff.b)), linearColor.a  );\n}\n"));class PBRMaterial extends ABitmapBaseMaterial{#zt;#Ht;#$t;#Wt;#Kt;constructor(i){super(i,"PBR_MATERIAL",Fn,2),this.initGPURenderInfos(),this.#zt=new PackedTexture(i),this.#Kt=new PackedTexture(i),this.#Ht=new PackedTexture(i),this.#$t=new PackedTexture(i),this.#Wt=new PackedTexture(i),this.__packingList=[()=>{this.setupPackORMTexture(),this.setupPackedKHR_clearcoatTexture_transmission(),this.setupPackedKHR_diffuse_transmission(),this.setupPackedKHR_sheen(),this.setupPackedKHR_iridescence()}]}get packedKHR_clearcoatTexture_transmission(){return this.#Kt}get packedKHR_iridescence(){return this.#Wt}get packedORMTexture(){return this.#zt}get packedKHR_sheen(){return this.#$t}get packedKHR_diffuse_transmission(){return this.#Ht}async setupPackORMTexture(){const i=Math.max(this.occlusionTexture?.gpuTexture?.width||1,this.metallicRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.occlusionTexture?.gpuTexture?.height||1,this.metallicRoughnessTexture?.gpuTexture?.height||1);await this.#zt.packing({r:this.occlusionTexture?.gpuTexture,g:this.metallicRoughnessTexture?.gpuTexture,b:this.metallicRoughnessTexture?.gpuTexture},i,m,"packedORMTexture")}async setupPackedKHR_clearcoatTexture_transmission(){const i=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.width||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.height||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.height||1),g=Math.max(this.KHR_transmissionTexture?.gpuTexture?.width||1,this.KHR_thicknessTexture?.gpuTexture?.width||1),x=Math.max(this.KHR_transmissionTexture?.gpuTexture?.height||1,this.KHR_thicknessTexture?.gpuTexture?.height||1),_=Math.max(i,g),b=Math.max(m,x);await this.#Kt.packing({r:this.KHR_clearcoatTexture?.gpuTexture,g:this.KHR_clearcoatRoughnessTexture?.gpuTexture,b:this.KHR_transmissionTexture?.gpuTexture,a:this.KHR_thicknessTexture?.gpuTexture},_,b,"packedKHR_clearcoatTexture_transmission",{b:"r",a:"g"})}async setupPackedKHR_diffuse_transmission(){const i=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.width||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.height||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.height||1);await this.#Ht.packing({r:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,g:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,b:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,a:this.KHR_diffuseTransmissionTexture?.gpuTexture},i,m,"packedKHR_diffuse_transmission")}async setupPackedKHR_sheen(){const i=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.width||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.height||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.height||1);await this.#$t.packing({r:this.KHR_sheenColorTexture?.gpuTexture,g:this.KHR_sheenColorTexture?.gpuTexture,b:this.KHR_sheenColorTexture?.gpuTexture,a:this.KHR_sheenRoughnessTexture?.gpuTexture},i,m,"packedKHR_sheen")}async setupPackedKHR_iridescence(){const i=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.width||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.height||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.height||1);await this.#Wt.packing({r:this.KHR_iridescenceTexture?.gpuTexture,g:this.KHR_iridescenceThicknessTexture?.gpuTexture},i,m,"packedKHR_iridescence")}}gt.defineByPreset(PBRMaterial,[gt.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,gt.PRESET_POSITIVE_NUMBER.NORMAL_SCALE]);Gn.forEach(i=>{const{extensionName:m,textureList:g,useSampler:x}=i,{positiveNumberList:_,vec3List:b,vec4List:y}=i;m&&gt.defineBoolean(PBRMaterial,[`use${m}`]),((i,m)=>{i?.forEach(i=>{gt.defineBoolean(PBRMaterial,[`use${i.charAt(0).toUpperCase()}${i.substring(1)}`]),gt.definePositiveNumber(PBRMaterial,[[`${i}_KHR_texture_transform_rotation`,0]]),gt.defineBoolean(PBRMaterial,[`use_${i}_KHR_texture_transform`]),gt.defineVec2(PBRMaterial,[`${i}_KHR_texture_transform_offset`,[`${i}_KHR_texture_transform_scale`,[1,1]]]),gt.defineUint(PBRMaterial,[`${i}_texCoord_index`]),gt.defineTexture(PBRMaterial,[i]),m&&gt.defineSampler(PBRMaterial,[`${i}Sampler`])})})(g,!x),_?.forEach(i=>{gt.definePositiveNumber(PBRMaterial,[i])}),b?.forEach(i=>{gt.defineVec3(PBRMaterial,[i])}),y?.forEach(i=>{gt.defineVec4(PBRMaterial,[i])})}),gt.definePositiveNumber(PBRMaterial,[["cutOff",0],["KHR_materials_ior",1.5],["KHR_dispersion",0]]),gt.defineUint(PBRMaterial,["alphaBlend"]),gt.defineBoolean(PBRMaterial,["doubleSided","useCutOff","useVertexColor","useVertexTangent","useKHR_materials_unlit",["useSSR",!0]]),Object.freeze(PBRMaterial);var Nn="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include picking;\n#redgpu_include calcDisplacements;\n#redgpu_include calculateMotionVector;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, prevModelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32, receiveShadow:f32, combinedOpacity:f32, useDisplacementTexture:u32, displacementScale:f32, disableJitter:u32,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(9) ndcPosition:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; #redgpu_if disableJitter { let u_projectionMatrix=systemUniforms.noneJitterProjectionCameraMatrix; } #redgpu_else { let u_projectionMatrix=systemUniforms.projectionMatrix; } #redgpu_endIf let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_prevProjectionCameraMatrix=systemUniforms.prevProjectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_matrixList=vertexUniforms.matrixList; let u_modelMatrix=u_matrixList.modelMatrix; let u_prevModelMatrix=u_matrixList.prevModelMatrix; let u_normalModelMatrix=u_matrixList.normalModelMatrix; let u_displacementScale=vertexUniforms.displacementScale; let u_useDisplacementTexture=vertexUniforms.useDisplacementTexture==1u; let u_receiveShadow=vertexUniforms.receiveShadow; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let input_position=inputData.position; let input_position_vec4=vec4<f32>(input_position,1.0); let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useDisplacementTexture let tempPosition=u_modelMatrix * input_position_vec4; let distance=distance(tempPosition.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition( input_position, input_vertexNormal, displacementTexture, displacementTextureSampler, u_displacementScale, input_uv, mipLevel ); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); let worldUV=input_uv; let displacedNormal=calcDisplacementNormal( normalize((u_normalModelMatrix * vec4<f32>(input_vertexNormal,0.0)).xyz), displacementTexture, displacementTextureSampler, u_displacementScale, worldUV, mipLevel ); normalPosition=vec4<f32>(displacedNormal,0.0); #redgpu_else position=u_modelMatrix * input_position_vec4; normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); #redgpu_endIf output.position=u_projectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.ndcPosition=output.position.xyz/output.position.w; output.combinedOpacity=vertexUniforms.combinedOpacity; #redgpu_if receiveShadow { let posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf { let currentClipPos=u_noneJitterProjectionCameraMatrix * position; let prevClipPos=u_prevProjectionCameraMatrix * u_prevModelMatrix * input_position_vec4; output.motionVector=vec3<f32>(calculateMotionVector(currentClipPos,prevClipPos,u_resolution),select(0.0,1.0,vertexUniforms.disableJitter==1u)); } return output;\n}\n",Vn="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include picking;\n#redgpu_include calculateMotionVector;\nstruct MatrixList{ localMatrix:mat4x4<f32>, modelMatrix:mat4x4<f32>, prevModelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32, receiveShadow:f32\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32, @location(12) motionVector:vec3<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let input_position=inputData.position; let input_position_vec4=vec4<f32>(input_position,1.0); let input_vertexNormal=inputData.vertexNormal; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_prevProjectionCameraMatrix=systemUniforms.prevProjectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_matrixList=vertexUniforms.matrixList; let u_localMatrix=u_matrixList.localMatrix; let u_modelMatrix=u_matrixList.modelMatrix; let u_normalModelMatrix=u_matrixList.normalModelMatrix; let u_prevModelMatrix=u_matrixList.prevModelMatrix; let u_receiveShadow=vertexUniforms.receiveShadow; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_modelMatrix * input_position_vec4; normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=inputData.uv; output.uv1=inputData.uv1; output.vertexColor_0=inputData.vertexColor_0; output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent; output.ndcPosition=output.position.xyz/output.position.w; #redgpu_if receiveShadow { let posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf { let currentClipPos=u_noneJitterProjectionCameraMatrix * position; let prevClipPos=u_prevProjectionCameraMatrix * u_prevModelMatrix * input_position_vec4; output.motionVector=vec3<f32>(calculateMotionVector(currentClipPos,prevClipPos,u_resolution),0.0); } let nodeScaleX=length(u_localMatrix[0].xyz); let nodeScaleY=length(u_localMatrix[1].xyz); let nodeScaleZ=length(u_localMatrix[2].xyz); output.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0); let volumeScaleX=length(u_modelMatrix[0].xyz); let volumeScaleY=length(u_modelMatrix[1].xyz); let volumeScaleZ=length(u_modelMatrix[2].xyz); output.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0); return output;\n}\n";const getBasicMeshVertexBindGroupDescriptor=(i,m=!1)=>{const{redGPUContext:g,gpuRenderInfo:x,material:_}=i,{resourceManager:b}=g,{vertexUniformBuffer:y,vertexBindGroupLayout:T}=x,{basicSampler:w,emptyBitmapTextureView:P,emptyCubeTextureView:z}=b,{gpuSampler:H}=w;return{layout:T,label:m?"VERTEX_BIND_GROUP_DESCRIPTOR_MESH_SKIN":"VERTEX_BIND_GROUP_DESCRIPTOR_MESH",entries:m?[{binding:0,resource:{buffer:y.gpuBuffer,offset:0,size:y.size}},{binding:1,resource:getGPUResourceSampler(_?.displacementTextureSampler)||H},{binding:2,resource:b.getGPUResourceBitmapTextureView(_?.displacementTexture)||P},{binding:3,resource:{buffer:i.animationInfo.skinInfo.vertexStorageBuffer,offset:0,size:i.animationInfo.skinInfo.vertexStorageBuffer.size}}]:[{binding:0,resource:{buffer:y.gpuBuffer,offset:0,size:y.size}},{binding:1,resource:getGPUResourceSampler(_?.displacementTextureSampler)||H},{binding:2,resource:b.getGPUResourceBitmapTextureView(_?.displacementTexture)||P}]}},getGPUResourceSampler=i=>i?.gpuSampler,zn=parseWGSL(Vn),Hn=zn.uniforms.vertexUniforms,$n=parseWGSL(Nn),Wn=$n.uniforms.vertexUniforms,createMeshVertexShaderModule=i=>{const{material:m}=i;let g;return g=m instanceof PBRMaterial?i.animationInfo.skinInfo?((i,m)=>{const{redGPUContext:g,currentShaderModuleName:x}=m,{resourceManager:_,gpuDevice:b}=g,{gpuRenderInfo:y}=m,T=`${m.animationInfo.skinInfo.joints.length}`,w=`${i}_${T}`,P="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calculateMotionVector;\nstruct MatrixList{ localMatrix:mat4x4<f32>, modelMatrix:mat4x4<f32>, prevModelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32, receiveShadow:f32\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\n@group(1) @binding(3) var<storage,read> vertexStorages:array<mat4x4<f32>>;\nstruct InputDataSkin { @builtin(vertex_index) idx:u32, @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>,\n};\nstruct OutputDataSkin { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32, @location(12) motionVector:vec3<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputDataSkin) -> OutputDataSkin { var output:OutputDataSkin; let input_position=inputData.position; let input_position_vec4=vec4<f32>(input_position,1.0); let input_vertexNormal=inputData.vertexNormal; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_prevProjectionCameraMatrix=systemUniforms.prevProjectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_matrixList=vertexUniforms.matrixList; let u_localMatrix=u_matrixList.localMatrix; let u_modelMatrix=u_matrixList.modelMatrix; let u_prevModelMatrix=u_matrixList.prevModelMatrix; let u_normalModelMatrix=u_matrixList.normalModelMatrix; let u_receiveShadow=vertexUniforms.receiveShadow; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let skinMat=vertexStorages[inputData.idx]; let position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0); let normalPosition=u_normalModelMatrix * skinMat * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=inputData.uv; output.uv1=inputData.uv1; output.vertexColor_0=inputData.vertexColor_0; output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent; output.ndcPosition=output.position.xyz/output.position.w; #redgpu_if receiveShadow { let posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3(posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf { let currentClipPos=u_noneJitterProjectionCameraMatrix * position; let prevClipPos=u_prevProjectionCameraMatrix * u_prevModelMatrix * input_position_vec4; output.motionVector=vec3<f32>(calculateMotionVector(currentClipPos,prevClipPos,u_resolution),0.0); } let nodeScaleX=length(u_localMatrix[0].xyz); let nodeScaleY=length(u_localMatrix[1].xyz); let nodeScaleZ=length(u_localMatrix[2].xyz); output.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0); let volumeScaleX=length(u_modelMatrix[0].xyz); let volumeScaleY=length(u_modelMatrix[1].xyz); let volumeScaleZ=length(u_modelMatrix[2].xyz); output.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0); return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputDataSkin) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let input_position=inputData.position;\nlet skinMat=vertexStorages[inputData.idx]; let position=u_modelMatrix * skinMat * vec4<f32>(input_position,1.0); output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n@vertex\nfn picking(inputData:InputDataSkin) -> OutputDataSkin { var output:OutputDataSkin; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix;\nlet skinMat=vertexStorages[inputData.idx]; let position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0); output.position=u_projectionCameraMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n",z={code:P};if(x===w)return _.getGPUShaderModule(w);z.code=P.replaceAll("#JOINT_NUM",T),y.vertexUniformInfo=parseWGSL(z.code).uniforms.vertexUniforms,m.animationInfo.skinInfo?(createMeshVertexUniformBuffers(m,!0),m.animationInfo.skinInfo.vertexStorageInfo=parseWGSL(z.code).storage.vertexStorages,new ArrayBuffer(m.animationInfo.skinInfo.vertexStorageInfo.arrayBufferByteLength),m.animationInfo.skinInfo.vertexStorageBuffer=b.createBuffer({size:16*m.geometry.vertexBuffer.vertexCount*4,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST}),y.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m,!0))):(createMeshVertexUniformBuffers(m),y.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m)));const H=_.createGPUShaderModule(w,z);return m.gpuRenderInfo.vertexShaderModule=H,m.gpuRenderInfo.vertexShaderModule})("VERTEX_MODULE_MESH_PBR_SKIN",i):i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH_PBR",zn,Hn,Vn):i.createCustomMeshVertexShaderModule?i.createCustomMeshVertexShaderModule():i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH",$n,Wn,Nn),i.currentShaderModuleName=g.label,g},Kn="shadow",jn="picking",createBasePipeline=(i,m,g,x)=>{const{redGPUContext:_}=i,{gpuDevice:b,resourceManager:y}=_,T=i.material.gpuRenderInfo;let w,P;switch(m=i.gpuRenderInfo.vertexShaderModule,x){case Kn:w="drawDirectionalShadowDepth",P=`${m.label}_shadow_pipeline`;break;case jn:w="picking",P=`${m.label}_picking_pipeline`;break;default:w="main",P=`${m.label}_pipeline`}const z={module:m,entryPoint:w,buffers:i.vertexStateBuffers},H=[y.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),g];x!==Kn&&H.push(T.fragmentBindGroupLayout);const $={bindGroupLayouts:H,label:`${P}_${T.fragmentBindGroupLayout.label}`},W={label:P,layout:y.createGPUPipelineLayout(`${$.label}`,$),vertex:z,primitive:i.primitiveState.state};switch(x){case Kn:W.depthStencil={depthWriteEnabled:!0,depthCompare:wn.LESS_EQUAL,format:"depth32float"};break;case jn:i.material&&(W.fragment={module:i.material.gpuRenderInfo.fragmentShaderModule,entryPoint:"picking",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},W.depthStencil=i.depthStencilState.state);break;default:W.fragment=T.fragmentState,W.depthStencil=i.depthStencilState.state,W.multisample={count:_.antialiasingManager.useMSAA?4:1}}return b.createRenderPipeline(W)},updateMeshDirtyPipeline=(i,m)=>{const{material:g,gpuRenderInfo:x,redGPUContext:_}=i,{resourceManager:b}=_;i.dirtyTransform=!0,g.dirtyPipeline&&g._updateFragmentState();const y=createMeshVertexShaderModule(i),T=b.getGPUBindGroupLayout(i.animationInfo.skinInfo?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout);x.vertexShaderModule=y,x.pipeline=createBasePipeline(i,y,T),x.shadowPipeline=null,x.pickingPipeline=null;const{vertexUniformInfo:w}=i.gpuRenderInfo,{members:P}=w;for(const m in P)"pickingId"!==m&&(i[m]=i[m]);i.gpuRenderInfo.vertexUniformInfo.members.pickingId&&i.gpuRenderInfo.vertexUniformBuffer.writeOnlyBuffer(i.gpuRenderInfo.vertexUniformInfo.members.pickingId,i.pickingId),g.dirtyPipeline=!1,i.dirtyPipeline=!1,m&&m.numDirtyPipelines++},Xn="VERTEX_MODULE_MESH_PBR_SKIN",qn=Math.PI/180,Yn=3.141592653589793,Zn=6.283185307179586,Jn=.225,Qn=1.27323954,er=.405284735,tr=1.5707963267948966,nr=new Float32Array(1),rr=new Float32Array([0,1,0]);class Mesh extends MeshBase{displacementTexture;castShadow=!1;#R;#C;#jt;#Xt=0;#qt=0;#Yt=0;#Zt=new Float32Array([0,0,0]);#Jt=0;#Qt=0;#en=0;#tn;#nn=1;#rn=1;#in=1;#an=new Float32Array([1,1,1]);#sn=0;#on=0;#un=0;#ln=new Float32Array([0,0,0]);#cn={};#hn=0;#fn=!1;#dn=1;#mn;#pn=!1;#gn;#xn;#_n;#vn;#bn;#yn=[];#Sn;#Tn=null;#wn=null;#Mn=!0;#Cn=!0;#Rn;#Pn;constructor(i,m,g,x){super(i),x&&(this.name=x),this._geometry=m,this._material=g,this.#tn=uuidToUint(this.uuid),this.#wn=DrawBufferManager.getInstance(i)}get enableDebugger(){return this.#pn}set enableDebugger(i){this.#pn=i,i&&!this.#mn&&(this.#mn=new DrawDebuggerMesh(this.redGPUContext,this))}get drawDebugger(){return this.#mn}_material;get material(){return this._material}set material(i){this._material=i,this.dirtyPipeline=!0,"blendMode"in this&&(this.blendMode=this.blendMode)}_geometry;get geometry(){return this._geometry}set geometry(i){this._geometry=i,this.dirtyPipeline=!0,this.dirtyTransform=!0}get opacity(){return this.#dn}set opacity(i){validatePositiveNumberRange(i,0,1),this.#dn=i,this.dirtyOpacity=!0}get ignoreFrustumCulling(){return this.#fn}set ignoreFrustumCulling(i){this.#fn=i}get pickingId(){return this.#tn}get events(){return this.#cn}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get vertexStateBuffers(){return this._geometry.gpuRenderInfo.buffers}get parent(){return this.#jt}set parent(i){this.#jt=i}get pivotX(){return this.#Jt}set pivotX(i){this.#Jt=i,this.dirtyTransform=!0}get pivotY(){return this.#Qt}set pivotY(i){this.#Qt=i,this.dirtyTransform=!0}get pivotZ(){return this.#en}set pivotZ(i){this.#en=i,this.dirtyTransform=!0}get x(){return this.#Xt}set x(i){this.#Xt=this.#Zt[0]=i,this.dirtyTransform=!0}get y(){return this.#qt}set y(i){this.#qt=this.#Zt[1]=i,this.dirtyTransform=!0}get z(){return this.#Yt}set z(i){this.#Yt=this.#Zt[2]=i,this.dirtyTransform=!0}get position(){return this.#Zt}get scaleX(){return this.#nn}set scaleX(i){this.#nn=this.#an[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#rn}set scaleY(i){this.#rn=this.#an[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#in}set scaleZ(i){this.#in=this.#an[2]=i,this.dirtyTransform=!0}get scale(){return this.#an}get rotationX(){return this.#sn}set rotationX(i){this.#sn=this.#ln[0]=i%360,this.dirtyTransform=!0}get rotationY(){return this.#on}set rotationY(i){this.#on=this.#ln[1]=i%360,this.dirtyTransform=!0}get rotationZ(){return this.#un}set rotationZ(i){this.#un=this.#ln[2]=i%360,this.dirtyTransform=!0}get rotation(){return this.#ln}get boundingOBB(){return this.#xn&&!this.dirtyTransform||(this.#xn=null,this.#gn=null,this.#xn=calculateMeshOBB(this)),this.#xn}get boundingAABB(){return this.#gn&&!this.dirtyTransform||(this.#xn=null,this.#gn=null,this.#gn=calculateMeshAABB(this)),this.#gn}get combinedBoundingAABB(){return calculateMeshCombinedAABB(this)}setEnableDebuggerRecursively(i=!1){"enableDebugger"in this&&(this.enableDebugger=i),this.children&&this.children.forEach(m=>{m.setEnableDebuggerRecursively(i)})}setCastShadowRecursively(i=!1){"castShadow"in this&&(this.castShadow=i),this.children&&this.children.forEach(m=>{m.setCastShadowRecursively(i)})}setReceiveShadowRecursively(i=!1){"receiveShadow"in this&&(this.receiveShadow=i),this.children&&this.children.forEach(m=>{m.setReceiveShadowRecursively(i)})}getCombinedOpacity(){if(this.is2DMeshType){const i=this.parent;return this.#dn*(i?.getCombinedOpacity?i.getCombinedOpacity():1)}return 1}addListener(i,m){this.#cn[i]=m,this.#hn=Object.keys(this.#cn).length}lookAt(i,m,g){var x,_=[];_[0]=i,_[1]=m,_[2]=g,identity(this.localMatrix),targetTo(this.localMatrix,[this.#Xt,this.#qt,this.#Yt],_,rr),x=mat4ToEuler(this.localMatrix,[]),this.rotationX=180*-x[0]/Math.PI,this.rotationY=180*-x[1]/Math.PI,this.rotationZ=180*-x[2]/Math.PI}setScale(i,m,g){m=m??i,g=g??i;const x=this.#an;this.#nn=x[0]=i,this.#rn=x[1]=m,this.#in=x[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const x=this.#Zt;this.#Xt=x[0]=i,this.#qt=x[1]=m,this.#Yt=x[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const x=this.#ln;this.#sn=x[0]=i,this.#on=x[1]=m,this.#un=x[2]=g,this.dirtyTransform=!0}clone(){const i=new Mesh(this.redGPUContext,this._geometry,this._material);i.setPosition(this.#Xt,this.#qt,this.#Yt),i.setRotation(this.#sn,this.#on,this.#un),i.setScale(this.#nn,this.#rn,this.#in);let m=this.children.length;for(;m--;)i.addChild(this.children[m].clone());return i}render(i){const{redGPUContext:m}=this,{view:g,isScene2DMode:x,frustumPlanes:_,dirtyVertexUniformFromMaterial:b,useDistanceCulling:y,cullingDistanceSquared:T}=i,{antialiasingManager:w,gpuDevice:P}=m,{scene:z}=g,{shadowManager:H}=z,{directionalShadowManager:$}=H,{pickingManager:W}=g,{castingList:q}=$,ye=this._geometry,Ge=this._material,{uuid:Ke}=Ge||{};let je,Xe,Ye=this.dirtyPipeline;const{skinInfo:Ze}=this.animationInfo;if(x&&(this.#Yt=0,this.#en=0,this.depthStencilState.depthWriteEnabled&&(this.depthStencilState.depthWriteEnabled=!1)),this.dirtyTransform){je=!0,this.#Mn=!0,this.#Cn=!0;{const{pixelRectObject:i}=g,m=this.parent,_=this.localMatrix;let b,y,T,w,P,z,H,$,W,q,ye,Ge,Ke,je,Xe,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,St,Tt,wt,Mt,Ct,Rt,Pt,Et,Bt,It,Lt;if(_[12]=this.#Xt,_[13]=this.#qt,_[14]=this.#Yt,_[15]=1,b=this.#sn*qn,y=this.#on*qn,T=this.#un*qn,ft=1,gt=0,xt=0,bt=0,yt=1,St=0,wt=0,Mt=0,Ct=1,Lt=b%Zn,Lt<-Yn?Lt+=Zn:Lt>Yn&&(Lt-=Zn),Lt=Lt<0?Qn*Lt+er*Lt*Lt:Qn*Lt-er*Lt*Lt,w=Lt<0?Jn*(Lt*-Lt-Lt)+Lt:Jn*(Lt*Lt-Lt)+Lt,Lt=(b+tr)%Zn,Lt<-Yn?Lt+=Zn:Lt>Yn&&(Lt-=Zn),Lt=Lt<0?Qn*Lt+er*Lt*Lt:Qn*Lt-er*Lt*Lt,H=Lt<0?Jn*(Lt*-Lt-Lt)+Lt:Jn*(Lt*Lt-Lt)+Lt,Lt=y%Zn,Lt<-Yn?Lt+=Zn:Lt>Yn&&(Lt-=Zn),Lt=Lt<0?Qn*Lt+er*Lt*Lt:Qn*Lt-er*Lt*Lt,P=Lt<0?Jn*(Lt*-Lt-Lt)+Lt:Jn*(Lt*Lt-Lt)+Lt,Lt=(y+tr)%Zn,Lt<-Yn?Lt+=Zn:Lt>Yn&&(Lt-=Zn),Lt=Lt<0?Qn*Lt+er*Lt*Lt:Qn*Lt-er*Lt*Lt,$=Lt<0?Jn*(Lt*-Lt-Lt)+Lt:Jn*(Lt*Lt-Lt)+Lt,Lt=T%Zn,Lt<-Yn?Lt+=Zn:Lt>Yn&&(Lt-=Zn),Lt=Lt<0?Qn*Lt+er*Lt*Lt:Qn*Lt-er*Lt*Lt,z=Lt<0?Jn*(Lt*-Lt-Lt)+Lt:Jn*(Lt*Lt-Lt)+Lt,Lt=(T+tr)%Zn,Lt<-Yn?Lt+=Zn:Lt>Yn&&(Lt-=Zn),Lt=Lt<0?Qn*Lt+er*Lt*Lt:Qn*Lt-er*Lt*Lt,W=Lt<0?Jn*(Lt*-Lt-Lt)+Lt:Jn*(Lt*Lt-Lt)+Lt,je=$*W,Xe=w*P*W-H*z,Ye=H*P*W+w*z,Ze=$*z,Je=w*P*z+H*W,Qe=H*P*z-w*W,et=-P,at=w*$,ht=H*$,b=this.#nn,y=this.#rn,T=this.#in,this.renderTextureWidth&&(b*=this.renderTextureWidth,y*=this.renderTextureHeight),_[0]=(ft*je+bt*Xe+wt*Ye)*b,_[1]=(gt*je+yt*Xe+Mt*Ye)*b,_[2]=(xt*je+St*Xe+Ct*Ye)*b,_[3]=_[3]*b,_[4]=(ft*Ze+bt*Je+wt*Qe)*y,_[5]=(gt*Ze+yt*Je+Mt*Qe)*y,_[6]=(xt*Ze+St*Je+Ct*Qe)*y,_[7]=_[7]*y,_[8]=(ft*et+bt*at+wt*ht)*T,_[9]=(gt*et+yt*at+Mt*ht)*T,_[10]=(xt*et+St*at+Ct*ht)*T,_[11]=_[11]*T,(this.#Jt||this.#Qt||this.#en)&&(ft=_[0],gt=_[1],xt=_[2],vt=_[3],bt=_[4],yt=_[5],St=_[6],Tt=_[7],wt=_[8],Mt=_[9],Ct=_[10],Rt=_[11],Pt=_[12],Et=_[13],Bt=_[14],It=_[15],q=1,ye=0,Ge=0,Ke=0,_[0]=q*ft+ye*bt+Ge*wt+Ke*Pt,_[1]=q*gt+ye*yt+Ge*Mt+Ke*Et,_[2]=q*xt+ye*St+Ge*Ct+Ke*Bt,_[3]=q*vt+ye*Tt+Ge*Rt+Ke*It,q=0,ye=1,Ge=0,Ke=0,_[4]=q*ft+ye*bt+Ge*wt+Ke*Pt,_[5]=q*gt+ye*yt+Ge*Mt+Ke*Et,_[6]=q*xt+ye*St+Ge*Ct+Ke*Bt,_[7]=q*vt+ye*Tt+Ge*Rt+Ke*It,q=0,ye=0,Ge=1,Ke=0,_[8]=q*ft+ye*bt+Ge*wt+Ke*Pt,_[9]=q*gt+ye*yt+Ge*Mt+Ke*Et,_[10]=q*xt+ye*St+Ge*Ct+Ke*Bt,_[11]=q*vt+ye*Tt+Ge*Rt+Ke*It,x?m?.modelMatrix?(q=-this.#Jt,ye=-this.#Qt,Ge=-this.#en,Ke=1):(q=-this.#Jt/b,ye=-this.#Qt/y,Ge=-this.#en,Ke=1):(q=-this.#Jt,ye=-this.#Qt,Ge=-this.#en,Ke=1),_[12]=q*ft+ye*bt+Ge*wt+Ke*Pt,_[13]=q*gt+ye*yt+Ge*Mt+Ke*Et,_[14]=q*xt+ye*St+Ge*Ct+Ke*Bt,_[15]=q*vt+ye*Tt+Ge*Rt+Ke*It),m?.modelMatrix){const i=m.modelMatrix,g=this.localMatrix,x=this.modelMatrix,_=i[0],b=i[1],y=i[2],T=i[3],w=i[4],P=i[5],z=i[6],H=i[7],$=i[8],W=i[9],q=i[10],ye=i[11],Ge=i[12],Ke=i[13],je=i[14],Xe=i[15];let Ye=g[0],Ze=g[1],Je=g[2],Qe=g[3];x[0]=Ye*_+Ze*w+Je*$+Qe*Ge,x[1]=Ye*b+Ze*P+Je*W+Qe*Ke,x[2]=Ye*y+Ze*z+Je*q+Qe*je,x[3]=Ye*T+Ze*H+Je*ye+Qe*Xe,Ye=g[4],Ze=g[5],Je=g[6],Qe=g[7],x[4]=Ye*_+Ze*w+Je*$+Qe*Ge,x[5]=Ye*b+Ze*P+Je*W+Qe*Ke,x[6]=Ye*y+Ze*z+Je*q+Qe*je,x[7]=Ye*T+Ze*H+Je*ye+Qe*Xe,Ye=g[8],Ze=g[9],Je=g[10],Qe=g[11],x[8]=Ye*_+Ze*w+Je*$+Qe*Ge,x[9]=Ye*b+Ze*P+Je*W+Qe*Ke,x[10]=Ye*y+Ze*z+Je*q+Qe*je,x[11]=Ye*T+Ze*H+Je*ye+Qe*Xe,Ye=g[12],Ze=g[13],Je=g[14],Qe=g[15],x[12]=Ye*_+Ze*w+Je*$+Qe*Ge,x[13]=Ye*b+Ze*P+Je*W+Qe*Ke,x[14]=Ye*y+Ze*z+Je*q+Qe*je,x[15]=Ye*T+Ze*H+Je*ye+Qe*Xe}else{const{modelMatrix:i,localMatrix:m}=this;i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]}}ye||(this.#Cn=!1),this.dirtyTransform=!1}let Je=!0;if(y&&ye){const{rawCamera:i}=g,m=this.boundingAABB,x=i.x-m.centerX,_=i.y-m.centerY,b=i.z-m.centerZ,y=x*x+_*_+b*b,w=m.geometryRadius;y>T+w*w&&(Je=!1)}if(_&&Je){const i=this.boundingAABB,m=_[0],g=_[1],x=_[2],b=_[3],y=_[4],T=_[5],w=i.centerX,P=i.centerY,z=i.centerZ,H=i.geometryRadius;(m[0]*w+m[1]*P+m[2]*z+m[3]<=-H||g[0]*w+g[1]*P+g[2]*z+g[3]<=-H||x[0]*w+x[1]*P+x[2]*z+x[3]<=-H||b[0]*w+b[1]*P+b[2]*z+b[3]<=-H||y[0]*w+y[1]*P+y[2]*z+y[3]<=-H||T[0]*w+T[1]*P+T[2]*z+T[3]<=-H)&&(Je=!1)}this.#fn&&(Je=!0),Je&&(this.gltfLoaderInfo?.activeAnimations?.length&&(i.animationList[i.animationList.length]=this.gltfLoaderInfo?.activeAnimations),Ze&&(this.currentShaderModuleName.includes(Xn)||(Ye=!0),this.currentShaderModuleName===`${Xn}_${Ze.joints?.length}`&&(i.skinList[i.skinList.length]=this,je=!1)));const{displacementTexture:Qe,displacementScale:et}=Ge||{};if((Ye||Ge?.dirtyPipeline||b[Ke])&&(b[Ke]=!0),ye){i.num3DObjects++,w.changedMSAA&&(Ye=!0),this.gpuRenderInfo||this.initGPURenderInfos();const m=!!Qe;this.useDisplacementTexture!==m&&(this.useDisplacementTexture=m,Ye=!0),(Ye||b[Ke])&&(updateMeshDirtyPipeline(this,i),this.#vn=null,this.#bn=null)}else i.num3DGroups++;if(ye&&Je){const{gpuRenderInfo:m}=this,{vertexUniformBuffer:x,vertexUniformInfo:_}=m,{members:b}=_,{members:y}=b.matrixList,{gpuBuffer:T}=x;if(this.#Rn||(this.#Rn=new Float32Array(b.matrixList.endOffset/Float32Array.BYTES_PER_ELEMENT)),void 0!==b.displacementScale&&this.#Pn!==et&&(this.#Pn=et,nr[0]=et,P.queue.writeBuffer(T,b.displacementScale.uniformOffset,nr)),this.#Cn){{const i=this.is2DMeshType?multiply(create$2(),this.modelMatrix,fromValues$1(this.width,0,0,0,0,this.height,0,0,0,0,1,0,0,0,0,1)):this.modelMatrix;this.#Rn.set(i,y.modelMatrix.uniformOffsetForData/Float32Array.BYTES_PER_ELEMENT)}if(w.useTAA&&this.#Cn){this.#_n&&y.prevModelMatrix&&this.#Rn.set(this.#_n,y.prevModelMatrix.uniformOffsetForData/Float32Array.BYTES_PER_ELEMENT);{this.#_n||(this.#_n=new Float32Array(16));const i=this.#_n,m=this.modelMatrix;i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]}}else this.#_n=null;if(this.#Mn&&y.normalModelMatrix){this.#Mn=!1;const i=this.modelMatrix,m=this.normalModelMatrix,g=i[0],x=i[1],_=i[2],b=i[4],y=i[5],T=i[6],w=i[8],P=i[9],z=i[10],H=g*(y*z-T*P)-x*(b*z-T*w)+_*(b*P-y*w);if(0===H)m[0]=1,m[1]=0,m[2]=0,m[3]=0,m[4]=0,m[5]=1,m[6]=0,m[7]=0,m[8]=0,m[9]=0,m[10]=1,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1;else{const i=1/H;m[0]=(y*z-T*P)*i,m[1]=(T*w-b*z)*i,m[2]=(b*P-y*w)*i,m[3]=0,m[4]=(_*P-x*z)*i,m[5]=(g*z-_*w)*i,m[6]=(x*w-g*P)*i,m[7]=0,m[8]=(x*T-_*y)*i,m[9]=(_*b-g*T)*i,m[10]=(g*y-x*b)*i,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1}}this.#Rn.set(this.normalModelMatrix,y.normalModelMatrix.uniformOffsetForData/Float32Array.BYTES_PER_ELEMENT),y.localMatrix&&this.#Rn.set(this.localMatrix,y.localMatrix.uniformOffsetForData/Float32Array.BYTES_PER_ELEMENT),je=!0,this.#Cn=!1,P.queue.writeBuffer(T,b.matrixList.startOffset,this.#Rn)}this.dirtyOpacity&&(Xe=!0,b.combinedOpacity&&(nr[0]=this.getCombinedOpacity(),P.queue.writeBuffer(T,b.combinedOpacity.uniformOffset,nr)),this.dirtyOpacity=!1);const{bundleListRender2PathLayer:z,bundleListParticleLayer:H,bundleListTransparentLayer:$,bundleListAlphaLayer:q,bundleListBasicList:Ke}=i;{const{fragmentUniformBindGroup:m}=Ge.gpuRenderInfo;if(this.#vn&&!Ye&&this.#Sn===m&&this.#yn[i.viewIndex]===g.systemUniform_Vertex_UniformBindGroup||(this.#En(),this.#Bn(i)),i.numDrawCalls++,ye.indexBuffer){const{indexBuffer:m}=ye,{indexCount:g,triangleCount:x}=m;i.numTriangles+=x,i.numPoints+=g}else{const{vertexBuffer:m}=ye,{vertexCount:g,triangleCount:x}=m;i.numTriangles+=x,i.numPoints+=g}const x=this.#bn;Ge.use2PathRender?z[z.length]=x:this.meshType===Tn.PARTICLE?H[H.length]=x:Ge.transparent?($[$.length]=x,x.mesh=this):2===Ge.alphaBlend||Ge.opacity<1||!this.depthStencilState.depthWriteEnabled?q[q.length]=x:Ke[Ke.length]=x}this.#hn&&(W.castingList[W.castingList.length]=this)}(this.castShadow||this.castShadow&&!ye)&&(q[q.length]=this),this.#pn&&this.#mn.render(i);const{children:at}=this;let ht=0;const ft=at.length;for(this.dirtyTransform=!1;ht<ft;ht++){const m=at[ht];je&&(m.dirtyTransform=je),Xe&&(m.dirtyOpacity=Xe),m.render(i)}}#Bn(i){const{redGPUContext:m,geometry:g}=this,{gpuDevice:x,antialiasingManager:_}=m,{useMSAA:b}=_,{view:y}=i,{pipeline:T,vertexUniformBindGroup:w}=this.gpuRenderInfo,{vertexBuffer:P,indexBuffer:z}=this._geometry,{fragmentUniformBindGroup:H}=this._material.gpuRenderInfo;this.#vn=null,this.#vn=x.createRenderBundleEncoder({colorFormats:[navigator.gpu.getPreferredCanvasFormat(),navigator.gpu.getPreferredCanvasFormat(),"rgba16float"],depthStencilFormat:"depth32float",sampleCount:b?4:1,label:this.uuid});const $=this.#vn;{const{gpuBuffer:m}=P;if(this.#yn[i.viewIndex]=y.systemUniform_Vertex_UniformBindGroup,this.#Sn=H,$.setPipeline(T),$.setVertexBuffer(0,m),this.particleBuffers?.length&&this.particleBuffers.forEach((i,m)=>{$.setVertexBuffer(m+1,i)}),$.setBindGroup(0,y.systemUniform_Vertex_UniformBindGroup),$.setBindGroup(1,w),$.setBindGroup(2,H),z){const{indexBuffer:i}=g,{indexCount:m,gpuBuffer:x,format:_}=i;$.setIndexBuffer(x,_),this.particleBuffers?$.drawIndexed(m,this.particleNum,0,0,0):$.drawIndexedIndirect(this.#Tn.buffer,4*this.#Tn.commandOffset)}else $.drawIndirect(this.#Tn.buffer,4*this.#Tn.commandOffset);this.#bn=$.finish(),this.#bn.mesh=null}}#En(){const{geometry:i}=this,{vertexBuffer:m,indexBuffer:g}=i,x=this.#wn;if(this.#Tn||(this.#Tn=x.allocateDrawCommand(this.name)),g){const{indexCount:i}=g;this.particleBuffers||(x.setIndexedIndirectCommand(this.#Tn,i,1,0,0,0),x.updateSingleCommand(this.#Tn))}else{const{vertexCount:i}=m;x.setIndirectCommand(this.#Tn,i,1,0,0),x.updateSingleCommand(this.#Tn)}}initGPURenderInfos(){this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null,null,null),updateMeshDirtyPipeline(this)}createMeshVertexShaderModuleBASIC=(i,m,g,x)=>{const{redGPUContext:_}=this,{gpuRenderInfo:b}=this;return b.vertexUniformInfo!==g&&(b.vertexUniformInfo=g,b.vertexStructInfo=m,createMeshVertexUniformBuffers(this)),b.vertexShaderSourceVariant=m.shaderSourceVariant,b.vertexShaderVariantConditionalBlocks=m.conditionalBlocks,b.vertexUniformBindGroup=_.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(this)),this.#$e(i),this.gpuRenderInfo.vertexShaderModule};#$e(i){const{gpuDevice:m,resourceManager:g}=this.redGPUContext,x=this.#We(),_=`${i}_${x}`;let b=g.getGPUShaderModule(_);if(!b){let i=this.gpuRenderInfo.vertexShaderSourceVariant.getVariant(x);if(i)if(this.animationInfo?.skinInfo){const m=`${this.animationInfo.skinInfo.joints.length}`;i=i.replaceAll("#JOINT_NUM",m),this.gpuRenderInfo.vertexShaderSourceVariant.getVariant(x),b=g.createGPUShaderModule(`${_}_${m}`,{code:i})}else b=g.createGPUShaderModule(_,{code:i});else console.warn("⚠️ 버텍스 바리안트 소스를 찾을 수 없음:",x),b=this.gpuRenderInfo.vertexShaderModule}this.gpuRenderInfo.vertexShaderModule=b}#We(){const{vertexShaderVariantConditionalBlocks:i}=this.gpuRenderInfo,m=new Set;for(const g of i)this[g]&&m.add(g);const g=m.size>0?Array.from(m).sort().join("+"):"none";return m.size,g}}Object.defineProperty(Mesh.prototype,"meshType",{value:Tn.MESH,writable:!1}),Ge.defineByPreset(Mesh,[Ge.PRESET_BOOLEAN.RECEIVE_SHADOW]),Ge.defineBoolean(Mesh,[["useDisplacementTexture",!1],["disableJitter",!1]]),Object.freeze(Mesh);const calculateMeshCombinedAABB=i=>{const m=[];return collectRecursive(i,m),0===m.length?new AABB(0,0,0,0,0,0):calculateCombinedAABBFromAABBs(m)},collectRecursive=(i,m)=>{if(i._geometry){const g=i.boundingAABB;0===g.minX&&0===g.maxX&&0===g.minY&&0===g.maxY&&0===g.minZ&&0===g.maxZ||m.push(g)}if(i.children)for(let g=0;g<i.children.length;g++){const x=i.children[g];x instanceof Mesh&&collectRecursive(x,m)}},calculateCombinedAABBFromAABBs=i=>{if(0===i.length)return new AABB(0,0,0,0,0,0);if(1===i.length)return i[0];let m=1/0,g=1/0,x=1/0,_=-1/0,b=-1/0,y=-1/0;for(let T=0;T<i.length;T++){const w=i[T];w.minX<m&&(m=w.minX),w.minY<g&&(g=w.minY),w.minZ<x&&(x=w.minZ),w.maxX>_&&(_=w.maxX),w.maxY>b&&(b=w.maxY),w.maxZ>y&&(y=w.maxZ)}return new AABB(m,_,g,b,x,y)};let ir,ar,sr,or,ur,lr,cr=create$1(),hr=create$2(),fr=create$2();const screenToWorld=(i,m,g)=>{const{rawCamera:x,pixelRectArray:_}=g;return ir=2*(i*window.devicePixelRatio+_[0])/_[2]-1,ar=-2*(m*window.devicePixelRatio+_[1])/_[3]+1,sr=1,multiply(fr,g.noneJitterProjectionMatrix,x.modelMatrix),lr=clone(fr),invert(lr,lr),cr=fromValues(ir,ar,1),identity(hr),translate(hr,hr,cr),multiply(lr,lr,hr),cr[0]=lr[12],cr[1]=lr[13],cr[2]=lr[14],or=fr[12]*ir+fr[13]*ar+fr[15],0!==or&&(ur=1/or,cr[0]/=ur,cr[1]/=ur,cr[2]/=ur,cr[0]=cr[0]+x.x,cr[1]=cr[1]+x.y,cr[2]=cr[2]+x.z),[cr[0],cr[1],cr[2]]};function calculateTextureByteSize(i){const m={size:[i.width,i.height,i.depthOrArrayLayers],format:i.format,sampleCount:i.sampleCount,usage:i.usage};return function(i){switch(i){case"r8unorm":case"r8snorm":case"r8uint":case"r8sint":return 1;case"r16uint":case"r16sint":case"r16float":case"rg8unorm":case"rg8snorm":case"rg8uint":case"rg8sint":case"depth16unorm":return 2;case"r32uint":case"r32sint":case"r32float":case"rg16uint":case"rg16sint":case"rg16float":case"rgba8unorm":case"rgba8unorm-srgb":case"rgba8snorm":case"rgba8uint":case"rgba8sint":case"bgra8unorm":case"bgra8unorm-srgb":case"depth24plus":case"depth32float":return 4;case"rg32uint":case"rg32sint":case"rg32float":case"rgba16uint":case"rgba16sint":case"rgba16float":return 8;case"rgba32uint":case"rgba32sint":case"rgba32float":return 16;default:throw new Error(`Unrecognized texture format:${i}`)}}(m.format)*(m.size[0]*m.size[1]*(m.size[2]||1))*(m.sampleCount?m.sampleCount:1)}const imageBitmapToGPUTexture=(i,m,g,x=!0)=>{const _=i.createTexture(g);for(let b=0;b<m.length;b++){const y=m[b],T={source:y},w={texture:_,origin:[0,0,b],premultipliedAlpha:x};g.format.includes("srgb")&&(w.colorSpace="srgb");const P=[y.width,y.height];i.queue.copyExternalImageToTexture(T,w,P)}return _};async function loadAndCreateBitmapImage(i,m="none",g="premultiply"){const x=await fetch(i),_=await x.blob();return createImageBitmap(_,{colorSpaceConversion:m,premultiplyAlpha:g})}const dr=console.log.bind(console);var mr=Object.freeze({__proto__:null,AABB:AABB,InstanceIdGenerator:InstanceIdGenerator,OBB:OBB,calculateGeometryAABB:calculateGeometryAABB,calculateMeshAABB:calculateMeshAABB,calculateMeshCombinedAABB:calculateMeshCombinedAABB,calculateMeshOBB:calculateMeshOBB,calculateNormals:calculateNormals,calculateTextureByteSize:calculateTextureByteSize,computeViewFrustumPlanes:computeViewFrustumPlanes,convertHexToRgb:convertHexToRgb,convertRgbToHex:convertRgbToHex,copyGPUBuffer:copyGPUBuffer,copyToTextureArray:function(i,m,g,x){const _=i.createCommandEncoder({label:"COPY_TO_TEXTURE_ARRAY"});_.copyTextureToTexture({texture:m},{texture:g,origin:[0,0,x]},[m.width,m.height,1]),i.queue.submit([_.finish()])},createUUID:createUUID,formatBytes:formatBytes,getAbsoluteURL:getAbsoluteURL,getFileExtension:getFileExtension,getFileName:getFileName,getFilePath:getFilePath,getMipLevelCount:getMipLevelCount,getScreenPoint:getScreenPoint,imageBitmapToGPUTexture:imageBitmapToGPUTexture,keepLog:dr,loadAndCreateBitmapImage:loadAndCreateBitmapImage,localToWorld:localToWorld,matToEuler:mat4ToEuler,quaternionToRotationMat4:quaternionToRotationMat4,screenToWorld:screenToWorld,sortTransparentObjects:sortTransparentObjects,uuidToUint:uuidToUint,worldToLocal:worldToLocal});class ResourceStateBitmapTexture{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class BitmapTexture extends ManagementResourceBase{#ge;#In;#Ln;#Dn;#Un;#An=0;#kn=!0;#vt;#On;#Gn;constructor(i,m,g=!0,x,_,b,y=!1){if(super(i,"managedBitmapTextureState"),this.#On=x,this.#Gn=_,this.#kn=y,this.#Dn=g,this.#vt=b||navigator.gpu.getPreferredCanvasFormat(),m){this.#In=this.#Fn(m),this.cacheKey=this.#Nn(m);const{table:i}=this.targetResourceManagedState;let g=i.get(this.cacheKey);if(g){const i=g.texture;return this.#On?.(i),i}this.src=m,this.#Vn()}}get width(){return this.#Un?.width||0}get height(){return this.#Un?.height||0}get usePremultiplyAlpha(){return this.#kn}get videoMemorySize(){return this.#An}get gpuTexture(){return this.#ge}get mipLevelCount(){return this.#Ln}get src(){return this.#In}set src(i){this.#In=this.#Fn(i),this.cacheKey=this.#Nn(i),this.#In&&this.#zn(this.#In)}get useMipmap(){return this.#Dn}set useMipmap(i){this.#Dn=i,this.#Hn()}destroy(){const i=this.#ge;this.#$n(null),this.__fireListenerList(!0),this.#Wn(),this.cacheKey=null,this.#In=null,i&&i.destroy()}#Nn(i){return i?"string"==typeof i?getAbsoluteURL(window.location.href,i):i.cacheKey||getAbsoluteURL(window.location.href,i.src):this.uuid}#Fn(i){return"string"==typeof i?i:i.src}#$n(i){this.#ge=i,i||(this.#Un=null),this.__fireListenerList()}#Vn(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateBitmapTexture(this))}#Wn(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}#Hn(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#ge&&(this.#ge.destroy(),this.#ge=null),this.targetResourceManagedState.videoMemory-=this.#An,this.#An=0;const{width:x,height:_}=this.#Un;this.#Ln=1;const b={size:[x,_],format:this.#vt,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:this.#In};this.#Dn&&(this.#Ln=getMipLevelCount(x,_),b.mipLevelCount=this.#Ln,b.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const y=imageBitmapToGPUTexture(i,[this.#Un],b,this.#kn);this.#An=calculateTextureByteSize(y),this.targetResourceManagedState.videoMemory+=this.#An,this.#Dn&&g.generateMipmap(y,b),this.#$n(y)}async#Kn(i){return new Promise((m,g)=>{const x=new Image;x.src=i,x.onload=()=>{const i=document.createElement("canvas");i.width=x.width||512,i.height=x.height||512;const _=i.getContext("2d");_?(_.fillStyle="rgba(0,0,0,0)",_.fillRect(0,0,i.width,i.height),_.drawImage(x,0,0,i.width,i.height),createImageBitmap(i,{colorSpaceConversion:"none",premultiplyAlpha:this.#kn?"premultiply":"none"}).then(m).catch(g)):g(new Error("Canvas context could not be created."))},x.onerror=i=>{g(new Error(`Failed to load SVG:${i}`))}})}async#zn(i){try{i.endsWith(".svg")?this.#Un=await this.#Kn(i):this.#Un=await loadAndCreateBitmapImage(i,"none",this.#kn?"premultiply":"none"),this.#Hn(),this.#On?.(this)}catch(i){console.error(i),this.#Gn?.(i)}}}Object.freeze(BitmapTexture);class DownSampleCubeMapGenerator{#l;#jn=new Map;#Xn=new Map;#qn=null;#Yn=null;#Zn=null;#Jn=null;#Qn=8;#er=8;#tr=new Map;#_e=new Map;constructor(i){this.#l=i}createSourceTextureView(i,m){const g=`DOWN_SAMPLE_CUBE_GENERATOR_SOURCE_VIEW_${i.label}_${m}`;if(!this.#tr.has(g)){const x=i.createView({label:g,dimension:"cube",baseMipLevel:m,mipLevelCount:1});this.#tr.set(g,x)}return this.#tr.get(g)}createTargetTextureView(i,m){const g=`DOWN_SAMPLE_CUBE_GENERATOR_TARGET_VIEW_${i.label}_${m}`;if(!this.#tr.has(g)){const x=i.createView({label:g,dimension:"2d-array",baseMipLevel:m,mipLevelCount:1,arrayLayerCount:6});this.#tr.set(g,x)}return this.#tr.get(g)}createBindGroup(i,m,g){const x=`DOWN_SAMPLE_CUBE_GENERATOR_BIND_GROUP_${m.label}_${g.label}`;if(!this.#_e.has(x)){const{gpuDevice:_}=this.#l,b=_.createBindGroup({label:x,layout:i,entries:[{binding:0,resource:m},{binding:1,resource:g},{binding:2,resource:this.#Jn},{binding:3,resource:{buffer:this.#Yn}}]});this.#_e.set(x,b)}return this.#_e.get(x)}async downsampleCubemap(i,m=256,g="rgba8unorm"){try{this.#nr(),this.#rr();const{gpuDevice:x,resourceManager:_}=this.#l;if(!i)throw new Error("Invalid source cubemap texture");if(m<=0||!Number.isInteger(m))throw new Error("Target size must be a positive integer");const b=i.mipLevelCount,y=getMipLevelCount(m,m),T=_.createManagedTexture({size:[m,m,6],format:g,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:y,label:`DOWN_SAMPLE_CUBE_GENERATOR_TEXTURE_${m}x${m}_${y}mips_${Date.now()}`});for(let x=0;x<y;x++){const _=Math.max(1,m>>x),y=this.#ir(i.width,m,x,b);await this.#ar(i,T,y,x,_,g)}return this.#nr(),T}catch(i){throw console.error("큐브맵 다운샘플링 실패:",i),this.#nr(),i}}destroy(){this.#nr(),this.#Yn&&(this.#Yn.destroy(),this.#Yn=null),this.#jn.clear(),this.#Xn.clear(),this.#qn=null,this.#Jn=null}#nr(){this.#tr.clear(),this.#_e.clear()}#rr(){if(this.#qn)return;const{gpuDevice:i,resourceManager:m}=this.#l;this.#Jn=new Sampler(this.#l,{minFilter:"linear",magFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}).gpuSampler,this.#qn=m.createGPUShaderModule("DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_SHADER",{code:"\nstruct Uniforms { targetSize:f32, sourceMipLevel:f32, targetMipLevel:f32, padding:f32,\n};\n@group(0) @binding(0) var sourceCubemap:texture_cube<f32>;\n@group(0) @binding(1) var targetCubemap:texture_storage_2d_array<rgba8unorm,write>;\n@group(0) @binding(2) var cubemapSampler:sampler;\n@group(0) @binding(3) var<uniform> uniforms:Uniforms;\nfn cubemapUVToDirection(uv:vec2<f32>,face:u32) -> vec3<f32> { let u=uv.x * 2.0 - 1.0; let v=uv.y * 2.0 - 1.0; switch face { case 0u:{ return vec3<f32>(1.0,-v,-u); } case 1u:{ return vec3<f32>(-1.0,-v,u); } case 2u:{ return vec3<f32>(u,1.0,v); } case 3u:{ return vec3<f32>(u,-1.0,-v); } case 4u:{ return vec3<f32>(u,-v,1.0); } case 5u:{ return vec3<f32>(-u,-v,-1.0); } default:{ return vec3<f32>(0.0,0.0,1.0); } }\n}\nfn gaussianWeight(x:f32,y:f32,sigma:f32) -> f32 { let sigmaSq=sigma * sigma; return exp(-(x * x + y * y)/(2.0 * sigmaSq))/(2.0 * 3.14159265359 * sigmaSq);\n}\nfn clampCubemapUV(uv:vec2<f32>) -> vec2<f32> { return clamp(uv,vec2<f32>(0.0),vec2<f32>(1.0));\n}\n@compute @workgroup_size(8,8,1)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let face=global_id.z; let coord=vec2<u32>(global_id.xy); let targetSize=u32(uniforms.targetSize); if (coord.x >=targetSize || coord.y >=targetSize || face >=6u) { return; } let uv=(vec2<f32>(coord) + 0.5)/f32(targetSize); let direction=normalize(cubemapUVToDirection(uv,face)); let sourceMipLevel=uniforms.sourceMipLevel; let targetMipLevel=uniforms.targetMipLevel; var color=vec4<f32>(0.0); if (sourceMipLevel==0.0 && targetSize > 64u) { let sampleCount=16u; let sampleRadius=1.0/f32(targetSize); var totalWeight=0.0; for (var i=0u;i < sampleCount;i++) { let angle=2.0 * 3.14159265359 * f32(i)/f32(sampleCount); let radius=sampleRadius * (0.5 + 0.5 * f32(i % 4u)/4.0); let offsetUV=clampCubemapUV(uv + vec2<f32>( cos(angle) * radius, sin(angle) * radius )); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); let sampleColor=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); let weight=gaussianWeight( cos(angle) * radius * f32(targetSize), sin(angle) * radius * f32(targetSize), 0.8 ); color +=sampleColor * weight; totalWeight +=weight; } if (totalWeight > 0.0) { color=color/totalWeight; } } else if (sourceMipLevel==0.0 && targetSize > 16u) { let sampleCount=4u; let invSampleCount=1.0/f32(sampleCount * sampleCount); let sampleOffset=0.5/f32(targetSize); for (var x=0u;x < sampleCount;x++) { for (var y=0u;y < sampleCount;y++) { let offset=vec2<f32>( (f32(x) - 1.5) * sampleOffset, (f32(y) - 1.5) * sampleOffset ); let offsetUV=clampCubemapUV(uv + offset); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); } } color *=invSampleCount; } else if (targetSize > 4u) { let sampleCount=2u; let invSampleCount=1.0/f32(sampleCount * sampleCount); let sampleOffset=0.25/f32(targetSize); for (var x=0u;x < sampleCount;x++) { for (var y=0u;y < sampleCount;y++) { let offset=vec2<f32>( (f32(x) - 0.5) * sampleOffset, (f32(y) - 0.5) * sampleOffset ); let offsetUV=clampCubemapUV(uv + offset); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); } } color *=invSampleCount; } else { color=textureSampleLevel(sourceCubemap,cubemapSampler,direction,sourceMipLevel); } if (targetMipLevel > 0.0) { let luminance=dot(color.rgb,vec3<f32>(0.299,0.587,0.114)); let saturation=0.9 + 0.1/(1.0 + targetMipLevel * 0.1); color=vec4<f32>(mix(vec3<f32>(luminance),color.rgb,saturation),color.a); } textureStore(targetCubemap,vec2<i32>(coord),i32(face),color);\n}\n"}),this.#sr()}#or(i){if(!this.#jn.has(i)){const{gpuDevice:m,resourceManager:g}=this.#l,x=g.createBindGroupLayout(`DOWN_SAMPLE_CUBE_GENERATOR_BIND_GROUP_LAYOUT_${i}`,{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{viewDimension:"cube",sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:i,viewDimension:"2d-array"}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),_=m.createComputePipeline({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_PIPELINE_${i}`,layout:m.createPipelineLayout({label:`DOWN_SAMPLE_CUBE_GENERATOR_PIPELINE_LAYOUT_${i}`,bindGroupLayouts:[x]}),compute:{module:this.#qn,entryPoint:"main"}});this.#Xn.set(i,x),this.#jn.set(i,_)}return this.#jn.get(i)}#sr(){const{gpuDevice:i,resourceManager:m}=this.#l;this.#Zn={arrayBufferByteLength:16,properties:{targetSize:{byteOffset:0,size:4},sourceMipLevel:{byteOffset:4,size:4},targetMipLevel:{byteOffset:8,size:4},padding:{byteOffset:12,size:4}}},this.#Yn=i.createBuffer({size:this.#Zn.arrayBufferByteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"DOWN_SAMPLE_CUBE_GENERATOR_UNIFORM_BUFFER"})}#ir(i,m,g,x){const _=i/Math.max(1,m>>g),b=Math.max(0,Math.floor(Math.log2(_)));return Math.min(b,x-1)}async#ar(i,m,g,x,_,b){const{gpuDevice:y}=this.#l,T=this.#or(b),w=this.#Xn.get(b),P=this.createSourceTextureView(i,g),z=this.createTargetTextureView(m,x),H=this.createBindGroup(w,P,z);this.#ur(g,x,_);const $=y.createCommandEncoder({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMMAND_ENCODER_MIP${x}`}),W=$.beginComputePass({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_PASS_MIP${x}`});W.setPipeline(T),W.setBindGroup(0,H),W.dispatchWorkgroups(Math.ceil(_/this.#Qn),Math.ceil(_/this.#er),6),W.end();const q=$.finish();y.queue.submit([q]),await y.queue.onSubmittedWorkDone()}#ur(i,m,g){const{gpuDevice:x}=this.#l,_=new Float32Array([g,i,m,0]);x.queue.writeBuffer(this.#Yn,0,_)}}Object.freeze(DownSampleCubeMapGenerator);const pr={LOAD:"load",CLEAR:"clear"};Object.freeze(pr);const gr={STORE:"store",DISCARD:"discard"};Object.freeze(gr);class MipmapGenerator{#l;#pe;#lr;#cr;#ze;#hr;#tr=new Map;#_e=new Map;#fr=new WeakMap;#dr=new WeakMap;constructor(i){this.#l=i,this.#pe=new Sampler(i,{minFilter:"linear"}).gpuSampler,this.#cr={}}createTextureView(i,m,g,x=!1){const _=`${m}_${g}`;if(x){let x=this.#dr.get(i);if(x||(x=new Map,this.#dr.set(i,x)),x.has(_))return x.get(_);const b=i.createView({baseMipLevel:m,mipLevelCount:1,dimension:"2d",baseArrayLayer:g,arrayLayerCount:1,label:`MIPMAP_GENERATOR_CACHED_${i.label}_${_}`});return x.set(_,b),b}{const x=`MIPMAP_GENERATOR_${i.label}_${m}_${g}`;if(!this.#tr.has(x)){const _=i.createView({baseMipLevel:m,mipLevelCount:1,dimension:"2d",baseArrayLayer:g,arrayLayerCount:1,label:x});this.#tr.set(x,_)}return this.#tr.get(x)}}createBindGroup(i,m,g=!1){const{gpuDevice:x}=this.#l;if(g){let g=this.#fr.get(i);g||(g=new Map,this.#fr.set(i,g));const _=m.label||"unlabeled";if(g.has(_))return g.get(_);const b=x.createBindGroup({label:`MIPMAP_GENERATOR_BIND_GROUP_CACHED_${i.label}_${_}`,layout:this.#ze,entries:[{binding:0,resource:this.#pe},{binding:1,resource:m}]});return g.set(_,b),b}{const g=`${i.label}_${m.label}`;if(this.#_e.has(g))return this.#_e.get(g);const _=x.createBindGroup({label:`MIPMAP_GENERATOR_BIND_GROUP_TEMP_${g}`,layout:this.#ze,entries:[{binding:0,resource:this.#pe},{binding:1,resource:m}]});return this.#_e.set(g,_),_}}getMipmapPipeline(i){const{gpuDevice:m,resourceManager:g}=this.#l;let x=this.#cr[i];return x||(this.#hr||(this.#hr=g.createGPUShaderModule("MIPMAP_GENERATOR_SHADER_MODULE",{code:"\nvar<private> pos:array<vec2<f32>,3>=array<vec2<f32>,3>( vec2<f32>(-1.0,-1.0), vec2<f32>(-1.0,3.0), vec2<f32>(3.0,-1.0)\n);\nstruct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n};\n@vertex\nfn vertexMain(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var output:VertexOutput; output.texCoord=pos[vertexIndex] * vec2<f32>(0.5,-0.5) + vec2<f32>(0.5); output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); return output;\n}\n@group(0) @binding(0)\nvar imgSampler:sampler;\n@group(0) @binding(1)\nvar img:texture_2d<f32>;\n@fragment\nfn fragmentMain(@location(0) texCoord:vec2<f32>) -> @location(0) vec4<f32> { return textureSample(img,imgSampler,texCoord);\n}\n"}),this.#ze=g.createBindGroupLayout("MIPMAP_GENERATOR_FRAGMENT_BIND_GROUP_LAYOUT",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]}),this.#lr=g.createGPUPipelineLayout("MIPMAP_GENERATOR_PIPELINE_LAYOUT",{bindGroupLayouts:[this.#ze]})),x=m.createRenderPipeline({label:`MIPMAP_GENERATOR_PIPELINE_${i}`,layout:this.#lr,vertex:{module:this.#hr,entryPoint:"vertexMain"},fragment:{module:this.#hr,entryPoint:"fragmentMain",targets:[{format:i}]}}),this.#cr[i]=x),x}generateMipmap(i,m,g=!1){g||this.#nr();const{gpuDevice:x,resourceManager:_}=this.#l,b=this.getMipmapPipeline(m.format);if("3d"==m.dimension||"1d"==m.dimension)throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");let y=i;const T=m.size[0],w=m.size[1],P=m.size[2]||1,z=m.usage&GPUTextureUsage.RENDER_ATTACHMENT;if(!z){const i={size:{width:Math.max(1,T>>>1),height:Math.max(1,w>>>1),depthOrArrayLayers:P},format:m.format,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,mipLevelCount:m.mipLevelCount-1};y=_.createManagedTexture(i)}const H=x.createCommandEncoder({});for(let x=0;x<P;++x){let _=this.createTextureView(i,0,x,g),T=z?1:0;for(let w=1;w<m.mipLevelCount;++w){const m=this.createTextureView(y,T++,x,g),w=H.beginRenderPass({colorAttachments:[{view:m,clearValue:{r:0,g:0,b:0,a:0},loadOp:pr.CLEAR,storeOp:gr.STORE}]}),P=this.createBindGroup(i,_,g);w.setPipeline(b),w.setBindGroup(0,P),w.draw(3,1,0,0),w.end(),_=m}}if(!z){const g={width:Math.max(1,T>>>1),height:Math.max(1,w>>>1),depthOrArrayLayers:P};for(let x=1;x<m.mipLevelCount;++x)H.copyTextureToTexture({texture:y,mipLevel:x-1},{texture:i,mipLevel:x},g),g.width=Math.max(1,g.width>>>1),g.height=Math.max(1,g.height>>>1)}return x.queue.submit([H.finish()]),z||y.destroy(),g||this.#nr(),i}destroy(){this.#nr()}#nr(){this.#tr.clear(),this.#_e.clear()}}Object.freeze(MipmapGenerator);class ResourceStateCubeTexture{texture;srcList;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.srcList=i instanceof CubeTexture?i.srcList:void 0,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class CubeTexture extends ManagementResourceBase{static defaultViewDescriptor={dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6};#ge;#mr;#Ln;#Dn;#pr;#An=0;#vt;#On;#Gn;constructor(i,m,g=!0,x,_,b){super(i,"managedCubeTextureState"),this.#On=x,this.#Gn=_,this.#Dn=g,this.#vt=b||navigator.gpu.getPreferredCanvasFormat(),this.#mr=this.#Fn(m),this.cacheKey=this.#Nn(m);const{table:y}=this.targetResourceManagedState;if(m){let i=y.get(this.cacheKey);if(i){const m=i.texture;return this.#On?.(m),m}this.srcList=m,this.#Vn()}}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#Ln}}get videoMemorySize(){return this.#An}get gpuTexture(){return this.#ge}get mipLevelCount(){return this.#Ln}get srcList(){return this.#mr}set srcList(i){this.#mr=this.#Fn(i),this.cacheKey=this.#Nn(i),this.#mr?.length&&this.#zn(this.#mr)}get useMipmap(){return this.#Dn}set useMipmap(i){this.#Dn=i,this.#Hn()}destroy(){const i=this.#ge;this.#$n(null),this.__fireListenerList(!0),this.#Wn(),this.#mr=null,this.cacheKey=null,i&&i.destroy()}setGPUTextureDirectly(i,m,g=!0){this.#ge&&(this.#ge.destroy(),this.targetResourceManagedState.videoMemory-=this.#An),this.#ge=i,this.#Dn=g,this.#Ln=i.mipLevelCount,this.cacheKey=m||`direct_${this.uuid}`,this.#An=calculateTextureByteSize(i),this.targetResourceManagedState.videoMemory+=this.#An,this.__fireListenerList()}#Nn(i){return i?i instanceof Array?i.length?i.toString():this.uuid:i.cacheKey||i.srcList.toString():this.uuid}#Fn(i){return i instanceof Array?i:i?.srcList}#$n(i){this.#ge=i,i||(this.#pr=null),this.__fireListenerList()}#Vn(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateCubeTexture(this))}#Wn(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}#Hn(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#ge&&(this.#ge.destroy(),this.#ge=null),this.#Ln=1;{const m=this.#pr,x=m[0],{width:_,height:b}=x,y={size:[_,b,6],format:this.#vt,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`cubeTexture_${this.#mr?.toString()||this.uuid}`};this.#Dn&&(this.#Ln=getMipLevelCount(_,b),y.mipLevelCount=this.#Ln,y.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const T=imageBitmapToGPUTexture(i,m,y);this.targetResourceManagedState.videoMemory-=this.#An,this.#An=calculateTextureByteSize(T),this.targetResourceManagedState.videoMemory+=this.#An,this.#Dn&&g.generateMipmap(T,y),this.#$n(T)}}async#zn(i){this.#pr=await async function(i){const m=i.map(i=>loadAndCreateBitmapImage(i));return await Promise.all(m)}(i);try{this.#Hn(),this.#On?.(this)}catch(i){console.error(i),this.#Gn?.(i)}}}Object.freeze(CubeTexture);class ResourceStatusInfo{table=new Map;videoMemory=0;constructor(){}}var xr;Object.freeze(ResourceStatusInfo),function(i){i.GPUShaderModule="GPUShaderModule",i.GPUBindGroupLayout="GPUBindGroupLayout",i.GPUPipelineLayout="GPUPipelineLayout",i.GPUBuffer="GPUBuffer"}(xr||(xr={}));class ResourceManager{static PRESET_GPUBindGroupLayout_System="PRESET_GPUBindGroupLayout_System";static PRESET_VERTEX_GPUBindGroupLayout_Instancing="PRESET_VERTEX_GPUBindGroupLayout_Instancing";static PRESET_VERTEX_GPUBindGroupLayout="PRESET_VERTEX_GPUBindGroupLayout";static PRESET_VERTEX_GPUBindGroupLayout_SKIN="PRESET_VERTEX_GPUBindGroupLayout_SKIN";#gr=0;#xr=new ImmutableKeyMap([[xr.GPUShaderModule,new Map],[xr.GPUBindGroupLayout,new Map],[xr.GPUPipelineLayout,new Map],[xr.GPUBuffer,new MemoryTrackingMap]]);#_r=new ResourceStatusInfo;#vr=new ResourceStatusInfo;#br=new ResourceStatusInfo;#yr=new ResourceStatusInfo;#Sr=new ResourceStatusInfo;#Tr=new ResourceStatusInfo;#wr=new ResourceStatusInfo;#Mr={};#Cr;#Le;#Rr;#Pr;#Er;#Br=new WeakMap;#Ir=new WeakMap;#l;#M;constructor(i){this.#l=i,this.#M=i.gpuDevice,this.#Rr=new MipmapGenerator(i),this.#Pr=new DownSampleCubeMapGenerator(i),this.#Lr()}get redGPUContext(){return this.#l}get gpuDevice(){return this.#M}get basicSampler(){return this.#Er}get mipmapGenerator(){return this.#Rr}get downSampleCubeMapGenerator(){return this.#Pr}get cachedBufferState(){return this.#Mr}get emptyBitmapTextureView(){return this.#Cr}get emptyCubeTextureView(){return this.#Le}get managedBitmapTextureState(){return this.#_r}get managedCubeTextureState(){return this.#vr}get managedHDRTextureState(){return this.#br}get managedUniformBufferState(){return this.#yr}get managedVertexBufferState(){return this.#Sr}get managedIndexBufferState(){return this.#Tr}get managedStorageBufferState(){return this.#wr}get resources(){return this.#xr}registerManagementResource(i,m){const{cacheKey:g,targetResourceManagedState:x}=i,{table:_}=x;_.get(g)?dr(`Resource with cacheKey ${g} is already registered.`):(_.set(g,m),x.videoMemory+=i.videoMemorySize)}unregisterManagementResource(i){const{cacheKey:m,targetResourceManagedState:g}=i,{table:x}=g;x.get(m)&&(g.videoMemory-=i.videoMemorySize,x.delete(m))}createManagedTexture(i){const m=this.gpuDevice.createTexture(i),g=m.destroy.bind(m);return m.destroy=()=>{this.#Dr(m,i),g()},m}getGPUResourceBitmapTextureView(i,m){const g=i instanceof GPUTexture?i:i?.gpuTexture;if(!g)return this.#Cr;let x=this.#Br.get(g);x||(x=new Map,this.#Br.set(g,x));const _=this.#Ur(m);let b=x.get(_);if(!b){const i=m?{...m,label:m.label||g.label}:{label:g.label};b=g.createView(i),x.set(_,b)}return b}getGPUResourceCubeTextureView(i,m){const g=i instanceof GPUTexture?i:i?.gpuTexture;if(!g)return this.#Le;let x=this.#Ir.get(g);x||(x=new Map,this.#Ir.set(g,x)),i instanceof GPUTexture||m||(m=i.viewDescriptor);const _=m||CubeTexture.defaultViewDescriptor,b=this.#Ur(_);let y=x.get(b);if(!y){const i={..._,label:g.label};y=g.createView(i),x.set(b,y)}return y}createGPUShaderModule(i,m){return this.#Ar(i,m,m=>this.#kr(i,m),xr.GPUShaderModule)}getGPUShaderModule(i){return this.#Or(i,xr.GPUShaderModule)}deleteGPUShaderModule(i){this.#Gr(i,xr.GPUShaderModule)}createBindGroupLayout(i,m){return this.#Ar(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createBindGroupLayout(m)),xr.GPUBindGroupLayout)}getGPUBindGroupLayout(i){return this.#Or(i,xr.GPUBindGroupLayout)}deleteGPUBindGroupLayout(i){this.#Gr(i,xr.GPUBindGroupLayout)}createGPUPipelineLayout(i,m){return this.#Ar(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createPipelineLayout(m)),xr.GPUPipelineLayout)}createGPUBuffer(i,m){return this.#Ar(i,m,m=>(m.label||(m.label=i),this.gpuDevice.createBuffer(m)),xr.GPUBuffer)}#Dr(i,m){const g="3d"===m.dimension?this.#Ir:this.#Br;g.get(i)?.clear(),g.delete(i)&&m.dimension}#Ur(i){return i?JSON.stringify(i):"default"}#Lr(){const{gpuDevice:i}=this.redGPUContext;{const m=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.STORAGE_BINDING,label:"EMPTY_BITMAP_TEXTURE"});this.#Cr=m.createView({label:m.label});const g=new Uint8Array([0,0,0,0]);i.queue.writeTexture({texture:m},g,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});const x=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:6},format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"EMPTY_CUBE_TEXTURE"});this.#Le=x.createView(CubeTexture.defaultViewDescriptor);const _=new Uint8Array([0,0,0,0]);for(let m=0;m<6;m++)i.queue.writeTexture({texture:x,origin:{x:0,y:0,z:m}},_,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});this.#Er=new Sampler(this.redGPUContext)}this.createBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:6,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:9,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}},{binding:3,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]})}#Fr(i){return this.#xr.get(i)}#kr(i,m){const{code:g}=m,x=preprocessWGSL(g).defaultSource,_=this.redGPUContext.gpuDevice.createShaderModule({...m,code:x});dr(_);return this.#Fr(xr.GPUShaderModule).set(i,_),_}#Nr(i,m){if(!i)throw new Error("Name is required");return this.#Fr(m)}#Ar(i,m,g,x){const _=this.#Nr(i,x);if(_.has(i))return _.get(i);m.label||(m.label=i);const b=g(m);return _.set(i,b),b}#Or(i,m){return this.#Nr(i,m).get(i)}#Gr(i,m){const g=this.#Nr(i,m);if(!g.has(i))throw new Error(`${m} with name ${i} doesn't exist.`);g.delete(i)}}Object.freeze(BitmapTexture);class ImmutableKeyMap extends Map{constructor(i=[]){super(),i?.forEach(([i,m])=>super.set(i,m))}set(i,m){if(this.has(i))throw new Error("Cannot change the value of an existing key");return super.set(i,m)}}class MemoryTrackingMap extends Map{#Vr=0;constructor(){super()}get videoMemory(){return this.#Vr}set(i,m){const g=m&&"videoMemorySize"in m?"videoMemorySize":m&&"size"in m?"size":void 0;if(this.has(i)){const m=this.get(i);m&&m[g]&&(this.#Vr-=m[g])}m&&m&&(this.#Vr+=m[g]);return super.set(i,m)}delete(i){if(this.has(i)){const m=this.get(i),g=m&&"videoMemorySize"in m?"videoMemorySize":m&&"size"in m?"size":void 0;m&&m[g]&&(this.#Vr-=m[g])}return super.delete(i)}clear(){this.#Vr=0,super.clear()}}class AntialiasingManager{#l;#zr;#Hr=!1;#$r=!1;#Wr=!0;#Kr=!0;constructor(i){this.#l=i,window.devicePixelRatio>1?(this.useTAA=!0,this.useMSAA=!1,this.useFXAA=!1):(this.useTAA=!1,this.useMSAA=!0,this.useFXAA=!1)}get useTAA(){return this.#Wr}set useTAA(i){this.#Wr=i}get useMSAA(){return this.#Hr}set useMSAA(i){this.#Hr!==i&&(this.#zr=createUUID()),this.#Hr=i,this.#Kr=!0}get msaaID(){return this.#zr}get useFXAA(){return this.#$r}set useFXAA(i){this.#$r=i}get changedMSAA(){return this.#Kr}set changedMSAA(i){this.#Kr=i}}Object.freeze(AntialiasingManager);class RedGPUContextSizeManager{#jr;#Xr;#l;#qr=[0,0,0,0];#Yr;#Zr=1;constructor(i,m="100%",g="100%"){this.#l=i,this.#Yr=i.htmlCanvas,this.#Yr.style.boxSizing="border-box",this.#jr=m,this.#Xr=g}get renderScale(){return this.#Zr}set renderScale(i){validateNumber(i),i<=0&&(i=.01),this.#Zr=i,this.setSize()}get width(){return this.#jr}set width(i){this.setSize(i,this.#Xr)}get height(){return this.#Xr}set height(i){this.setSize(this.#jr,i)}get pixelRectArray(){return this.#qr}get pixelRectObject(){return{x:this.#qr[0],y:this.#qr[1],width:this.#qr[2],height:this.#qr[3]}}get parentDomRect(){return(this.#Yr.parentNode||document.body).getBoundingClientRect()}get screenRectObject(){return{x:this.#qr[0]/devicePixelRatio,y:this.#qr[1]/devicePixelRatio,width:this.#qr[2]/devicePixelRatio,height:this.#qr[3]/devicePixelRatio}}static validateSizeValue=i=>{switch(typeof i){case"number":validatePositiveNumberRange(i);break;case"string":new RegExp(/^[+]?^[.]?(\d+)(\.\d+)?(?:px|%|$)/gm).test(i)||consoleAndThrowError(`allow positive number,%,px model/input:${i}`);break;default:consoleAndThrowError(`positive number,%,px model/input:${i}`)}};static validatePositionValue=i=>{switch(typeof i){case"number":validateNumber(i);break;case"string":new RegExp(/^-?\d+(\.\d+)?(px|%)?$/).test(i)||consoleAndThrowError(`allow number,%,px model /input:${i}`);break;default:consoleAndThrowError(`number,%,px model/input:${i}`)}};static getPixelDimension(i,m,g){return"number"==typeof g?g:RedGPUContextSizeManager.calculateSizeFromString(i,m,g)}static calculateSizeFromString(i,m,g){return g.includes("%")?Math.floor(i[m]*+g.replace("%","")/100):+g.replace("px","")}setSize(i=this.#jr,m=this.#Xr){RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#jr=i,this.#Xr=m;const g=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"width",i),x=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"height",m);this.#Jr(g,x),this.#Qr(g,x),this.#ei()}#Qr(i,m){this.#qr[2]=Math.floor(i*this.#Zr*window.devicePixelRatio),this.#qr[3]=Math.floor(m*this.#Zr*window.devicePixelRatio)}#ei(){this.#l.onResize&&this.#l.onResize(this.screenRectObject.width,this.screenRectObject.height),this.#l.viewList.forEach(i=>{i.setSize(),i.setPosition()})}#Jr(i,m){const g=this.#Yr,{style:x}=g;g.width=i*this.#Zr*window.devicePixelRatio,g.height=m*this.#Zr*window.devicePixelRatio,x.width=`${i}px`,x.height=`${m}px`}}class Camera2D{#R;#ti=create$2();#Xt=0;#qt=0;#Yt=0;#C;constructor(){}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get modelMatrix(){return this.#ti}get z(){return this.#Yt}get x(){return this.#Xt}set x(i){this.#Xt=i,this.#ti[12]=i}get y(){return this.#qt}set y(i){this.#qt=i,this.#ti[13]=i}get position(){return[this.#Xt,this.#qt]}setPosition(i,m){Array.isArray(i)?[this.#Xt,this.#qt]=i:(this.#Xt=i,this.#qt=m),[this.#ti[12],this.#ti[13],this.#ti[14]]=[this.#Xt,this.#qt,0]}}class PassClusterLightBound{#ni;#ri;#ii;#ai;#si;#l;constructor(i,m){validateRedGPUContext(i),this.#l=i,this.#ni=m,this.#oi()}get clusterBoundBuffer(){return this.#ri}render(){const i=this.#ni.systemUniform_Vertex_UniformBindGroup;if(i){const{gpuDevice:m}=this.#l,g=m.createCommandEncoder(),x=g.beginComputePass({label:"Bound cluster"}),_=Ht.getDispatchSize();x.setPipeline(this.#si),x.setBindGroup(0,i),x.setBindGroup(1,this.#ai),x.dispatchWorkgroups(_[0],_[1],_[2]),x.end(),m.queue.submit([g.finish()])}}#oi(){const{gpuDevice:i,resourceManager:m}=this.#l,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage,read_write> clusterLight_Clusters:ClusterLight_Clusters;\nfn lineIntersectionToZPlane(a:vec3<f32>,b:vec3<f32>,zDistance:f32) -> vec3<f32> { let normal=vec3<f32>(0.0,0.0,0.5); let ab=b - a; let t=(zDistance - dot(normal,a))/dot(normal,ab); return a + t * ab;\n}\nfn clipToView(clip:vec4<f32>) -> vec4<f32> { let view=systemUniforms.inverseProjectionMatrix * clip; return view/vec4<f32>(view.w,view.w,view.w,view.w);\n}\nfn screen2View(screen:vec4<f32>) -> vec4<f32> { let texCoord=screen.xy/systemUniforms.resolution.xy; let clip=vec4<f32>(vec2<f32>(texCoord.x,1.0 - texCoord.y) * 2.0 - vec2<f32>(1.0,1.0),screen.z,screen.w ); return clipToView(clip);\n}\nconst eyePos=vec3<f32>(0.0);\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let tileIndex=global_id.x + global_id.y * clusterLight_tileCount.x + global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y; let tileSize=vec2<f32>( systemUniforms.resolution.x/f32(clusterLight_tileCount.x), systemUniforms.resolution.y/f32(clusterLight_tileCount.y) ); let global_id_x_pos_one=vec2<f32>(f32(global_id.x + 1u),f32(global_id.y + 1u)) * tileSize; let global_id_x_y=vec2<f32>(f32(global_id.x),f32(global_id.y)) * tileSize; let maxPoint_sS=vec4<f32>(global_id_x_pos_one,0.0,1.0); let minPoint_sS=vec4<f32>(global_id_x_y,0.0,1.0); let maxPoint_vS=screen2View(maxPoint_sS).xyz; let minPoint_vS=screen2View(minPoint_sS).xyz; let nearFarX=systemUniforms.camera.nearClipping; let nearFarY=systemUniforms.camera.farClipping; let tileZ=f32(global_id.z)/f32(clusterLight_tileCount.z); let tileZ_plus_one=f32(global_id.z + 1u)/f32(clusterLight_tileCount.z); let tileNear=-nearFarX * pow(nearFarY/nearFarX,tileZ); let tileFar=-nearFarX * pow(nearFarY/nearFarX,tileZ_plus_one); let minPointNear=lineIntersectionToZPlane(eyePos,minPoint_vS,tileNear); let minPointFar=lineIntersectionToZPlane(eyePos,minPoint_vS,tileFar); let maxPointNear=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileNear); let maxPointFar=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileFar); let minAABB=min(min(minPointNear,minPointFar),min(maxPointNear,maxPointFar)); let maxAABB=max(max(minPointNear,minPointFar),max(maxPointNear,maxPointFar)); clusterLight_Clusters.cubeList[tileIndex].minAABB=vec4<f32>(minAABB,0.0); clusterLight_Clusters.cubeList[tileIndex].maxAABB=vec4<f32>(maxAABB,0.0);\n}\n").defaultSource;this.#ri=m.createGPUBuffer("PASS_CLUSTER_BOUND_BUFFER",{size:32*Ht.getTotalTileSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),this.#ii=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),this.#ai=i.createBindGroup({label:"CLUSTER_BOUND_BIND_GROUP",layout:this.#ii,entries:[{binding:0,resource:{buffer:this.#ri}}]}),this.#si=i.createComputePipeline({label:"CLUSTER_BOUND_PIPELINE",layout:i.createPipelineLayout({bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),this.#ii]}),compute:{module:m.createGPUShaderModule("CLUSTER_BOUND_SHADER",{code:g}),entryPoint:"main"}})}}const _r=new Uint32Array([0,0,0,0]);class PassClustersLight{#ni;#ui;#li;#ci;#l;constructor(i,m){validateRedGPUContext(i),this.#l=i,this.#ni=m,this.#oi()}get clusterLightsBuffer(){return this.#ci}render(){const{gpuDevice:i}=this.#l,m=this.#ni.systemUniform_Vertex_UniformBindGroup;if(m){const g=i.createCommandEncoder(),x=g.beginComputePass({label:"ClusterLight cluster"}),_=Ht.getDispatchSize();this.#l.gpuDevice.queue.writeBuffer(this.clusterLightsBuffer,0,_r),x.setPipeline(this.#li),x.setBindGroup(0,m),x.setBindGroup(1,this.#ui),x.dispatchWorkgroups(_[0],_[1],_[2]),x.end(),i.queue.submit([g.finish()])}}#oi(){const{gpuDevice:i,resourceManager:m}=this.#l,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage> clusterLight_Clusters:ClusterLight_Clusters;\nfn pointLight_testSphereAABB(light:u32,tile:u32) -> bool { let targetLight=clusterLightList.lights[light]; let targetTile=clusterLight_Clusters.cubeList[tile]; let radius:f32=targetLight.radius; let position:vec3<f32>=targetLight.position; let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz; let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz); return squaredDistance <=(radius * radius);\n}\nfn pointLight_sqDistPointAABB(targetPoint:vec3<f32>,tile:u32,minAABB:vec3<f32>,maxAABB:vec3<f32>) -> f32 { var sqDist=0.0; for(var i=0u;i < 3u;i=i + 1u) { let v=targetPoint[i]; let _minAABB=minAABB[i]; let _maxAABB=maxAABB[i]; if(v < _minAABB){ sqDist +=(_minAABB - v) * (_minAABB - v); } if(v > _maxAABB){ sqDist +=(v - _maxAABB) * (v - _maxAABB); } } return sqDist;\n}\nfn spotLight_testSphereAABB(light:u32,tile:u32) -> bool { let targetLight=clusterLightList.lights[light]; let targetTile=clusterLight_Clusters.cubeList[tile]; let radius:f32=targetLight.radius; let position:vec3<f32>=targetLight.position; let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz; let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz); return squaredDistance <=(radius * radius);\n}\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let tileIndex=global_id.x + global_id.y * clusterLight_tileCount.x + global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y; var clusterLightCount=0u; var clusterLightIndices:array<u32,REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu>; for (var i=0u;i < u32(clusterLightList.count[0]);i=i + 1u) { let lightInCluster=pointLight_testSphereAABB(i,tileIndex); if (lightInCluster) { clusterLightIndices[clusterLightCount]=i; clusterLightCount=clusterLightCount + 1u; } if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) { break; } } let spotLightStartIndex=u32(clusterLightList.count[0]); for (var i=0u;i < u32(clusterLightList.count[1]);i=i + 1u) { let actualLightIndex=spotLightStartIndex + i; let sphereTest=spotLight_testSphereAABB(actualLightIndex,tileIndex); if (sphereTest) { clusterLightIndices[clusterLightCount]=actualLightIndex; clusterLightCount=clusterLightCount + 1u; } if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) { break; } } var offset=atomicAdd(&clusterLightGroup.offset,clusterLightCount); for(var i=0u;i < clusterLightCount;i=i + 1u) { clusterLightGroup.indices[offset + i]=clusterLightIndices[i]; } clusterLightGroup.lights[tileIndex].offset=offset; clusterLightGroup.lights[tileIndex].count=clusterLightCount;\n}\n").defaultSource;this.#ci=m.createGPUBuffer("PASS_CLUSTER_LIGHTS_BUFFER",{size:Ht.getClusterLightsBufferSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const x=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]});this.#ui=i.createBindGroup({label:"CLUSTER_LIGHT_BIND_GROUP",layout:x,entries:[{binding:0,resource:{buffer:this.#ni.passLightClustersBound.clusterBoundBuffer}}]}),this.#li=i.createComputePipeline({label:"CLUSTER_LIGHT_PIPELINE",layout:i.createPipelineLayout({label:"CLUSTER_LIGHT_PIPELINE_LAYOUT",bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),x]}),compute:{module:m.createGPUShaderModule("CLUSTER_LIGHTS_SHADER",{code:g}),entryPoint:"main"}})}}var vr="struct Camera { cameraMatrix:mat4x4<f32>, inverseCameraMatrix:mat4x4<f32>, cameraPosition:vec3<f32>, nearClipping:f32, farClipping:f32, fieldOfView:f32\n};\nstruct SystemUniform { projectionMatrix:mat4x4<f32>, inverseProjectionMatrix:mat4x4<f32>, projectionCameraMatrix:mat4x4<f32>, inverseProjectionCameraMatrix:mat4x4<f32>, camera:Camera,\n};\n@group(1) @binding(1) var<uniform> systemUniforms:SystemUniform;\n";class PostEffectManager{#ni;#hi=[];#fi;#di;#mi;#Qn=16;#er=4;#pi=1;#gi;#xi;#_i;#vi;#bi;#yi;#Si;#An=0;#Ti;#wi;#Mi;constructor(i){this.#ni=i,this.#Ci()}get postEffectSystemUniformBuffer(){return this.#yi}get view(){return this.#ni}get effectList(){return this.#hi}get videoMemorySize(){return this.#Ri(),this.#An}addEffect(i){this.#hi.push(i)}addEffectAt(i){}getEffectAt(i){return this.#hi[i]}removeEffect(i){}removeEffectAt(i){}removeAllEffect(){this.#hi.forEach(i=>{i.clear()}),this.#hi.length=0}render(){const{viewRenderTextureManager:i,redGPUContext:m,taa:g,fxaa:x}=this.#ni,{antialiasingManager:_}=m,{useMSAA:b,useFXAA:y,useTAA:T}=_,{gBufferColorTextureView:w,gBufferColorResolveTextureView:P,gBufferColorTexture:z}=i,{width:H,height:$}=z,W=b?P:w;this.#Pi(),this.#di=this.#Ei(this.#ni,W);let q={texture:this.#fi,textureView:this.#di};return this.#hi.forEach(i=>{q=i.render(this.#ni,H,$,q)}),y&&(q=x.render(this.#ni,H,$,q)),T&&(q=g.render(this.#ni,H,$,q)),q}clear(){this.#hi.forEach(i=>{i.clear()})}#Bi(i){i.forEach(({key:i,value:m,dataView:g,targetMembers:x})=>{const _=x[i];g.set("number"==typeof m?[m]:m,_.uniformOffset/_.View.BYTES_PER_ELEMENT)})}#Pi(){const{inverseProjectionMatrix:i,projectionMatrix:m,rawCamera:g,redGPUContext:x,scene:_}=this.#ni,{gpuDevice:b}=x,{modelMatrix:y,position:T}=g,w=this.#Si,P=this.#yi.gpuBuffer,z=g instanceof Camera2D,H=multiply(br,m,y);{const{members:x}=w,_=x.camera.members;this.#Bi([{key:"projectionMatrix",value:m,dataView:this.#wi,targetMembers:x},{key:"projectionCameraMatrix",value:H,dataView:this.#wi,targetMembers:x},{key:"inverseProjectionMatrix",value:i,dataView:this.#wi,targetMembers:x},{key:"inverseProjectionCameraMatrix",value:invert(yr,H),dataView:this.#wi,targetMembers:x},{key:"cameraMatrix",value:y,dataView:this.#wi,targetMembers:_},{key:"inverseCameraMatrix",value:invert(yr,y),dataView:this.#wi,targetMembers:_},{key:"cameraPosition",value:T,dataView:this.#wi,targetMembers:_},{key:"nearClipping",value:z?0:g.nearClipping,dataView:this.#wi,targetMembers:_},{key:"farClipping",value:z?0:g.farClipping,dataView:this.#wi,targetMembers:_},{key:"fieldOfView",value:g.fieldOfView*Math.PI/180,dataView:this.#wi,targetMembers:_}])}b.queue.writeBuffer(P,0,this.#Ti)}#Ci(){const{redGPUContext:i}=this.#ni,{gpuDevice:m,resourceManager:g}=i,x=this.#Ii();this.#gi=g.createGPUShaderModule("POST_EFFECT_TEXTURE_COPY_COMPUTE_SHADER",{code:x}),this.#_i=this.#Li(i),this.#vi=this.#Di(m,this.#gi,this.#_i);const _=parseWGSL(vr).uniforms.systemUniforms,b=new ArrayBuffer(_.arrayBufferByteLength);this.#Si=_,this.#yi=new UniformBuffer(i,b,`${this.#ni.name}_POST_EFFECT_SYSTEM_UNIFORM_BUFFER`),this.#Ti=new ArrayBuffer(this.#Si.endOffset),this.#wi=new Float32Array(this.#Ti),this.#Mi=new Uint32Array(this.#Ti)}#Ri(){const i=this.#fi;if(!i)return 0;this.#An=calculateTextureByteSize(i),this.#hi.forEach(i=>{this.#An+=i.videoMemorySize})}#Ei(i,m){const{redGPUContext:g,viewRenderTextureManager:x}=i,{gBufferColorTexture:_}=x,{gpuDevice:b,antialiasingManager:y,resourceManager:T}=g,{useMSAA:w,changedMSAA:P}=y,{width:z,height:H}=_,$=z!==this.#bi?.width||H!==this.#bi?.height;return $&&(this.#fi&&(this.#fi.destroy(),this.#fi=null),this.#fi=this.#Ui(b,z,H),this.#mi=T.getGPUResourceBitmapTextureView(this.#fi)),($||P)&&(this.#xi=this.#Ai(g,this.#_i,m,this.#mi)),this.#bi={width:z,height:H},this.#ki(b,this.#vi,this.#xi,z,H),this.#mi}#Ii(){return`\n\t @group(0) @binding(0) var sourceTextureSampler:sampler; @group(0) @binding(1) var sourceTexture:texture_2d<f32>; @group(0) @binding(2) var outputTexture:texture_storage_2d<rgba8unorm,write>;  @compute @workgroup_size(${this.#Qn},${this.#er},${this.#pi}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy ); let dimensions:vec2<u32>=textureDimensions(sourceTexture); let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let uv=\tvec2<f32>((f32(index.x)+0.5)/dimW,(f32(index.y)+0.5)/dimH); var color:vec4<f32>=textureSampleLevel( sourceTexture, sourceTextureSampler, uv, 0 );  textureStore(outputTexture,index,color ); }; `}#Li(i){return i.resourceManager.createBindGroupLayout(`${this.#ni.name}_POST_EFFECT_TEXTURE_COPY_BIND_GROUP_LAYOUT`,{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#Ui(i,m,g){return this.#ni.redGPUContext.resourceManager.createManagedTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC,label:`${this.#ni.name}_POST_EFFECT_STORAGE_TEXTURE_${m}x${g}`})}#Ai(i,m,g,x){const _=Date.now();return i.gpuDevice.createBindGroup({label:`${this.#ni.name}_POST_EFFECT_TEXTURE_COPY_BIND_GROUP_${_}`,layout:m,entries:[{binding:0,resource:new Sampler(i).gpuSampler},{binding:1,resource:g},{binding:2,resource:x}]})}#Di(i,m,g){return i.createComputePipeline({label:"POST_EFFECT_TEXTURE_COPY_COMPUTE_PIPELINE",layout:i.createPipelineLayout({label:"POST_EFFECT_TEXTURE_COPY_PIPELINE_LAYOUT",bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#ki(i,m,g,x,_){const b=i.createCommandEncoder({label:"POST_EFFECT_TEXTURE_COPY_COMMAND_ENCODER"}),y=b.beginComputePass({label:"POST_EFFECT_TEXTURE_COPY_COMPUTE_PASS"});y.setPipeline(m),y.setBindGroup(0,g),y.dispatchWorkgroups(Math.ceil(x/this.#Qn),Math.ceil(_/this.#er)),y.end(),i.queue.submit([b.finish()])}}let br=create$2(),yr=create$2();Object.freeze(PostEffectManager);class RenderViewStateData{useDistanceCulling;cullingDistanceSquared;distanceCulling;num3DGroups;num3DObjects;numDrawCalls;numDirtyPipelines;numInstances;numTriangles;numPoints;viewRenderTime;viewportSize;viewIndex;usedVideoMemory;currentRenderPassEncoder;timestamp;frustumPlanes;prevVertexGpuBuffer;prevFragmentUniformBindGroup;dirtyVertexUniformFromMaterial={};bundleListAlphaLayer=[];bundleListTransparentLayer=[];bundleListParticleLayer=[];bundleListRender2PathLayer=[];skinList=[];animationList=[];bundleListBasicList=[];startTime;isScene2DMode=!1;#ni;constructor(i){this.#ni=i}get view(){return this.#ni}reset(i,m){if(!m||!this.#ni)throw new Error("Invalid parameters provided");const g=this.#ni,{useFrustumCulling:x,frustumPlanes:_,scene:b,postEffectManager:y,pickingManager:T,viewRenderTextureManager:w}=g,{gBufferColorTexture:P,depthTexture:z}=g.viewRenderTextureManager,{shadowManager:H}=b;if(!P||!z)throw new Error("Invalid view properties");this.useDistanceCulling=g.useDistanceCulling,this.distanceCulling=g.distanceCulling,this.cullingDistanceSquared=this.distanceCulling*this.distanceCulling,this.num3DGroups=0,this.num3DObjects=0,this.numDrawCalls=0,this.numInstances=0,this.numDirtyPipelines=0,this.numTriangles=0,this.numPoints=0,this.viewRenderTime=0,this.currentRenderPassEncoder=i,this.timestamp=m,this.prevVertexGpuBuffer=null,this.prevFragmentUniformBindGroup=null,this.dirtyVertexUniformFromMaterial={},this.bundleListAlphaLayer.length=0,this.bundleListTransparentLayer.length=0,this.bundleListParticleLayer.length=0,this.bundleListRender2PathLayer.length=0,this.bundleListBasicList.length=0,this.skinList.length=0,this.animationList.length=0,this.startTime=performance.now(),this.isScene2DMode=g.camera instanceof Camera2D,this.viewIndex=g.redGPUContext.getViewIndex(g),this.viewportSize={x:g.x,y:g.y,width:g.width,height:g.height,pixelRectArray:g.pixelRectArray};try{this.usedVideoMemory=w.videoMemorySize+H.directionalShadowManager.videoMemorySize+y.videoMemorySize+T.videoMemorySize}catch(i){throw new Error("Could not calculate texture size:"+i.message)}this.frustumPlanes=x?_:null}}class ResourceStateIndexBuffer{static dirtyList=[];buffer;label;uuid;#X=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateIndexBuffer.dirtyList.push(this)}}class IndexBuffer extends ABaseBuffer{[sn];#Oi=0;#qe=0;#vt=Pn.UINT32;constructor(i,m,g=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,x=""){super(i,"managedIndexBufferState",g);const{table:_}=this.targetResourceManagedState,b=_.get(x);if(b)return b.buffer;x&&(this.name=x,this[on]=x),this.changeData(m),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateIndexBuffer(this))}get format(){return this.#vt}get triangleCount(){return this.#qe}get indexCount(){return this.#Oi}get data(){return this[sn]}changeData(i){const{gpuDevice:m}=this;if(Array.isArray(i)&&(i=new Uint32Array(i)),this[an]){this.targetResourceManagedState.videoMemory-=this[sn].byteLength||0;let i=this[an];requestAnimationFrame(()=>{i.destroy()}),this[an]=null}this[sn]=i,this.#Oi=i.length;const g={size:this[sn].byteLength,usage:this.usage,label:this.name};this[an]=m.createBuffer(g),this.targetResourceManagedState.videoMemory+=this[sn].byteLength||0,this.#qe=this.#Oi/3,m.queue.writeBuffer(this[an],0,this[sn])}}Object.freeze(IndexBuffer);class Primitive{#Gi;#L;#D;#U;constructor(i){validateRedGPUContext(i)}static get primitiveInterleaveStruct(){return new VertexInterleavedStruct({vertexPosition:VertexInterleaveType.float32x3,vertexNormal:VertexInterleaveType.float32x3,texcoord:VertexInterleaveType.float32x2},"primitiveInterleaveStruct")}get gpuRenderInfo(){return this.#Gi}get vertexBuffer(){return this.#L}get indexBuffer(){return this.#D}get volume(){return this.#U||(this.#U=calculateGeometryAABB(this.#L)),this.#U}_setData(i){if(this.#L=i.vertexBuffer,this.#D=i.indexBuffer,this.#L){const{interleavedStruct:i}=this.#L;this.#Gi=new GeometryGPURenderInfo([{arrayStride:i.arrayStride,attributes:i.attributes}])}}}Object.freeze(Primitive);const createPrimitiveGeometry=(i,m,g,x)=>new Geometry(i,new VertexBuffer(i,new Float32Array(m),Primitive.primitiveInterleaveStruct,void 0,`VertexBuffer_${x}`),new IndexBuffer(i,new Uint32Array(g),void 0,`IndexBuffer_${x}`));class Plane extends Primitive{#Fi=function(){const i=[],m=[];return function(g,x,_,b,y,T,w,P){const z=_/2,H=b/2,$=Math.floor(y)||1,W=Math.floor(T)||1,q=$+1,ye=W+1,Ge=_/$,Ke=b/W;i.length=0,m.length=0;for(let g=0;g<ye;g++){const x=g*Ke-H,_=P?(1-g/W)*w:g/W*w;for(let b=0;b<q;b++){const y=b*Ge-z,T=b/$*w;if(i.push(y,-x,0,0,0,1,T,_),g<W&&b<$){const i=b+q*g,x=b+q*(g+1),_=b+1+q*(g+1),y=b+1+q*g;m.push(i,x,y),m.push(x,_,y)}}}return createPrimitiveGeometry(x,i,m,g)}}();constructor(i,m=1,g=1,x=1,_=1,b=1,y=!1){super(i);const T=`PRIMITIVE_PLANE_W${m}_H${g}_WS${x}_HS${_}_UV${b}_FY${y}`,w=i.resourceManager.cachedBufferState;let P=w[T];P||(P=w[T]=this.#Fi(T,i,m,g,x,_,b,y)),this._setData(P)}}const Sr=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { useDiffuseTexture:u32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; var finalColor:vec4<f32>=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); finalColor=vec4<f32>(finalColor.rgb/finalColor.a,finalColor.a * uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (finalColor.a==0.0) { discard; } output.color=finalColor; output.gBufferMotionVector=vec4<f32>( 0.0,0.0,1.0,1.0 ); return output;\n};\n");class TextFieldMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"TEXT_FILED_MATERIAL",Sr,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}gt.defineByPreset(TextFieldMaterial,[gt.PRESET_TEXTURE.DIFFUSE_TEXTURE,gt.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(TextFieldMaterial);const Tr=";box-sizing:content-box;white-space:nowrap;",wr={padding:0,background:"transparent",color:"#fff",fontFamily:"Arial",fontSize:16,fontWeight:"normal",fontStyle:"normal",letterSpacing:0,wordBreak:"keep-all",verticalAlign:"middle",textAlign:"center",lineHeight:1.4,border:"",boxShadow:"none",boxSizing:"border-box",filter:""};class ATextField extends Mesh{#Ni;#Vi;#zi;#Hi;#$i;#Wi;#Ki;#ji=!0;#l;#Xi;#qi=!1;#Yi;#Zi;constructor(i,m,g=!0){super(i),this.#l=i,this.#ji=g,this.#Ki=m,this._material=new TextFieldMaterial(i),this._material.transparent=!0,this._material.diffuseTextureSampler=new Sampler(i,g?{minFilter:ln.LINEAR,magFilter:ln.LINEAR,mipmapFilter:cn.LINEAR}:{minFilter:ln.NEAREST,magFilter:ln.NEAREST,mipmapFilter:null}),this.depthStencilState.depthWriteEnabled=!1,this.#Ji(),this.#Qi(),this.#ea(),this.#ta(),this.#na()}get text(){return this.#Wi}set text(i){if(this.#Wi===i)return;this.#Wi=i;const m=this.#zi.querySelector("foreignObject div"),g=this.#ra(i);this.#Hi.innerHTML=g,m.innerHTML=g,this.#qi=!0}render(i){this.#Ki(this.#Yi,this.#Zi),this.#ia(),super.render(i)}#ra(i){return i.toString().replace(/\<br\/>/gi,"<div/>")}#Ji(){"undefined"!=typeof OffscreenCanvas?this.#Ni=new OffscreenCanvas(100,100):this.#Ni=document.createElement("canvas"),this.#Vi=this.#Ni.getContext("2d")}#aa(){const i=this.#Hi.getBoundingClientRect();const m=i.width+3+3,g=i.height+3+3;return{width:-2&Math.ceil(m),height:-2&Math.ceil(g),extraTop:3,extraRight:3,extraBottom:3,extraLeft:3}}#sa(){const i=this.#zi,m=i.querySelector("foreignObject"),{width:g,height:x,extraTop:_,extraRight:b,extraBottom:y,extraLeft:T}=this.#aa();m.setAttribute("width",g.toString()),m.setAttribute("height",x.toString()),m.style.padding=`${_}px ${b}px ${y}px ${T}px`,i.setAttribute("width",g.toString()),i.setAttribute("height",x.toString()),this.#$i.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(i.outerHTML)}#ta(){this.#$i=new Image,this.#$i.style.cssText="position:absolute;bottom:0px;left:0;",this.#$i.onload=i=>{let m,g;const{width:x,height:_}=this.#aa(),b=(this.#ji,2),y=this.#ji?1:2;m=x*b,g=_*b,this.#$i.width=m/y,this.#$i.height=g/y,this.#Ni.width=m,this.#Ni.height=g,this.#Ni instanceof OffscreenCanvas||(this.#Ni.style.width=m/b+"px",this.#Ni.style.height=g/b+"px"),this.#Vi.imageSmoothingEnabled=!0,this.#Vi.imageSmoothingQuality="high",this.#Vi.clearRect(0,0,m,g),this.#Vi.fillStyle="rgba(0,0,0,0)",this.#Vi.fillRect(0,0,m,g),this.#Vi.drawImage(this.#$i,0,0,m,g),this.dirtyTransform=!0;const callback=i=>{if(this.material.diffuseTexture){const i=this.material.diffuseTexture.src,m="string"==typeof i&&i?.startsWith?.("blob:");this.material.diffuseTexture.destroy(),this.material.diffuseTexture=null,m&&URL.revokeObjectURL(i)}this.material.diffuseTexture=new BitmapTexture(this.#l,URL.createObjectURL(i),!0,i=>{this.#Yi=this.#$i.width,this.#Zi=this.#$i.height},null,null,!0)};this.#Ni instanceof OffscreenCanvas?this.#Ni.convertToBlob({type:"image/png"}).then(callback):this.#Ni.toBlob(callback,"image/png")}}#ia(){this.#qi&&(this.#Xi&&cancelAnimationFrame(this.#Xi),this.#Xi=requestAnimationFrame(()=>{this.#sa()})),this.#qi=!1}#oa=(i,m)=>{const g=this.#zi.querySelector("foreignObject > div").style,x=this.#Hi.style,_=`_${i}`;this[_]=m,Object.defineProperty(this,i,{get:()=>this[_],set:m=>{const b=this[_];this[_]=m;const y=(i=>"number"==typeof i)(m)&&(i=>!["lineHeight","fontWeight"].includes(i))(i)?`${m}px`:m;g[i]=y,x[i]=y,b!==m&&(this.#qi=!0)}}),this[i]=m};#Qi(){this.#Hi=document.createElement("div"),this.#Hi.style.cssText=Tr+";position:absolute;top:200px;left:0;visibility:hidden;text-rendering:optimizeLegibility",document.body.appendChild(this.#Hi)}#ea(){const i=this.#zi=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.setAttribute("text-rendering","optimizeLegibility"),i.style.cssText="position:absolute;top:0px;left:0px;z-index:1;margin:0;padding:0;overflow:visible;background:transparent",i.innerHTML=` <rect x="0" y="0" width="100%" height="100%" fill="rgba(0,0,0,0)"/> <foreignObject width="100%" height="100%" style="margin:0;padding:0;" overflow="visible"> <div xmlns="http://www.w3.org/1999/xhtml" style="${Tr}"></div> </foreignObject>`}#na(){for(const[i,m]of Object.entries(wr))this.#oa(i,m);this.#qi=!0}}Object.freeze(ATextField);var Mr="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { pickingId:u32, matrixList:MatrixList, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_noneJitterProjectionMatrix=systemUniforms.noneJitterProjectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_positionVec4=vec4<f32>(input_position,1.0); let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0); let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz); let objectPosition=input_position.xyz; let distance=length(cameraPosition - objectPosition); let scaleFactor=distance; var scaleMatrix:mat4x4<f32>=mat4x4<f32>( 10.0,0.0,0.0,0.0, 0.0,10.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); #redgpu_if useBillboard { if (u_useBillboardPerspective !=1) { scaleMatrix=mat4x4<f32>( scaleFactor,0.0,0.0,0.0, 0.0,scaleFactor,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); } position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * scaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_noneJitterProjectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; output.position=vec4<f32>( temp.xy + objectPosition.xy * vec2<f32>( (u_noneJitterProjectionMatrix * u_modelMatrix)[0][0], (u_noneJitterProjectionMatrix * u_modelMatrix)[1][1] ), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * scaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_noneJitterProjectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_noneJitterProjectionMatrix=systemUniforms.noneJitterProjectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); let input_uv=inputData.uv; var position:vec4<f32>; let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz); let objectPosition=input_position.xyz; let distance=length(cameraPosition - objectPosition); let scaleFactor=distance; var scaleMatrix:mat4x4<f32>=mat4x4<f32>( 10.0,0.0,0.0,0.0, 0.0,10.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); if (u_useBillboard==1) { if (u_useBillboardPerspective !=1) { scaleMatrix=mat4x4<f32>( scaleFactor,0.0,0.0,0.0, 0.0,scaleFactor,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); } position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0); output.position=u_noneJitterProjectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; output.position=vec4<f32>( temp.xy + objectPosition.xy * vec2<f32>( (u_noneJitterProjectionMatrix * u_modelMatrix)[0][0], (u_noneJitterProjectionMatrix * u_modelMatrix)[1][1] ), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0); output.position=u_noneJitterProjectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Cr=parseWGSL(Mr),Rr=Cr.uniforms.vertexUniforms;class TextField3D extends ATextField{#ua=1;#la=1;constructor(i,m){super(i,(i,m)=>{const g=this.#ua,x=this.#la;this.#ua=i/1024,this.#la=m/1024,g===this.#ua&&x===this.#la||(this.dirtyTransform=!0)}),this._geometry=new Plane(i),m&&(this.text=m)}get geometry(){return this._geometry}set geometry(i){console.error("TextField3D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField3D can not change material")}get renderTextureWidth(){return this.#ua}get renderTextureHeight(){return this.#la}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_3D",Cr,Rr,Mr)}}Ge.defineByPreset(TextField3D,[[Ge.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],Ge.PRESET_BOOLEAN.USE_BILLBOARD]),Object.freeze(TextField3D);class ADrawDebuggerLight{#l;#ca;#ha;constructor(i,m,g=32){this.#l=i;const x=this.createLightDebugGeometry(i,g);this.#ca=new ColorMaterial(i),this.#ca.color.setColorByRGB(m[0],m[1],m[2]),this.#ha=new Mesh(i,x,this.#ca),this.#ha.primitiveState.cullMode="none",this.#ha.primitiveState.topology=Ke.LINE_LIST,this.#ha.disableJitter=!0}get lightMaterial(){return this.#ca}get lightDebugMesh(){return this.#ha}updateVertexBuffer(i,m){const g=m.data;let x=0;const _=Math.min(i.length,Math.floor(g.length/16));for(let m=0;m<_;m++){const[_,b]=i[m];g[x++]=_[0],g[x++]=_[1],g[x++]=_[2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0,g[x++]=b[0],g[x++]=b[1],g[x++]=b[2],g[x++]=0,g[x++]=0,g[x++]=1,g[x++]=0,g[x++]=0}m.updateAllData(g)}createLightDebugGeometry(i,m){const g=new Float32Array(2*m*8),x=new VertexInterleavedStruct({vertexPosition:VertexInterleaveType.float32x3,vertexNormal:VertexInterleaveType.float32x3,texcoord:VertexInterleaveType.float32x2},`lightDebugStruct_${Math.random()}`),_=new VertexBuffer(i,g,x);return new Geometry(i,_)}}class DrawDebuggerPointLight extends ADrawDebuggerLight{#nt;#fa;constructor(i,m){super(i,[0,255,255],51),this.#nt=m,this.#fa=new TextField3D(i),this.#fa.useBillboard=!0,this.#fa.fontSize=40,this.#fa.text="💡",this.lightDebugMesh.addChild(this.#fa)}render(i){i.view.systemUniform_Vertex_UniformBindGroup&&this.#nt.enableDebugger&&(this.#da(this.#nt,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#fa.setPosition(...this.#nt.position))}#da(i,m){const g=i.position||[0,0,0],x=i.radius||1,_=16,b=[];for(let i=0;i<_;i++){const m=i/_*Math.PI*2,y=(i+1)/_*Math.PI*2,T=g[0]+Math.cos(m)*x,w=g[1]+Math.sin(m)*x,P=g[2],z=g[0]+Math.cos(y)*x,H=g[1]+Math.sin(y)*x,$=g[2];b.push([[T,w,P],[z,H,$]])}for(let i=0;i<_;i++){const m=i/_*Math.PI*2,y=(i+1)/_*Math.PI*2,T=g[0]+Math.cos(m)*x,w=g[1],P=g[2]+Math.sin(m)*x,z=g[0]+Math.cos(y)*x,H=g[1],$=g[2]+Math.sin(y)*x;b.push([[T,w,P],[z,H,$]])}for(let i=0;i<_;i++){const m=i/_*Math.PI*2,y=(i+1)/_*Math.PI*2,T=g[0],w=g[1]+Math.cos(m)*x,P=g[2]+Math.sin(m)*x,z=g[0],H=g[1]+Math.cos(y)*x,$=g[2]+Math.sin(y)*x;b.push([[T,w,P],[z,H,$]])}const y=.2*x;b.push([[g[0]-y,g[1],g[2]],[g[0]+y,g[1],g[2]]]),b.push([[g[0],g[1]-y,g[2]],[g[0],g[1]+y,g[2]]]),b.push([[g[0],g[1],g[2]-y],[g[0],g[1],g[2]+y]]),this.updateVertexBuffer(b,m)}}Object.freeze(DrawDebuggerPointLight);class DrawDebuggerSpotLight extends ADrawDebuggerLight{#nt;#fa;constructor(i,m){super(i,[255,255,0],80),this.#nt=m,this.#fa=new TextField3D(i),this.#fa.useBillboard=!0,this.#fa.fontSize=40,this.#fa.text="🔦",this.lightDebugMesh.addChild(this.#fa)}render(i){i.view.systemUniform_Vertex_UniformBindGroup&&this.#nt.enableDebugger&&(this.#ma(this.#nt,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#fa.setPosition(...this.#nt.position))}#ma(i,m){const g=i.position||[0,0,0],x=i.direction||[0,-1,0],_=i.radius||5,b=i.outerCutoff||22.5,y=i.innerCutoff||15,T=[],w=Math.sqrt(x[0]*x[0]+x[1]*x[1]+x[2]*x[2]),P=[x[0]/w,x[1]/w,x[2]/w],z=[g[0]+P[0]*_,g[1]+P[1]*_,g[2]+P[2]*_],H=_*Math.tan(b*Math.PI/180),$=_*Math.tan(y*Math.PI/180);let W=[0,1,0];Math.abs(P[1])>.99&&(W=[1,0,0]);const q=[P[1]*W[2]-P[2]*W[1],P[2]*W[0]-P[0]*W[2],P[0]*W[1]-P[1]*W[0]],ye=Math.sqrt(q[0]*q[0]+q[1]*q[1]+q[2]*q[2]),Ge=[q[0]/ye,q[1]/ye,q[2]/ye],Ke=[Ge[1]*P[2]-Ge[2]*P[1],Ge[2]*P[0]-Ge[0]*P[2],Ge[0]*P[1]-Ge[1]*P[0]],je=16;for(let i=0;i<je;i++){const m=i/je*Math.PI*2,x=(i+1)/je*Math.PI*2,_=Math.cos(m),b=Math.sin(m),y=Math.cos(x),w=Math.sin(x),P=[z[0]+(Ge[0]*_+Ke[0]*b)*H,z[1]+(Ge[1]*_+Ke[1]*b)*H,z[2]+(Ge[2]*_+Ke[2]*b)*H],$=[z[0]+(Ge[0]*y+Ke[0]*w)*H,z[1]+(Ge[1]*y+Ke[1]*w)*H,z[2]+(Ge[2]*y+Ke[2]*w)*H];T.push([P,$]),T.push([g,P])}for(let i=0;i<je;i++){const m=i/je*Math.PI*2,g=(i+1)/je*Math.PI*2,x=Math.cos(m),_=Math.sin(m),b=Math.cos(g),y=Math.sin(g),w=[z[0]+(Ge[0]*x+Ke[0]*_)*$,z[1]+(Ge[1]*x+Ke[1]*_)*$,z[2]+(Ge[2]*x+Ke[2]*_)*$],P=[z[0]+(Ge[0]*b+Ke[0]*y)*$,z[1]+(Ge[1]*b+Ke[1]*y)*$,z[2]+(Ge[2]*b+Ke[2]*y)*$];T.push([w,P])}T.push([g,z]);const Xe=.3;T.push([[g[0]-Xe,g[1],g[2]],[g[0]+Xe,g[1],g[2]]]),T.push([[g[0],g[1]-Xe,g[2]],[g[0],g[1]+Xe,g[2]]]),T.push([[g[0],g[1],g[2]-Xe],[g[0],g[1],g[2]+Xe]]);for(let i=0;i<4;i++){const m=i/4*Math.PI*2,x=Math.cos(m),_=Math.sin(m),b=[z[0]+(Ge[0]*x+Ke[0]*_)*H,z[1]+(Ge[1]*x+Ke[1]*_)*H,z[2]+(Ge[2]*x+Ke[2]*_)*H];T.push([g,b])}this.updateVertexBuffer(T,m)}}Object.freeze(DrawDebuggerSpotLight);class PickingEvent{pickingId;mouseX;mouseY;target;time;type;movementX=0;movementY=0;localX=0;localY=0;localZ=0;altKey=!1;ctrlKey=!1;shiftKey=!1;constructor(i,m,g,x,_,b,y){this.pickingId=i,this.mouseX=m,this.mouseY=g,this.target=x,this.time=_,this.type=b,this.altKey=y.altKey,this.ctrlKey=y.ctrlKey,this.shiftKey=y.shiftKey}}class PickingManager{lastMouseEvent;lastMouseClickEvent;#pa;#ga;#xa;#_a;#l;#ni;#va=[];#ba=0;#ya=0;#Sa;#Ta;#An=0;get videoMemorySize(){return this.#An}get mouseX(){return this.#ba}set mouseX(i){this.#ba=i}get mouseY(){return this.#ya}set mouseY(i){this.#ya=i}get castingList(){return this.#va}get pickingGPUTexture(){return this.#xa}get pickingGPUTextureView(){return this.#_a}get pickingDepthGPUTextureView(){return this.#ga}resetCastingList(){this.#va.length=0}destroy(){this.#xa&&(this.#xa.destroy(),this.#pa.destroy(),this.#xa=null,this.#_a=null,this.#pa=null,this.#ga=null)}checkTexture(i){const{redGPUContext:m}=i,{resourceManager:g}=m;this.#ni=i,this.#l=m,this.#xa?.width===this.#ni.pixelRectObject.width&&this.#xa?.height===this.#ni.pixelRectObject.height||(this.destroy(),this.#xa=this.#wa("picking",navigator.gpu.getPreferredCanvasFormat()),this.#_a=g.getGPUResourceBitmapTextureView(this.#xa),this.#pa=this.#wa("pickingDepth","depth32float"),this.#ga=g.getGPUResourceBitmapTextureView(this.#pa),this.#Ri())}checkEvents(i,m){this.castingList.length&&(this.#Ma(i,m),this.resetCastingList())}#Ri(){const i=this.#xa;if(!i)return 0;this.#An=calculateTextureByteSize(i)+calculateTextureByteSize(this.#pa)}#wa(i,m){const{resourceManager:g}=this.#l;return g.createManagedTexture({size:[this.#ni.pixelRectObject.width,this.#ni.pixelRectObject.height,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,format:m,sampleCount:1,label:`${this.#ni.name}_${i}_${this.#ni.pixelRectObject.width}x${this.#ni.pixelRectObject.height}`})}#Ma=async(i,m,g=1,x=1)=>{const{gpuDevice:_}=i.redGPUContext,{pixelRectArray:b}=i,y=this.#ba,T=this.#ya;if(y<=0||y>=b[2]||T<=0||T>=b[3])return;const w=this.#Ca();let P=this.#Ra(_,g,x,y,T);const z=await this.#Pa(P);P.destroy(),P=null,z?(this.#Ea(z,y,T,m,w),this.#Ba(z,y,T,m,w)):this.#Ia(),this.lastMouseEvent=null,this.lastMouseClickEvent=null};#Ca=()=>this.#va.reduce((i,m)=>(i[m.pickingId]=m,i),{});#Ra=(i,m,g,x,_)=>{const b=i.createCommandEncoder({label:"PickingManager_ReadPixel_CommandEncoder"}),y=i.createBuffer({size:4,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"readPixelBuffer"}),T={texture:this.#xa,origin:{x:x,y:_,z:0}},w={buffer:y,bytesPerRow:256,rowsPerImage:1};return b.copyTextureToBuffer(T,w,{width:1,height:1,depthOrArrayLayers:1}),i.queue.submit([b.finish()]),y};#Ea=(m,g,x,_,b)=>{const y=b[m],T=this.lastMouseClickEvent?.type;if(T===i.CLICK){const i=new PickingEvent(m,g,x,y,_,T,this.lastMouseClickEvent);this.#La(T,i)}};#Ba=(m,g,x,_,b)=>{const y=b[m],T=this.lastMouseEvent?.type;if(T){const b=new PickingEvent(m,g,x,y,_,T,this.lastMouseEvent);switch(this.#Sa&&(b.movementX=g-this.#Sa.mouseX,b.movementY=x-this.#Sa.mouseY),T){case i.DOWN:case i.UP:this.#La(T,b);break;case i.MOVE:this.#Da(m,y,b)}this.#Sa=b}};#Da=(m,g,x)=>{const _=this.#Sa?.pickingId;_!==m?(this.#Sa&&_&&_!==m&&this.#Ia(),this.#Ta!==g&&(this.#La(i.OVER,x),document.body.style.cursor="pointer"),this.#Ta=g):this.#La(i.MOVE,x)};#Ia=()=>{this.#Sa&&this.#La(i.OUT,this.#Sa),this.#Sa=null,this.#Ta=null,document.body.style.cursor="default"};async#Pa(i){await i.mapAsync(GPUMapMode.READ);const m=new DataView(i.getMappedRange()),g="rgba8unorm"==this.#xa.format?[0,1,2,3]:[2,1,0,3],x=m.getUint8(g[0]),_=m.getUint8(g[1]),b=m.getUint8(g[2]);return(m.getUint8(g[3])<<24|b<<16|_<<8|x)>>>0}#La(i,m){m.target.events[i]&&m.target.events[i](m)}}Object.freeze(PickingManager);const validateNumberRange=(i,m=-Number.MAX_VALUE,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed. input:${i}`),!0);var Pr=Object.freeze({__proto__:null,ABaseMaterial:ABaseMaterial,ABitmapBaseMaterial:ABitmapBaseMaterial,FragmentGPURenderInfo:FragmentGPURenderInfo,getComputeBindGroupLayoutDescriptorFromShaderInfo:getComputeBindGroupLayoutDescriptorFromShaderInfo,getFragmentBindGroupLayoutDescriptorFromShaderInfo:getFragmentBindGroupLayoutDescriptorFromShaderInfo,getVertexBindGroupLayoutDescriptorFromShaderInfo:getVertexBindGroupLayoutDescriptorFromShaderInfo});class ASinglePassPostEffect{#Ua;#Aa;#ka;#Oa;#Ga;#Fa;#Na;#Va;#za;#Ha;#$a;#Wa;#Ka;#C;#ja;#Xa;#qa;#Ya;#Za;#Ja=16;#Qa=16;#es=1;#ts=!1;#l;#ns;#rs=[];#An=0;constructor(i){this.#l=i,this.#ns=i.antialiasingManager}get videoMemorySize(){return this.#An}get useDepthTexture(){return this.#ts}set useDepthTexture(i){this.#ts=i}get redGPUContext(){return this.#l}get storageInfo(){return this.#Ka}get shaderInfo(){dr(this);return this.#ns.useMSAA?this.#ja:this.#Xa}get uniformBuffer(){return this.#Ha}get uniformsInfo(){return this.#$a}get systemUuniformsInfo(){return this.#Wa}get WORK_SIZE_X(){return this.#Ja}set WORK_SIZE_X(i){this.#Ja=i}get WORK_SIZE_Y(){return this.#Qa}set WORK_SIZE_Y(i){this.#Qa=i}get WORK_SIZE_Z(){return this.#es}set WORK_SIZE_Z(i){this.#es=i}get outputTextureView(){return this.#Za}clear(){this.#Ya&&(this.#Ya.destroy(),this.#Ya=null,this.#Za=null)}init(i,m,g,x){this.#C=m;const{resourceManager:_}=i;this.#Ua=_.createGPUShaderModule(`${m}_MSAA`,{code:g.msaa}),this.#Aa=_.createGPUShaderModule(`${m}_NonMSAA`,{code:g.nonMsaa}),this.#ja=parseWGSL(g.msaa),this.#Xa=parseWGSL(g.nonMsaa);const b=this.#ja.storage,y=this.#ja.uniforms;if(this.#Ka=b,this.#$a=y.uniforms,this.#Wa=y.systemUniforms,this.#$a){const m=new ArrayBuffer(this.#$a.arrayBufferByteLength);this.#Ha=new UniformBuffer(i,m,`${this.constructor.name}_UniformBuffer`)}}execute(i,m,g){const x=i.createCommandEncoder({label:"ASinglePassPostEffect_Execute_CommandEncoder"}),_=x.beginComputePass();_.setPipeline(this.#za),_.setBindGroup(0,this.#Ga),_.setBindGroup(1,this.#Fa),_.dispatchWorkgroups(Math.ceil(m/this.WORK_SIZE_X),Math.ceil(g/this.WORK_SIZE_Y)),_.end(),i.queue.submit([x.finish()])}render(i,m,g,...x){const{gpuDevice:_,antialiasingManager:b}=this.#l,{useMSAA:y}=b,T=this.#is(i),w=b.changedMSAA,P=this.#as(x),z=this.outputTextureView,{redGPUContext:H}=i;return(T||w||P)&&this.#ss(i,x,z,y,H,_),this.update(performance.now()),this.execute(_,m,g),{texture:this.#Ya,textureView:z}}update(i){}updateUniform(i,m){this.uniformBuffer.writeOnlyBuffer(this.uniformsInfo.members[i],m)}#ss(i,m,g,x,_,b){const y=this.storageInfo,T=this.uniformsInfo,w=this.systemUuniformsInfo;this.#Na=[],this.#Va=[];for(const i in y){const g=y[i],{binding:x,name:_}=g;"outputTexture"!==_&&this.#Na.push({binding:x,resource:m[x].textureView})}this.#Va.push({binding:0,resource:g}),this.shaderInfo.textures.forEach(m=>{const{name:g,binding:x}=m;"depthTexture"===g&&this.#Na.push({binding:x,resource:i.viewRenderTextureManager.depthTextureView}),"gBufferNormalTexture"===g&&this.#Na.push({binding:x,resource:i.redGPUContext.antialiasingManager.useMSAA?i.viewRenderTextureManager.gBufferNormalResolveTextureView:i.viewRenderTextureManager.gBufferNormalTextureView})}),w&&this.#Va.push({binding:w.binding,resource:{buffer:i.postEffectManager.postEffectSystemUniformBuffer.gpuBuffer,offset:0,size:i.postEffectManager.postEffectSystemUniformBuffer.size}}),this.#Ha&&T&&this.#Va.push({binding:T.binding,resource:{buffer:this.#Ha.gpuBuffer,offset:0,size:this.#Ha.size}});const P=x?this.#ja:this.#Xa,z=x?this.#Ua:this.#Aa;this.#ka=_.resourceManager.getGPUBindGroupLayout(`${this.#C}_BIND_GROUP_LAYOUT_0_USE_MSAA_${x}`)||_.resourceManager.createBindGroupLayout(`${this.#C}_BIND_GROUP_LAYOUT_0_USE_MSAA_${x}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(P,0,x)),this.#Oa=_.resourceManager.getGPUBindGroupLayout(`${this.#C}_BIND_GROUP_LAYOUT_1_USE_MSAA_${x}`)||_.resourceManager.createBindGroupLayout(`${this.#C}_BIND_GROUP_LAYOUT_1_USE_MSAA_${x}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(P,1,x)),this.#Ga=b.createBindGroup({label:`${this.#C}_BIND_GROUP_0_USE_MSAA_${x}`,layout:this.#ka,entries:this.#Na}),this.#Fa=b.createBindGroup({label:`${this.#C}_BIND_GROUP_1_USE_MSAA_${x}`,layout:this.#Oa,entries:this.#Va}),this.#za=b.createComputePipeline({label:`${this.#C}_COMPUTE_PIPELINE_USE_MSAA_${x}`,layout:b.createPipelineLayout({bindGroupLayouts:[this.#ka,this.#Oa]}),compute:{module:z,entryPoint:"main"}}),this.#os(m)}#Ri(){this.#An=0,this.#Ya&&(this.#An=calculateTextureByteSize(this.#Ya))}#as(i){if(!this.#rs||this.#rs.length!==i.length)return!0;for(let m=0;m<i.length;m++)if(this.#rs[m].textureView!==i[m].textureView)return!0;return!1}#os(i){this.#rs=[...i]}#is(i){const{redGPUContext:m,viewRenderTextureManager:g,name:x}=i,{gBufferColorTexture:_}=g,{resourceManager:b}=m,{width:y,height:T}=_,w=y!==this.#qa?.width||T!==this.#qa?.height||!this.#Ya;return w&&(this.clear(),this.#Ya=b.createManagedTexture({size:{width:y,height:T},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC,label:`${x}_${this.#C}_${y}x${T}}`}),this.#Za=b.getGPUResourceBitmapTextureView(this.#Ya)),this.#qa={width:y,height:T},this.#Ri(),w}}Object.freeze(ASinglePassPostEffect);const createCode=(i,m,g="",x=!1)=>{const{WORK_SIZE_X:_,WORK_SIZE_Y:b,WORK_SIZE_Z:y}=i,T=x?"texture_depth_multisampled_2d":"texture_depth_2d";return`\n ${g} @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; ${i.useDepthTexture?`@group(0) @binding(1) var depthTexture:${T}`:""};  @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; ${vr} ${g?"@group(1) @binding(2) var<uniform> uniforms:Uniforms;":""} @compute @workgroup_size(${_},${b},${y}) fn main (  @builtin(global_invocation_id) global_id:vec3<u32>, ){ ${m} } `},createBasicPostEffectCode=(i,m,g="")=>({msaa:createCode(i,m,g,!0),nonMsaa:createCode(i,m,g,!1)});Object.freeze(createBasicPostEffectCode);class FXAA extends ASinglePassPostEffect{#us=.75;#ls=.166;#cs=.0833;constructor(i){super(i);this.init(i,"POST_EFFECT_FXAA",createBasicPostEffectCode(this,"\nlet index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\n\nvar colorC=textureLoad(sourceTexture,index);\nvar colorN=textureLoad(sourceTexture,vec2<u32>(index.x,u32(max(i32(index.y) - 1,0))));\nvar colorS=textureLoad(sourceTexture,vec2<u32>(index.x,u32(min(i32(index.y) + 1,i32(dimH - 1)))));\nvar colorW=textureLoad(sourceTexture,vec2<u32>(u32(max(i32(index.x) - 1,0)),index.y));\nvar colorE=textureLoad(sourceTexture,vec2<u32>(u32(min(i32(index.x) + 1,i32(dimW - 1))),index.y));\n\nlet lumaC=dot(colorC.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaN=dot(colorN.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaS=dot(colorS.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaW=dot(colorW.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaE=dot(colorE.rgb,vec3<f32>(0.299,0.587,0.114));\n\nlet lumaMin=min(lumaC,min(min(lumaN,lumaS),min(lumaW,lumaE)));\nlet lumaMax=max(lumaC,max(max(lumaN,lumaS),max(lumaW,lumaE)));\nlet range=lumaMax - lumaMin;\n\nlet edgeThreshold=uniforms.edgeThreshold;\nlet edgeThresholdMin=uniforms.edgeThresholdMin;\nlet subpix=uniforms.subpix;\n\nif (range < edgeThresholdMin) {\ntextureStore(outputTexture,index,colorC);\nreturn;\n}\n\nlet blurredColor=(colorN.rgb + colorS.rgb + colorW.rgb + colorE.rgb + colorC.rgb) * 0.2;\n\nlet blendAmount=min(1.0,range * 50.0 + 0.5) * subpix;\n\nlet finalColor=mix(colorC.rgb,blurredColor,blendAmount);\n\ntextureStore(outputTexture,index,vec4<f32>(finalColor,colorC.a));\n","\nstruct Uniforms { subpix:f32, edgeThreshold:f32, edgeThresholdMin:f32 \n};\n")),this.subpix=this.#us,this.edgeThreshold=this.#ls,this.edgeThresholdMin=this.#cs}get subpix(){return this.#us}set subpix(i){validateNumberRange(i,0,1),this.#us=i,this.updateUniform("subpix",i)}get edgeThreshold(){return this.#ls}set edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#ls=i,this.updateUniform("edgeThreshold",i)}get edgeThresholdMin(){return this.#cs}set edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#cs=i,this.updateUniform("edgeThresholdMin",i)}}Object.freeze(FXAA);class TAA{#l;#ns;#Ua;#Aa;#ka;#Oa;#za;#Ha;#$a;#Wa;#Ka;#C;#ja;#Xa;#qa;#hs=new Map;#fs=new Map;#ds=new Map;#ms=null;#ps;#gs;#xs;#_s;#vs;#bs;#Ja=8;#Qa=8;#es=1;#rs=[];#An=0;#ys=0;#Ss=.5;#Ts=.08;#ws=!0;#Ms=!0;#Cs=.8;#Rs=.1;#Ps;#Es;constructor(i){this.#l=i,this.#ns=i.antialiasingManager;const m=this.#Bs();this.#Ci(i,"POST_EFFECT_TAA",{msaa:m.msaa,nonMsaa:m.nonMsaa}),this.temporalBlendFactor=this.#Ts,this.jitterStrength=this.#Ss,this.varianceClipping=this.#ws,this.useMotionVectors=this.#Ms,this.motionBlurReduction=this.#Cs,this.disocclusionThreshold=this.#Rs}get frameIndex(){return this.#ys}get videoMemorySize(){return this.#An}get currentFrameTextureView(){return this.#gs}get temporalBlendFactor(){return this.#Ts}set temporalBlendFactor(i){validateNumberRange(i,0,1),this.#Ts=i,this.updateUniform("temporalBlendFactor",i)}get jitterStrength(){return this.#Ss}set jitterStrength(i){validateNumberRange(i,0,1),this.#Ss=i,this.updateUniform("jitterStrength",i)}get varianceClipping(){return this.#ws}set varianceClipping(i){this.#ws=i,this.updateUniform("varianceClipping",i?1:0)}get useMotionVectors(){return this.#Ms}set useMotionVectors(i){this.#Ms=i,this.updateUniform("useMotionVectors",i?1:0)}get motionBlurReduction(){return this.#Cs}set motionBlurReduction(i){validateNumberRange(i,0,1),this.#Cs=i,this.updateUniform("motionBlurReduction",i)}get disocclusionThreshold(){return this.#Rs}set disocclusionThreshold(i){validateNumberRange(i,.01,1),this.#Rs=i,this.updateUniform("disocclusionThreshold",i)}render(i,m,g,x){const _=x.textureView;x.texture;const{gpuDevice:b,antialiasingManager:y}=this.#l,{useMSAA:T,msaaID:w}=y;this.#ys++,this.#Ha&&this.updateUniform("frameIndex",this.#ys);const P=this.#is(i),z=this.#Ps!==T||this.#Es!==w,H=this.#as([_]);(P||z||H)&&this.#Is(i,[_],T,this.#l,b),this.#Ls(b,m,g);{const i=b.createCommandEncoder({label:"TAA_CopyTexture_CommandEncoder_compute"});i.copyTextureToTexture({texture:this.#ps},{texture:this.#xs},[m,g,1]),b.queue.submit([i.finish()])}return this.#ys<=20||this.#ys,this.#Ps=T,this.#Es=w,{texture:this.#ps,textureView:this.#gs}}clear(){this.#xs&&(this.#xs.destroy(),this.#xs=null,this.#_s=null),this.#ps&&(this.#ps.destroy(),this.#ps=null,this.#gs=null),this.#hs.clear(),this.#fs.clear(),this.#ds.clear(),this.#ms=null}updateUniform(i,m){this.#Ha.writeOnlyBuffer(this.#$a.members[i],m)}#Bs(){const createCode=i=>` struct Uniforms { temporalBlendFactor:f32, motionThreshold:f32, colorBoxSize:f32, jitterStrength:f32, varianceClipping:f32, frameIndex:f32, currentFrameSliceIndex:f32, useMotionVectors:f32, motionBlurReduction:f32, disocclusionThreshold:f32,\n}; fn haltonSequence(index:f32,base:f32) -> f32 { var result:f32=0.0; var fraction:f32=1.0/base; var i:f32=index; for (var iter=0;iter < 10 && i > 0.0;iter++) { result +=(i % base) * fraction; i=floor(i/base); fraction/=base; } return result; }\n  @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var previousFrameTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(2) var motionVectorTexture:texture_2d<f32>;  @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; ${vr} @group(1) @binding(2) var<uniform> uniforms:Uniforms;  @compute @workgroup_size(${this.#Ja},${this.#Qa},${this.#es}) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) { { let pixelCoord=vec2<u32>(global_id.xy); let screenSize=vec2<f32>(textureDimensions(sourceTexture)); if (any(pixelCoord >=vec2<u32>(screenSize))) { return; } let currentColorWithAlpha=textureLoad(sourceTexture,pixelCoord); let currentColor=currentColorWithAlpha.rgb; let currentAlpha=currentColorWithAlpha.a; let motionData=textureLoad(motionVectorTexture,pixelCoord,0); let motionVector=motionData.xy; let jitterDisabled=motionData.z > 0.5; if (jitterDisabled) { textureStore(outputTexture,pixelCoord,vec4<f32>(currentColor,currentAlpha)); return; } if (uniforms.frameIndex < 3.0) { textureStore(outputTexture,pixelCoord,vec4<f32>(currentColor,currentAlpha)); return; } if (uniforms.useMotionVectors < 0.5) { let historyColorWithAlpha=textureLoad(previousFrameTexture,pixelCoord); let historyColor=historyColorWithAlpha.rgb; let historyAlpha=historyColorWithAlpha.a; let blendWeight=clamp(uniforms.temporalBlendFactor,0.05,0.8); let blendedResult=mix(historyColor,currentColor,blendWeight); let blendedAlpha=mix(historyAlpha,currentAlpha,blendWeight); textureStore(outputTexture,pixelCoord,vec4<f32>(blendedResult,blendedAlpha)); return; } let motionMagnitude=length(motionVector); let staticThreshold=0.5; let motionTransition=smoothstep(0.2,1.0,motionMagnitude); let isStaticPixel=motionMagnitude < staticThreshold; let currentLuma=dot(currentColor,vec3<f32>(0.2126,0.7152,0.0722)); let isLowLuma=currentLuma < 0.1; let isHighLuma=currentLuma > 0.9; let isThinDetail=isLowLuma || isHighLuma; let currentWorldPos=vec2<f32>(pixelCoord) + vec2<f32>(0.5); let historyWorldPos=currentWorldPos - motionVector; if (any(historyWorldPos < vec2<f32>(0.5)) || any(historyWorldPos >=screenSize - vec2<f32>(0.5))) { textureStore(outputTexture,pixelCoord,vec4<f32>(currentColor,currentAlpha)); return; } let motionBlurWeight=smoothstep(0.5,8.0,motionMagnitude) * uniforms.motionBlurReduction; let samplePos=historyWorldPos - vec2<f32>(0.5); let floorPos=floor(samplePos); let fracPos=samplePos - floorPos; let baseCoord=vec2<u32>(floorPos); let historyTLWithAlpha=textureLoad(previousFrameTexture,baseCoord); let historyTRWithAlpha=textureLoad(previousFrameTexture,baseCoord + vec2<u32>(1,0)); let historyBLWithAlpha=textureLoad(previousFrameTexture,baseCoord + vec2<u32>(0,1)); let historyBRWithAlpha=textureLoad(previousFrameTexture,baseCoord + vec2<u32>(1,1)); let historyTL=historyTLWithAlpha.rgb; let historyTR=historyTRWithAlpha.rgb; let historyBL=historyBLWithAlpha.rgb; let historyBR=historyBRWithAlpha.rgb; let historyAlphaTL=historyTLWithAlpha.a; let historyAlphaTR=historyTRWithAlpha.a; let historyAlphaBL=historyBLWithAlpha.a; let historyAlphaBR=historyBRWithAlpha.a; let historyTop=mix(historyTL,historyTR,fracPos.x); let historyBottom=mix(historyBL,historyBR,fracPos.x); let historySample=mix(historyTop,historyBottom,fracPos.y); let historyAlphaTop=mix(historyAlphaTL,historyAlphaTR,fracPos.x); let historyAlphaBottom=mix(historyAlphaBL,historyAlphaBR,fracPos.x); let historySampleAlpha=mix(historyAlphaTop,historyAlphaBottom,fracPos.y); let neighborNWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord + vec2<u32>(0,1),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborSWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord - vec2<u32>(0,1),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborEWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord + vec2<u32>(1,0),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborWWithAlpha=textureLoad(sourceTexture,clamp(pixelCoord - vec2<u32>(1,0),vec2<u32>(0),vec2<u32>(screenSize) - vec2<u32>(1))); let neighborN=neighborNWithAlpha.rgb; let neighborS=neighborSWithAlpha.rgb; let neighborE=neighborEWithAlpha.rgb; let neighborW=neighborWWithAlpha.rgb; let neighborAlphaN=neighborNWithAlpha.a; let neighborAlphaS=neighborSWithAlpha.a; let neighborAlphaE=neighborEWithAlpha.a; let neighborAlphaW=neighborWWithAlpha.a; let coordX=i32(pixelCoord.x); let coordY=i32(pixelCoord.y); let screenX=i32(screenSize.x); let screenY=i32(screenSize.y); let neighborNEWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX + 1,0,screenX - 1)),u32(clamp(coordY + 1,0,screenY - 1)))); let neighborNWWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX - 1,0,screenX - 1)),u32(clamp(coordY + 1,0,screenY - 1)))); let neighborSEWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX + 1,0,screenX - 1)),u32(clamp(coordY - 1,0,screenY - 1)))); let neighborSWWithAlpha=textureLoad(sourceTexture,vec2<u32>(u32(clamp(coordX - 1,0,screenX - 1)),u32(clamp(coordY - 1,0,screenY - 1)))); let neighborNE=neighborNEWithAlpha.rgb; let neighborNW=neighborNWWithAlpha.rgb; let neighborSE=neighborSEWithAlpha.rgb; let neighborSW=neighborSWWithAlpha.rgb; let neighborAlphaNE=neighborNEWithAlpha.a; let neighborAlphaNW=neighborNWWithAlpha.a; let neighborAlphaSE=neighborSEWithAlpha.a; let neighborAlphaSW=neighborSWWithAlpha.a; var neighborMin=min(min(min(currentColor,neighborN),min(neighborS,neighborE)), min(neighborW,min(min(neighborNE,neighborNW),min(neighborSE,neighborSW)))); var neighborMax=max(max(max(currentColor,neighborN),max(neighborS,neighborE)), max(neighborW,max(max(neighborNE,neighborNW),max(neighborSE,neighborSW)))); var neighborMinAlpha=min(min(min(currentAlpha,neighborAlphaN),min(neighborAlphaS,neighborAlphaE)), min(neighborAlphaW,min(min(neighborAlphaNE,neighborAlphaNW),min(neighborAlphaSE,neighborAlphaSW)))); var neighborMaxAlpha=max(max(max(currentAlpha,neighborAlphaN),max(neighborAlphaS,neighborAlphaE)), max(neighborAlphaW,max(max(neighborAlphaNE,neighborAlphaNW),max(neighborAlphaSE,neighborAlphaSW)))); let basicClampedHistory=clamp(historySample,neighborMin,neighborMax); let basicClampedHistoryAlpha=clamp(historySampleAlpha,neighborMinAlpha,neighborMaxAlpha); let colorRange=neighborMax - neighborMin; let alphaRange=neighborMaxAlpha - neighborMinAlpha; let baseExpansion=select(0.1,0.3,isThinDetail); let motionExpansion=clamp(motionMagnitude/10.0,0.0,0.2); let staticExpansion=select(baseExpansion + motionExpansion,baseExpansion * 0.5,isStaticPixel); let expandedMin=neighborMin - colorRange * staticExpansion; let expandedMax=neighborMax + colorRange * staticExpansion; let finalClampedHistory=clamp(basicClampedHistory,expandedMin,expandedMax); let expandedMinAlpha=neighborMinAlpha - alphaRange * staticExpansion; let expandedMaxAlpha=neighborMaxAlpha + alphaRange * staticExpansion; let finalClampedHistoryAlpha=clamp(basicClampedHistoryAlpha,expandedMinAlpha,expandedMaxAlpha); let lumaCoeffs=vec3<f32>(0.2126,0.7152,0.0722); let historyLuma=dot(finalClampedHistory,lumaCoeffs); let lumaDifference=abs(historyLuma - currentLuma); let colorDistance=length(currentColor - finalClampedHistory); let neighborLumaN=dot(neighborN,lumaCoeffs); let neighborLumaS=dot(neighborS,lumaCoeffs); let neighborLumaE=dot(neighborE,lumaCoeffs); let neighborLumaW=dot(neighborW,lumaCoeffs); let neighborLumaNE=dot(neighborNE,lumaCoeffs); let neighborLumaNW=dot(neighborNW,lumaCoeffs); let neighborLumaSE=dot(neighborSE,lumaCoeffs); let neighborLumaSW=dot(neighborSW,lumaCoeffs); let maxNeighborLumaDiff=max( max(max(abs(currentLuma - neighborLumaN),abs(currentLuma - neighborLumaS)), max(abs(currentLuma - neighborLumaE),abs(currentLuma - neighborLumaW))), max(max(abs(currentLuma - neighborLumaNE),abs(currentLuma - neighborLumaNW)), max(abs(currentLuma - neighborLumaSE),abs(currentLuma - neighborLumaSW))) ); let maxNeighborColorDist=max( max(max(length(currentColor - neighborN),length(currentColor - neighborS)), max(length(currentColor - neighborE),length(currentColor - neighborW))), max(max(length(currentColor - neighborNE),length(currentColor - neighborNW)), max(length(currentColor - neighborSE),length(currentColor - neighborSW))) ); let highLumaContrast=smoothstep(0.1,0.4,max(lumaDifference,maxNeighborLumaDiff * 0.6)); let highColorContrast=smoothstep(0.15,0.6,max(colorDistance,maxNeighborColorDist * 0.6)); let overallContrast=max(highLumaContrast,highColorContrast * 0.8); let thinDetailWithHighContrast=isThinDetail && (overallContrast > 0.3); let baseRejectionThresh=select(0.05,0.15,isThinDetail); let motionScale=clamp(motionMagnitude/2.0,0.1,1.0); let smoothRejectionScale=select( mix(2.5,1.0,motionTransition), select(1.0,10.0,isStaticPixel), isThinDetail ); let finalRejectionThresh=baseRejectionThresh * smoothRejectionScale; let historyRejection=smoothstep(finalRejectionThresh * 0.2,finalRejectionThresh,max(lumaDifference,colorDistance)); let motionRejection=smoothstep(0.5,4.0,motionMagnitude); let baseBlendFactor=uniforms.temporalBlendFactor; let thinDetailBlendFactor=select(baseBlendFactor,0.05,isThinDetail); let generalContrastBlend=mix(baseBlendFactor,0.35,overallContrast * 0.7); let thinDetailContrastBlend=select( thinDetailBlendFactor, mix(thinDetailBlendFactor,0.25,overallContrast), thinDetailWithHighContrast ); let contrastBlendFactor=select(generalContrastBlend,thinDetailContrastBlend,isThinDetail); let smoothStaticBlend=select( mix(0.08,contrastBlendFactor,motionTransition), select(contrastBlendFactor,0.01,isStaticPixel), isThinDetail ); let motionAdjustedBlend=mix( smoothStaticBlend, min(smoothStaticBlend + motionBlurWeight * 0.2,0.8), motionBlurWeight ); let maxRejection=max(historyRejection,motionRejection); let finalBlendFactor=mix(motionAdjustedBlend,0.75,maxRejection); let primaryBlend=mix(vec4<f32>(finalClampedHistory,finalClampedHistoryAlpha),vec4<f32>(currentColor,currentAlpha),finalBlendFactor); let fallbackBlend=mix(vec4<f32>(basicClampedHistory,basicClampedHistoryAlpha),vec4<f32>(currentColor,currentAlpha),0.04); let fallbackWeight=clamp(pow(1.0 - motionTransition,2.0) * 0.5,0.0,1.0); let contrastWeight=clamp(pow(thinDetailContrastBlend,2.0) + pow(generalContrastBlend,2.0) * 0.5,0.0,1.0); let motionBasedBlend=mix(primaryBlend,fallbackBlend,fallbackWeight); let contrastBasedBlend=mix(vec4<f32>(finalClampedHistory,finalClampedHistoryAlpha),fallbackBlend,0.01); let finalOutputColor=mix(motionBasedBlend,contrastBasedBlend,contrastWeight); textureStore(outputTexture,pixelCoord,finalOutputColor);\n}\n } `;return{msaa:createCode(),nonMsaa:createCode()}}#Ci(i,m,g){this.#C=m;const{resourceManager:x}=i;this.#Ua=x.createGPUShaderModule(`${m}_MSAA`,{code:g.msaa}),this.#Aa=x.createGPUShaderModule(`${m}_NonMSAA`,{code:g.nonMsaa}),this.#ja=parseWGSL(g.msaa),this.#Xa=parseWGSL(g.nonMsaa);const _=this.#ja.storage,b=this.#ja.uniforms;if(this.#Ka=_,this.#$a=b.uniforms,this.#Wa=b.systemUniforms,this.#$a){const m=new ArrayBuffer(this.#$a.arrayBufferByteLength);this.#Ha=new UniformBuffer(i,m,"TAA_UniformBuffer")}}#Ls(i,m,g){const x=i.createCommandEncoder({label:"TAA_Execute_CommandEncoder_compute"}),_=x.beginComputePass();_.setPipeline(this.#za),_.setBindGroup(0,this.#vs),_.setBindGroup(1,this.#bs),_.dispatchWorkgroups(Math.ceil(m/this.#Ja),Math.ceil(g/this.#Qa)),_.end(),i.queue.submit([x.finish()])}#Is(i,m,g,x,_){const b=[],y=[];b.push({binding:0,resource:m[0]}),b.push({binding:1,resource:this.#_s});const T=g?i.viewRenderTextureManager.gBufferMotionVectorResolveTextureView:i.viewRenderTextureManager.gBufferMotionVectorTextureView;b.push({binding:2,resource:T}),y.push({binding:0,resource:this.#gs}),this.#Wa&&y.push({binding:this.#Wa.binding,resource:{buffer:i.postEffectManager.postEffectSystemUniformBuffer.gpuBuffer,offset:0,size:i.postEffectManager.postEffectSystemUniformBuffer.size}}),this.#Ha&&this.#$a&&y.push({binding:this.#$a.binding,resource:{buffer:this.#Ha.gpuBuffer,offset:0,size:this.#Ha.size}}),this.#ss(b,y,g,x,_),this.#Ds(g,x,_)}#ss(i,m,g,x,_){const b=g?this.#ja:this.#Xa,y=`${this.#C}_BIND_GROUP_LAYOUT_0_USE_MSAA_${g}`,T=`${this.#C}_BIND_GROUP_LAYOUT_1_USE_MSAA_${g}`;if(!this.#hs.has(y)){const i=x.resourceManager.getGPUBindGroupLayout(y)||x.resourceManager.createBindGroupLayout(y,getComputeBindGroupLayoutDescriptorFromShaderInfo(b,0,g));this.#hs.set(y,i)}if(!this.#hs.has(T)){const i=x.resourceManager.getGPUBindGroupLayout(T)||x.resourceManager.createBindGroupLayout(T,getComputeBindGroupLayoutDescriptorFromShaderInfo(b,1,g));this.#hs.set(T,i)}this.#ka=this.#hs.get(y),this.#Oa=this.#hs.get(T),this.#vs=_.createBindGroup({label:`${this.#C}_FRAME_BIND_GROUP_0_USE_MSAA_${g}`,layout:this.#ka,entries:i}),this.#bs=_.createBindGroup({label:`${this.#C}_FRAME_BIND_GROUP_1_USE_MSAA_${g}`,layout:this.#Oa,entries:m})}#Ds(i,m,g){const x=`${this.#C}_COMPUTE_PIPELINE_USE_MSAA_${i}`,_=`${this.#C}_PIPELINE_LAYOUT_USE_MSAA_${i}`;if(this.#ms!==i||!this.#ds.has(x)){if(!this.#fs.has(_)){const m=g.createPipelineLayout({label:`${this.#C}_PIPELINE_LAYOUT_USE_MSAA_${i}`,bindGroupLayouts:[this.#ka,this.#Oa]});this.#fs.set(_,m)}const m=i?this.#Ua:this.#Aa,b=g.createComputePipeline({label:x,layout:this.#fs.get(_),compute:{module:m,entryPoint:"main"}});this.#ds.set(x,b),this.#ms=i}this.#za=this.#ds.get(x)}#is(i){const{redGPUContext:m,viewRenderTextureManager:g,name:x}=i,{gBufferColorTexture:_}=g,{resourceManager:b}=m,{width:y,height:T}=_,w=y!==this.#qa?.width||T!==this.#qa?.height||!this.#ps||!this.#xs||!this.#ps;return w&&(dr(`TAA 텍스처 재생성:${y}x${T},이전 프레임 히스토리 리셋`),this.#ys=0,this.clear(),this.#ps=b.createManagedTexture({size:{width:y,height:T},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,label:`${x}_${this.#C}_currentFrame_${y}x${T}`}),this.#gs=b.getGPUResourceBitmapTextureView(this.#ps,{dimension:"2d",format:"rgba8unorm",label:`${this.#C}_currentFrame_View`}),this.#xs=b.createManagedTexture({size:{width:y,height:T},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST,label:`${x}_${this.#C}_previousFrame_${y}x${T}`}),this.#_s=b.getGPUResourceBitmapTextureView(this.#xs,{dimension:"2d",format:"rgba8unorm",label:`${this.#C}_previousFrame`})),this.#qa={width:y,height:T},this.#Ri(),w}#Ri(){this.#An=0,this.#ps&&(this.#An+=calculateTextureByteSize(this.#ps)),this.#xs&&(this.#An+=calculateTextureByteSize(this.#xs))}#as(i){if(!this.#rs||this.#rs.length!==i.length)return this.#rs=[...i],!0;for(let m=0;m<i.length;m++)if(this.#rs[m]!==i[m])return this.#rs=[...i],!0;return!1}}Object.freeze(TAA);class Box extends Primitive{#Fi=function(){let i,m;return m=function(m,g,x,_,b,y,T,w,P,z,H,$,W){let q,ye,Ge=w/H,Ke=P/$,je=w/2,Xe=P/2,Ye=z/2,Ze=H+1,Je=$+1,Qe=0,et=[];for(ye=0;ye<Je;ye++){let i=ye*Ke-Xe;for(q=0;q<Ze;q++){let g=q*Ge-je;et[x]=g*y,et[_]=i*T,et[b]=Ye,m.push(et.x,et.y,et.z),et[x]=0,et[_]=0,et[b]=z>0?1:-1,m.push(et.x,et.y,et.z),m.push(q/H*W,ye/$*W),Qe+=1}}for(ye=0;ye<$;ye++)for(q=0;q<H;q++){let m=i+q+Ze*ye,x=i+q+Ze*(ye+1),_=i+(q+1)+Ze*(ye+1),b=i+(q+1)+Ze*ye;g.push(m,x,b,x,_,b)}i+=Qe},function(g,x,_,b,y,T,w,P,z){let H=[],$=[];return i=0,m(H,$,"z","y","x",-1,-1,y,b,_,P,w,z),m(H,$,"z","y","x",1,-1,y,b,-_,P,w,z),m(H,$,"x","z","y",1,1,_,y,b,T,P,z),m(H,$,"x","z","y",1,-1,_,y,-b,T,P,z),m(H,$,"x","y","z",1,-1,_,b,y,T,w,z),m(H,$,"x","y","z",-1,-1,_,b,-y,T,w,z),createPrimitiveGeometry(x,H,$,g)}}();constructor(i,m=1,g=1,x=1,_=1,b=1,y=1,T=1){super(i);const w=`PRIMITIVE_BOX_W${m}_H${g}_D${x}_WS${_}_HS${b}_DS${y}_UV${T}`,P=i.resourceManager.cachedBufferState;let z=P[w];z||(z=P[w]=this.#Fi(w,i,m,g,x,_,b,y,T)),this._setData(z)}}class Cylinder extends Primitive{#Fi=function(){let i,m;return function(g,x,_,b,y,T,w,P,z,H){const $=[],W=[];let q=0;const ye=[],Ge=y/2;return i=function(){let i,m;const g=[],x=[],P=(b-_)/y;for(m=0;m<=w;m++){const W=[],Ke=m/w,je=Ke*(b-_)+_;for(i=0;i<=T;i++){const m=i/T,_=m*H+z,b=Math.sin(_),w=Math.cos(_);x[0]=je*b,x[1]=-Ke*y+Ge,x[2]=je*w,$.push(x[0],x[1],x[2]),g[0]=b,g[1]=P,g[2]=w,normalize(g,g),$.push(g[0],g[1],g[2]),$.push(m,Ke),W.push(q++)}ye.push(W)}for(i=0;i<T;i++)for(m=0;m<w;m++){const g=ye[m][i],x=ye[m+1][i],_=ye[m+1][i+1],b=ye[m][i+1];W.push(g,x,b),W.push(x,_,b)}},m=function(i){let m,g,x;const y=[],w=[],P=!0===i?_:b,ye=!0===i?1:-1;for(g=q,m=1;m<=T;m++)$.push(0,Ge*ye,0),$.push(0,ye,0),$.push(.5,.5),q++;for(x=q,m=0;m<=T;m++){const i=m/T*H+z,g=Math.cos(i),x=Math.sin(i);w[0]=P*x,w[1]=Ge*ye,w[2]=P*g,$.push(w[0],w[1],w[2]),$.push(0,ye,0),y[0]=.5*g+.5,y[1]=.5*x*ye+.5,$.push(y[0],1-y[1]),q++}for(m=0;m<T;m++){const _=g+m,b=x+m;!0===i?W.push(b,b+1,_):W.push(b+1,b,_)}},i(),!1===P&&(_>0&&m(!0),b>0&&m(!1)),createPrimitiveGeometry(x,$,W,g)}}();constructor(i,m=1,g=1,x=1,_=8,b=8,y=!1,T=0,w=2*Math.PI){super(i);const P=`PRIMITIVE_CYLINDER_RT${m}_RB${g}_H${x}_RS${_}_HS${b}_TS${y}_TS${T}_TL${w}`,z=i.resourceManager.cachedBufferState;let H=z[P];H||(H=z[P]=this.#Fi(P,i,m,g,x,_,b,y,T,w)),this._setData(H)}}class Sphere extends Primitive{#Fi=function(){let i,m,g,x,_,b,y,T,w=[];const P=new Float32Array(3),z=new Float32Array(3);return function(H,$,W,q,ye,Ge,Ke,je,Xe,Ye){i=je+Xe,x=0,w.length=0;const Ze=[],Je=[];for(g=0;g<=ye;g++){const i=[],_=g/ye;for(m=0;m<=q;m++){const g=m/q;P[0]=-W*Math.cos(Ge+g*Ke)*Math.sin(je+_*Xe),P[1]=W*Math.cos(je+_*Xe),P[2]=W*Math.sin(Ge+g*Ke)*Math.sin(je+_*Xe),Ze.push(P[0],P[1],P[2]),z[0]=P[0],z[1]=P[1],z[2]=P[2],normalize(z,z),Ze.push(z[0],z[1],z[2]),Ze.push(g*Ye,_*Ye),i.push(x++)}w.push(i)}for(g=0;g<ye;g++)for(m=0;m<q;m++)_=w[g][m+1],b=w[g][m],y=w[g+1][m],T=w[g+1][m+1],(0!==g||je>0)&&Je.push(_,b,T),(g!==ye-1||i<Math.PI)&&Je.push(b,y,T);return createPrimitiveGeometry($,Ze,Je,H)}}();constructor(i,m=1,g=16,x=16,_=0,b=2*Math.PI,y=0,T=Math.PI,w=1){super(i);const P=`PRIMITIVE_SPHERE_R${m}_WS${g}_HS${x}_PS${_}_PL${b}_TS${y}_TL${T}_UV${w}`,z=i.resourceManager.cachedBufferState;let H=z[P];H||(H=z[P]=this.#Fi(P,i,m,g,x,_,b,y,T,w)),this._setData(H)}}class DrawDebuggerAxis extends Mesh{constructor(i){super(i,null,null);const m=new Mesh(i,new Sphere(i,.5),new ColorMaterial(i));this.addChild(m);const g=new Box(i);this.addChild(this.#Us(g,"#ff0000",[5,.1,.1],[2.5,0,0])),this.addChild(this.#As(i,"#ff0000",[.5,1.25],[5.5,0,0],[0,0,-90])),this.addChild(this.#Us(g,"#00ff00",[.1,5,.1],[0,2.5,0])),this.addChild(this.#As(i,"#00ff00",[.5,1.25],[0,5.5,0],[180,0,0])),this.addChild(this.#Us(g,"#0000ff",[.1,.1,5],[0,0,2.5])),this.addChild(this.#As(i,"#0000ff",[.5,1.25],[0,0,5.5],[90,0,0]))}#Us(i,m,g,x){const{redGPUContext:_}=this,b=new Mesh(_,i,new ColorMaterial(_,m));return b.setScale(...g),b.setPosition(...x),b}#As(i,m,g,x,_){const b=new Mesh(i,new Cylinder(i,g[0],.001,g[1],32,1),new ColorMaterial(i,m));return b.setScale(g[0],g[1],g[0]),b.setPosition(...x),b.setRotation(..._),b}}const Er=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include FragmentOutput;\nstruct VertexIn { @location(0) pos:vec4<f32>, @location(1) color:vec4<f32>,\n}\nstruct VertexOut { @builtin(position) pos:vec4<f32>, @location(0) color:vec4<f32>, @location(1) worldPos:vec3<f32>,\n}\n@vertex\nfn vertexMain(in:VertexIn) -> VertexOut { var out:VertexOut; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; out.pos=u_noneJitterProjectionCameraMatrix * in.pos; out.color=in.color; out.worldPos=in.pos.xyz; return out;\n}\nstruct GridArgs { lineColor:vec4<f32>,\n}\n@group(1) @binding(0) var<uniform> gridArgs:GridArgs;\n@fragment\nfn fragmentMain(in:VertexOut) -> FragmentOutput { var output:FragmentOutput; let cameraPos=systemUniforms.camera.cameraPosition; let distance=length(in.worldPos - cameraPos); let fadeStart=20.0; let fadeEnd=80.0; let distanceFade=1.0 - saturate((distance - fadeStart)/(fadeEnd - fadeStart)); var finalColor:vec4<f32>; var baseAlpha:f32; if (in.color.r > 0.8 && in.color.g < 0.2 && in.color.b < 0.2) { finalColor=vec4<f32>(1.0,0.0,0.0,1.0); baseAlpha=0.8; } else if (in.color.b > 0.8 && in.color.r < 0.2 && in.color.g < 0.2) { finalColor=vec4<f32>(0.0,0.0,1.0,1.0); baseAlpha=0.8; } else { finalColor=vec4<f32>(gridArgs.lineColor.rgb,1.0); baseAlpha=gridArgs.lineColor.a; } finalColor.a=baseAlpha * distanceFade; output.color=finalColor; output.gBufferMotionVector=vec4<f32>(0.0,0.0,1.0,1.0); return output;\n}\n"),Br=Er.uniforms.gridArgs;class DrawDebuggerGrid{#L;#D;#Ha;#ks;#Os;#Gs;#Ce;#Re;#Fs;#J=100;#R;#C;#wn;#Tn;#vn;#bn;constructor(i){validateRedGPUContext(i),this.#wn=DrawBufferManager.getInstance(i),this.#R=InstanceIdGenerator.getNextId(this.constructor);const{resourceManager:m,gpuDevice:g}=i,x={code:Er.defaultSource},_=m.createGPUShaderModule("VERTEX_MODULE_GRID",x);this.#Ce=new BlendState(this,en.SRC_ALPHA,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#Re=new BlendState(this,en.SRC_ALPHA,en.ONE_MINUS_SRC_ALPHA,tn.ADD),this.#Fs=new ColorRGBA(128,128,128,.5);const b=m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),y=i.resourceManager.getGPUBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT")||i.resourceManager.createBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Er,1));this.#Ns(i),this.#ks=g.createBindGroup({label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_GRID",layout:y,entries:[{binding:0,resource:{buffer:this.#Ha.gpuBuffer,offset:0,size:this.#Ha.size}}]});const T={label:"PIPELINE_DESCRIPTOR_GRID",layout:g.createPipelineLayout({label:"DRAW_DEBUGGER_GRID_PIPELINE_LAYOUT",bindGroupLayouts:[b,y]}),vertex:{module:_,entryPoint:"vertexMain",buffers:[{arrayStride:this.#L.interleavedStruct.arrayStride,attributes:this.#L.interleavedStruct.attributes}]},primitive:{topology:"line-list"},fragment:{module:_,entryPoint:"fragmentMain",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.#Ce.state,alpha:this.#Re.state}},{format:navigator.gpu.getPreferredCanvasFormat(),blend:void 0},{format:"rgba16float",blend:void 0}]},depthStencil:{format:"depth32float",depthWriteEnabled:!0,depthCompare:wn.LESS_EQUAL}};this.#Os=g.createRenderPipeline(T),this.#Gs=g.createRenderPipeline({...T,multisample:{count:4}});const w=this.#wn;this.#Tn||(this.#Tn=w.allocateDrawCommand(this.name),w.setIndexedIndirectCommand(this.#Tn,this.#D.indexCount,1,0,0,0),w.updateSingleCommand(this.#Tn))}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get size(){return this.#J}set size(i){this.#J=i}get lineColor(){return this.#Fs}render(i){const{view:m,currentRenderPassEncoder:g}=i,{redGPUContext:x}=m,{gpuDevice:_,antialiasingManager:b}=x,{useMSAA:y,changedMSAA:T}=b;if(set(create$1(),m.rawCamera.x,m.rawCamera.y,m.rawCamera.z),i.num3DObjects++,i.numDrawCalls++,this.#Os){const x=2*(2*(this.#J+1));this.#vn&&!T||(this.#vn=_.createRenderBundleEncoder({colorFormats:[navigator.gpu.getPreferredCanvasFormat(),navigator.gpu.getPreferredCanvasFormat(),"rgba16float"],depthStencilFormat:"depth32float",sampleCount:y?4:1,label:this.name}),this.#vn.setPipeline(m.redGPUContext.antialiasingManager.useMSAA?this.#Gs:this.#Os),this.#vn.setBindGroup(0,m.systemUniform_Vertex_UniformBindGroup),this.#vn.setBindGroup(1,this.#ks),this.#vn.setVertexBuffer(0,this.#L.gpuBuffer),this.#vn.setIndexBuffer(this.#D.gpuBuffer,this.#D.format),this.#vn.drawIndexedIndirect(this.#Tn.buffer,4*this.#Tn.commandOffset),this.#bn=this.#vn.finish()),i.numTriangles+=0,i.numPoints+=x,g.executeBundles([this.#bn])}}#Vs(i){const m=[],g=[],x=i/2;let _=0;for(let i=-x;i<=x;i+=1){const b=0===i?[0,0,1,1]:[.5,.5,.5,1];m.push(i,0,-x,...b,i,0,x,...b),g.push(_,_+1),_+=2}for(let i=-x;i<=x;i+=1){const b=0===i?[1,0,0,1]:[.5,.5,.5,1];m.push(-x,0,i,...b,x,0,i,...b),g.push(_,_+1),_+=2}return{interleaveData:m,indexData:g}}#Ns(i){const m=this.#J,{resourceManager:g}=i,{cachedBufferState:x}=g;{const g=`VertexBuffer_Grid_${m}`;let _=x[g];if(!_){const{interleaveData:b}=this.#Vs(m);_=new VertexBuffer(i,b,new VertexInterleavedStruct({position:VertexInterleaveType.float32x3,color:VertexInterleaveType.float32x4}),void 0,g),x[g]=_}this.#L=_}{const g=`IndexBuffer_Grid_${m}`;let _=x[g];if(!_){const{indexData:b}=this.#Vs(m);_=new IndexBuffer(i,b,void 0,g),x[g]=_}this.#D=_}{const m="UniformBuffer_Grid";let g=x[m];if(!g){const _=new ArrayBuffer(Br.arrayBufferByteLength);g=new UniformBuffer(i,_),x[m]=g}this.#Ha=g}this.#Ha.writeOnlyBuffer(Br.members.lineColor,this.#Fs.rgbaNormal)}}class ABaseLight{drawDebugger;#zs;#Hs;#pn=!1;constructor(i,m=1){this.#zs=i,this.#Hs=m}get enableDebugger(){return this.#pn}set enableDebugger(i){this.#pn=i}get color(){return this.#zs}set color(i){this.#zs=i}get intensity(){return this.#Hs}set intensity(i){this.#Hs=i}}Object.freeze(ABaseLight);class AmbientLight extends ABaseLight{constructor(i=new ColorRGB(173,216,230),m=.1){super(i,m)}}Object.freeze(AmbientLight);class DirectionalLight extends ABaseLight{#$s=-1;#Ws=-1;#Ks=-1;constructor(i=[-1,-1,-1],m="#fff",g=1){super(new ColorRGB(...convertHexToRgb(m,!0)),g),this.#$s=i[0],this.#Ws=i[1],this.#Ks=i[2]}get directionX(){return this.#$s}set directionX(i){this.#$s=i}get directionY(){return this.#Ws}set directionY(i){this.#Ws=i}get directionZ(){return this.#Ks}set directionZ(i){this.#Ks=i}get direction(){return[this.#$s,this.#Ws,this.#Ks]}set direction(i){this.#$s=i[0],this.#Ws=i[1],this.#Ks=i[2]}}Object.freeze(DirectionalLight);class PointLight extends ABaseLight{#js=1;#Xt=0;#qt=0;#Yt=0;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#Xt}set x(i){this.#Xt=i}get y(){return this.#qt}set y(i){this.#qt=i}get z(){return this.#Yt}set z(i){this.#Yt=i}get position(){return[this.#Xt,this.#qt,this.#Yt]}get radius(){return this.#js}set radius(i){this.#js=i}setPosition(i,m,g){Array.isArray(i)?[this.#Xt,this.#qt,this.#Yt]=i:(this.#Xt=i,this.#qt=m,this.#Yt=g)}}Object.freeze(PointLight);class SpotLight extends ABaseLight{#js=1;#Xt=0;#qt=2;#Yt=0;#$s=0;#Ws=-1;#Ks=0;#Xs=15;#qs=22.5;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#Xt}set x(i){this.#Xt=i}get y(){return this.#qt}set y(i){this.#qt=i}get z(){return this.#Yt}set z(i){this.#Yt=i}get position(){return[this.#Xt,this.#qt,this.#Yt]}get radius(){return this.#js}set radius(i){this.#js=i}get directionX(){return this.#$s}set directionX(i){this.#$s=i}get directionY(){return this.#Ws}set directionY(i){this.#Ws=i}get directionZ(){return this.#Ks}set directionZ(i){this.#Ks=i}get direction(){return[this.#$s,this.#Ws,this.#Ks]}set direction(i){this.#$s=i[0],this.#Ws=i[1],this.#Ks=i[2]}get innerCutoff(){return this.#Xs}set innerCutoff(i){this.#Xs=i}get outerCutoff(){return this.#qs}set outerCutoff(i){this.#qs=i}get innerCutoffCos(){return Math.cos(this.#Xs*Math.PI/180)}get outerCutoffCos(){return Math.cos(this.#qs*Math.PI/180)}setPosition(i,m,g){Array.isArray(i)?[this.#Xt,this.#qt,this.#Yt]=i:(this.#Xt=i,this.#qt=m,this.#Yt=g)}lookAt(i,m,g){let x,_,b;Array.isArray(i)?[x,_,b]=i:(x=i,_=m,b=g);const y=x-this.#Xt,T=_-this.#qt,w=b-this.#Yt,P=Math.sqrt(y*y+T*T+w*w);P>0&&(this.#$s=y/P,this.#Ws=T/P,this.#Ks=w/P)}}Object.freeze(SpotLight);class LightManager{#Ys=3;#Zs=Ht.MAX_CLUSTER_LIGHTS;#Js=[];#Qs=[];#eo=[];#to=new AmbientLight;#no=create$2();get spotLights(){return this.#eo}get spotLightCount(){return this.#eo.length}get limitClusterLightCount(){return this.#Zs}get pointLights(){return this.#Qs}get pointLightCount(){return this.#Qs.length}get limitDirectionalLightCount(){return this.#Ys}get directionalLightCount(){return this.#Js.length}get directionalLights(){return this.#Js}get ambientLight(){return this.#to}set ambientLight(i){i instanceof AmbientLight||consoleAndThrowError("allow only AmbientLight instance"),this.#to=i}addSpotLight(i){i instanceof SpotLight||consoleAndThrowError("allow only SpotLight instance");this.#eo.length+this.#Qs.length>this.#Zs&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#eo.push(i)}addPointLight(i){i instanceof PointLight||consoleAndThrowError("allow only PointLight instance");this.#eo.length+this.#Qs.length>this.#Zs&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#Qs.push(i)}addDirectionalLight(i){i instanceof DirectionalLight||consoleAndThrowError("allow only DirectionalLight instance");this.#Js.length>this.#Ys&&consoleAndThrowError("Cannot add more directional lights. The limit has been reached."),this.#Js.push(i)}removeSpotLight(i){const m=this.#eo.indexOf(i);-1!==m&&this.#eo.splice(m,1)}removePointLight(i){const m=this.#Qs.indexOf(i);-1!==m&&this.#Qs.splice(m,1)}removeDirectionalLight(i){const m=this.#Js.indexOf(i);-1!==m&&this.#Js.splice(m,1)}removeAllSpotLight(){this.#eo=[]}removeAllPointLight(){this.#Qs=[]}removeAllDirectionalLight(){this.#Js=[]}removeAllLight(){this.removeAllPointLight(),this.removeAllSpotLight(),this.removeAllDirectionalLight(),this.#to=null}getDirectionalLightProjectionViewMatrix(i){return multiply(create$2(),this.getDirectionalLightProjectionMatrix(i),this.getDirectionalLightViewMatrix(i))}getDirectionalLightProjectionMatrix(i){const m=create$2(),g=i.rawCamera instanceof Camera2D?fromValues(0,0,0):fromValues(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),x=Math.max(distance(g,create$1()),1);return T(m,-x,x,-x,x,3*-x,3*x),m}getDirectionalLightViewMatrix(i){identity(this.#no);const m=i.rawCamera instanceof Camera2D?fromValues(0,0,0):fromValues(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),g=Math.max(distance(m,create$1()),1),x=fromValues(0,1,0),_=fromValues(0,0,0),b=i.scene.lightManager.directionalLights.length?fromValues(-i.scene.lightManager.directionalLights[0].direction[0]*g,-i.scene.lightManager.directionalLights[0].direction[1]*g,-i.scene.lightManager.directionalLights[0].direction[2]*g):create$1(),y=create$2();return lookAt(y,b,_,x),y}}Object.freeze(LightManager);class DirectionalShadowManager{#ro=2048;#io=.005;#ao;#so;#oo;#l;#va=[];#An=0;get videoMemorySize(){return this.#An}get castingList(){return this.#va}get shadowDepthTextureView(){return this.#so}get shadowDepthTextureViewEmpty(){return this.#oo}get bias(){return this.#io}set bias(i){validatePositiveNumberRange(i,0,1),this.#io=i}get shadowDepthTextureSize(){return this.#ro}set shadowDepthTextureSize(i){validateUintRange(i,1),this.#ro=i,this.#uo()}reset(){this.destroy()}resetCastingList(){this.#va.length=0}update(i){this.#l=i,this.#uo()}destroy(){this.#ao&&(this.#ao.destroy(),this.#ao=null,this.#so=null)}#Ri(){const i=this.#ao;if(!i)return 0;this.#An=calculateTextureByteSize(i)}#uo(){this.#ao?.width!==this.#ro&&(this.destroy(),this.#lo(),this.#Ri())}#co(i){const m=i.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_EmptyDepthTexture_1x1_${Date.now()}`});this.#oo=m.createView({label:m.label})}#lo(){const{gpuDevice:i,resourceManager:m}=this.#l;this.#ao=m.createManagedTexture({size:[this.#ro,this.#ro,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_shadowDepthTextureSize_${this.#ro}x${this.#ro}_${Date.now()}`}),this.#so=this.#ao.createView({label:this.#ao.label}),this.#oo||this.#co(i)}}Object.freeze(DirectionalShadowManager);class ShadowManager{#ho=new DirectionalShadowManager;constructor(){}get directionalShadowManager(){return this.#ho}update(i){this.#ho.update(i)}}Object.freeze(ShadowManager);class Scene extends Object3DContainer{#R;#C;#fo=new ColorRGBA;#do=!1;#mo=new LightManager;#po=new ShadowManager;constructor(i){super(),this.#R=InstanceIdGenerator.getNextId(this.constructor),this.#C=i}get lightManager(){return this.#mo}get shadowManager(){return this.#po}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get backgroundColor(){return this.#fo}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#fo=i}get useBackgroundColor(){return this.#do}set useBackgroundColor(i){this.#do=i}}class PerspectiveCamera{#R;#go=new Float32Array([0,1,0]);#ti=create$2();#Xt=0;#Yt=0;#qt=0;#sn=0;#on=0;#un=0;#xo=60;#_o=.01;#vo=1e4;#C;constructor(){}get rotationX(){return this.#sn}set rotationX(i){this.#sn=i}get rotationY(){return this.#on}set rotationY(i){this.#on=i}get rotationZ(){return this.#un}set rotationZ(i){this.#un=i}get fieldOfView(){return this.#xo}set fieldOfView(i){validateNumber(i),this.#xo=i}get nearClipping(){return this.#_o}set nearClipping(i){validateNumber(i),this.#_o=i}get farClipping(){return this.#vo}set farClipping(i){validateNumber(i),this.#vo=i}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get modelMatrix(){return this.#ti}get x(){return this.#Xt}set x(i){this.#Xt=i,this.#ti[12]=i}get y(){return this.#qt}set y(i){this.#qt=i,this.#ti[13]=i}get z(){return this.#Yt}set z(i){this.#Yt=i,this.#ti[14]=i}get position(){return[this.#Xt,this.#qt,this.#Yt]}setPosition(i,m,g){Array.isArray(i)?[this.#Xt,this.#qt,this.#Yt]=i:(this.#Xt=i,this.#qt=m,this.#Yt=g),[this.#ti[12],this.#ti[13],this.#ti[14]]=[this.#Xt,this.#qt,this.#Yt]}lookAt(i,m,g){lookAt(this.#ti,[this.#Xt,this.#qt,this.#Yt],[i,m,g],this.#go)}}class OrthographicCamera extends PerspectiveCamera{#R;#C;#bo=1;#yo=-1;#So=-1;#To=1;constructor(){super(),this.nearClipping=.01,this.farClipping=2e3}get top(){return this.#bo}set top(i){validateNumber(i),this.#bo=i}get bottom(){return this.#yo}set bottom(i){validateNumber(i),this.#yo=i}get left(){return this.#So}set left(i){validateNumber(i),this.#So=i}get right(){return this.#To}set right(i){validateNumber(i),this.#To=i}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}}class AController{#wo;constructor(){}get camera(){return this.#wo}set camera(i){this.#wo=i}update(i,m){}getCanvasEventPoint=(i,m)=>{const g=m.htmlCanvas,x=m.detector.isMobile,_=g.getBoundingClientRect(),b="clientX",y="clientY";let T,w;if(x){const m=i.changedTouches[0];T=m[b],w=m[y]}else{const m=i;T=m[b],w=m[y]}return{x:T-_.left,y:w-_.top}}}class ViewTransform{onResize=null;#l;#Mo=create$2();#Co=create$2();#wo;#Xt=0;#qt=0;#jr;#Xr;#qr=[0,0,0,0];#Ro=0;#Po=0;constructor(i){validateRedGPUContext(i),this.#l=i,this.setSize("100%","100%")}get redGPUContext(){return this.#l}get camera(){return this.#wo}set camera(i){i instanceof PerspectiveCamera||i instanceof Camera2D||i instanceof Camera2D||i instanceof OrthographicCamera||i instanceof AController||consoleAndThrowError("allow PerspectiveCamera or OrthographicCamera or AController instance"),this.#wo=i}get x(){return this.#Xt}set x(i){this.setPosition(i,this.y)}get y(){return this.#qt}set y(i){this.setPosition(this.x,i)}get width(){return this.#jr}set width(i){this.setSize(i,this.#Xr)}get height(){return this.#Xr}set height(i){this.setSize(this.#jr,i)}get pixelRectArray(){return this.#qr}get pixelRectObject(){return{x:this.#qr[0],y:this.#qr[1],width:this.#qr[2],height:this.#qr[3]}}get screenRectObject(){return{x:this.#qr[0]/devicePixelRatio,y:this.#qr[1]/devicePixelRatio,width:this.#qr[2]/devicePixelRatio,height:this.#qr[3]/devicePixelRatio}}get aspect(){return this.#qr[2]/this.#qr[3]}get frustumPlanes(){return this.#wo instanceof AController?computeViewFrustumPlanes(this.projectionMatrix,this.#wo.camera.modelMatrix):computeViewFrustumPlanes(this.projectionMatrix,this.#wo.modelMatrix)}get rawCamera(){return this.#wo instanceof AController?this.#wo.camera:this.#wo}get jitterOffset(){return[this.#Ro,this.#Po]}get noneJitterProjectionMatrix(){const{pixelRectObject:i,redGPUContext:m}=this;if(this.rawCamera instanceof OrthographicCamera){const{nearClipping:i,farClipping:m}=this.rawCamera;orthoZO(this.#Co,this.rawCamera.left,this.rawCamera.right,this.rawCamera.bottom,this.rawCamera.top,i,m)}else if(this.rawCamera instanceof Camera2D)T(this.#Co,-.5,.5,-.5,.5,-1e5,1e5),scale(this.#Co,this.#Co,[m.renderScale,m.renderScale,1]),translate(this.#Co,this.#Co,[-.5,.5,0]),scale(this.#Co,this.#Co,[1/i.width*window.devicePixelRatio,-1/i.height*window.devicePixelRatio,1]),identity(this.rawCamera.modelMatrix);else{const{fieldOfView:i,nearClipping:m,farClipping:g}=this.rawCamera;y(this.#Co,Math.PI/180*i,this.aspect,m,g)}return this.#Co}get projectionMatrix(){const{redGPUContext:i}=this,{antialiasingManager:m}=i;if(this.#Mo=clone(this.noneJitterProjectionMatrix),m.useTAA&&this.rawCamera instanceof PerspectiveCamera&&(0!==this.#Ro||0!==this.#Po)){const i=2/this.#qr[2],m=2/this.#qr[3];this.#Mo[8]+=this.#Ro*i,this.#Mo[9]+=this.#Po*m}return this.#Mo}get inverseProjectionMatrix(){return invert(create$2(),this.#Mo)}setJitterOffset(i,m){this.#Ro=i,this.#Po=m}clearJitterOffset(){this.#Ro=0,this.#Po=0}setPosition(i=this.#Xt,m=this.#qt){const{sizeManager:g}=this.#l;RedGPUContextSizeManager.validatePositionValue(i),RedGPUContextSizeManager.validatePositionValue(m),this.#Xt=i,this.#qt=m;const x=g.pixelRectObject,_=RedGPUContextSizeManager.getPixelDimension(x,"width",i),b=RedGPUContextSizeManager.getPixelDimension(x,"height",m);this.#qr[0]=Math.floor(_*(this.#Xt.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#qr[1]=Math.floor(b*(this.#qt.toString().includes("%")?1:g.renderScale*window.devicePixelRatio))}setSize(i=this.#jr,m=this.#Xr){const{sizeManager:g}=this.#l;RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#jr=i,this.#Xr=m;const x=g.pixelRectObject,_=RedGPUContextSizeManager.getPixelDimension(x,"width",i),b=RedGPUContextSizeManager.getPixelDimension(x,"height",m);this.#qr[2]=Math.floor(_*(this.#jr.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#qr[3]=Math.floor(b*(this.#Xr.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.onResize&&this.onResize(this.screenRectObject.width,this.screenRectObject.height)}}Object.freeze(ViewTransform);class AView extends ViewTransform{#C;#Eo;#R;#Bo=new PickingManager;#Io=!0;#Lo=!1;#Do=50;#Uo;#Ao;#ko;#Oo;constructor(i,m,g,x){super(i),this.scene=m,this.camera=g,x&&(this.name=x)}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get scene(){return this.#Eo}set scene(i){i instanceof Scene||consoleAndThrowError("allow only Scene instance"),this.#Eo=i}get pickingManager(){return this.#Bo}get useFrustumCulling(){return this.#Io}set useFrustumCulling(i){this.#Io=i}get useDistanceCulling(){return this.#Lo}set useDistanceCulling(i){this.#Lo=i}get distanceCulling(){return this.#Do}set distanceCulling(i){this.#Do=i}get grid(){return this.#Uo}set grid(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerGrid(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerGrid)&&null!==i)throw new TypeError("grid must be of type 'DrawDebuggerGrid','boolean',or 'null'.");this.#Uo=i}get axis(){return this.#Ao}set axis(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerAxis(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerAxis)&&null!==i)throw new TypeError("axis must be of type 'DrawDebuggerAxis','boolean',or 'null'.");this.#Ao=i}get fxaa(){return this.#Oo||(this.#Oo=new FXAA(this.redGPUContext)),this.#Oo}get taa(){return this.#ko||(this.#ko=new TAA(this.redGPUContext)),this.#ko}screenToWorld(i,m){return screenToWorld(i,m,this)}checkMouseInViewBounds(){const{pixelRectObject:i,pickingManager:m}=this,{mouseX:g,mouseY:x}=m;return 0<g&&g<i.width&&0<x&&x<i.height}}Object.freeze(AView);class ViewRenderTextureManager{#Go;#Fo;#No;#Vo;#zo;#An=0;#l;#ni;#Ho=new Map;#$o={};constructor(i){validateRedGPUContext(i.redGPUContext),this.#l=i.redGPUContext,this.#ni=i}get videoMemorySize(){return this.#An}get renderPath1ResultTextureDescriptor(){return this.#No}get depthTexture(){return this.#Vo}get depthTextureView(){return this.#lo(),this.#zo}get renderPath1ResultTextureView(){return this.#Fo}get renderPath1ResultTexture(){return this.#Wo(),this.#Go}get gBufferColorTexture(){return this.#Ho.get("gBufferColor")?.texture}get gBufferColorResolveTexture(){return this.#Ho.get("gBufferColor")?.resolveTexture}get gBufferColorTextureView(){return this.#Ko("gBufferColor"),this.#Ho.get("gBufferColor")?.textureView}get gBufferColorResolveTextureView(){return this.#Ho.get("gBufferColor")?.resolveTextureView}get gBufferNormalTexture(){return this.#Ho.get("gBufferNormal")?.texture}get gBufferNormalResolveTexture(){return this.#Ho.get("gBufferNormal")?.resolveTexture}get gBufferNormalTextureView(){return this.#Ko("gBufferNormal"),this.#Ho.get("gBufferNormal")?.textureView}get gBufferNormalResolveTextureView(){return this.#Ho.get("gBufferNormal")?.resolveTextureView}get gBufferMotionVectorTexture(){return this.#Ho.get("gBufferMotionVector")?.texture}get gBufferMotionVectorResolveTexture(){return this.#Ho.get("gBufferMotionVector")?.resolveTexture}get gBufferMotionVectorTextureView(){return this.#Ko("gBufferMotionVector","rgba16float"),this.#Ho.get("gBufferMotionVector")?.textureView}get gBufferMotionVectorResolveTextureView(){return this.#Ho.get("gBufferMotionVector")?.resolveTextureView}#jo(){const i=[this.#Ho.get("gBufferColor")?.texture,this.#Ho.get("gBufferColor")?.resolveTexture,this.#Vo,this.#Go,this.#Ho.get("gBufferNormal")?.texture,this.#Ho.get("gBufferNormal")?.resolveTexture].filter(Boolean);this.#An=i.reduce((i,m)=>i+calculateTextureByteSize(m),0)}#Ko(i,m){const{antialiasingManager:g,resourceManager:x}=this.#l,{useMSAA:_}=g,b=this.#Ho.get(i),y=b?.texture,{pixelRectObject:T,name:w}=this.#ni,{width:P,height:z}=T,H=y?.width!==P||y?.height!==z,$=this.#$o[i]!==_,W=!y||H||$;if(this.#$o[i]=_,W){dr(`새 텍스처 생성 중:${i}`),y&&(y?.destroy(),b.texture=null,b.textureView=null,b.resolveTexture?.destroy(),b.resolveTexture=null,b.resolveTextureView=null,this.#Ho.delete(i));const g={texture:null,textureView:null,resolveTexture:null,resolveTextureView:null},T=x.createManagedTexture({size:[Math.max(P,1),Math.max(z,1),1],sampleCount:_?4:1,label:`${w}_${i}_texture_${P}x${z}`,format:m||navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC});if(g.texture=T,g.textureView=x.getGPUResourceBitmapTextureView(T),_){const _=x.createManagedTexture({size:{width:Math.max(P,1),height:Math.max(z,1),depthOrArrayLayers:1},sampleCount:1,label:`${w}_${i}_resolveTexture_${P}x${z}`,format:m||navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC});g.resolveTexture=_,g.resolveTextureView=x.getGPUResourceBitmapTextureView(_)}this.#Ho.set(i,g),this.#jo()}}#Wo(){const{resourceManager:i}=this.#l,m=this.#Go,{pixelRectObject:g,name:x}=this.#ni,{width:_,height:b}=g;(!m||(m?.width!==_||m?.height!==b))&&(m&&(this.#Go=null,this.#Fo=null),this.#No={size:{width:Math.max(1,_),height:Math.max(1,b),depthOrArrayLayers:1},format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,mipLevelCount:getMipLevelCount(_,b),label:`${x}_renderPath1ResultTexture_${_}x${b}`},this.#Go=i.createManagedTexture(this.#No),this.#Fo=i.getGPUResourceBitmapTextureView(this.#Go),this.#jo(),requestAnimationFrame(()=>{m?.destroy()}))}#lo(){const{antialiasingManager:i,resourceManager:m}=this.#l,{useMSAA:g}=i,x=this.#Vo,{pixelRectObject:_,name:b}=this.#ni,{width:y,height:T}=_,w=x?.width!==y||x?.height!==T,P=this.#$o.depth!==g,z=!x||w||P;if(this.#$o.depth=g,z){x&&(x?.destroy(),this.#Vo=null,this.#zo=null);const i=m.createManagedTexture({size:[Math.max(y,1),Math.max(T,1),1],sampleCount:g?4:1,label:`${b}_depth_${y}x${T}`,format:"depth32float",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING});this.#Vo=i,this.#zo=m.getGPUResourceBitmapTextureView(i),this.#jo()}}}Object.freeze(ViewRenderTextureManager);class DrawDebuggerDirectionalLight extends ADrawDebuggerLight{#nt;#fa;#Xo=[0,10,0];constructor(i,m){super(i,[255,255,0],8),this.#nt=m,this.#fa=new TextField3D(i),this.#fa.useBillboard=!0,this.#fa.fontSize=40,this.#fa.text="☀️",this.lightDebugMesh.addChild(this.#fa)}render(i){if(!i.view.systemUniform_Vertex_UniformBindGroup)return;if(!this.#nt.enableDebugger)return;this.#qo(this.#nt,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i);const m=this.#nt.direction,g=this.#Xo,x=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]),_=[m[0]/x,m[1]/x,m[2]/x];this.#fa.setPosition(g[0]-0*_[0],g[1]-0*_[1],g[2]-0*_[2])}#qo(i,m){const g=this.#Xo,x=i.direction||[0,-1,0],_=Math.sqrt(x[0]*x[0]+x[1]*x[1]+x[2]*x[2]),b=[x[0]/_,x[1]/_,x[2]/_],y=[g[0]+3*b[0],g[1]+3*b[1],g[2]+3*b[2]],T=.3;let w=[0,1,0];Math.abs(b[1])>.99&&(w=[1,0,0]);const P=[b[1]*w[2]-b[2]*w[1],b[2]*w[0]-b[0]*w[2],b[0]*w[1]-b[1]*w[0]],z=Math.sqrt(P[0]*P[0]+P[1]*P[1]+P[2]*P[2]),H=[P[0]/z,P[1]/z,P[2]/z],$=[H[1]*b[2]-H[2]*b[1],H[2]*b[0]-H[0]*b[2],H[0]*b[1]-H[1]*b[0]],W=[[g,y],[y,[y[0]+-.5*b[0]+H[0]*T,y[1]+-.5*b[1]+H[1]*T,y[2]+-.5*b[2]+H[2]*T]],[y,[y[0]+-.5*b[0]-H[0]*T,y[1]+-.5*b[1]-H[1]*T,y[2]+-.5*b[2]-H[2]*T]],[y,[y[0]+-.5*b[0]+$[0]*T,y[1]+-.5*b[1]+$[1]*T,y[2]+-.5*b[2]+$[2]*T]],[y,[y[0]+-.5*b[0]-$[0]*T,y[1]+-.5*b[1]-$[1]*T,y[2]+-.5*b[2]-$[2]*T]],[[g[0]-.3,g[1],g[2]],[g[0]+.3,g[1],g[2]]],[[g[0],g[1]-.3,g[2]],[g[0],g[1]+.3,g[2]]],[[g[0],g[1],g[2]-.3],[g[0],g[1],g[2]+.3]]];this.updateVertexBuffer(W,m)}}Object.freeze(DrawDebuggerDirectionalLight);const Ir=parseWGSL(Kt.SYSTEM_UNIFORM).uniforms.systemUniforms;let Lr=create$2(),Dr=create$2(),Ur=create$2();class View3D extends AView{#Yo=Ir;#Zo;#Jo;#Qo;#eu;#tu;#nu;#ru;#iu=[];#au;#Er;#su;#ci;#ou;#uu;#lu;#cu=void 0;#hu=void 0;#fu;#du;#Ti;#wi;#Mi;constructor(i,m,g,x){super(i,m,g,x),this.#Ci(),this.#ru=new ViewRenderTextureManager(this),this.#tu=new RenderViewStateData(this),this.#nu=new PostEffectManager(this),dr(this.systemUniform_Vertex_StructInfo),this.#Ti=new ArrayBuffer(this.systemUniform_Vertex_StructInfo.endOffset),this.#wi=new Float32Array(this.#Ti),this.#Mi=new Uint32Array(this.#Ti)}get viewRenderTextureManager(){return this.#ru}get systemUniform_Vertex_StructInfo(){return this.#Yo}get systemUniform_Vertex_UniformBindGroup(){return this.#Zo}get systemUniform_Vertex_UniformBuffer(){return this.#Jo}get passLightClustersBound(){return this.#lu}get ibl(){return this.#eu}set ibl(i){this.#eu=i}get postEffectManager(){return this.#nu}get renderViewStateData(){return this.#tu}get skybox(){return this.#Qo}set skybox(i){const{resourceManager:m}=this.redGPUContext,g=this.#Qo?.skyboxTexture,x=i?.skyboxTexture;g&&g!==x&&this.#mu(m,g.cacheKey,!1),this.#Qo=i}update(i=!1,m=!1,g){const{scene:x,redGPUContext:_}=this,{shadowManager:b}=x;b.update(_);const{directionalShadowManager:y}=b,T=this.ibl,w=T?.iblTexture?.gpuTexture,P=T?.irradianceTexture?.gpuTexture;let z=i?y.shadowDepthTextureViewEmpty:y.shadowDepthTextureView;const H=this.redGPUContext.viewList.indexOf(this),$=`${H}_${i?"shadowRender":"basic"}_2path${!!g}`;if(H>-1){let i=!0,m=this.#iu[$];m&&(i=m.ibl!==T||m.ibl_iblTexture!==w||m.ibl_irradianceTexture!==P||m.renderPath1ResultTextureView!==g||m.shadowDepthTextureView!==z||!this.#uu),i?this.#pu($,z,this.ibl,g):this.#Zo=this.#iu[$].vertexUniformBindGroup,this.#iu[$]={ibl:T,ibl_iblTexture:w,ibl_irradianceTexture:P,renderPath1ResultTextureView:g,shadowDepthTextureView:z,vertexUniformBindGroup:this.#Zo}}this.#gu(m),this.#xu()}#Bi(i){i.forEach(({key:i,value:m,dataView:g,targetMembers:x})=>{const _=x[i];g.set("number"==typeof m?[m]:m,_.uniformOffset/_.View.BYTES_PER_ELEMENT)})}#xu(){const{inverseProjectionMatrix:i,noneJitterProjectionMatrix:m,projectionMatrix:g,rawCamera:x}=this,{redGPUContext:_,systemUniform_Vertex_UniformBuffer:b}=this,{gpuDevice:y}=_,{lightManager:T,shadowManager:w}=this.scene,{modelMatrix:P,position:z}=x,H=this.systemUniform_Vertex_StructInfo,{gpuBuffer:$}=b,W=x instanceof Camera2D,{members:q}=H;{const{members:_}=H,b=_.camera.members;this.#Bi([{key:"projectionMatrix",value:g,dataView:this.#wi,targetMembers:_},{key:"projectionCameraMatrix",value:multiply(Lr,g,P),dataView:this.#wi,targetMembers:_},{key:"noneJitterProjectionMatrix",value:m,dataView:this.#wi,targetMembers:_},{key:"noneJitterProjectionCameraMatrix",value:multiply(Dr,m,P),dataView:this.#wi,targetMembers:_},{key:"inverseProjectionMatrix",value:i,dataView:this.#wi,targetMembers:_},{key:"prevProjectionCameraMatrix",value:multiply(Ur,m,P),dataView:this.#wi,targetMembers:_},{key:"resolution",value:[this.pixelRectObject.width,this.pixelRectObject.height],dataView:this.#wi,targetMembers:_},{key:"cameraMatrix",value:P,dataView:this.#wi,targetMembers:b},{key:"cameraPosition",value:z,dataView:this.#wi,targetMembers:b},{key:"nearClipping",value:W?0:x.nearClipping,dataView:this.#wi,targetMembers:b},{key:"farClipping",value:W?0:x.farClipping,dataView:this.#wi,targetMembers:b},{key:"useIblTexture",value:this.ibl?.iblTexture?.gpuTexture?1:0,dataView:this.#Mi,targetMembers:_},{key:"time",value:this.renderViewStateData.timestamp||0,dataView:this.#wi,targetMembers:_},{key:"isView3D",value:this.constructor===View3D?1:0,dataView:this.#Mi,targetMembers:_},{key:"shadowDepthTextureSize",value:w.directionalShadowManager.shadowDepthTextureSize,dataView:this.#Mi,targetMembers:_},{key:"bias",value:w.directionalShadowManager.bias,dataView:this.#wi,targetMembers:_},{key:"directionalLightCount",value:T.directionalLightCount,dataView:this.#Mi,targetMembers:_},{key:"directionalLightProjectionViewMatrix",value:T.getDirectionalLightProjectionViewMatrix(this),dataView:this.#wi,targetMembers:_},{key:"directionalLightProjectionMatrix",value:T.getDirectionalLightProjectionMatrix(this),dataView:this.#wi,targetMembers:_},{key:"directionalLightViewMatrix",value:T.getDirectionalLightViewMatrix(this),dataView:this.#wi,targetMembers:_}])}T.directionalLights.forEach((i,m)=>{const{directionalLights:g}=q;i.enableDebugger&&(i.drawDebugger||(i.drawDebugger=new DrawDebuggerDirectionalLight(_,i)),i.drawDebugger.render(this.renderViewStateData));const x=g.memberList[m];this.#Bi([{key:"direction",value:i.direction,dataView:this.#wi,targetMembers:x},{key:"color",value:i.color.rgbNormal,dataView:this.#wi,targetMembers:x},{key:"intensity",value:i.intensity,dataView:this.#wi,targetMembers:x}])});{const i=T.ambientLight,{ambientLight:m}=q,g=m.members;this.#Bi([{key:"color",value:i.color.rgbNormal,dataView:this.#wi,targetMembers:g},{key:"intensity",value:i.intensity,dataView:this.#wi,targetMembers:g}])}y.queue.writeBuffer($,0,this.#Ti)}#pu(i,m,g,x){this.#gu(!0);const _=g?.iblTexture,b=g?.irradianceTexture,{redGPUContext:y}=this,{gpuDevice:T,resourceManager:w}=y,P={layout:w.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),label:`SYSTEM_UNIFORM_bindGroup_${i}`,entries:[{binding:0,resource:{buffer:this.#Jo.gpuBuffer,offset:0,size:this.#Jo.size}},{binding:1,resource:this.#au},{binding:2,resource:m},{binding:3,resource:this.#Er},{binding:5,resource:{buffer:this.#ci,offset:0,size:this.#ci.size}},{binding:6,resource:{buffer:this.#uu.clusterLightsBuffer,offset:0,size:this.#uu.clusterLightsBuffer.size}},{binding:7,resource:this.#Er},{binding:8,resource:x||w.emptyBitmapTextureView},{binding:9,resource:this.#su},{binding:10,resource:w.getGPUResourceCubeTextureView(_,_?.viewDescriptor||CubeTexture.defaultViewDescriptor)},{binding:11,resource:w.getGPUResourceCubeTextureView(b,b?.viewDescriptor||CubeTexture.defaultViewDescriptor)}]};this.#Zo=T.createBindGroup(P),this.#_u(w,_,b)}#_u(i,m,g){[[this.#fu,m],[this.#du,g]].forEach(([m,g])=>{m&&m!==g&&this.#mu(i,m.cacheKey,!1),g&&m!==g&&this.#mu(i,g.cacheKey,!0)}),this.#fu=m,this.#du=g}#mu(i,m,g){const x=i.managedCubeTextureState,_=x?.table.get(m);_&&(g?_.useNum++:_.useNum--)}#Ci(){const i=new ArrayBuffer(Ir.arrayBufferByteLength);this.#Jo=new UniformBuffer(this.redGPUContext,i,"SYSTEM_UNIFORM_BUFFER_VERTEX","SYSTEM_UNIFORM_BUFFER_VERTEX"),this.#ou=new Float32Array(16*Ht.MAX_CLUSTER_LIGHTS+4),this.#ci=this.redGPUContext.resourceManager.createGPUBuffer("VIEW_CLUSTER_LIGHTS_BUFFER",{size:this.#ou.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#ci,0,this.#ou),this.#au=new Sampler(this.redGPUContext,{addressModeU:un.CLAMP_TO_EDGE,addressModeV:un.CLAMP_TO_EDGE,addressModeW:un.CLAMP_TO_EDGE,compare:wn.LESS_EQUAL}).gpuSampler,this.#Er=new Sampler(this.redGPUContext).gpuSampler,this.#su=new Sampler(this.redGPUContext,{addressModeU:un.REPEAT,addressModeV:un.REPEAT}).gpuSampler}#gu(i=!1){if(!i)return;const{redGPUContext:m,scene:g,renderViewStateData:x}=this;if(this.#lu||(this.#lu=new PassClusterLightBound(m,this)),this.#uu&&(this.#lu.render(),this.#cu=this.pixelRectArray[2],this.#hu=this.pixelRectArray[3]),this.#uu||(this.#uu=new PassClustersLight(m,this)),g){const{pointLights:i,spotLights:_}=g.lightManager,b=i.length,y=_.length;if(b){let g=b;for(;g--;){const _=i[g],b=4+16*g;this.#ou.set([..._.position,_.radius,..._.color.rgbNormal,_.intensity,0],b),_.enableDebugger&&(_.drawDebugger||(_.drawDebugger=new DrawDebuggerPointLight(m,_)),_.drawDebugger.render(x))}}if(y){const i=16,g=b*i;let T=y;for(;T--;){const b=_[T],y=4+i*T+g;this.#ou.set([...b.position,b.radius,...b.color.rgbNormal,b.intensity,1,...b.direction,b.outerCutoff,b.innerCutoff],y),b.enableDebugger&&(b.drawDebugger||(b.drawDebugger=new DrawDebuggerSpotLight(m,b)),b.drawDebugger.render(x))}}this.#ou.set([b,y,0,0],0),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#ci,0,this.#ou),this.#uu.render()}}}Object.freeze(View3D);class RedGPUContextViewContainer{#vu=[];constructor(){}get viewList(){return this.#vu}get numViews(){return this.#vu.length}contains(i){return this.#vu.includes(i)}addView(i){this.#bu(i),this.#vu.push(i)}addViewAt(i,m){this.#bu(i),validateUintRange(m);const g=this.#vu.length;g<m&&(m=g),this.#vu[m]=i}getViewAt(i){return validateUintRange(i),this.#vu[i]}getViewIndex(i){return this.#bu(i),this.#vu.indexOf(i)}setViewIndex(i,m){this.#bu(i),validateUintRange(m);const g=this.#vu.length,x=m>=g,_=this.#vu.indexOf(i);-1===_&&consoleAndThrowError("입력하신 View 는 RedGPUContext instance 에 등록되지 않은 View 입니다."),x&&consoleAndThrowError(`index must be smaller than the viewList length./index:${m}/this.#viewList.length:${g}`),this.#vu.splice(_,1),this.#vu.splice(m,0,i)}swapViews(i,m){this.#bu(i),this.#bu(m);const g=this.#vu.indexOf(i),x=this.#vu.indexOf(m);-1!==g&&-1!==x||consoleAndThrowError((-1===g?"view1":"view2")+" is not child of this RedGPUContext instance."),this.swapViewsAt(g,x)}swapViewsAt(i,m){i===m&&consoleAndThrowError("The indices to swap cannot be the same."),validateUintRange(i),validateUintRange(m);const g=this.#vu.length;(i>=g||m>=g)&&consoleAndThrowError(`index1,index2 must be smaller than the viewList length./index1:${i}/index2:${m}/this.#viewList.length:${g}`);const x=this.#vu[i];this.#vu[i]=this.#vu[m],this.#vu[m]=x}removeView(i){this.#bu(i);const m=this.#vu.indexOf(i);m>-1?this.#vu.splice(m,1):consoleAndThrowError("View3D is not found in the view list.")}removeViewAt(i){validateUintRange(i);const m=this.#vu.length;i<m?this.#vu.splice(i,1):consoleAndThrowError(`Index ${i} is out of range. View list length is ${m}.`)}removeAllViews(){this.#vu.length=0}#bu(i){i instanceof View3D||consoleAndThrowError("allow only View3D instance")}}class RedGPUContextDetector{#yu;#Su;#Tu;#wu;#Mu;constructor(i){this.#Ci(i.gpuAdapter)}get adapterInfo(){return this.#yu}get limits(){return this.#Su}get isFallbackAdapter(){return this.#Tu}get groupedLimits(){return this.#wu}get userAgent(){return this.#Mu}get isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Kindle|Silk|PlayBook/i.test(navigator.userAgent)}#Ci(i){this.#Mu=navigator.userAgent,this.#Cu(i),this.#Ru()}#Cu(i){if(i){const{limits:m,info:g}=i,{isFallbackAdapter:x}=g;this.#yu=g,this.#Tu=x,this.#Su=m}}#Ru(){const i={TextureLimits:["maxTextureDimension1D","maxTextureDimension2D","maxTextureDimension3D","maxTextureArrayLayers","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage"],BufferLimits:["maxBindGroups","maxBindGroupsPlusVertexBuffers","maxBindingsPerBindGroup","maxDynamicUniformBuffersPerPipelineLayout","maxDynamicStorageBuffersPerPipelineLayout","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxUniformBufferBindingSize","maxStorageBufferBindingSize","minUniformBufferOffsetAlignment","minStorageBufferOffsetAlignment","maxBufferSize"],PipelineAndShaderLimits:["maxVertexBuffers","maxVertexAttributes","maxVertexBufferArrayStride","maxInterStageShaderComponents","maxInterStageShaderVariables"],ComputeLimits:["maxComputeWorkgroupStorageSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeWorkgroupsPerDimension"],ColorLimits:["maxColorAttachments","maxColorAttachmentBytesPerSample"]},m={TextureLimits:{},BufferLimits:{},PipelineAndShaderLimits:{},ComputeLimits:{},ColorLimits:{},EtcLimit:{}};for(const g in this.#Su){let x=!1;for(const _ in i)if(i[_].includes(g)){m[_][g]=this.#Su[g],x=!0;break}x||(m.EtcLimit[g]=this.#Su[g])}this.#wu=m}}class RedGPUContext extends RedGPUContextViewContainer{currentRequestAnimationFrame;onResize=null;currentTime;#Pu;#Eu;#Bu;#Iu;#M;#Yr;#Lu;#Du;#Ee;#fo=new ColorRGBA(0,0,0,1);#Uu=!1;#Au={};#ns;constructor(i,m,g,x,_){super(),this.#Eu=m,this.#M=g,this.#Iu=x,this.#Bu=_,this.#Yr=i,this.#Lu=new RedGPUContextSizeManager(this),this.#Du=new RedGPUContextDetector(this),this.#Ee=new ResourceManager(this),this.#ns=new AntialiasingManager(this),this.#ku()}get antialiasingManager(){return this.#ns}get useDebugPanel(){return this.#Uu}set useDebugPanel(i){this.#Uu=i}get backgroundColor(){return this.#fo}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#fo=i}get detector(){return this.#Du}get configurationDescription(){return this.#Pu}get gpuAdapter(){return this.#Eu}get alphaMode(){return this.#Bu}set alphaMode(i){this.#Bu=i,this.#Ou()}get gpuContext(){return this.#Iu}get gpuDevice(){return this.#M}get htmlCanvas(){return this.#Yr}get keyboardKeyBuffer(){return this.#Au}set keyboardKeyBuffer(i){this.#Au=i}get resourceManager(){return this.#Ee}get sizeManager(){return this.#Lu}get width(){return this.#Lu.width}set width(i){this.#Lu.width=i}get height(){return this.#Lu.height}set height(i){this.#Lu.height=i}get screenRectObject(){return this.#Lu.screenRectObject}get renderScale(){return this.#Lu.renderScale}set renderScale(i){this.#Lu.renderScale=i,this.viewList.forEach(i=>{i.setPosition(),i.setSize()})}destroy(){this.#M.destroy()}setSize(i=this.width,m=this.height){this.sizeManager.setSize(i,m)}#ku(){this.#Ou(),this.sizeManager.setSize("100%","100%"),window?.addEventListener("resize",()=>{this.sizeManager.setSize(),this.viewList.forEach(i=>{i.setSize(),i.setPosition()})});(this.detector.isMobile?["click","touchmove","touchstart","touchend"]:["click","mousemove","mousedown","mouseup"]).forEach(m=>{const g=this.detector.isMobile?{click:i.CLICK,touchmove:i.MOVE,touchstart:i.DOWN,touchend:i.UP}:{click:i.CLICK,mousemove:i.MOVE,mousedown:i.DOWN,mouseup:i.UP};this.#Yr.addEventListener(m,m=>{const x=g[m.type];this.viewList.forEach(g=>{this.detector.isMobile&&m instanceof TouchEvent&&m.touches.length>0?(g.pickingManager.mouseX=m.touches[0].clientX*devicePixelRatio-g.pixelRectObject.x,g.pickingManager.mouseY=m.touches[0].clientY*devicePixelRatio-g.pixelRectObject.y):m instanceof MouseEvent&&(g.pickingManager.mouseX=m.offsetX*devicePixelRatio-g.pixelRectObject.x,g.pickingManager.mouseY=m.offsetY*devicePixelRatio-g.pixelRectObject.y),x===i.CLICK?g.pickingManager.lastMouseClickEvent={...m,type:x}:g.pickingManager.lastMouseEvent={...m,type:x}})})});{const HD_keyDown=i=>{this.#Au[i.key]=!0},HD_keyUp=i=>{this.#Au[i.key]=!1};window?.addEventListener("keyup",HD_keyUp),window?.addEventListener("keydown",HD_keyDown)}new ResizeObserver(i=>{}).observe(this.#Yr)}#Ou(){const i=navigator.gpu.getPreferredCanvasFormat();this.#Pu={device:this.#M,format:i,alphaMode:this.#Bu},this.#Iu.configure(this.#Pu)}}Object.freeze(RedGPUContext);const init=async(i,m,g,x,_="premultiplied",b={powerPreference:"high-performance",forceFallbackAdapter:!1})=>{if(isSearchEngineBot())return void dr("🤖 Search engine bot detected - skipping WebGPU initialization");const{gpu:y}=navigator;if(!y){const i="WebGPU is not supported in this browser. Please use a modern browser with WebGPU enabled.";return void g?.(i)}const errorHandler=(i,m)=>{const x=generateErrorMessage(i,m);console.error("\n============\n",x,"\n============\n"),g?.(x)},validateAndRequestDevice=async m=>{const g=[];m?.features.has("texture-compression-astc")&&g.push("texture-compression-astc");const x={requiredFeatures:g};try{const g=await m.requestDevice(x);validateAndInitializeContext(i,m,g)}catch(i){errorHandler(null,`Failed to request device. Adapter was ${m},error message is ${i.message}`)}},validateAndInitializeContext=(i,b,y)=>{const T=i.getContext("webgpu");if(T)try{const g=new RedGPUContext(i,b,y,T,_);m(g),y.addEventListener("uncapturederror",i=>{console.warn("TODO A WebGPU error was not captured:",i),console.warn(i.error?.message),window.cancelAnimationFrame(g.currentRequestAnimationFrame)}),y.lost.then(i=>{console.warn(i),console.warn(`Device lost occurred:${i.message}`),"destroyed"===i.reason&&x?.(i)});const clearDevice=()=>{if(g.gpuContext)try{g.gpuContext.unconfigure(),dr("🧹 Canvas Context unconfigure 완료")}catch(i){dr("⚠️ Canvas Context unconfigure 실패:",i)}window?.cancelAnimationFrame(g.currentRequestAnimationFrame),g.gpuDevice.destroy()};window?.addEventListener("beforeunload",()=>{g&&g.gpuDevice&&(dr("🧹 페이지 종료 시 GPU 디바이스 정리"),clearDevice())}),window?.addEventListener("pageshow",i=>{i.persisted&&(dr("🔄 bfcache에서 복원됨 (뒤로가기 또는 앞으로가기) - 페이지 재로드"),window.location.reload())}),window?.addEventListener("pagehide",i=>{i.persisted&&(dr("💾 bfcache에 저장됨"),g&&g.gpuDevice&&clearDevice())})}catch(i){g(errorHandler(i,""))}else errorHandler(new Error(`Failed to get context from canvas:${i.id||i}`),"Failed to get webgpu initialize from canvas")},initializeWebGPU=async()=>{m instanceof Function?i instanceof HTMLCanvasElement?await(async i=>{i||errorHandler(null,"Cannot find navigator.gpu");try{const m=await i.requestAdapter(b);await validateAndRequestDevice(m)}catch(m){errorHandler(m,`Failed to request adapter or validate device with target GPU:${i},error message is ${m.message}`)}})(y):errorHandler(null,`Expected HTMLCanvasElement,but received:${i}`):errorHandler(null,`Expected onWebGPUInitialized,but received:${m}`)};try{await initializeWebGPU()}catch(i){errorHandler(i,`Unexpected error occurred during WebGPU initialization:${i.message}`)}},generateErrorMessage=(i,m)=>{let g=m;return i instanceof Error?(g=i.message??m,"string"==typeof i.stack&&(g+=`\nStack Trace:${i.stack}`)):console.warn("generateErrorMessage function expected an Error instance,but got:",i),g},isSearchEngineBot=()=>{if("undefined"==typeof navigator||"undefined"==typeof window)return!0;const i=navigator.userAgent.toLowerCase();return["googlebot","bingbot","slurp","duckduckbot","baiduspider","yandexbot","facebookexternalhit","twitterbot","rogerbot","linkedinbot","embedly","quora link preview","showyoubot","outbrain","pinterest/0.","developers.google.com/+/web/snippet","www.google.com/webmasters/tools/richsnippets","slackbot","vkshare","w3c_validator","redditbot","applebot","whatsapp","flipboard","tumblr","bitlybot","skypeuripreview","nuzzel","line","discordbot","telegrambot","crawler","spider","bot"].some(m=>i.includes(m))};class TextureLoaderData{src;texture;loadEnd;loadSuccess;srcInfo;idx;constructor(i,m,g){this.src=i,this.texture=null,this.loadEnd=!1,this.loadSuccess=!1,this.srcInfo=m,this.idx=g}}class TextureLoader{textures=[];#Gu=0;#l;#Fu;#Nu;#Vu;constructor(i,m=[],g,x){this.#l=i,this.#Fu=m,this.#Nu=g,this.#Vu=x,this.#Fu.length?this.#Fu.forEach((i,m)=>this.#zu(i,m)):this.#Hu()}getTextureByIndex(i){if(this.textures[i])return this.textures[i].texture}#zu(i,m){let g,x,_=BitmapTexture;x=i.hasOwnProperty("src")?i.src:i,x instanceof Array&&(_=CubeTexture),g=new TextureLoaderData(x,i,m);const onLoadHandler=()=>{g.loadSuccess=!0,g.loadEnd=!0,this.#$u()},onErrorHandler=()=>{g.loadSuccess=!1,g.loadEnd=!0,this.#$u()};g.texture=_===BitmapTexture?new _(this.#l,{src:i.src,cacheKey:i.cacheKey},i.useMipmap,onLoadHandler,onErrorHandler,i.format,!1):new _(this.#l,{src:i.src,cacheKey:i.cacheKey},i.useMipmap,onLoadHandler,onErrorHandler,i.format),this.textures.push(g)}#$u(){this.#Gu++,this.#Vu&&this.#Vu.call(this,{totalNum:this.#Fu.length,loaded:this.#Gu}),this.#Gu===this.#Fu.length&&this.#Hu()}#Hu(){requestAnimationFrame(()=>{this.#Nu&&this.#Nu.call(this,this)})}}const Ar=new Map,kr=new Map,arrayBufferLoader=(i,m,g)=>{if(i=getAbsoluteURL(window.location.href,i),Ar.has(i))return void m?.(Ar.get(i));if(kr.has(i))return void kr.get(i).then(i=>m?.(i)).catch(i=>g?.(i));const x=fetch(i).then(i=>{if(!i.ok)throw new Error(`Network response was not ok:${i.statusText}`);return i.arrayBuffer()}).then(m=>(Ar.set(i,m),m)).finally(()=>{kr.delete(i)});kr.set(i,x),x.then(i=>m?.(i)).catch(i=>g?.(i))},Or={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};Object.freeze(Or);class AccessorInfo_GLTF{accessor;bufferView;bufferGlTfId;buffer;bufferURIDataView;componentType;componentType_BYTES_PER_ELEMENT;getMethod;accessorBufferOffset;bufferViewOffset;bufferViewByteStride;startIndex;constructor(i,m,g){switch(this.accessor=m.accessors[g],this.bufferView=m.bufferViews[this.accessor.bufferView],this.bufferGlTfId=this.bufferView.buffer,this.buffer=m.buffers[this.bufferGlTfId],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=i.parsingResult.uris.buffers[this.bufferGlTfId]),this.componentType=Or[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:consoleAndThrowError("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}class AnimationData_GLTF{gltfLoader;scenesData;accessorGlTfId;dataList;constructor(i,m,g){this.gltfLoader=i,this.scenesData=m,this.accessorGlTfId=g;const x=new AccessorInfo_GLTF(this.gltfLoader,this.scenesData,this.accessorGlTfId),{accessor:_,startIndex:b,componentType_BYTES_PER_ELEMENT:y,bufferURIDataView:T,getMethod:w}=x,{type:P,count:z}=_;let H=b,$=1;switch(P){case"SCALAR":$=1;break;case"VEC4":$=4;break;case"VEC3":$=3}const W=[];let q=0;for(;q<z*$;H++,q++)W[q]=T[w](H*y,!0);this.dataList=new Float32Array(W)}}class AniTrack_GLTF{lastPrevIdx;key;timeAnimationInfo;aniDataAnimationInfo;interpolation;weightMeshes;animationTargetMesh;cacheTable={};#Wu;#za;#Ku;#Ha;#Ti;#ju=new Map;constructor(i,m,g,x,_,b){this.key=i,this.timeAnimationInfo=m,this.aniDataAnimationInfo=g,this.interpolation=x,this.animationTargetMesh=_,this.weightMeshes=b,this.#Ti=new Float32Array(8)}async renderWeight(i,m,g,x,_,b){const{gpuDevice:y}=i;this.#Wu||this.#Xu(i),this.#ju.has(g)||this.#qu(i,g);const T=this.#ju.get(g);this.#Ti.set([x,_,b,g.animationInfo.morphInfo.morphInfoDataList.length,g.geometry.vertexBuffer.stride,g.geometry.vertexBuffer.vertexCount,0,0]),y.queue.writeBuffer(this.#Ha,0,this.#Ti),m.setPipeline(this.#za),m.setBindGroup(0,T.bindGroup);const w=Math.ceil(g.geometry.vertexBuffer.vertexCount/64);m.dispatchWorkgroups(w)}#Xu(i){const{gpuDevice:m}=i;this.#Wu=m.createShaderModule({code:"struct Uniforms { interpolation_value:f32, prev_time_data_index:f32, next_time_data_index:f32, morph_length:f32, vertex_stride:f32, vertex_count:f32, padding1:f32, padding2:f32,\n};\n@group(0) @binding(0) var<storage,read> animation_data_list:array<f32>;\n@group(0) @binding(1) var<uniform> uniforms:Uniforms;\n@group(0) @binding(2) var<storage,read_write> vertices:array<f32>;\n@group(0) @binding(3) var<storage,read> origin_data:array<f32>;\n@group(0) @binding(4) var<storage,read> morph_interleave_data:array<f32>;\n@compute @workgroup_size(64)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let vertex_index=global_id.x; let vertex_count=u32(uniforms.vertex_count); let stride=u32(uniforms.vertex_stride); let morph_length=u32(uniforms.morph_length); let base_vertex_index=vertex_index * stride; let base_vertex_index2=vertex_index * 3u; let prev_time_offset=u32(uniforms.prev_time_data_index) * morph_length; let next_time_offset=u32(uniforms.next_time_data_index) * morph_length; var prev_weight=origin_data[base_vertex_index]; var next_weight=origin_data[base_vertex_index]; var prev_weight1=origin_data[base_vertex_index + 1u]; var next_weight1=origin_data[base_vertex_index + 1u]; var prev_weight2=origin_data[base_vertex_index + 2u]; var next_weight2=origin_data[base_vertex_index + 2u]; for (var morph_index=0u;morph_index < morph_length;morph_index++) { let prev_animation_data=animation_data_list[prev_time_offset + morph_index]; let next_animation_data=animation_data_list[next_time_offset + morph_index]; let morph_base_offset=morph_index * vertex_count * 3u; let temp_weight_x=morph_interleave_data[morph_base_offset + base_vertex_index2]; prev_weight +=prev_animation_data * temp_weight_x; next_weight +=next_animation_data * temp_weight_x; let temp_weight_y=morph_interleave_data[morph_base_offset + base_vertex_index2 + 1u]; prev_weight1 +=prev_animation_data * temp_weight_y; next_weight1 +=next_animation_data * temp_weight_y; let temp_weight_z=morph_interleave_data[morph_base_offset + base_vertex_index2 + 2u]; prev_weight2 +=prev_animation_data * temp_weight_z; next_weight2 +=next_animation_data * temp_weight_z; } let interpolation_diff_x=next_weight - prev_weight; let interpolation_diff_y=next_weight1 - prev_weight1; let interpolation_diff_z=next_weight2 - prev_weight2; let final_x=prev_weight + uniforms.interpolation_value * interpolation_diff_x; let final_y=prev_weight1 + uniforms.interpolation_value * interpolation_diff_y; let final_z=prev_weight2 + uniforms.interpolation_value * interpolation_diff_z; vertices[base_vertex_index]=final_x; vertices[base_vertex_index + 1u]=final_y; vertices[base_vertex_index + 2u]=final_z;\n}\n"}),this.#za=m.createComputePipeline({layout:"auto",compute:{module:this.#Wu,entryPoint:"main"}}),this.#Ku=m.createBuffer({size:4*this.aniDataAnimationInfo.dataList.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),this.#Ha=m.createBuffer({size:32,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),m.queue.writeBuffer(this.#Ku,0,this.aniDataAnimationInfo.dataList)}#qu(i,m){const{gpuDevice:g}=i,x=m.animationInfo.morphInfo,_=m.geometry.vertexBuffer,b=g.createBuffer({size:4*x.origin.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),y=x.morphInfoDataList.flatMap(i=>Array.from(i.interleaveData)),T=g.createBuffer({size:4*y.length,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});g.queue.writeBuffer(b,0,x.origin),g.queue.writeBuffer(T,0,new Float32Array(y));const w=g.createBindGroup({layout:this.#za.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:this.#Ku}},{binding:1,resource:{buffer:this.#Ha}},{binding:2,resource:{buffer:_.gpuBuffer}},{binding:3,resource:{buffer:b}},{binding:4,resource:{buffer:T}}]});this.#ju.set(m,{bindGroup:w,originBuffer:b,morphInterleavedBuffer:T})}}const parseAnimations=(i,m)=>new Promise(async g=>{m.animations||(m.animations=[]);const{parsingResult:x}=i,{animations:_}=x,{animations:b}=m;if(b.length){const g=b.map(async g=>{const{samplers:x,channels:b}=g,y=[];y.minTime=1e7,y.maxTime=-1,y.name=g.name,_.push(y),await Promise.all(b.map(async g=>((i,m,g,x,_)=>{let b,y;const{nodes:T,meshes:w}=_,P=[],{sampler:z,target:H}=g,$=x[z],{node:W,path:q}=H,ye=T[W];if("mesh"in ye){b=ye.Mesh;const{primitives:i}=w[ye.mesh];let m=i.length;for(;m--;)P.push(i[m].Mesh)}else{let m;if(!i.parsingResult.groups[W])return;m=i.parsingResult.groups[W],b=m}if("scale"!=q&&"rotation"!=q&&"translation"!=q&&"weights"!=q||(y=new AniTrack_GLTF(q,new AnimationData_GLTF(i,_,$.input),new AnimationData_GLTF(i,_,$.output),$.interpolation,b,P),m.push(y)),y){const{timeAnimationInfo:i}=y,{dataList:g}=i;m.minTime>g[0]&&(m.minTime=g[0]),m.maxTime<g[g.length-1]&&(m.maxTime=g[g.length-1])}})(i,y,g,x,m)))});await Promise.all(g),_.length&&_.forEach(m=>i.playAnimation(m))}g()});class ParsedSkinInfo_GLTF{joints;inverseBindMatrices;skeletonMesh;vertexStorageInfo;vertexStorageBuffer;invertNodeGlobalTransform;usedJoints=null;WORK_SIZE=64;jointData;uniformBuffer;computeShader;computePipeline;bindGroup;constructor(){this.joints=[],this.inverseBindMatrices=null,this.skeletonMesh=null}getUsedJointIndices(i){const m=new Set,{jointBuffer:g}=i.animationInfo;if(!g.data.length)return[];const x=g.data,_=x.length;for(let i=0;i<_;i++){const g=i;for(let i=0;i<4;i++){const _=Math.floor(x[g+i]);_>=0&&_<this.joints.length&&m.add(_)}}return Array.from(m)}createCompute(i,m,g,x,_){const b=` struct Uniforms { invertNodeGlobalTransform: mat4x4<f32>, jointModelMatrices: array<mat4x4<f32>,${this.usedJoints.length}>, inverseBindMatrices: array<mat4x4<f32>,${this.joints.length}>, searchJointIndexTable: array<vec4<u32>,${this.joints.length}>, };  @group(0) @binding(0) var<storage,read> vertexWeight: array<vec4<f32>>; @group(0) @binding(1) var<storage,read> vertexJoint: array<vec4<u32>>; @group(0) @binding(2) var<storage,read_write> skinMatrixBuffer: array<mat4x4<f32>>; @group(0) @binding(3) var<uniform> uniforms: Uniforms;  @compute @workgroup_size(${this.WORK_SIZE},1,1) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) {  let idx=global_id.x; if (idx >=arrayLength(&vertexWeight)) { return; }  let weights=vertexWeight[idx]; let joints=vertexJoint[idx];  skinMatrixBuffer[idx]=uniforms.invertNodeGlobalTransform * ( weights.x * ( \tuniforms.jointModelMatrices[uniforms.searchJointIndexTable[joints.x].x] * uniforms.inverseBindMatrices[joints.x] ) + weights.y * ( \tuniforms.jointModelMatrices[uniforms.searchJointIndexTable[joints.y].x] * uniforms.inverseBindMatrices[joints.y] ) + weights.z * ( \tuniforms.jointModelMatrices[uniforms.searchJointIndexTable[joints.z].x] * uniforms.inverseBindMatrices[joints.z] ) + weights.w * ( \tuniforms.jointModelMatrices[uniforms.searchJointIndexTable[joints.w].x] * uniforms.inverseBindMatrices[joints.w] ) ); } `;this.jointData=new Float32Array(16*(1+this.usedJoints.length)),this.computeShader=i.resourceManager.createGPUShaderModule(`calcSkinMatrix_${this.usedJoints.length}`,{code:b}),this.computePipeline=m.createComputePipeline({label:"calcSkinMatrix",layout:"auto",compute:{module:this.computeShader,entryPoint:"main"}}),this.uniformBuffer=m.createBuffer({size:this.jointData.byteLength+16*this.joints.length*4+4*this.joints.length*4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),m.queue.writeBuffer(this.uniformBuffer,this.jointData.byteLength,new Float32Array(this.inverseBindMatrices.map(i=>Array.from(i)).flat()));const y=new Uint32Array(4*this.joints.length);y.fill(0),this.usedJoints.forEach((i,m)=>{y[4*i]=m}),m.queue.writeBuffer(this.uniformBuffer,this.jointData.byteLength+16*this.joints.length*4,y),this.bindGroup=m.createBindGroup({layout:this.computePipeline.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:x.gpuBuffer}},{binding:1,resource:{buffer:_.gpuBuffer}},{binding:2,resource:{buffer:g}},{binding:3,resource:{buffer:this.uniformBuffer}}]})}}const parseJoint_GLTF=(i,m,g,x)=>{const{redGPUContext:_}=i,b=g[x].Mesh;b?m.joints.push(b):requestAnimationFrame(function(){parseJoint_GLTF(i,m,g,x)})},parseAttributeInfo_GLTF=function(i,m,g,x,_,b,y,T,w,P,z){const{accessor:H,startIndex:$,getMethod:W,bufferViewByteStride:q,bufferURIDataView:ye,componentType_BYTES_PER_ELEMENT:Ge}=m,{type:Ke,count:je}=H;let Xe=0;const Ye=q/Ge;let Ze,Je=$;switch(Ke){case"VEC4":if(q)for(Ze=Je+je*(q/Ge);Je<Ze;Je++)Xe%Ye<4&&("WEIGHTS_0"==i?T.push(ye[W](Je*Ge,!0)):"JOINTS_0"==i?w.push(ye[W](Je*Ge,!0)):"COLOR_0"==i?P.push(ye[W](Je*Ge,!0)):"TANGENT"==i?z.push(ye[W](Je*Ge,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i)),Xe++;else for(Ze=Je+4*je;Je<Ze;Je++)"WEIGHTS_0"==i?T.push(ye[W](Je*Ge,!0)):"JOINTS_0"==i?w.push(ye[W](Je*Ge,!0)):"COLOR_0"==i?P.push(ye[W](Je*Ge,!0)):"TANGENT"==i?z.push(ye[W](Je*Ge,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i),Xe++;break;case"VEC3":if(q)for(Ze=Je+je*(q/Ge);Je<Ze;Je++)Xe%Ye<3&&("NORMAL"==i?y.push(ye[W](Je*Ge,!0)):"POSITION"==i?g.push(ye[W](Je*Ge,!0)):"COLOR_0"==i?(P.push(ye[W](Je*Ge,!0)),Xe%Ye==2&&P.push(1)):"TANGENT"==i?z.push(ye[W](Je*Ge,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i)),Xe++;else for(Ze=Je+3*je;Je<Ze;Je++)"NORMAL"==i?y.push(ye[W](Je*Ge,!0)):"POSITION"==i?g.push(ye[W](Je*Ge,!0)):"COLOR_0"==i?(P.push(ye[W](Je*Ge,!0)),Xe%3==2&&P.push(1)):"TANGENT"==i?z.push(ye[W](Je*Ge,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i),Xe++;break;case"VEC2":if(q)for(Ze=Je+je*(q/Ge);Je<Ze;Je++)Xe%Ye<2&&("TEXCOORD_0"==i?x.push(ye[W](Je*Ge,!0)):"TEXCOORD_1"==i?_.push(ye[W](Je*Ge,!0)):"TEXCOORD_2"==i?b.push(ye[W](Je*Ge,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i)),Xe++;else for(Ze=Je+2*je;Je<Ze;Je++)"TEXCOORD_0"==i?x.push(ye[W](Je*Ge,!0)):"TEXCOORD_1"==i?_.push(ye[W](Je*Ge,!0)):"TEXCOORD_2"==i?b.push(ye[W](Je*Ge,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i),Xe++}},parseSparse_GLTF=(i,m,g,x,_)=>{const b=g.sparse;if(!b)return;const{values:y,indices:T,count:w}=b,P=x.bufferViews,z=P[y.bufferView],H=z.buffer,$=x.buffers,W=$[H],q=[],ye=[],Ge=P[T.bufferView],Ke=Ge.buffer,je=$[Ke];let Xe;W.uri&&(Xe=i.parsingResult.uris.buffers[H]);const Ye=Or[g.componentType],{BYTES_PER_ELEMENT:Ze}=Ye;let Je;switch(Ye){case Float32Array:Je="getFloat32";break;case Uint32Array:Je="getUint32";break;case Uint16Array:Je="getUint16";break;case Int16Array:Je="getInt16";break;case Uint8Array:Je="getUint8";break;case Int8Array:Je="getInt8"}const Qe=g.byteOffset||0;let et,at,ht=((z.byteOffset||0)+Qe)/Ze;switch(g.type){case"VEC3":for(et=ht+Ze*w/Ze*3;ht<et;ht++){const i=Xe[Je](ht*Ze,!0);"NORMAL"==m||"POSITION"==m&&q.push(i)}break;case"VEC2":for(et=ht+Ze*w/Ze*2;ht<et;ht++)"TEXCOORD_0"==m&&ye.push(Xe[Je](ht*Ze,!0))}je.uri&&(at=i.parsingResult.uris.buffers[Ke]);const ft=Or[T.componentType],gt=ft.BYTES_PER_ELEMENT,xt=ft===Uint16Array?"getUint16":"getUint8",vt=T.byteOffset||0;let bt=((Ge.byteOffset||0)+vt)/gt;const yt=bt+gt*w/gt;let St=0;for(;bt<yt;bt++){const i=at[xt](bt*gt,!0);_[3*i]=q[3*St],_[3*i+1]=q[3*St+1],_[3*i+2]=q[3*St+2],St++}};class MorphInfoData_GLTF{vertices=[];verticesColor_0=[];normals=[];uvs=[];uvs1=[];uvs2=[];jointWeights=[];joints=[];tangents=[];interleaveData;constructor(i=[],m=[],g=[],x=[],_=[],b=[],y=[],T=[],w=[]){this.vertices=i,this.verticesColor_0=m,this.normals=g,this.uvs=x,this.uvs1=_,this.uvs2=_,this.jointWeights=y,this.joints=T,this.tangents=w}}class MorphInfo_GLTF{morphInfoDataList=[];weights;cacheData={};origin;constructor(i,m,g,x){g.targets&&(this.morphInfoDataList=g.targets.map(g=>{const _=new MorphInfoData_GLTF;for(let x in g){const{vertices:b,verticesColor_0:y,normals:T,uvs:w,uvs1:P,uvs2:z,jointWeights:H,joints:$,tangents:W}=_,q=g[x],ye=new AccessorInfo_GLTF(i,m,q),{accessor:Ge}=ye;parseAttributeInfo_GLTF(x,ye,b,w,P,z,T,H,$,y,W),Ge.sparse&&parseSparse_GLTF(i,x,Ge,m,b)}return x.length&&(_.interleaveData=new Float32Array(_.vertices)),_})),this.weights=x||[],this.origin=null}}const parseMaterialTexture=(i,m,g,x,_,b=!0)=>{const{redGPUContext:y,gltfData:T}=i,{textureRawList:w}=i.parsingResult,P=g.index,z=T.textures[P],H=z.extensions?.EXT_texture_webp?.source||z.source,$=getURL(i,T,H);if($){const P=z.sampler,W=getSamplerInfo(i,T,P),{parsedURI:q,cacheKey:ye}=$,Ge=`${x}SourceGlTfId_${H}`;if(w[Ge]?(w[Ge].materialList.push(m),w[Ge].samplerList.push(new Sampler(y,W))):w[Ge]={src:q,cacheKey:ye,targetTextureKey:x,targetSamplerKey:`${x}Sampler`,materialList:[m],samplerList:[new Sampler(y,W)],format:_||navigator.gpu.getPreferredCanvasFormat(),useMipmap:b},m[`${x}_texCoord_index`]=g.texCoord||0,"extensions"in g){const{extensions:i}=g,{KHR_texture_transform:_}=i;_&&((i,m,g)=>{i[`${m}_KHR_texture_transform_offset`]=g.offset||[0,0],i[`${m}_KHR_texture_transform_scale`]=g.scale||[1,1],i[`${m}_KHR_texture_transform_rotation`]=g.rotation||0,i[`use_${m}_KHR_texture_transform`]=!0})(m,x,_)}}},getURL=function(i,m,g){if(!m.images[g])return null;const{uri:x}=m.images[g];let _;const b=`${i.url}_${g}`;return _=x.indexOf("blob:http")>-1?x:(x.indexOf(";base64,")>-1?"":i.filePath)+x,{parsedURI:_,cacheKey:b}},getSamplerInfo=function(i,m,g){const x={magFilter:cn.LINEAR,minFilter:cn.LINEAR,mipmapFilter:cn.LINEAR,addressModeU:un.REPEAT,addressModeV:un.REPEAT,addressModeW:un.REPEAT},_={33071:un.CLAMP_TO_EDGE,33648:un.MIRRORED_REPEAT,10497:un.REPEAT},b={9728:cn.NEAREST,9729:cn.LINEAR},y={9728:cn.NEAREST,9729:cn.LINEAR};if(m.samplers){let i=m.samplers[g];i&&("magFilter"in i&&(x.magFilter=b[i.magFilter]||cn.LINEAR),"minFilter"in i&&(x.minFilter=y[i.minFilter]||cn.LINEAR),"wrapS"in i&&(x.addressModeU=_[i.wrapS]),"wrapT"in i&&(x.addressModeV=_[i.wrapT]))}return x.string=JSON.stringify(x),x},parseMaterialInfo_GLTF=(i,m,g)=>{const{redGPUContext:x}=i;let _,b=!1,y="OPAQUE",T=.5;if("material"in g){_=new PBRMaterial(x);const w=g.material,P=m.materials[w];b=!!P.doubleSided,y=P.alphaMode??y,T=P.alphaCutoff??T;const{pbrMetallicRoughness:z,normalTexture:H,emissiveTexture:$,occlusionTexture:W}=P;if(_.emissiveFactor=P.emissiveFactor||[0,0,0],z){const{metallicRoughnessTexture:m,baseColorTexture:g}=z;let x,b;_.baseColorFactor=z.baseColorFactor||[1,1,1,1],"metallicFactor"in z&&(x=z.metallicFactor),"roughnessFactor"in z&&(b=z.roughnessFactor),_.metallicFactor=null!=x?x:1,_.roughnessFactor=null!=b?b:1,g&&parseMaterialTexture(i,_,g,"baseColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),m&&parseMaterialTexture(i,_,m,"metallicRoughnessTexture",null,!1)}if(H){parseMaterialTexture(i,_,H,"normalTexture");const{scale:m}=H;_.normalScale=null!=m?m:1}if($&&parseMaterialTexture(i,_,$,"emissiveTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),W&&(parseMaterialTexture(i,_,W,"occlusionTexture",null,!1),_.occlusionStrength=P.occlusionTexture.strength||1),"extensions"in P){const{extensions:m}=P,{KHR_materials_clearcoat:g,KHR_materials_emissive_strength:x,KHR_materials_transmission:b,KHR_materials_diffuse_transmission:T,KHR_materials_volume:w,KHR_materials_unlit:z,KHR_materials_ior:H,KHR_materials_sheen:$,KHR_materials_specular:W,KHR_materials_dispersion:q,KHR_materials_anisotropy:ye,KHR_materials_iridescence:Ge}=m;if(Ge&&((i,m,g)=>{i.useKHR_materials_iridescence=!0,i.KHR_iridescenceFactor=m.iridescenceFactor||0,i.KHR_iridescenceIor=m.iridescenceIor||1.3,i.KHR_iridescenceThicknessMinimum=m.iridescenceThicknessMinimum||100,i.KHR_iridescenceThicknessMaximum=m.iridescenceThicknessMaximum||400,i.transparent=!0;{const{iridescenceTexture:x,iridescenceThicknessTexture:_}=m;x&&parseMaterialTexture(g,i,x,"KHR_iridescenceTexture",null,!1),_&&parseMaterialTexture(g,i,_,"KHR_iridescenceThicknessTexture",null,!1)}})(_,Ge,i),ye&&((i,m,g)=>{i.useKHR_materials_anisotropy=!0,i.KHR_anisotropyStrength=m.anisotropyStrength||0,i.KHR_anisotropyRotation=m.anisotropyRotation||0;const{anisotropyTexture:x}=m;x&&parseMaterialTexture(g,i,x,"KHR_anisotropyTexture")})(_,ye,i),g&&((i,m,g)=>{i.KHR_clearcoatFactor=m.clearcoatFactor||0,i.KHR_clearcoatRoughnessFactor=m.clearcoatRoughnessFactor||0,i.useKHR_materials_clearcoat=!0;const{clearcoatTexture:x,clearcoatNormalTexture:_,clearcoatRoughnessTexture:b}=m;x&&parseMaterialTexture(g,i,x,"KHR_clearcoatTexture",null,!1),_&&parseMaterialTexture(g,i,_,"KHR_clearcoatNormalTexture"),b&&parseMaterialTexture(g,i,b,"KHR_clearcoatRoughnessTexture",null,!1)})(_,g,i),x){const{emissiveStrength:i}=x;_.emissiveStrength=null!=i?i:1}if(b&&(((i,m,g)=>{i.useKHR_materials_transmission=!0,i.KHR_transmissionFactor=m.transmissionFactor||0,i.use2PathRender=!0;{const x=m.transmissionTexture;x&&parseMaterialTexture(g,i,x,"KHR_transmissionTexture",null,!1)}})(_,b,i),_.transparent="BLEND"===y),T&&((i,m,g)=>{i.useKHR_materials_diffuse_transmission=!0,i.KHR_diffuseTransmissionFactor=m.diffuseTransmissionFactor||0,i.KHR_diffuseTransmissionColorFactor=m.diffuseTransmissionColorFactor||[1,1,1],i.transparent=!0;{const x=m.diffuseTransmissionTexture;x&&parseMaterialTexture(g,i,x,"KHR_diffuseTransmissionTexture",null,!1);const _=m.diffuseTransmissionColorTexture;_&&parseMaterialTexture(g,i,_,"KHR_diffuseTransmissionColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`,!1)}})(_,T,i),w&&(((i,m,g)=>{i.useKHR_materials_volume=!0,i.KHR_thicknessFactor=m.thicknessFactor||1,i.KHR_attenuationDistance=m.attenuationDistance||1,i.KHR_attenuationColor=m.attenuationColor||[1,1,1],i.use2PathRender=!0,i.transparent=!0;{const x=m.thicknessTexture;x&&parseMaterialTexture(g,i,x,"KHR_thicknessTexture",null,!1)}})(_,w,i),y="BLEND"),z&&(_.useKHR_materials_unlit=!0),H){const{ior:i}=H;_.KHR_materials_ior=null!=i?i:1.5,_.use2PathRender=!0,_.transparent=!0}if(q){const{dispersion:i}=q;_.KHR_dispersion=i||0,_.use2PathRender=!0,_.transparent=!0}$&&((i,m,g)=>{i.KHR_sheenColorFactor=m.sheenColorFactor||[0,0,0],i.KHR_sheenRoughnessFactor=m.sheenRoughnessFactor||0,i.useKHR_materials_sheen=!0;const{sheenColorTexture:x,sheenRoughnessTexture:_}=m;x&&parseMaterialTexture(g,i,x,"KHR_sheenColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`,!1),_&&parseMaterialTexture(g,i,_,"KHR_sheenRoughnessTexture",null,!1)})(_,$,i),W&&((i,m,g)=>{i.useKHR_materials_specular=!0,i.KHR_specularFactor=m.specularFactor??1,i.KHR_specularColorFactor=m.specularColorFactor||[1,1,1];const{specularTexture:x,specularColorTexture:_}=m;x&&parseMaterialTexture(g,i,x,"KHR_specularTexture"),_&&parseMaterialTexture(g,i,_,"KHR_specularColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`)})(_,W,i)}}else _=new PBRMaterial(x);Object.hasOwn(g.attributes,"COLOR_0")&&(_.useVertexColor=!0),_.doubleSided=b,_.cutOff=T;const{blendColorState:w,blendAlphaState:P}=_;switch(y){case"BLEND":_.alphaBlend=2,w.srcFactor=en.SRC_ALPHA,w.dstFactor=en.ONE_MINUS_SRC_ALPHA,P.srcFactor=en.SRC_ALPHA,P.dstFactor=en.ONE_MINUS_SRC_ALPHA,_.transparent=!0;break;case"MASK":_.alphaBlend=1,_.useCutOff=!0,w.srcFactor=en.ONE,w.dstFactor=en.ZERO,P.srcFactor=en.ONE,P.dstFactor=en.ZERO;break;default:w.srcFactor=en.ONE,w.dstFactor=en.ZERO,P.srcFactor=en.ONE,P.dstFactor=en.ZERO,_.alphaBlend=0}return _},parseIndicesInfo_GLTF=(i,m)=>{const{accessor:g,startIndex:x,getMethod:_,bufferURIDataView:b,componentType_BYTES_PER_ELEMENT:y}=i,{type:T,count:w}=g;let P,z=x;if("SCALAR"===T)for(P=z+w;z<P;z++)m.push(b[_](z*y,!0))},parseInterleaveData_GLTF=(i,m,g,x,_,b,y,T,w,P,z=!1,H=!1)=>{let $,W,q,ye,Ge,Ke,je,Xe,Ye,Ze=0,Je=m.length/3,Qe=0;const et=m.length,at=x.length,ht=b.length,ft=y.length,gt=g.length,xt=T.length,vt=w.length,bt=P.length;if($=q=Ke=0,W=ye=je=1,Ge=Xe=2,Ye=3,z)for(;Ze<Je;Ze++)xt?(i[Qe++]=T[Ke],i[Qe++]=T[je],i[Qe++]=T[Xe],i[Qe++]=T[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),$+=2,W+=2,q+=3,ye+=3,Ge+=3,Ke+=4,je+=4,Xe+=4,Ye+=4;else if(H)for(;Ze<Je;Ze++)vt?(i[Qe++]=w[Ke],i[Qe++]=w[je],i[Qe++]=w[Xe],i[Qe++]=w[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),$+=2,W+=2,q+=3,ye+=3,Ge+=3,Ke+=4,je+=4,Xe+=4,Ye+=4;else for(;Ze<Je;Ze++)et&&(i[Qe++]=m[q],i[Qe++]=m[ye],i[Qe++]=m[Ge]),at?(i[Qe++]=x[q],i[Qe++]=x[ye],i[Qe++]=x[Ge]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),_.length||_.push(0,0),_.length&&(i[Qe++]=_[$],i[Qe++]=_[W]),ft?(i[Qe++]=y[$],i[Qe++]=y[W]):ht?(i[Qe++]=b[$],i[Qe++]=b[W]):_.length&&(i[Qe++]=_[$],i[Qe++]=_[W]),gt?(i[Qe++]=g[Ke],i[Qe++]=g[je],i[Qe++]=g[Xe],i[Qe++]=g[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),bt?(i[Qe++]=P[Ke],i[Qe++]=P[je],i[Qe++]=P[Xe],i[Qe++]=P[Ye]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),$+=2,W+=2,q+=3,ye+=3,Ge+=3,Ke+=4,je+=4,Xe+=4,Ye+=4},Gr=180/Math.PI,setMeshRotation=(i,m)=>{m.setRotation(-i[0]*Gr,-i[1]*Gr,-i[2]*Gr)},parseTRSAndMATRIX_GLTF=(i,m)=>{const{matrix:g,rotation:x,translation:_,scale:b}=m;let y,T;if("matrix"in m){y=create$2(),T=create$1(),mat4ToEuler(g,T),setMeshRotation(T,i),i.setPosition(g[12],g[13],g[14]);const m=fromValues(1,1,1);getScaling(m,g),i.setScale(m[0],m[1],m[2])}"rotation"in m&&(y=create$2(),T=create$1(),quaternionToRotationMat4(x,y),mat4ToEuler(y,T),setMeshRotation(T,i)),"translation"in m&&i.setPosition(_[0],_[1],_[2]),"scale"in m&&(i.setScale(b[0],b[1],b[2]),(b[0]<0||b[1]<0||b[2]<0)&&(i.primitiveState.frontFace=Rn.CW))},parseChildrenAndSkin=(i,m,g,x,_)=>{if("children"in x){const _=x.children,b=_.length;for(let x=0;x<b;x++)parseNode_GLTF(i,m,_[x],g)}"skin"in x&&((i,m,g,x)=>{const _=new ParsedSkinInfo_GLTF,b=[],{nodes:y}=m,{joints:T,skeleton:w}=g;{let m=0;const g=T.length;for(;m<g;m++){const g=T[m];parseJoint_GLTF(i,_,y,g)}}w&&(_.skeletonMesh=y[w].Mesh);const P=g.inverseBindMatrices,z=new AccessorInfo_GLTF(i,m,P),{startIndex:H,accessor:$,componentType_BYTES_PER_ELEMENT:W,bufferViewByteStride:q,bufferURIDataView:ye,getMethod:Ge}=z,{type:Ke,count:je}=$;let Xe=0;const Ye=q/W;let Ze,Je=H;if("MAT4"===Ke)if(q)for(Ze=Je+je*(q/W);Je<Ze;Je++)Xe%Ye<16&&b.push(ye[Ge](Je*W,!0)),Xe++;else for(Ze=Je+16*je;Je<Ze;Je++)b.push(ye[Ge](Je*W,!0)),Xe++;_.inverseBindMatrices=[];for(let i=0;i<T.length;i++)_.inverseBindMatrices.push(new Float32Array([b[16*i],b[16*i+1],b[16*i+2],b[16*i+3],b[16*i+4],b[16*i+5],b[16*i+6],b[16*i+7],b[16*i+8],b[16*i+9],b[16*i+10],b[16*i+11],b[16*i+12],b[16*i+13],b[16*i+14],b[16*i+15]]));x.animationInfo.skinInfo=_,x.material.useSkin=!!x.animationInfo.skinInfo})(i,m,_[x.skin],g)},parseNode_GLTF=(i,m,g,x)=>{const{redGPUContext:_,parsingResult:b}=i,{nodes:y,meshes:T,skins:w}=m,{groups:P,cameras:z}=b,H=y[g];if("mesh"in H){const _=function(i,m,g,x){const{redGPUContext:_}=i;let b;g.name&&(b=g.name);const y=[],{primitives:T}=g;let w=0;const P=T.length;for(;w<P;w++){const P=T[w];let z,H,$,W=[],q=[],ye=[],Ge=[],je=[],Xe=[],Ye=[],Ze=[],Je=[],Qe=[];const{attributes:et}=P;if(et)for(const g in et){const x=et[g],_=new AccessorInfo_GLTF(i,m,x);parseAttributeInfo_GLTF(g,_,q,Ge,je,Xe,Ye,Ze,Je,ye,Qe),_.accessor.sparse&&parseSparse_GLTF(i,g,_.accessor,m,q)}if("indices"in P){let g=P.indices,x=new AccessorInfo_GLTF(i,m,g);parseIndicesInfo_GLTF(x,W)}H=parseMaterialInfo_GLTF(i,m,P),H instanceof PBRMaterial&&i.parsingResult.materials.push(H);let at,ht=!1;if("mode"in P)switch(P.mode){case 0:$=Ke.POINT_LIST;break;case 1:case 2:$=Ke.LINE_LIST;break;case 3:$=Ke.LINE_STRIP,ht=!0;break;case 4:case 6:$=Ke.TRIANGLE_LIST;break;case 5:$=Ke.TRIANGLE_STRIP,ht=!0}ye.length&&(H.useVertexColor_0=!0),Qe.length&&(H.useVertexTangent=!0),at=Ye.length?Ye:calculateNormals(q,W);let ft,gt=[];parseInterleaveData_GLTF(gt,q,ye,at,Ge,je,Xe,Ze,Je,Qe);let xt={};q.length&&(xt.aVertexPosition=VertexInterleaveType.float32x3),at.length&&(xt.aVertexNormal=VertexInterleaveType.float32x3),Ge.length&&(xt.aTexcoord=VertexInterleaveType.float32x2),(Xe.length||je.length||Ge.length)&&(xt.aTexcoord1=VertexInterleaveType.float32x2),xt.aVertexColor_0=VertexInterleaveType.float32x4,xt.aVertexTangent=VertexInterleaveType.float32x4;const vt=[],bt=[];parseInterleaveData_GLTF(vt,q,ye,at,Ge,je,Xe,Ze,Je,Qe,!0),parseInterleaveData_GLTF(bt,q,ye,at,Ge,je,Xe,Ze,Je,Qe,!1,!0);const yt=new VertexBuffer(_,vt,new VertexInterleavedStruct({aVertexWeight:VertexInterleaveType.float32x4}),void 0,`Weight_${i.url}_${x}_${w}`),St=new IndexBuffer(_,bt,GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,`Joint_${i.url}_${x}_${w}`);let Tt=new MorphInfo_GLTF(i,m,P,g.weights);const wt=`Vertex_${i.url}_${x}_${w}_${Tt.weights.length?createUUID():""}`,Mt=_.resourceManager.managedVertexBufferState.table.get(wt)?.buffer;if(ft=new Geometry(_,Mt||new VertexBuffer(_,gt,new VertexInterleavedStruct(xt),void 0,wt),!ht&&W.length?new IndexBuffer(_,new Uint32Array(W),void 0,`Index_${i.url}_${x}_${w}`):null),H||consoleAndThrowError("재질을 파싱할수없는경우 ",P),z=new Mesh(_,ft,H),z.animationInfo.weightBuffer=yt,z.animationInfo.jointBuffer=St,b&&(z.name=b,i.parsingOption))for(let m in i.parsingOption)b.toLowerCase().indexOf(m)>-1&&i.parsingOption[m](z);z.primitiveState.topology=$||Ke.TRIANGLE_LIST,z.material.doubleSided&&(z.primitiveState.cullMode=Cn.NONE),z.material.use2PathRender&&(z.primitiveState.cullMode=Cn.NONE,z.depthStencilState.depthCompare=wn.LESS_EQUAL),2===z.material.alphaBlend&&(z.depthStencilState.depthCompare=wn.LESS_EQUAL),z.animationInfo.morphInfo=Tt,z.animationInfo.morphInfo.origin=new Float32Array(gt);let Ct=z.geometry.vertexBuffer.data;z.gpuRenderInfo||z.initGPURenderInfos();let Rt=0;for(const i in xt)Rt+=xt[i].numElements;if(!Mt){const i=z.animationInfo.morphInfo.morphInfoDataList;let m=0;const g=i.length,x=Ct.length;for(;m<g;){const g=i[m].vertices;let _=0,b=x/Rt,y=null==z.animationInfo.morphInfo.weights[m]?.5:z.animationInfo.morphInfo.weights[m];for(;_<b;)Ct[_*Rt]+=g[3*_]*y,Ct[_*Rt+1]+=g[3*_+1]*y,Ct[_*Rt+2]+=g[3*_+2]*y,_++;m++}}z.geometry.vertexBuffer.updateAllData(Ct),z.animationInfo.morphInfo.origin=new Float32Array(Ct),P.Mesh=z,y.push(z)}return y}(i,m,T[H.mesh],g),b=_.length;for(let g=0;g<b;g++){let b=_[g];x.addChild(H.Mesh=b),parseTRSAndMATRIX_GLTF(b,H),parseChildrenAndSkin(i,m,b,H,w)}}else{let b;P[g]?(b=P[g],H.Mesh=b):(b=new Mesh(_),x.addChild(b),H.Mesh=b,b.name=H.name,P[g]=b),parseTRSAndMATRIX_GLTF(b,H),parseChildrenAndSkin(i,m,b,H,w)}},parseGLTF=(i,m,g)=>{requestAnimationFrame(()=>{(i=>{const m=i?.asset;m||consoleAndThrowError("GLTFLoader - asset must be defined"),m.version||consoleAndThrowError("GLTFLoader - asset version must be defined");const g=parseFloat(m.version);isNaN(g)&&consoleAndThrowError("GLTFLoader - asset version must be a numerical value"),g<2&&consoleAndThrowError("GLTFLoader - asset version must be 2.0 or higher")})(m),requestAnimationFrame(()=>{((i,m,g)=>{const{parsingResult:x}=i,{uris:_}=x,b="buffers",y=_[b],T=m.buffers,w=T.length;let P=0;T.forEach((m,x)=>{var _;function checkLoadingStatus(){P===w&&g&&g()}m._redURIkey=b,m._redURIIndex=x,m.uri instanceof ArrayBuffer?(_=new DataView(m.uri),P++,y[x]=_,checkLoadingStatus()):function(m){const g=m.startsWith("data:")?m:i.filePath+m;arrayBufferLoader(g,function(i){P++,y[x]=new DataView(i),checkLoadingStatus()},function(i,m){})}(m.uri)})})(i,m,()=>{requestAnimationFrame(()=>{((i,m,g)=>{const{scenes:x}=m;x[0].nodes.forEach(g=>{parseNode_GLTF(i,m,g,i.resultMesh)}),g?.()})(i,m,()=>{requestAnimationFrame(()=>{((i,m)=>{const{cameras:g}=m;g&&g.forEach(function(m){let g=new PerspectiveCamera;"orthographic"==m.type||(g.fieldOfView=180*m.perspective.yfieldOfView/Math.PI,g.farClipping=m.perspective.zfar,g.nearClipping=m.perspective.znear),i.parsingResult.cameras.push(g)})})(i,m),new TextureLoader(i.redGPUContext,Object.values(i.parsingResult.textureRawList),x=>{x.textures.forEach(i=>{const{targetTextureKey:m,targetSamplerKey:g,samplerList:x}=i.srcInfo;i.srcInfo.materialList.forEach((_,b)=>{_[m]=i.texture,x[b]&&(_[g]=x[b])})}),parseAnimations(i,m).then(i=>{g&&g()})})})})})})})})},Fr=new Map,Nr=new Map,parseFileGLB=async(i,m)=>{const g=getAbsoluteURL(window.location.href,i.filePath+i.fileName);if(Fr.has(g))return dr("GLB Model parsing has cache",g),void await parseArrayBuffer(i,Fr.get(g),m);if(Nr.has(g))return await Nr.get(g),void await parseArrayBuffer(i,Fr.get(g),m);const x=new Promise((i,m)=>{(async(i,m,g=()=>{})=>{try{const g=await fetch(i);m(await g.arrayBuffer())}catch(i){g(i)}})(g,m=>{Fr.set(g,m),dr("GLB Model parsing set cache",g),Nr.delete(g),i(m)},i=>{Nr.delete(g),m(i)})});Nr.set(g,x);try{const g=await x;await parseArrayBuffer(i,g,m)}catch(i){}},parseArrayBuffer=async(i,m,g)=>{const{content:x,binaryChunk:_}=parseBuffer(m);if(null===x)throw new Error("JSON content not found");const b=JSON.parse(x);processImagesIfExist(b,_),b.buffers[0].uri=_,i.gltfData=b,parseGLTF(i,b,g)},parseBuffer=i=>{let m=null,g=null;const x=new DataView(i,12),_=x.byteLength;for(let b=0;b<_;){const _=x.getUint32(b,!0);b+=4;const y=x.getUint32(b,!0);switch(b+=4,y){case 1313821514:const x=new Uint8Array(i,12+b,_);m=convertUint8ArrayToString(x);break;case 5130562:const y=12+b;g=i.slice(y,y+_)}b+=_}return{content:m,binaryChunk:g}},processImagesIfExist=(i,m)=>{const{images:g,bufferViews:x}=i,_=["image/png","image/jpeg","image/gif","image/webp"],b=new Map;if(g)for(let i=0;i<g.length;i++){const y=g[i],{mimeType:T,bufferView:w}=y;if(_.includes(T)&&void 0!==w){const i=x[w].byteOffset||0,g=x[w].byteLength,_=`${i}_${g}_${T}`;if(b.has(_))y.uri=b.get(_);else{const x=m.slice(i,i+g),w=new Blob([new Uint8Array(x)],{type:T}),P=URL.createObjectURL(w);b.set(_,P),y.uri=P}}}return b},convertUint8ArrayToString=i=>{let m="";for(let g of i)m+=String.fromCharCode(g);return m},Vr=new Map,zr=new Map,getData=i=>({...i,meshes:JSON.parse(JSON.stringify(i.meshes))});class GLTFLoader{parsingResult;resultMesh;parsingOption;activeAnimations=[];#l;#Yu;#Zu;#Ju;#Qu;#el;#On;#Gn;constructor(i,m,g,x){validateRedGPUContext(i),this.#l=i,this.#Ju=m,this.#Yu=getFilePath(m),this.#Zu=getFileName(m),this.#Qu=getFileExtension(m),this.#On=g,this.#Gn=x,this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.resultMesh=new Mesh(this.#l),this.resultMesh.gltfLoaderInfo=this,this.resultMesh.animationInfo.animationsList=this.parsingResult.animations,this.#tl()}get redGPUContext(){return this.#l}get filePath(){return this.#Yu}get gltfData(){return this.#el}set gltfData(i){this.#el=i}get fileName(){return this.#Zu}get url(){return this.#Ju}stopAnimation(i){const{activeAnimations:m}=this;let g=m.indexOf(i);g>-1&&m.splice(g,1)}stopAllAnimation(){this.activeAnimations.length=0}playAnimation(i){const{activeAnimations:m}=this;m.push(new PlayAnimationInfo(performance.now(),i))}async#tl(){try{"glb"===this.#Qu?parseFileGLB(this,()=>this.#On(this)):"gltf"===this.#Qu?(async(i,m)=>{const g=getAbsoluteURL(window.location.href,i.filePath+i.fileName);if(Vr.has(g))return i.gltfData=getData(Vr.get(g)),void requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,m)});if(zr.has(g))return await zr.get(g),i.gltfData=getData(Vr.get(g)),void requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,m)});const x=new Promise(async(m,x)=>{try{const x=await fetch(i.url);if(!x.ok)throw new Error("GLTF 네트워크 오류:"+x.status);const _=await x.json();Vr.set(g,_),m(_)}catch(i){x(i)}finally{zr.delete(g)}});zr.set(g,x);const _=await x;i.gltfData=getData(_),requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,m)})})(this,()=>this.#On(this)):consoleAndThrowError("Unknown file extension:"+this.#Qu)}catch(i){this.#Gn?.(i)}}}Object.freeze(GLTFLoader);class PlayAnimationInfo{startTime;targetGLTFParsedSingleClip;constructor(i,m){this.startTime=i,this.targetGLTFParsedSingleClip=m}}let Hr,$r=create$2();const Wr=create$2(),Kr=create$1();let jr;var Xr=Object.freeze({__proto__:null,AController:AController}),qr=Object.freeze({__proto__:null,BasicController:class extends AController{#nl;#rl={moveForward:"w",moveBack:"s",moveLeft:"a",moveRight:"d",moveUp:"t",moveDown:"g",turnLeft:"q",turnRight:"e",turnUp:"r",turnDown:"f"};#il=1;#al=.1;#sl=1;#ol=.1;#ul=3;#ll=0;#cl=[0,0,0];#hl=0;#fl=0;#dl;constructor(i){super(),this.#dl=new Mesh(i),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let x,_;const checkArea=m=>{let g=this.#nl;if(Hr&&g===Hr){let x,_,b=g.pixelRectObject;const{x:y,y:T}=this.getCanvasEventPoint(m,i);if(x=y*window.devicePixelRatio*i.renderScale,_=T*window.devicePixelRatio*i.renderScale,!(b.x<x&&x<b.x+b.width))return;if(!(b.y<_&&_<b.y+b.height))return}return!0};x=0,_=0;const HD_Move=m=>{const{x:g,y:b}=this.getCanvasEventPoint(m,i),y=g-x,T=b-_;x=g,_=b,this.#hl-=y*this.#sl*.1,this.#fl-=T*this.#sl*.1},HD_up=()=>{Hr=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{if(Hr=this.#nl,!checkArea(m))return;const{x:b,y:y}=this.getCanvasEventPoint(m,i);x=b,_=y,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)})}get x(){return this.#dl.x}set x(i){validateNumber(i),this.#dl.x=i,this.#cl[0]=i}get y(){return this.#dl.y}set y(i){validateNumber(i),this.#dl.y=i,this.#cl[1]=i}get z(){return this.#dl.z}set z(i){validateNumber(i),this.#dl.z=i,this.#cl[2]=i}get tilt(){return this.#fl}set tilt(i){validateNumber(i),this.#dl.rotationX=i,this.#fl=i}get pan(){return this.#hl}set pan(i){validateNumber(i),this.#dl.rotationY=i,this.#hl=i}get keyNameMapper(){return{...this.#rl}}setMoveForwardKey(i){this.#rl.moveForward=i}setMoveBackKey(i){this.#rl.moveBack=i}setMoveLeftKey(i){this.#rl.moveLeft=i}setMoveRightKey(i){this.#rl.moveRight=i}setMoveUpKey(i){this.#rl.moveUp=i}setMoveDownKey(i){this.#rl.moveDown=i}setTurnLeftKey(i){this.#rl.turnLeft=i}setTurnRightKey(i){this.#rl.turnRight=i}setTurnUpKey(i){this.#rl.turnUp=i}setTurnDownKey(i){this.#rl.turnDown=i}update(i,m){this.#nl=i;const g=this.#al,x=this.#ol,_=this.#cl,b=this.#dl;b.rotationY+=(this.#hl-b.rotationY)*x,b.rotationX+=(this.#fl-b.rotationX)*x,this.#ml(i)&&($r=b.modelMatrix,identity(Wr),rotateY(Wr,Wr,b.rotationY*Math.PI/180),rotateX(Wr,Wr,b.rotationX*Math.PI/180),translate(Wr,Wr,Kr),identity($r),translate($r,$r,b.position),multiply($r,$r,Wr),_[0]=$r[12],_[1]=$r[13],_[2]=$r[14]),b.x+=(_[0]-b.x)*g,b.y+=(_[1]-b.y)*g,b.z+=(_[2]-b.z)*g,b.rotationY+=(this.#hl-b.rotationY)*x,b.rotationX+=(this.#fl-b.rotationX)*x,$r=b.modelMatrix,identity($r),translate($r,$r,b.position),rotateY($r,$r,b.rotationY*Math.PI/180),rotateX($r,$r,b.rotationX*Math.PI/180);const y=clone($r);translate(y,y,[0,0,.01]),this.camera.setPosition(y[12],y[13],y[14]),this.camera.lookAt(b.x,b.y,b.z)}#ml(i){if(!i.checkMouseInViewBounds())return;const m=this.#il,g=this.#sl,{keyboardKeyBuffer:x}=i.redGPUContext,_=this.#rl;let b=!1,y=!1,T=0,w=0;Kr[0]=0,Kr[1]=0,Kr[2]=0;const P=this.#ll*m;return x[_.turnLeft]&&(y=!0,T=g),x[_.turnRight]&&(y=!0,T=-g),x[_.turnUp]&&(y=!0,w=g),x[_.turnDown]&&(y=!0,w=-g),x[_.moveForward]&&(b=!0,Kr[2]=-P),x[_.moveBack]&&(b=!0,Kr[2]=P),x[_.moveLeft]&&(b=!0,Kr[0]=-P),x[_.moveRight]&&(b=!0,Kr[0]=P),x[_.moveUp]&&(b=!0,Kr[1]=P),x[_.moveDown]&&(b=!0,Kr[1]=-P),y||b?(this.#ll+=.1,this.#ll>this.#ul&&(this.#ll=this.#ul)):(this.#ll+=-.1,this.#ll<0&&(this.#ll=0)),y&&(this.#hl+=T,this.#fl+=w),b||y}},Camera2D:Camera2D,Core:Xr,OrbitController:class extends AController{#R;#C;#pl=0;#gl=0;#xl=0;#_l=15;#vl=2;#bl=.1;#sl=3;#ol=.1;#yl=-35;#Sl=-90;#Tl=90;#wl=0;#Ml=0;#Cl=0;#Rl=0;#Pl=new Set;#El=-1;constructor(i){super(),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let x,_;const findTargetView=m=>{const{x:g,y:x}=this.getCanvasEventPoint(m,i);let _,b;_=g*window.devicePixelRatio*i.renderScale,b=x*window.devicePixelRatio*i.renderScale;for(const i of this.#Pl){const m=i.pixelRectObject;if(m.x<_&&_<m.x+m.width&&m.y<b&&b<m.y+m.height)return i}return null};x=0,_=0;const HD_Move=m=>{if(!jr)return;const{x:g,y:b}=this.getCanvasEventPoint(m,i),y=g-x,T=b-_;x=g,_=b,this.#wl-=y*this.#sl*.1,this.#yl-=T*this.#sl*.1},HD_up=()=>{jr=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{const b=findTargetView(m);if(!b)return;jr=b;const{x:y,y:T}=this.getCanvasEventPoint(m,i);x=y,_=T,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)}),i.htmlCanvas.addEventListener("wheel",i=>{const m=findTargetView(i);i.stopPropagation(),i.preventDefault(),m&&(this.#_l+=i.deltaY/100*this.#vl)})}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get centerX(){return this.#pl}set centerX(i){this.#pl=i}get centerY(){return this.#gl}set centerY(i){this.#gl=i}get centerZ(){return this.#xl}set centerZ(i){this.#xl=i}get distance(){return this.#_l}set distance(i){validateNumberRange(i,0),this.#_l=i}get speedDistance(){return this.#vl}set speedDistance(i){validateNumberRange(i,.01),this.#vl=i}get delayDistance(){return this.#bl}set delayDistance(i){validateNumberRange(i,.01,1),this.#bl=i}get speedRotation(){return this.#sl}set speedRotation(i){validateNumberRange(i,.01),this.#sl=i}get delayRotation(){return this.#ol}set delayRotation(i){validateNumberRange(i,.01,1),this.#ol=i}get minTilt(){return this.#Sl}set minTilt(i){validateNumberRange(i,-90,90),this.#Sl=i}get maxTilt(){return this.#Tl}set maxTilt(i){validateNumberRange(i,-90,90),this.#Tl=i}get pan(){return this.#wl}set pan(i){this.#wl=i}get tilt(){return this.#yl}set tilt(i){validateNumberRange(i,-90,90),this.#yl=i}update(i,m){this.#El!==m&&(this.#El=m,this.#Pl.clear()),this.#Pl.add(i),1===this.#Pl.size&&this.#Bl()}#Bl(){const i=Math.PI/180;this.#yl<this.#Sl&&(this.#yl=this.#Sl),this.#yl>this.#Tl&&(this.#yl=this.#Tl);const{camera:m}=this;this.#Ml+=(this.#wl-this.#Ml)*this.#ol,this.#Cl+=(this.#yl-this.#Cl)*this.#ol,this.#_l<m.nearClipping&&(this.#_l=m.nearClipping),this.#Rl+=(this.#_l-this.#Rl)*this.#bl,this.#Rl<m.nearClipping&&(this.#Rl=m.nearClipping);const g=m.modelMatrix;identity(g),translate(g,g,[this.#pl,this.#gl,this.#xl]),rotateY(g,g,this.#Ml*i),rotateX(g,g,this.#Cl*i),translate(g,g,[0,0,this.#Rl]),m.x=g[12],m.y=g[13],m.z=g[14],this.camera.lookAt(this.#pl,this.#gl,this.#xl)}},OrthographicCamera:OrthographicCamera,PerspectiveCamera:PerspectiveCamera}),Yr=Object.freeze({__proto__:null,AntialiasingManager:AntialiasingManager,RedGPUContextDetector:RedGPUContextDetector,RedGPUContextSizeManager:RedGPUContextSizeManager,RedGPUContextViewContainer:RedGPUContextViewContainer}),Zr=Object.freeze({__proto__:null,Core:Yr,RedGPUContext:RedGPUContext});class ResourceStateHDRTexture{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class HDRLoader{#Il=!0;constructor(i=!0){this.#Il=i}get enableDebugLogs(){return this.#Il}set enableDebugLogs(i){this.#Il=i}async loadHDRFile(i){this.#Il&&dr(`HDR 파일 로딩 시작:${i}`);const m=await fetch(i);if(!m.ok)throw new Error(`HTTP ${m.status}:${m.statusText}`);const g=await m.arrayBuffer(),x=new Uint8Array(g),_=this.#Ll(x,i);return this.#Dl(_)}#Dl(i){this.#Il&&dr("HDR 데이터 분석 시작 (원본 데이터 보존)...");const m=this.#Ul(i),g=this.#Al(m);return this.#Il&&dr(`권장 노출값 계산:${g.toFixed(3)} (원본 데이터는 보존)`),{...i,recommendedExposure:g,luminanceStats:m}}#Ul(i){let m=1/0,g=0,x=0;const _=i.width*i.height;for(let _=0;_<i.data.length;_+=4){const b=.2126*i.data[_]+.7152*i.data[_+1]+.0722*i.data[_+2];m=Math.min(m,b),g=Math.max(g,b),x+=b}return{min:Math.max(.001,m),max:g,average:Math.max(.001,x/_),median:Math.max(.001,x/_)}}#Al(i){const{average:m,median:g,max:x}=i;let _=.18;m<.01?_=.5:m<.05?_=.36:m>2?_=.09:m>.8&&(_=.12);let b=_/Math.max(Math.pow(m*g,.5),.001);const y=x/Math.max(i.min,.001);m<.05?b*=2.5:m<.1&&(b*=1.8),y>1e3?b*=.8:y>100&&(b*=.9),x>10?b*=.5:x>5?b*=.7:x>2&&(b*=.85);const T=g/m;return T<.3?b*=.8:T>1.5&&(b*=1.2),b=Math.max(1,Math.min(15,b)),b}#Ll(i,m){const g=this.#kl(i);if(this.#Il&&dr(`파일 형식:${g.format}`),!g.isValid)throw new Error(g.error||"지원되지 않는 파일 형식입니다");if(m.split("?")[0].toLowerCase().endsWith(".hdr")){this.#Il&&this.#Ol(i.slice(0,200));const m=this.#Gl(i);return this.#Il&&this.#Fl(m),m}throw m.split("?")[0].toLowerCase().endsWith(".exr")?new Error("EXR format not supported yet"):new Error(`Unsupported HDR format:${m}`)}#Gl(i){let m=0,g="";const x={};for(;m<i.length;){const x=String.fromCharCode(i[m++]);if("\n"===x)break;g+=x}if(!g.startsWith("#?RADIANCE")&&!g.startsWith("#?RGBE"))throw new Error("Invalid HDR file header");for(;m<i.length;){for(g="";m<i.length;){const x=String.fromCharCode(i[m++]);if("\n"===x)break;g+=x}if(""===g.trim())break;const _=g.indexOf("=");if(_>0){const i=g.substring(0,_).trim(),m=g.substring(_+1).trim();x[i]=m}}for(g="";m<i.length;){const x=String.fromCharCode(i[m++]);if("\n"===x)break;g+=x}const _=g.match(/-Y\s+(\d+)\s+\+X\s+(\d+)/);if(!_)throw new Error("Invalid resolution format in HDR file");const b=parseInt(_[1]),y=parseInt(_[2]);let T;x.EXPOSURE&&(T=parseFloat(x.EXPOSURE),this.#Il&&dr(`파일 노출값:${T.toFixed(3)}`));const w=new Float32Array(y*b*4);let P=0;for(let g=0;g<b;g++){const g=this.#Nl(i,m,y);m=g.nextOffset;for(let i=0;i<y;i++){const m=4*i,x=g.data[m],_=g.data[m+1],b=g.data[m+2],y=g.data[m+3];if(0===y)w[P++]=0,w[P++]=0,w[P++]=0,w[P++]=1;else{const i=Math.pow(2,y-128-8);w[P++]=x*i,w[P++]=_*i,w[P++]=b*i,w[P++]=1}}}return{data:w,width:y,height:b,exposure:T}}#kl(i){if(i.length<50)return{isValid:!1,format:"unknown",error:"파일이 너무 작습니다"};const m=new TextDecoder("ascii",{fatal:!1}).decode(i.slice(0,50));return m.startsWith("#?RADIANCE")||m.startsWith("#?RGBE")?{isValid:!0,format:"RGBE/Radiance"}:m.includes("RADIANCE")||m.includes("RGBE")?{isValid:!0,format:"RGBE/Radiance (variant)"}:{isValid:!1,format:"unknown",error:"지원되지 않는 HDR 형식입니다"}}#Nl(i,m,g){const x=new Uint8Array(4*g);if(2===i[m]&&2===i[m+1]&&i[m+2]===(g>>8&255)&&i[m+3]===(255&g)){m+=4;for(let _=0;_<4;_++){let b=_;for(;b<4*g;){const _=i[m++];if(_>128){const y=_-128,T=i[m++];for(let i=0;i<y&&b<4*g;i++)x[b]=T,b+=4}else{const y=_;for(let _=0;_<y&&b<4*g;_++)x[b]=i[m++],b+=4}}}}else for(let _=0;_<4*g;_++)x[_]=i[m++];return{data:x,nextOffset:m}}#Fl(i){if(this.#Il){dr("HDR 정보:"),dr(`크기:${i.width} x ${i.height}`),dr(`데이터 길이:${i.data.length}`),dr("예상 픽셀 수:"+i.width*i.height*4);for(let m=0;m<Math.min(16,i.data.length);m+=4)i.data[m],i.data[m+1],i.data[m+2],i.data[m+3]}}#Ol(i){if(this.#Il)for(let m=0;m<i.length;m+=16)Array.from(i.slice(m,m+16)).map(i=>i.toString(16).padStart(2,"0")).join(" "),Array.from(i.slice(m,m+16)).map(i=>i>=32&&i<=126?String.fromCharCode(i):".").join("")}}async function float32ToFloat16WithToneMapping(i,m,g){const x=performance.now(),{gpuDevice:_}=i,{exposure:b,width:y,height:T,workgroupSize:w=[8,8]}=g,P=m.length/4,z=function(i){return`\nstruct Constants { exposure:f32, width:u32, height:u32,\n}\n\n@group(0) @binding(0) var<storage,read> inputData:array<f32>;\n@group(0) @binding(1) var<storage,read_write> outputData:array<u32>;\n@group(0) @binding(2) var<uniform> constants:Constants;\n\nfn acesToneMapping(x:f32) -> f32 { let a=2.51; let b=0.03; let c=2.43; let d=0.59; let e=0.14; return max(0.0,(x * (a * x + b))/(x * (c * x + d) + e));\n}\n\nfn linearToSRGB(linearValue:f32) -> f32 { if (linearValue <=0.0031308) { return 12.92 * linearValue; } else { return 1.055 * pow(linearValue,1.0/2.4) - 0.055; }\n}\n\nfn floatToHalf(value:f32) -> u32 { let bits=bitcast<u32>(value); let sign=(bits >> 16u) & 0x8000u; var exp=(bits >> 23u) & 0xFFu; var mantissa=bits & 0x7FFFFFu;  if (exp==0u) { return sign; }  if (exp==255u) { return sign | 0x7C00u | select(0u,1u,mantissa !=0u); }  let newExp=i32(exp) - 127 + 15; if (newExp <=0) { return sign; } if (newExp >=31) { return sign | 0x7C00u; }  return sign | (u32(newExp) << 10u) | (mantissa >> 13u);\n}\n\n@compute @workgroup_size(${i[0]},${i[1]})\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let x=global_id.x; let y=global_id.y;  if (x >=constants.width || y >=constants.height) { return; }  let pixelIndex=y * constants.width + x; let baseIndex=pixelIndex * 4u;  let r=inputData[baseIndex]; let g=inputData[baseIndex + 1u]; let b=inputData[baseIndex + 2u]; let a=inputData[baseIndex + 3u];  let exposedR=r * constants.exposure; let exposedG=g * constants.exposure; let exposedB=b * constants.exposure;  let toneMappedR=acesToneMapping(exposedR); let toneMappedG=acesToneMapping(exposedG); let toneMappedB=acesToneMapping(exposedB);  let gammaCorrectedR=linearToSRGB(toneMappedR); let gammaCorrectedG=linearToSRGB(toneMappedG); let gammaCorrectedB=linearToSRGB(toneMappedB);  let r16=floatToHalf(gammaCorrectedR); let g16=floatToHalf(gammaCorrectedG); let b16=floatToHalf(gammaCorrectedB); let a16=floatToHalf(a);  let outputIndex=pixelIndex * 2u; outputData[outputIndex]=(g16 << 16u) | r16; outputData[outputIndex + 1u]=(a16 << 16u) | b16;\n} `}(w);try{const i=_.createShaderModule({code:z,label:"hdr_float16_tonemapping_shader"}),g=function(i,m,g){const x=i.createBuffer({size:m.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"hdr_input_float32_buffer"}),_=i.createBuffer({size:8*g,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC,label:"hdr_output_float16_buffer"}),b=i.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"hdr_constants_buffer"}),y=i.createBuffer({size:8*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"hdr_read_buffer"});return i.queue.writeBuffer(x,0,m),{inputBuffer:x,outputBuffer:_,constantsBuffer:b,readBuffer:y}}(_,m,P);!function(i,m,g,x,_){const b=new ArrayBuffer(12),y=new DataView(b);y.setFloat32(0,g,!0),y.setUint32(4,x,!0),y.setUint32(8,_,!0),i.queue.writeBuffer(m,0,b)}(_,g.constantsBuffer,b,y,T);const{computePipeline:H,bindGroup:$}=function(i,m,g){const x=i.createComputePipeline({layout:"auto",compute:{module:m,entryPoint:"main"},label:"hdr_float16_tonemapping_pipeline"}),_=i.createBindGroup({layout:x.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g.inputBuffer}},{binding:1,resource:{buffer:g.outputBuffer}},{binding:2,resource:{buffer:g.constantsBuffer}}],label:"hdr_float16_tonemapping_bindgroup"});return{computePipeline:x,bindGroup:_}}(_,i,g),W=await async function(i,m,g,x,_,b,y,T,w){const P=i.createCommandEncoder({label:"hdr_float16_tonemapping_encoder"}),z=P.beginComputePass({label:"hdr_float16_tonemapping_pass"});z.setPipeline(m),z.setBindGroup(0,g);const H=Math.ceil(b/T[0]),$=Math.ceil(y/T[1]);if(H>65535||$>65535)throw new Error(`이미지가 너무 큽니다. 최대 크기:${65535*T[0]} × ${65535*T[1]}`);z.dispatchWorkgroups(H,$),z.end(),P.copyBufferToBuffer(x,0,_,0,8*w),i.queue.submit([P.finish()]),await _.mapAsync(GPUMapMode.READ);const W=new Uint32Array(_.getMappedRange()),q=W.byteLength>0?new Uint16Array(W.buffer.slice(W.byteOffset,W.byteOffset+W.byteLength)):new Uint16Array(8);return _.unmap(),q}(_,H,$,g.outputBuffer,g.readBuffer,y,T,w,P);!function(i){i.inputBuffer.destroy(),i.outputBuffer.destroy(),i.constantsBuffer.destroy(),i.readBuffer.destroy()}(g);return{data:W,processedPixels:P,executionTime:performance.now()-x}}catch(i){throw console.error("Float16 톤매핑 처리 실패:",i),i}}async function float32ToUint8WithToneMapping(i,m,g){const x=performance.now(),{gpuDevice:_}=i,{exposure:b,width:y,height:T,workgroupSize:w=[8,8]}=g,P=m.length/4,z=function(i){return` struct Constants { exposure:f32, width:u32, height:u32, }  @group(0) @binding(0) var<storage,read> inputData:array<f32>; @group(0) @binding(1) var<storage,read_write> outputData:array<u32>; @group(0) @binding(2) var<uniform> constants:Constants;  /* ACES 톤매핑 함수 */ fn acesToneMapping(x:f32) -> f32 { let a=2.51; let b=0.03; let c=2.43; let d=0.59; let e=0.14; return max(0.0,(x * (a * x + b))/(x * (c * x + d) + e)); }  /* Linear → sRGB 감마 보정 */ fn linearToSRGB(linearValue:f32) -> f32 { if (linearValue <=0.0031308) { return 12.92 * linearValue; } else { return 1.055 * pow(linearValue,1.0/2.4) - 0.055; } }  @compute @workgroup_size(${i[0]},${i[1]}) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let x=global_id.x; let y=global_id.y;  /* 범위 체크 */ if (x >=constants.width || y >=constants.height) { return; }  let pixelIndex=y * constants.width + x; let baseIndex=pixelIndex * 4u;  /* RGBA 각 채널 처리 */ var processedPixel=0u;  for (var channel=0u;channel < 4u;channel++) { let inputIndex=baseIndex + channel; let originalVal=inputData[inputIndex];  /* 노출값 적용 */ let exposedVal=originalVal * constants.exposure;  /* 🎬 ACES 톤매핑 적용 */ let toneMappedVal=acesToneMapping(exposedVal);  /* 🔧 감마 보정 적용 (sRGB) */ let gammaCorrectedVal=linearToSRGB(toneMappedVal);  /* 최종 8bit 변환 */ let uint8Val=u32(round(clamp(gammaCorrectedVal,0.0,1.0) * 255.0));  /* 🔧 4개 채널을 하나의 u32에 패킹 */ processedPixel |=(uint8Val << (channel * 8u)); }  outputData[pixelIndex]=processedPixel; } `}(w);try{const i=_.createShaderModule({code:z,label:"hdr_tonemapping_shader"}),g=function(i,m,g){const x=i.createBuffer({size:m.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"hdr_input_float32_buffer"}),_=i.createBuffer({size:4*g,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC,label:"hdr_output_uint8_buffer"}),b=i.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"hdr_constants_buffer"}),y=i.createBuffer({size:4*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"hdr_read_buffer"});return i.queue.writeBuffer(x,0,m),{inputBuffer:x,outputBuffer:_,constantsBuffer:b,readBuffer:y}}(_,m,P);!function(i,m,g,x,_){const b=new ArrayBuffer(12),y=new DataView(b);y.setFloat32(0,g,!0),y.setUint32(4,x,!0),y.setUint32(8,_,!0),i.queue.writeBuffer(m,0,b)}(_,g.constantsBuffer,b,y,T);const{computePipeline:H,bindGroup:$}=function(i,m,g){const x=i.createComputePipeline({layout:"auto",compute:{module:m,entryPoint:"main"},label:"hdr_tonemapping_pipeline"}),_=i.createBindGroup({layout:x.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g.inputBuffer}},{binding:1,resource:{buffer:g.outputBuffer}},{binding:2,resource:{buffer:g.constantsBuffer}}],label:"hdr_tonemapping_bindgroup"});return{computePipeline:x,bindGroup:_}}(_,i,g),W=await async function(i,m,g,x,_,b,y,T,w){const P=i.createCommandEncoder({label:"hdr_tonemapping_encoder"}),z=P.beginComputePass({label:"hdr_tonemapping_pass"});z.setPipeline(m),z.setBindGroup(0,g);const H=Math.ceil(b/T[0]),$=Math.ceil(y/T[1]);if(H>65535||$>65535)throw new Error(`이미지가 너무 큽니다. 최대 크기:${65535*T[0]} × ${65535*T[1]}`);z.dispatchWorkgroups(H,$),z.end(),P.copyBufferToBuffer(x,0,_,0,4*w),i.queue.submit([P.finish()]),await _.mapAsync(GPUMapMode.READ);const W=new Uint32Array(_.getMappedRange()),q=W.byteLength>0?new Uint8Array(W.buffer.slice(W.byteOffset,W.byteOffset+W.byteLength)):new Uint8Array(4);return _.unmap(),q}(_,H,$,g.outputBuffer,g.readBuffer,y,T,w,P);!function(i){i.inputBuffer.destroy(),i.outputBuffer.destroy(),i.constantsBuffer.destroy(),i.readBuffer.destroy()}(g);return{data:W,processedPixels:P,executionTime:performance.now()-x}}catch(i){throw console.error("톤매핑 처리 실패:",i),i}}class HDRTexture extends ManagementResourceBase{#ge;#In;#Ln;#Dn;#Vl;#An=0;#zl=1024;#Hl=new HDRLoader;#vt;#$l=1;#Wl=1;#Kl;#On;#Gn;#jl=!1;#Xl=null;constructor(i,m,g,x,_=1024,b=!0){if(super(i,"managedHDRTextureState"),this.#On=g,this.#Gn=x,this.#vt="rgba16float",this.#zl=_,this.useMipmap=b,m){const i=this.#Fn(m);this.#ql(i),this.#In=i,this.cacheKey=this.#Nn(m);const{table:g}=this.targetResourceManagedState;let x=g.get(this.cacheKey);if(x){const i=x.texture;return this.#On?.(i),i}this.src=m,this.#Vn()}}get videoMemorySize(){return this.#An}get gpuTexture(){return this.#ge}get mipLevelCount(){return this.#Ln}get src(){return this.#In}set src(i){const m=this.#Fn(i);this.#ql(m),this.#In=m,this.cacheKey=this.#Nn(i),this.#jl=!1,this.#In&&this.#Yl(this.#In)}get useMipmap(){return this.#Dn}set useMipmap(i){this.#Dn!==i&&(this.#Dn=i,this.#Ln=this.#Dn?getMipLevelCount(this.#zl,this.#zl):1,this.#jl=!1,this.#Hn())}get exposure(){return this.#$l}set exposure(i){const m=Math.max(.01,Math.min(20,i));this.#$l!==m&&(this.#$l=m,this.#Xl&&clearTimeout(this.#Xl),this.#Xl=setTimeout(()=>{this.#Vl&&(this.#jl&&this.#ge?this.#Zl():this.#Hn()),this.#Xl=null},50))}get recommendedExposure(){return this.#Wl}get luminanceAnalysis(){return this.#Kl}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#Ln}}static isSupportedFormat(i){return!(!i||"string"!=typeof i)&&i.toLowerCase().endsWith(".hdr")}static getSupportedFormats(){return[".hdr"]}resetToRecommendedExposure(){this.exposure=this.#Wl}destroy(){const i=this.#ge;this.#$n(null),this.#jl=!1,this.__fireListenerList(!0),this.#Kl=null,this.#Wn(),this.#In=null,this.cacheKey=null,i&&i.destroy()}#Nn(i){let m;return i||(m=this.uuid),m="string"==typeof i?getAbsoluteURL(window.location.href,i):i.cacheKey||getAbsoluteURL(window.location.href,i.src),`HDRTexture_${m}`}#Fn(i){return"string"==typeof i?i:i.src}#ql(i){if(!i||"string"!=typeof i)throw new Error("HDR 파일 경로가 필요합니다");if(!i.split("?")[0].split("#")[0].toLowerCase().endsWith(".hdr"))throw new Error(`지원되지 않는 형식입니다. .hdr 형식만 지원됩니다. 입력된 파일:${i}`)}async#Yl(i){try{const m=await this.#Hl.loadHDRFile(i);this.#Vl=m,this.#Wl=m.recommendedExposure||1,this.#$l=this.#Wl,m.luminanceStats&&(this.#Kl={averageLuminance:m.luminanceStats.average,maxLuminance:m.luminanceStats.max,minLuminance:m.luminanceStats.min,medianLuminance:m.luminanceStats.median,percentile95:.95*m.luminanceStats.max,percentile99:.99*m.luminanceStats.max,recommendedExposure:this.#Wl},dr("휘도 분석 완료:",this.#Kl)),dr(`HDR 데이터 로드 완료:${m.width}x${m.height},권장 노출:${this.#Wl.toFixed(3)},현재 노출:${this.#$l.toFixed(3)}`),await this.#Hn(),this.#On?.(this)}catch(i){console.error("HDR loading error (.hdr 형식):",i),this.#Gn?.(i)}}#$n(i){this.#ge=i,i||(this.#Vl=null,this.#jl=!1),this.__fireListenerList()}#Vn(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateHDRTexture(this))}#Wn(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}async#Hn(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext;if(this.#jl&&this.#ge)return void await this.#Zl();await i.queue.onSubmittedWorkDone();const g=this.#ge;this.#ge=null;const x={size:[this.#zl,this.#zl,6],format:this.#vt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#Ln,dimension:"2d",label:`${this.#In}_cubemap_exp${this.#$l.toFixed(2)}`},_=m.createManagedTexture(x);this.#$n(_),this.#Ln=x.mipLevelCount||1,await this.#Zl(),this.#jl=!0,g&&(await i.queue.onSubmittedWorkDone(),g.destroy())}async#Zl(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;if(!this.#ge)return void console.warn("큐브맵 텍스처가 없어 업데이트를 건너뜁니다.");if(!this.#Vl)return;const{width:x,height:_}=this.#Vl,b={size:[x,_],format:this.#vt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`${this.#In}_temp_exp${this.#$l.toFixed(2)}`},y=await this.#Jl(i,m,this.#Vl,b);await this.#Ql(y),y.destroy(),this.#Dn&&g.generateMipmap(this.#ge,{size:[this.#zl,this.#zl,6],format:this.#vt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#Ln,dimension:"2d"}),this.targetResourceManagedState.videoMemory-=this.#An,this.#An=0,this.#An=calculateTextureByteSize(this.#ge),this.targetResourceManagedState.videoMemory+=this.#An}async#Ql(i){const{gpuDevice:m,resourceManager:g}=this.redGPUContext,x=m.createShaderModule({code:"struct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0), vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0) ); var texCoord=array<vec2<f32>,6>( vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0), vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0) ); var output:VertexOutput; output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); output.texCoord=texCoord[vertexIndex]; return output;\n}\n@group(0) @binding(0) var equirectangularTexture:texture_2d<f32>;\n@group(0) @binding(1) var textureSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> { let ndc=vec2<f32>( input.texCoord.x * 2.0 - 1.0, (1.0 - input.texCoord.y) * 2.0 - 1.0 ); var localDirection=vec3<f32>(ndc.x,ndc.y,1.0); let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz); let theta=atan2(worldDirection.z,worldDirection.x); let phi=acos(clamp(worldDirection.y,-1.0,1.0)); var u=(theta + 3.14159265359)/(2.0 * 3.14159265359); var v=phi/3.14159265359; u=fract(u + 1.0); v=clamp(v,0.0001,0.9999); let color=textureSample(equirectangularTexture,textureSampler,vec2<f32>(u,v)); return color;\n}\n"}),_=m.createRenderPipeline({layout:"auto",vertex:{module:x,entryPoint:"vs_main"},fragment:{module:x,entryPoint:"fs_main",targets:[{format:this.#vt}]}}),b=new Sampler(this.redGPUContext,{magFilter:ln.LINEAR,minFilter:ln.LINEAR,mipmapFilter:cn.LINEAR,addressModeU:un.CLAMP_TO_EDGE,addressModeV:un.CLAMP_TO_EDGE,addressModeW:un.CLAMP_TO_EDGE}),y=this.#ec();for(let m=0;m<6;m++)await this.#tc(_,b,m,y[m],i)}async#nc(i){return(await float32ToFloat16WithToneMapping(this.redGPUContext,i,{exposure:this.#$l,width:this.#Vl.width,height:this.#Vl.height,workgroupSize:[8,8]})).data}async#Jl(i,m,g,x){const _=i.createTexture(x);let b,y;switch(this.#vt){case"rgba16float":b=8;y=(await this.#nc(g.data)).buffer;break;case"rgba8unorm":b=4;y=(await this.#rc(g.data)).buffer;break;default:throw new Error(`지원되지 않는 텍스처 포맷:${this.#vt}`)}return i.queue.writeTexture({texture:_},y,{bytesPerRow:g.width*b,rowsPerImage:g.height},{width:g.width,height:g.height}),_}async#rc(i){return(await float32ToUint8WithToneMapping(this.redGPUContext,i,{exposure:this.#$l,width:this.#Vl.width,height:this.#Vl.height,workgroupSize:[8,8]})).data}#ec(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}async#tc(i,m,g,x,_){const{gpuDevice:b}=this.redGPUContext,y=b.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`hdr_face_${g}_uniform`});b.queue.writeBuffer(y,0,x);const T=b.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:_.createView()},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:y}}]}),w=b.createCommandEncoder(),P=w.beginRenderPass({colorAttachments:[{view:this.#ge.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});P.setPipeline(i),P.setBindGroup(0,T),P.draw(6,1,0,0),P.end(),b.queue.submit([w.finish()]),y.destroy()}}Object.freeze(HDRTexture);const Jr=parseWGSL("#redgpu_include FragmentOutput\nstruct Uniforms { opacity:f32, blur:f32, transitionProgress:f32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var skyboxTextureSampler:sampler;\n@group(2) @binding(2) var skyboxTexture:texture_cube<f32>;\n@group(2) @binding(3) var transitionTexture:texture_cube<f32>;\n@group(2) @binding(4) var transitionAlphaTexture:texture_2d<f32>;\nstruct InputData { @location(0) vertexPosition:vec4<f32>,\n};\nfn sphericalToUV(dir:vec3<f32>) -> vec2<f32> { let normalizedDir=normalize(dir); let phi=atan2(normalizedDir.z,normalizedDir.x); let theta=acos(clamp(normalizedDir.y,-1.0,1.0)); let u=(phi + 3.14159265359)/(2.0 * 3.14159265359); let v=theta/3.14159265359; return vec2<f32>(u,v);\n}\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var cubemapVec=inputData.vertexPosition.xyz - vec3<f32>(0.5); let mipmapCount:f32=f32(textureNumLevels(skyboxTexture) - 1); let blurCurve=uniforms.blur * uniforms.blur; let skyboxColor=textureSampleLevel(skyboxTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve); var sampleColor=skyboxColor; let u_transitionProgress=uniforms.transitionProgress; if (u_transitionProgress > 0.0) { let transitionSample=textureSampleLevel(transitionTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve); #redgpu_if transitionAlphaTexture let uv=sphericalToUV(normalize(cubemapVec)); let transitionAlphaSample=textureSampleLevel(transitionAlphaTexture,skyboxTextureSampler,uv,0.0); let transitionAlphaValue=dot(transitionAlphaSample.rgb,vec3<f32>(0.299,0.587,0.114)); let threshold=u_transitionProgress; let noiseInfluence=0.3; let edgeSoftness=0.1; let maskValue=smoothstep( threshold - edgeSoftness, threshold + edgeSoftness, transitionAlphaValue + (u_transitionProgress - 0.5) * noiseInfluence ); sampleColor=mix(transitionSample,skyboxColor,maskValue * (1.0 - u_transitionProgress)); #redgpu_else sampleColor=mix(skyboxColor,transitionSample,u_transitionProgress); #redgpu_endIf } var outColor=vec4<f32>(sampleColor.rgb,sampleColor.a * uniforms.opacity); if (outColor.a==0.0) { discard; } var output:FragmentOutput; output.color=outColor; return output;\n}\n");class SkyBoxMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m){super(i,"SKYBOX_MATERIAL",Jr,2),this.skyboxTexture=m,this.skyboxTextureSampler=new Sampler(this.redGPUContext,{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}),this.initGPURenderInfos()}}gt.definePositiveNumber(SkyBoxMaterial,[["blur",0]]),gt.definePositiveNumber(SkyBoxMaterial,[["transitionProgress",0]]),gt.defineCubeTexture(SkyBoxMaterial,["transitionTexture"]),gt.defineTexture(SkyBoxMaterial,["transitionAlphaTexture"]),gt.defineCubeTexture(SkyBoxMaterial,["skyboxTexture"]),gt.defineSampler(SkyBoxMaterial,["skyboxTextureSampler"]),Object.freeze(SkyBoxMaterial);var Qr="#redgpu_include SYSTEM_UNIFORM;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec4<f32>,\n};\nstruct VertexUniforms { modelMatrix:mat4x4<f32>,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@vertex\nfn main(inputData:InputData) -> OutData { var outData:OutData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; outData.position=u_projectionCameraMatrix * vertexUniforms.modelMatrix * vec4<f32>(inputData.position,1.0); outData.vertexPosition=0.5 * (vec4<f32>(inputData.position,1.0) + vec4<f32>(1.0,1.0,1.0,1.0)); return outData;\n}\n";const ei=parseWGSL(Qr),ti=ei.uniforms.vertexUniforms;class SkyBox{modelMatrix=create$2();gpuRenderInfo;#ic=!0;#ac;#rt;#l;#Gt;#Ft;#sc;#oc;#uc=0;#lc=0;#cc=0;constructor(i,m){validateRedGPUContext(i),this.#l=i,this.#ac=new Box(i),this.#sc=m,this.#rt=new SkyBoxMaterial(i,this.#sc),this.#Gt=new PrimitiveState(this),this.#Gt.cullMode=Cn.NONE,this.#Ft=new DepthStencilState(this)}get transitionDuration(){return this.#lc}get transitionElapsed(){return this.#cc}get transitionProgress(){return this.#rt.transitionProgress}get blur(){return this.#rt.blur}set blur(i){validatePositiveNumberRange(1,0,1),this.#rt.blur=i}get exposure(){return this.#sc instanceof HDRTexture?this.#sc.exposure:1}set exposure(i){validatePositiveNumberRange(1),this.#sc instanceof HDRTexture&&(this.#sc.exposure=i)}get opacity(){return this.#rt.opacity}set opacity(i){validatePositiveNumberRange(1,0,1),this.#rt.opacity=i}get skyboxTexture(){return this.#sc}set skyboxTexture(i){i?(this.#sc=i,this.#rt.skyboxTexture=i):consoleAndThrowError("SkyBox requires a valid CubeTexture | HDRTexture")}get transitionTexture(){return this.#oc}transition(i,m=300,g){this.#oc=i,this.#rt.transitionTexture=i,this.#lc=m,this.#uc=performance.now(),this.#rt.transitionAlphaTexture=g}render(i){const{currentRenderPassEncoder:m,startTime:g}=i;if(this.#hc(),this.gpuRenderInfo||this.#fc(this.#l),this.#ic&&(this.gpuRenderInfo.pipeline=this.#dc(),this.#ic=!1,i.numDirtyPipelines++),this.#uc)if(this.#cc=Math.max(g-this.#uc,0),this.#cc>this.#lc)this.#uc=0,this.#rt.transitionProgress=0,this.skyboxTexture=this.#oc,this.#rt.transitionTexture=null,this.#ic=!0;else{const i=this.#cc/this.#lc;this.#rt.transitionProgress=i<0?0:i>1?1:i}const{gpuRenderInfo:x}=this,{vertexUniformBindGroup:_,pipeline:b}=x,{indexBuffer:y}=this.#ac,{triangleCount:T,indexCount:w,format:P}=y;m.setPipeline(b),m.setVertexBuffer(0,this.#ac.vertexBuffer.gpuBuffer),m.setBindGroup(1,_),m.setBindGroup(2,this.#rt.gpuRenderInfo.fragmentUniformBindGroup),m.setIndexBuffer(y.gpuBuffer,P),m.drawIndexed(y.indexCount,1,0,0,0),i.num3DObjects++,i.numDrawCalls++,i.numTriangles+=T,i.numPoints+=w}#hc(){const{changedMSAA:i}=this.#l.antialiasingManager;i&&(this.#ic=!0)}#fc(i){const{resourceManager:m}=this.#l,g=m.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||m.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(ei,1)),x=new ArrayBuffer(ti.arrayBufferByteLength),_=new UniformBuffer(i,x,"SKYBOX_VERTEX_UNIFORM_BUFFER","SKYBOX_VERTEX_UNIFORM_BUFFER");identity(this.modelMatrix),scale(this.modelMatrix,this.modelMatrix,[1e4,1e4,1e4]),_.writeOnlyBuffer(ti.members.modelMatrix,this.modelMatrix);const b={layout:g,label:"VERTEX_BIND_GROUP_DESCRIPTOR_SKYBOX",entries:[{binding:0,resource:{buffer:_.gpuBuffer,offset:0,size:_.size}}]},y=i.gpuDevice.createBindGroup(b);this.gpuRenderInfo=new VertexGPURenderInfo(null,ei.shaderSourceVariant,ei.conditionalBlocks,ti,g,_,y,this.#dc())}#dc(){const{resourceManager:i,gpuDevice:m,antialiasingManager:g}=this.#l,x={code:Qr},_={module:i.createGPUShaderModule("VERTEX_MODULE_SKYBOX",x),entryPoint:"main",buffers:this.#ac.gpuRenderInfo.buffers},b=i.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||i.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(ei,1)),y={bindGroupLayouts:[i.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),b,this.#rt.gpuRenderInfo.fragmentBindGroupLayout]},T={label:"PIPELINE_DESCRIPTOR_SKYBOX",layout:i.createGPUPipelineLayout("SKYBOX_PIPELINE_LAYOUT",y),vertex:_,fragment:this.#rt.gpuRenderInfo.fragmentState,primitive:this.#Gt.state,depthStencil:this.#Ft.state,multisample:{count:g.useMSAA?4:1}};return m.createRenderPipeline(T)}}Object.freeze(SkyBox);var ni=Object.freeze({__proto__:null,SkyBoxMaterial:SkyBoxMaterial});const ri={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DIFFERENCE:6,EXCLUSION:7};function mixInMesh2D(i){const m=class extends i{#mc=0;#pc=ri.NORMAL;get blendMode(){const i=Object.entries(ri).find(([,i])=>i===this.#pc);if(!i)throw new Error(`Invalid blendMode value:${this.#pc}`);return i[0]}set blendMode(i){let m;if("string"==typeof i){if(!(i in ri))throw new Error(`Invalid blendMode key:${i}`);m=ri[i]}else{if("number"!=typeof i||!Object.values(ri).includes(i))throw new Error(`Invalid blendMode:${i}`);m=i}this.#pc=m,this.#gc(m)}get rotation(){return this.#mc}set rotation(i){this.#mc=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}#gc(i){const{blendColorState:m,blendAlphaState:g}=this._material;switch(i){case ri.NORMAL:m.operation=tn.ADD,m.srcFactor=en.SRC_ALPHA,m.dstFactor=en.ONE_MINUS_SRC_ALPHA,g.operation=tn.ADD,g.srcFactor=en.SRC_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case ri.MULTIPLY:m.operation=tn.ADD,m.srcFactor=en.ONE_MINUS_DST_ALPHA,m.dstFactor=en.ONE_MINUS_SRC_ALPHA,g.operation=tn.ADD,g.srcFactor=en.SRC_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case ri.LIGHTEN:m.operation=tn.MAX,m.srcFactor=en.ONE,m.dstFactor=en.ONE,g.operation=tn.ADD,g.srcFactor=en.SRC_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case ri.SCREEN:m.operation=tn.ADD,m.srcFactor=en.ONE,m.dstFactor=en.ONE_MINUS_SRC,g.operation=tn.ADD,g.srcFactor=en.SRC_ALPHA,g.dstFactor=en.ONE_MINUS_SRC_ALPHA;break;case ri.LINEAR_DODGE:m.operation=tn.ADD,m.srcFactor=en.ONE,m.dstFactor=en.ONE,g.operation=tn.ADD,g.srcFactor=en.SRC_ALPHA,g.dstFactor=en.ONE;break;case ri.SUBTRACT:m.operation=tn.REVERSE_SUBTRACT,m.srcFactor=en.SRC_ALPHA,m.dstFactor=en.ONE_MINUS_SRC_ALPHA,g.operation=tn.REVERSE_SUBTRACT,g.srcFactor=en.ONE,g.dstFactor=en.ONE;break;case ri.DIFFERENCE:m.operation=tn.SUBTRACT,m.srcFactor=en.ONE,m.dstFactor=en.ONE,g.operation=tn.SUBTRACT,g.srcFactor=en.ONE,g.dstFactor=en.ONE;break;case ri.EXCLUSION:m.operation=tn.ADD,m.srcFactor=en.ONE_MINUS_DST_ALPHA,m.dstFactor=en.ONE_MINUS_SRC_ALPHA,g.operation=tn.ADD,g.srcFactor=en.ONE,g.dstFactor=en.ONE;break;default:console.warn(`Unsupported blend mode:${i}`)}}};return Object.defineProperty(m.prototype,"is2DMeshType",{value:!0,writable:!1}),m}var ii=Object.freeze({__proto__:null,MeshBase:MeshBase,Object3DContainer:Object3DContainer,VertexGPURenderInfo:VertexGPURenderInfo,createMeshVertexUniformBuffers:createMeshVertexUniformBuffers,mixInMesh2D:mixInMesh2D}),ai=Object.freeze({__proto__:null,AView:AView,RenderViewStateData:RenderViewStateData,ViewRenderTextureManager:ViewRenderTextureManager,ViewTransform:ViewTransform});class View2D extends View3D{constructor(i,m,g){super(i,m,new Camera2D,g)}}Object.freeze(View2D);const si=Math.PI/180;class GroupBase extends Object3DContainer{modelMatrix=create$2();localMatrix=create$2();#R;#C;#jt;#Xt=0;#Yt=0;#qt=0;#Zt=[0,0,0];#Jt=0;#Qt=0;#en=0;#nn=1;#rn=1;#in=1;#an=[1,1,1];#sn=0;#on=0;#un=0;#ln=[0,0,0];#xc=!0;constructor(i){super(),i&&(this.name=i)}get dirtyTransform(){return this.#xc}set dirtyTransform(i){this.#xc=i}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get parent(){return this.#jt}set parent(i){this.#jt=i}get pivotX(){return this.#Jt}set pivotX(i){this.#Jt=i,this.dirtyTransform=!0}get pivotY(){return this.#Qt}set pivotY(i){this.#Qt=i,this.dirtyTransform=!0}get pivotZ(){return this.#en}set pivotZ(i){this.#en=i,this.dirtyTransform=!0}get x(){return this.#Xt}set x(i){this.#Xt=this.#Zt[0]=i,this.dirtyTransform=!0}get y(){return this.#qt}set y(i){this.#qt=this.#Zt[1]=i,this.dirtyTransform=!0}get z(){return this.#Yt}set z(i){this.#Yt=this.#Zt[2]=i,this.dirtyTransform=!0}get position(){return this.#Zt}get scaleX(){return this.#nn}set scaleX(i){this.#nn=this.#an[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#rn}set scaleY(i){this.#rn=this.#an[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#in}set scaleZ(i){this.#in=this.#an[2]=i,this.dirtyTransform=!0}get scale(){return this.#Zt}get rotationX(){return this.#sn}set rotationX(i){this.#sn=this.#ln[0]=i,this.dirtyTransform=!0}get rotationY(){return this.#on}set rotationY(i){this.#on=this.#ln[1]=i,this.dirtyTransform=!0}get rotationZ(){return this.#un}set rotationZ(i){this.#un=this.#ln[2]=i,this.dirtyTransform=!0}get rotation(){return this.#ln}setScale(i,m,g){m=m??i,g=g??i;const x=this.#an;this.#nn=x[0]=i,this.#rn=x[1]=m,this.#in=x[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const x=this.#Zt;this.#Xt=x[0]=i,this.#qt=x[1]=m,this.#Yt=x[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const x=this.#ln;this.#sn=x[0]=i,this.#on=x[1]=m,this.#un=x[2]=g,this.dirtyTransform=!0}render(i){const{view:m,isScene2DMode:g}=i;let x;if(g&&(this.#Yt=0,this.#en=0),this.dirtyTransform){x=!0;{const{pixelRectObject:i}=m,g=this.parent,x=this.localMatrix;identity(x),translate(x,x,[this.#Xt,this.#qt,this.#Yt]),rotateX(x,x,this.#sn*si),rotateY(x,x,this.#on*si),rotateZ(x,x,this.#un*si);let _=[this.#nn,this.#rn,this.#in];if(this.renderTextureWidth&&(_[0]*=this.renderTextureWidth/i.height,_[1]*=this.renderTextureHeight/i.height),scale(x,x,_),this.#Jt||this.#Qt||this.#en){translate(x,x,[-this.#Jt,-this.#Qt,-this.#en])}g?.modelMatrix?multiply(this.modelMatrix,g.modelMatrix,this.localMatrix):copy(this.modelMatrix,this.localMatrix)}}this.dirtyTransform&&(x=!0,this.dirtyTransform=!1),i.num3DGroups++;const{children:_}=this;let b=0;const y=_.length;for(;b<y;b++)x&&(_[b].dirtyTransform=x),_[b].render(i)}}Object.defineProperty(GroupBase.prototype,"meshType",{value:Tn.MESH,writable:!1}),Object.freeze(GroupBase);class Group2D extends GroupBase{#R;#C;#mc=0;constructor(i){super(),i&&(this.name=i)}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}get rotation(){return this.#mc}set rotation(i){this.#mc=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}}Object.defineProperty(Group2D.prototype,"is2DMeshType",{value:!0,writable:!1}),Object.freeze(Group2D);class Group3D extends GroupBase{#R;#C;constructor(i){super(),i&&(this.name=i)}get name(){return this.#R||(this.#R=InstanceIdGenerator.getNextId(this.constructor)),this.#C||`${this.constructor.name} Instance ${this.#R}`}set name(i){this.#C=i}}Object.defineProperty(Group3D.prototype,"meshType",{value:Tn.MESH,writable:!1}),Object.freeze(Group3D);var oi=Object.freeze({__proto__:null,AGroupBase:GroupBase});const ui={Linear:0,QuintIn:1,QuintOut:2,QuintInOut:3,BackIn:4,BackOut:5,BackInOut:6,CircIn:7,CircOut:8,CircInOut:9,CubicIn:10,CubicOut:11,CubicInOut:12,ExpoIn:13,ExpoOut:14,ExpoInOut:15,QuadIn:16,QuadOut:17,QuadInOut:18,QuartIn:19,QuartOut:20,QuartInOut:21,SineIn:22,SineOut:23,SineInOut:24,ElasticIn:25,ElasticOut:26,ElasticInOut:27};const li=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; var finalColor:vec4<f32>=vec4<f32>(0.0); #redgpu_if diffuseTexture finalColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); #redgpu_endIf let alpha2D=select(finalColor.a,1.0,systemUniforms.isView3D==1u); finalColor=vec4<f32>(finalColor.rgb * alpha2D,finalColor.a * uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (systemUniforms.isView3D==1 && finalColor.a==0.0) { discard; } output.color=finalColor; output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n};\n");class BitmapMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"BITMAP_MATERIAL",li,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}gt.defineByPreset(BitmapMaterial,[gt.PRESET_TEXTURE.DIFFUSE_TEXTURE,gt.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(BitmapMaterial);var ci="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32, useBillboardPerspective:u32, useBillboard:u32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) a_position:vec3<f32>, @location(1) a_normal:vec3<f32>, @location(2) a_uv:vec2<f32>, @location(3) position:vec3<f32>, @location(4) alpha:f32, @location(5) rotation:vec3<f32>, @location(6) scale:f32,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\nfn mat4_inverse(a:mat4x4<f32>) -> mat4x4<f32> { var a00:f32=a[0][0]; var a01:f32=a[0][1]; var a02:f32=a[0][2]; var a03:f32=a[0][3]; var a10:f32=a[1][0]; var a11:f32=a[1][1]; var a12:f32=a[1][2]; var a13:f32=a[1][3]; var a20:f32=a[2][0]; var a21:f32=a[2][1]; var a22:f32=a[2][2]; var a23:f32=a[2][3]; var a30:f32=a[3][0]; var a31:f32=a[3][1]; var a32:f32=a[3][2]; var a33:f32=a[3][3]; var b00:f32=a00*a11 - a01*a10; var b01:f32=a00*a12 - a02*a10; var b02:f32=a00*a13 - a03*a10; var b03:f32=a01*a12 - a02*a11; var b04:f32=a01*a13 - a03*a11; var b05:f32=a02*a13 - a03*a12; var b06:f32=a20*a31 - a21*a30; var b07:f32=a20*a32 - a22*a30; var b08:f32=a20*a33 - a23*a30; var b09:f32=a21*a32 - a22*a31; var b10:f32=a21*a33 - a23*a31; var b11:f32=a22*a33 - a23*a32; var det:f32=b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06; if (det !=0.0) { det=1.0/det; return mat4x4<f32>( (a11*b11 - a12*b10 + a13*b09) * det, (a02*b10 - a01*b11 - a03*b09) * det, (a31*b05 - a32*b04 + a33*b03) * det, (a22*b04 - a21*b05 - a23*b03) * det, (a12*b08 - a10*b11 - a13*b07) * det, (a00*b11 - a02*b08 + a03*b07) * det, (a32*b02 - a30*b05 - a33*b01) * det, (a20*b05 - a22*b02 + a23*b01) * det, (a10*b10 - a11*b08 + a13*b06) * det, (a01*b08 - a00*b10 - a03*b06) * det, (a30*b04 - a31*b02 + a33*b00) * det, (a21*b02 - a20*b04 - a23*b00) * det, (a11*b07 - a10*b09 - a12*b06) * det, (a00*b09 - a01*b07 + a02*b06) * det, (a31*b01 - a30*b03 - a32*b00) * det, (a20*b03 - a21*b01 + a22*b00) * det ); } return mat4x4<f32>( 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0 );\n}\nfn rotationMTX(t:vec3<f32>)->mat4x4<f32>\n{ var s:f32=sin(t.x); var c:f32=cos(t.x); var m1=mat4x4<f32>(1,0,0,0, 0,c,-s,0, 0,s,c,0, 0,0,0,1); s=sin(t[1]);c=cos(t[1]); var m2=mat4x4<f32>(c,0,s,0, 0,1,0,0, -s,0,c,0, 0,0,0,1); s=sin(t[2]);c=cos(t[2]); var m3=mat4x4<f32>(c,-s,0,0, s,c,0,0, 0,0,1,0, 0,0,0,1); return m1 * m2 * m3;\n}\n@vertex\nfn main( inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective==1u; let u_useBillboard=vertexUniforms.useBillboard==1u; let input_position=inputData.position; var position:vec4<f32>; var normalPosition:vec4<f32>; var scaleMTX=mat4x4<f32>( inputData.scale,0,0,0, 0,inputData.scale,0,0, 0,0,inputData.scale,0, 0,0,0,1 ); var translateTX=mat4x4<f32>( 1,0,0,0, 0,1,0,0, 0,0,1,0, inputData.position.x,inputData.position.y,inputData.position.z,1 ); var temp:mat4x4<f32>; if(u_useBillboard){ var rotateMTX2=rotationMTX( vec3(0,0,inputData.rotation.z) ); temp=translateTX * rotateMTX2; position=rotateMTX2 * vec4<f32>(inputData.a_position,1); output.position=u_projectionMatrix * getBillboardMatrixNoScaleRatio( u_cameraMatrix,temp ) * scaleMTX * position; }else{ var rotateMTX=rotationMTX( inputData.rotation ); temp=translateTX * rotateMTX * scaleMTX; position=temp * vec4<f32>(inputData.a_position,1); output.position=u_projectionCameraMatrix * position; } output.vertexPosition=position.xyz; output.vertexNormal=(transpose(mat4_inverse(temp) ) * vec4<f32>(inputData.a_normal,1.0)).xyz; output.uv=inputData.a_uv; output.combinedOpacity=inputData.alpha; return output;\n}\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n";const hi=parseWGSL(ci),fi=hi.uniforms.vertexUniforms;class ParticleEmitter extends Mesh{#_c=1e3;#vc=5e3;#bc=0;#yc=0;#Sc=0;#Tc=0;#wc=0;#Mc=0;#Cc=-5;#Rc=-5;#Pc=-5;#Ec=5;#Bc=5;#Ic=5;#Lc=1;#Dc=1;#Uc=1;#Ac=1;#kc=0;#Oc=1;#Gc=0;#Fc=0;#Nc=-360;#Vc=-360;#zc=-360;#Hc=360;#$c=360;#Wc=360;#Kc=-360;#jc=-360;#Xc=-360;#qc=360;#Yc=360;#Zc=360;#Jc=ui.CubicOut;#Qc=ui.CubicOut;#eh=ui.CubicOut;#th=ui.Linear;#nh=ui.Linear;#rh=ui.CubicOut;#ih=ui.CubicOut;#ah=ui.CubicOut;#sh;#oh;#uh;#za;#lh;#ch=2e3;constructor(i){super(i),this.geometry=new Plane(i),this.material=new BitmapMaterial(i),this.ignoreFrustumCulling=!0,this.useBillboard=!0}get vertexStateBuffers(){return[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x3"},{shaderLocation:2,offset:24,format:"float32x2"}]},{arrayStride:48,stepMode:"instance",attributes:[{shaderLocation:3,offset:16,format:"float32x3"},{shaderLocation:4,offset:28,format:"float32"},{shaderLocation:5,offset:32,format:"float32x3"},{shaderLocation:6,offset:44,format:"float32"}]}]}get particleNum(){return this.#ch}set particleNum(i){this.#ch=Math.max(Math.min(i,5e5),1),this.#sh||this.#Ci(),this.#hh()}get minLife(){return this.#_c}set minLife(i){this.#_c=i}get maxLife(){return this.#vc}set maxLife(i){this.#vc=i}get minStartX(){return this.#bc}set minStartX(i){this.#bc=i}get minStartY(){return this.#yc}set minStartY(i){this.#yc=i}get minStartZ(){return this.#Sc}set minStartZ(i){this.#Sc=i}get maxStartX(){return this.#Tc}set maxStartX(i){this.#Tc=i}get maxStartY(){return this.#wc}set maxStartY(i){this.#wc=i}get maxStartZ(){return this.#Mc}set maxStartZ(i){this.#Mc=i}get minEndX(){return this.#Cc}set minEndX(i){this.#Cc=i}get minEndY(){return this.#Rc}set minEndY(i){this.#Rc=i}get minEndZ(){return this.#Pc}set minEndZ(i){this.#Pc=i}get maxEndX(){return this.#Ec}set maxEndX(i){this.#Ec=i}get maxEndY(){return this.#Bc}set maxEndY(i){this.#Bc=i}get maxEndZ(){return this.#Ic}set maxEndZ(i){this.#Ic=i}get minStartAlpha(){return this.#Lc}set minStartAlpha(i){this.#Lc=i}get maxStartAlpha(){return this.#Dc}set maxStartAlpha(i){this.#Dc=i}get minEndAlpha(){return this.#Uc}set minEndAlpha(i){this.#Uc=i}get maxEndAlpha(){return this.#Ac}set maxEndAlpha(i){this.#Ac=i}get minStartScale(){return this.#kc}set minStartScale(i){this.#kc=i}get maxStartScale(){return this.#Oc}set maxStartScale(i){this.#Oc=i}get minEndScale(){return this.#Gc}set minEndScale(i){this.#Gc=i}get maxEndScale(){return this.#Fc}set maxEndScale(i){this.#Fc=i}get minStartRotationX(){return this.#Nc}set minStartRotationX(i){this.#Nc=i}get minStartRotationY(){return this.#Vc}set minStartRotationY(i){this.#Vc=i}get minStartRotationZ(){return this.#zc}set minStartRotationZ(i){this.#zc=i}get maxStartRotationX(){return this.#Hc}set maxStartRotationX(i){this.#Hc=i}get maxStartRotationY(){return this.#$c}set maxStartRotationY(i){this.#$c=i}get maxStartRotationZ(){return this.#Wc}set maxStartRotationZ(i){this.#Wc=i}get minEndRotationX(){return this.#Kc}set minEndRotationX(i){this.#Kc=i}get minEndRotationY(){return this.#jc}set minEndRotationY(i){this.#jc=i}get minEndRotationZ(){return this.#Xc}set minEndRotationZ(i){this.#Xc=i}get maxEndRotationX(){return this.#qc}set maxEndRotationX(i){this.#qc=i}get maxEndRotationY(){return this.#Yc}set maxEndRotationY(i){this.#Yc=i}get maxEndRotationZ(){return this.#Zc}set maxEndRotationZ(i){this.#Zc=i}get easeX(){return this.#Jc}set easeX(i){this.#Jc=i}get easeY(){return this.#Qc}set easeY(i){this.#Qc=i}get easeZ(){return this.#eh}set easeZ(i){this.#eh=i}get easeAlpha(){return this.#th}set easeAlpha(i){this.#th=i}get easeScale(){return this.#nh}set easeScale(i){this.#nh=i}get easeRotationX(){return this.#rh}set easeRotationX(i){this.#rh=i}get easeRotationY(){return this.#ih}set easeRotationY(i){this.#ih=i}get easeRotationZ(){return this.#ah}set easeRotationZ(i){this.#ah=i}get particleBuffers(){return this.#oh}render(i){this.#sh||this.#Ci(),this.#fh(i.timestamp),super.render(i)}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_PARTICLE_EMITTER",hi,fi,ci)}#Ci(){this.#uh=new Float32Array(46);let i={size:this.#uh.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};const{gpuDevice:m}=this.redGPUContext;this.#sh=m.createBuffer(i),m.queue.writeBuffer(this.#sh,0,this.#uh),this.#hh(),this.depthStencilState.depthWriteEnabled=!1}#hh(){this.dirtyPipeline=!0;let i=this.redGPUContext;const m=new Float32Array(12*this.#ch),g=new Float32Array(12*this.#ch),x=new Float32Array(12*this.#ch),_=new Float32Array(4*this.#ch),b=new Float32Array(4*this.#ch),y=performance.now(),T=this.localToWorld(this.x,this.y,this.z);for(let i=0;i<this.#ch;++i){let w=Math.random()*this.#vc,P=Math.random()*w;const z=T[0]+Math.random()*(this.#Tc-this.#bc)+this.#bc,H=T[1]+Math.random()*(this.#wc-this.#yc)+this.#yc,$=T[2]+Math.random()*(this.#Mc-this.#Sc)+this.#Sc,W=Math.random()*(this.#Hc-this.#Nc)+this.#Nc,q=Math.random()*(this.#$c-this.#Vc)+this.#Vc,ye=Math.random()*(this.#Wc-this.#zc)+this.#zc;Math.random(),this.#Oc,this.#kc,this.#kc,Math.random(),this.#Dc,this.#Lc,this.#Lc,m[12*i]=y-P,m[12*i+1]=w,m[12*i+4]=z,m[12*i+5]=H,m[12*i+6]=$,m[12*i+7]=0,m[12*i+8]=W,m[12*i+9]=q,m[12*i+10]=ye,m[12*i+11]=0,g[4*i]=z,g[4*i+1]=Math.random()*(this.#Ec-this.#Cc)+this.#Cc,g[4*i+2]=this.#Jc,g[4*i+3]=T[0],g[4*i+4]=H,g[4*i+5]=Math.random()*(this.#Bc-this.#Rc)+this.#Rc,g[4*i+6]=this.#Qc,g[4*i+7]=T[1],g[4*i+8]=$,g[4*i+9]=Math.random()*(this.#Ic-this.#Pc)+this.#Pc,g[4*i+10]=this.#eh,g[4*i+11]=T[2],x[4*i]=W,x[4*i+1]=Math.random()*(this.#qc-this.#Kc)+this.#Kc,x[4*i+2]=this.#rh,x[4*i+3]=0,x[4*i+4]=q,x[4*i+5]=Math.random()*(this.#Yc-this.#jc)+this.#jc,x[4*i+6]=this.#ih,x[4*i+7]=0,x[4*i+8]=ye,x[4*i+9]=Math.random()*(this.#Zc-this.#Xc)+this.#Xc,x[4*i+10]=this.#ah,x[4*i+11]=0,_[4*i]=0,_[4*i+1]=Math.random()*(this.#Fc-this.#Gc)+this.#Gc,_[4*i+2]=this.#nh,_[4*i+3]=0,b[4*i]=0,b[4*i+1]=Math.random()*(this.#Ac-this.#Uc)+this.#Uc,b[4*i+2]=this.#th,b[4*i+3]=0}const w=this.#oh;this.#oh=[];const P=[m,g,x,_,b];P.forEach((m,g)=>{const x=i.gpuDevice.createBuffer({size:m.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE});i.gpuDevice.queue.writeBuffer(x,0,m),this.#oh.push(x),w?.length&&copyGPUBuffer(i.gpuDevice,w[g],x)}),w&&w.forEach(i=>i.destroy());let z={code:"\nstruct Info { startValue:f32, endValue:f32, easeType:f32, birthCenterValue:f32\n};\nstruct InfoGroup { infoX:Info, infoY:Info, infoZ:Info,\n};\nstruct Particle { startTime:f32, life:f32, valuePosition:vec3<f32>, valueAlpha:f32, valueRotation:vec3<f32>, valueScale:f32,\n};\nstruct SimParams { time:f32, currentPositionX:f32,currentPositionY:f32,currentPositionZ:f32, minLife:f32,maxLife:f32, minStartX:f32,maxStartX:f32,minEndX:f32,maxEndX:f32,easeX:f32, minStartY:f32,maxStartY:f32,minEndY:f32,maxEndY:f32,easeY:f32, minStartZ:f32,maxStartZ:f32,minEndZ:f32,maxEndZ:f32,easeZ:f32, minStartAlpha:f32,maxStartAlpha:f32,minEndAlpha:f32,maxEndAlpha:f32,easeAlpha:f32, minStartScale:f32,maxStartScale:f32,minEndScale:f32,maxEndScale:f32,easeScale:f32, minStartRotationX:f32,maxStartRotationX:f32,minEndRotationX:f32,maxEndRotationX:f32,easeRotationX:f32, minStartRotationY:f32,maxStartRotationY:f32,minEndRotationY:f32,maxEndRotationY:f32,easeRotationY:f32, minStartRotationZ:f32,maxStartRotationZ:f32,minEndRotationZ:f32,maxEndRotationZ:f32,easeRotationZ:f32,\n};\n@group(0) @binding(0) var<uniform> params:SimParams;\n@group(0) @binding(1) var<storage,read_write> particles:array<Particle>;\n@group(0) @binding(2) var<storage,read_write> infoPosition:array<InfoGroup>;\n@group(0) @binding(3) var<storage,read_write> infoRotation:array<InfoGroup>;\n@group(0) @binding(4) var<storage,read_write> infoScale:array<Info>;\n@group(0) @binding(5) var<storage,read_write> infoAlpha:array<Info>;\nconst PI:f32=3.141592653589793;\nconst HPI:f32=PI * 0.5;\nconst PI2:f32=PI * 2.0;\nfn calEasing(n:f32,easingType:f32) -> f32 { var m:f32=n; let easingInt:i32=i32(easingType); switch (easingInt) { case 0:{ m=m;} case 1:{ m=m * m * m * m * m;} case 2:{ m -=1.0; m=(m * m * m * m * m) + 1.0; } case 3:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=0.5 * (m * m * m * m * m + 2.0); } } case 4:{ m=m * m * (m * 1.70158 + m - 1.70158);} case 5:{ m -=1.0; m=m * m * (m * 1.70158 + m + 1.70158) + 1.0; } case 6:{ if(m * 2.0 < 1.0) { m *=2.0; m=0.5 * m * m * (m * 1.70158 + m - 1.70158); } else { m=m * 2.0 - 2.0; m=0.5 * m * m * (m * 1.70158 + m + 1.70158) + 1.0; } } case 7:{ m=-1.0 * (sqrt(1.0 - m * m) - 1.0);} case 8:{ m -=1.0; m=sqrt(1.0 - m * m); } case 9:{ if(m * 2.0 < 1.0) { m *=2.0; m=-0.5 * (sqrt(1.0 - m * m) - 1.0); } else { m=m * 2.0 - 2.0; m=0.5 * sqrt(1.0 - m * m) + 0.5; } } case 10:{ m=m * m * m;} case 11:{ m -=1.0; m=m * m * m + 1.0; } case 12:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=0.5 * (m * m * m + 2.0); } } case 13:{ if (m==0.0) { m=0.0;} else { m=pow(2.0,10.0 * (m - 1.0));} } case 14:{ if (m==1.0) { m=1.0;} else { m=-pow(2.0,-10.0 * m) + 1.0;} } case 15:{ if(m * 2.0 < 1.0) { if (m==0.0) { m=0.0;} else { m *=2.0;m=0.5 * pow(2.0,10.0 * (m - 1.0));} } else { if (m==2.0) { m=1.0;} else { m=m * 2.0 - 1.0;m=-0.5 * pow(2.0,-10.0 * m) + 1.0;} } } case 16:{ m=m * m;} case 17:{ m=(2.0 - m) * m;} case 18:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * 0.5; } else { m=2.0 - m; m=0.5 * (m * m + 1.0); } } case 19:{ m=m * m * m * m;} case 20:{ m -=1.0; m=1.0 - (m * m * m * m); } case 21:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=1.0 - (m * m * m * m * 0.5); } } case 22:{ m=-cos(m * HPI) + 1.0;} case 23:{ m=sin(m * HPI);} case 24:{ m=(-cos(m * PI) + 1.0) * 0.5;} case 25:{ if (m==0.0) { m=0.0;} else if (m==1.0) { m=1.0;} else { m -=1.0;m=-1.0 * pow(2.0,10.0 * m) * sin((m - 0.075) * (PI2)/0.3);} } case 26:{ if (m==0.0) { m=0.0; } else if (m==1.0) { m=1.0; } else { m -=1.0; m=-pow(2.0,10.0 * m) * sin((m - 0.075) * PI2/0.3); } } case 27:{ if (m==0.0) { m=0.0; } else if (m==1.0) { m=1.0; } else { m=pow(2.0,-10.0 * m) * sin((m - 0.075) * PI2/0.3) + 1.0; } } default:{ m=m;} } return m;\n}\nfn rand(n:f32) -> f32 { return fract(sin(n) * 43758.5453123);\n}\nfn randomRange(min:f32,max:f32,v:f32)->f32\n{ var newValue:f32=rand(v); return (newValue * (max-min)) + min;\n}\nfn compute_value(tInfo:Info,lifeRatio:f32) -> f32 { return tInfo.startValue + ((tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio,tInfo.easeType));\n}\n@compute @workgroup_size(256,1,1)\nfn main( @builtin(global_invocation_id) global_id:vec3<u32> ) { let index:u32=(global_id.x); let age:f32=(params.time - particles[index].startTime); var lifeRatio:f32=(age/particles[index].life); if (lifeRatio >=1.0 ) { let uuid:f32=(params.time + f32(index)); particles[index].startTime=params.time; particles[index].life=randomRange( params.minLife,params.maxLife,uuid ); infoPosition[index].infoX.startValue=randomRange( params.minStartX + params.currentPositionX,params.maxStartX + params.currentPositionX,(uuid + 1.0) ); infoPosition[index].infoX.endValue=randomRange( params.minEndX + params.currentPositionX,params.maxEndX + params.currentPositionX,(uuid + 2.0) ); infoPosition[index].infoX.easeType=params.easeX; infoPosition[index].infoX.birthCenterValue=params.currentPositionX; infoPosition[index].infoY.startValue=randomRange( params.minStartY +params.currentPositionY,params.maxStartY+params.currentPositionY,(uuid + 3.0) ); infoPosition[index].infoY.endValue=randomRange( params.minEndY+params.currentPositionY,params.maxEndY+params.currentPositionY,(uuid + 4.0) ); infoPosition[index].infoY.easeType=params.easeY; infoPosition[index].infoY.birthCenterValue=params.currentPositionY; infoPosition[index].infoZ.startValue=randomRange( params.minStartZ+params.currentPositionZ,params.maxStartZ+params.currentPositionZ,(uuid + 5.0) ); infoPosition[index].infoZ.endValue=randomRange( params.minEndZ+params.currentPositionZ,params.maxEndZ+params.currentPositionZ,(uuid + 6.0) ); infoPosition[index].infoZ.easeType=params.easeZ; infoPosition[index].infoZ.birthCenterValue=params.currentPositionZ; infoAlpha[index].startValue=randomRange( params.minStartAlpha,params.maxStartAlpha,(uuid + 7.0) ); infoAlpha[index].endValue=randomRange( params.minEndAlpha,params.maxEndAlpha,(uuid + 8.0) ); infoAlpha[index].easeType=params.easeAlpha; infoScale[index].startValue=randomRange( params.minStartScale,params.maxStartScale,(uuid + 9.0) ); infoScale[index].endValue=randomRange( params.minEndScale,params.maxEndScale,(uuid + 10.0)); infoScale[index].easeType=params.easeScale; infoRotation[index].infoX.startValue=randomRange( params.minStartRotationX,params.maxStartRotationX,(uuid + 11.0)); infoRotation[index].infoX.endValue=randomRange( params.minEndRotationX,params.maxEndRotationX,(uuid + 12.0)); infoRotation[index].infoX.easeType=params.easeRotationX; infoRotation[index].infoY.startValue=randomRange( params.minStartRotationY,params.maxStartRotationY,(uuid + 13.0)); infoRotation[index].infoY.endValue=randomRange( params.minEndRotationY,params.maxEndRotationY,(uuid + 14.0)); infoRotation[index].infoY.easeType=params.easeRotationY; infoRotation[index].infoZ.startValue=randomRange( params.minStartRotationZ,params.maxStartRotationZ,(uuid + 15.0)); infoRotation[index].infoZ.endValue=randomRange( params.minEndRotationZ,params.maxEndRotationZ,(uuid + 16.0)); infoRotation[index].infoZ.easeType=params.easeRotationZ; lifeRatio=0.0; } var targetInfo:Info; let targetParticle=particles[index]; targetInfo=infoPosition[index].infoX; particles[index].valuePosition.x=compute_value(targetInfo,lifeRatio); targetInfo=infoPosition[index].infoY; particles[index].valuePosition.y=compute_value(targetInfo,lifeRatio); targetInfo=infoPosition[index].infoZ; particles[index].valuePosition.z=compute_value(targetInfo,lifeRatio); targetInfo=infoAlpha[index]; particles[index].valueAlpha=compute_value(targetInfo,lifeRatio); targetInfo=infoScale[index]; particles[index].valueScale=compute_value(targetInfo,lifeRatio); targetInfo=infoRotation[index].infoX; particles[index].valueRotation.x=compute_value(targetInfo,lifeRatio) * PI/180.0; targetInfo=infoRotation[index].infoY; particles[index].valueRotation.y=compute_value(targetInfo,lifeRatio) * PI/180.0; targetInfo=infoRotation[index].infoZ; particles[index].valueRotation.z=compute_value(targetInfo,lifeRatio) * PI/180.0;\n}\n"},H=i.resourceManager.createGPUShaderModule("PARTICLE_EMITTER_MODULE",z);const $=[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}],W=[{binding:0,resource:{buffer:this.#sh,offset:0,size:this.#uh.byteLength}}];P.forEach((i,m)=>{$.push({binding:m+1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}),W.push({binding:m+1,resource:{buffer:this.#oh[m],offset:0,size:i.byteLength}})});const q=i.gpuDevice.createBindGroupLayout({entries:$}),ye=i.gpuDevice.createPipelineLayout({bindGroupLayouts:[q]});this.#lh=i.gpuDevice.createBindGroup({layout:q,entries:W}),this.#za=i.gpuDevice.createComputePipeline({label:"PARTICLE_EMITTER_PIPELINE",layout:ye,compute:{module:H,entryPoint:"main"}})}#fh(i){const m=this.localToWorld(this.x,this.y,this.z);this.#uh.set([i,...m,this.#_c,this.#vc,this.#bc,this.#Tc,this.#Cc,this.#Ec,this.#Jc,this.#yc,this.#wc,this.#Rc,this.#Bc,this.#Qc,this.#Sc,this.#Mc,this.#Pc,this.#Ic,this.#eh,this.#Lc,this.#Dc,this.#Uc,this.#Ac,this.#th,this.#kc,this.#Oc,this.#Gc,this.#Fc,this.#nh,this.#Nc,this.#Hc,this.#Kc,this.#qc,this.#rh,this.#Vc,this.#$c,this.#jc,this.#Yc,this.#ih,this.#zc,this.#Wc,this.#Xc,this.#Zc,this.#ah],0);const{gpuDevice:g}=this.redGPUContext;g.queue.writeBuffer(this.#sh,0,this.#uh);const x=g.createCommandEncoder({}),_=x.beginComputePass();_.setPipeline(this.#za),_.setBindGroup(0,this.#lh),_.dispatchWorkgroups(Math.ceil(this.#ch/256)),_.end(),g.queue.submit([x.finish()])}}Object.defineProperty(ParticleEmitter.prototype,"meshType",{value:Tn.PARTICLE,writable:!1}),Ge.defineByPreset(ParticleEmitter,[Ge.PRESET_BOOLEAN.USE_BILLBOARD]),Ge.definePositiveNumber(ParticleEmitter,[]),Object.freeze(ParticleEmitter);const di=mixInMesh2D(Mesh);class Sprite2D extends di{#jr=1;#Xr=1;constructor(i,m){super(i,new Plane(i,1,1,1,1,1,!0),m),this.primitiveState.cullMode=Cn.FRONT}get width(){return this.#jr}set width(i){validatePositiveNumberRange(i),this.#jr=i,this.dirtyTransform=!0}get height(){return this.#Xr}set height(i){validatePositiveNumberRange(i),this.#Xr=i,this.dirtyTransform=!0}setSize(i,m){this.width=i,this.height=void 0!==m?m:i}}Object.freeze(Sprite2D);var mi="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32, useBillboardPerspective:u32, useBillboard:u32, billboardFixedScale:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_positionVec4=vec4<f32>(input_position,1.0); let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0); let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useBillboard {  let projectionModelMatrix=u_projectionMatrix * u_modelMatrix; let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix); let billboardNormalMatrix=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix); if (u_useBillboardPerspective==1) { position=billboardMatrix * input_positionVec4; normalPosition=billboardNormalMatrix * input_vertexNormalVec4; } else { position=billboardMatrix * input_positionVec4; normalPosition=billboardNormalMatrix * input_vertexNormalVec4; } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio; let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0); output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * input_positionVec4; normalPosition=u_cameraMatrix * u_normalModelMatrix * input_vertexNormalVec4; output.position=u_projectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix; let u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); var position:vec4<f32>; output.position=u_directionalLightProjectionViewMatrix * u_modelMatrix * input_positionVec4; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_cameraMatrix=systemUniforms.camera.cameraMatrix; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); let u_resolution=systemUniforms.resolution; var position:vec4<f32>; if (u_useBillboard==1) { let projectionModelMatrix=u_projectionMatrix * u_modelMatrix; let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix); if (u_useBillboardPerspective==1) { position=billboardMatrix * input_positionVec4; } else { position=billboardMatrix * input_positionVec4; } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio; let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0); output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * input_positionVec4; output.position=u_projectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const pi=parseWGSL(mi),gi=pi.uniforms.vertexUniforms;class Sprite3D extends Mesh{constructor(i,m,g){super(i),this._geometry=g||new Plane(i),this._material=m,this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.primitiveState.cullMode=Cn.NONE}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_3D",pi,gi,mi)}}Ge.defineByPreset(Sprite3D,[[Ge.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[Ge.PRESET_BOOLEAN.USE_BILLBOARD,!0],[Ge.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(Sprite3D);class ASpriteSheet extends Mesh{#dh=0;#mh=0;#ph=0;#gh=!0;#xh=!0;#_h;#vh;#bh="play";constructor(i,m,g){super(i),this.#vh=g,this._material=new BitmapMaterial(i),this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.spriteSheetInfo=m,this._material.diffuseTextureSampler=new Sampler(i),this._material.diffuseTextureSampler.addressModeU=un.REPEAT,this._material.diffuseTextureSampler.addressModeV=un.REPEAT}get state(){return this.#bh}get loop(){return this.#xh}set loop(i){this.#xh=i}get frameRate(){return this.#dh}set frameRate(i){i<0&&(i=0),0===this.#dh&&i&&(this.#mh=0),this.#dh=i,this.#ph=1e3/this.#dh}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("ASpriteSheet can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("ASpriteSheet can not change material")}get spriteSheetInfo(){return this.#_h}set spriteSheetInfo(i){this.#_h=i,this.frameRate=i.frameRate,this.segmentW=i.segmentW,this.segmentH=i.segmentH,this.totalFrame=i.totalFrame,this.currentIndex=i.startIndex,this.#xh=!0,this.#mh=0,this._material.diffuseTexture=i.texture}play(){this.#gh=!0,this.#bh="play",this.#mh=0}pause(){this.#gh=!1,this.#bh="pause"}stop(){this.#gh=!1,this.currentIndex=0,this.#bh="stop"}render(i){const{diffuseTexture:m}=this._material;this.#vh(m,this.segmentW,this.segmentH);const{timestamp:g}=i;if(this.#mh||(this.#mh=this.#ph+g),this.#gh&&this.#mh<g&&this.#dh){const i=Math.floor((g-this.#mh)/this.#ph),m=(Number.isFinite(i)?i:0)||1;this.#mh=this.#ph+g,this.currentIndex+=m,this.currentIndex>=this.totalFrame&&(this.loop?(this.#gh=!0,this.currentIndex=0):(this.#gh=!1,this.currentIndex=this.totalFrame-1))}super.render(i)}}Ge.definePositiveNumber(ASpriteSheet,[["segmentW",5],["segmentH",3],["totalFrame",15],["currentIndex",0]]),Object.freeze(ASpriteSheet);var xi=Object.freeze({__proto__:null,ASpriteSheet:ASpriteSheet}),_i="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32, segmentW:f32, segmentH:f32, totalFrame:f32, currentIndex:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.combinedOpacity=vertexUniforms.combinedOpacity; let uv=vec2<f32>( input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW), input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH) ); output.uv=uv; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const vi=parseWGSL(_i),bi=vi.uniforms.vertexUniforms,yi=mixInMesh2D(ASpriteSheet);class SpriteSheet2D extends yi{#jr=1;#Xr=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:x}=i,_=x?.width/m,b=x?.height/g;_===this.#jr&&b===this.#Xr||(this.#jr=x?.width/m,this.#Xr=x?.height/g,this.dirtyTransform=!0)}else this.#jr=1,this.#Xr=1}),this._geometry=new Plane(i,1,1,1,1,1,!0),this.primitiveState.cullMode=Cn.FRONT}get width(){return this.#jr}get height(){return this.#Xr}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_2D",vi,bi,_i)}}Object.freeze(SpriteSheet2D);var Si="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32, useBillboardPerspective:u32, useBillboard:u32, segmentW:f32, segmentH:f32, totalFrame:f32, currentIndex:f32, billboardFixedScale:f32, _renderRatioX:f32, _renderRatioY:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let u_renderRatioX=vertexUniforms._renderRatioX; let u_renderRatioY=vertexUniforms._renderRatioY; var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>( u_renderRatioX,0,0,0, 0,u_renderRatioY,0,0, 0,0,1,0, 0,0,0,1 ); let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useBillboard { if (u_useBillboardPerspective==1) { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); } else { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX; let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY; output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.combinedOpacity=vertexUniforms.combinedOpacity; let uv=vec2<f32>( input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW), input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH) ); output.uv=uv; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_cameraMatrix=systemUniforms.camera.cameraMatrix; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let u_renderRatioX=vertexUniforms._renderRatioX; let u_renderRatioY=vertexUniforms._renderRatioY; var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>( u_renderRatioX,0,0,0, 0,u_renderRatioY,0,0, 0,0,1,0, 0,0,0,1 ); let input_position=inputData.position; let u_resolution=systemUniforms.resolution; var position:vec4<f32>; if (u_useBillboard==1) { if (u_useBillboardPerspective==1) { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); } else { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX; let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY; output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0); output.position=u_projectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Ti=parseWGSL(Si),wi=Ti.uniforms.vertexUniforms;class SpriteSheet3D extends ASpriteSheet{#ua=1;#la=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:x}=i,_=x?.width/m,b=x?.height/g;_===this.#ua&&b===this.#la||(this.#ua=x?.width/m,this.#la=x?.height/g,this.#la>this.#ua?(this._renderRatioX=1,this._renderRatioY=this.#la/this.#ua):(this._renderRatioX=this.#ua/this.#la,this._renderRatioY=1),this.dirtyTransform=!0)}else this.#ua=1,this.#la=1}),this._geometry=new Plane(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_3D",Ti,wi,Si)}}Ge.definePositiveNumber(SpriteSheet3D,[["_renderRatioX",1],["_renderRatioY",1]]),Ge.defineByPreset(SpriteSheet3D,[[Ge.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[Ge.PRESET_BOOLEAN.USE_BILLBOARD,!0],[Ge.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(SpriteSheet3D);class SpriteSheetInfo{#yh=0;#Sh=0;#Th=0;#wh=0;#dh=0;#xh=!0;#Mh;constructor(i,m,g,x,_,b,y=!0,T=60){validateRedGPUContext(i),validateUintRange(g),validateUintRange(x),validateUintRange(_),validateUintRange(b),validateUintRange(T),this.#yh=g,this.#Sh=x,this.#Th=_,this.#wh=b,this.#Mh=new BitmapTexture(i,m),this.#xh=y,this.#dh=T}get segmentW(){return this.#yh}get segmentH(){return this.#Sh}get totalFrame(){return this.#Th}get startIndex(){return this.#wh}get texture(){return this.#Mh}get frameRate(){return this.#dh}get loop(){return this.#xh}}Object.freeze(SpriteSheetInfo);const Mi=parseWGSL("#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { opacity:f32\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexColor:vec4<f32>, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; output.color=inputData.vertexColor; output.gBufferMotionVector=vec4<f32>( 0.0,0.0,1.0,1.0 ); return output;\n}\n");class LineMaterial extends ABaseMaterial{constructor(i,m){super(i,"LINE_MATERIAL",Mi,2),m&&(this.name=m),this.initGPURenderInfos()}}Object.freeze(LineMaterial);class LinePoint{position;colorRGBA;constructor(i=0,m=0,g=0,x){this.position=[i,m,g],this.colorRGBA=x}}const getPointsOnBezierCurveWithSplitting=(i,m,g,x)=>{let _=x||[];if(((i,m)=>{let g=i[m].position,x=i[m+1].position,_=i[m+2].position,b=i[m+3].position,y=3*x[0]-2*g[0]-b[0],T=3*x[1]-2*g[1]-b[1],w=3*_[0]-2*b[0]-g[0],P=3*_[1]-2*b[1]-g[1];return y*=y,T*=T,w*=w,P*=P,y<w&&(y=w),T<P&&(T=P),y+T})(i,m)<g)_.push(i[m],i[m+3]);else{let x=.5,b=i[m],y=i[m+1],T=i[m+2],w=i[m+3],P=lerp$1(create$1(),b.position,y.position,x),z=lerp$1(create$1(),y.position,T.position,x),H=lerp$1(create$1(),T.position,w.position,x),$=lerp$1(create$1(),P,z,x),W=lerp$1(create$1(),z,H,x),q=lerp$1(create$1(),$,W,x);q=new LinePoint(q[0],q[1],q[2],b.colorRGBA),P=new LinePoint(P[0],P[1],P[2],P.colorRGBA),H=new LinePoint(H[0],H[1],H[2],H.colorRGBA),$=new LinePoint($[0],$[1],$[2],$.colorRGBA),W=new LinePoint(W[0],W[1],W[2],W.colorRGBA),getPointsOnBezierCurveWithSplitting([b,P,$,q],0,g,_),getPointsOnBezierCurveWithSplitting([q,W,H,w],0,g,_)}return _};class LinePointWithInOut{inLinePoint;linePoint;outLinePoint;constructor(i=0,m=0,g=0,x=0,_=0,b=0,y=0,T=0,w=0,P,z){let H=[...convertHexToRgb(P,!0)];H=[H[0]/255,H[1]/255,H[2]/255,z],this.inLinePoint=new LinePoint(x,_,b,H),this.linePoint=new LinePoint(i,m,g,H),this.outLinePoint=new LinePoint(y,T,w,H)}}const lineVec2DistanceToSegmentSq=function(i,m,g){i=[i[0],i[1]],m=[m[0],m[1]],g=[g[0],g[1]];let x=sqrDist(m,g);if(0===x)return sqrDist(i,m);let _=((i[0]-m[0])*(g[0]-m[0])+(i[1]-m[1])*(g[1]-m[1]))/x;return _=Math.max(0,Math.min(1,_)),sqrDist(i,function(i,m,g,x){var _=m[0],b=m[1];return i[0]=_+x*(g[0]-_),i[1]=b+x*(g[1]-b),i}([0,0],m,g,_))},lineSimplifyPoints=(i,m,g,x,_)=>{let b=_||[],y=i[m],T=i[g-1],w=0,P=1,z=m+1;for(;z<g-1;++z){let m=lineVec2DistanceToSegmentSq(i[z].position,y.position,T.position);m>w&&(w=m,P=z)}return Math.sqrt(w)>x?(lineSimplifyPoints(i,m,P+1,x,b),lineSimplifyPoints(i,P,g,x,b)):b.push(y,T),b},Ci={LINEAR:"linear",CATMULL_ROM:"catmullRom",BEZIER:"bezier"};Object.freeze(Ci);var Ri="#redgpu_include SYSTEM_UNIFORM;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { matrixList:MatrixList, pickingId:u32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexColor:vec4<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexColor:vec4<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_noneJitterProjectionCameraMatrix=systemUniforms.noneJitterProjectionCameraMatrix; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let input_position=inputData.position; let input_vertexColor=inputData.vertexColor; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); output.position=u_noneJitterProjectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexColor=input_vertexColor; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; return output;\n}\n";const Pi=parseWGSL(Ri),Ei=Pi.uniforms.vertexUniforms;class Line3D extends Mesh{baseColor;#Ch;#Rh=1;#Ph=.01;#_l=.01;#Eh=[];#Bh=[];#Ih;constructor(i,m=Ci.LINEAR,g="#fff"){super(i),this.primitiveState.topology=Ke.LINE_STRIP,this.baseColor=g,this.#Ch=m,this._geometry=new Geometry(i,new VertexBuffer(i,this.#Eh,new VertexInterleavedStruct({vertexPosition:VertexInterleaveType.float32x3,vertexColor:VertexInterleaveType.float32x4}))),this._material=new LineMaterial(i)}get originalPoints(){return this.#Bh}get type(){return this.#Ch}set type(i){this.#Ch=i,this.#Lh()}get interleaveData(){return this.#Eh}get tension(){return this.#Rh}set tension(i){validatePositiveNumberRange(i),this.#Rh=i,this.#Lh()}get tolerance(){return this.#Ph}set tolerance(i){validatePositiveNumberRange(i),this.#Ph=i,this.#Lh()}get distance(){return this.#_l}set distance(i){validatePositiveNumberRange(i),this.#_l=i,this.#Lh()}get numPoints(){return this.#Bh.length}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_3D",Pi,Ei,Ri)}addPoint(i=0,m=0,g=0,x=this.baseColor,_=1,b=0,y=0,T=0,w=0,P=0,z=0){this.#Bh.push(new LinePointWithInOut(i,m,g,b,y,T,w,P,z,x,_)),this.#Lh()}addPointAt(i,m=0,g=0,x=0,_=this.baseColor,b=1,y=0,T=0,w=0,P=0,z=0,H=0){this.#Bh.length<i&&(i=this.#Bh.length),null!=i?this.#Bh.splice(i,0,new LinePointWithInOut(m,g,x,y,T,w,P,z,H,_,b)):this.#Bh.push(new LinePointWithInOut(m,g,x,y,T,w,P,z,H,_,b)),this.#Lh()}removePointAt(i){validateUintRange(i),this.#Bh[i]?this.#Bh.splice(i,1):consoleAndThrowError("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값:"+i),this.#Lh()}removeAllPoint(){this.#Bh.length=0,this.#Lh()}#j(){if(this._geometry,this.#Bh.length){const{redGPUContext:i}=this;this._geometry=new Geometry(i,new VertexBuffer(i,this.#Eh,new VertexInterleavedStruct({vertexPosition:VertexInterleaveType.float32x3,vertexColor:VertexInterleaveType.float32x4})))}this.dirtyPipeline=!0}#Lh(){const i=this.#Bh,m=this.#Rh,g=this.#Ph,x=this.#_l;let _,b,y,T;switch(this.#Eh.length=0,this.#Ch){case Ci.CATMULL_ROM:case Ci.BEZIER:if(i.length>1)for(this.#Ih=(i=>{let m,g=[],x=0,_=0;const b=i.length;for(;x<b;x++){m=i[x];const{inLinePoint:b,linePoint:y,outLinePoint:T}=m;0===_?(g[_++]=y,g[_++]=T):(g[_++]=b,g[_++]=y,i[x+1]&&(g[_++]=T))}return g})(Ci.CATMULL_ROM===this.#Ch?((i,m=1)=>{const g=i.length,x=g-2;for(let _=0;_<g-1;_++){const g=_?i[_-1].linePoint.position:i[_].linePoint.position,b=i[_].linePoint.position,y=i[_+1].linePoint.position,T=_===x?y:i[_+2].linePoint.position;i[_].outLinePoint.position=[b[0]+(y[0]-g[0])/6*m,b[1]+(y[1]-g[1])/6*m,b[2]+(y[2]-g[2])/6*m],i[_+1].inLinePoint.position=[y[0]-(T[0]-b[0])/6*m,y[1]-(T[1]-b[1])/6*m,y[2]-(T[2]-b[2])/6*m]}return i})(i,m):i),_=((i,m)=>{let g=[],x=(i.length-1)/3;x=Math.floor(x);let _,b=0;for(;b<x;++b)_=3*b,getPointsOnBezierCurveWithSplitting(i,_,m,g);return g})(this.#Ih,g),_=lineSimplifyPoints(_,0,_.length,x),b=0,y=_.length;b<y;b++)T=_[b],this.#Eh.push(...T.position,...T.colorRGBA);else this.#Eh.push(0,0,0,1,1,1,1);break;default:for(b=0,y=i.length;b<y;b++){const{linePoint:m}=i[b],g=m.colorRGBA;this.interleaveData.push(...m.position,...g)}}this.#j()}}Object.freeze(Line3D);const Bi=parseWGSL(Ri),Ii=Bi.uniforms.vertexUniforms;var Li=Object.freeze({__proto__:null,ATextField:ATextField,TextFieldMaterial:TextFieldMaterial}),Di="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct MatrixList{ modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>,\n}\nstruct VertexUniforms { pickingId:u32, matrixList:MatrixList, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.matrixList.modelMatrix; let u_normalModelMatrix=vertexUniforms.matrixList.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Ui=parseWGSL(Di),Ai=Ui.uniforms.vertexUniforms,ki=mixInMesh2D(ATextField);class TextField2D extends ki{#jr=1;#Xr=1;#Dh=!0;constructor(i,m=!0){super(i,(i,m)=>{this.#jr=i,this.#Xr=m},!1),this._geometry=new Plane(i,1,1,1,1,1,!0),this.useSmoothing=m,this.primitiveState.cullMode=Cn.FRONT,dr(this)}get useSmoothing(){return this.#Dh}set useSmoothing(i){this.#Dh=i,this.useSmoothing?(this._material.diffuseTextureSampler.minFilter=ln.LINEAR,this._material.diffuseTextureSampler.magFilter=ln.LINEAR,this._material.diffuseTextureSampler.mipmapFilter=cn.LINEAR):(this._material.diffuseTextureSampler.minFilter=ln.NEAREST,this._material.diffuseTextureSampler.magFilter=ln.NEAREST,this._material.diffuseTextureSampler.mipmapFilter=null)}get width(){return this.#jr}get height(){return this.#Xr}get geometry(){return this._geometry}set geometry(i){console.error("TextField2D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_2D",Ui,Ai,Di)}}Object.freeze(TextField2D);const Oi=3.141592653589793,Gi=6.283185307179586,Fi=.225,Ni=1.27323954,Vi=.405284735,zi=1.5707963267948966,Hi=Math.PI/180;class InstancingMeshObject3D{modelMatrix=create$2();localMatrix=create$2();normalModelMatrix=create$2();inited=!1;#Xt=0;#Yt=0;#qt=0;#Zt=[0,0,0];#nn=1;#rn=1;#in=1;#an=[1,1,1];#sn=0;#on=0;#un=0;#ln=[0,0,0];#Uh=0;#Ah;#l;#dn=1;constructor(i,m,g){validateRedGPUContext(i),this.#l=i,this.#Ah=g,this.#Uh=m}get opacity(){return this.#dn}set opacity(i){validatePositiveNumberRange(i,0,1),this.#dn=i,this.#kh()}get x(){return this.#Xt}set x(i){this.#Xt=this.#Zt[0]=i,this.#kh()}get y(){return this.#qt}set y(i){this.#qt=this.#Zt[1]=i,this.#kh()}get z(){return this.#Yt}set z(i){this.#Yt=this.#Zt[2]=i,this.#kh()}get position(){return this.#Zt}set position(i){this.#Xt=this.#Zt[0]=i,this.#qt=this.#Zt[1]=i,this.#Yt=this.#Zt[2]=i,this.#kh()}get scaleX(){return this.#nn}set scaleX(i){this.#nn=this.#an[0]=i,this.#kh()}get scaleY(){return this.#rn}set scaleY(i){this.#rn=this.#an[1]=i,this.#kh()}get scaleZ(){return this.#in}set scaleZ(i){this.#in=this.#an[2]=i,this.#kh()}get scale(){return this.#Zt}set scale(i){this.#nn=this.#an[0]=i,this.#rn=this.#an[1]=i,this.#in=this.#an[2]=i,this.#kh()}get rotationX(){return this.#sn}set rotationX(i){this.#sn=this.#ln[0]=i,this.#kh()}get rotationY(){return this.#on}set rotationY(i){this.#on=this.#ln[1]=i,this.#kh()}get rotationZ(){return this.#un}set rotationZ(i){this.#un=this.#ln[2]=i,this.#kh()}get rotation(){return this.#ln}set rotation(i){this.#sn=this.#ln[0]=i,this.#on=this.#ln[1]=i,this.#un=this.#ln[2]=i,this.#kh()}setScale(i,m,g){m=m??i,g=g??i;const x=this.#an;this.#nn=x[0]=i,this.#rn=x[1]=m,this.#in=x[2]=g,this.#kh()}setPosition(i,m,g){m=m??i,g=g??i;const x=this.#Zt;this.#Xt=x[0]=i,this.#qt=x[1]=m,this.#Yt=x[2]=g,this.#kh()}setRotation(i,m,g){m=m??i,g=g??i;const x=this.#ln;this.#sn=x[0]=i,this.#on=x[1]=m,this.#un=x[2]=g,this.#kh()}#kh(){let i,m,g,x,_,b,y,T,w,P,z,H,$,W,q,ye,Ge,Ke,je,Xe,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,St,Tt,wt,Mt,Ct;this.inited=!0;{const $=this.localMatrix;let Ge;P=1,z=0,H=0,W=0,q=1,ye=0,Ke=0,je=0,Xe=1,$[12]=this.#Xt,$[13]=this.#qt,$[14]=this.#Yt,$[15]=1,y=this.#sn*Hi,T=this.#on*Hi,w=this.#un*Hi,Ge=y%Gi,Ge<-Oi?Ge+=Gi:Ge>Oi&&(Ge-=Gi),Ge=Ge<0?Ni*Ge+Vi*Ge*Ge:Ni*Ge-Vi*Ge*Ge,i=Ge<0?Fi*(Ge*-Ge-Ge)+Ge:Fi*(Ge*Ge-Ge)+Ge,Ge=(y+zi)%Gi,Ge<-Oi?Ge+=Gi:Ge>Oi&&(Ge-=Gi),Ge=Ge<0?Ni*Ge+Vi*Ge*Ge:Ni*Ge-Vi*Ge*Ge,x=Ge<0?Fi*(Ge*-Ge-Ge)+Ge:Fi*(Ge*Ge-Ge)+Ge,Ge=T%Gi,Ge<-Oi?Ge+=Gi:Ge>Oi&&(Ge-=Gi),Ge=Ge<0?Ni*Ge+Vi*Ge*Ge:Ni*Ge-Vi*Ge*Ge,m=Ge<0?Fi*(Ge*-Ge-Ge)+Ge:Fi*(Ge*Ge-Ge)+Ge,Ge=(T+zi)%Gi,Ge<-Oi?Ge+=Gi:Ge>Oi&&(Ge-=Gi),Ge=Ge<0?Ni*Ge+Vi*Ge*Ge:Ni*Ge-Vi*Ge*Ge,_=Ge<0?Fi*(Ge*-Ge-Ge)+Ge:Fi*(Ge*Ge-Ge)+Ge,Ge=w%Gi,Ge<-Oi?Ge+=Gi:Ge>Oi&&(Ge-=Gi),Ge=Ge<0?Ni*Ge+Vi*Ge*Ge:Ni*Ge-Vi*Ge*Ge,g=Ge<0?Fi*(Ge*-Ge-Ge)+Ge:Fi*(Ge*Ge-Ge)+Ge,Ge=(w+zi)%Gi,Ge<-Oi?Ge+=Gi:Ge>Oi&&(Ge-=Gi),Ge=Ge<0?Ni*Ge+Vi*Ge*Ge:Ni*Ge-Vi*Ge*Ge,b=Ge<0?Fi*(Ge*-Ge-Ge)+Ge:Fi*(Ge*Ge-Ge)+Ge,xt=_*b,vt=i*m*b-x*g,bt=x*m*b+i*g,yt=_*g,St=i*m*g+x*b,Tt=x*m*g-i*b,wt=-m,Mt=i*_,Ct=x*_,y=this.#nn,T=this.#rn,w=this.#in,$[0]=(P*xt+W*vt+Ke*bt)*y,$[1]=(z*xt+q*vt+je*bt)*y,$[2]=(H*xt+ye*vt+Xe*bt)*y,$[3]=$[3]*y,$[4]=(P*yt+W*St+Ke*Tt)*T,$[5]=(z*yt+q*St+je*Tt)*T,$[6]=(H*yt+ye*St+Xe*Tt)*T,$[7]=$[7]*T,$[8]=(P*wt+W*Mt+Ke*Ct)*w,$[9]=(z*wt+q*Mt+je*Ct)*w,$[10]=(H*wt+ye*Mt+Xe*Ct)*w,$[11]=$[11]*w}this.modelMatrix=this.localMatrix;{let i=this.normalModelMatrix,m=this.modelMatrix;P=m[0],z=m[1],H=m[2],$=m[3],W=m[4],q=m[5],ye=m[6],Ge=m[7],Ke=m[8],je=m[9],Xe=m[10],Ye=m[11],Je=m[12],Qe=m[13],et=m[14],at=m[15],Ze=P*q-z*W,ht=P*ye-H*W,ft=P*Ge-$*W,gt=z*ye-H*q,xt=z*Ge-$*q,vt=H*Ge-$*ye,bt=Ke*Qe-je*Je,yt=Ke*et-Xe*Je,St=Ke*at-Ye*Je,wt=je*at-Ye*Qe,Tt=Xe*at-Ye*et,Ct=Ze*Tt-ht*wt+ft*Tt+gt*St-xt*yt+vt*bt,Ct=1/Ct,i[0]=(q*Tt-ye*wt+Ge*Tt)*Ct,i[4]=(-z*Tt+H*wt-$*Tt)*Ct,i[8]=(Qe*vt-et*xt+at*gt)*Ct,i[12]=(-je*vt+Xe*xt-Ye*gt)*Ct,i[1]=(-W*Tt+ye*St-Ge*yt)*Ct,i[5]=(P*Tt-H*St+$*yt)*Ct,i[9]=(-Je*vt+et*ft-at*ht)*Ct,i[13]=(Ke*vt-Xe*ft+Ye*ht)*Ct,i[2]=(W*wt-q*St+Ge*bt)*Ct,i[6]=(-P*wt+z*St-$*bt)*Ct,i[10]=(Je*xt-Qe*ft+at*Ze)*Ct,i[14]=(-Ke*xt+je*ft-Ye*Ze)*Ct,i[3]=(-W*Tt+q*yt-ye*bt)*Ct,i[7]=(P*Tt-z*yt+H*bt)*Ct,i[11]=(-Je*gt+Qe*ht-et*Ze)*Ct,i[15]=(Ke*gt-je*ht+Xe*Ze)*Ct}if(this.#Ah.gpuRenderInfo){const{vertexUniformBuffer:i,vertexUniformInfo:m}=this.#Ah.gpuRenderInfo,g=m.members.instanceModelMatrixs,x=m.members.instanceNormalModelMatrix,_=m.members.instanceOpacity;this.#l.gpuDevice.queue.writeBuffer(i.gpuBuffer,g.uniformOffset+g.stride*this.#Uh,new g.View(this.modelMatrix)),this.#l.gpuDevice.queue.writeBuffer(i.gpuBuffer,x.uniformOffset+x.stride*this.#Uh,new x.View(this.normalModelMatrix)),this.#l.gpuDevice.queue.writeBuffer(i.gpuBuffer,_.uniformOffset+_.stride*this.#Uh,new _.View([this.opacity]))}}}var $i=Object.freeze({__proto__:null,instancingMeshObject3D:InstancingMeshObject3D});class ResourceStateStorageBuffer{static dirtyList=[];buffer;uuid;#X=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateStorageBuffer.dirtyList.push(this)}}class StorageBuffer extends AUniformBaseBuffer{constructor(i,m,g="",x=""){super(i,"managedStorageBufferState",GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC,m,g);const{table:_}=this.targetResourceManagedState,b=_.get(x);if(b)return b.buffer;x&&(this.name=x,this[on]=x),this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateStorageBuffer(this))}}Object.freeze(StorageBuffer);var Wi="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDisplacements;\nstruct InstanceUniforms { instanceGroupModelMatrix:mat4x4<f32>, instanceModelMatrixs:array<mat4x4<f32>,100000>, instanceNormalModelMatrix:array<mat4x4<f32>,100000>, instanceOpacity:array<f32,100000>, useDisplacementTexture:u32, displacementScale:f32,\n};\n@group(1) @binding(0) var<storage,read> instanceUniforms:InstanceUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @builtin(instance_index) instanceIdx:u32, @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) instanceOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@vertex\nfn main( inputData:InputData ) -> OutputData { var output:OutputData; let input_instanceIdx:u32=inputData.instanceIdx; let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx]; let u_normalModelMatrix=instanceUniforms.instanceNormalModelMatrix[input_instanceIdx]; let u_instanceGroupModelMatrix=instanceUniforms.instanceGroupModelMatrix; let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u; let u_displacementScale=instanceUniforms.displacementScale; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0); let worldPosition=position.xyz; let margin:f32=0.5; var clipPosition:vec4<f32>=u_projectionCameraMatrix * vec4<f32>(worldPosition,1.0); let ndcPosition:vec3<f32>=clipPosition.xyz/clipPosition.w;\noutput.position=clipPosition; var normalPosition:vec3<f32>=(u_instanceGroupModelMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0)).xyz;; if (u_useDisplacementTexture) { let distance=distance(position.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } output.position=u_projectionCameraMatrix * u_instanceGroupModelMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition; output.uv=input_uv; output.instanceOpacity=instanceUniforms.instanceOpacity[input_instanceIdx]; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData { var output:OutputShadowData; let input_instanceIdx:u32=inputData.instanceIdx; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx]; let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u; let u_displacementScale=instanceUniforms.displacementScale; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); if (u_useDisplacementTexture) { let distance=distance(position.xyz,u_directionalLightProjectionViewMatrix[3].xyz); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n";const Ki="VERTEX_BIND_GROUP_DESCRIPTOR_INSTANCING";class InstancingMesh extends Mesh{#l;#Oh=1;#Gh=[];constructor(i,m,g,x){super(i,g,x),this.#l=i,this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null,null,null),this.instanceCount=m,this.#fc(i)}get instanceCount(){return this.#Oh}set instanceCount(i){validateUintRange(i),this.gpuRenderInfo.vertexUniformInfo=parseWGSL(Wi).storage.instanceUniforms;const m=new ArrayBuffer(this.gpuRenderInfo.vertexUniformInfo.arrayBufferByteLength),g=new StorageBuffer(this.#l,m,`InstanceBuffer_${this.uuid}`),x=this.gpuRenderInfo.vertexUniformBuffer;x?.gpuBuffer&&copyGPUBuffer(this.#l.gpuDevice,x.gpuBuffer,g.gpuBuffer),x?.destroy(),this.gpuRenderInfo.vertexUniformBuffer=g;let _=i;for(;_--;)this.#Gh[_]||(this.#Gh[_]=new InstancingMeshObject3D(this.#l,_,this));this.#Oh=i,this.#fc(this.#l)}get instanceChildren(){return this.#Gh}render(i,m=!1){const{view:g,currentRenderPassEncoder:x}=i,{scene:_}=g,{shadowManager:b}=_,{directionalShadowManager:y}=b,{castingList:T}=y,w=this.parent;let P=this.dirtyTransform;P&&(identity(this.localMatrix),translate(this.localMatrix,this.localMatrix,[this.x,this.y,this.z]),rotateX(this.localMatrix,this.localMatrix,this.rotationX),rotateY(this.localMatrix,this.localMatrix,this.rotationY),rotateZ(this.localMatrix,this.localMatrix,this.rotationZ),scale(this.localMatrix,this.localMatrix,[this.scaleX,this.scaleY,this.scaleZ]),w?.modelMatrix?multiply(this.modelMatrix,this.localMatrix,w.modelMatrix):this.modelMatrix=clone(this.localMatrix)),this.geometry?i.num3DObjects++:i.num3DGroups++;const z=this.#l;if(this.geometry){const{antialiasingManager:g,gpuDevice:_}=z;g.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.#fc(z);const b=this.dirtyPipeline||this.material.dirtyPipeline,{displacementTexture:y,displacementScale:T}=this.material||{};b&&(this.dirtyTransform=!0,this.material.dirtyPipeline&&this.material._updateFragmentState(),this.#Fh(),this.material.dirtyPipeline=!1,this.dirtyPipeline=!1,i.numDirtyPipelines++);const{gpuRenderInfo:w}=this,{vertexUniformBuffer:P,vertexUniformBindGroup:H,vertexUniformInfo:$,pipeline:W,shadowPipeline:q}=w;void 0!==$.members.displacementScale&&_.queue.writeBuffer(P.gpuBuffer,$.members.displacementScale.uniformOffset,new $.members.displacementScale.View([T])),void 0!==$.members.useDisplacementTexture&&_.queue.writeBuffer(P.gpuBuffer,$.members.useDisplacementTexture.uniformOffset,new $.members.useDisplacementTexture.View([y?1:0])),this.dirtyTransform&&_.queue.writeBuffer(P.gpuBuffer,$.members.instanceGroupModelMatrix.uniformOffset,new $.members.instanceGroupModelMatrix.View(this.modelMatrix)),this.dirtyTransform=!1,x.setPipeline(m?q:W);const{gpuBuffer:ye}=this.geometry.vertexBuffer,{fragmentUniformBindGroup:Ge}=this.material.gpuRenderInfo;if(i.prevVertexGpuBuffer!==ye&&(x.setVertexBuffer(0,ye),i.prevVertexGpuBuffer=ye),x.setBindGroup(1,H),x.setBindGroup(2,Ge),i.numDrawCalls++,i.numInstances++,this.geometry.indexBuffer){const{indexBuffer:m}=this.geometry,{indexCount:g,triangleCount:_,gpuBuffer:b,format:y}=m;x.setIndexBuffer(b,y),x.drawIndexed(g,this.#Oh,0,0,0),i.numTriangles+=_*this.#Oh,i.numPoints+=g*this.#Oh}else{const{vertexBuffer:m}=this.geometry,{vertexCount:g,triangleCount:_}=m;x.draw(g,this.#Oh,0,0),i.numTriangles+=_,i.numPoints+=g}}this.castShadow&&(T[T.length]=this);const{children:H}=this;let $=H.length;for(;$--;)H[$].dirtyTransform=P,H[$].render(i);this.dirtyTransform=!1}#fc(i){this.dirtyPipeline=!0;const{resourceManager:m}=this.#l,g=m.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),{basicSampler:x,emptyBitmapTextureView:_,emptyCubeTextureView:b}=m,{gpuSampler:y}=x,{vertexUniformBuffer:T}=this.gpuRenderInfo,{material:w}=this,P={layout:g,label:Ki,entries:[{binding:0,resource:{buffer:T.gpuBuffer,offset:0,size:T.size}},{binding:1,resource:w?.displacementTextureSampler?.gpuSampler||y},{binding:2,resource:m.getGPUResourceBitmapTextureView(w?.displacementTexture)||_}]},z=i.gpuDevice.createBindGroup(P);this.#Fh(),this.gpuRenderInfo.vertexBindGroupLayout=g,this.gpuRenderInfo.vertexUniformBindGroup=z}#Fh(){const{resourceManager:i}=this.#l,m={code:Wi},g=i.createGPUShaderModule("VERTEX_MODULE_INSTANCING",m),{vertexUniformBuffer:x}=this.gpuRenderInfo,{material:_}=this,{basicSampler:b,emptyBitmapTextureView:y,emptyCubeTextureView:T}=i,{gpuSampler:w}=b,P=i.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),z={layout:P,label:Ki,entries:[{binding:0,resource:{buffer:x.gpuBuffer,offset:0,size:x.size}},{binding:1,resource:_?.displacementTextureSampler?.gpuSampler||w},{binding:2,resource:i.getGPUResourceBitmapTextureView(_?.displacementTexture)||y}]};this.gpuRenderInfo.vertexUniformBindGroup=this.redGPUContext.gpuDevice.createBindGroup(z),this.gpuRenderInfo.vertexShaderModule=g,this.gpuRenderInfo.pipeline=createBasePipeline(this,g,P),this.gpuRenderInfo.shadowPipeline=createBasePipeline(this,g,P,Kn)}}Object.defineProperty(InstancingMesh.prototype,"meshType",{value:Tn.INSTANCED_MESH,writable:!1});var ji=Object.freeze({__proto__:null,CoreGroup:oi,CoreInstancingMesh:$i,CoreMesh:ii,CoreSkyBox:ni,CoreSpriteSheet:xi,CoreTextField:Li,CoreView:ai,Group2D:Group2D,Group3D:Group3D,InstancingMesh:InstancingMesh,LINE_TYPE:Ci,Line2D:class extends Line3D{constructor(i,m=Ci.LINEAR,g="#fff"){super(i,m,g),this._material=new LineMaterial(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_2D",Bi,Ii,Ri)}addPoint(i=0,m=0,g=this.baseColor,x=1,_=0,b=0,y=0,T=0){super.addPoint(i,m,0,g,x,_,b,0,y,T,0)}addPointAt(i,m=0,g=0,x=this.baseColor,_=1,b=0,y=0,T=0,w=0){super.addPointAt(i,m,g,0,x,_,b,y,0,T,w,0)}},Line3D:Line3D,Mesh:Mesh,PARTICLE_EASE:ui,ParticleEmitter:ParticleEmitter,Scene:Scene,SkyBox:SkyBox,Sprite2D:Sprite2D,Sprite3D:Sprite3D,SpriteSheet2D:SpriteSheet2D,SpriteSheet3D:SpriteSheet3D,SpriteSheetInfo:SpriteSheetInfo,TextField2D:TextField2D,TextField3D:TextField3D,View2D:View2D,View3D:View3D}),Xi=Object.freeze({__proto__:null,ABaseLight:ABaseLight}),qi=Object.freeze({__proto__:null,AmbientLight:AmbientLight,Core:Xi,DirectionalLight:DirectionalLight,LightManager:LightManager,PointLight:PointLight,SpotLight:SpotLight}),Yi=Object.freeze({__proto__:null,GeometryGPURenderInfo:GeometryGPURenderInfo,Primitive:Primitive,createPrimitiveGeometry:createPrimitiveGeometry});function calculatePositionOnCurve(i,m,g,x,_){const b=Math.cos(i),y=Math.sin(i),T=g/m*i,w=Math.cos(T);_[0]=x*(2+w)*.5*b,_[1]=x*(2+w)*y*.5,_[2]=x*Math.sin(T)*.5}var Zi=Object.freeze({__proto__:null,Box:Box,Circle:class extends Primitive{#Fi=function(){return function(i,m,g,x,_,b){const y=[],T=[];y.push(0,0,0,0,0,1,.5,.5);for(let i=0;i<=x;i++){const m=_+i/x*b,T=Math.cos(m),w=Math.sin(m),P=g*T,z=g*w,H=0,$=(T+1)/2,W=(w+1)/2;y.push(P,z,H,0,0,1,$,W)}for(let i=1;i<=x;i++)T.push(0,i,i+1);return createPrimitiveGeometry(m,y,T,i)}}();constructor(i,m=1,g=32,x=0,_=2*Math.PI){if(super(i),g<3)throw new Error("segments must be 3 or greater");if(m<=0)throw new Error("radius must be greater than 0");if(_<=0)throw new Error("thetaLength must be greater than 0");const b=`PRIMITIVE_CIRCLE_R${m}_S${g}_TS${x}_TL${_}`,y=i.resourceManager.cachedBufferState;let T=y[b];T||(T=y[b]=this.#Fi(b,i,m,g,x,_)),this._setData(T)}},Core:Yi,Cylinder:Cylinder,Ground:class extends Primitive{#Fi=function(){const i=[],m=[];return function(g,x,_,b,y,T,w,P){const z=_/2,H=b/2,$=Math.floor(y)||1,W=Math.floor(T)||1,q=$+1,ye=W+1,Ge=_/$,Ke=b/W;i.length=0,m.length=0;for(let g=0;g<ye;g++){const x=g*Ke-H,_=P?(1-g/W)*w:g/W*w;for(let b=0;b<q;b++){const y=b*Ge-z,T=b/$*w;if(i.push(y,0,x,0,1,0,T,_),g<W&&b<$){const i=b+q*g,x=b+q*(g+1),_=b+1+q*(g+1),y=b+1+q*g;m.push(i,x,y),m.push(x,_,y)}}}return createPrimitiveGeometry(x,i,m,g)}}();constructor(i,m=1,g=1,x=1,_=1,b=1,y=!1){super(i);const T=`PRIMITIVE_GROUND_W${m}_H${g}_WS${x}_HS${_}_UV${b}_FY${y}`,w=i.resourceManager.cachedBufferState;let P=w[T];P||(P=w[T]=this.#Fi(T,i,m,g,x,_,b,y)),this._setData(P)}},Plane:Plane,Sphere:Sphere,Torus:class extends Primitive{#Fi=function(){return function(i,m,g,x,_,b,y,T){y=y||0;const w=(T=T||2*Math.PI)-y,P=_+1,z=b+1,H=[],$=[];for(let i=0;i<z;++i){const m=i/b,T=m*Math.PI*2,z=Math.sin(T),$=g+z*x,W=Math.cos(T),q=W*x;for(let i=0;i<P;++i){const g=i/_,x=y+g*w,b=Math.sin(x),T=Math.cos(x),P=b*$,ye=T*$,Ge=b*z,Ke=T*z;H.push(P,q,ye,Ge,W,Ke,g,1-m)}}for(let i=0;i<b;++i)for(let m=0;m<_;++m){const g=1+m,x=1+i;$.push(P*i+m,P*x+m,P*i+g),$.push(P*x+m,P*x+g,P*i+g)}return createPrimitiveGeometry(m,H,$,i)}}();constructor(i,m=1,g=.5,x=16,_=16,b=0,y=2*Math.PI){if(super(i),x<3)throw new Error("radialSubdivisions must be 3 or greater");if(_<3)throw new Error("verticalSubdivisions must be 3 or greater");const T=`PRIMITIVE_TORUS_R${m}_T${g}_RSD${x}_BSD${_}_SA${b}_EA${y}`,w=i.resourceManager.cachedBufferState;let P=w[T];P||(P=w[T]=this.#Fi(T,i,m,g,x,_,b,y)),this._setData(P)}},TorusKnot:class extends Primitive{#Fi=function(){return function(i,m,g,x,_,b,y,T){_=Math.floor(_),b=Math.floor(b);const w=[],P=[],z=[],H=[],$=[0,0,0],W=[0,0,0],q=[0,0,0],ye=[0,0,0],Ge=[0,0,0];for(let i=0;i<=_;++i){const m=i/_*y*Math.PI*2;calculatePositionOnCurve(m,y,T,g,$),calculatePositionOnCurve(m+.01,y,T,g,W),ye[0]=W[0]-$[0],ye[1]=W[1]-$[1],ye[2]=W[2]-$[2],Ge[0]=W[0]+$[0],Ge[1]=W[1]+$[1],Ge[2]=W[2]+$[2];{const i=ye[0],m=ye[1],g=ye[2],x=Ge[0],_=Ge[1],b=Ge[2];q[0]=m*b-g*_,q[1]=g*x-i*b,q[2]=i*_-m*x}{const i=q[0],m=q[1],g=q[2],x=ye[0],_=ye[1],b=ye[2];Ge[0]=m*b-g*_,Ge[1]=g*x-i*b,Ge[2]=i*_-m*x}{let i=q[0],m=q[1],g=q[2],x=i*i+m*m+g*g;x>0&&(x=1/Math.sqrt(x||1)),q[0]=q[0]*x,q[1]=q[1]*x,q[2]=q[2]*x}{let i=Ge[0],m=Ge[1],g=Ge[2],x=i*i+m*m+g*g;x>0&&(x=1/Math.sqrt(x)),Ge[0]=Ge[0]*x,Ge[1]=Ge[1]*x,Ge[2]=Ge[2]*x}for(let m=0;m<=b;++m){const g=m/b*Math.PI*2,y=-x*Math.cos(g),T=x*Math.sin(g);z[0]=$[0]+(y*Ge[0]+T*q[0]),z[1]=$[1]+(y*Ge[1]+T*q[1]),z[2]=$[2]+(y*Ge[2]+T*q[2]),w.push(z[0],z[1],z[2]);{H[0]=z[0]-$[0],H[1]=z[1]-$[1],H[2]=z[2]-$[2];let i=H[0],m=H[1],g=H[2],x=i*i+m*m+g*g;x>0&&(x=1/Math.sqrt(x)),H[0]=H[0]*x,H[1]=H[1]*x,H[2]=H[2]*x}w.push(H[0],H[1],H[2],i/_,m/b)}}for(let i=1;i<=_;i++)for(let m=1;m<=b;m++){const g=(b+1)*(i-1)+(m-1),x=(b+1)*i+(m-1),_=(b+1)*i+m,y=(b+1)*(i-1)+m;P.push(g,x,y),P.push(x,_,y)}return createPrimitiveGeometry(m,w,P,i)}}();constructor(i,m=1,g=.4,x=64,_=8,b=2,y=3){super(i);const T=`PRIMITIVE_TORUS_NUT_R${m}_T${g}_TS${x}_RS${_}_P${b}_Q${y}`,w=i.resourceManager.cachedBufferState;let P=w[T];P||(P=w[T]=this.#Fi(T,i,m,g,x,_,b,y)),this._setData(P)}}});const Ji=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\n#redgpu_include FragmentOutput;\nstruct Uniforms { color:vec3<f32>, emissiveColor:vec3<f32>, emissiveStrength:f32, specularColor:vec3<f32>, specularStrength:f32, shininess:f32, aoStrength:f32, normalScale:f32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32, useSSR:u32, metallic:f32, roughness:f32,\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) motionVector:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\n@group(2) @binding(3) var alphaTextureSampler:sampler;\n@group(2) @binding(4) var alphaTexture:texture_2d<f32>;\n@group(2) @binding(5) var specularTextureSampler:sampler;\n@group(2) @binding(6) var specularTexture:texture_2d<f32>;\n@group(2) @binding(7) var emissiveTextureSampler:sampler;\n@group(2) @binding(8) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(9) var aoTextureSampler:sampler;\n@group(2) @binding(10) var aoTexture:texture_2d<f32>;\n@group(2) @binding(11) var normalTextureSampler:sampler;\n@group(2) @binding(12) var normalTexture:texture_2d<f32>;\n@fragment\nfn main(inputData:InputData) -> FragmentOutput { var output:FragmentOutput; let u_ambientLight=systemUniforms.ambientLight; let u_ambientLightColor=u_ambientLight.color; let u_ambientLightIntensity=u_ambientLight.intensity; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize; let u_bias=systemUniforms.bias; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_color=uniforms.color; let u_aoStrength=uniforms.aoStrength; let u_emissiveColor=uniforms.emissiveColor; let u_emissiveStrength=uniforms.emissiveStrength; let u_normalScale=uniforms.normalScale; let u_specularColor=uniforms.specularColor; let u_specularStrength=uniforms.specularStrength; let u_shininess=uniforms.shininess; let u_opacity=uniforms.opacity; let E=normalize(u_cameraPosition - inputData.vertexPosition); let receiveShadowYn=inputData.receiveShadow !=.0; var N=normalize(inputData.vertexNormal); #redgpu_if normalTexture let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,inputData.uv).rgb; N=perturb_normal( N,inputData.vertexPosition,inputData.uv,normalSamplerColor,u_normalScale ); #redgpu_endIf var finalColor:vec4<f32>; var resultAlpha:f32=u_opacity * inputData.combinedOpacity; var diffuseColor:vec3<f32>=u_color; #redgpu_if diffuseTexture let diffuseSampleColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); diffuseColor=diffuseSampleColor.rgb; resultAlpha=resultAlpha * diffuseSampleColor.a; #redgpu_endIf var specularSamplerValue:f32=1; #redgpu_if specularTexture specularSamplerValue=textureSample(specularTexture,specularTextureSampler,inputData.uv).r; #redgpu_endIf var mixColor:vec3<f32>; let ambientContribution=u_ambientLightColor * u_ambientLightIntensity; let ambientDiffuse=diffuseColor * ambientContribution; mixColor +=ambientDiffuse; var visibility:f32=1.0; visibility=calcDirectionalShadowVisibility( directionalShadowMap, directionalShadowMapSampler, u_shadowDepthTextureSize, u_bias, inputData.shadowPos, ); if(!receiveShadowYn){ visibility=1.0; } for (var i=0u;i < u_directionalLightCount;i=i + 1) { let u_directionalLightDirection=u_directionalLights[i].direction; let u_directionalLightColor=u_directionalLights[i].color; let u_directionalLightIntensity=u_directionalLights[i].intensity; let L=normalize(u_directionalLightDirection); let R=reflect(L,N); let lambertTerm=max(dot(N,-L),0.0); let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue; let lightContribution=u_directionalLightColor * u_directionalLightIntensity * visibility; let ld=diffuseColor * lightContribution * lambertTerm; let ls=u_specularColor * u_specularStrength * lightContribution * specular; mixColor +=ld + ls; } let clusterIndex=getClusterLightClusterIndex(inputData.position); let lightOffset=clusterLightGroup.lights[clusterIndex].offset; let lightCount:u32=clusterLightGroup.lights[clusterIndex].count; for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) { let i=clusterLightGroup.indices[lightOffset + lightIndex]; let u_clusterLightPosition=clusterLightList.lights[i].position; let u_clusterLightColor=clusterLightList.lights[i].color; let u_clusterLightIntensity=clusterLightList.lights[i].intensity; let u_clusterLightRadius=clusterLightList.lights[i].radius; let u_isSpotLight=clusterLightList.lights[i].isSpotLight; let lightDir=u_clusterLightPosition - inputData.vertexPosition; let lightDistance=length(lightDir); if (lightDistance > u_clusterLightRadius) { continue; } let L=normalize(lightDir); let dist2=max(dot(lightDir,lightDir),0.0001); let d=sqrt(dist2); let rangePart=pow(clamp(1.0 - d/u_clusterLightRadius,0.0,1.0),2.0); let invSquare=(u_clusterLightRadius * u_clusterLightRadius)/dist2; let attenuation=rangePart * invSquare; var finalAttenuation=attenuation; if (u_isSpotLight > 0.0) { let u_clusterLightDirection=normalize(vec3<f32>( clusterLightList.lights[i].directionX, clusterLightList.lights[i].directionY, clusterLightList.lights[i].directionZ )); let u_clusterLightInnerAngle=clusterLightList.lights[i].innerCutoff; let u_clusterLightOuterCutoff=clusterLightList.lights[i].outerCutoff; let lightToVertex=normalize(-lightDir); let cosTheta=dot(lightToVertex,u_clusterLightDirection); let cosOuter=cos(radians(u_clusterLightOuterCutoff)); let cosInner=cos(radians(u_clusterLightInnerAngle)); if (cosTheta < cosOuter) { continue; } let epsilon=cosInner - cosOuter; let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0); finalAttenuation *=spotIntensity; } let R=reflect(-L,N); let diffuse=diffuseColor * max(dot(N,L),0.0); let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue; let diffuseAttenuation=finalAttenuation; let specularAttenuation=finalAttenuation * finalAttenuation; let ld=u_clusterLightColor * diffuse * diffuseAttenuation * u_clusterLightIntensity; let ls=u_specularColor * u_specularStrength * specular * specularAttenuation * u_clusterLightIntensity; mixColor +=ld + ls; } #redgpu_if alphaTexture let alphaMapValue:f32=textureSample(alphaTexture,alphaTextureSampler,inputData.uv).r; resultAlpha=alphaMapValue * resultAlpha; if(resultAlpha==0){ discard;} #redgpu_endIf var emissiveColor=u_emissiveColor * u_emissiveStrength; #redgpu_if emissiveTexture emissiveColor=textureSample(emissiveTexture,emissiveTextureSampler,inputData.uv).rgb * u_emissiveStrength; #redgpu_endIf #redgpu_if aoTexture mixColor=mixColor * textureSample(aoTexture,aoTextureSampler,inputData.uv).rgb * u_aoStrength; #redgpu_endIf finalColor=vec4<f32>(mixColor + emissiveColor,resultAlpha); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (systemUniforms.isView3D==1 && finalColor.a==0.0) { discard; } output.color=finalColor; #redgpu_if useSSR { let metallic=uniforms.metallic; let roughness=uniforms.roughness; let smoothness=1.0 - roughness; let smoothnessCurved=smoothness * smoothness * (3.0 - 2.0 * smoothness); let metallicWeight=metallic * metallic; let baseReflection=0.04 + 0.96 * metallicWeight; let baseReflectionStrength=smoothnessCurved * baseReflection; output.gBufferNormal=vec4<f32>(N * 0.5 + 0.5,baseReflectionStrength); } #redgpu_endIf output.gBufferMotionVector=vec4<f32>( inputData.motionVector,1.0 ); return output;\n}\n");class PhongMaterial extends ABitmapBaseMaterial{#Nh;#Pn=1;constructor(i,m="#fff",g){super(i,"PHONG_MATERIAL",Ji,2),g&&(this.name=g),this.initGPURenderInfos(),this.color.setColorByHEX(m),this.emissiveColor.setColorByHEX(this.emissiveColor.hex),this.specularColor.setColorByHEX(this.specularColor.hex)}get displacementScale(){return this.#Pn}set displacementScale(i){this.#Pn=i}get displacementTexture(){return this.#Nh}set displacementTexture(i){const m=this.#Nh;this.#Nh=i,this.updateTexture(m,i),this.dirtyPipeline=!0}}gt.defineByPreset(PhongMaterial,[gt.PRESET_COLOR_RGB.COLOR,gt.PRESET_TEXTURE.ALPHA_TEXTURE,gt.PRESET_SAMPLER.ALPHA_TEXTURE_SAMPLER,gt.PRESET_TEXTURE.AO_TEXTURE,gt.PRESET_SAMPLER.AO_TEXTURE_SAMPLER,gt.PRESET_POSITIVE_NUMBER.AO_STRENGTH,gt.PRESET_TEXTURE.DIFFUSE_TEXTURE,gt.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER,gt.PRESET_TEXTURE.EMISSIVE_TEXTURE,gt.PRESET_SAMPLER.EMISSIVE_TEXTURE_SAMPLER,gt.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,[gt.PRESET_COLOR_RGB.EMISSIVE_COLOR,"#000000"],gt.PRESET_TEXTURE.NORMAL_TEXTURE,gt.PRESET_SAMPLER.NORMAL_TEXTURE_SAMPLER,gt.PRESET_POSITIVE_NUMBER.NORMAL_SCALE,gt.PRESET_TEXTURE.SPECULAR_TEXTURE,gt.PRESET_SAMPLER.SPECULAR_TEXTURE_SAMPLER,gt.PRESET_POSITIVE_NUMBER.SPECULAR_STRENGTH,[gt.PRESET_COLOR_RGB.SPECULAR_COLOR,"#ffffff"],[gt.PRESET_POSITIVE_NUMBER.SHININESS,32]]),gt.defineBoolean(PhongMaterial,[["useSSR",!1]]),gt.definePositiveNumber(PhongMaterial,[["metallic",0,0,1],["roughness",0,0,1]]),Object.freeze(PhongMaterial);var Qi=Object.freeze({__proto__:null,BLEND_MODE:ri,BitmapMaterial:BitmapMaterial,COMPOSITE_MODE:{ADDITIVE:"additive",SOURCE_OVER:"source-over",SOURCE_IN:"source-in",SOURCE_OUT:"source-out",SOURCE_ATOP:"source-atop",DESTINATION_OVER:"destination-over",DESTINATION_IN:"destination-in",DESTINATION_OUT:"destination-out",DESTINATION_ATOP:"destination-atop"},ColorMaterial:ColorMaterial,Core:Pr,PBRMaterial:PBRMaterial,PhongMaterial:PhongMaterial,TINT_BLEND_MODE:bn}),ea=Object.freeze({__proto__:null,ManagementResourceBase:ManagementResourceBase,ResourceBase:ResourceBase,ResourceManager:ResourceManager,ResourceStatusInfo:ResourceStatusInfo});var ta=Object.freeze({__proto__:null,ABaseBuffer:ABaseBuffer,AUniformBaseBuffer:AUniformBaseBuffer,getUniformOffsetByRoundUp:(i,m)=>((i+m-1)/m|0)*m}),na=Object.freeze({__proto__:null,VertexInterleavedStructElement:VertexInterleavedStructElement});class IBLCubeTexture extends ManagementResourceBase{#ge;#Ln;#Dn=!0;#An=0;#vt;constructor(i,m,g){super(i,"managedCubeTextureState"),this.cacheKey=m;const{table:x}=this.targetResourceManagedState;if(m){let i=x.get(m);if(i){return i.texture}g&&this.#$n(g),this.#Vn()}}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#Ln}}get format(){return this.#vt}get videoMemorySize(){return this.#An}get gpuTexture(){return this.#ge}set gpuTexture(i){this.#$n(i)}get mipLevelCount(){return this.#Ln}get useMipmap(){return this.#Dn}destroy(){const i=this.#ge;this.#$n(null),this.__fireListenerList(!0),this.#Wn(),this.cacheKey=null,i&&i.destroy()}#$n(i){this.targetResourceManagedState.videoMemory-=this.#An,this.#ge=i,i&&(this.#Ln=i.mipLevelCount,this.#Dn=i.mipLevelCount>1,this.#vt=i.format,this.#An=calculateTextureByteSize(i)),this.targetResourceManagedState.videoMemory+=this.#An,this.__fireListenerList()}#Vn(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateCubeTexture(this))}#Wn(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}}Object.freeze(IBLCubeTexture);class IBL{#l;#Vh;#zh;#Hh;#$h;#w=createUUID();#vt="rgba8unorm";#Wh;#Kh;#jh;constructor(i,m,g=1024,x=512){const _=`${m}?key=${g}_${x}`;this.#jh=x,this.#Kh=g,this.#l=i,this.#zh=new IBLCubeTexture(i,`IBL_ENV_${_}`),this.#$h=new IBLCubeTexture(i,`IBL_${_}`),this.#Hh=new IBLCubeTexture(i,`IBL_IRRADIANCE_${_}`),this.#Wh="string"==typeof m?new HDRTexture(i,_,i=>{this.#Vh=i.gpuTexture,this.#Ci()},void 0,g,!0):new CubeTexture(i,m,!0,i=>{this.#Vh=i.gpuTexture,this.#Ci()})}get exposure(){if(this.#Wh instanceof HDRTexture)return this.#Wh.exposure}set exposure(i){validatePositiveNumberRange(i),this.#Wh instanceof HDRTexture&&(this.#Wh.exposure=i)}get envCubeSize(){return this.#Kh}get iblCubeSize(){return this.#jh}get irradianceTexture(){return this.#Hh}get environmentTexture(){return this.#zh}get iblTexture(){return this.#$h}async#Ci(){dr("sourceCubeTexture",this.#Vh);const{downSampleCubeMapGenerator:i}=this.#l.resourceManager;if(this.#Vh){if(!this.#$h.gpuTexture){const m=await i.downsampleCubemap(this.#Vh,this.#jh);this.#$h.gpuTexture=m}if(this.#zh.gpuTexture||(this.#zh.gpuTexture=this.#Vh),!this.#Hh.gpuTexture){const i=await this.#Xh(this.#Vh);this.#Hh.gpuTexture=i}}}async#Xh(i){const{gpuDevice:m,resourceManager:g}=this.#l,x=g.createManagedTexture({size:[32,32,6],format:this.#vt,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:1,label:`IBL_${this.#w}_irradianceTexture`}),_=m.createShaderModule({code:"struct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0), vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0) ); var texCoord=array<vec2<f32>,6>( vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0), vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0) ); var output:VertexOutput; output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); output.texCoord=texCoord[vertexIndex]; return output;\n}\n@group(0) @binding(0) var environmentTexture:texture_cube<f32>;\n@group(0) @binding(1) var environmentSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\nconst PI=3.14159265359;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> { let ndc=vec2<f32>( input.texCoord.x * 2.0 - 1.0, 1.0 - input.texCoord.y * 2.0  ); let localDirection=vec3<f32>(ndc.x,ndc.y,1.0); let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz); let normal=worldDirection; var irradiance=vec3<f32>(0.0); var up=vec3<f32>(0.0,1.0,0.0); let tangent=normalize(cross(up,normal)); let bitangent=normalize(cross(normal,tangent)); let sampleCount=32u; let invSampleCount=1.0/f32(sampleCount); for (var i=0u;i < sampleCount;i++) { for (var j=0u;j < sampleCount;j++) { let u1=(f32(i) + 0.5) * invSampleCount; let u2=(f32(j) + 0.5) * invSampleCount; let cosTheta=sqrt(u1); let sinTheta=sqrt(1.0 - u1); let phi=2.0 * PI * u2; let cosPhi=cos(phi); let sinPhi=sin(phi); let sampleVec=vec3<f32>( sinTheta * cosPhi, sinTheta * sinPhi, cosTheta ); let worldSample=sampleVec.x * tangent + sampleVec.y * bitangent + sampleVec.z * normal; let sampleColor=textureSample(environmentTexture,environmentSampler,worldSample); irradiance +=sampleColor.rgb * cosTheta; } } irradiance=irradiance * PI * invSampleCount * invSampleCount; return vec4<f32>(irradiance,1.0);\n}\n"}),b=m.createRenderPipeline({layout:"auto",vertex:{module:_,entryPoint:"vs_main"},fragment:{module:_,entryPoint:"fs_main",targets:[{format:this.#vt}]}}),y=new Sampler(this.#l,{magFilter:ln.LINEAR,minFilter:ln.LINEAR,mipmapFilter:cn.LINEAR,addressModeU:un.CLAMP_TO_EDGE,addressModeV:un.CLAMP_TO_EDGE,addressModeW:un.CLAMP_TO_EDGE}),T=this.#ec();for(let m=0;m<6;m++)await this.#qh(b,y,m,T[m],i,x);return x}async#qh(i,m,g,x,_,b){const{gpuDevice:y}=this.#l,T=y.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`irradiance_face_${g}_uniform`});y.queue.writeBuffer(T,0,x);const w=y.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:_.createView({dimension:"cube"})},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:T}}]}),P=y.createCommandEncoder({label:`ibl_irradiance_face_${g}_encoder`}),z=P.beginRenderPass({colorAttachments:[{view:b.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],label:`irradiance_face_${g}_renderpass`});z.setPipeline(i),z.setBindGroup(0,w),z.draw(6,1,0,0),z.end(),y.queue.submit([P.finish()]),T.destroy()}#ec(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}}Object.freeze(IBL);const ra={MODE_1D:1,MODE_2D:2,MODE_3D:3};Object.freeze(ra);const ia="managedBitmapTextureState",aa={animationSpeed:1,animationX:.1,animationY:.1};class ANoiseTexture extends ManagementResourceBase{mipLevelCount;useMipmap;src;#ge;#Qn=8;#er=8;#pi=1;#gi;#xi;#_i;#vi;#Ha;#Yh;#jr;#Xr;#Zh;#Jh=0;#Qh=1;#ef=aa.animationX;#tf=aa.animationY;#An=0;constructor(i,m=1024,g=1024,x){super(i,ia),validateUintRange(m,2,2048),validateUintRange(g,2,2048),this.#jr=m,this.#Xr=g,this.#Zh=x,this.#Ci(i),this.cacheKey=`NoiseTexture_${m}x${g}_${Date.now()}`,this.#ge=this.#Ui(i,m,g),this.#An=calculateTextureByteSize(this.#ge),this.#ki(),this.#Vn()}get videoMemorySize(){return this.#An}get resourceManagerKey(){return ia}get animationSpeed(){return this.#Qh}set animationSpeed(i){validatePositiveNumberRange(i),this.#Qh=i,this.updateUniform("animationSpeed",i)}get animationX(){return this.#ef}set animationX(i){validateNumber(i),this.#ef=i,this.updateUniform("animationX",i)}get animationY(){return this.#tf}set animationY(i){validateNumber(i),this.#tf=i,this.updateUniform("animationY",i)}get uniformInfo(){return this.#Yh}get gpuTexture(){return this.#ge}get time(){return this.#Jh}set time(i){validatePositiveNumberRange(i),this.#Jh=i,this.updateUniform("time",i/1e3)}updateUniform(i,m){this.#Yh.members[i]&&(this.#Ha.writeOnlyBuffer(this.#Yh.members[i],m),this.#Zh[i]=m),this.#ki()}updateUniforms(i){Object.entries(i).forEach(([i,m])=>{this.#Yh.members[i]&&(this.#Ha.writeOnlyBuffer(this.#Yh.members[i],m),this.#Zh[i]=m)}),this.#ki()}render(i){this.updateUniform("time",i),this.#ki()}destroy(){const i=this.#ge;this.__fireListenerList(!0),this.#Wn(),i&&i.destroy(),this.src=null,this.cacheKey=null,this.#ge=null}#Ci(i){const{gpuDevice:m}=i,g=this.#nf();this.cacheKey=this.uuid,this.#gi=m.createShaderModule({code:g}),this.#_i=this.#Li(i),this.#vi=this.#Di(m,this.#gi,this.#_i);const x=parseWGSL(g);this.#Yh=x.uniforms.uniforms;const _=new ArrayBuffer(this.#Yh.arrayBufferByteLength);this.#Ha=new UniformBuffer(i,_,`${this.constructor.name}_UniformBuffer`),this.#Zh.uniformDefaults&&this.updateUniforms({...aa,...this.#Zh.uniformDefaults})}#nf(){return` ${` struct Uniforms { time:f32, animationSpeed:f32, animationX:f32, animationY:f32, ${this.#Zh.uniformStruct||""} }; `} @group(0) @binding(0) var<uniform> uniforms:Uniforms; @group(0) @binding(1) var outputTexture:texture_storage_2d<rgba8unorm,write>;  ${this.#Zh.helperFunctions||""} @compute @workgroup_size(${this.#Qn},${this.#er},${this.#pi}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy); let dimensions:vec2<u32>=textureDimensions(outputTexture);  /* 경계 체크 */ if (index.x >=dimensions.x || index.y >=dimensions.y) { return; }  let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let base_uv=vec2<f32>((f32(index.x) + 0.5)/dimW,(f32(index.y) + 0.5)/dimH); ${this.#Zh.mainLogic}  textureStore(outputTexture,index,finalColor); } `}#ki(){if(!this.#xi)return;const i=this.redGPUContext.gpuDevice.createCommandEncoder(),m=i.beginComputePass();m.setPipeline(this.#vi),m.setBindGroup(0,this.#xi),m.dispatchWorkgroups(Math.ceil(this.#jr/this.#Qn),Math.ceil(this.#Xr/this.#er)),m.end(),this.redGPUContext.gpuDevice.queue.submit([i.finish()])}#Li(i){return i.resourceManager.createBindGroupLayout("NoiseTextureBindGroupLayout",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#Ui(i,m,g){const x=i.gpuDevice.createTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:this.cacheKey}),_=x.createView();return this.#xi=this.#Ai(i,this.#_i,_),x}#Ai(i,m,g){return i.gpuDevice.createBindGroup({layout:m,entries:[{binding:0,resource:{buffer:this.#Ha.gpuBuffer,offset:0,size:this.#Ha.gpuBuffer.size}},{binding:1,resource:g}]})}#Di(i,m,g){return i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#Vn(){this.redGPUContext.resourceManager.registerManagementResource(this,new ResourceStateBitmapTexture(this))}#Wn(){this.redGPUContext.resourceManager.unregisterManagementResource(this)}}const mergerNoiseUniformStruct=(i,m)=>[i,m].filter(Boolean).join("\n"),mergerNoiseUniformDefault=(i,m)=>({...i,...m||{}}),mergerNoiseHelperFunctions=(i,m)=>[i,m].filter(Boolean).join("\n");const sa=Object.values(ra),oa={frequency:8,amplitude:1,octaves:1,persistence:.5,lacunarity:2,seed:0,noiseDimension:ra.MODE_2D};const ua={EUCLIDEAN:0,MANHATTAN:1,CHEBYSHEV:2};Object.freeze(ua);const la={F1:0,F2:1,F2_MINUS_F1:2,F1_PLUS_F2:3,CELL_ID:4,CELL_ID_COLOR:5};Object.freeze(la);const ca=Object.values(ua),ha=Object.values(la),fa={frequency:8,distanceScale:1,octaves:1,persistence:.5,lacunarity:2,seed:0,distanceType:ua.EUCLIDEAN,outputType:la.F1,jitter:1,cellIdColorIntensity:1};var da=Object.freeze({__proto__:null,ANoiseTexture:ANoiseTexture,mergerNoiseHelperFunctions:mergerNoiseHelperFunctions,mergerNoiseUniformDefault:mergerNoiseUniformDefault,mergerNoiseUniformStruct:mergerNoiseUniformStruct}),ma=Object.freeze({__proto__:null,ShaderVariantGenerator:ShaderVariantGenerator,WGSLUniformTypes:WGSLUniformTypes,ensureVertexIndexBuiltin:ensureVertexIndexBuiltin,preprocessWGSL:preprocessWGSL}),pa=Object.freeze({__proto__:null,BitmapTexture:BitmapTexture,Core:ea,CoreBuffer:ta,CoreNoiseTexture:da,CoreVertexBuffer:na,CoreWGSLParser:ma,CubeTexture:CubeTexture,HDRTexture:HDRTexture,IBL:IBL,IndexBuffer:IndexBuffer,NOISE_DIMENSION:ra,PackedTexture:PackedTexture,Sampler:Sampler,SimplexTexture:class extends ANoiseTexture{#rf=oa.frequency;#if=oa.amplitude;#af=oa.octaves;#sf=oa.persistence;#of=oa.lacunarity;#uf=oa.seed;#lf=oa.noiseDimension;constructor(i,m=1024,g=1024,x){super(i,m,g,{...x,mainLogic:x?.mainLogic||" let uv=vec2<f32>( (base_uv.x + uniforms.time * ( uniforms.animationX * uniforms.animationSpeed )), (base_uv.y + uniforms.time * ( uniforms.animationY * uniforms.animationSpeed ))  ); let noise=getSimplexNoiseByDimension( uv,uniforms );  /* 최종 색상 (그레이스케일) */ let finalColor=vec4<f32>(noise,noise,noise,1.0); ",uniformStruct:mergerNoiseUniformStruct(" noiseDimension:f32, frequency:f32, amplitude:f32, octaves:i32, persistence:f32, lacunarity:f32, seed:f32, ",x?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(oa,x?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("\nfn mod289_vec3(x:vec3<f32>) -> vec3<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec2(x:vec2<f32>) -> vec2<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec4(x:vec4<f32>) -> vec4<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_f32(x:f32) -> f32 { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn permute(x:vec3<f32>) -> vec3<f32> { return mod289_vec3(((x * 34.0) + 1.0) * x);\n}\nfn permute4(x:vec4<f32>) -> vec4<f32> { return mod289_vec4(((x * 34.0) + 1.0) * x);\n}\nfn permute_f32(x:f32) -> f32 { return mod289_f32(((x * 34.0) + 1.0) * x);\n}\nfn taylorInvSqrt4(r:vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r;\n}\nfn simplex1D(x:f32) -> f32 { var i=floor(x); let f=fract(x); let g0=select(-1.0,1.0,(permute_f32(i) * 0.024390243902439) >=0.5); let g1=select(-1.0,1.0,(permute_f32(i + 1.0) * 0.024390243902439) >=0.5); let d0=f; let d1=f - 1.0; let t=f * f * f * (f * (f * 6.0 - 15.0) + 10.0); let n0=g0 * d0; let n1=g1 * d1; return mix(n0,n1,t) * 0.395;\n}\nfn simplex2D(v:vec2<f32>) -> f32 { let C=vec4<f32>(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439); var i=floor(v + dot(v,C.yy)); let x0=v - i + dot(i,C.xx); let i1=select(vec2<f32>(0.0,1.0),vec2<f32>(1.0,0.0),x0.x > x0.y); var x12=x0.xyxy + C.xxzz; x12.x=x12.x - i1.x; x12.y=x12.y - i1.y; i=mod289_vec2(i); let p=permute(permute(i.y + vec3<f32>(0.0,i1.y,1.0)) + i.x + vec3<f32>(0.0,i1.x,1.0)); var m=max(0.5 - vec3<f32>(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),vec3<f32>(0.0)); m=m * m; m=m * m; let x=2.0 * fract(p * C.www) - 1.0; let h=abs(x) - 0.5; let ox=floor(x + 0.5); let a0=x - ox; m=m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h)); let g=vec3<f32>(a0.x * x0.x + h.x * x0.y,a0.y * x12.x + h.y * x12.y,a0.z * x12.z + h.z * x12.w); return 130.0 * dot(m,g);\n}\nfn simplex3D(v:vec3<f32>) -> f32 { let C=vec2<f32>(1.0/6.0,1.0/3.0); let D=vec4<f32>(0.0,0.5,1.0,2.0); var i=floor(v + dot(v,C.yyy)); let x0=v - i + dot(i,C.xxx); let g=step(x0.yzx,x0.xyz); let l=1.0 - g; let i1=min(g.xyz,l.zxy); let i2=max(g.xyz,l.zxy); let x1=x0 - i1 + C.xxx; let x2=x0 - i2 + C.yyy; let x3=x0 - D.yyy; i=mod289_vec3(i); let p=permute4(permute4(permute4( i.z + vec4<f32>(0.0,i1.z,i2.z,1.0 )) + i.y + vec4<f32>(0.0,i1.y,i2.y,1.0 )) + i.x + vec4<f32>(0.0,i1.x,i2.x,1.0 )); let n_=0.142857142857; let ns=n_ * D.wyz - D.xzx; let j=p - 49.0 * floor(p * ns.z * ns.z); let x_=floor(j * ns.z); let y_=floor(j - 7.0 * x_ ); let x=x_ *ns.x + ns.yyyy; let y=y_ *ns.x + ns.yyyy; let h=1.0 - abs(x) - abs(y); let b0=vec4<f32>( x.xy,y.xy ); let b1=vec4<f32>( x.zw,y.zw ); let s0=floor(b0)*2.0 + 1.0; let s1=floor(b1)*2.0 + 1.0; let sh=-step(h,vec4<f32>(0.0)); let a0=b0.xzyw + s0.xzyw*sh.xxyy; let a1=b1.xzyw + s1.xzyw*sh.zzww; var p0=vec3<f32>(a0.xy,h.x); var p1=vec3<f32>(a0.zw,h.y); var p2=vec3<f32>(a1.xy,h.z); var p3=vec3<f32>(a1.zw,h.w); let norm=taylorInvSqrt4(vec4<f32>(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3))); p0 *=norm.x; p1 *=norm.y; p2 *=norm.z; p3 *=norm.w; var m=max(0.6 - vec4<f32>(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),vec4<f32>(0.0)); m=m * m; return 42.0 * dot( m*m,vec4<f32>( dot(p0,x0),dot(p1,x1), dot(p2,x2),dot(p3,x3) ) );\n}\nfn fbm1D(pos:f32,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex1D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn fbm(pos:vec2<f32>,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex2D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn fbm3D(pos:vec3<f32>,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex3D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn getSimplexNoise1D(pos:f32,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(pos + uniforms.seed) * current_frequency; let octave_noise=simplex1D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoise2D(uv:vec2<f32>,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(uv + uniforms.seed) * current_frequency; let octave_noise=simplex2D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoise3D(pos:vec3<f32>,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(pos + vec3<f32>(uniforms.seed)) * current_frequency; let octave_noise=simplex3D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoiseByDimension(uv:vec2<f32>,uniforms:Uniforms) -> f32 { if (uniforms.noiseDimension < 1.1) { return getSimplexNoise1D(uv.x,uniforms); } else if (uniforms.noiseDimension < 2.1) { return getSimplexNoise2D(uv,uniforms); } else if (uniforms.noiseDimension < 3.1) { return getSimplexNoise3D(vec3<f32>(uv.x,uv.y,uniforms.seed * 0.1),uniforms); } else { return getSimplexNoise2D(uv,uniforms); }\n}\n",x?.helperFunctions)})}get noiseDimension(){return this.#lf}set noiseDimension(i){sa.includes(i)?(this.#lf=i,this.updateUniform("noiseDimension",i)):consoleAndThrowError(`Invalid value for noiseDimension. Received ${i}. Expected one of:${sa.join(",")}`)}get frequency(){return this.#rf}set frequency(i){validatePositiveNumberRange(i),this.#rf=i,this.updateUniform("frequency",i)}get amplitude(){return this.#if}set amplitude(i){validatePositiveNumberRange(i),this.#if=i,this.updateUniform("amplitude",i)}get octaves(){return this.#af}set octaves(i){validateUintRange(i,1,8),this.#af=i,this.updateUniform("octaves",i)}get persistence(){return this.#sf}set persistence(i){validatePositiveNumberRange(i,0,1),this.#sf=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#of}set lacunarity(i){validatePositiveNumberRange(i),this.#of=i,this.updateUniform("lacunarity",i)}get seed(){return this.#uf}set seed(i){this.#uf=i,this.updateUniform("seed",i)}randomizeSeed(){this.seed=1e3*Math.random()}getSettings(){return{frequency:this.#rf,amplitude:this.#if,octaves:this.#af,persistence:this.#sf,lacunarity:this.#of,seed:this.#uf}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.amplitude&&(this.amplitude=i.amplitude),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed)}},StorageBuffer:StorageBuffer,UniformBuffer:UniformBuffer,VORONOI_DISTANCE_TYPE:ua,VORONOI_OUTPUT_TYPE:la,VertexBuffer:VertexBuffer,VertexInterleaveType:VertexInterleaveType,VertexInterleavedStruct:VertexInterleavedStruct,VoronoiTexture:class extends ANoiseTexture{#rf=fa.frequency;#cf=fa.distanceScale;#af=fa.octaves;#sf=fa.persistence;#of=fa.lacunarity;#uf=fa.seed;#hf=fa.distanceType;#ff=fa.outputType;#df=fa.jitter;#mf=fa.cellIdColorIntensity;constructor(i,m=1024,g=1024,x){super(i,m,g,{...x,mainLogic:x?.mainLogic||" let uv=vec2<f32>( (base_uv.x + uniforms.time * (uniforms.animationX * uniforms.animationSpeed)), (base_uv.y + uniforms.time * (uniforms.animationY * uniforms.animationSpeed)) ); var finalColor:vec4<f32>; if (uniforms.outputType==5) { let colorNoise=getVoronoiColorNoise(uv,uniforms); finalColor=vec4<f32>(colorNoise,1.0); } else { let noise=getVoronoiNoise(uv,uniforms); finalColor=vec4<f32>(noise,noise,noise,1.0); } ",uniformStruct:mergerNoiseUniformStruct(" frequency:f32, distanceScale:f32, octaves:i32, persistence:f32, lacunarity:f32, seed:f32, distanceType:i32, outputType:i32, jitter:f32, cellIdColorIntensity:f32, ",x?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(fa,x?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("fn hash22(p:vec2<f32>) -> vec2<f32> { var p3=fract(vec3<f32>(p.xyx) * vec3<f32>(0.1031,0.1030,0.0973)); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.xx + p3.yz) * p3.zy);\n}\nfn hash12(p:vec2<f32>) -> f32 { var p3=fract(vec3<f32>(p.xyx) * 0.1031); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.x + p3.y) * p3.z);\n}\nfn euclideanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=a - b; return sqrt(d.x * d.x + d.y * d.y);\n}\nfn manhattanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=abs(a - b); return d.x + d.y;\n}\nfn chebyshevDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=abs(a - b); return max(d.x,d.y);\n}\nfn calculateDistance(a:vec2<f32>,b:vec2<f32>,distanceType:i32) -> f32 { switch (distanceType) { case 0:{ return euclideanDistance(a,b);} case 1:{ return manhattanDistance(a,b);} case 2:{ return chebyshevDistance(a,b);} default:{ return euclideanDistance(a,b);} }\n}\nfn cellIdToColor(cellId:f32,intensity:f32) -> vec3<f32> { let h=cellId * 6.28318; let s=0.7 + 0.3 * fract(cellId * 7.0); let v=0.6 + 0.4 * fract(cellId * 13.0); let c=v * s; let x=c * (1.0 - abs(((h/1.047198) % 2.0) - 1.0)); let m=v - c; var rgb:vec3<f32>; let sector=i32(h/1.047198) % 6; switch (sector) { case 0:{ rgb=vec3<f32>(c,x,0.0);} case 1:{ rgb=vec3<f32>(x,c,0.0);} case 2:{ rgb=vec3<f32>(0.0,c,x);} case 3:{ rgb=vec3<f32>(0.0,x,c);} case 4:{ rgb=vec3<f32>(x,0.0,c);} default:{ rgb=vec3<f32>(c,0.0,x);} } return (rgb + m) * intensity;\n}\nstruct VoronoiResult { f1:f32, f2:f32, cellId:f32,\n}\nfn voronoiSingle(pos:vec2<f32>,frequency:f32,seed:f32,jitter:f32,distanceType:i32) -> VoronoiResult { let scaledPos=pos * frequency; let gridPos=floor(scaledPos); let localPos=fract(scaledPos); var minDist1=999.0; var minDist2=999.0; var closestCellId=0.0; for (var y=-1;y <=1;y++) { for (var x=-1;x <=1;x++) { let neighborGrid=gridPos + vec2<f32>(f32(x),f32(y)); let randomOffset=hash22(neighborGrid + seed); let jitteredOffset=mix(vec2<f32>(0.5),randomOffset,jitter); let cellPoint=vec2<f32>(f32(x),f32(y)) + jitteredOffset; let dist=calculateDistance(localPos,cellPoint,distanceType); if (dist < minDist1) { minDist2=minDist1; minDist1=dist; closestCellId=hash12(neighborGrid + seed); } else if (dist < minDist2) { minDist2=dist; } } } return VoronoiResult(minDist1,minDist2,closestCellId);\n}\nfn getVoronoiNoise(uv:vec2<f32>,uniforms:Uniforms) -> f32 { var total=0.0; var frequency=uniforms.frequency; var amplitude=1.0; var maxValue=0.0; for (var i=0;i < uniforms.octaves;i++) { let voronoiResult=voronoiSingle( uv, frequency, uniforms.seed + f32(i) * 100.0, uniforms.jitter, uniforms.distanceType ); let F1=voronoiResult.f1 * uniforms.distanceScale; let F2=voronoiResult.f2 * uniforms.distanceScale; let cellId=voronoiResult.cellId; var octaveValue:f32; switch (uniforms.outputType) { case 0:{ octaveValue=F1;} case 1:{ octaveValue=F2;} case 2:{ octaveValue=F2 - F1;} case 3:{ octaveValue=(F1 + F2) * 0.5;} case 4:{ octaveValue=cellId;}  case 5:{ let colorRGB=cellIdToColor(cellId,uniforms.cellIdColorIntensity); octaveValue=(colorRGB.r + colorRGB.g + colorRGB.b)/3.0; } default:{ octaveValue=F1;} } total +=octaveValue * amplitude; maxValue +=amplitude; frequency *=uniforms.lacunarity; amplitude *=uniforms.persistence; } return clamp(total/maxValue,0.0,1.0);\n}\nfn getVoronoiColorNoise(uv:vec2<f32>,uniforms:Uniforms) -> vec3<f32> { if (uniforms.outputType==5) {  let voronoiResult=voronoiSingle( uv, uniforms.frequency, uniforms.seed, uniforms.jitter, uniforms.distanceType ); return cellIdToColor(voronoiResult.cellId,uniforms.cellIdColorIntensity); } else { let grayValue=getVoronoiNoise(uv,uniforms); return vec3<f32>(grayValue,grayValue,grayValue); }\n}\n",x?.helperFunctions)})}get frequency(){return this.#rf}set frequency(i){validatePositiveNumberRange(i),this.#rf=i,this.updateUniform("frequency",i)}get distanceScale(){return this.#cf}set distanceScale(i){validatePositiveNumberRange(i),this.#cf=i,this.updateUniform("distanceScale",i)}get octaves(){return this.#af}set octaves(i){validateUintRange(i,1,8),this.#af=i,this.updateUniform("octaves",i)}get persistence(){return this.#sf}set persistence(i){validatePositiveNumberRange(i,0,1),this.#sf=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#of}set lacunarity(i){validatePositiveNumberRange(i),this.#of=i,this.updateUniform("lacunarity",i)}get seed(){return this.#uf}set seed(i){this.#uf=i,this.updateUniform("seed",i)}get distanceType(){return this.#hf}set distanceType(i){ca.includes(i)?(this.#hf=i,this.updateUniform("distanceType",i)):consoleAndThrowError(`Invalid value for distanceType. Received ${i}. Expected one of:${ca.join(",")}`)}get outputType(){return this.#ff}set outputType(i){ha.includes(i)?(this.#ff=i,this.updateUniform("outputType",i)):consoleAndThrowError(`Invalid value for outputType. Received ${i}. Expected one of:${ha.join(",")}`)}get jitter(){return this.#df}set jitter(i){(i<0||i>1)&&consoleAndThrowError(`Jitter must be between 0 and 1. Received:${i}`),validatePositiveNumberRange(i,0,1),this.#df=i,this.updateUniform("jitter",i)}get cellIdColorIntensity(){return this.#mf}set cellIdColorIntensity(i){validatePositiveNumberRange(i),this.#mf=i,this.updateUniform("cellIdColorIntensity",i)}randomizeSeed(){this.seed=1e3*Math.random()}setEuclideanDistance(){this.distanceType=ua.EUCLIDEAN}setManhattanDistance(){this.distanceType=ua.MANHATTAN}setChebyshevDistance(){this.distanceType=ua.CHEBYSHEV}setF1Output(){this.outputType=la.F1}setF2Output(){this.outputType=la.F2}setCrackPattern(){this.outputType=la.F2_MINUS_F1}setSmoothBlend(){this.outputType=la.F1_PLUS_F2}setCellIdOutput(){this.outputType=la.CELL_ID}setCellIdColorOutput(){this.outputType=la.CELL_ID_COLOR}setCellularPattern(){this.outputType=la.F1,this.distanceType=ua.EUCLIDEAN,this.jitter=1}setStonePattern(){this.outputType=la.F2_MINUS_F1,this.distanceType=ua.EUCLIDEAN,this.jitter=.8}setOrganicPattern(){this.distanceType=ua.MANHATTAN,this.jitter=.6}setGridPattern(){this.jitter=0,this.distanceType=ua.EUCLIDEAN}setCrystalPattern(){this.outputType=la.F2_MINUS_F1,this.distanceType=ua.CHEBYSHEV,this.jitter=.9}setStainedGlassPattern(){this.outputType=la.CELL_ID_COLOR,this.distanceType=ua.EUCLIDEAN,this.jitter=.7,this.cellIdColorIntensity=.8}setMosaicPattern(){this.outputType=la.CELL_ID_COLOR,this.distanceType=ua.MANHATTAN,this.jitter=.3,this.cellIdColorIntensity=1}setBiomeMapPattern(){this.outputType=la.CELL_ID,this.distanceType=ua.EUCLIDEAN,this.jitter=.8,this.frequency=4}getSettings(){return{frequency:this.#rf,distanceScale:this.#cf,octaves:this.#af,persistence:this.#sf,lacunarity:this.#of,seed:this.#uf,distanceType:this.#hf,outputType:this.#ff,jitter:this.#df,cellIdColorIntensity:this.#mf}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.distanceScale&&(this.distanceScale=i.distanceScale),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed),void 0!==i.distanceType&&(this.distanceType=i.distanceType),void 0!==i.outputType&&(this.outputType=i.outputType),void 0!==i.jitter&&(this.jitter=i.jitter),void 0!==i.cellIdColorIntensity&&(this.cellIdColorIntensity=i.cellIdColorIntensity)}getDistanceTypeName(){return{[ua.EUCLIDEAN]:"Euclidean",[ua.MANHATTAN]:"Manhattan",[ua.CHEBYSHEV]:"Chebyshev"}[this.#hf]||"Unknown"}getOutputTypeName(){return{[la.F1]:"F1",[la.F2]:"F2",[la.F2_MINUS_F1]:"F2-F1 (Crack)",[la.F1_PLUS_F2]:"F1+F2 (Blend)",[la.CELL_ID]:"Cell ID",[la.CELL_ID_COLOR]:"Cell ID Color"}[this.#ff]||"Unknown"}},parseWGSL:parseWGSL});class GltfAnimationLooperManager{#pf=60;#gf=1e3/this.#pf;#El=0;#xf=0;render=(i,g,x,_)=>{const b=g;this.#El;this.#gf,this.#El=b,this.#xf++;const y=m,T=180/Math.PI;let w,P,z,H,$,W,q,ye,Ge,Ke,je,Xe,Ye,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,St,Tt,wt,Mt,Ct,Rt,Pt,Et,Bt,It,Lt,Dt,Ut,At,kt,Ot,Gt,Ft,Nt,Vt,zt,Ht,$t,Wt,Kt,jt,Xt,qt,Yt,Zt,Jt,Qt,en,tn,nn,rn,an,sn,on,un,ln,cn,hn,fn=_.length;for(;fn--;){rn=_[fn],nn=rn.targetGLTFParsedSingleClip,tn=nn.length;const m=nn.maxTime;for(;tn--;){an=nn[tn],sn=an.cacheTable;const{animationTargetMesh:_,timeAnimationInfo:b,aniDataAnimationInfo:fn,weightMeshes:dn}=an;Zt=(g-rn.startTime)%(1e3*m)/1e3,ln=b.dataList,cn=fn.dataList,hn=ln.length;const mn=an.lastPrevIdx||0;if(mn<hn-1)if(ln[mn]<=Zt&&Zt<ln[mn+1])un=mn,on=mn+1;else if(mn+1<hn-1&&ln[mn+1]<=Zt&&Zt<ln[mn+2])un=mn+1,on=mn+2;else if(Zt<=ln[0])un=hn-1,on=0;else if(Zt>=ln[hn-1])un=hn-1,on=0;else{let i=0,m=hn-1;for(;i<m-1;){const g=i+m>>1;ln[g]<=Zt?i=g:m=g}un=i,on=m}else if(Zt<=ln[0])un=hn-1,on=0;else if(Zt>=ln[hn-1])un=hn-1,on=0;else{let i=0,m=hn-1;for(;i<m-1;){const g=i+m>>1;ln[g]<=Zt?i=g:m=g}un=i,on=m}let pn,gn,xn,_n,vn,bn,yn;an.lastPrevIdx=un,Jt=ln[un],Qt=ln[on];const Sn=an.interpolation;if("CUBICSPLINE"==Sn){const i=Qt-Jt;en=i==i?i:0;const m=(Zt-Jt)/en;pn=m==m?m:0,gn=pn*pn,xn=gn*pn,bn=-2*xn+3*gn,yn=xn-gn,_n=1-bn,vn=yn-gn+pn}else if("STEP"==Sn)en=0;else{const i=(Zt-Jt)/(Qt-Jt);en=i==i?i:0}switch(an.key){case"rotation":if(un!==hn-1){if("CUBICSPLINE"===Sn){let i,m,g,x,_,b,y,T;At=12*un,kt=12*on,w=cn[At+4],P=cn[At+5],z=cn[At+6],H=cn[At+7],$=w*w+P*P+z*z+H*H,$>0?(W=1/Math.sqrt($),q=w*W,ye=P*W,Ge=z*W,Ke=H*W):(q=ye=Ge=0,Ke=1),w=cn[At+8],P=cn[At+9],z=cn[At+10],H=cn[At+11],$=w*w+P*P+z*z+H*H,$>0?(W=1/Math.sqrt($),i=w*W,m=P*W,g=z*W,x=H*W):(i=m=g=0,x=1),w=cn[kt],P=cn[kt+1],z=cn[kt+2],H=cn[kt+3],$=w*w+P*P+z*z+H*H,$>0?(W=1/Math.sqrt($),_=w*W,b=P*W,y=z*W,T=H*W):(_=b=y=0,T=1),w=cn[kt+4],P=cn[kt+5],z=cn[kt+6],H=cn[kt+7],$=w*w+P*P+z*z+H*H,$>0?(W=1/Math.sqrt($),je=w*W,Xe=P*W,Ye=z*W,Ze=H*W):(je=Xe=Ye=0,Ze=1),w=_n*q+vn*i*en+bn*je+yn*_*en,P=_n*ye+vn*m*en+bn*Xe+yn*b*en,z=_n*Ge+vn*g*en+bn*Ye+yn*y*en,H=_n*Ke+vn*x*en+bn*Ze+yn*T*en}else{At=un<<2,kt=on<<2;const i=At<<16|kt;let m=sn[i];m?(Je=m[0],q=m[1],ye=m[2],Ge=m[3],Ke=m[4],je=m[5],Xe=m[6],Ye=m[7],Ze=m[8]):(w=cn[At],P=cn[At+1],z=cn[At+2],H=cn[At+3],$=w*w+P*P+z*z+H*H,$>0?(W=1/Math.sqrt($),q=w*W,ye=P*W,Ge=z*W,Ke=H*W):(q=ye=Ge=0,Ke=1),w=cn[kt],P=cn[kt+1],z=cn[kt+2],H=cn[kt+3],$=w*w+P*P+z*z+H*H,$>0?(W=1/Math.sqrt($),je=w*W,Xe=P*W,Ye=z*W,Ze=H*W):(je=Xe=Ye=0,Ze=1),Je=q*je+ye*Xe+Ge*Ye+Ke*Ze,Je<0&&(Je=-Je,je=-je,Xe=-Xe,Ye=-Ye,Ze=-Ze),m=new Float32Array(9),m[0]=Je,m[1]=q,m[2]=ye,m[3]=Ge,m[4]=Ke,m[5]=je,m[6]=Xe,m[7]=Ye,m[8]=Ze,sn[i]=m),1-Je>y?(Qe=Math.acos(Je),et=Math.sin(Qe),at=Math.sin((1-en)*Qe)/et,ht=Math.sin(en*Qe)/et):(at=1-en,ht=en),w=at*q+ht*je,P=at*ye+ht*Xe,z=at*Ge+ht*Ye,H=at*Ke+ht*Ze}ft=w+w,gt=P+P,xt=z+z,vt=w*ft,bt=w*gt,yt=w*xt,St=P*gt,Tt=P*xt,wt=z*xt,Mt=H*ft,Ct=H*gt,Rt=H*xt,Bt=yt+Ct,Pt=1-(St+wt),Et=bt-Rt,Lt=Tt-Mt,Ut=1-(vt+St),Dt=Tt+Mt,It=1-(vt+wt),P=Math.asin(Math.max(-1,Math.min(1,Bt))),Math.abs(Bt)<.99999?(w=Math.atan2(-Lt,Ut),z=Math.atan2(-Et,Pt)):(w=Math.atan2(Dt,It),z=0),_.rotationX=-w*T,_.rotationY=-P*T,_.rotationZ=-z*T}break;case"translation":"CUBICSPLINE"===Sn?un!==hn-1&&(At=9*un,Ot=cn[At+3],Gt=cn[At+4],Ft=cn[At+5],Kt=cn[At+6],jt=cn[At+7],Xt=cn[At+8],kt=9*on,Ht=cn[kt],$t=cn[kt+1],Wt=cn[kt+2],Nt=cn[kt+3],Vt=cn[kt+4],zt=cn[kt+5],qt=Kt*en,Yt=Ht*en,_.x=_n*Nt+vn*qt+bn*Ot+yn*Yt,qt=jt*en,Yt=$t*en,_.y=_n*Vt+vn*qt+bn*Gt+yn*Yt,qt=Xt*en,Yt=Wt*en,_.z=_n*zt+vn*qt+bn*Ft+yn*Yt):(At=3*on,Ot=cn[At],Gt=cn[At+1],Ft=cn[At+2],kt=3*un,Nt=cn[kt],Vt=cn[kt+1],zt=cn[kt+2],_.x=Nt+en*(Ot-Nt),_.y=Vt+en*(Gt-Vt),_.z=zt+en*(Ft-zt));break;case"scale":"CUBICSPLINE"===Sn?un!==hn-1&&(At=9*un,Ot=cn[At+3],Gt=cn[At+4],Ft=cn[At+5],Kt=cn[At+6],jt=cn[At+7],Xt=cn[At+8],kt=9*on,Ht=cn[kt],$t=cn[kt+1],Wt=cn[kt+2],Nt=cn[kt+3],Vt=cn[kt+4],zt=cn[kt+5],qt=Kt*en,Yt=Ht*en,_.scaleX=_n*Nt+vn*qt+bn*Ot+yn*Yt,qt=jt*en,Yt=$t*en,_.scaleY=_n*Vt+vn*qt+bn*Gt+yn*Yt,qt=Xt*en,Yt=Wt*en,_.scaleZ=_n*zt+vn*qt+bn*Ft+yn*Yt):(At=3*on,Ot=cn[At],Gt=cn[At+1],Ft=cn[At+2],kt=3*un,Nt=cn[kt],Vt=cn[kt+1],zt=cn[kt+2],_.scaleX=Nt+en*(Ot-Nt),_.scaleY=Vt+en*(Gt-Vt),_.scaleZ=zt+en*(Ft-zt));break;case"weights":{let m=dn.length;for(;m--;)an.renderWeight(i,x,dn[m],en,un,on);break}}}}}}!function(i,m){void 0===m&&(m={});var g=m.insertAt;if("undefined"!=typeof document){var x=document.head||document.getElementsByTagName("head")[0],_=document.createElement("style");_.type="text/css","top"===g&&x.firstChild?x.insertBefore(_,x.firstChild):x.appendChild(_),_.styleSheet?_.styleSheet.cssText=i:_.appendChild(document.createTextNode(i))}}(".RedGPUDebugPanel{background:rgba(0,0,0,.9);bottom:0;color:#fff;font-size:11px;left:0;line-height:1;max-height:100%;min-width:250px;overflow-y:auto;position:fixed;transform:translateZ(0);width:330px;will-change:transform;z-index:2}.RedGPUDebugPanel::-webkit-scrollbar{width:6px}.RedGPUDebugPanel::-webkit-scrollbar-track{background:#000}.RedGPUDebugPanel::-webkit-scrollbar-thumb{background:#333}.RedGPUDebugPanel::-webkit-scrollbar-thumb:hover{background:#444}.debug-group{line-height:1.4;padding:10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group{background:linear-gradient(90deg,hsla(0,0%,100%,.1),rgba(0,0,0,.01));border:1px solid hsla(0,0%,100%,.16);border-radius:6px;box-shadow:0 0 10px rgba(0,0,0,.16);line-height:1.4;margin:8px 0;padding:6px 10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group-title{color:#e3b096}.debug-item{align-items:center;color:#ccc;display:flex;font-weight:400;gap:10px;justify-content:space-between;transform:translateZ(0);width:100%;will-change:transform;b{color:#fdb48d;font-weight:700}}.boolean-true{background:green}.boolean-false,.boolean-true{border-radius:4px;color:#fff;line-height:1;margin:2px 0;padding:2px 4px}.boolean-false{background:red}.debug-folder{background:rgba(0,0,0,.5);border-bottom:1px solid hsla(0,0%,100%,.05);display:flex;flex-direction:column;width:100%}.debug-folder-title{color:#fdb48d;font-size:15px;b{color:#fdb48d;font-size:11px;font-weight:700}}.debug-folder-small-title,.debug-folder-title{align-items:center;background:linear-gradient(0deg,rgba(0,0,0,.95),hsla(0,0%,100%,.055));cursor:pointer;display:flex;justify-content:space-between;line-height:1;padding:10px 8px;width:100%}.debug-folder-small-title{color:#fff;font-size:12px;b{color:#fdb48d;font-size:11px;font-weight:700}}.debug-folder-title .onoff{font-size:11px}.debug-item-title{color:#888;max-width:240px}.debug-item-cache-key,.debug-item-title{font-weight:500;overflow:hidden;text-overflow:ellipsis;text-shadow:1px 1px 0 rgba(0,0,0,.3)}.debug-item-cache-key{color:#fff;max-width:250px;white-space:nowrap}.div-line{background:hsla(0,0%,100%,.06);border-bottom:1px solid transparent;height:1px;margin:10px 0;width:100%}.root-padding{padding:6px;width:100%}.color-box{border:1px solid hsla(0,0%,100%,.2);border-radius:4px;margin:2px;padding:3px}");const createDebugTitle=i=>`<div>${i}</div>`,makeColorDebug=(i,m)=>`\n<div class='debug-item'>\n\x3c!--\t<span class='debug-item-title'>${i}</span> --\x3e\n\t<span class='debug-item-title'></span> \n\t<div style="border:1px solid rgba(255,255,255,0.2);border-radius:4px;background:rgba(${m.rgba});padding:3px;margin:2px"> ${m.rgba}\n\t</div>\n</div>\n`,makeBooleanDebug=(i,m)=>`<span class="${m?"boolean-true":"boolean-false"}">${m?"TRUE":"FALSE"}</span>`,getDebugFormatValue=i=>"boolean"==typeof i?i.toString():"number"==typeof i?i.toLocaleString():i,updateDebugItemValue=(i,m,g,x,_="")=>{const b=i.querySelector(`.${m}`);if(!b)return;const y=`${getDebugFormatValue(g)}${_}`;b.innerHTML!==y&&(b.innerHTML=y,x&&(b.style.background=g?"green":"rgba(255,255,255,0.1)"))};let ga=class{dom;#_f;#vf=!1;constructor(i){this.#_f=i,this.dom=document.createElement("div"),this.dom.innerHTML=` <div class="debug-folder">\t <div class="debug-folder-small-title" style="display:flex;align-items:center;justify-content:space-between;cursor:pointer;"> ${createDebugTitle(`${i} Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)`)}\n\x3c!-- <div class="onoff">${this.#vf?"close":"open"}</div>--\x3e </div> <div class="item-container" style="display:none"></div> </div>\n`}get openYn(){return this.#vf}set openYn(i){this.#vf=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}update(i,m){const{resourceManager:g}=m;if("Buffer"===this.#_f){const m=g.resources.get("GPUBuffer"),{videoMemory:x}=m;i.totalUsedVideoMemory+=x,updateDebugItemValue(this.dom,"totalCount",m.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(x))}else{const m=g[`managed${this.#_f}State`],{table:x,videoMemory:_}=m;i.totalUsedVideoMemory+=_,updateDebugItemValue(this.dom,"totalCount",x.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(_)),this.#_f}}#bf(i){let m=i;(i.startsWith("Vertex_")||i.startsWith("Index_"))&&(m=i.substring(i.indexOf("_")+1));try{const i=new URL(m),g=i.pathname.split("/").pop()||m;return{host:i.host,filename:g}}catch{return{host:null,filename:m}}}#yf(i){const m=this.dom.querySelector(".item-container"),g=new Set,x=this.#_f,_=new Map;m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${x}_`,"");g.add(m),_.set(m,i)});let b=0;i.forEach((i,y)=>{const T=y,w=i.size||0,P=`${x}_${T}`;let z=_.get(T);z?g.delete(T):(z=document.createElement("div"),z.className=`debug-group ${P}`,z.innerHTML=` <div class='debug-item'> <div> <div class='debug-item-title'><span style="white-space:nowrap"> <span class="host"></span> <div class="name"></div> </span></div> <div style="font-size:10px">${T}</div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"> <span style="white-space:nowrap"><b class="videoMemorySize"></b></span> </div> </div> `,m.appendChild(z));const{host:H,filename:$}=this.#bf(y);H?(updateDebugItemValue(z,"host",`${b} ${H}`),updateDebugItemValue(z,"name",$)):updateDebugItemValue(z,"host",`${b} ${y}`),updateDebugItemValue(z,"videoMemorySize",formatBytes(w)),b++});for(let i of g)_.get(i).remove()}#Sf(i){const m=this.dom.querySelector(".item-container"),g=new Set,x=this.#_f,_=new Map;m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${x}_`,"");g.add(m),_.set(m,i)});let b=0;const y="UniformBuffer"===this.#_f||"StorageBuffer"===this.#_f;i.forEach(i=>{const{useNum:T,buffer:w}=i,{uuid:P,size:z,name:H,gpuBuffer:$}=w,{label:W}=$,q=`${x}_${P}`;let ye=_.get(P);ye?g.delete(P):(ye=document.createElement("div"),ye.className=`debug-group ${q}`,ye.innerHTML=` <div class='debug-item'> <div style="display:flex;flex-direction:column;width:100%"> <div class='debug-item-title'><span style="white-space:nowrap"> <span class="host"></span> <div class="name"></div> </span></div> <div style="font-size:10px">${P}</div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px;min-width:50px"> <span class='useNum' style="display:${y?"none":"block"};padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span> <span style="white-space:nowrap"><b class="videoMemorySize"></b></span> </div> </div> `,m.appendChild(ye));const{host:Ge,filename:Ke}=this.#bf(H);Ge?(updateDebugItemValue(ye,"host",`${b} ${Ge}`),updateDebugItemValue(ye,"name",Ke)):updateDebugItemValue(ye,"host",`${b} ${W}`),y||updateDebugItemValue(ye,"useNum",T,!0),updateDebugItemValue(ye,"videoMemorySize",formatBytes(z)),b++});for(let i of g)_.get(i).remove()}};class DebugBufferList{debugStatisticsDomService;constructor(i){this.debugStatisticsDomService=new ga(i)}get dom(){return this.debugStatisticsDomService.dom}update(i,m){this.debugStatisticsDomService.update(i,m)}}class ADebugItem{debugStatisticsDomService;constructor(){}get dom(){return this.debugStatisticsDomService.dom}update(i,m,g){this.debugStatisticsDomService.update(i,m)}}class ADebugStatisticsDomService{dom;#vf=!1;constructor(){}get openYn(){return this.#vf}set openYn(i){this.#vf=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}init(i,m=!1,g=!1){this.#vf=m,this.dom=document.createElement("div"),this.dom.innerHTML=` <div class="debug-folder">\t <div class="${g?"debug-folder-small-title":"debug-folder-title"}"> ${i}\n\x3c!-- <div class="onoff">${this.openYn?"close":"open"}</div>--\x3e </div> <div class="item-container" style="display:${m?"":"none"}"></div> </div>\n`}update(i,m){}}const xa=["useMSAA","useFXAA","useTAA","alphaMode","renderScale"];let _a=class extends ADebugStatisticsDomService{constructor(){super(),this.init(`${createDebugTitle("RedGPUContext")}`,!0),this.#Sf()}update(i,m){xa.forEach(i=>this.#Tf(m,i)),this.#wf(m)}#Sf(){const i=this.dom.querySelector(".item-container"),m=['<div class="debug-group">',...xa.map(i=>this.#Mf(i)),this.#Mf("width_height"),this.#Mf("pixelRectArray"),this.#Mf("backgroundColor"),"</div>"];i.innerHTML=m.join("")}#Mf(i){return` <div class='debug-item'> ${i} <span class='debug-item-title redGPUContext_${i}'/> </div> `}#Tf(i,m){const g=["useMSAA","useFXAA","useTAA"].includes(m),x=g?i.antialiasingManager[m]:i[m];updateDebugItemValue(this.dom,`redGPUContext_${m}`,g?makeBooleanDebug(0,x):getDebugFormatValue(x))}#wf(i){const{sizeManager:m,width:g,height:x,backgroundColor:_}=i,{pixelRectArray:b}=m;updateDebugItemValue(this.dom,"redGPUContext_width_height",`${g},${x}`),updateDebugItemValue(this.dom,"redGPUContext_pixelRectArray",b),updateDebugItemValue(this.dom,"redGPUContext_backgroundColor",makeColorDebug("backgroundColor",_))}};class DebugRedGPUContext extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new _a}}let va=class extends ADebugStatisticsDomService{#Cf;constructor(i){super(),this.#Cf=i,this.init(`${createDebugTitle(`${i}Texture Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)`)}`,!1,!0)}update(i,m){if("Packed"===this.#Cf)this.#Rf(i,m);else{const{resourceManager:g}=m,{managedBitmapTextureState:x,managedCubeTextureState:_,managedHDRTextureState:b}=g,{table:y,videoMemory:T}="Bitmap"===this.#Cf?x:"Cube"===this.#Cf?_:b;i.totalUsedVideoMemory+=T,updateDebugItemValue(this.dom,"totalCount",y.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(T))}}getTargetSrc(i){if("Packed"===this.#Cf)return i.src||"packed texture";if(i instanceof ResourceStateCubeTexture){const{cacheKey:m}=i;return`${m}...`}{const{src:m}=i;return m?m.startsWith("data:")?"base64 texture":m:"null"}}getUpdatedTdom(i,m,g,x,_,b){return i||((i=document.createElement("div")).className=`debug-group ${g}`,i.innerHTML=` <div class='debug-item'> \t<div style="display:flex;flex-direction:column;width:100%"> <div class='debug-item-title'>${x} <span class="targetSrc" style="white-space:nowrap">${_||""}</span></div>  <div class='debug-item-cache-key'><span class="host">Place holder for host</span></div> <div class='debug-item-cache-key'><span class="fileName">Place holder for fileName</span></div> <div>mipLevelCount:<span class="mipLevelCount"></span>/useMipmap:<span class="useMipmap"></span></div> <div>width:<span class="width"></span>/height:<span class="height"></span></div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px;min-width:50px"> <span class='useNum' style="display:${"HDR"===this.#Cf?"none":"block"}padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span> <span><b class="videoMemorySize"></b></span> </div> </div> <div style="font-size:10px">${b}</div> `,m.appendChild(i)),i}updateDebugItems(i,m,g,x,_,b,y,T,w){updateDebugItemValue(i,"mipLevelCount",m),updateDebugItemValue(i,"useMipmap",g),updateDebugItemValue(i,"width",x),updateDebugItemValue(i,"height",_),"HDR"!==this.#Cf&&updateDebugItemValue(i,"useNum",b,!0);const{host:P,filename:z}=this.#bf(y);P?(updateDebugItemValue(i,"host",P),updateDebugItemValue(i,"fileName",z)):updateDebugItemValue(i,"fileName",y),updateDebugItemValue(i,"targetSrc","null"===T?"":T),updateDebugItemValue(i,"videoMemorySize",formatBytes(w))}#Rf(i,m){const g=PackedTexture.getCacheMap(),x=this.#Pf(g);let _=0;x.forEach(i=>{_+=i.texture.videoMemorySize}),i.totalUsedVideoMemory+=_,updateDebugItemValue(this.dom,"totalCount",x.size),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(_)),this.#Sf(x)}#Pf(i){const m=new Map;return i.forEach((i,g)=>{const x={gpuTexture:i.gpuTexture,uuid:i.uuid,mipLevelCount:i.gpuTexture.mipLevelCount||1,useMipmap:(i.gpuTexture.mipLevelCount||1)>1,videoMemorySize:this.#Ef(i.gpuTexture)},_={useNum:i.useNum,cacheKey:g,texture:x,src:`packed:${g.substring(0,50)}${g.length>50?"...":""}`,mappingKey:i.mappingKey};m.set(g,_)}),m}#Ef(i){const m=i.label?.match(/(\d+)x(\d+)/);if(m){const g=parseInt(m[1]),x=parseInt(m[2]),_=i.mipLevelCount||1;let b=0;for(let i=0;i<_;i++){b+=Math.max(1,g>>i)*Math.max(1,x>>i)*4}return b}return 4194304}#bf(i){if("Packed"===this.#Cf){try{const m=i.split("}_");if(m.length>=2){const i=m[0]+"}";m[1];return{host:"packed",filename:`${i.substring(0,20)}...`}}}catch{}return{host:"packed",filename:i.length>30?i.substring(0,30)+"...":i}}try{const m=new URL(i),g=m.pathname.split("/").pop()||i;return{host:m.host,filename:g}}catch{const m=i.split("_");return{host:m[0],filename:m.pop()||i}}}#Sf(i){const m=this.dom.querySelector(".item-container"),g=new Set,x="Bitmap"===this.#Cf?"cube_texture":"Cube"===this.#Cf?"bitmap_texture":"HDR"===this.#Cf?"hdr_texture":"packed_texture";m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${x}_`,"");g.add(m)});let _=0;for(const b of i.values()){const{useNum:i,cacheKey:y,texture:T}=b;let w=this.getTargetSrc(b);const{mipLevelCount:P,useMipmap:z,gpuTexture:H,uuid:$,videoMemorySize:W}=T,{width:q,height:ye}=H||{},Ge=`${x}_${T.uuid}`;let Ke=m.querySelector(`.${Ge}`);Ke=this.getUpdatedTdom(Ke,m,Ge,_,w,$),g.delete(T.uuid),this.updateDebugItems(Ke,P,z,q,ye,i,y,w,W),_++}for(let i of g)m.querySelector(`.${x}_${i}`)?.remove()}};class DebugTextureList extends ADebugItem{constructor(i="Bitmap"){super(),this.debugStatisticsDomService=new va(i)}}const ba=["totalNum3DGroups","totalNum3DObjects","totalNumInstances","totalNumDrawCalls","totalNumTriangles","totalNumPoints","totalUsedVideoMemory"];let ya=class{dom;constructor(){this.dom=document.createElement("div"),this.#Bf()}update(i){ba.forEach(m=>{const g=i[m],x="totalUsedVideoMemory"===m?`<b>${formatBytes(g)}</b>`:g;updateDebugItemValue(this.dom,m,x)})}#Bf(){const i=this.#Sf();this.dom.innerHTML=` <div class="debug-group"> ${createDebugTitle("Total State")} <div>${i}</div>  </div> `}#Sf(){return ba.map(i=>"totalUsedVideoMemory"===i?`<div class='debug-item'>${i}<span class='debug-item-title'/><b class="${i}"></b></div>`:`<div class='debug-item'>${i}<span class='debug-item-title ${i}'/></div>`).join("")}};class DebugTotalState extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new ya}}const Sa=["usedVideoMemory","viewRenderTime","num3DGroups","num3DObjects","numInstances","numDrawCalls","numTriangles","numPoints"],Ta={viewRenderTime:"ms"},wa={camera:"camera.name",scene:"scene.name",useBackgroundColor:"scene.useBackgroundColor",backgroundColor:"scene.backgroundColor",x_y:"x,y",width_height:"width,height"};let Ma=class extends ADebugStatisticsDomService{#If=0;constructor(){super(),this.init(`${createDebugTitle("ViewList")}`,!0)}update(i,m){const{viewList:g,numViews:x}=m;this.#If!==x&&(this.#Lf(g),this.#If=x),g.forEach((m,g)=>{Sa.forEach(x=>this.#Tf(m,g,x,i)),this.#wf(m,g)})}#Mf(i,m){return` <div class='debug-item'> ${wa[m]||m} <span class='debug-item-title view${i}_${m}'/> </div> `}#Lf(i){const m=this.dom.querySelector(".item-container"),g=i.map((i,m)=>{const{name:g}=i,x=Sa.map(i=>this.#Mf(m,i));return x.push('<div class="debug-sub-group">',this.#Mf(m,"x_y"),this.#Mf(m,"width_height"),this.#Mf(m,"pixelRectArray"),this.#Mf(m,"camera"),this.#Mf(m,"scene"),this.#Mf(m,"useBackgroundColor"),this.#Mf(m,"backgroundColor"),"</div>"),`${createDebugTitle(`<div class="debug-sub-group-title">${g}</div>`)}${x.join("")}`});return m.innerHTML=` <div class="debug-group"> ${g.join('<div class="div-line"></div>')} </div> `}#Tf(i,m,g,x){const{renderViewStateData:_}=i,b=`total${g.charAt(0).toUpperCase()}${g.substring(1)}`,y=_[g],T="usedVideoMemory"===g?`<b>${formatBytes(y)}</b>`:y,w=Ta[g];x[b]+=y,updateDebugItemValue(this.dom,`view${m}_${g}`,T,!1,w)}#wf(i,m){const{renderViewStateData:g,rawCamera:x,scene:_}=i,{backgroundColor:b,useBackgroundColor:y}=_,{viewportSize:T}=g,{pixelRectArray:w,x:P,y:z,width:H,height:$}=T;updateDebugItemValue(this.dom,`view${m}_x_y`,`${formatNumber(P)},${formatNumber(z)}`),updateDebugItemValue(this.dom,`view${m}_width_height`,`${H},${$}`),updateDebugItemValue(this.dom,`view${m}_pixelRectArray`,w),updateDebugItemValue(this.dom,`view${m}_useBackgroundColor`,makeBooleanDebug(0,y)),updateDebugItemValue(this.dom,`view${m}_backgroundColor`,makeColorDebug("backgroundColor",b)),updateDebugItemValue(this.dom,`view${m}_camera`,x.name),updateDebugItemValue(this.dom,`view${m}_scene`,_.name)}};class DebugViewList extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new Ma}}const formatNumber=i=>{const m=String(i);if(m.includes("%")){const i=parseFloat(m);return isNaN(i)?m:`${i.toFixed(2)}%`}if(m.includes("px")){const i=parseFloat(m);return isNaN(i)?m:`${i.toFixed(2)}px`}const g=parseFloat(m);return isNaN(g)?m:g.toFixed(2)};class DebugStatisticsDomService{dom;constructor(i){this.dom=document.createElement("div"),this.dom.style.cssText="z-index:1;position:sticky;top:0;background:#000;border-bottom:1px solid rgba(255,255,255,0.06);box-shadow:0 10px 10px rgba(0,0,0,0.5)",this.#Bf(i)}update(i,m,g,x){const _={fps:i,low1:m,low01:g,frameTime:x};Object.entries(_).forEach(([i,m])=>this.#Df(i,m))}#Bf(i){this.dom.innerHTML=' <div class="debug-group"> <div class=\'debug-item\'> <span class=\'debug-item-title\'>Performance</span> <div style="display:flex;align-items:center;justify-content:flex-end;gap:8px;"> <div style="display:flex;flex-direction:column;align-items:flex-end"> <div class="fps" style="color:#0f0;font-size:16px;font-weight:bold">60 FPS</div> <div class="frameTime" style="color:#666;font-size:10px">16.67ms</div> </div> <div style="width:1px;height:30px;background:rgba(255,255,255,0.1)"></div> <div style="display:flex;flex-direction:column;align-items:flex-end"> <div class="low1" style="color:#ff0;font-size:12px">1%:60</div> <div class="low01" style="color:#f80;font-size:12px">0.1%:60</div> </div> <div class="panel_close" style="cursor:pointer;border-radius:4px;display:flex;align-items:center;justify-content:center;color:#fff;width:50px;height:48px;background:red;margin-left:6px;font-size:10px;font-weight:bold;">CLOSE</div> </div> </div> </div> '}#Df(i,m){const g=this.dom.querySelector(`.${i}`);g&&g.innerHTML!==m&&(g.innerHTML=m)}}class Fps extends ADebugItem{#Uf=0;#xf=0;#Af=!1;#kf=[];#Of=60;#Gf=[];#Ff=600;constructor(i){super(),this.debugStatisticsDomService=new DebugStatisticsDomService(i)}update(i,m,g){if(0===this.#xf)return this.#Uf=g,void this.#xf++;const x=g-this.#Uf;if(this.#Uf=g,this.#xf++,!this.#Af){const i=document.querySelector(".panel_close");i&&(i.addEventListener("click",()=>{m.useDebugPanel=!1}),this.#Af=!0)}const _=Math.max(x,.001),b=1e3/_;this.#Gf.push(_),this.#Gf.length>this.#Ff&&this.#Gf.shift(),this.#kf.push(b),this.#kf.length>this.#Of&&this.#kf.shift();const y=Math.round(this.#kf.reduce((i,m)=>i+m,0)/this.#kf.length),{low1Fps:T,low01Fps:w}=this.#Nf();this.debugStatisticsDomService.update(`${y} FPS`,`1%:${T}`,`0.1%:${w}`,`${_.toFixed(2)}ms`)}#Nf(){if(this.#Gf.length<100)return{low1Fps:0,low01Fps:0};const i=[...this.#Gf].sort((i,m)=>m-i),m=i[Math.ceil(.01*i.length)-1],g=Math.round(1e3/m),x=Math.ceil(.001*i.length),_=i[Math.max(0,x-1)];return{low1Fps:g,low01Fps:Math.round(1e3/_)}}}class DebugRender{fps;debugTotalState;debugViewList;debugRedGPUContext;debugBitmapTextureList;debugCubeTextureList;debugHDRTextureList;debugPackedTextureList;debugIndexBufferList;debugVertexBufferList;debugUniformBufferList;debugStorageBufferList;debugBufferList;totalNum3DGroups;totalNum3DObjects;totalNumDrawCalls;totalNumInstances;totalNumTriangles;totalNumPoints;totalUsedVideoMemory;#Vf;constructor(i){this.fps=new Fps(i),this.debugTotalState=new DebugTotalState,this.debugRedGPUContext=new DebugRedGPUContext,this.debugViewList=new DebugViewList,this.debugBitmapTextureList=new DebugTextureList,this.debugCubeTextureList=new DebugTextureList("Cube"),this.debugHDRTextureList=new DebugTextureList("HDR"),this.debugPackedTextureList=new DebugTextureList("Packed"),this.debugIndexBufferList=new DebugBufferList("IndexBuffer"),this.debugVertexBufferList=new DebugBufferList("VertexBuffer"),this.debugUniformBufferList=new DebugBufferList("UniformBuffer"),this.debugStorageBufferList=new DebugBufferList("StorageBuffer"),this.debugBufferList=new DebugBufferList("Buffer"),this.#zf()}render(i,m){i.useDebugPanel?(this.#Hf(),this.fps.update(this,i,m),this.debugRedGPUContext.update(this,i,m),this.debugViewList.update(this,i,m),this.debugBitmapTextureList.update(this,i,m),this.debugCubeTextureList.update(this,i,m),this.debugHDRTextureList.update(this,i,m),this.debugPackedTextureList.update(this,i,m),this.debugIndexBufferList.update(this,i),this.debugVertexBufferList.update(this,i),this.debugUniformBufferList.update(this,i),this.debugStorageBufferList.update(this,i),this.debugBufferList.update(this,i),this.debugTotalState.update(this,i,m)):this.#$f(),this.#zf()}#zf(){this.totalNum3DGroups=0,this.totalNum3DObjects=0,this.totalNumInstances=0,this.totalNumDrawCalls=0,this.totalNumTriangles=0,this.totalNumPoints=0,this.totalUsedVideoMemory=0}#Hf(){this.#Vf||(this.#Vf=document.createElement("div"),this.#Vf.className="RedGPUDebugPanel",document.body.appendChild(this.#Vf),[this.fps.debugStatisticsDomService,this.debugTotalState.debugStatisticsDomService,this.debugRedGPUContext.debugStatisticsDomService,this.debugViewList.debugStatisticsDomService,this.debugBufferList.debugStatisticsDomService,this.debugVertexBufferList.debugStatisticsDomService,this.debugIndexBufferList.debugStatisticsDomService,this.debugUniformBufferList.debugStatisticsDomService,this.debugStorageBufferList.debugStatisticsDomService,this.debugBitmapTextureList.debugStatisticsDomService,this.debugPackedTextureList.debugStatisticsDomService,this.debugCubeTextureList.debugStatisticsDomService,this.debugHDRTextureList.debugStatisticsDomService].forEach(i=>this.#Vf.appendChild(i.dom)))}#$f(){this.#Vf&&(this.#Vf.remove(),this.#Vf=null)}}Object.freeze(DebugRender);var Ca="struct Uniforms{ backgroundColor:vec4<f32>\n}\n@group(1) @binding(0)\nvar _sampler:sampler;\n@group(1) @binding(1)\nvar _texture:texture_2d<f32>;\n@group(1) @binding(2)\nvar<uniform> uniforms:Uniforms;\n@fragment\nfn main(@location(0) fragUV:vec2<f32>) -> @location(0) vec4<f32> { var viewColor:vec4<f32>=textureSample(_texture,_sampler,fragUV); let backgroundColor=uniforms.backgroundColor; let blendedColor=vec4<f32>( viewColor.rgb + backgroundColor.rgb * (1.0 - viewColor.a), viewColor.a + backgroundColor.a * (1.0 - viewColor.a) ); return blendedColor;\n}\n",Ra="\nstruct VertexUniforms { modelMatrix:mat4x4<f32>,\n};\n@group(0) @binding(0)\nvar<uniform> vertexUniforms:VertexUniforms;\nstruct VertexOutput { @builtin(position) Position:vec4<f32>, @location(0) fragUV:vec2<f32>,\n};\n@vertex\nfn main(@builtin(vertex_index) VertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2( 1.0,1.0), vec2( 1.0,-1.0), vec2(-1.0,-1.0), vec2( 1.0,1.0), vec2(-1.0,-1.0), vec2(-1.0,1.0), ); var uv=array<vec2<f32>,6>( vec2(1.0,0.0), vec2(1.0,1.0), vec2(0.0,1.0), vec2(1.0,0.0), vec2(0.0,1.0), vec2(0.0,0.0), ); var output:VertexOutput; output.Position=vertexUniforms.modelMatrix * vec4<f32>(pos[VertexIndex],0.0,1.0); output.fragUV=uv[VertexIndex]; return output;\n}\n";const Pa=parseWGSL(Ra),Ea=parseWGSL(Ca),Ba=Pa.uniforms.vertexUniforms;class FinalRender{#Wf=[];#Kf=[];#jf;#Xf;#qf;#Yf;#Zf;#Jf=[];#Os;#Qf=[];#ed=[];#pe;#td=[];#nd=[];constructor(){}render(i,m){const{sizeManager:g,gpuDevice:x,antialiasingManager:_}=i,{changedMSAA:b,useMSAA:y}=_,{pixelRectObject:T}=g,{width:w,height:P}=T;if(0===w||0===P)return;const z=this.#rd(i),H=x.createCommandEncoder(),$=H.beginRenderPass(z);$.setViewport(0,0,w,P,0,1),$.setScissorRect(0,0,w,P),this.#jf&&!b||this.#id(i),this.#ad(i,$,m.map(i=>{const m=i.colorAttachments[0];return m.postEffectView||m.pickingView||m.resolveTarget||m.view}),w,P,y),$.end(),x.queue.submit([H.finish()])}#sd(i,m){{const{scene:g,redGPUContext:x}=i,{gpuDevice:_}=x,{backgroundColor:b,useBackgroundColor:y}=g,T=y?b.rgbaNormal:[0,0,0,0],w=x.backgroundColor.rgbaNormal;let P;const z=[T[0]*T[3],T[1]*T[3],T[2]*T[3],T[3]],H=[w[0]*w[3],w[1]*w[3],w[2]*w[3],w[3]];P=[z[0]+H[0]*(1-T[3]),z[1]+H[1]*(1-T[3]),z[2]+H[2]*(1-T[3]),T[3]+w[3]*(1-T[3])],this.#nd[m][0]=P[0],this.#nd[m][1]=P[1],this.#nd[m][2]=P[2],this.#nd[m][3]=P[3],_.queue.writeBuffer(this.#td[m],0,this.#nd[m])}}#ad(i,m,g,x,_,b){const{gpuDevice:y}=i;g.forEach((g,b)=>{const w=i.viewList[b],{x:P,y:z,width:H,height:$}=w.pixelRectObject,W=create$2();T(W,0,1,0,1,-1e3,1e3),scale(W,W,[1/x,1/_,1]),translate(W,W,[H/2+P,_-$/2-z,0]),scale(W,W,[H/2,$/2,1]),this.#od(i,b);const q=this.#Wf[b],ye=this.#Kf[b];y.queue.writeBuffer(q.gpuBuffer,Ba.members.modelMatrix.uniformOffset,W);if(i.antialiasingManager.changedMSAA||!this.#Qf[b]||this.#Qf[b].width!==H||this.#Qf[b].height!==$||this.#ed[b]!==g){this.#td[b]||(this.#td[b]=i.gpuDevice.createBuffer({label:`FINAL_RENDER_FRAGMENT_BUFFER_${b}`,size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),this.#nd[b]=new Float32Array([1,0,0,1]));const m={layout:this.#Yf,label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:this.#pe.gpuSampler},{binding:1,resource:g},{binding:2,resource:{buffer:this.#td[b],offset:0,size:this.#td[b].size}}]};this.#Jf[b]=y.createBindGroup(m),this.#Qf[b]={width:H||1,height:$||1},this.#ed[b]=g}this.#sd(w,b),m.setPipeline(this.#ud(i)),m.setBindGroup(0,ye),m.setBindGroup(1,this.#Jf[b]),m.draw(6,1,0,0)})}#id(i){const{resourceManager:m}=i;this.#jf=m.createBindGroupLayout("FINAL_RENDER_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(Pa,0)),this.#Xf=m.createGPUShaderModule("VERTEX_MODULE_FINAL_RENDER",{code:Ra}),this.#qf={module:this.#Xf,entryPoint:"main"},this.#Zf=m.createGPUShaderModule("FRAGMENT_MODULE_FINAL_RENDER",{code:Ca}),this.#Yf=m.createBindGroupLayout("FINAL_RENDER_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Ea,1)),this.#pe=new Sampler(i,{minFilter:"linear"})}#od(i,m){const{gpuDevice:g}=i;if(!this.#Wf[m]){const x=new ArrayBuffer(Ba.arrayBufferByteLength),_=this.#Wf[m]=new UniformBuffer(i,x,`FinalRender_View(${m})_VertexUniform`),b={layout:this.#jf,label:"VERTEX_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:{buffer:_.gpuBuffer,offset:0,size:_.size}}]};this.#Kf[m]=g.createBindGroup(b)}}#rd(i){const{backgroundColor:m,gpuContext:g}=i;return{colorAttachments:[{view:g.getCurrentTexture().createView({label:"FINAL_RENDER"}),clearValue:{r:0,g:0,b:0,a:0},loadOp:pr.CLEAR,storeOp:gr.STORE}]}}#ud(i){if(!this.#Os||i.antialiasingManager.changedMSAA){const{gpuDevice:m}=i,g={label:"PIPELINE_DESCRIPTOR_FINAL_RENDER",layout:m.createPipelineLayout({label:"FINAL_RENDER_PIPELINE_LAYOUT",bindGroupLayouts:[this.#jf,this.#Yf]}),vertex:this.#qf,fragment:{module:this.#Zf,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:{srcFactor:en.SRC_ALPHA,dstFactor:en.ONE_MINUS_SRC_ALPHA,operation:tn.ADD},alpha:{srcFactor:en.SRC_ALPHA,dstFactor:en.ONE_MINUS_SRC_ALPHA,operation:tn.ADD}}}]}};this.#Os=m.createRenderPipeline(g)}return this.#Os}}const renderListForLayer=(i,m,g="pipeline")=>{let x=0;const _=i.length,{currentRenderPassEncoder:b}=m;for(b.setBindGroup(0,m.view.systemUniform_Vertex_UniformBindGroup);x<_;x++){const _=i[x];if(_.gpuRenderInfo){const i=_._geometry,x=_._material;i?m.num3DObjects++:m.num3DGroups++;const{gpuRenderInfo:y}=_,{vertexUniformBindGroup:T}=y;if(y[g]||("shadowPipeline"===g?y.shadowPipeline=_.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("drawDirectionalShadowDepth")?createBasePipeline(_,_.gpuRenderInfo.vertexShaderModule,_.gpuRenderInfo.vertexBindGroupLayout,Kn):null:"pickingPipeline"===g&&(y.pickingPipeline=_.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("picking")?createBasePipeline(_,_.gpuRenderInfo.vertexShaderModule,_.gpuRenderInfo.vertexBindGroupLayout,jn):null)),i&&y[g]){b.setPipeline(y[g]);const{gpuBuffer:_}=i.vertexBuffer,{fragmentUniformBindGroup:w}=x.gpuRenderInfo;if(m.prevVertexGpuBuffer!==_&&(b.setVertexBuffer(0,_),m.prevVertexGpuBuffer=_),b.setBindGroup(1,T),m.prevFragmentUniformBindGroup!==w&&(b.setBindGroup(2,w),m.prevFragmentUniformBindGroup=w),m.numDrawCalls++,i.indexBuffer){const{indexBuffer:g}=i,{indexCount:x,triangleCount:_,gpuBuffer:y,format:T}=g;b.setIndexBuffer(y,T),b.drawIndexed(x,1,0,0,0),m.numTriangles+=_,m.numPoints+=x}else{const{vertexBuffer:g}=i,{vertexCount:x,triangleCount:_}=g;b.draw(x,1,0,0),m.numTriangles+=_,m.numPoints+=x}}}}m.prevVertexGpuBuffer=null,m.prevFragmentUniformBindGroup=null,m.prevVertexGpuBuffer=null};class Renderer{#ld;#cd;#hd;#fd=new GltfAnimationLooperManager;constructor(){}start(i,m){cancelAnimationFrame(i.currentRequestAnimationFrame);const HD_render=g=>{m?.(g),i.currentTime=g,this.renderFrame(i,g),this.#hd.render(i,g),i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)};i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)}stop(i){cancelAnimationFrame(i.currentRequestAnimationFrame),i.currentRequestAnimationFrame=null}renderFrame(i,m){this.#cd||(this.#cd=new FinalRender),this.#hd||(this.#hd=new DebugRender(i));const g=[];{let x=0;const _=i.viewList.length;for(;x<_;x++){const _=i.viewList[x];g.push(this.renderView(_,m))}}this.#cd.render(i,g),i.antialiasingManager.changedMSAA=!1}renderView(i,m){const{redGPUContext:g,camera:x,pickingManager:_,pixelRectObject:b,renderViewStateData:y}=i,{colorAttachment:T,depthStencilAttachment:w,gBufferNormalTextureAttachment:P,gBufferMotionVectorTextureAttachment:z}=this.#dd(i),H=g.gpuDevice.createCommandEncoder({label:"ViewRender_MainCommandEncoder"}),$={label:`${i.name} Basic Render Pass`,colorAttachments:[T,P,z],depthStencilAttachment:w};return i.renderViewStateData.reset(null,m),b.width&&b.height&&(x.update?.(i,m),this.#md(i),this.#pd(i,H),this.#gd(i,H),this.#xd(i,H,$),this.#_d(i,H,$,w)),$.colorAttachments[0].postEffectView=i.postEffectManager.render().textureView,g.gpuDevice.queue.submit([H.finish(),this.#vd(g,y)]),i.renderViewStateData.viewRenderTime=performance.now()-i.renderViewStateData.startTime,_?.checkEvents(i,m),$}#pd(i,m){const{scene:g}=i,{shadowManager:x}=g,{directionalShadowManager:_}=x;if(_.shadowDepthTextureView){const g={label:`${i.name} Shadow Render Pass`,colorAttachments:[],depthStencilAttachment:{view:_.shadowDepthTextureView,depthClearValue:1,depthLoadOp:pr.CLEAR,depthStoreOp:gr.STORE}},x=m.beginRenderPass(g);this.#bd(i,x,!0),this.#yd(i,x,!0,!1),_.castingList.length&&((i,m)=>{const{renderViewStateData:g,scene:x}=i;g.currentRenderPassEncoder=m;const{shadowManager:_}=x,{directionalShadowManager:b}=_,{castingList:y}=b;renderListForLayer(y,g,"shadowPipeline")})(i,x),x.end(),_.resetCastingList()}}#xd(i,m,g){const{renderViewStateData:x,skybox:_,grid:b,axis:y}=i,T=m.beginRenderPass(g);{const m=i.viewRenderTextureManager.renderPath1ResultTextureView;this.#bd(i,T),this.#yd(i,T,!1,!0,m)}x.currentRenderPassEncoder=T,_&&_.render(x),y&&y.render(x),((i,m)=>{const{renderViewStateData:g,scene:x}=i;g.currentRenderPassEncoder=m;const{children:_}=x;let b=0;const y=_.length;for(;b<y;b++)_[b].render(g);g.prevVertexGpuBuffer=null,g.prevFragmentUniformBindGroup=null,g.prevVertexGpuBuffer=null,m.executeBundles(g.bundleListBasicList)})(i,T),b&&b.render(x),((i,m)=>{const{renderViewStateData:g,rawCamera:x}=i;g.currentRenderPassEncoder=m;const{bundleListAlphaLayer:_,bundleListTransparentLayer:b,bundleListParticleLayer:y}=g;_.length&&m.executeBundles(_);const{x:T,y:w,z:P}=x;b.length&&m.executeBundles(sortTransparentObjects({x:T,y:w,z:P},b)),y.length&&m.executeBundles(y)})(i,T),T.end()}#_d(i,m,g,x){const{redGPUContext:_,renderViewStateData:b}=i,{antialiasingManager:y}=_,{useMSAA:T}=y;if(i.renderViewStateData.bundleListRender2PathLayer.length){const{mipmapGenerator:y}=_.resourceManager;let w=i.viewRenderTextureManager.renderPath1ResultTexture,P=T?i.viewRenderTextureManager.gBufferColorResolveTexture:i.viewRenderTextureManager.gBufferColorTexture;P||(T?console.error("MSAA가 활성화되어 있지만 gBufferColorResolveTexture가 정의되지 않았습니다"):console.error("gBufferColorTexture가 정의되지 않았습니다")),w||console.error("renderPath1ResultTexture가 정의되지 않았습니다"),m.copyTextureToTexture({texture:P},{texture:w},{width:i.pixelRectObject.width,height:i.pixelRectObject.height,depthOrArrayLayers:1}),y.generateMipmap(w,i.viewRenderTextureManager.renderPath1ResultTextureDescriptor,!0);const z=m.beginRenderPass({label:`${i.name} 2Path Render Pass`,colorAttachments:[...g.colorAttachments].map(i=>({...i,loadOp:pr.LOAD})),depthStencilAttachment:{...x,depthLoadOp:pr.LOAD}});z.executeBundles(b.bundleListRender2PathLayer),z.end()}}#gd(i,m){const{pickingManager:g}=i;if(g&&g.castingList.length){g.checkTexture(i);const x={label:`${i.name} Picking Render Pass`,colorAttachments:[{view:g.pickingGPUTextureView,clearValue:{r:0,g:0,b:0,a:0},loadOp:pr.CLEAR,storeOp:gr.STORE}],depthStencilAttachment:{view:g.pickingDepthGPUTextureView,depthClearValue:1,depthLoadOp:pr.CLEAR,depthStoreOp:gr.STORE}},_=m.beginRenderPass(x);this.#bd(i,_),this.#yd(i,_,!1,!1),((i,m)=>{const{renderViewStateData:g,pickingManager:x}=i;g.currentRenderPassEncoder=m;const{castingList:_}=x;renderListForLayer(_,g,"pickingPipeline")})(i,_),_.end()}}#md(i){const{taa:m}=i,g=m.frameIndex||0,x=m.jitterStrength,_=g%32,b=(this.#Sd(_+1,2)-.5)*x,y=(this.#Sd(_+1,3)-.5)*x;i.setJitterOffset(b,y)}#Sd(i,m){let g=0,x=1/m,_=i;for(;_>0;)g+=_%m*x,_=Math.floor(_/m),x/=m;return g}#vd(i,m){const{animationList:g,skinList:x}=m,_=x.length,b=g.length,{gpuDevice:y}=i,T=y.createCommandEncoder({label:"BatchUpdateSkinMatrices_CommandEncoder"}),w=T.beginComputePass();b&&this.#fd.render(i,m.timestamp,w,g.flat());for(let m=0;m<_;m++){const g=x[m],_=g.animationInfo.skinInfo;_.usedJoints||(_.usedJoints=_.getUsedJointIndices(g));const b=16*(1+_.usedJoints.length);_.jointData&&_.jointData.length===b||(_.jointData=new Float32Array(b),_.computeShader=null),_.invertNodeGlobalTransform=_.invertNodeGlobalTransform||new Float32Array(g.modelMatrix.length);{const i=g.modelMatrix,m=_.invertNodeGlobalTransform,x=i[0],b=i[1],y=i[2],T=i[3],w=i[4],P=i[5],z=i[6],H=i[7],$=i[8],W=i[9],q=i[10],ye=i[11],Ge=i[12],Ke=i[13],je=i[14],Xe=i[15],Ye=P*(q*Xe-ye*je)-z*(W*Xe-ye*Ke)+H*(W*je-q*Ke),Ze=-(w*(q*Xe-ye*je)-z*($*Xe-ye*Ge)+H*($*je-q*Ge)),Je=w*(W*Xe-ye*Ke)-P*($*Xe-ye*Ge)+H*($*Ke-W*Ge),Qe=-(w*(W*je-q*Ke)-P*($*je-q*Ge)+z*($*Ke-W*Ge)),et=-(b*(q*Xe-ye*je)-y*(W*Xe-ye*Ke)+T*(W*je-q*Ke)),at=x*(q*Xe-ye*je)-y*($*Xe-ye*Ge)+T*($*je-q*Ge),ht=-(x*(W*Xe-ye*Ke)-b*($*Xe-ye*Ge)+T*($*Ke-W*Ge)),ft=x*(W*je-q*Ke)-b*($*je-q*Ge)+y*($*Ke-W*Ge),gt=b*(z*Xe-H*je)-y*(P*Xe-H*Ke)+T*(P*je-z*Ke),xt=-(x*(z*Xe-H*je)-y*(w*Xe-H*Ge)+T*(w*je-z*Ge)),vt=x*(P*Xe-H*Ke)-b*(w*Xe-H*Ge)+T*(w*Ke-P*Ge),bt=-(x*(P*je-z*Ke)-b*(w*je-z*Ge)+y*(w*Ke-P*Ge)),yt=-(b*(z*ye-H*q)-y*(P*ye-H*W)+T*(P*q-z*W)),St=x*(z*ye-H*q)-y*(w*ye-H*$)+T*(w*q-z*$),Tt=-(x*(P*ye-H*W)-b*(w*ye-H*$)+T*(w*W-P*$)),wt=x*(P*q-z*W)-b*(w*q-z*$)+y*(w*W-P*$),Mt=x*Ye+b*Ze+y*Je+T*Qe;if(Math.abs(Mt)<1e-10)console.error("Matrix is not invertible (determinant is zero or near zero)"),m[0]=1,m[1]=0,m[2]=0,m[3]=0,m[4]=0,m[5]=1,m[6]=0,m[7]=0,m[8]=0,m[9]=0,m[10]=1,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1;else{const i=1/Mt;m[0]=Ye*i,m[1]=et*i,m[2]=gt*i,m[3]=yt*i,m[4]=Ze*i,m[5]=at*i,m[6]=xt*i,m[7]=St*i,m[8]=Je*i,m[9]=ht*i,m[10]=vt*i,m[11]=Tt*i,m[12]=Qe*i,m[13]=ft*i,m[14]=bt*i,m[15]=wt*i}}_.computeShader||_.createCompute(i,y,g.animationInfo.skinInfo.vertexStorageBuffer,g.animationInfo.weightBuffer,g.animationInfo.jointBuffer);{const i=_.usedJoints;let m=i.length;const g=_.jointData;for(;m--;)g.set(_.joints[i[m]].modelMatrix,16*(m+1));g.set(_.invertNodeGlobalTransform,0),y.queue.writeBuffer(_.uniformBuffer,0,g)}w.setPipeline(_.computePipeline),w.setBindGroup(0,_.bindGroup),w.dispatchWorkgroups(Math.ceil(g.geometry.vertexBuffer.vertexCount/_.WORK_SIZE))}return w.end(),T.finish()}#dd(i){const{scene:m,redGPUContext:g,viewRenderTextureManager:x}=i,{depthTextureView:_,gBufferColorTextureView:b,gBufferColorResolveTextureView:y,gBufferNormalTextureView:T,gBufferNormalResolveTextureView:w,gBufferMotionVectorTextureView:P,gBufferMotionVectorResolveTextureView:z}=x,{antialiasingManager:H}=g,{useMSAA:$}=H,W={view:b,clearValue:{r:0,g:0,b:0,a:0},loadOp:pr.CLEAR,storeOp:gr.STORE},q={view:_,depthClearValue:1,depthLoadOp:pr.CLEAR,depthStoreOp:gr.STORE},ye={view:T,clearValue:{r:0,g:0,b:0,a:0},loadOp:pr.CLEAR,storeOp:gr.STORE},Ge={view:P,clearValue:{r:0,g:0,b:0,a:0},loadOp:pr.CLEAR,storeOp:gr.STORE};return $&&(W.resolveTarget=y,ye.resolveTarget=w,Ge.resolveTarget=z),{colorAttachment:W,depthStencilAttachment:q,gBufferNormalTextureAttachment:ye,gBufferMotionVectorTextureAttachment:Ge}}#bd(i,m,g=!1){const{scene:x,pixelRectObject:_}=i,{shadowManager:b}=x,{directionalShadowManager:y}=b;if(g){const i=y.shadowDepthTextureSize,g=y.shadowDepthTextureSize;m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g)}else{const{width:i,height:g}=_;this.#ld&&this.#ld.width===i&&this.#ld.height===g||(m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g),this.#ld={width:i,height:g})}}#yd(i,m,g=!1,x=!0,_=null){i.update(g,x,_),m.setBindGroup(0,i.systemUniform_Vertex_UniformBindGroup)}}create$2();var Ia=Object.freeze({__proto__:null,isHexColor:isHexColor,isUint:isUint,validateNumber:validateNumber,validateNumberRange:validateNumberRange,validatePositiveNumberRange:validatePositiveNumberRange,validateRedGPUContext:validateRedGPUContext,validateUintRange:validateUintRange});class AMultiPassPostEffect extends ASinglePassPostEffect{#Td=[];#An=0;constructor(i,m){super(i),this.#Td.push(...m)}get videoMemorySize(){return this.#Ri(),this.#An}get passList(){return this.#Td}clear(){this.#Td.forEach(i=>i.clear())}render(i,m,g,x){let _;return this.#Td.forEach((b,y)=>{y&&(x=_),_=b.render(i,m,g,x)}),_}#Ri(){this.#An=0,this.#Td.forEach(i=>{this.#An+=i.videoMemorySize})}}Object.freeze(AMultiPassPostEffect);var La=Object.freeze({__proto__:null,AMultiPassPostEffect:AMultiPassPostEffect,ASinglePassPostEffect:ASinglePassPostEffect,createBasicPostEffectCode:createBasicPostEffectCode});class BrightnessContrast extends ASinglePassPostEffect{#wd=0;#Md=0;constructor(i){super(i),this.init(i,"POST_EFFECT_BRIGHTNESS_CONTRAST",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet brightness_value:f32=uniforms.brightness/255.0;\nlet contrast_value:f32=uniforms.contrast/255.0;\nvar tempColor:vec3<f32>;\nif ( contrast_value > 0.0 ) { tempColor=( color.rgb - 0.5 )/( 1.0 - contrast_value ) + 0.5;\n}else { tempColor=( color.rgb - 0.5 ) * ( 1.0 + contrast_value ) + 0.5;\n}\ncolor=vec4<f32>(tempColor + brightness_value,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms { brightness:f32, contrast:f32\n};\n"))}get brightness(){return this.#wd}set brightness(i){validateNumberRange(i,-150,150),this.#wd=i,this.updateUniform("brightness",i)}get contrast(){return this.#Md}set contrast(i){validateNumberRange(i,-50,100),this.#Md=i,this.updateUniform("contrast",i)}}Object.freeze(BrightnessContrast);class ColorBalance extends ASinglePassPostEffect{#Cd=0;#Rd=0;#Pd=0;#Ed=0;#Bd=0;#Id=0;#Ld=0;#Dd=0;#Ud=0;#Ad=!0;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_BALANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet original_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nlet shadow_weight=1.0 - smoothstep(0.0,0.5,original_luminance);\nlet highlight_weight=smoothstep(0.5,1.0,original_luminance);\nlet midtone_weight=1.0 - shadow_weight - highlight_weight;\nlet cyan_red=shadow_weight * uniforms.shadowCyanRed +\nmidtone_weight * uniforms.midtoneCyanRed +\nhighlight_weight * uniforms.highlightCyanRed;\nlet magenta_green=shadow_weight * uniforms.shadowMagentaGreen +\nmidtone_weight * uniforms.midtoneMagentaGreen +\nhighlight_weight * uniforms.highlightMagentaGreen;\nlet yellow_blue=shadow_weight * uniforms.shadowYellowBlue +\nmidtone_weight * uniforms.midtoneYellowBlue +\nhighlight_weight * uniforms.highlightYellowBlue;\ncolor.r +=cyan_red * 0.01;\ncolor.g +=magenta_green * 0.01;\ncolor.b +=yellow_blue * 0.01;\nlet adjusted_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nif (uniforms.preserveLuminosity==1 && adjusted_luminance > 0.0) { let ratio=original_luminance/adjusted_luminance; color=color * ratio;\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms { shadowCyanRed:f32, shadowMagentaGreen:f32, shadowYellowBlue:f32, midtoneCyanRed:f32, midtoneMagentaGreen:f32, midtoneYellowBlue:f32, highlightCyanRed:f32, highlightMagentaGreen:f32, highlightYellowBlue:f32, preserveLuminosity:u32\n};\n"))}get shadowCyanRed(){return this.#Cd}set shadowCyanRed(i){validateNumberRange(i,-100,100),this.#Cd=i,this.updateUniform("shadowCyanRed",i)}get shadowMagentaGreen(){return this.#Rd}set shadowMagentaGreen(i){validateNumberRange(i,-100,100),this.#Rd=i,this.updateUniform("shadowMagentaGreen",i)}get shadowYellowBlue(){return this.#Pd}set shadowYellowBlue(i){validateNumberRange(i,-100,100),this.#Pd=i,this.updateUniform("shadowYellowBlue",i)}get midtoneCyanRed(){return this.#Ed}set midtoneCyanRed(i){validateNumberRange(i,-100,100),this.#Ed=i,this.updateUniform("midtoneCyanRed",i)}get midtoneMagentaGreen(){return this.#Bd}set midtoneMagentaGreen(i){validateNumberRange(i,-100,100),this.#Bd=i,this.updateUniform("midtoneMagentaGreen",i)}get midtoneYellowBlue(){return this.#Id}set midtoneYellowBlue(i){validateNumberRange(i,-100,100),this.#Id=i,this.updateUniform("midtoneYellowBlue",i)}get highlightCyanRed(){return this.#Ld}set highlightCyanRed(i){validateNumberRange(i,-100,100),this.#Ld=i,this.updateUniform("highlightCyanRed",i)}get highlightMagentaGreen(){return this.#Dd}set highlightMagentaGreen(i){validateNumberRange(i,-100,100),this.#Dd=i,this.updateUniform("highlightMagentaGreen",i)}get highlightYellowBlue(){return this.#Ud}set highlightYellowBlue(i){validateNumberRange(i,-100,100),this.#Ud=i,this.updateUniform("highlightYellowBlue",i)}get preserveLuminosity(){return this.#Ad}set preserveLuminosity(i){this.#Ad=i,this.updateUniform("preserveLuminosity",i)}}Object.freeze(ColorBalance);class ColorTemperatureTint extends ASinglePassPostEffect{#kd=6500;#Od=0;#Gd=100;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_TEMPERATURE_TINT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet temp=uniforms.temperature;\nvar tempRGB:vec3<f32>;\nif (temp <=6600.0) { tempRGB.r=1.0;\n} else { let t=temp - 6600.0; tempRGB.r=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp <=6600.0) { let t=temp; tempRGB.g=clamp(0.39008157 * log(t) - 0.63184144,0.0,1.0);\n} else { let t=temp - 6600.0; tempRGB.g=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp >=6600.0) { tempRGB.b=1.0;\n} else if (temp <=1900.0) { tempRGB.b=0.0;\n} else { let t=temp - 1000.0; tempRGB.b=clamp(0.543206789 * log(t) - 1.19625408,0.0,1.0);\n}\nlet neutralTemp:vec3<f32>=vec3<f32>(1.0,1.0,1.0);\nlet tempAdjust:vec3<f32>=tempRGB/neutralTemp;\nlet tintValue=uniforms.tint * 0.01;\nvar tintRGB:vec3<f32>;\nif (tintValue >=0.0) { tintRGB=vec3<f32>(1.0 - tintValue * 0.2,1.0,1.0 - tintValue * 0.2);\n} else { let mag=-tintValue; tintRGB=vec3<f32>(1.0,1.0 - mag * 0.2,1.0);\n}\nlet colorAdjust=tempAdjust * tintRGB;\nlet strength=uniforms.strength * 0.01;\nlet finalAdjust=mix(vec3<f32>(1.0,1.0,1.0),colorAdjust,strength);\ncolor=vec4<f32>(color.rgb * finalAdjust,color.a);\ncolor=vec4<f32>(clamp(color.rgb,vec3<f32>(0.0),vec3<f32>(1.0)),color.a);\ntextureStore(outputTexture,index,color);\n","struct Uniforms { temperature:f32, tint:f32, strength:f32\n};\n")),this.strength=this.#Gd,this.tint=this.#Od,this.temperature=this.#kd}get temperature(){return this.#kd}set temperature(i){validateNumberRange(i,1e3,2e4),this.#kd=i,this.updateUniform("temperature",i)}get tint(){return this.#Od}set tint(i){validateNumberRange(i,-100,100),this.#Od=i,this.updateUniform("tint",i)}get strength(){return this.#Gd}set strength(i){validateNumberRange(i,0,100),this.#Gd=i,this.updateUniform("strength",i)}setWarmTone(){this.temperature=3200,this.tint=-10}setCoolTone(){this.temperature=8e3,this.tint=10}setNeutral(){this.temperature=6500,this.tint=0}setCandleLight(){this.temperature=1900,this.tint=-5}setDaylight(){this.temperature=5600,this.tint=0}setCloudyDay(){this.temperature=7500,this.tint=5}setNeonLight(){this.temperature=9e3,this.tint=15}}Object.freeze(ColorTemperatureTint);class Grayscale extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_GRAYSCALE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index );\nlet gray=(color.r + color.g + color.b)/3.0;\ntextureStore(outputTexture,index,vec4<f32>( gray,gray,gray,color.a) );\n",""))}}Object.freeze(Grayscale);class HueSaturation extends ASinglePassPostEffect{#Fd=0;#Nd=0;constructor(i){super(i),this.init(i,"POST_EFFECT_HUE_SATURATION",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet hue_value:f32=uniforms.hue/180.0;\nlet saturation_value:f32=uniforms.saturation/100.0;\nlet angle:f32=hue_value * 3.1415926535897932384626433832795;\nlet s:f32=sin(angle);\nlet c:f32=cos(angle);\nvar weights:vec3<f32>=(vec3<f32>(2.0 * c,-sqrt(3.0) * s - c,sqrt(3.0) * s - c) + 1.0)/3.0;\nlet len:f32=length(color.rgb);\ncolor=vec4<f32>( vec3<f32>( dot(color.rgb,weights.xyz), dot(color.rgb,weights.zxy), dot(color.rgb,weights.yzx) ), color.a\n);\nlet average:f32=(color.r + color.g + color.b)/3.0;\nif (saturation_value > 0.0) { color=vec4<f32>( color.rgb + (average - color.rgb) * (1.0 - 1.0/(1.001 - saturation_value)), color.a );\n} else { color=vec4<f32>( color.rgb + (average - color.rgb) * (-saturation_value), color.a );\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms { hue:f32, saturation:f32\n};\n"))}get hue(){return this.#Fd}set hue(i){validateNumberRange(i,-180,180),this.#Fd=i,this.updateUniform("hue",i)}get saturation(){return this.#Nd}set saturation(i){validateNumberRange(i,-100,100),this.#Nd=i,this.updateUniform("saturation",i)}}Object.freeze(HueSaturation);class Invert extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_INVERT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\ncolor.r=1.0 - color.r;\ncolor.g=1.0 - color.g;\ncolor.b=1.0 - color.b;\ntextureStore(outputTexture,index,color );\n",""))}}Object.freeze(Invert);class Threshold extends ASinglePassPostEffect{#Vd=128;constructor(i){super(i),this.init(i,"POST_EFFECT_THRESHOLD",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet threshold_value:f32=uniforms.threshold/255.0;\nvar v=0.0;\nif( 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b >=threshold_value) { v=1.0;\n}\ncolor=vec4<f32>(v,v,v,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms { threshold:f32\n};\n")),this.threshold=this.#Vd}get threshold(){return this.#Vd}set threshold(i){validateNumberRange(i,1,255),this.#Vd=i,this.updateUniform("threshold",i)}}Object.freeze(Threshold);class Vibrance extends ASinglePassPostEffect{#zd=0;#Nd=0;constructor(i){super(i),this.init(i,"POST_EFFECT_VIBRANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet originalColor=color;\nlet luminance=0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\nif (uniforms.saturation !=0.0) { let saturationFactor=1.0 + uniforms.saturation * 0.01; color=vec4<f32>( mix(luminance,color.r,saturationFactor), mix(luminance,color.g,saturationFactor), mix(luminance,color.b,saturationFactor), color.a );\n}\nif (uniforms.vibrance !=0.0) { let maxComponent=max(max(color.r,color.g),color.b); let minComponent=min(min(color.r,color.g),color.b); let currentSaturation=maxComponent - minComponent; let protectionFactor=1.0/(1.0 + exp(6.0 * (currentSaturation - 0.6))); var skinToneProtection=1.0; if (color.r > color.g && color.g > color.b) { let skinToneAmount=(color.r - color.b)/max(color.r,0.001); skinToneProtection=1.0 - smoothstep(0.3,0.8,skinToneAmount) * 0.7; } let finalProtection=protectionFactor * skinToneProtection; let vibranceStrength=uniforms.vibrance * 0.01 * finalProtection; let vibranceFactor=1.0 + vibranceStrength; color=vec4<f32>( mix(luminance,color.r,vibranceFactor), mix(luminance,color.g,vibranceFactor), mix(luminance,color.b,vibranceFactor), color.a );\n}\ncolor=clamp(color,vec4<f32>(0.0),vec4<f32>(1.0));\ntextureStore(outputTexture,index,color);\n","struct Uniforms { vibrance:f32, saturation:f32\n};\n"))}get vibrance(){return this.#zd}set vibrance(i){validateNumberRange(i,-100,100),this.#zd=i,this.updateUniform("vibrance",i)}get saturation(){return this.#Nd}set saturation(i){validateNumberRange(i,-100,100),this.#Nd=i,this.updateUniform("saturation",i)}}Object.freeze(Vibrance);const Da=[0,0,0,0,0,1,0,0,0,0,0,0],Ua=[0,-1,0,0,-1,5,-1,0,0,-1,0,0],Aa=[1,1,1,0,1,1,1,0,1,1,1,0],ka=[0,1,0,0,1,-4,1,0,0,1,0,0],Oa=[-2,-1,0,0,-1,1,1,0,0,1,2,0];class Convolution extends ASinglePassPostEffect{static NORMAL=Da;static SHARPEN=Ua;static BLUR=Aa;static EDGE=ka;static EMBOSE=Oa;#Hd=Aa;constructor(i){super(i),this.init(i,"POST_EFFECT_CONVOLUTION",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet perPX=vec2<f32>(1.0/dimW,1.0/dimH);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=vec4<f32>(0.0);\nlet kernelWeight_value:f32=uniforms.kernelWeight;\nlet kernel_value:mat3x3<f32>=uniforms.kernel;\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,-1)) * kernel_value[0][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,-1)) * kernel_value[0][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,-1)) * kernel_value[0][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,0)) * kernel_value[1][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,0)) * kernel_value[1][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,0)) * kernel_value[1][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,1)) * kernel_value[2][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,1)) * kernel_value[2][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,1)) * kernel_value[2][2];\ntextureStore(outputTexture,index,color/kernelWeight_value );\n","struct Uniforms { kernelWeight:f32, kernel:mat3x3<f32>\n};\n")),this.kernel=this.#Hd}get kernel(){return this.#Hd}set kernel(i){this.#Hd=i;let m=0;for(const i in this.#Hd)m+=this.#Hd[i];this.updateUniform("kernelWeight",m),this.updateUniform("kernel",i)}}Object.freeze(Convolution);class Blur extends AMultiPassPostEffect{#$d;constructor(i){super(i,[new Convolution(i)]),this.#$d=this.passList[0],this.#$d.kernel=Convolution.BLUR}render(i,m,g,x){return this.#$d.render(i,m,g,x)}}Object.freeze(Blur);class BlurX extends ASinglePassPostEffect{#J=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_X",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=(t + offset - 0.5)/loopSize; var weight=1.0 - abs(percent); var ix=clamp((f32(global_id.x) + f32(size_value * percent)),0.0,dimW - 1.0); let delta=vec2<i32>(i32(ix),i32(global_id.y)); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms { size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#J}get size(){return this.#J}set size(i){validateNumberRange(i,0),this.#J=i,this.updateUniform("size",i)}}Object.freeze(BlurX);class BlurY extends ASinglePassPostEffect{#J=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_Y",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimH=f32(dimensions.y);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=(t + offset - 0.5)/loopSize; var weight=1.0 - abs(percent); var iy=clamp((f32(global_id.y) + f32(size_value * percent)),0.0,dimH - 1.0); let delta=vec2<i32>(i32(global_id.x),i32(iy)); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms { size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#J}get size(){return this.#J}set size(i){validateNumberRange(i,0),this.#J=i,this.updateUniform("size",i)}}Object.freeze(BlurY);class DirectionalBlur extends ASinglePassPostEffect{#Wd=15;#Kd=0;constructor(i){super(i),this.init(i,"POST_EFFECT_DIRECTIONAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet direction=vec2<f32>(uniforms.directionX,uniforms.directionY);\nlet dirLength=length(direction);\nlet normalizedDir=select(vec2<f32>(0.0),direction/dirLength,dirLength > 0.0);\nlet dir=normalizedDir * uniforms.amount;\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=1.0 - (t + offset - 0.5)/loopSize; var weight=3.0 * (percent - percent * percent); let deltaPercent=dir * percent; let delta=vec2<i32>( i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)), i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms { amount:f32, directionX:f32, directionY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#Wd,this.angle=this.#Kd}get angle(){return this.#Kd}set angle(i){validateNumber(i),this.#Kd=i%360,this.#jd()}get amount(){return this.#Wd}set amount(i){validateNumberRange(i,0),this.#Wd=i,this.updateUniform("amount",i)}#jd(){const i=this.#Kd*Math.PI/180,m=Math.cos(i),g=Math.sin(i);this.updateUniform("directionX",m),this.updateUniform("directionY",g)}}Object.freeze(DirectionalBlur);class GaussianBlur extends AMultiPassPostEffect{#J=32;constructor(i){super(i,[new BlurX(i),new BlurY(i)])}get size(){return this.#J}set size(i){this.#J=i,this.passList.forEach(m=>m.size=i)}}Object.freeze(GaussianBlur);class RadialBlur extends ASinglePassPostEffect{#Wd=50;#pl=0;#gl=0;#Xd=16;constructor(i){super(i),this.init(i,"POST_EFFECT_RADIAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet toPixel=global_id_vec - center;\nlet distance=length(toPixel);\nlet angle=atan2(toPixel.y,toPixel.x);\nlet maxDist=min(dimW,dimH) * 0.5;\nlet normalizedDistance=distance/maxDist;\nlet rotationAngle=uniforms.amount * normalizedDistance * 0.001;\nlet sampleCount=i32(uniforms.sampleCount);\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar totalWeight=0.0;\nfor (var i=0;i < sampleCount;i=i + 1) { let t=f32(i)/f32(sampleCount - 1); let sampleAngle=angle + (t - 0.5) * rotationAngle; let samplePos=center + vec2<f32>( cos(sampleAngle) * distance, sin(sampleAngle) * distance ); var weight=1.0 - abs(t - 0.5) * 1.5; weight=max(weight,0.1); let sampleCoord=vec2<i32>( i32(clamp(samplePos.x,0.0,dimW - 1.0)), i32(clamp(samplePos.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,sampleCoord).xyzw * weight; totalWeight +=weight;\n}\nlet centerFalloff=smoothstep(0.0,maxDist * 0.2,distance);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).xyzw;\nlet blurredColor=sum/totalWeight;\nlet finalColor=mix(originalColor,blurredColor,centerFalloff);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),finalColor);\n","struct Uniforms { amount:f32, centerX:f32, centerY:f32, sampleCount:f32\n};\n")),this.amount=this.#Wd,this.sampleCount=this.#Xd}get centerX(){return this.#pl}set centerX(i){validateNumber(i),this.#pl=i,this.updateUniform("centerX",i)}get centerY(){return this.#gl}set centerY(i){validateNumber(i),this.#gl=i,this.updateUniform("centerY",i)}get amount(){return this.#Wd}set amount(i){validateNumberRange(i,0),this.#Wd=i,this.updateUniform("amount",i)}get sampleCount(){return this.#Xd}set sampleCount(i){validateNumberRange(i,4),this.#Xd=i,this.updateUniform("sampleCount",i)}}Object.freeze(RadialBlur);class ZoomBlur extends ASinglePassPostEffect{#Wd=64;#pl=0;#gl=0;constructor(i){super(i),this.init(i,"POST_EFFECT_ZOOM_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet dimensionsVec=vec2<f32>(dimW,dimH);\nlet amount=uniforms.amount/min(dimW,dimH);\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet dir=(center - global_id_vec) * amount;\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=1.0 - (t + offset - 0.5)/loopSize; var weight=3.0 * (percent - percent * percent); let deltaPercent=dir * percent; let delta=vec2<i32>( i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)), i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms { amount:f32, centerX:f32, centerY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#Wd}get centerX(){return this.#pl}set centerX(i){validateNumber(i),this.#pl=i,this.updateUniform("centerX",i)}get centerY(){return this.#gl}set centerY(i){validateNumber(i),this.#gl=i,this.updateUniform("centerY",i)}get amount(){return this.#Wd}set amount(i){validateNumberRange(i,0),this.#Wd=i,this.updateUniform("amount",i)}}Object.freeze(ZoomBlur);const Ga={filmGrainIntensity:.02,filmGrainResponse:.9,filmGrainScale:2.5,coloredGrain:.3,grainSaturation:.4},Fa={filmGrainIntensity:.05,filmGrainResponse:.8,filmGrainScale:3,coloredGrain:.5,grainSaturation:.6},Na={filmGrainIntensity:.12,filmGrainResponse:.6,filmGrainScale:4,coloredGrain:.7,grainSaturation:.8},Va={filmGrainIntensity:.08,filmGrainResponse:.7,filmGrainScale:5,coloredGrain:.9,grainSaturation:1};class FilmGrain extends ASinglePassPostEffect{static SUBTLE=Ga;static MEDIUM=Fa;static HEAVY=Na;static VINTAGE=Va;#qd=Na.filmGrainIntensity;#Yd=Na.filmGrainResponse;#Zd=Na.filmGrainScale;#Jd=Na.coloredGrain;#Qd=Na.grainSaturation;#Jh=0;#em=1;constructor(i){super(i),this.#em=window?.devicePixelRatio||1,this.init(i,"POST_EFFECT_FILM_GRAIN",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet originalColor=textureLoad(sourceTexture,index);\nlet filmGrainIntensity_value:f32=uniforms.filmGrainIntensity;\nlet filmGrainResponse_value:f32=uniforms.filmGrainResponse;\nlet filmGrainScale_value:f32=uniforms.filmGrainScale;\nlet coloredGrain_value:f32=uniforms.coloredGrain;\nlet grainSaturation_value:f32=uniforms.grainSaturation;\nlet time_value:f32=uniforms.time;\nlet devicePixelRatio_value:f32=uniforms.devicePixelRatio;\nif (filmGrainIntensity_value <=0.0) { textureStore(outputTexture,index,originalColor); return;\n}\nlet baseScale=max(filmGrainScale_value,0.1);\nlet scaledUV=uv * vec2<f32>(dimW,dimH) * devicePixelRatio_value/baseScale;\nlet timeOffset=vec2<f32>( fract(time_value * 0.0317) * 100.0, fract(time_value * 0.0271) * 100.0\n);\nlet grainCoord=scaledUV + timeOffset;\nlet sampleOffset=1.0/baseScale;\nlet noiseR=(filmGrainNoise(grainCoord) + filmGrainNoise(grainCoord + vec2<f32>(sampleOffset,0.0)) + filmGrainNoise(grainCoord + vec2<f32>(0.0,sampleOffset)))/3.0;\nlet noiseG=filmGrainNoise(grainCoord + vec2<f32>(127.1,311.7));\nlet noiseB=filmGrainNoise(grainCoord + vec2<f32>(269.5,183.3));\nlet monoGrain=(noiseR + noiseG + noiseB)/3.0;\nlet colorGrain=vec3<f32>(noiseR,noiseG,noiseB);\nvar grainColor=mix(vec3<f32>(monoGrain),colorGrain,coloredGrain_value);\nlet grainLuminance=dot(grainColor,vec3<f32>(0.299,0.587,0.114));\ngrainColor=mix(vec3<f32>(grainLuminance),grainColor,grainSaturation_value);\nlet luminance=dot(originalColor.rgb,vec3<f32>(0.299,0.587,0.114));\nlet luminanceWeight=pow(max(luminance,0.01),filmGrainResponse_value);\nlet grainIntensity=filmGrainIntensity_value * luminanceWeight;\nlet grain=grainColor * grainIntensity;\nlet finalColor=originalColor.rgb + grain;\nlet outputColor=vec4<f32>(clamp(finalColor,vec3<f32>(0.0),vec3<f32>(1.0)),originalColor.a);\ntextureStore(outputTexture,index,outputColor);\n","struct Uniforms { filmGrainIntensity:f32, filmGrainResponse:f32, filmGrainScale:f32, coloredGrain:f32, grainSaturation:f32, time:f32, devicePixelRatio:f32\n};\nfn filmGrainNoise(coord:vec2<f32>) -> f32 { let p=floor(coord); let f=fract(coord); let u=f * f * f * (f * (f * 6.0 - 15.0) + 10.0); let a=hash(p); let b=hash(p + vec2<f32>(1.0,0.0)); let c=hash(p + vec2<f32>(0.0,1.0)); let d=hash(p + vec2<f32>(1.0,1.0)); let noise=mix(mix(a,b,u.x),mix(c,d,u.x),u.y); return (noise - 0.5) * 2.0;\n}\nfn hash(p:vec2<f32>) -> f32 { var p3=fract(vec3<f32>(p.xyx) * 0.1031); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.x + p3.y) * p3.z);\n}\n")),this.#tm()}get filmGrainIntensity(){return this.#qd}set filmGrainIntensity(i){this.#qd=Math.max(0,Math.min(1,i)),this.updateUniform("filmGrainIntensity",this.#qd)}get filmGrainResponse(){return this.#Yd}set filmGrainResponse(i){this.#Yd=Math.max(0,Math.min(2,i)),this.updateUniform("filmGrainResponse",this.#Yd)}get filmGrainScale(){return this.#Zd}set filmGrainScale(i){this.#Zd=Math.max(.1,Math.min(20,i)),this.updateUniform("filmGrainScale",this.#Zd)}get coloredGrain(){return this.#Jd}set coloredGrain(i){this.#Jd=Math.max(0,Math.min(1,i)),this.updateUniform("coloredGrain",this.#Jd)}get grainSaturation(){return this.#Qd}set grainSaturation(i){this.#Qd=Math.max(0,Math.min(2,i)),this.updateUniform("grainSaturation",this.#Qd)}applyPreset(i){this.#qd=i.filmGrainIntensity,this.#Yd=i.filmGrainResponse,this.#Zd=i.filmGrainScale,this.#Jd=i.coloredGrain,this.#Qd=i.grainSaturation,this.#tm()}update(i){this.#Jh+=i,this.updateUniform("time",this.#Jh)}#tm(){this.updateUniform("filmGrainIntensity",this.#qd),this.updateUniform("filmGrainResponse",this.#Yd),this.updateUniform("filmGrainScale",this.#Zd),this.updateUniform("coloredGrain",this.#Jd),this.updateUniform("grainSaturation",this.#Qd),this.updateUniform("time",this.#Jh),this.updateUniform("devicePixelRatio",this.#em)}}Object.freeze(FilmGrain);class Fog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#nm=Fog.EXPONENTIAL;#rm=.05;#im=4.5;#am=50;#sm;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_FOG",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nvar sceneColor:vec4<f32>=textureLoad(sourceTexture,coord);\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth,systemUniforms.camera.nearClipping,systemUniforms.camera.farClipping);\nlet fogFactor=calculateFogFactor(linearDepth,systemUniforms.camera.farClipping);\nlet finalColor=mix(uniforms.fogColor.rgb,sceneColor.rgb,fogFactor);\ntextureStore(outputTexture,coord,vec4<f32>(finalColor,sceneColor.a));\n","struct Uniforms { fogType:u32, density:f32, nearDistance:f32, farDistance:f32, fogColor:vec3<f32>, padding1:f32,\n};\nfn linearizeDepth(depth:f32,cameraNear:f32,cameraFar:f32) -> f32 { let z=depth * 2.0 - 1.0; return (2.0 * cameraNear * cameraFar)/ (cameraFar + cameraNear - z * (cameraFar - cameraNear));\n}\nfn calculateFogFactor(linearDepth:f32,cameraFar:f32) -> f32 { let u_density=uniforms.density; let u_fogType=uniforms.fogType; let u_nearDistance=uniforms.nearDistance; let u_farDistance=uniforms.farDistance; let isBackground=linearDepth >=(cameraFar * 0.99); if (isBackground) { return 1.0 - u_density; } let distance=max(0.0,linearDepth - u_nearDistance); let maxDistance=u_farDistance - u_nearDistance; let normalizedDistance=clamp(distance/max(0.1,maxDistance),0.0,1.0); var fogFactor:f32; if (u_fogType==0u) { fogFactor=exp(-u_density * normalizedDistance * 10.0); } else { let expValue=u_density * normalizedDistance * 5.0; fogFactor=exp(-(expValue * expValue)); } return clamp(fogFactor,0.0,1.0);\n}\n")),this.#sm=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#sm.rgbNormal)}),this.fogType=this.#nm,this.density=this.#rm,this.nearDistance=this.#im,this.farDistance=this.#am}get fogType(){return this.#nm}set fogType(i){validateNumberRange(i,0,1),this.#nm=Math.floor(i),this.updateUniform("fogType",this.#nm)}get density(){return this.#rm}set density(i){validateNumberRange(i,0,1),this.#rm=Math.max(0,Math.min(1,i)),this.updateUniform("density",this.#rm)}get nearDistance(){return this.#im}set nearDistance(i){validateNumberRange(i,0),this.#im=Math.max(.1,i),this.#am<=this.#im&&(this.#am=this.#im+.1,this.updateUniform("farDistance",this.#am)),this.updateUniform("nearDistance",this.#im)}get farDistance(){return this.#am}set farDistance(i){validateNumberRange(i,0),this.#am=Math.max(this.#im+.1,i),this.updateUniform("farDistance",this.#am)}get fogColor(){return this.#sm}render(i,m,g,x){return super.render(i,m,g,x)}}Object.freeze(Fog);class HeightFog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#nm=HeightFog.EXPONENTIAL;#rm=1;#sm;#om=0;#um=100;#lm=.1;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_HEIGHT_FOG",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet screenCoord=vec2<f32>( global_id_vec.x/dimW,global_id_vec.y/dimH );\nvar depth:f32=1.0;\nif (dimensions.x > u32(global_id.x) && dimensions.y > u32(global_id.y)) { depth=textureLoad(depthTexture,vec2<i32>(global_id.xy),0);\n}\nlet fogFactor=calculateHeightFogFactor(screenCoord,depth);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).rgb;\nlet foggedColor=mix(uniforms.fogColor,originalColor,fogFactor);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(foggedColor,1.0));\n","struct Uniforms { fogType:u32, density:f32, baseHeight:f32, falloff:f32, maxHeight:f32, fogColor:vec3<f32>, padding1:f32, padding2:f32,\n};\nfn isFiniteValue(value:f32) -> bool { return value==value;\n}\nfn isFiniteVec3(v:vec3<f32>) -> bool { return isFiniteValue(v.x) && isFiniteValue(v.y) && isFiniteValue(v.z);\n}\nfn reconstructWorldPositionUltraPrecise(screenCoord:vec2<f32>,depth:f32) -> vec3<f32> { let ndcX=fma(screenCoord.x,2.0,-1.0); let ndcY=fma(-screenCoord.y,2.0,1.0); let safeDepth=clamp(depth,1e-7,1.0 - 1e-7); let ndc=vec3<f32>(ndcX,ndcY,safeDepth); let clipPos=vec4<f32>(ndc,1.0); let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos; let epsilon=1e-6; let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon); let worldPos=worldPos4.xyz/w; let maxCoord=1e6; let stabilizedX=clamp(worldPos.x,-maxCoord,maxCoord); let stabilizedY=clamp(worldPos.y,-maxCoord,maxCoord); let stabilizedZ=clamp(worldPos.z,-maxCoord,maxCoord); let finalPos=vec3<f32>(stabilizedX,stabilizedY,stabilizedZ); return select(vec3<f32>(0.0,0.0,0.0),finalPos,isFiniteVec3(finalPos));\n}\nfn calculateHeightFogFactor(screenCoord:vec2<f32>,depth:f32) -> f32 { let backgroundThreshold=1.0 - 1e-5; let isBackground=depth >=backgroundThreshold; var pixelWorldHeight:f32; if (isBackground) { let rayDirection=getRayDirectionMaxPrecision(screenCoord); pixelWorldHeight=getSkyboxHeightMaxPrecision(rayDirection); } else { let worldPos=reconstructWorldPositionUltraPrecise(screenCoord,depth); pixelWorldHeight=worldPos.y; } return calculateAbsoluteHeightFogMaxPrecision(pixelWorldHeight);\n}\nfn getSkyboxHeightMaxPrecision(rayDirection:vec3<f32>) -> f32 { let u_baseHeight=uniforms.baseHeight; let u_maxHeight=uniforms.maxHeight; let rayY=clamp(rayDirection.y,-0.999,0.999); let upThreshold=0.08; let downThreshold=-0.015; let transitionRange=upThreshold - downThreshold; let safeTransitionRange=max(transitionRange,1e-6); if (rayY > upThreshold) { return u_maxHeight + 25.0; } else if (rayY < downThreshold) { return fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight); } else { let normalizedT=(rayY - downThreshold)/safeTransitionRange; let smoothT=smoothstep(0.0,1.0,normalizedT); let lowValue=fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight); let highValue=u_maxHeight + 25.0; return fma(smoothT,highValue - lowValue,lowValue); }\n}\nfn calculateAbsoluteHeightFogMaxPrecision(worldHeight:f32) -> f32 { let u_baseHeight=uniforms.baseHeight; let u_maxHeight=uniforms.maxHeight; let u_density=uniforms.density; let u_falloff=uniforms.falloff; let u_fogType=uniforms.fogType; if (!isFiniteValue(worldHeight)) { return 1.0; } let heightRange=u_maxHeight - u_baseHeight; let safeHeightRange=max(heightRange,1e-3); let margin=fma(safeHeightRange,0.18,1.2); let extendedBaseHeight=u_baseHeight - margin; let extendedMaxHeight=u_maxHeight + margin; let extendedRange=extendedMaxHeight - extendedBaseHeight; if (worldHeight <=extendedBaseHeight || worldHeight >=extendedMaxHeight) { return 1.0; } let safeExtendedRange=max(extendedRange,1e-3); if (safeExtendedRange <=0.3) { return 1.0; } let normalizedHeight=clamp( (worldHeight - extendedBaseHeight)/safeExtendedRange, 0.0, 1.0 ); let centerOffset=normalizedHeight - 0.5; let edgeFactor=fma(-abs(centerOffset),0.25,1.0); let heightFactor=1.0 - normalizedHeight; let safeHeightFactor=max(heightFactor,1e-4); let safeFalloff=clamp(u_falloff,0.05,1.8); let expPower=fma(safeFalloff,0.73,1.05); var fogDensity:f32; if (u_fogType==0u) { fogDensity=pow(safeHeightFactor,expPower); fogDensity=smoothstep(0.0,1.0,fogDensity); } else { let expResult=pow(safeHeightFactor,expPower); fogDensity=expResult * expResult; fogDensity=smoothstep(0.0,1.0,fogDensity); } let densityWithEdge=fogDensity * edgeFactor; let safeDensity=clamp(u_density,0.0,4.0); let finalFogAmount=fma(densityWithEdge,safeDensity,0.0) * 0.42; let result=clamp(1.0 - finalFogAmount,0.0,1.0); return select(1.0,result,isFiniteValue(result));\n}\nfn getRayDirectionMaxPrecision(screenCoord:vec2<f32>) -> vec3<f32> { let centeredX=fma(screenCoord.x,1.0,-0.5); let centeredY=fma(screenCoord.y,1.0,-0.5); let ndcX=centeredX * 2.0; let ndcY=-(centeredY * 2.0); let ndc=vec3<f32>(ndcX,ndcY,1.0); let clipPos=vec4<f32>(ndc,1.0); let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos; let epsilon=1e-6; let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon); let worldPos=worldPos4.xyz/w; let cameraPos=systemUniforms.camera.cameraPosition; let rayDir=worldPos - cameraPos; let rayLength=length(rayDir); let minLength=1e-6; if (rayLength < minLength) { return vec3<f32>(0.0,0.0,1.0); } let normalizedRay=rayDir/rayLength; let safeRayX=clamp(normalizedRay.x,-0.999,0.999); let safeRayY=clamp(normalizedRay.y,-0.999,0.999); let safeRayZ=clamp(normalizedRay.z,-0.999,0.999); let safeRay=vec3<f32>(safeRayX,safeRayY,safeRayZ); let finalRayLength=length(safeRay); let isValidRay=finalRayLength > 1e-6 && isFiniteValue(finalRayLength); if (isValidRay) { let finalRay=safeRay/finalRayLength; return select(vec3<f32>(0.0,0.0,1.0),finalRay,isFiniteVec3(finalRay)); } return vec3<f32>(0.0,0.0,1.0);\n}\n")),this.#sm=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#sm.rgbNormal)}),this.fogType=this.#nm,this.density=this.#rm,this.baseHeight=this.#om,this.thickness=this.#um,this.falloff=this.#lm}get fogType(){return this.#nm}set fogType(i){validateNumberRange(i,0,1),this.#nm=Math.floor(i),this.updateUniform("fogType",this.#nm)}get density(){return this.#rm}set density(i){validateNumberRange(i,0,5),this.#rm=Math.max(0,Math.min(5,i)),this.updateUniform("density",this.#rm)}get fogColor(){return this.#sm}get baseHeight(){return this.#om}set baseHeight(i){validateNumberRange(i),this.#om=i,this.updateUniform("baseHeight",this.#om),this.updateUniform("maxHeight",this.maxHeight)}get maxHeight(){return this.#om+this.#um}get thickness(){return this.#um}set thickness(i){validateNumberRange(i,.1),this.#um=Math.max(.1,i),this.updateUniform("maxHeight",this.#om+this.#um)}get falloff(){return this.#lm}set falloff(i){validateNumberRange(i,0,2),this.#lm=Math.max(.001,Math.min(2,i)),this.updateUniform("falloff",this.#lm)}render(i,m,g,x){return super.render(i,m,g,x)}}Object.freeze(HeightFog);class ChromaticAberration extends ASinglePassPostEffect{#Gd=.015;#pl=.5;#gl=.5;#lm=1;constructor(i){super(i),this.init(i,"POST_EFFECT_CHROMATIC_ABERRATION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(global_id.x),f32(global_id.y))/vec2<f32>(dimW,dimH);\nlet center=vec2<f32>(uniforms.centerX,uniforms.centerY);\nlet offset=uv - center;\nlet distance=length(offset);\nlet distortion=uniforms.strength * pow(distance,uniforms.falloff);\nlet redOffset=uv + offset * distortion * vec2<f32>(-1.0,-1.0);\nlet greenOffset=uv;\nlet blueOffset=uv + offset * distortion * vec2<f32>(1.0,1.0);\nvar finalColor=vec3<f32>(0.0);\nif (redOffset.x >=0.0 && redOffset.x <=1.0 && redOffset.y >=0.0 && redOffset.y <=1.0) { let redCoord=vec2<i32>( i32(clamp(redOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(redOffset.y * dimH,0.0,dimH - 1.0)) ); finalColor.r=textureLoad(sourceTexture,redCoord).r;\n}\nlet greenCoord=vec2<i32>( i32(clamp(greenOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(greenOffset.y * dimH,0.0,dimH - 1.0))\n);\nfinalColor.g=textureLoad(sourceTexture,greenCoord).g;\nif (blueOffset.x >=0.0 && blueOffset.x <=1.0 && blueOffset.y >=0.0 && blueOffset.y <=1.0) { let blueCoord=vec2<i32>( i32(clamp(blueOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(blueOffset.y * dimH,0.0,dimH - 1.0)) ); finalColor.b=textureLoad(sourceTexture,blueCoord).b;\n}\nlet originalAlpha=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).a;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(finalColor,originalAlpha));\n","struct Uniforms { strength:f32, centerX:f32, centerY:f32, falloff:f32\n};\n")),this.strength=this.#Gd,this.centerX=this.#pl,this.centerY=this.#gl,this.falloff=this.#lm}get strength(){return this.#Gd}set strength(i){validateNumberRange(i,0),this.#Gd=i,this.updateUniform("strength",i)}get centerX(){return this.#pl}set centerX(i){validateNumberRange(i,0,1),this.#pl=i,this.updateUniform("centerX",i)}get centerY(){return this.#gl}set centerY(i){validateNumberRange(i,0,1),this.#gl=i,this.updateUniform("centerY",i)}get falloff(){return this.#lm}set falloff(i){validateNumberRange(i,0,5),this.#lm=i,this.updateUniform("falloff",i)}}Object.freeze(ChromaticAberration);class DOFCoC extends ASinglePassPostEffect{#cm=15;#hm=1.4;#fm=32;#dm=.1;#mm=1e3;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_DOF_COC",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nlet originalColor=textureLoad(sourceTexture,coord).xyzw;\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth);\nlet coc=calculateCoC(linearDepth);\nlet encodedCoC=encodeCoC(coc);\ntextureStore(outputTexture,coord,vec4<f32>(originalColor.rgb,encodedCoC));\n","struct Uniforms { focusDistance:f32, aperture:f32, maxCoC:f32, nearPlane:f32, farPlane:f32,\n};\nfn linearizeDepth(depth:f32) -> f32 { let z=depth * 2.0 - 1.0; return (2.0 * uniforms.nearPlane * uniforms.farPlane)/ (uniforms.farPlane + uniforms.nearPlane - z * (uniforms.farPlane - uniforms.nearPlane));\n}\nfn encodeCoC(coc:f32) -> f32 { return (coc + 1.0) * 0.5;\n}\nfn calculateCoC(linearDepth:f32) -> f32 { let subjectDistance=linearDepth; let focalLength=50.0; let focusRange=uniforms.focusDistance * 0.15; let transitionRange=uniforms.focusDistance * 0.35; let distanceFromFocus=abs(subjectDistance - uniforms.focusDistance); if (distanceFromFocus < focusRange) { let focusFactor=smoothstep(0.0,focusRange,distanceFromFocus); return mix(0.0,0.02,focusFactor); } var rawCoC:f32; var signedCoC:f32; if (subjectDistance < uniforms.focusDistance) { let nearDistance=uniforms.focusDistance - subjectDistance; let nearFactor=nearDistance/uniforms.focusDistance; rawCoC=(uniforms.aperture * focalLength * nearDistance)/ (subjectDistance * (uniforms.focusDistance - focalLength)); rawCoC=rawCoC * (1.0 + nearFactor * 1.5); signedCoC=-(rawCoC/uniforms.maxCoC); let absCoC=abs(signedCoC); if (absCoC > 0.05) { signedCoC=-min(1.0,absCoC * smoothstep(0.05,0.3,absCoC) * 1.5); } if (distanceFromFocus < transitionRange) { let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus); signedCoC=mix(0.0,signedCoC,transitionFactor); } return clamp(signedCoC,-1.0,0.0); } else { let farDistance=subjectDistance - uniforms.focusDistance; rawCoC=(uniforms.aperture * focalLength * farDistance)/ (subjectDistance * (uniforms.focusDistance + focalLength)); rawCoC=rawCoC * (1.0 + farDistance * 0.08); signedCoC=rawCoC/uniforms.maxCoC; let absCoC=abs(signedCoC); if (absCoC > 0.1) { signedCoC=min(1.0,absCoC * smoothstep(0.1,0.5,absCoC) * 1.2); } if (distanceFromFocus < transitionRange) { let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus); signedCoC=mix(0.0,signedCoC,transitionFactor); } return clamp(signedCoC,0.0,1.0); }\n}\n")),this.focusDistance=this.#cm,this.aperture=this.#hm,this.maxCoC=this.#fm,this.nearPlane=this.#dm,this.farPlane=this.#mm}get focusDistance(){return this.#cm}set focusDistance(i){validateNumberRange(i),this.#cm=i,this.updateUniform("focusDistance",i)}get aperture(){return this.#hm}set aperture(i){validateNumberRange(i),this.#hm=i,this.updateUniform("aperture",i)}get maxCoC(){return this.#fm}set maxCoC(i){validateNumberRange(i),this.#fm=i,this.updateUniform("maxCoC",i)}get nearPlane(){return this.#dm}set nearPlane(i){validateNumberRange(i),this.#dm=i,this.updateUniform("nearPlane",i)}get farPlane(){return this.#mm}set farPlane(i){validateNumberRange(i),this.#mm=i,this.updateUniform("farPlane",i)}}Object.freeze(DOFCoC);class DOFUnified extends ASinglePassPostEffect{#pm=16;#gm=24;#xm=1;#_m=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:x}=this,_=` struct Uniforms { nearBlurSize:f32, farBlurSize:f32, nearStrength:f32, farStrength:f32, };  @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var cocTexture:texture_storage_2d<rgba8unorm,read>; @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; @group(1) @binding(1) var<uniform> uniforms:Uniforms;  /* CoC 디코딩 함수 */ fn decodeCoC(encoded:f32) -> f32 { /* 0~1 범위를 -1~1 범위로 복원 */ return encoded * 2.0 - 1.0; }  @compute @workgroup_size(${m},${g},${x}) fn main (@builtin(global_invocation_id) global_id:vec3<u32>) { let index=vec2<u32>(global_id.xy); let dimensions:vec2<u32>=textureDimensions(sourceTexture);  if (index.x >=dimensions.x || index.y >=dimensions.y) { return; }  let originalSample=textureLoad(sourceTexture,index); let originalColor=originalSample.rgb; let originalAlpha=originalSample.a; let encodedCoC=textureLoad(cocTexture,index).a;  /* CoC 값 디코딩 */ let cocValue=decodeCoC(encodedCoC);  /* CoC 임계값 체크 */ if (abs(cocValue) < 0.005) { textureStore(outputTexture,index,vec4<f32>(originalColor,originalAlpha)); return; }  var finalColor=originalColor; var finalAlpha=originalAlpha;  /* Near blur 처리 (CoC < 0) */ if (cocValue < 0.0) { let blurResult=calculateBlur(index,abs(cocValue),uniforms.nearBlurSize,true); let nearBlur=blurResult.rgb; let nearBlurAlpha=blurResult.a; /* Near strength 블렌딩 개선 - 더 강한 효과 */ let nearBlend=saturate(pow(abs(cocValue) * uniforms.nearStrength,0.7)); finalColor=mix(originalColor,nearBlur,nearBlend); finalAlpha=mix(originalAlpha,nearBlurAlpha,nearBlend); } /* Far blur 처리 (CoC > 0) */ else if (cocValue > 0.0) { let blurResult=calculateBlur(index,cocValue,uniforms.farBlurSize,false); let farBlur=blurResult.rgb; let farBlurAlpha=blurResult.a; let rawBlend=cocValue * uniforms.farStrength; let farBlend=saturate(smoothstep(0.0,0.8,rawBlend)); finalColor=mix(originalColor,farBlur,farBlend); finalAlpha=mix(originalAlpha,farBlurAlpha,farBlend); }  textureStore(outputTexture,index,vec4<f32>(finalColor,finalAlpha)); }  fn calculateBlur(center:vec2<u32>,intensity:f32,maxBlurSize:f32,isNear:bool) -> vec4<f32> { let dimensions:vec2<u32>=textureDimensions(sourceTexture); let blurRadius=intensity * maxBlurSize;  /* 최소 블러 반경 조정 */ if (blurRadius < 0.3) { return textureLoad(sourceTexture,center); }  var sum:vec3<f32>=vec3<f32>(0.0); var sumAlpha:f32=0.0; var totalWeight=0.0;  let maxRadius=min(blurRadius,maxBlurSize); /* Near blur에 더 많은 샘플 적용 */ let samples=select(8,16,isNear);/* near=16,far=8 */ let angleStep=6.28318530718/f32(samples);  let originalSample=textureLoad(sourceTexture,center); let originalColor=originalSample.rgb; let originalAlpha=originalSample.a; /* Near blur에 더 강한 중앙 가중치 */ let centerWeight=select(0.4,0.2,isNear);/* near=0.2,far=0.4 */ sum +=originalColor * centerWeight; sumAlpha +=originalAlpha * centerWeight; totalWeight +=centerWeight;  /* 방사형 샘플링 */ for (var i=0;i < samples;i=i + 1) { for (var r=1.0;r <=maxRadius;r=r + 1.0) { let angle=f32(i) * angleStep; let offset=vec2<f32>(cos(angle) * r,sin(angle) * r);  let samplePos=vec2<i32>( clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1), clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1) );  let sampleData=textureLoad(sourceTexture,vec2<u32>(samplePos)); let sampleColor=sampleData.rgb; let sampleAlpha=sampleData.a; let sampleEncodedCoC=textureLoad(cocTexture,vec2<u32>(samplePos)).a; let sampleCoC=decodeCoC(sampleEncodedCoC);/* 디코딩 추가 */  /* 가우시안 가중치 */ var weight=exp(-r * r/(maxRadius * maxRadius * 0.5));  /* CoC 기반 가중치 조정 */ if (isNear) { /* Near blur:더 강한 조건으로 가중치 증가 */ if (sampleCoC < 0.0 && abs(sampleCoC) >=intensity * 0.5) { weight *=1.5; } } else { /* Far blur:기존 조건 유지 */ if (sampleCoC > 0.0 && sampleCoC >=intensity * 0.7) { weight *=1.2; } }  sum +=sampleColor * weight; sumAlpha +=sampleAlpha * weight; totalWeight +=weight; } }  /* 추가 근거리 샘플링 (near blur만) */ if (isNear && maxRadius > 2.0) { let additionalSamples=8; let innerRadius=maxRadius * 0.3; let innerAngleStep=6.28318530718/f32(additionalSamples);  for (var i=0;i < additionalSamples;i=i + 1) { let angle=f32(i) * innerAngleStep + 0.5;/* 약간의 오프셋 */ let offset=vec2<f32>(cos(angle) * innerRadius,sin(angle) * innerRadius);  let samplePos=vec2<i32>( clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1), clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1) );  let sampleData=textureLoad(sourceTexture,vec2<u32>(samplePos)); let sampleColor=sampleData.rgb; let sampleAlpha=sampleData.a; let weight=0.8;  sum +=sampleColor * weight; sumAlpha +=sampleAlpha * weight; totalWeight +=weight; } }  if (totalWeight > 0.0) { return vec4<f32>(sum/totalWeight,sumAlpha/totalWeight); } else { return vec4<f32>(originalColor,originalAlpha); } } `;this.init(i,"POST_EFFECT_DOF_UNIFIED",{msaa:_,nonMsaa:_}),this.nearBlurSize=this.#pm,this.farBlurSize=this.#gm,this.nearStrength=this.#xm,this.farStrength=this.#_m}get nearBlurSize(){return this.#pm}set nearBlurSize(i){validateNumberRange(i),this.#pm=i,this.updateUniform("nearBlurSize",i)}get farBlurSize(){return this.#gm}set farBlurSize(i){validateNumberRange(i),this.#gm=i,this.updateUniform("farBlurSize",i)}get nearStrength(){return this.#xm}set nearStrength(i){validateNumberRange(i),this.#xm=i,this.updateUniform("nearStrength",i)}get farStrength(){return this.#_m}set farStrength(i){validateNumberRange(i),this.#_m=i,this.updateUniform("farStrength",i)}render(i,m,g,x,_){return super.render(i,m,g,x,_)}}Object.freeze(DOFUnified);class DOF extends AMultiPassPostEffect{#vm;#bm;#cm=15;#hm=2.8;#fm=25;#dm=.1;#mm=1e3;#pm=15;#gm=15;#xm=1;#_m=1;constructor(i){super(i,[new DOFCoC(i),new DOFUnified(i)]),this.#vm=this.passList[0],this.#bm=this.passList[1],this.#vm.focusDistance=this.#cm,this.#vm.aperture=this.#hm,this.#vm.maxCoC=this.#fm,this.#vm.nearPlane=this.#dm,this.#vm.farPlane=this.#mm,this.#bm.nearBlurSize=this.#pm,this.#bm.farBlurSize=this.#gm,this.#bm.nearStrength=this.#xm,this.#bm.farStrength=this.#_m}get focusDistance(){return this.#cm}set focusDistance(i){this.#cm=i,this.#vm.focusDistance=i}get aperture(){return this.#hm}set aperture(i){this.#hm=i,this.#vm.aperture=i}get maxCoC(){return this.#fm}set maxCoC(i){this.#fm=i,this.#vm.maxCoC=i}get nearPlane(){return this.#dm}set nearPlane(i){this.#dm=i,this.#vm.nearPlane=i}get farPlane(){return this.#mm}set farPlane(i){this.#mm=i,this.#vm.farPlane=i}get nearBlurSize(){return this.#pm}set nearBlurSize(i){this.#pm=i,this.#bm.nearBlurSize=i}get farBlurSize(){return this.#gm}set farBlurSize(i){this.#gm=i,this.#bm.farBlurSize=i}get nearStrength(){return this.#xm}set nearStrength(i){this.#xm=i,this.#bm.nearStrength=i}get farStrength(){return this.#_m}set farStrength(i){this.#_m=i,this.#bm.farStrength=i}setGameDefault(){this.focusDistance=15,this.aperture=2.8,this.maxCoC=25,this.nearBlurSize=15,this.farBlurSize=15,this.nearStrength=1,this.farStrength=1}setCinematic(){this.focusDistance=20,this.aperture=1.4,this.maxCoC=40,this.nearBlurSize=25,this.farBlurSize=30,this.nearStrength=1.2,this.farStrength=1.3}setPortrait(){this.focusDistance=8,this.aperture=1.8,this.maxCoC=35,this.nearBlurSize=12,this.farBlurSize=25,this.nearStrength=.8,this.farStrength=1.4}setLandscape(){this.focusDistance=50,this.aperture=8,this.maxCoC=20,this.nearBlurSize=20,this.farBlurSize=10,this.nearStrength=1.1,this.farStrength=.6}setMacro(){this.focusDistance=2,this.aperture=1,this.maxCoC=50,this.nearBlurSize=30,this.farBlurSize=35,this.nearStrength=1.5,this.farStrength=1.6}setSports(){this.focusDistance=25,this.aperture=4,this.maxCoC=18,this.nearBlurSize=10,this.farBlurSize=12,this.nearStrength=.8,this.farStrength=.9}setNightMode(){this.focusDistance=12,this.aperture=2,this.maxCoC=30,this.nearBlurSize=18,this.farBlurSize=20,this.nearStrength=1.1,this.farStrength=1.2}render(i,m,g,x){const _=this.#vm.render(i,m,g,x);return this.#bm.render(i,m,g,x,_)}}Object.freeze(DOF);class LensDistortion extends ASinglePassPostEffect{#ym=.1;#Sm=0;#pl=0;#gl=0;constructor(i){super(i),this.init(i,"POST_EFFECT_LENS_DISTORTION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet uv=global_id_vec/vec2<f32>(dimW,dimH);\nlet uvCenter=center/vec2<f32>(dimW,dimH);\nlet offset=uv - uvCenter;\nlet distance=length(offset);\nlet barrelFactor=1.0 + uniforms.barrelStrength * distance * distance;\nlet pincushionFactor=1.0 - uniforms.pincushionStrength * distance * distance;\nlet distortionFactor=barrelFactor * pincushionFactor;\nlet distortedUV=uvCenter + offset * distortionFactor;\nif (distortedUV.x < 0.0 || distortedUV.x > 1.0 || distortedUV.y < 0.0 || distortedUV.y > 1.0) { textureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(0.0,0.0,0.0,1.0));\n} else { let sampleCoord=vec2<i32>( i32(clamp(distortedUV.x * dimW,0.0,dimW - 1.0)), i32(clamp(distortedUV.y * dimH,0.0,dimH - 1.0)) ); let sampledColor=textureLoad(sourceTexture,sampleCoord).xyzw; textureStore(outputTexture,vec2<i32>(global_id.xy),sampledColor);\n}\n","struct Uniforms { barrelStrength:f32, pincushionStrength:f32, centerX:f32, centerY:f32\n};\n")),this.barrelStrength=this.#ym,this.pincushionStrength=this.#Sm,this.centerX=this.#pl,this.centerY=this.#gl}get barrelStrength(){return this.#ym}set barrelStrength(i){validateNumberRange(i,0),this.#ym=i,this.updateUniform("barrelStrength",i)}get pincushionStrength(){return this.#Sm}set pincushionStrength(i){validateNumberRange(i,0),this.#Sm=i,this.updateUniform("pincushionStrength",i)}get centerX(){return this.#pl}set centerX(i){validateNumber(i),this.#pl=i,this.updateUniform("centerX",i)}get centerY(){return this.#gl}set centerY(i){validateNumber(i),this.#gl=i,this.updateUniform("centerY",i)}}Object.freeze(LensDistortion);class Vignetting extends ASinglePassPostEffect{#Tm=.2;#J=.5;constructor(i){super(i),this.init(i,"POST_EFFECT_VIGNETTING",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet index=vec2<u32>(global_id.xy);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet smoothness=uniforms.smoothness;\nlet size=uniforms.size;\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nvar diff=size - distance(uv,vec2<f32>(0.5));\nlet vignette=smoothstep(-smoothness,smoothness,diff);\ncolor.r *=vignette;\ncolor.g *=vignette;\ncolor.b *=vignette;\ntextureStore(outputTexture,index,color);\n","struct Uniforms { smoothness:f32, size:f32,\n};\n")),this.smoothness=this.#Tm,this.size=this.#J}get size(){return this.#J}set size(i){validateNumberRange(i,0),this.#J=i,this.updateUniform("size",i)}get smoothness(){return this.#Tm}set smoothness(i){validateNumberRange(i,0,1),this.#Tm=i,this.updateUniform("smoothness",i)}}Object.freeze(Vignetting);class OldBloomBlend extends ASinglePassPostEffect{#wm=1;#$l=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:x}=this,_=` struct Uniforms { bloomStrength:f32, exposure:f32 }; @group(0) @binding(0) var sourceTexture0:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var sourceTexture1:texture_storage_2d<rgba8unorm,read>; @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; @group(1) @binding(1) var<uniform> uniforms:Uniforms; @compute @workgroup_size(${m},${g},${x}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy ); let dimensions:vec2<u32>=textureDimensions(sourceTexture0); let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH); var diffuse:vec4<f32>=textureLoad( sourceTexture0, index, ); var blur:vec4<f32>=textureLoad( sourceTexture1, index, );  let finalColor=vec4<f32>((diffuse.rgb + blur.rgb * uniforms.bloomStrength ) * uniforms.exposure,diffuse.a); textureStore(outputTexture,index,finalColor ); }; `;this.init(i,"POST_EFFECT_OLD_BLOOM",{msaa:_,nonMsaa:_}),this.exposure=this.#$l,this.bloomStrength=this.#wm}get bloomStrength(){return this.#wm}set bloomStrength(i){this.#wm=i,this.updateUniform("bloomStrength",i)}get exposure(){return this.#$l}set exposure(i){this.#$l=i,this.updateUniform("exposure",i)}render(i,m,g,x,_){return super.render(i,m,g,x,_)}}Object.freeze(OldBloomBlend);class OldBloom extends AMultiPassPostEffect{#Mm;#Cm;#Rm;#Vd=156;#Pm=32;#$l=1;#wm=1.2;constructor(i){super(i,[new Threshold(i),new GaussianBlur(i),new OldBloomBlend(i)]),this.#Mm=this.passList[0],this.#Cm=this.passList[1],this.#Rm=this.passList[2],this.#Mm.threshold=this.#Vd,this.#Cm.size=this.#Pm,this.#Rm.exposure=this.#$l,this.#Rm.bloomStrength=this.#wm}get threshold(){return this.#Vd}set threshold(i){this.#Vd=i,this.#Mm.threshold=i}get gaussianBlurSize(){return this.#Pm}set gaussianBlurSize(i){this.#Pm=i,this.#Cm.size=i}get exposure(){return this.#$l}set exposure(i){this.#$l=i,this.#Rm.exposure=i}get bloomStrength(){return this.#wm}set bloomStrength(i){this.#wm=i,this.#Rm.bloomStrength=i}render(i,m,g,x){const _=this.#Mm.render(i,m,g,x),b=this.#Cm.render(i,m,g,_);return this.#Rm.render(i,m,g,x,b)}}Object.freeze(OldBloom);class Sharpen extends AMultiPassPostEffect{#$d;constructor(i){super(i,[new Convolution(i)]),this.#$d=this.passList[0],this.#$d.kernel=Convolution.SHARPEN}render(i,m,g,x){return this.#$d.render(i,m,g,x)}}Object.freeze(Sharpen);class SSR extends ASinglePassPostEffect{#Em=64;#Bm=15;#Im=.02;#Lm=1;#Dm=12;#Um=.15;constructor(i){super(i),this.WORK_SIZE_X=8,this.WORK_SIZE_Y=8,this.WORK_SIZE_Z=1,this.useDepthTexture=!0;const m=this.#Am();this.init(i,"POST_EFFECT_SSR",{msaa:m.msaa,nonMsaa:m.nonMsaa}),this.maxSteps=this.#Em,this.maxDistance=this.#Bm,this.stepSize=this.#Im,this.reflectionIntensity=this.#Lm,this.fadeDistance=this.#Dm,this.edgeFade=this.#Um}get maxSteps(){return this.#Em}set maxSteps(i){validateNumberRange(i,1,512),this.#Em=i,this.updateUniform("maxSteps",i)}get maxDistance(){return this.#Bm}set maxDistance(i){validatePositiveNumberRange(i,1,200),this.#Bm=i,this.updateUniform("maxDistance",i)}get stepSize(){return this.#Im}set stepSize(i){validatePositiveNumberRange(i,.001,5),this.#Im=i,this.updateUniform("stepSize",i)}get reflectionIntensity(){return this.#Lm}set reflectionIntensity(i){validateNumberRange(i,0,5),this.#Lm=i,this.updateUniform("reflectionIntensity",i)}get fadeDistance(){return this.#Dm}set fadeDistance(i){validatePositiveNumberRange(i,1,100),this.#Dm=i,this.updateUniform("fadeDistance",i)}get edgeFade(){return this.#Um}set edgeFade(i){validateNumberRange(i,0,.5),this.#Um=i,this.updateUniform("edgeFade",i)}#Am(){const createCode=i=>` struct Uniforms { maxSteps:u32, maxDistance:f32, stepSize:f32, reflectionIntensity:f32, fadeDistance:f32, edgeFade:f32, _padding:f32, _padding2:f32, } fn getTextureDimensions() -> vec2<u32> { return textureDimensions(depthTexture); } fn reconstructWorldPosition(screenCoord:vec2<i32>,depth:f32) -> vec3<f32> { let texDims=getTextureDimensions(); let invTexDims=1.0/vec2<f32>(texDims); let uv=(vec2<f32>(screenCoord) + 0.5) * invTexDims; let ndc=vec3<f32>( uv.x * 2.0 - 1.0, -(uv.y * 2.0 - 1.0), depth * 2.0 - 1.0 ); let clipPos=vec4<f32>(ndc,1.0); let viewPos4=systemUniforms.inverseProjectionMatrix * clipPos; if (abs(viewPos4.w) < 1e-6) { return vec3<f32>(0.0); } let viewPos=viewPos4.xyz/viewPos4.w; let worldPos4=systemUniforms.camera.inverseCameraMatrix * vec4<f32>(viewPos,1.0); return worldPos4.xyz; } fn reconstructWorldNormal(gBufferNormalData:vec4<f32>) -> vec3<f32> { return normalize(gBufferNormalData.rgb * 2.0 - 1.0); } fn worldToScreen(worldPos:vec3<f32>) -> vec2<f32> { let clipPos4=systemUniforms.projectionCameraMatrix * vec4<f32>(worldPos,1.0); if (abs(clipPos4.w) < 1e-6) { return vec2<f32>(-1.0); } let ndc=clipPos4.xyz/clipPos4.w; return vec2<f32>(ndc.x * 0.5 + 0.5,-ndc.y * 0.5 + 0.5); } fn calculateEdgeFade(screenUV:vec2<f32>) -> f32 { let edge=min(screenUV,1.0 - screenUV); let edgeDist=min(edge.x,edge.y); return smoothstep(0.0,uniforms.edgeFade,edgeDist); } fn calculateWorldReflectionRay(worldPos:vec3<f32>,worldNormal:vec3<f32>,cameraWorldPos:vec3<f32>) -> vec3<f32> { let viewDir=normalize(cameraWorldPos - worldPos); return reflect(-viewDir,worldNormal); }\nfn performWorldRayMarching(startWorldPos:vec3<f32>,rayDir:vec3<f32>) -> vec4<f32> { let cameraWorldPos=systemUniforms.camera.inverseCameraMatrix[3].xyz; let cameraDistance=length(startWorldPos - cameraWorldPos); let distanceScale=1.0 + cameraDistance * 0.1; let adaptiveStepSize=uniforms.stepSize * min(distanceScale,4.0); let stepScale=1.0 + cameraDistance * 0.067; let adaptiveMaxSteps=u32(f32(uniforms.maxSteps) * min(stepScale,2.0)); let maxDistanceSq=uniforms.maxDistance * uniforms.maxDistance; let texDims=getTextureDimensions(); let texSizeF=vec2<f32>(texDims); let maxRefinementLevels=4u; let invMaxSteps=1.0/f32(adaptiveMaxSteps); var currentWorldPos=startWorldPos + rayDir * 0.01; var currentStepSize=adaptiveStepSize; var refinementLevel=0u; for (var i=0u;i < adaptiveMaxSteps;i++) { currentWorldPos +=rayDir * currentStepSize; let travelVec=currentWorldPos - startWorldPos; let travelDistanceSq=dot(travelVec,travelVec); if (travelDistanceSq > maxDistanceSq) { break; } let currentScreenUV=worldToScreen(currentWorldPos); if (any(currentScreenUV < vec2<f32>(0.0)) || any(currentScreenUV > vec2<f32>(1.0))) { break; } let screenCoord=vec2<i32>(currentScreenUV * texSizeF); let sampledDepth=textureLoad(depthTexture,screenCoord,0); if (sampledDepth >=0.999) { continue; } let sampledWorldPos=reconstructWorldPosition(screenCoord,sampledDepth); let rayDistanceFromCamera=length(currentWorldPos - cameraWorldPos); let surfaceDistanceFromCamera=length(sampledWorldPos - cameraWorldPos); let distanceDiff=rayDistanceFromCamera - surfaceDistanceFromCamera; let intersectionThreshold=currentStepSize * (4.0 + cameraDistance * 0.033); if (distanceDiff > 0.0 && distanceDiff < intersectionThreshold) { if (refinementLevel < maxRefinementLevels) { currentWorldPos -=rayDir * currentStepSize; currentStepSize *=0.6; refinementLevel++; continue; } let reflectionColor=textureLoad(sourceTexture,screenCoord); let travelDistance=sqrt(travelDistanceSq); let distanceFade=1.0 - smoothstep(0.0,uniforms.fadeDistance,travelDistance); let edgeFade=calculateEdgeFade(currentScreenUV); let stepFade=1.0 - f32(i) * invMaxSteps; let distanceCompensation=min(1.5,1.0 + cameraDistance * 0.04); let totalFade=distanceFade * edgeFade * stepFade * distanceCompensation; return vec4<f32>(reflectionColor.rgb,totalFade); } } return vec4<f32>(0.0);\n}\n  @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var depthTexture:${i?"texture_depth_multisampled_2d":"texture_depth_2d"}; @group(0) @binding(2) var gBufferNormalTexture:texture_2d<f32>;  @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; ${vr} @group(1) @binding(2) var<uniform> uniforms:Uniforms;  @compute @workgroup_size(${this.WORK_SIZE_X},${this.WORK_SIZE_Y},${this.WORK_SIZE_Z}) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let screenCoord=vec2<i32>(global_id.xy);\nlet texDims=textureDimensions(sourceTexture);\nlet texSize=vec2<i32>(texDims);\nif (screenCoord.x >=texSize.x || screenCoord.y >=texSize.y) { return;\n}\nlet originalColor=textureLoad(sourceTexture,screenCoord);\nlet depth=textureLoad(depthTexture,screenCoord,0);\nif (depth >=0.999) { textureStore(outputTexture,screenCoord,originalColor); return;\n}\nlet gBufferNormalData=textureLoad(gBufferNormalTexture,screenCoord,0);\nlet precomputedReflectionStrength=gBufferNormalData.a;\nif (precomputedReflectionStrength < 0.05) { textureStore(outputTexture,screenCoord,originalColor); return;\n}\nlet worldPos=reconstructWorldPosition(screenCoord,depth);\nlet worldNormal=reconstructWorldNormal(gBufferNormalData);\nif (length(worldNormal) < 0.01) { textureStore(outputTexture,screenCoord,originalColor); return;\n}\nlet normal=normalize(worldNormal);\nlet cameraWorldPos=systemUniforms.camera.inverseCameraMatrix[3].xyz;\nlet reflectionDir=calculateWorldReflectionRay(worldPos,normal,cameraWorldPos);\nlet reflection=performWorldRayMarching(worldPos,reflectionDir);\nif (reflection.a > 0.001) { let finalReflectionStrength=reflection.a * uniforms.reflectionIntensity * precomputedReflectionStrength; let reflectionColor=reflection.rgb * finalReflectionStrength; let diffuseColor=originalColor.rgb * (1.0 - finalReflectionStrength); let finalColor=diffuseColor + reflectionColor; textureStore(outputTexture,screenCoord,vec4<f32>(finalColor,originalColor.a));\n} else { textureStore(outputTexture,screenCoord,originalColor);\n}\n } `;return{msaa:createCode(!0),nonMsaa:createCode(!1)}}}Object.freeze(SSR);var za=Object.freeze({__proto__:null,Blur:Blur,BlurX:BlurX,BlurY:BlurY,BrightnessContrast:BrightnessContrast,ChromaticAberration:ChromaticAberration,ColorBalance:ColorBalance,ColorTemperatureTint:ColorTemperatureTint,Convolution:Convolution,Core:La,DOF:DOF,DirectionalBlur:DirectionalBlur,FilmGrain:FilmGrain,Fog:Fog,GaussianBlur:GaussianBlur,Grayscale:Grayscale,HeightFog:HeightFog,HueSaturation:HueSaturation,Invert:Invert,LensDistortion:LensDistortion,OldBloom:OldBloom,PostEffectManager:PostEffectManager,RadialBlur:RadialBlur,SSR:SSR,Sharpen:Sharpen,Threshold:Threshold,Vibrance:Vibrance,Vignetting:Vignetting,ZoomBlur:ZoomBlur}),Ha=Object.freeze({__proto__:null,PICKING_EVENT_TYPE:i,PickingEvent:PickingEvent,PickingManager:PickingManager}),$a=Object.freeze({__proto__:null,BlendState:BlendState,DepthStencilState:DepthStencilState,PrimitiveState:PrimitiveState}),Wa=Object.freeze({__proto__:null,DirectionalShadowManager:DirectionalShadowManager,ShadowManager:ShadowManager});export{qr as Camera,ColorRGB,ColorRGBA,gt as DefineForFragment,Ge as DefineForVertex,ji as Display,GLTFLoader,un as GPU_ADDRESS_MODE,en as GPU_BLEND_FACTOR,tn as GPU_BLEND_OPERATION,wn as GPU_COMPARE_FUNCTION,Cn as GPU_CULL_MODE,ln as GPU_FILTER_MODE,Rn as GPU_FRONT_FACE,Pn as GPU_INDEX_FORMAT,pr as GPU_LOAD_OP,cn as GPU_MIPMAP_FILTER_MODE,Ke as GPU_PRIMITIVE_TOPOLOGY,gr as GPU_STORE_OP,Geometry,qi as Light,Qi as Material,Ha as Picking,za as PostEffect,Zi as Primitive,Zr as RedGPUContext,$a as RenderState,Renderer,pa as Resource,Ia as RuntimeChecker,Wa as Shadow,Kt as SystemCode,mr as Util,init,b as mat3,z as mat4};