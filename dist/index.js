var i=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array,g=Math.random;var _=Math.PI/180;Math.hypot||(Math.hypot=function(){for(var i=0,m=arguments.length;m--;)i+=arguments[m]*arguments[m];return Math.sqrt(i)});var b=Object.freeze({__proto__:null,get ARRAY_TYPE(){return m},EPSILON:i,RANDOM:g,equals:function(m,g){return Math.abs(m-g)<=i*Math.max(1,Math.abs(m),Math.abs(g))},setMatrixArrayType:function(i){m=i},toRadian:function(i){return i*_}});function multiply$8(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return i[0]=_*w+y*P,i[1]=b*w+T*P,i[2]=_*$+y*H,i[3]=b*$+T*H,i}function subtract$6(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i}var y=multiply$8,T=subtract$6,w=Object.freeze({__proto__:null,LDU:function(i,m,g,_){return i[2]=_[2]/_[0],g[0]=_[0],g[1]=_[1],g[3]=_[3]-i[2]*g[1],[i,m,g]},add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i},adjoint:function(i,m){var g=m[0];return i[0]=m[3],i[1]=-m[1],i[2]=-m[2],i[3]=g,i},clone:function(i){var g=new m(4);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i},create:function(){var i=new m(4);return m!=Float32Array&&(i[1]=0,i[2]=0),i[0]=1,i[3]=1,i},determinant:function(i){return i[0]*i[3]-i[2]*i[1]},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return Math.abs(_-w)<=i*Math.max(1,Math.abs(_),Math.abs(w))&&Math.abs(b-P)<=i*Math.max(1,Math.abs(b),Math.abs(P))&&Math.abs(y-$)<=i*Math.max(1,Math.abs(y),Math.abs($))&&Math.abs(T-H)<=i*Math.max(1,Math.abs(T),Math.abs(H))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3])},fromRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=-g,i[3]=_,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=m[1],i},fromValues:function(i,g,_,b){var y=new m(4);return y[0]=i,y[1]=g,y[2]=_,y[3]=b,y},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g*y-b*_;return T?(T=1/T,i[0]=y*T,i[1]=-_*T,i[2]=-b*T,i[3]=g*T,i):null},mul:y,multiply:multiply$8,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i},rotate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P+y*w,i[1]=b*P+T*w,i[2]=_*-w+y*P,i[3]=b*-w+T*P,i},scale:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1];return i[0]=_*w,i[1]=b*w,i[2]=y*P,i[3]=T*P,i},set:function(i,m,g,_,b){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i},str:function(i){return"mat2("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"},sub:T,subtract:subtract$6,transpose:function(i,m){if(i===m){var g=m[1];i[1]=m[2],i[2]=g}else i[0]=m[0],i[1]=m[2],i[2]=m[1],i[3]=m[3];return i}});function multiply$7(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1],q=g[2],W=g[3],ye=g[4],Ge=g[5];return i[0]=_*$+y*H,i[1]=b*$+T*H,i[2]=_*q+y*W,i[3]=b*q+T*W,i[4]=_*ye+y*Ge+w,i[5]=b*ye+T*Ge+P,i}function subtract$5(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i}var P=multiply$7,$=subtract$5,H=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i},clone:function(i){var g=new m(6);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i},create:function(){var i=new m(6);return m!=Float32Array&&(i[1]=0,i[2]=0,i[4]=0,i[5]=0),i[0]=1,i[3]=1,i},determinant:function(i){return i[0]*i[3]-i[1]*i[2]},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1],q=g[2],W=g[3],ye=g[4],Ge=g[5];return Math.abs(_-$)<=i*Math.max(1,Math.abs(_),Math.abs($))&&Math.abs(b-H)<=i*Math.max(1,Math.abs(b),Math.abs(H))&&Math.abs(y-q)<=i*Math.max(1,Math.abs(y),Math.abs(q))&&Math.abs(T-W)<=i*Math.max(1,Math.abs(T),Math.abs(W))&&Math.abs(w-ye)<=i*Math.max(1,Math.abs(w),Math.abs(ye))&&Math.abs(P-Ge)<=i*Math.max(1,Math.abs(P),Math.abs(Ge))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],1)},fromRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=-g,i[3]=_,i[4]=0,i[5]=0,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=m[1],i[4]=0,i[5]=0,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i[4]=m[0],i[5]=m[1],i},fromValues:function(i,g,_,b,y,T){var w=new m(6);return w[0]=i,w[1]=g,w[2]=_,w[3]=b,w[4]=y,w[5]=T,w},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=1,i[4]=0,i[5]=0,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=g*y-_*b;return P?(P=1/P,i[0]=y*P,i[1]=-_*P,i[2]=-b*P,i[3]=g*P,i[4]=(b*w-y*T)*P,i[5]=(_*T-g*w)*P,i):null},mul:P,multiply:multiply$7,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i[4]=m[4]+g[4]*_,i[5]=m[5]+g[5]*_,i},rotate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=Math.sin(g),H=Math.cos(g);return i[0]=_*H+y*$,i[1]=b*H+T*$,i[2]=_*-$+y*H,i[3]=b*-$+T*H,i[4]=w,i[5]=P,i},scale:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1];return i[0]=_*$,i[1]=b*$,i[2]=y*H,i[3]=T*H,i[4]=w,i[5]=P,i},set:function(i,m,g,_,b,y,T){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i},str:function(i){return"mat2d("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+")"},sub:$,subtract:subtract$5,translate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=g[0],H=g[1];return i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=_*$+y*H+w,i[5]=b*$+T*H+P,i}});function create$6(){var i=new m(9);return m!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[5]=0,i[6]=0,i[7]=0),i[0]=1,i[4]=1,i[8]=1,i}function multiply$6(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=g[0],ye=g[1],Ge=g[2],Ke=g[3],Xe=g[4],Ye=g[5],je=g[6],Ze=g[7],Je=g[8];return i[0]=W*_+ye*T+Ge*$,i[1]=W*b+ye*w+Ge*H,i[2]=W*y+ye*P+Ge*q,i[3]=Ke*_+Xe*T+Ye*$,i[4]=Ke*b+Xe*w+Ye*H,i[5]=Ke*y+Xe*P+Ye*q,i[6]=je*_+Ze*T+Je*$,i[7]=je*b+Ze*w+Je*H,i[8]=je*y+Ze*P+Je*q,i}function subtract$4(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i}var q=multiply$6,W=subtract$4,ye=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i},adjoint:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8];return i[0]=T*H-w*$,i[1]=b*$-_*H,i[2]=_*w-b*T,i[3]=w*P-y*H,i[4]=g*H-b*P,i[5]=b*y-g*w,i[6]=y*$-T*P,i[7]=_*P-g*$,i[8]=g*T-_*y,i},clone:function(i){var g=new m(9);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g[8]=i[8],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},create:create$6,determinant:function(i){var m=i[0],g=i[1],_=i[2],b=i[3],y=i[4],T=i[5],w=i[6],P=i[7],$=i[8];return m*($*y-T*P)+g*(-$*b+T*w)+_*(P*b-y*w)},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=g[0],ye=g[1],Ge=g[2],Ke=g[3],Xe=g[4],Ye=g[5],je=g[6],Ze=g[7],Je=g[8];return Math.abs(_-W)<=i*Math.max(1,Math.abs(_),Math.abs(W))&&Math.abs(b-ye)<=i*Math.max(1,Math.abs(b),Math.abs(ye))&&Math.abs(y-Ge)<=i*Math.max(1,Math.abs(y),Math.abs(Ge))&&Math.abs(T-Ke)<=i*Math.max(1,Math.abs(T),Math.abs(Ke))&&Math.abs(w-Xe)<=i*Math.max(1,Math.abs(w),Math.abs(Xe))&&Math.abs(P-Ye)<=i*Math.max(1,Math.abs(P),Math.abs(Ye))&&Math.abs($-je)<=i*Math.max(1,Math.abs($),Math.abs(je))&&Math.abs(H-Ze)<=i*Math.max(1,Math.abs(H),Math.abs(Ze))&&Math.abs(q-Je)<=i*Math.max(1,Math.abs(q),Math.abs(Je))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8])},fromMat2d:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=0,i[3]=m[2],i[4]=m[3],i[5]=0,i[6]=m[4],i[7]=m[5],i[8]=1,i},fromMat4:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[4],i[4]=m[5],i[5]=m[6],i[6]=m[8],i[7]=m[9],i[8]=m[10],i},fromQuat:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g+g,w=_+_,P=b+b,$=g*T,H=_*T,q=_*w,W=b*T,ye=b*w,Ge=b*P,Ke=y*T,Xe=y*w,Ye=y*P;return i[0]=1-q-Ge,i[3]=H-Ye,i[6]=W+Xe,i[1]=H+Ye,i[4]=1-$-Ge,i[7]=ye-Ke,i[2]=W-Xe,i[5]=ye+Ke,i[8]=1-$-q,i},fromRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=0,i[3]=-g,i[4]=_,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=m[1],i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=m[0],i[7]=m[1],i[8]=1,i},fromValues:function(i,g,_,b,y,T,w,P,$){var H=new m(9);return H[0]=i,H[1]=g,H[2]=_,H[3]=b,H[4]=y,H[5]=T,H[6]=w,H[7]=P,H[8]=$,H},identity:function(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=1,i[5]=0,i[6]=0,i[7]=0,i[8]=1,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=H*T-w*$,W=-H*y+w*P,ye=$*y-T*P,Ge=g*q+_*W+b*ye;return Ge?(Ge=1/Ge,i[0]=q*Ge,i[1]=(-H*_+b*$)*Ge,i[2]=(w*_-b*T)*Ge,i[3]=W*Ge,i[4]=(H*g-b*P)*Ge,i[5]=(-w*g+b*y)*Ge,i[6]=ye*Ge,i[7]=(-$*g+_*P)*Ge,i[8]=(T*g-_*y)*Ge,i):null},mul:q,multiply:multiply$6,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i[4]=m[4]+g[4]*_,i[5]=m[5]+g[5]*_,i[6]=m[6]+g[6]*_,i[7]=m[7]+g[7]*_,i[8]=m[8]+g[8]*_,i},normalFromMat4:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],Ye=m[15],je=g*w-_*T,Ze=g*P-b*T,Je=g*$-y*T,Qe=_*P-b*w,et=_*$-y*w,at=b*$-y*P,ht=H*Ke-q*Ge,ft=H*Xe-W*Ge,gt=H*Ye-ye*Ge,xt=q*Xe-W*Ke,vt=q*Ye-ye*Ke,bt=W*Ye-ye*Xe,yt=je*bt-Ze*vt+Je*xt+Qe*gt-et*ft+at*ht;return yt?(yt=1/yt,i[0]=(w*bt-P*vt+$*xt)*yt,i[1]=(P*gt-T*bt-$*ft)*yt,i[2]=(T*vt-w*gt+$*ht)*yt,i[3]=(b*vt-_*bt-y*xt)*yt,i[4]=(g*bt-b*gt+y*ft)*yt,i[5]=(_*gt-g*vt-y*ht)*yt,i[6]=(Ke*at-Xe*et+Ye*Qe)*yt,i[7]=(Xe*Je-Ge*at-Ye*Ze)*yt,i[8]=(Ge*et-Ke*Je+Ye*je)*yt,i):null},projection:function(i,m,g){return i[0]=2/m,i[1]=0,i[2]=0,i[3]=0,i[4]=-2/g,i[5]=0,i[6]=-1,i[7]=1,i[8]=1,i},rotate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=Math.sin(g),ye=Math.cos(g);return i[0]=ye*_+W*T,i[1]=ye*b+W*w,i[2]=ye*y+W*P,i[3]=ye*T-W*_,i[4]=ye*w-W*b,i[5]=ye*P-W*y,i[6]=$,i[7]=H,i[8]=q,i},scale:function(i,m,g){var _=g[0],b=g[1];return i[0]=_*m[0],i[1]=_*m[1],i[2]=_*m[2],i[3]=b*m[3],i[4]=b*m[4],i[5]=b*m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i},set:function(i,m,g,_,b,y,T,w,P,$){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i[6]=w,i[7]=P,i[8]=$,i},str:function(i){return"mat3("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+")"},sub:W,subtract:subtract$4,translate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=g[0],ye=g[1];return i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=w,i[5]=P,i[6]=W*_+ye*T+$,i[7]=W*b+ye*w+H,i[8]=W*y+ye*P+q,i},transpose:function(i,m){if(i===m){var g=m[1],_=m[2],b=m[5];i[1]=m[3],i[2]=m[6],i[3]=g,i[5]=m[7],i[6]=_,i[7]=b}else i[0]=m[0],i[1]=m[3],i[2]=m[6],i[3]=m[1],i[4]=m[4],i[5]=m[7],i[6]=m[2],i[7]=m[5],i[8]=m[8];return i}});function create$5(){var i=new m(16);return m!=Float32Array&&(i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0),i[0]=1,i[5]=1,i[10]=1,i[15]=1,i}function clone$5(i){var g=new m(16);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g[8]=i[8],g[9]=i[9],g[10]=i[10],g[11]=i[11],g[12]=i[12],g[13]=i[13],g[14]=i[14],g[15]=i[15],g}function copy$5(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function fromValues$5(i,g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe){var Ye=new m(16);return Ye[0]=i,Ye[1]=g,Ye[2]=_,Ye[3]=b,Ye[4]=y,Ye[5]=T,Ye[6]=w,Ye[7]=P,Ye[8]=$,Ye[9]=H,Ye[10]=q,Ye[11]=W,Ye[12]=ye,Ye[13]=Ge,Ye[14]=Ke,Ye[15]=Xe,Ye}function identity$2(i){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i}function invert$2(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],Ye=m[15],je=g*w-_*T,Ze=g*P-b*T,Je=g*$-y*T,Qe=_*P-b*w,et=_*$-y*w,at=b*$-y*P,ht=H*Ke-q*Ge,ft=H*Xe-W*Ge,gt=H*Ye-ye*Ge,xt=q*Xe-W*Ke,vt=q*Ye-ye*Ke,bt=W*Ye-ye*Xe,yt=je*bt-Ze*vt+Je*xt+Qe*gt-et*ft+at*ht;return yt?(yt=1/yt,i[0]=(w*bt-P*vt+$*xt)*yt,i[1]=(b*vt-_*bt-y*xt)*yt,i[2]=(Ke*at-Xe*et+Ye*Qe)*yt,i[3]=(W*et-q*at-ye*Qe)*yt,i[4]=(P*gt-T*bt-$*ft)*yt,i[5]=(g*bt-b*gt+y*ft)*yt,i[6]=(Xe*Je-Ge*at-Ye*Ze)*yt,i[7]=(H*at-W*Je+ye*Ze)*yt,i[8]=(T*vt-w*gt+$*ht)*yt,i[9]=(_*gt-g*vt-y*ht)*yt,i[10]=(Ge*et-Ke*Je+Ye*je)*yt,i[11]=(q*Je-H*et-ye*je)*yt,i[12]=(w*ft-T*xt-P*ht)*yt,i[13]=(g*xt-_*ft+b*ht)*yt,i[14]=(Ke*Ze-Ge*Qe-Xe*je)*yt,i[15]=(H*Qe-q*Ze+W*je)*yt,i):null}function multiply$5(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=m[9],ye=m[10],Ge=m[11],Ke=m[12],Xe=m[13],Ye=m[14],je=m[15],Ze=g[0],Je=g[1],Qe=g[2],et=g[3];return i[0]=Ze*_+Je*w+Qe*q+et*Ke,i[1]=Ze*b+Je*P+Qe*W+et*Xe,i[2]=Ze*y+Je*$+Qe*ye+et*Ye,i[3]=Ze*T+Je*H+Qe*Ge+et*je,Ze=g[4],Je=g[5],Qe=g[6],et=g[7],i[4]=Ze*_+Je*w+Qe*q+et*Ke,i[5]=Ze*b+Je*P+Qe*W+et*Xe,i[6]=Ze*y+Je*$+Qe*ye+et*Ye,i[7]=Ze*T+Je*H+Qe*Ge+et*je,Ze=g[8],Je=g[9],Qe=g[10],et=g[11],i[8]=Ze*_+Je*w+Qe*q+et*Ke,i[9]=Ze*b+Je*P+Qe*W+et*Xe,i[10]=Ze*y+Je*$+Qe*ye+et*Ye,i[11]=Ze*T+Je*H+Qe*Ge+et*je,Ze=g[12],Je=g[13],Qe=g[14],et=g[15],i[12]=Ze*_+Je*w+Qe*q+et*Ke,i[13]=Ze*b+Je*P+Qe*W+et*Xe,i[14]=Ze*y+Je*$+Qe*ye+et*Ye,i[15]=Ze*T+Je*H+Qe*Ge+et*je,i}function translate$1(i,m,g){var _,b,y,T,w,P,$,H,q,W,ye,Ge,Ke=g[0],Xe=g[1],Ye=g[2];return m===i?(i[12]=m[0]*Ke+m[4]*Xe+m[8]*Ye+m[12],i[13]=m[1]*Ke+m[5]*Xe+m[9]*Ye+m[13],i[14]=m[2]*Ke+m[6]*Xe+m[10]*Ye+m[14],i[15]=m[3]*Ke+m[7]*Xe+m[11]*Ye+m[15]):(_=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=m[9],ye=m[10],Ge=m[11],i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=w,i[5]=P,i[6]=$,i[7]=H,i[8]=q,i[9]=W,i[10]=ye,i[11]=Ge,i[12]=_*Ke+w*Xe+q*Ye+m[12],i[13]=b*Ke+P*Xe+W*Ye+m[13],i[14]=y*Ke+$*Xe+ye*Ye+m[14],i[15]=T*Ke+H*Xe+Ge*Ye+m[15]),i}function scale$5(i,m,g){var _=g[0],b=g[1],y=g[2];return i[0]=m[0]*_,i[1]=m[1]*_,i[2]=m[2]*_,i[3]=m[3]*_,i[4]=m[4]*b,i[5]=m[5]*b,i[6]=m[6]*b,i[7]=m[7]*b,i[8]=m[8]*y,i[9]=m[9]*y,i[10]=m[10]*y,i[11]=m[11]*y,i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15],i}function rotateX$3(i,m,g){var _=Math.sin(g),b=Math.cos(g),y=m[4],T=m[5],w=m[6],P=m[7],$=m[8],H=m[9],q=m[10],W=m[11];return m!==i&&(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[4]=y*b+$*_,i[5]=T*b+H*_,i[6]=w*b+q*_,i[7]=P*b+W*_,i[8]=$*b-y*_,i[9]=H*b-T*_,i[10]=q*b-w*_,i[11]=W*b-P*_,i}function rotateY$3(i,m,g){var _=Math.sin(g),b=Math.cos(g),y=m[0],T=m[1],w=m[2],P=m[3],$=m[8],H=m[9],q=m[10],W=m[11];return m!==i&&(i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=y*b-$*_,i[1]=T*b-H*_,i[2]=w*b-q*_,i[3]=P*b-W*_,i[8]=y*_+$*b,i[9]=T*_+H*b,i[10]=w*_+q*b,i[11]=P*_+W*b,i}function rotateZ$3(i,m,g){var _=Math.sin(g),b=Math.cos(g),y=m[0],T=m[1],w=m[2],P=m[3],$=m[4],H=m[5],q=m[6],W=m[7];return m!==i&&(i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]),i[0]=y*b+$*_,i[1]=T*b+H*_,i[2]=w*b+q*_,i[3]=P*b+W*_,i[4]=$*b-y*_,i[5]=H*b-T*_,i[6]=q*b-w*_,i[7]=W*b-P*_,i}function fromRotationTranslation$1(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=_+_,P=b+b,$=y+y,H=_*w,q=_*P,W=_*$,ye=b*P,Ge=b*$,Ke=y*$,Xe=T*w,Ye=T*P,je=T*$;return i[0]=1-(ye+Ke),i[1]=q+je,i[2]=W-Ye,i[3]=0,i[4]=q-je,i[5]=1-(H+Ke),i[6]=Ge+Xe,i[7]=0,i[8]=W+Ye,i[9]=Ge-Xe,i[10]=1-(H+ye),i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i}function getTranslation$1(i,m){return i[0]=m[12],i[1]=m[13],i[2]=m[14],i}function getScaling(i,m){var g=m[0],_=m[1],b=m[2],y=m[4],T=m[5],w=m[6],P=m[8],$=m[9],H=m[10];return i[0]=Math.hypot(g,_,b),i[1]=Math.hypot(y,T,w),i[2]=Math.hypot(P,$,H),i}function getRotation(i,g){var _=new m(3);getScaling(_,g);var b=1/_[0],y=1/_[1],T=1/_[2],w=g[0]*b,P=g[1]*y,$=g[2]*T,H=g[4]*b,q=g[5]*y,W=g[6]*T,ye=g[8]*b,Ge=g[9]*y,Ke=g[10]*T,Xe=w+q+Ke,Ye=0;return Xe>0?(Ye=2*Math.sqrt(Xe+1),i[3]=.25*Ye,i[0]=(W-Ge)/Ye,i[1]=(ye-$)/Ye,i[2]=(P-H)/Ye):w>q&&w>Ke?(Ye=2*Math.sqrt(1+w-q-Ke),i[3]=(W-Ge)/Ye,i[0]=.25*Ye,i[1]=(P+H)/Ye,i[2]=(ye+$)/Ye):q>Ke?(Ye=2*Math.sqrt(1+q-w-Ke),i[3]=(ye-$)/Ye,i[0]=(P+H)/Ye,i[1]=.25*Ye,i[2]=(W+Ge)/Ye):(Ye=2*Math.sqrt(1+Ke-w-q),i[3]=(P-H)/Ye,i[0]=(ye+$)/Ye,i[1]=(W+Ge)/Ye,i[2]=.25*Ye),i}function perspectiveNO(i,m,g,_,b){var y,T=1/Math.tan(m/2);return i[0]=T/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=T,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=b&&b!==1/0?(y=1/(_-b),i[10]=(b+_)*y,i[14]=2*b*_*y):(i[10]=-1,i[14]=-2*_),i}var Ge=perspectiveNO;function orthoNO(i,m,g,_,b,y,T){var w=1/(m-g),P=1/(_-b),$=1/(y-T);return i[0]=-2*w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*P,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=2*$,i[11]=0,i[12]=(m+g)*w,i[13]=(b+_)*P,i[14]=(T+y)*$,i[15]=1,i}var Ke=orthoNO;function orthoZO(i,m,g,_,b,y,T){var w=1/(m-g),P=1/(_-b),$=1/(y-T);return i[0]=-2*w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=-2*P,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=$,i[11]=0,i[12]=(m+g)*w,i[13]=(b+_)*P,i[14]=y*$,i[15]=1,i}function lookAt(m,g,_,b){var y,T,w,P,$,H,q,W,ye,Ge,Ke=g[0],Xe=g[1],Ye=g[2],je=b[0],Ze=b[1],Je=b[2],Qe=_[0],et=_[1],at=_[2];return Math.abs(Ke-Qe)<i&&Math.abs(Xe-et)<i&&Math.abs(Ye-at)<i?identity$2(m):(q=Ke-Qe,W=Xe-et,ye=Ye-at,y=Ze*(ye*=Ge=1/Math.hypot(q,W,ye))-Je*(W*=Ge),T=Je*(q*=Ge)-je*ye,w=je*W-Ze*q,(Ge=Math.hypot(y,T,w))?(y*=Ge=1/Ge,T*=Ge,w*=Ge):(y=0,T=0,w=0),P=W*w-ye*T,$=ye*y-q*w,H=q*T-W*y,(Ge=Math.hypot(P,$,H))?(P*=Ge=1/Ge,$*=Ge,H*=Ge):(P=0,$=0,H=0),m[0]=y,m[1]=P,m[2]=q,m[3]=0,m[4]=T,m[5]=$,m[6]=W,m[7]=0,m[8]=w,m[9]=H,m[10]=ye,m[11]=0,m[12]=-(y*Ke+T*Xe+w*Ye),m[13]=-(P*Ke+$*Xe+H*Ye),m[14]=-(q*Ke+W*Xe+ye*Ye),m[15]=1,m)}function targetTo(i,m,g,_){var b=m[0],y=m[1],T=m[2],w=_[0],P=_[1],$=_[2],H=b-g[0],q=y-g[1],W=T-g[2],ye=H*H+q*q+W*W;ye>0&&(H*=ye=1/Math.sqrt(ye),q*=ye,W*=ye);var Ge=P*W-$*q,Ke=$*H-w*W,Xe=w*q-P*H;return(ye=Ge*Ge+Ke*Ke+Xe*Xe)>0&&(Ge*=ye=1/Math.sqrt(ye),Ke*=ye,Xe*=ye),i[0]=Ge,i[1]=Ke,i[2]=Xe,i[3]=0,i[4]=q*Xe-W*Ke,i[5]=W*Ge-H*Xe,i[6]=H*Ke-q*Ge,i[7]=0,i[8]=H,i[9]=q,i[10]=W,i[11]=0,i[12]=b,i[13]=y,i[14]=T,i[15]=1,i}function subtract$3(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i[4]=m[4]-g[4],i[5]=m[5]-g[5],i[6]=m[6]-g[6],i[7]=m[7]-g[7],i[8]=m[8]-g[8],i[9]=m[9]-g[9],i[10]=m[10]-g[10],i[11]=m[11]-g[11],i[12]=m[12]-g[12],i[13]=m[13]-g[13],i[14]=m[14]-g[14],i[15]=m[15]-g[15],i}var Xe=multiply$5,Ye=subtract$3,je=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i[8]=m[8]+g[8],i[9]=m[9]+g[9],i[10]=m[10]+g[10],i[11]=m[11]+g[11],i[12]=m[12]+g[12],i[13]=m[13]+g[13],i[14]=m[14]+g[14],i[15]=m[15]+g[15],i},adjoint:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],Ye=m[15];return i[0]=w*(W*Ye-ye*Xe)-q*(P*Ye-$*Xe)+Ke*(P*ye-$*W),i[1]=-(_*(W*Ye-ye*Xe)-q*(b*Ye-y*Xe)+Ke*(b*ye-y*W)),i[2]=_*(P*Ye-$*Xe)-w*(b*Ye-y*Xe)+Ke*(b*$-y*P),i[3]=-(_*(P*ye-$*W)-w*(b*ye-y*W)+q*(b*$-y*P)),i[4]=-(T*(W*Ye-ye*Xe)-H*(P*Ye-$*Xe)+Ge*(P*ye-$*W)),i[5]=g*(W*Ye-ye*Xe)-H*(b*Ye-y*Xe)+Ge*(b*ye-y*W),i[6]=-(g*(P*Ye-$*Xe)-T*(b*Ye-y*Xe)+Ge*(b*$-y*P)),i[7]=g*(P*ye-$*W)-T*(b*ye-y*W)+H*(b*$-y*P),i[8]=T*(q*Ye-ye*Ke)-H*(w*Ye-$*Ke)+Ge*(w*ye-$*q),i[9]=-(g*(q*Ye-ye*Ke)-H*(_*Ye-y*Ke)+Ge*(_*ye-y*q)),i[10]=g*(w*Ye-$*Ke)-T*(_*Ye-y*Ke)+Ge*(_*$-y*w),i[11]=-(g*(w*ye-$*q)-T*(_*ye-y*q)+H*(_*$-y*w)),i[12]=-(T*(q*Xe-W*Ke)-H*(w*Xe-P*Ke)+Ge*(w*W-P*q)),i[13]=g*(q*Xe-W*Ke)-H*(_*Xe-b*Ke)+Ge*(_*W-b*q),i[14]=-(g*(w*Xe-P*Ke)-T*(_*Xe-b*Ke)+Ge*(_*P-b*w)),i[15]=g*(w*W-P*q)-T*(_*W-b*q)+H*(_*P-b*w),i},clone:clone$5,copy:copy$5,create:create$5,determinant:function(i){var m=i[0],g=i[1],_=i[2],b=i[3],y=i[4],T=i[5],w=i[6],P=i[7],$=i[8],H=i[9],q=i[10],W=i[11],ye=i[12],Ge=i[13],Ke=i[14],Xe=i[15];return(m*T-g*y)*(q*Xe-W*Ke)-(m*w-_*y)*(H*Xe-W*Ge)+(m*P-b*y)*(H*Ke-q*Ge)+(g*w-_*T)*($*Xe-W*ye)-(g*P-b*T)*($*Ke-q*ye)+(_*P-b*w)*($*Ge-H*ye)},equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=m[8],W=m[9],ye=m[10],Ge=m[11],Ke=m[12],Xe=m[13],Ye=m[14],je=m[15],Ze=g[0],Je=g[1],Qe=g[2],et=g[3],at=g[4],ht=g[5],ft=g[6],gt=g[7],xt=g[8],vt=g[9],bt=g[10],yt=g[11],Tt=g[12],St=g[13],wt=g[14],Mt=g[15];return Math.abs(_-Ze)<=i*Math.max(1,Math.abs(_),Math.abs(Ze))&&Math.abs(b-Je)<=i*Math.max(1,Math.abs(b),Math.abs(Je))&&Math.abs(y-Qe)<=i*Math.max(1,Math.abs(y),Math.abs(Qe))&&Math.abs(T-et)<=i*Math.max(1,Math.abs(T),Math.abs(et))&&Math.abs(w-at)<=i*Math.max(1,Math.abs(w),Math.abs(at))&&Math.abs(P-ht)<=i*Math.max(1,Math.abs(P),Math.abs(ht))&&Math.abs($-ft)<=i*Math.max(1,Math.abs($),Math.abs(ft))&&Math.abs(H-gt)<=i*Math.max(1,Math.abs(H),Math.abs(gt))&&Math.abs(q-xt)<=i*Math.max(1,Math.abs(q),Math.abs(xt))&&Math.abs(W-vt)<=i*Math.max(1,Math.abs(W),Math.abs(vt))&&Math.abs(ye-bt)<=i*Math.max(1,Math.abs(ye),Math.abs(bt))&&Math.abs(Ge-yt)<=i*Math.max(1,Math.abs(Ge),Math.abs(yt))&&Math.abs(Ke-Tt)<=i*Math.max(1,Math.abs(Ke),Math.abs(Tt))&&Math.abs(Xe-St)<=i*Math.max(1,Math.abs(Xe),Math.abs(St))&&Math.abs(Ye-wt)<=i*Math.max(1,Math.abs(Ye),Math.abs(wt))&&Math.abs(je-Mt)<=i*Math.max(1,Math.abs(je),Math.abs(Mt))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]&&i[8]===m[8]&&i[9]===m[9]&&i[10]===m[10]&&i[11]===m[11]&&i[12]===m[12]&&i[13]===m[13]&&i[14]===m[14]&&i[15]===m[15]},frob:function(i){return Math.hypot(i[0],i[1],i[2],i[3],i[4],i[5],i[6],i[7],i[8],i[9],i[10],i[11],i[12],i[13],i[14],i[15])},fromQuat:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g+g,w=_+_,P=b+b,$=g*T,H=_*T,q=_*w,W=b*T,ye=b*w,Ge=b*P,Ke=y*T,Xe=y*w,Ye=y*P;return i[0]=1-q-Ge,i[1]=H+Ye,i[2]=W-Xe,i[3]=0,i[4]=H-Ye,i[5]=1-$-Ge,i[6]=ye+Ke,i[7]=0,i[8]=W+Xe,i[9]=ye-Ke,i[10]=1-$-q,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromQuat2:function(i,g){var _=new m(3),b=-g[0],y=-g[1],T=-g[2],w=g[3],P=g[4],$=g[5],H=g[6],q=g[7],W=b*b+y*y+T*T+w*w;return W>0?(_[0]=2*(P*w+q*b+$*T-H*y)/W,_[1]=2*($*w+q*y+H*b-P*T)/W,_[2]=2*(H*w+q*T+P*y-$*b)/W):(_[0]=2*(P*w+q*b+$*T-H*y),_[1]=2*($*w+q*y+H*b-P*T),_[2]=2*(H*w+q*T+P*y-$*b)),fromRotationTranslation$1(i,g,_),i},fromRotation:function(m,g,_){var b,y,T,w=_[0],P=_[1],$=_[2],H=Math.hypot(w,P,$);return H<i?null:(w*=H=1/H,P*=H,$*=H,b=Math.sin(g),T=1-(y=Math.cos(g)),m[0]=w*w*T+y,m[1]=P*w*T+$*b,m[2]=$*w*T-P*b,m[3]=0,m[4]=w*P*T-$*b,m[5]=P*P*T+y,m[6]=$*P*T+w*b,m[7]=0,m[8]=w*$*T+P*b,m[9]=P*$*T-w*b,m[10]=$*$*T+y,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1,m)},fromRotationTranslation:fromRotationTranslation$1,fromRotationTranslationScale:function(i,m,g,_){var b=m[0],y=m[1],T=m[2],w=m[3],P=b+b,$=y+y,H=T+T,q=b*P,W=b*$,ye=b*H,Ge=y*$,Ke=y*H,Xe=T*H,Ye=w*P,je=w*$,Ze=w*H,Je=_[0],Qe=_[1],et=_[2];return i[0]=(1-(Ge+Xe))*Je,i[1]=(W+Ze)*Je,i[2]=(ye-je)*Je,i[3]=0,i[4]=(W-Ze)*Qe,i[5]=(1-(q+Xe))*Qe,i[6]=(Ke+Ye)*Qe,i[7]=0,i[8]=(ye+je)*et,i[9]=(Ke-Ye)*et,i[10]=(1-(q+Ge))*et,i[11]=0,i[12]=g[0],i[13]=g[1],i[14]=g[2],i[15]=1,i},fromRotationTranslationScaleOrigin:function(i,m,g,_,b){var y=m[0],T=m[1],w=m[2],P=m[3],$=y+y,H=T+T,q=w+w,W=y*$,ye=y*H,Ge=y*q,Ke=T*H,Xe=T*q,Ye=w*q,je=P*$,Ze=P*H,Je=P*q,Qe=_[0],et=_[1],at=_[2],ht=b[0],ft=b[1],gt=b[2],xt=(1-(Ke+Ye))*Qe,vt=(ye+Je)*Qe,bt=(Ge-Ze)*Qe,yt=(ye-Je)*et,Tt=(1-(W+Ye))*et,St=(Xe+je)*et,wt=(Ge+Ze)*at,Mt=(Xe-je)*at,Rt=(1-(W+Ke))*at;return i[0]=xt,i[1]=vt,i[2]=bt,i[3]=0,i[4]=yt,i[5]=Tt,i[6]=St,i[7]=0,i[8]=wt,i[9]=Mt,i[10]=Rt,i[11]=0,i[12]=g[0]+ht-(xt*ht+yt*ft+wt*gt),i[13]=g[1]+ft-(vt*ht+Tt*ft+Mt*gt),i[14]=g[2]+gt-(bt*ht+St*ft+Rt*gt),i[15]=1,i},fromScaling:function(i,m){return i[0]=m[0],i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=m[1],i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=m[2],i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromTranslation:function(i,m){return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=m[0],i[13]=m[1],i[14]=m[2],i[15]=1,i},fromValues:fromValues$5,fromXRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=1,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=_,i[6]=g,i[7]=0,i[8]=0,i[9]=-g,i[10]=_,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromYRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=0,i[2]=-g,i[3]=0,i[4]=0,i[5]=1,i[6]=0,i[7]=0,i[8]=g,i[9]=0,i[10]=_,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},fromZRotation:function(i,m){var g=Math.sin(m),_=Math.cos(m);return i[0]=_,i[1]=g,i[2]=0,i[3]=0,i[4]=-g,i[5]=_,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[10]=1,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,i},frustum:function(i,m,g,_,b,y,T){var w=1/(g-m),P=1/(b-_),$=1/(y-T);return i[0]=2*y*w,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=2*y*P,i[6]=0,i[7]=0,i[8]=(g+m)*w,i[9]=(b+_)*P,i[10]=(T+y)*$,i[11]=-1,i[12]=0,i[13]=0,i[14]=T*y*2*$,i[15]=0,i},getRotation:getRotation,getScaling:getScaling,getTranslation:getTranslation$1,identity:identity$2,invert:invert$2,lookAt:lookAt,mul:Xe,multiply:multiply$5,multiplyScalar:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i[8]=m[8]*g,i[9]=m[9]*g,i[10]=m[10]*g,i[11]=m[11]*g,i[12]=m[12]*g,i[13]=m[13]*g,i[14]=m[14]*g,i[15]=m[15]*g,i},multiplyScalarAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i[4]=m[4]+g[4]*_,i[5]=m[5]+g[5]*_,i[6]=m[6]+g[6]*_,i[7]=m[7]+g[7]*_,i[8]=m[8]+g[8]*_,i[9]=m[9]+g[9]*_,i[10]=m[10]+g[10]*_,i[11]=m[11]+g[11]*_,i[12]=m[12]+g[12]*_,i[13]=m[13]+g[13]*_,i[14]=m[14]+g[14]*_,i[15]=m[15]+g[15]*_,i},ortho:Ke,orthoNO:orthoNO,orthoZO:orthoZO,perspective:Ge,perspectiveFromFieldOfView:function(i,m,g,_){var b=Math.tan(m.upDegrees*Math.PI/180),y=Math.tan(m.downDegrees*Math.PI/180),T=Math.tan(m.leftDegrees*Math.PI/180),w=Math.tan(m.rightDegrees*Math.PI/180),P=2/(T+w),$=2/(b+y);return i[0]=P,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=$,i[6]=0,i[7]=0,i[8]=-(T-w)*P*.5,i[9]=(b-y)*$*.5,i[10]=_/(g-_),i[11]=-1,i[12]=0,i[13]=0,i[14]=_*g/(g-_),i[15]=0,i},perspectiveNO:perspectiveNO,perspectiveZO:function(i,m,g,_,b){var y,T=1/Math.tan(m/2);return i[0]=T/g,i[1]=0,i[2]=0,i[3]=0,i[4]=0,i[5]=T,i[6]=0,i[7]=0,i[8]=0,i[9]=0,i[11]=-1,i[12]=0,i[13]=0,i[15]=0,null!=b&&b!==1/0?(y=1/(_-b),i[10]=b*y,i[14]=b*_*y):(i[10]=-1,i[14]=-_),i},rotate:function(m,g,_,b){var y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt=b[0],yt=b[1],Tt=b[2],St=Math.hypot(bt,yt,Tt);return St<i?null:(bt*=St=1/St,yt*=St,Tt*=St,y=Math.sin(_),w=1-(T=Math.cos(_)),P=g[0],$=g[1],H=g[2],q=g[3],W=g[4],ye=g[5],Ge=g[6],Ke=g[7],Xe=g[8],Ye=g[9],je=g[10],Ze=g[11],Je=bt*bt*w+T,Qe=yt*bt*w+Tt*y,et=Tt*bt*w-yt*y,at=bt*yt*w-Tt*y,ht=yt*yt*w+T,ft=Tt*yt*w+bt*y,gt=bt*Tt*w+yt*y,xt=yt*Tt*w-bt*y,vt=Tt*Tt*w+T,m[0]=P*Je+W*Qe+Xe*et,m[1]=$*Je+ye*Qe+Ye*et,m[2]=H*Je+Ge*Qe+je*et,m[3]=q*Je+Ke*Qe+Ze*et,m[4]=P*at+W*ht+Xe*ft,m[5]=$*at+ye*ht+Ye*ft,m[6]=H*at+Ge*ht+je*ft,m[7]=q*at+Ke*ht+Ze*ft,m[8]=P*gt+W*xt+Xe*vt,m[9]=$*gt+ye*xt+Ye*vt,m[10]=H*gt+Ge*xt+je*vt,m[11]=q*gt+Ke*xt+Ze*vt,g!==m&&(m[12]=g[12],m[13]=g[13],m[14]=g[14],m[15]=g[15]),m)},rotateX:rotateX$3,rotateY:rotateY$3,rotateZ:rotateZ$3,scale:scale$5,set:function(i,m,g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i[6]=w,i[7]=P,i[8]=$,i[9]=H,i[10]=q,i[11]=W,i[12]=ye,i[13]=Ge,i[14]=Ke,i[15]=Xe,i},str:function(i){return"mat4("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+","+i[8]+","+i[9]+","+i[10]+","+i[11]+","+i[12]+","+i[13]+","+i[14]+","+i[15]+")"},sub:Ye,subtract:subtract$3,targetTo:targetTo,translate:translate$1,transpose:function(i,m){if(i===m){var g=m[1],_=m[2],b=m[3],y=m[6],T=m[7],w=m[11];i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=g,i[6]=m[9],i[7]=m[13],i[8]=_,i[9]=y,i[11]=m[14],i[12]=b,i[13]=T,i[14]=w}else i[0]=m[0],i[1]=m[4],i[2]=m[8],i[3]=m[12],i[4]=m[1],i[5]=m[5],i[6]=m[9],i[7]=m[13],i[8]=m[2],i[9]=m[6],i[10]=m[10],i[11]=m[14],i[12]=m[3],i[13]=m[7],i[14]=m[11],i[15]=m[15];return i}});function create$4(){var i=new m(3);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i}function length$4(i){var m=i[0],g=i[1],_=i[2];return Math.hypot(m,g,_)}function fromValues$4(i,g,_){var b=new m(3);return b[0]=i,b[1]=g,b[2]=_,b}function set$4(i,m,g,_){return i[0]=m,i[1]=g,i[2]=_,i}function subtract$2(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i}function multiply$4(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i[2]=m[2]*g[2],i}function divide$2(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i[2]=m[2]/g[2],i}function distance$2(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2];return Math.hypot(g,_,b)}function squaredDistance$2(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2];return g*g+_*_+b*b}function squaredLength$4(i){var m=i[0],g=i[1],_=i[2];return m*m+g*g+_*_}function normalize$4(i,m){var g=m[0],_=m[1],b=m[2],y=g*g+_*_+b*b;return y>0&&(y=1/Math.sqrt(y)),i[0]=m[0]*y,i[1]=m[1]*y,i[2]=m[2]*y,i}function dot$4(i,m){return i[0]*m[0]+i[1]*m[1]+i[2]*m[2]}function cross$2(i,m,g){var _=m[0],b=m[1],y=m[2],T=g[0],w=g[1],P=g[2];return i[0]=b*P-y*w,i[1]=y*T-_*P,i[2]=_*w-b*T,i}function lerp$4(i,m,g,_){var b=m[0],y=m[1],T=m[2];return i[0]=b+_*(g[0]-b),i[1]=y+_*(g[1]-y),i[2]=T+_*(g[2]-T),i}function transformMat4$2(i,m,g){var _=m[0],b=m[1],y=m[2],T=g[3]*_+g[7]*b+g[11]*y+g[15];return T=T||1,i[0]=(g[0]*_+g[4]*b+g[8]*y+g[12])/T,i[1]=(g[1]*_+g[5]*b+g[9]*y+g[13])/T,i[2]=(g[2]*_+g[6]*b+g[10]*y+g[14])/T,i}var Ze,Je=subtract$2,Qe=multiply$4,et=divide$2,at=distance$2,ht=squaredDistance$2,ft=length$4,gt=squaredLength$4,xt=(Ze=create$4(),function(i,m,g,_,b,y){var T,w;for(m||(m=3),g||(g=0),w=_?Math.min(_*m+g,i.length):i.length,T=g;T<w;T+=m)Ze[0]=i[T],Ze[1]=i[T+1],Ze[2]=i[T+2],b(Ze,Ze,y),i[T]=Ze[0],i[T+1]=Ze[1],i[T+2]=Ze[2];return i}),vt=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i},angle:function(i,m){var g=i[0],_=i[1],b=i[2],y=m[0],T=m[1],w=m[2],P=Math.sqrt(g*g+_*_+b*b)*Math.sqrt(y*y+T*T+w*w),$=P&&dot$4(i,m)/P;return Math.acos(Math.min(Math.max($,-1),1))},bezier:function(i,m,g,_,b,y){var T=1-y,w=T*T,P=y*y,$=w*T,H=3*y*w,q=3*P*T,W=P*y;return i[0]=m[0]*$+g[0]*H+_[0]*q+b[0]*W,i[1]=m[1]*$+g[1]*H+_[1]*q+b[1]*W,i[2]=m[2]*$+g[2]*H+_[2]*q+b[2]*W,i},ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i[2]=Math.ceil(m[2]),i},clone:function(i){var g=new m(3);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i},create:create$4,cross:cross$2,dist:at,distance:distance$2,div:et,divide:divide$2,dot:dot$4,equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=g[0],w=g[1],P=g[2];return Math.abs(_-T)<=i*Math.max(1,Math.abs(_),Math.abs(T))&&Math.abs(b-w)<=i*Math.max(1,Math.abs(b),Math.abs(w))&&Math.abs(y-P)<=i*Math.max(1,Math.abs(y),Math.abs(P))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]},floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i[2]=Math.floor(m[2]),i},forEach:xt,fromValues:fromValues$4,hermite:function(i,m,g,_,b,y){var T=y*y,w=T*(2*y-3)+1,P=T*(y-2)+y,$=T*(y-1),H=T*(3-2*y);return i[0]=m[0]*w+g[0]*P+_[0]*$+b[0]*H,i[1]=m[1]*w+g[1]*P+_[1]*$+b[1]*H,i[2]=m[2]*w+g[2]*P+_[2]*$+b[2]*H,i},inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i[2]=1/m[2],i},len:ft,length:length$4,lerp:lerp$4,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i[2]=Math.max(m[2],g[2]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i[2]=Math.min(m[2],g[2]),i},mul:Qe,multiply:multiply$4,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i},normalize:normalize$4,random:function(i,m){m=m||1;var _=2*g()*Math.PI,b=2*g()-1,y=Math.sqrt(1-b*b)*m;return i[0]=Math.cos(_)*y,i[1]=Math.sin(_)*y,i[2]=b*m,i},rotateX:function(i,m,g,_){var b=[],y=[];return b[0]=m[0]-g[0],b[1]=m[1]-g[1],b[2]=m[2]-g[2],y[0]=b[0],y[1]=b[1]*Math.cos(_)-b[2]*Math.sin(_),y[2]=b[1]*Math.sin(_)+b[2]*Math.cos(_),i[0]=y[0]+g[0],i[1]=y[1]+g[1],i[2]=y[2]+g[2],i},rotateY:function(i,m,g,_){var b=[],y=[];return b[0]=m[0]-g[0],b[1]=m[1]-g[1],b[2]=m[2]-g[2],y[0]=b[2]*Math.sin(_)+b[0]*Math.cos(_),y[1]=b[1],y[2]=b[2]*Math.cos(_)-b[0]*Math.sin(_),i[0]=y[0]+g[0],i[1]=y[1]+g[1],i[2]=y[2]+g[2],i},rotateZ:function(i,m,g,_){var b=[],y=[];return b[0]=m[0]-g[0],b[1]=m[1]-g[1],b[2]=m[2]-g[2],y[0]=b[0]*Math.cos(_)-b[1]*Math.sin(_),y[1]=b[0]*Math.sin(_)+b[1]*Math.cos(_),y[2]=b[2],i[0]=y[0]+g[0],i[1]=y[1]+g[1],i[2]=y[2]+g[2],i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i[2]=Math.round(m[2]),i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i},scaleAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i},set:set$4,sqrDist:ht,sqrLen:gt,squaredDistance:squaredDistance$2,squaredLength:squaredLength$4,str:function(i){return"vec3("+i[0]+","+i[1]+","+i[2]+")"},sub:Je,subtract:subtract$2,transformMat3:function(i,m,g){var _=m[0],b=m[1],y=m[2];return i[0]=_*g[0]+b*g[3]+y*g[6],i[1]=_*g[1]+b*g[4]+y*g[7],i[2]=_*g[2]+b*g[5]+y*g[8],i},transformMat4:transformMat4$2,transformQuat:function(i,m,g){var _=g[0],b=g[1],y=g[2],T=g[3],w=m[0],P=m[1],$=m[2],H=b*$-y*P,q=y*w-_*$,W=_*P-b*w,ye=b*W-y*q,Ge=y*H-_*W,Ke=_*q-b*H,Xe=2*T;return H*=Xe,q*=Xe,W*=Xe,ye*=2,Ge*=2,Ke*=2,i[0]=w+H+ye,i[1]=P+q+Ge,i[2]=$+W+Ke,i},zero:function(i){return i[0]=0,i[1]=0,i[2]=0,i}});function create$3(){var i=new m(4);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0,i[3]=0),i}function clone$3(i){var g=new m(4);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g}function fromValues$3(i,g,_,b){var y=new m(4);return y[0]=i,y[1]=g,y[2]=_,y[3]=b,y}function copy$3(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i}function set$3(i,m,g,_,b){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i}function add$3(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i}function subtract$1(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i[2]=m[2]-g[2],i[3]=m[3]-g[3],i}function multiply$3(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i[2]=m[2]*g[2],i[3]=m[3]*g[3],i}function divide$1(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i[2]=m[2]/g[2],i[3]=m[3]/g[3],i}function scale$3(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i}function distance$1(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2],y=m[3]-i[3];return Math.hypot(g,_,b,y)}function squaredDistance$1(i,m){var g=m[0]-i[0],_=m[1]-i[1],b=m[2]-i[2],y=m[3]-i[3];return g*g+_*_+b*b+y*y}function length$3(i){var m=i[0],g=i[1],_=i[2],b=i[3];return Math.hypot(m,g,_,b)}function squaredLength$3(i){var m=i[0],g=i[1],_=i[2],b=i[3];return m*m+g*g+_*_+b*b}function normalize$3(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g*g+_*_+b*b+y*y;return T>0&&(T=1/Math.sqrt(T)),i[0]=g*T,i[1]=_*T,i[2]=b*T,i[3]=y*T,i}function dot$3(i,m){return i[0]*m[0]+i[1]*m[1]+i[2]*m[2]+i[3]*m[3]}function lerp$3(i,m,g,_){var b=m[0],y=m[1],T=m[2],w=m[3];return i[0]=b+_*(g[0]-b),i[1]=y+_*(g[1]-y),i[2]=T+_*(g[2]-T),i[3]=w+_*(g[3]-w),i}function exactEquals$3(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]}function equals$3(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return Math.abs(_-w)<=i*Math.max(1,Math.abs(_),Math.abs(w))&&Math.abs(b-P)<=i*Math.max(1,Math.abs(b),Math.abs(P))&&Math.abs(y-$)<=i*Math.max(1,Math.abs(y),Math.abs($))&&Math.abs(T-H)<=i*Math.max(1,Math.abs(T),Math.abs(H))}var bt=subtract$1,yt=multiply$3,Tt=divide$1,St=distance$1,wt=squaredDistance$1,Mt=length$3,Rt=squaredLength$3,Ct=function(){var i=create$3();return function(m,g,_,b,y,T){var w,P;for(g||(g=4),_||(_=0),P=b?Math.min(b*g+_,m.length):m.length,w=_;w<P;w+=g)i[0]=m[w],i[1]=m[w+1],i[2]=m[w+2],i[3]=m[w+3],y(i,i,T),m[w]=i[0],m[w+1]=i[1],m[w+2]=i[2],m[w+3]=i[3];return m}}(),Pt=Object.freeze({__proto__:null,add:add$3,ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i[2]=Math.ceil(m[2]),i[3]=Math.ceil(m[3]),i},clone:clone$3,copy:copy$3,create:create$3,cross:function(i,m,g,_){var b=g[0]*_[1]-g[1]*_[0],y=g[0]*_[2]-g[2]*_[0],T=g[0]*_[3]-g[3]*_[0],w=g[1]*_[2]-g[2]*_[1],P=g[1]*_[3]-g[3]*_[1],$=g[2]*_[3]-g[3]*_[2],H=m[0],q=m[1],W=m[2],ye=m[3];return i[0]=q*$-W*P+ye*w,i[1]=-H*$+W*T-ye*y,i[2]=H*P-q*T+ye*b,i[3]=-H*w+q*y-W*b,i},dist:St,distance:distance$1,div:Tt,divide:divide$1,dot:dot$3,equals:equals$3,exactEquals:exactEquals$3,floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i[2]=Math.floor(m[2]),i[3]=Math.floor(m[3]),i},forEach:Ct,fromValues:fromValues$3,inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i[2]=1/m[2],i[3]=1/m[3],i},len:Mt,length:length$3,lerp:lerp$3,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i[2]=Math.max(m[2],g[2]),i[3]=Math.max(m[3],g[3]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i[2]=Math.min(m[2],g[2]),i[3]=Math.min(m[3],g[3]),i},mul:yt,multiply:multiply$3,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=-m[3],i},normalize:normalize$3,random:function(i,m){var _,b,y,T,w,P;m=m||1;do{w=(_=2*g()-1)*_+(b=2*g()-1)*b}while(w>=1);do{P=(y=2*g()-1)*y+(T=2*g()-1)*T}while(P>=1);var $=Math.sqrt((1-w)/P);return i[0]=m*_,i[1]=m*b,i[2]=m*y*$,i[3]=m*T*$,i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i[2]=Math.round(m[2]),i[3]=Math.round(m[3]),i},scale:scale$3,scaleAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i[2]=m[2]+g[2]*_,i[3]=m[3]+g[3]*_,i},set:set$3,sqrDist:wt,sqrLen:Rt,squaredDistance:squaredDistance$1,squaredLength:squaredLength$3,str:function(i){return"vec4("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"},sub:bt,subtract:subtract$1,transformMat4:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3];return i[0]=g[0]*_+g[4]*b+g[8]*y+g[12]*T,i[1]=g[1]*_+g[5]*b+g[9]*y+g[13]*T,i[2]=g[2]*_+g[6]*b+g[10]*y+g[14]*T,i[3]=g[3]*_+g[7]*b+g[11]*y+g[15]*T,i},transformQuat:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=g[0],w=g[1],P=g[2],$=g[3],H=$*_+w*y-P*b,q=$*b+P*_-T*y,W=$*y+T*b-w*_,ye=-T*_-w*b-P*y;return i[0]=H*$+ye*-T+q*-P-W*-w,i[1]=q*$+ye*-w+W*-T-H*-P,i[2]=W*$+ye*-P+H*-w-q*-T,i[3]=m[3],i},zero:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=0,i}});function create$2(){var i=new m(4);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0),i[3]=1,i}function setAxisAngle(i,m,g){g*=.5;var _=Math.sin(g);return i[0]=_*m[0],i[1]=_*m[1],i[2]=_*m[2],i[3]=Math.cos(g),i}function multiply$2(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return i[0]=_*H+T*w+b*$-y*P,i[1]=b*H+T*P+y*w-_*$,i[2]=y*H+T*$+_*P-b*w,i[3]=T*H-_*w-b*P-y*$,i}function rotateX$1(i,m,g){g*=.5;var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P+T*w,i[1]=b*P+y*w,i[2]=y*P-b*w,i[3]=T*P-_*w,i}function rotateY$1(i,m,g){g*=.5;var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P-y*w,i[1]=b*P+T*w,i[2]=y*P+_*w,i[3]=T*P-b*w,i}function rotateZ$1(i,m,g){g*=.5;var _=m[0],b=m[1],y=m[2],T=m[3],w=Math.sin(g),P=Math.cos(g);return i[0]=_*P+b*w,i[1]=b*P-_*w,i[2]=y*P+T*w,i[3]=T*P-y*w,i}function exp(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=Math.sqrt(g*g+_*_+b*b),w=Math.exp(y),P=T>0?w*Math.sin(T)/T:0;return i[0]=g*P,i[1]=_*P,i[2]=b*P,i[3]=w*Math.cos(T),i}function ln(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=Math.sqrt(g*g+_*_+b*b),w=T>0?Math.atan2(T,y)/T:0;return i[0]=g*w,i[1]=_*w,i[2]=b*w,i[3]=.5*Math.log(g*g+_*_+b*b+y*y),i}function slerp(m,g,_,b){var y,T,w,P,$,H=g[0],q=g[1],W=g[2],ye=g[3],Ge=_[0],Ke=_[1],Xe=_[2],Ye=_[3];return(T=H*Ge+q*Ke+W*Xe+ye*Ye)<0&&(T=-T,Ge=-Ge,Ke=-Ke,Xe=-Xe,Ye=-Ye),1-T>i?(y=Math.acos(T),w=Math.sin(y),P=Math.sin((1-b)*y)/w,$=Math.sin(b*y)/w):(P=1-b,$=b),m[0]=P*H+$*Ge,m[1]=P*q+$*Ke,m[2]=P*W+$*Xe,m[3]=P*ye+$*Ye,m}function fromMat3(i,m){var g,_=m[0]+m[4]+m[8];if(_>0)g=Math.sqrt(_+1),i[3]=.5*g,g=.5/g,i[0]=(m[5]-m[7])*g,i[1]=(m[6]-m[2])*g,i[2]=(m[1]-m[3])*g;else{var b=0;m[4]>m[0]&&(b=1),m[8]>m[3*b+b]&&(b=2);var y=(b+1)%3,T=(b+2)%3;g=Math.sqrt(m[3*b+b]-m[3*y+y]-m[3*T+T]+1),i[b]=.5*g,g=.5/g,i[3]=(m[3*y+T]-m[3*T+y])*g,i[y]=(m[3*y+b]+m[3*b+y])*g,i[T]=(m[3*T+b]+m[3*b+T])*g}return i}var Et,It,Bt,Lt,Dt=clone$3,Ut=fromValues$3,At=copy$3,kt=set$3,Ot=add$3,Nt=multiply$2,Gt=scale$3,Ft=dot$3,Vt=lerp$3,$t=length$3,Ht=$t,zt=squaredLength$3,qt=zt,Kt=normalize$3,Wt=exactEquals$3,Xt=equals$3,Yt=(Et=create$4(),It=fromValues$4(1,0,0),Bt=fromValues$4(0,1,0),function(i,m,g){var _=dot$4(m,g);return _<-.999999?(cross$2(Et,It,m),ft(Et)<1e-6&&cross$2(Et,Bt,m),normalize$4(Et,Et),setAxisAngle(i,Et,Math.PI),i):_>.999999?(i[0]=0,i[1]=0,i[2]=0,i[3]=1,i):(cross$2(Et,m,g),i[0]=Et[0],i[1]=Et[1],i[2]=Et[2],i[3]=1+_,Kt(i,i))}),jt=function(){var i=create$2(),m=create$2();return function(g,_,b,y,T,w){return slerp(i,_,T,w),slerp(m,b,y,w),slerp(g,i,m,2*w*(1-w)),g}}(),Zt=(Lt=create$6(),function(i,m,g,_){return Lt[0]=g[0],Lt[3]=g[1],Lt[6]=g[2],Lt[1]=_[0],Lt[4]=_[1],Lt[7]=_[2],Lt[2]=-m[0],Lt[5]=-m[1],Lt[8]=-m[2],Kt(i,fromMat3(i,Lt))}),Jt=Object.freeze({__proto__:null,add:Ot,calculateW:function(i,m){var g=m[0],_=m[1],b=m[2];return i[0]=g,i[1]=_,i[2]=b,i[3]=Math.sqrt(Math.abs(1-g*g-_*_-b*b)),i},clone:Dt,conjugate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=m[3],i},copy:At,create:create$2,dot:Ft,equals:Xt,exactEquals:Wt,exp:exp,fromEuler:function(i,m,g,_){var b=.5*Math.PI/180;m*=b,g*=b,_*=b;var y=Math.sin(m),T=Math.cos(m),w=Math.sin(g),P=Math.cos(g),$=Math.sin(_),H=Math.cos(_);return i[0]=y*P*H-T*w*$,i[1]=T*w*H+y*P*$,i[2]=T*P*$-y*w*H,i[3]=T*P*H+y*w*$,i},fromMat3:fromMat3,fromValues:Ut,getAngle:function(i,m){var g=Ft(i,m);return Math.acos(2*g*g-1)},getAxisAngle:function(m,g){var _=2*Math.acos(g[3]),b=Math.sin(_/2);return b>i?(m[0]=g[0]/b,m[1]=g[1]/b,m[2]=g[2]/b):(m[0]=1,m[1]=0,m[2]=0),_},identity:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i},invert:function(i,m){var g=m[0],_=m[1],b=m[2],y=m[3],T=g*g+_*_+b*b+y*y,w=T?1/T:0;return i[0]=-g*w,i[1]=-_*w,i[2]=-b*w,i[3]=y*w,i},len:Ht,length:$t,lerp:Vt,ln:ln,mul:Nt,multiply:multiply$2,normalize:Kt,pow:function(i,m,g){return ln(i,m),Gt(i,i,g),exp(i,i),i},random:function(i){var m=g(),_=g(),b=g(),y=Math.sqrt(1-m),T=Math.sqrt(m);return i[0]=y*Math.sin(2*Math.PI*_),i[1]=y*Math.cos(2*Math.PI*_),i[2]=T*Math.sin(2*Math.PI*b),i[3]=T*Math.cos(2*Math.PI*b),i},rotateX:rotateX$1,rotateY:rotateY$1,rotateZ:rotateZ$1,rotationTo:Yt,scale:Gt,set:kt,setAxes:Zt,setAxisAngle:setAxisAngle,slerp:slerp,sqlerp:jt,sqrLen:qt,squaredLength:zt,str:function(i){return"quat("+i[0]+","+i[1]+","+i[2]+","+i[3]+")"}});function fromRotationTranslation(i,m,g){var _=.5*g[0],b=.5*g[1],y=.5*g[2],T=m[0],w=m[1],P=m[2],$=m[3];return i[0]=T,i[1]=w,i[2]=P,i[3]=$,i[4]=_*$+b*P-y*w,i[5]=b*$+y*T-_*P,i[6]=y*$+_*w-b*T,i[7]=-_*T-b*w-y*P,i}function copy$1(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i}var Qt=At;var en=At;function multiply$1(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[4],P=g[5],$=g[6],H=g[7],q=m[4],W=m[5],ye=m[6],Ge=m[7],Ke=g[0],Xe=g[1],Ye=g[2],je=g[3];return i[0]=_*je+T*Ke+b*Ye-y*Xe,i[1]=b*je+T*Xe+y*Ke-_*Ye,i[2]=y*je+T*Ye+_*Xe-b*Ke,i[3]=T*je-_*Ke-b*Xe-y*Ye,i[4]=_*H+T*w+b*$-y*P+q*je+Ge*Ke+W*Ye-ye*Xe,i[5]=b*H+T*P+y*w-_*$+W*je+Ge*Xe+ye*Ke-q*Ye,i[6]=y*H+T*$+_*P-b*w+ye*je+Ge*Ye+q*Xe-W*Ke,i[7]=T*H-_*w-b*P-y*$+Ge*je-q*Ke-W*Xe-ye*Ye,i}var tn=multiply$1;var nn=Ft;var rn=$t,an=rn,sn=zt,on=sn;var un=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i[2]=m[2]+g[2],i[3]=m[3]+g[3],i[4]=m[4]+g[4],i[5]=m[5]+g[5],i[6]=m[6]+g[6],i[7]=m[7]+g[7],i},clone:function(i){var g=new m(8);return g[0]=i[0],g[1]=i[1],g[2]=i[2],g[3]=i[3],g[4]=i[4],g[5]=i[5],g[6]=i[6],g[7]=i[7],g},conjugate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i[2]=-m[2],i[3]=m[3],i[4]=-m[4],i[5]=-m[5],i[6]=-m[6],i[7]=m[7],i},copy:copy$1,create:function(){var i=new m(8);return m!=Float32Array&&(i[0]=0,i[1]=0,i[2]=0,i[4]=0,i[5]=0,i[6]=0,i[7]=0),i[3]=1,i},dot:nn,equals:function(m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=g[0],W=g[1],ye=g[2],Ge=g[3],Ke=g[4],Xe=g[5],Ye=g[6],je=g[7];return Math.abs(_-q)<=i*Math.max(1,Math.abs(_),Math.abs(q))&&Math.abs(b-W)<=i*Math.max(1,Math.abs(b),Math.abs(W))&&Math.abs(y-ye)<=i*Math.max(1,Math.abs(y),Math.abs(ye))&&Math.abs(T-Ge)<=i*Math.max(1,Math.abs(T),Math.abs(Ge))&&Math.abs(w-Ke)<=i*Math.max(1,Math.abs(w),Math.abs(Ke))&&Math.abs(P-Xe)<=i*Math.max(1,Math.abs(P),Math.abs(Xe))&&Math.abs($-Ye)<=i*Math.max(1,Math.abs($),Math.abs(Ye))&&Math.abs(H-je)<=i*Math.max(1,Math.abs(H),Math.abs(je))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]&&i[2]===m[2]&&i[3]===m[3]&&i[4]===m[4]&&i[5]===m[5]&&i[6]===m[6]&&i[7]===m[7]},fromMat4:function(i,g){var _=create$2();getRotation(_,g);var b=new m(3);return getTranslation$1(b,g),fromRotationTranslation(i,_,b),i},fromRotation:function(i,m){return i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=0,i[5]=0,i[6]=0,i[7]=0,i},fromRotationTranslation:fromRotationTranslation,fromRotationTranslationValues:function(i,g,_,b,y,T,w){var P=new m(8);P[0]=i,P[1]=g,P[2]=_,P[3]=b;var $=.5*y,H=.5*T,q=.5*w;return P[4]=$*b+H*_-q*g,P[5]=H*b+q*i-$*_,P[6]=q*b+$*g-H*i,P[7]=-$*i-H*g-q*_,P},fromTranslation:function(i,m){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i[4]=.5*m[0],i[5]=.5*m[1],i[6]=.5*m[2],i[7]=0,i},fromValues:function(i,g,_,b,y,T,w,P){var $=new m(8);return $[0]=i,$[1]=g,$[2]=_,$[3]=b,$[4]=y,$[5]=T,$[6]=w,$[7]=P,$},getDual:function(i,m){return i[0]=m[4],i[1]=m[5],i[2]=m[6],i[3]=m[7],i},getReal:Qt,getTranslation:function(i,m){var g=m[4],_=m[5],b=m[6],y=m[7],T=-m[0],w=-m[1],P=-m[2],$=m[3];return i[0]=2*(g*$+y*T+_*P-b*w),i[1]=2*(_*$+y*w+b*T-g*P),i[2]=2*(b*$+y*P+g*w-_*T),i},identity:function(i){return i[0]=0,i[1]=0,i[2]=0,i[3]=1,i[4]=0,i[5]=0,i[6]=0,i[7]=0,i},invert:function(i,m){var g=sn(m);return i[0]=-m[0]/g,i[1]=-m[1]/g,i[2]=-m[2]/g,i[3]=m[3]/g,i[4]=-m[4]/g,i[5]=-m[5]/g,i[6]=-m[6]/g,i[7]=m[7]/g,i},len:an,length:rn,lerp:function(i,m,g,_){var b=1-_;return nn(m,g)<0&&(_=-_),i[0]=m[0]*b+g[0]*_,i[1]=m[1]*b+g[1]*_,i[2]=m[2]*b+g[2]*_,i[3]=m[3]*b+g[3]*_,i[4]=m[4]*b+g[4]*_,i[5]=m[5]*b+g[5]*_,i[6]=m[6]*b+g[6]*_,i[7]=m[7]*b+g[7]*_,i},mul:tn,multiply:multiply$1,normalize:function(i,m){var g=sn(m);if(g>0){g=Math.sqrt(g);var _=m[0]/g,b=m[1]/g,y=m[2]/g,T=m[3]/g,w=m[4],P=m[5],$=m[6],H=m[7],q=_*w+b*P+y*$+T*H;i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=(w-_*q)/g,i[5]=(P-b*q)/g,i[6]=($-y*q)/g,i[7]=(H-T*q)/g}return i},rotateAroundAxis:function(m,g,_,b){if(Math.abs(b)<i)return copy$1(m,g);var y=Math.hypot(_[0],_[1],_[2]);b*=.5;var T=Math.sin(b),w=T*_[0]/y,P=T*_[1]/y,$=T*_[2]/y,H=Math.cos(b),q=g[0],W=g[1],ye=g[2],Ge=g[3];m[0]=q*H+Ge*w+W*$-ye*P,m[1]=W*H+Ge*P+ye*w-q*$,m[2]=ye*H+Ge*$+q*P-W*w,m[3]=Ge*H-q*w-W*P-ye*$;var Ke=g[4],Xe=g[5],Ye=g[6],je=g[7];return m[4]=Ke*H+je*w+Xe*$-Ye*P,m[5]=Xe*H+je*P+Ye*w-Ke*$,m[6]=Ye*H+je*$+Ke*P-Xe*w,m[7]=je*H-Ke*w-Xe*P-Ye*$,m},rotateByQuatAppend:function(i,m,g){var _=g[0],b=g[1],y=g[2],T=g[3],w=m[0],P=m[1],$=m[2],H=m[3];return i[0]=w*T+H*_+P*y-$*b,i[1]=P*T+H*b+$*_-w*y,i[2]=$*T+H*y+w*b-P*_,i[3]=H*T-w*_-P*b-$*y,w=m[4],P=m[5],$=m[6],H=m[7],i[4]=w*T+H*_+P*y-$*b,i[5]=P*T+H*b+$*_-w*y,i[6]=$*T+H*y+w*b-P*_,i[7]=H*T-w*_-P*b-$*y,i},rotateByQuatPrepend:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=g[0],P=g[1],$=g[2],H=g[3];return i[0]=_*H+T*w+b*$-y*P,i[1]=b*H+T*P+y*w-_*$,i[2]=y*H+T*$+_*P-b*w,i[3]=T*H-_*w-b*P-y*$,w=g[4],P=g[5],$=g[6],H=g[7],i[4]=_*H+T*w+b*$-y*P,i[5]=b*H+T*P+y*w-_*$,i[6]=y*H+T*$+_*P-b*w,i[7]=T*H-_*w-b*P-y*$,i},rotateX:function(i,m,g){var _=-m[0],b=-m[1],y=-m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=w*T+H*_+P*y-$*b,W=P*T+H*b+$*_-w*y,ye=$*T+H*y+w*b-P*_,Ge=H*T-w*_-P*b-$*y;return rotateX$1(i,m,g),_=i[0],b=i[1],y=i[2],T=i[3],i[4]=q*T+Ge*_+W*y-ye*b,i[5]=W*T+Ge*b+ye*_-q*y,i[6]=ye*T+Ge*y+q*b-W*_,i[7]=Ge*T-q*_-W*b-ye*y,i},rotateY:function(i,m,g){var _=-m[0],b=-m[1],y=-m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=w*T+H*_+P*y-$*b,W=P*T+H*b+$*_-w*y,ye=$*T+H*y+w*b-P*_,Ge=H*T-w*_-P*b-$*y;return rotateY$1(i,m,g),_=i[0],b=i[1],y=i[2],T=i[3],i[4]=q*T+Ge*_+W*y-ye*b,i[5]=W*T+Ge*b+ye*_-q*y,i[6]=ye*T+Ge*y+q*b-W*_,i[7]=Ge*T-q*_-W*b-ye*y,i},rotateZ:function(i,m,g){var _=-m[0],b=-m[1],y=-m[2],T=m[3],w=m[4],P=m[5],$=m[6],H=m[7],q=w*T+H*_+P*y-$*b,W=P*T+H*b+$*_-w*y,ye=$*T+H*y+w*b-P*_,Ge=H*T-w*_-P*b-$*y;return rotateZ$1(i,m,g),_=i[0],b=i[1],y=i[2],T=i[3],i[4]=q*T+Ge*_+W*y-ye*b,i[5]=W*T+Ge*b+ye*_-q*y,i[6]=ye*T+Ge*y+q*b-W*_,i[7]=Ge*T-q*_-W*b-ye*y,i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i[2]=m[2]*g,i[3]=m[3]*g,i[4]=m[4]*g,i[5]=m[5]*g,i[6]=m[6]*g,i[7]=m[7]*g,i},set:function(i,m,g,_,b,y,T,w,P){return i[0]=m,i[1]=g,i[2]=_,i[3]=b,i[4]=y,i[5]=T,i[6]=w,i[7]=P,i},setDual:function(i,m){return i[4]=m[0],i[5]=m[1],i[6]=m[2],i[7]=m[3],i},setReal:en,sqrLen:on,squaredLength:sn,str:function(i){return"quat2("+i[0]+","+i[1]+","+i[2]+","+i[3]+","+i[4]+","+i[5]+","+i[6]+","+i[7]+")"},translate:function(i,m,g){var _=m[0],b=m[1],y=m[2],T=m[3],w=.5*g[0],P=.5*g[1],$=.5*g[2],H=m[4],q=m[5],W=m[6],ye=m[7];return i[0]=_,i[1]=b,i[2]=y,i[3]=T,i[4]=T*w+b*$-y*P+H,i[5]=T*P+y*w-_*$+q,i[6]=T*$+_*P-b*w+W,i[7]=-_*w-b*P-y*$+ye,i}});function create(){var i=new m(2);return m!=Float32Array&&(i[0]=0,i[1]=0),i}function subtract(i,m,g){return i[0]=m[0]-g[0],i[1]=m[1]-g[1],i}function multiply(i,m,g){return i[0]=m[0]*g[0],i[1]=m[1]*g[1],i}function divide(i,m,g){return i[0]=m[0]/g[0],i[1]=m[1]/g[1],i}function distance(i,m){var g=m[0]-i[0],_=m[1]-i[1];return Math.hypot(g,_)}function squaredDistance(i,m){var g=m[0]-i[0],_=m[1]-i[1];return g*g+_*_}function length(i){var m=i[0],g=i[1];return Math.hypot(m,g)}function squaredLength(i){var m=i[0],g=i[1];return m*m+g*g}function lerp(i,m,g,_){var b=m[0],y=m[1];return i[0]=b+_*(g[0]-b),i[1]=y+_*(g[1]-y),i}var cn=length,hn=subtract,fn=multiply,dn=divide,mn=distance,pn=squaredDistance,gn=squaredLength,xn=function(){var i=create();return function(m,g,_,b,y,T){var w,P;for(g||(g=2),_||(_=0),P=b?Math.min(b*g+_,m.length):m.length,w=_;w<P;w+=g)i[0]=m[w],i[1]=m[w+1],y(i,i,T),m[w]=i[0],m[w+1]=i[1];return m}}(),_n=Object.freeze({__proto__:null,add:function(i,m,g){return i[0]=m[0]+g[0],i[1]=m[1]+g[1],i},angle:function(i,m){var g=i[0],_=i[1],b=m[0],y=m[1],T=Math.sqrt(g*g+_*_)*Math.sqrt(b*b+y*y),w=T&&(g*b+_*y)/T;return Math.acos(Math.min(Math.max(w,-1),1))},ceil:function(i,m){return i[0]=Math.ceil(m[0]),i[1]=Math.ceil(m[1]),i},clone:function(i){var g=new m(2);return g[0]=i[0],g[1]=i[1],g},copy:function(i,m){return i[0]=m[0],i[1]=m[1],i},create:create,cross:function(i,m,g){var _=m[0]*g[1]-m[1]*g[0];return i[0]=i[1]=0,i[2]=_,i},dist:mn,distance:distance,div:dn,divide:divide,dot:function(i,m){return i[0]*m[0]+i[1]*m[1]},equals:function(m,g){var _=m[0],b=m[1],y=g[0],T=g[1];return Math.abs(_-y)<=i*Math.max(1,Math.abs(_),Math.abs(y))&&Math.abs(b-T)<=i*Math.max(1,Math.abs(b),Math.abs(T))},exactEquals:function(i,m){return i[0]===m[0]&&i[1]===m[1]},floor:function(i,m){return i[0]=Math.floor(m[0]),i[1]=Math.floor(m[1]),i},forEach:xn,fromValues:function(i,g){var _=new m(2);return _[0]=i,_[1]=g,_},inverse:function(i,m){return i[0]=1/m[0],i[1]=1/m[1],i},len:cn,length:length,lerp:lerp,max:function(i,m,g){return i[0]=Math.max(m[0],g[0]),i[1]=Math.max(m[1],g[1]),i},min:function(i,m,g){return i[0]=Math.min(m[0],g[0]),i[1]=Math.min(m[1],g[1]),i},mul:fn,multiply:multiply,negate:function(i,m){return i[0]=-m[0],i[1]=-m[1],i},normalize:function(i,m){var g=m[0],_=m[1],b=g*g+_*_;return b>0&&(b=1/Math.sqrt(b)),i[0]=m[0]*b,i[1]=m[1]*b,i},random:function(i,m){m=m||1;var _=2*g()*Math.PI;return i[0]=Math.cos(_)*m,i[1]=Math.sin(_)*m,i},rotate:function(i,m,g,_){var b=m[0]-g[0],y=m[1]-g[1],T=Math.sin(_),w=Math.cos(_);return i[0]=b*w-y*T+g[0],i[1]=b*T+y*w+g[1],i},round:function(i,m){return i[0]=Math.round(m[0]),i[1]=Math.round(m[1]),i},scale:function(i,m,g){return i[0]=m[0]*g,i[1]=m[1]*g,i},scaleAndAdd:function(i,m,g,_){return i[0]=m[0]+g[0]*_,i[1]=m[1]+g[1]*_,i},set:function(i,m,g){return i[0]=m,i[1]=g,i},sqrDist:pn,sqrLen:gn,squaredDistance:squaredDistance,squaredLength:squaredLength,str:function(i){return"vec2("+i[0]+","+i[1]+")"},sub:hn,subtract:subtract,transformMat2:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[2]*b,i[1]=g[1]*_+g[3]*b,i},transformMat2d:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[2]*b+g[4],i[1]=g[1]*_+g[3]*b+g[5],i},transformMat3:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[3]*b+g[6],i[1]=g[1]*_+g[4]*b+g[7],i},transformMat4:function(i,m,g){var _=m[0],b=m[1];return i[0]=g[0]*_+g[4]*b+g[12],i[1]=g[1]*_+g[5]*b+g[13],i},zero:function(i){return i[0]=0,i[1]=0,i}}),vn=Object.freeze({__proto__:null,glMatrix:b,mat2:w,mat2d:H,mat3:ye,mat4:je,quat:Jt,quat2:un,vec2:_n,vec3:vt,vec4:Pt});class InstanceIdGenerator{static idMaps=new Map;static getNextId(i){let m=this.idMaps.get(i)||0;return this.idMaps.set(i,m+1),m}}Object.freeze(InstanceIdGenerator);class Camera2D{#e;#t=create$5();#n=0;#r=0;#i=0;#a;constructor(){}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get modelMatrix(){return this.#t}get z(){return this.#i}get x(){return this.#n}set x(i){this.#n=i,this.#t[12]=i}get y(){return this.#r}set y(i){this.#r=i,this.#t[13]=i}get position(){return[this.#n,this.#r]}setPosition(i,m){Array.isArray(i)?[this.#n,this.#r]=i:(this.#n=i,this.#r=m),[this.#t[12],this.#t[13],this.#t[14]]=[this.#n,this.#r,0]}}const consoleAndThrowError=(...i)=>{const m=Array.prototype.slice.call(i).join(" ");throw new Error(m)},validateNumber=i=>"number"==typeof i||(consoleAndThrowError("Only numbers allowed."),!1);class PerspectiveCamera{#e;#s=new Float32Array([0,1,0]);#t=create$5();#n=0;#i=0;#r=0;#o=0;#u=0;#l=0;#c=60;#h=.01;#f=1e4;#a;constructor(){}get rotationX(){return this.#o}set rotationX(i){this.#o=i}get rotationY(){return this.#u}set rotationY(i){this.#u=i}get rotationZ(){return this.#l}set rotationZ(i){this.#l=i}get fieldOfView(){return this.#c}set fieldOfView(i){validateNumber(i),this.#c=i}get nearClipping(){return this.#h}set nearClipping(i){validateNumber(i),this.#h=i}get farClipping(){return this.#f}set farClipping(i){validateNumber(i),this.#f=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get modelMatrix(){return this.#t}get x(){return this.#n}set x(i){this.#n=i,this.#t[12]=i}get y(){return this.#r}set y(i){this.#r=i,this.#t[13]=i}get z(){return this.#i}set z(i){this.#i=i,this.#t[14]=i}get position(){return[this.#n,this.#r,this.#i]}setPosition(i,m,g){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=m,this.#i=g),[this.#t[12],this.#t[13],this.#t[14]]=[this.#n,this.#r,this.#i]}lookAt(i,m,g){lookAt(this.#t,[this.#n,this.#r,this.#i],[i,m,g],this.#s)}}class OrthographicCamera extends PerspectiveCamera{#e;#a;#d=1;#m=-1;#p=-1;#g=1;constructor(){super(),this.nearClipping=.01,this.farClipping=2e3}get top(){return this.#d}set top(i){validateNumber(i),this.#d=i}get bottom(){return this.#m}set bottom(i){validateNumber(i),this.#m=i}get left(){return this.#p}set left(i){validateNumber(i),this.#p=i}get right(){return this.#g}set right(i){validateNumber(i),this.#g=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}}const gltfAnimationLooper_rotation=(m,g,_,b,y,T,w,P,$,H,q)=>{let W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Ct,Pt,Et=!0;if("CUBICSPLINE"==m)T!=b-1?(Pt=12*T,St=_[Pt+4],wt=_[Pt+5],Mt=_[Pt+6],Rt=_[Pt+7],Ct=St*St+wt*wt+Mt*Mt+Rt*Rt,Ct>0&&(Ct=1/Math.sqrt(Ct)),Je=St*Ct,Qe=wt*Ct,et=Mt*Ct,at=Rt*Ct,St=_[Pt+8],wt=_[Pt+9],Mt=_[Pt+10],Rt=_[Pt+11],Ct=St*St+wt*wt+Mt*Mt+Rt*Rt,Ct>0&&(Ct=1/Math.sqrt(Ct)),ht=St*Ct,ft=wt*Ct,gt=Mt*Ct,xt=Rt*Ct,St=_[Pt],wt=_[Pt+1],Mt=_[Pt+2],Rt=_[Pt+3],Ct=St*St+wt*wt+Mt*Mt+Rt*Rt,Ct>0&&(Ct=1/Math.sqrt(Ct)),Xe=St*Ct,Ye=wt*Ct,je=Mt*Ct,Ze=Rt*Ct,Pt=12*w,St=_[Pt+4],wt=_[Pt+5],Mt=_[Pt+6],Rt=_[Pt+7],Ct=St*St+wt*wt+Mt*Mt+Rt*Rt,Ct>0&&(Ct=1/Math.sqrt(Ct)),W=St*Ct,ye=wt*Ct,Ge=Mt*Ct,Ke=Rt*Ct,vt=Je,bt=ht*y,yt=W,Tt=Xe*y,St=P*vt+$*bt+H*yt+q*Tt,vt=Qe,bt=ft*y,yt=ye,Tt=Ye*y,wt=P*vt+$*bt+H*yt+q*Tt,vt=et,bt=gt*y,yt=Ge,Tt=je*y,Mt=P*vt+$*bt+H*yt+q*Tt,vt=at,bt=xt*y,yt=Ke,Tt=Ze*y,Rt=P*vt+$*bt+H*yt+q*Tt):Et=!1;else{let m,g,b,P,$;Pt=4*T,St=_[Pt],wt=_[Pt+1],Mt=_[Pt+2],Rt=_[Pt+3],Ct=St*St+wt*wt+Mt*Mt+Rt*Rt,Ct>0&&(Ct=1/Math.sqrt(Ct)),Je=St*Ct,Qe=wt*Ct,et=Mt*Ct,at=Rt*Ct,Pt=4*w,St=_[Pt],wt=_[Pt+1],Mt=_[Pt+2],Rt=_[Pt+3],Ct=St*St+wt*wt+Mt*Mt+Rt*Rt,Ct>0&&(Ct=1/Math.sqrt(Ct)),W=St*Ct,ye=wt*Ct,Ge=Mt*Ct,Ke=Rt*Ct,g=Je*W+Qe*ye+et*Ge+at*Ke,g<0&&(g=-g,W=-W,ye=-ye,Ge=-Ge,Ke=-Ke),1-g>i?(m=Math.acos(g),b=Math.sin(m),P=Math.sin((1-y)*m)/b,$=Math.sin(y*m)/b):(P=1-y,$=y),St=P*Je+$*W,wt=P*Qe+$*ye,Mt=P*et+$*Ge,Rt=P*at+$*Ke}if(Et){let i=[],m=[0,0,0],_=St+St,b=wt+wt,y=Mt+Mt,T=St*_,w=St*b,P=St*y,$=wt*b,H=wt*y,q=Mt*y,W=Rt*_,ye=Rt*b,Ge=Rt*y;i[0]=1-($+q),i[4]=w-Ge,i[8]=P+ye,i[1]=w+Ge,i[5]=1-(T+q),i[9]=H-W,i[2]=P-ye,i[6]=H+W,i[10]=1-(T+$),i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1;let Ke=i[0],Xe=i[4],Ye=i[8],je=i[5],Ze=i[9],Je=i[6],Qe=i[10];m[1]=Math.asin(Math.max(-1,Math.min(1,Ye))),Math.abs(Ye)<.99999?(m[0]=Math.atan2(-Ze,Qe),m[2]=Math.atan2(-Xe,Ke)):(m[0]=Math.atan2(Je,je),m[2]=0),m[0]=-180*m[0]/Math.PI,m[1]=-180*m[1]/Math.PI,m[2]=-180*m[2]/Math.PI,g.rotationX=m[0],g.rotationY=m[1],g.rotationZ=m[2]}},gltfAnimationLooper_scale=(i,m,g,_,b,y,T,w,P,$,H)=>{let q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt;"CUBICSPLINE"==i?y!=_-1&&(xt=9*y,q=g[xt+3],W=g[xt+4],ye=g[xt+5],Je=g[xt+6],Qe=g[xt+7],et=g[xt+8],xt=9*T,Ge=g[xt+0],Ke=g[xt+1],Xe=g[xt+2],Ye=g[xt+3],je=g[xt+4],Ze=g[xt+5],at=Ye,ht=Je*b,ft=q,gt=Ge*b,m.scaleX=w*at+P*ht+$*ft+H*gt,at=je,ht=Qe*b,ft=W,gt=Ke*b,m.scaleY=w*at+P*ht+$*ft+H*gt,at=Ze,ht=et*b,ft=ye,gt=Xe*b,m.scaleZ=w*at+P*ht+$*ft+H*gt):(xt=3*T,q=g[xt],W=g[xt+1],ye=g[xt+2],xt=3*y,Ye=g[xt],je=g[xt+1],Ze=g[xt+2],m.scaleX=Ye+b*(q-Ye),m.scaleY=je+b*(W-je),m.scaleZ=Ze+b*(ye-Ze))},gltfAnimationLooper_transition=(i,m,g,_,b,y,T,w,P,$,H)=>{let q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt;"CUBICSPLINE"==i?y!=_-1&&(xt=9*y,q=g[xt+3],W=g[xt+4],ye=g[xt+5],Je=g[xt+6],Qe=g[xt+7],et=g[xt+8],xt=9*T,Ge=g[xt+0],Ke=g[xt+1],Xe=g[xt+2],Ye=g[xt+3],je=g[xt+4],Ze=g[xt+5],at=Ye,ht=Je*b,ft=q,gt=Ge*b,m.x=w*at+P*ht+$*ft+H*gt,at=je,ht=Qe*b,ft=W,gt=Ke*b,m.y=w*at+P*ht+$*ft+H*gt,at=Ze,ht=et*b,ft=ye,gt=Xe*b,m.z=w*at+P*ht+$*ft+H*gt):(xt=3*T,q=g[xt],W=g[xt+1],ye=g[xt+2],xt=3*y,Ye=g[xt],je=g[xt+1],Ze=g[xt+2],m.x=Ye+b*(q-Ye),m.y=je+b*(W-je),m.z=Ze+b*(ye-Ze))},gltfAnimationLooper_weight=(i,m,g,_,b)=>{let y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt;const xt=9999991;for(y=i.length;y--;){let vt;for(T=i[y],w=T.geometry.vertexBuffer.data,$=T.geometry.vertexBuffer.stride,q=w.length/$,Je=T.animationInfo.morphInfo,P=Je.origin,Qe=Je.morphInfoDataList,Ze=Qe.length,H=0;H<q;H++){je=H*$;let i=je*xt+_*xt+b;if(gt=Je.cacheData[i],gt)[W,ye,Ge,Ke,Xe,Ye]=gt;else{for(W=P[je],ye=P[je],Ge=P[je+1],Ke=P[je+1],Xe=P[je+2],Ye=P[je+2],et=Ze;et--;)at=m[_*Ze+et],ht=m[b*Ze+et],ft=Qe[et].interleaveData,vt=ft[je],W+=at*vt,ye+=ht*vt,vt=ft[je+1],Ge+=at*vt,Ke+=ht*vt,vt=ft[je+2],Xe+=at*vt,Ye+=ht*vt;Je.cacheData[i]=[W,ye,Ge,Ke,Xe,Ye]}w[je]=W+g*(ye-W),w[je+1]=Ge+g*(Ke-Ge),w[je+2]=Xe+g*(Ye-Xe)}T.geometry.vertexBuffer.updateAllData(w)}};class VertexGPURenderInfo{vertexShaderModule;vertexShaderSourceVariant;vertexShaderVariantConditionalBlocks;vertexStructInfo;vertexUniformInfo;vertexBindGroupLayout;vertexUniformBindGroup;vertexUniformBuffer;pipeline;shadowPipeline;pickingPipeline;constructor(i,m,g,_,b,y,T,w,P,$){this.vertexShaderModule=i,this.vertexShaderSourceVariant=m,this.vertexShaderVariantConditionalBlocks=g,this.vertexUniformInfo=_,this.vertexBindGroupLayout=b,this.vertexUniformBindGroup=T,this.vertexUniformBuffer=y,this.pipeline=w,this.shadowPipeline=P,this.pickingPipeline=$}}Object.freeze(VertexGPURenderInfo);const defineProperty=(i,m,g,_,...b)=>{Object.defineProperty(i.prototype,m,g(m,_,...b))},defineProperties=i=>(m,g)=>{g.forEach(g=>{if(Array.isArray(g)){const[_,b,...y]=g;defineProperty(m,_,i,b,...y)}else defineProperty(m,g,i)})},createDefineByPreset=i=>{const m={};return Object.keys(i).forEach(g=>{const[_,b]=i[g];Object.assign(m,(i=>m=>m.reduce((m,g)=>({...m,[g]:i}),{}))(_)(Object.values(b)))}),{defineByPreset:(i,g)=>((i,m,g)=>{m.forEach(m=>{if(Array.isArray(m)){const[_,b,...y]=m,T=g[_];T||consoleAndThrowError(_,"is a key not defined in Define Preset."),defineProperty(i,_,T,b,...y)}else{const _=g[m];_||consoleAndThrowError(m,"is a key not defined in Define Preset."),defineProperty(i,m,_)}})})(i,g,m)}},bn={enumerable:!0,configurable:!1};function createSetter$5(i,m,g){return function(_){this[m]=_;const{gpuRenderInfo:b}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=b;g.writeBuffer(m.members[i],_?1:0),this.dirtyPipeline=!0}else if(b){const{vertexUniformInfo:m,vertexUniformBuffer:g}=b;m.members[i]&&(g.writeBuffer(m.members[i],_?1:0),this.dirtyPipeline=!0)}}}function defineBoolean(i,m=!1,g=!0){const _=Symbol(i);return{get:function(){return void 0===this[_]&&(this[_]=m),this[_]},set:createSetter$5(i,_,g),...bn}}Object.freeze(bn),Object.freeze(defineBoolean);const validatePositiveNumberRange=(i,m=0,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(m<0||i<0||i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed.`),!0);function createSetter$4(i,m,g,_=0,b){return function(y){void 0!==_&&y<_&&(console.warn(`Value for ${i} is below the minimum (${_}). Received:${y}. Adjusted to ${_}.`),y=_),void 0!==b&&y>b&&(console.warn(`Value for ${i} exceeds the maximum (${b}). Received:${y}. Adjusted to ${b}.`),y=b),validatePositiveNumberRange(y),this[m]=y;const{gpuRenderInfo:T}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}else if(T){const{vertexUniformInfo:g,vertexUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}}}function definePositiveNumberRange(i,m=1,g=!0,_=0,b){const y=Symbol(i);return{get:function(){return void 0===this[y]&&(this[y]=m),this[y]},set:createSetter$4(i,y,g,_,b),...bn}}Object.freeze(definePositiveNumberRange);const isUint=i=>Number.isInteger(i)&&i>=0,validateUintRange=(i,m=0,g=4503599627370496)=>{const _=isUint(i),b=isUint(m),y=isUint(g),T="is not Uint!/value:",w=`(check range:${m}u ~ ${g}u)`;return _||consoleAndThrowError(`value ${T}${i}/${w}`),b||consoleAndThrowError(`min ${T}${m}/${w}`),y||consoleAndThrowError(`max ${T}${g}/${w}`),m>=g&&consoleAndThrowError(`maximum value is bigger than minimum value./${w}`),m>i&&consoleAndThrowError(`value is smaller than minimum value./value:${i}/${w}`),g<i&&consoleAndThrowError(`value is bigger than maximum value./value:${i}/${w}`),!0};function createSetter$3(i,m,g,_=0,b){return function(y){validateUintRange(y),void 0!==_&&y<_&&(console.warn(`Value for ${i} is below the minimum (${_}). Received:${y}. Adjusted to ${_}.`),y=_),void 0!==b&&y>b&&(console.warn(`Value for ${i} exceeds the maximum (${b}). Received:${y}. Adjusted to ${b}.`),y=b),this[m]=y;const{gpuRenderInfo:T}=this;if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}else if(T){const{vertexUniformInfo:g,vertexUniformBuffer:_}=T;_.writeBuffer(g.members[i],this[m])}}}function defineUintRange(i,m=0,g=!0,_=0,b){const y=Symbol(i);return{get:function(){return void 0===this[y]&&(this[y]=m),this[y]},set:createSetter$3(i,y,g,_,b),...bn}}function createSetter$2(i,m,g){return function(_){this[m]=_;const{gpuRenderInfo:b}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=b;g.writeBuffer(m.members[i],_)}else if(b){const{vertexUniformInfo:m,vertexUniformBuffer:g}=b;g.writeBuffer(m.members[i],_)}}}function defineVector(i,m,g=!0){const _=Symbol(i);return{get:function(){return void 0===this[_]&&(this[_]=m),this[_]},set:createSetter$2(i,_,g),...bn}}function defineProperty_boolean(i,m=!1){return defineBoolean(i,m,!1)}function defineProperty_uintRange(i,m=0,g,_){return defineUintRange(i,m,!1,g,_)}function defineProperty_PositiveNumberRange(i,m=0,g,_){return definePositiveNumberRange(i,m,!1,g,_)}Object.freeze(defineUintRange),Object.freeze(defineVector);const yn={USE_BILLBOARD_PERSPECTIVE:"useBillboardPerspective",USE_BILLBOARD:"useBillboard",RECEIVE_SHADOW:"receiveShadow"},Tn={BILLBOARD_FIXED_SCALE:"billboardFixedScale"},Sn={},wn={...createDefineByPreset({defineBoolean:[defineProperty_boolean,yn],defineUint:[defineProperty_uintRange,Sn],definePositiveNumber:[defineProperty_PositiveNumberRange,Tn]}),defineBoolean:defineProperties(defineProperty_boolean),defineUint:defineProperties(defineProperty_uintRange),definePositiveNumber:defineProperties(defineProperty_PositiveNumberRange),defineVec4:defineProperties(function(i,m=[0,0,0,0]){return defineVector(i,m,!1)}),defineVec3:defineProperties(function(i,m=[0,0,0]){return defineVector(i,m,!1)}),defineVec2:defineProperties(function(i,m=[0,0]){return defineVector(i,m,!1)}),PRESET_BOOLEAN:yn,PRESET_POSITIVE_NUMBER:Tn,PRESET_UINT:Sn,PRESET_SAMPLER:{},PRESET_TEXTURE:{},PRESET_CUBE_TEXTURE:{},PRESET_VEC2:{},PRESET_VEC3:{},PRESET_VEC4:{},PRESET_COLOR_RGB:{}};Object.freeze(wn);const createUUID=()=>{const i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");let m,g=0,_=["","","","","-","","","","-","4","","","-","","","","-","","","","","","-","","","","","","","","","","","",""];for(;g<36;)""===_[g]&&(m=16*Math.random()|0,_[g]=i[19===g?3&m|8:15&m]),g++;return _.join("")},uuidToUint=i=>{const m=i.replace(/-/g,"").substring(0,8);return parseInt(m,16)},isHexColor=i=>{const m=/^([A-Fa-f0-9]{3}){1,2}$/;return i.startsWith("#")?m.test(i.substring(1)):!!i.startsWith("0x")&&m.test(i.substring(2))},convertHexToRgb=(i,m=!1)=>{if("number"==typeof i&&(i=`#${i.toString(16)}`),isHexColor(i)){"#"===i.charAt(0)&&(i=i.substring(1)),3===i.length&&(i=i.charAt(0)+i.charAt(0)+i.charAt(1)+i.charAt(1)+i.charAt(2)+i.charAt(2));const g=parseInt("0x"+i),_=g>>16&255,b=g>>8&255,y=255&g;return m?[_,b,y]:{r:_,g:b,b:y}}throw Error(`from ${convertHexToRgb.constructor.name}:input value - ${i}/Only hex string allowed`)},convertRgbToHex=(i,m,g)=>{validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255);return`#${i.toString(16).padStart(2,"0").toUpperCase()}${m.toString(16).padStart(2,"0").toUpperCase()}${g.toString(16).padStart(2,"0").toUpperCase()}`};function getAbsoluteURL(i,m){try{return new URL(m,i).href}catch(i){return m}}const getFileExtension=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");const m=i.split("/"),g=m[m.length-1],_=g.lastIndexOf(".");return-1===_?"":g.substring(_+1).toLowerCase()},getFileName=(i,m=!0)=>{const g=i.substring(i.lastIndexOf("/")+1);return m?g:g.split(".").slice(0,-1).join(".")},getFilePath=i=>{if(!i||0===i.trim().length)throw new Error("URL must not be empty or undefined");return i.substring(0,i.lastIndexOf("/")+1)};class AABB{minX;maxX;minY;maxY;minZ;maxZ;centerX;centerY;centerZ;xSize;ySize;zSize;geometryRadius;constructor(i,m,g,_,b,y){this.minX=i,this.maxX=m,this.minY=g,this.maxY=_,this.minZ=b,this.maxZ=y,this.centerX=(m+i)/2,this.centerY=(_+g)/2,this.centerZ=(y+b)/2,this.xSize=m-i,this.ySize=_-g,this.zSize=y-b,this.geometryRadius=Math.sqrt((this.xSize/2)**2+(this.ySize/2)**2+(this.zSize/2)**2)}intersects(i){return i instanceof AABB||consoleAndThrowError("allow only AABB instance"),this.minX<=i.maxX&&this.maxX>=i.minX&&this.minY<=i.maxY&&this.maxY>=i.minY&&this.minZ<=i.maxZ&&this.maxZ>=i.minZ}contains(i,m,g){if(Array.isArray(i)){const[m,g,_]=i;return m>=this.minX&&m<=this.maxX&&g>=this.minY&&g<=this.maxY&&_>=this.minZ&&_<=this.maxZ}return i>=this.minX&&i<=this.maxX&&m>=this.minY&&m<=this.maxY&&g>=this.minZ&&g<=this.maxZ}clone(){return new AABB(this.minX,this.maxX,this.minY,this.maxY,this.minZ,this.maxZ)}}const calculateGeometryAABB=i=>{if(!i||!i.data||0===i.vertexCount)return new AABB(0,0,0,0,0,0);const m=i.stride,g=i.data,_=i.vertexCount;let b=1/0,y=1/0,T=1/0,w=-1/0,P=-1/0,$=-1/0,H=0;for(;H<=_-4;H+=4){let i=H*m;const _=g[i],q=g[i+1],W=g[i+2];i=(H+1)*m;const ye=g[i],Ge=g[i+1],Ke=g[i+2];i=(H+2)*m;const Xe=g[i],Ye=g[i+1],je=g[i+2];i=(H+3)*m;const Ze=g[i],Je=g[i+1],Qe=g[i+2];_<b&&(b=_),ye<b&&(b=ye),Xe<b&&(b=Xe),Ze<b&&(b=Ze),_>w&&(w=_),ye>w&&(w=ye),Xe>w&&(w=Xe),Ze>w&&(w=Ze),q<y&&(y=q),Ge<y&&(y=Ge),Ye<y&&(y=Ye),Je<y&&(y=Je),q>P&&(P=q),Ge>P&&(P=Ge),Ye>P&&(P=Ye),Je>P&&(P=Je),W<T&&(T=W),Ke<T&&(T=Ke),je<T&&(T=je),Qe<T&&(T=Qe),W>$&&($=W),Ke>$&&($=Ke),je>$&&($=je),Qe>$&&($=Qe)}for(;H<_;H++){const i=H*m,_=g[i],q=g[i+1],W=g[i+2];_<b&&(b=_),q<y&&(y=q),W<T&&(T=W),_>w&&(w=_),q>P&&(P=q),W>$&&($=W)}return new AABB(b,w,y,P,T,$)},Mn=create$4(),Rn=create$4(),calculateMeshAABB=i=>{if(!i||!i._geometry)return new AABB(0,0,0,0,0,0);const m=i._geometry.volume,{minX:g,maxX:_,minY:b,maxY:y,minZ:T,maxZ:w}=m;if(0===g&&0===_&&0===b&&0===y&&0===T&&0===w)return new AABB(0,0,0,0,0,0);let P=1/0,$=1/0,H=1/0,q=-1/0,W=-1/0,ye=-1/0;const Ge=[[g,b,T],[_,b,T],[_,y,T],[g,y,T],[g,b,w],[_,b,w],[_,y,w],[g,y,w]];for(let m=0;m<8;m++){const g=Ge[m];set$4(Mn,g[0],g[1],g[2]),transformMat4$2(Rn,Mn,i.modelMatrix);const _=Rn[0],b=Rn[1],y=Rn[2];_<P&&(P=_),b<$&&($=b),y<H&&(H=y),_>q&&(q=_),b>W&&(W=b),y>ye&&(ye=y)}return new AABB(P,q,$,W,H,ye)},calculateMeshCombinedAABB=i=>{const m=[];return collectRecursive(i,m),0===m.length?new AABB(0,0,0,0,0,0):calculateCombinedAABBFromAABBs(m)},collectRecursive=(i,m)=>{if(i._geometry){const g=i.boundingAABB;0===g.minX&&0===g.maxX&&0===g.minY&&0===g.maxY&&0===g.minZ&&0===g.maxZ||m.push(g)}if(i.children)for(let g=0;g<i.children.length;g++){const _=i.children[g];_ instanceof Mesh&&collectRecursive(_,m)}},calculateCombinedAABBFromAABBs=i=>{if(0===i.length)return new AABB(0,0,0,0,0,0);if(1===i.length)return i[0];let m=1/0,g=1/0,_=1/0,b=-1/0,y=-1/0,T=-1/0;for(let w=0;w<i.length;w++){const P=i[w];P.minX<m&&(m=P.minX),P.minY<g&&(g=P.minY),P.minZ<_&&(_=P.minZ),P.maxX>b&&(b=P.maxX),P.maxY>y&&(y=P.maxY),P.maxZ>T&&(T=P.maxZ)}return new AABB(m,b,g,y,_,T)};class OBB{centerX;centerY;centerZ;halfExtentX;halfExtentY;halfExtentZ;orientation;center;halfExtents;geometryRadius;constructor(i,m,g){this.centerX=i[0],this.centerY=i[1],this.centerZ=i[2],this.halfExtentX=m[0],this.halfExtentY=m[1],this.halfExtentZ=m[2],this.center=[this.centerX,this.centerY,this.centerZ],this.halfExtents=[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation=clone$5(g),this.geometryRadius=Math.sqrt(this.halfExtentX**2+this.halfExtentY**2+this.halfExtentZ**2)}intersects(i){i instanceof OBB||consoleAndThrowError("allow only OBB instance");const m=subtract$2(create$4(),this.center,i.center);if(length$4(m)>this.geometryRadius+i.geometryRadius)return!1;const g=[...this.#x(),...i.#x()];for(const _ of g){const g=this.#_(_),b=i.#_(_);if(Math.abs(dot$4(m,_))>g+b)return!1}return!0}contains(i,m,g){let _;_=Array.isArray(i)?fromValues$4(i[0],i[1],i[2]):fromValues$4(i,m,g);const b=subtract$2(create$4(),_,this.center),y=this.#x();for(let i=0;i<3;i++){const m=dot$4(b,y[i]);if(Math.abs(m)>this.halfExtents[i])return!1}return!0}clone(){return new OBB([this.centerX,this.centerY,this.centerZ],[this.halfExtentX,this.halfExtentY,this.halfExtentZ],this.orientation)}#x(){return[fromValues$4(this.orientation[0],this.orientation[1],this.orientation[2]),fromValues$4(this.orientation[4],this.orientation[5],this.orientation[6]),fromValues$4(this.orientation[8],this.orientation[9],this.orientation[10])]}#_(i){const m=this.#x();return Math.abs(dot$4(m[0],i))*this.halfExtentX+Math.abs(dot$4(m[1],i))*this.halfExtentY+Math.abs(dot$4(m[2],i))*this.halfExtentZ}}const calculateMeshOBB=i=>{if(!i||!i._geometry){const i=create$5();return new OBB([0,0,0],[0,0,0],i)}const m=i._geometry.volume;if(0===m.minX&&0===m.maxX&&0===m.minY&&0===m.maxY&&0===m.minZ&&0===m.maxZ){const i=create$5();return new OBB([0,0,0],[0,0,0],i)}const g=[m.centerX,m.centerY,m.centerZ],_=[(m.maxX-m.minX)/2,(m.maxY-m.minY)/2,(m.maxZ-m.minZ)/2],b=create$4();transformMat4$2(b,g,i.modelMatrix);const y=create$5();copy$5(y,i.modelMatrix),y[12]=0,y[13]=0,y[14]=0;const T=[create$4(),create$4(),create$4()],w=[0,0,0];for(let i=0;i<3;i++){const m=[0,0,0];m[i]=_[i],transformMat4$2(T[i],m,y),w[i]=length$4(T[i]),normalize$4(T[i],T[i])}const P=create$5();return P[0]=T[0][0],P[1]=T[0][1],P[2]=T[0][2],P[3]=0,P[4]=T[1][0],P[5]=T[1][1],P[6]=T[1][2],P[7]=0,P[8]=T[2][0],P[9]=T[2][1],P[10]=T[2][2],P[11]=0,P[12]=0,P[13]=0,P[14]=0,P[15]=1,new OBB([b[0],b[1],b[2]],w,P)},calculateNormals=(i,m)=>{let g,_,b=[];for(g=0;g<i.length;g+=3)b[g+0]=0,b[g+1]=0,b[g+2]=0;for(g=0;g<m.length;g+=3){let y,T,w,P,$=[],H=[],q=[];for(y=3*m[g],T=3*m[g+1],w=3*m[g+2],$[0]=i[w+0]-i[T+0],$[1]=i[w+1]-i[T+1],$[2]=i[w+2]-i[T+2],H[0]=i[y+0]-i[T+0],H[1]=i[y+1]-i[T+1],H[2]=i[y+2]-i[T+2],q[0]=$[1]*H[2]-$[2]*H[1],q[1]=$[2]*H[0]-$[0]*H[2],q[2]=$[0]*H[1]-$[1]*H[0],_=0;_<3;_++)P=3*m[g+_],b[P+0]=b[P+0]+q[0],b[P+1]=b[P+1]+q[1],b[P+2]=b[P+2]+q[2]}for(g=0;g<i.length;g+=3){let i=[];i[0]=b[g+0],i[1]=b[g+1],i[2]=b[g+2];let m=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);0===m&&(m=1),i[0]=i[0]/m,i[1]=i[1]/m,i[2]=i[2]/m,b[g+0]=i[0],b[g+1]=i[1],b[g+2]=i[2]}return b};function calculateTextureByteSize(i){return function(i){switch(i){case"r8unorm":case"r8snorm":case"r8uint":case"r8sint":return 1;case"r16uint":case"r16sint":case"r16float":case"rg8unorm":case"rg8snorm":case"rg8uint":case"rg8sint":case"depth16unorm":return 2;case"r32uint":case"r32sint":case"r32float":case"rg16uint":case"rg16sint":case"rg16float":case"rgba8unorm":case"rgba8unorm-srgb":case"rgba8snorm":case"rgba8uint":case"rgba8sint":case"bgra8unorm":case"bgra8unorm-srgb":case"depth24plus":case"depth32float":return 4;case"rg32uint":case"rg32sint":case"rg32float":case"rgba16uint":case"rgba16sint":case"rgba16float":return 8;case"rgba32uint":case"rgba32sint":case"rgba32float":return 16;default:throw new Error(`Unrecognized texture format:${i}`)}}(i.format)*(i.size[0]*i.size[1]*(i.size[2]||1))*(i.sampleCount?i.sampleCount:1)}const Cn=create$5(),computeViewFrustumPlanes=(i,m)=>{multiply$5(Cn,i,m);const g=[[Cn[3]-Cn[0],Cn[7]-Cn[4],Cn[11]-Cn[8],Cn[15]-Cn[12]],[Cn[3]+Cn[0],Cn[7]+Cn[4],Cn[11]+Cn[8],Cn[15]+Cn[12]],[Cn[3]+Cn[1],Cn[7]+Cn[5],Cn[11]+Cn[9],Cn[15]+Cn[13]],[Cn[3]-Cn[1],Cn[7]-Cn[5],Cn[11]-Cn[9],Cn[15]-Cn[13]],[Cn[3]-Cn[2],Cn[7]-Cn[6],Cn[11]-Cn[10],Cn[15]-Cn[14]],[Cn[3]+Cn[2],Cn[7]+Cn[6],Cn[11]+Cn[10],Cn[15]+Cn[14]]];for(let i=0;i<6;i++){const m=g[i],_=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]);m[0]/=_,m[1]/=_,m[2]/=_,m[3]/=_}return g},formatBytes=(i,m=2)=>{if(("number"!=typeof i||i<0||Number.isNaN(i)||!Number.isInteger(i))&&consoleAndThrowError("Invalid input:'bytes' must be a uint"),0===i)return"0 Bytes";const g=m<0?0:m,_=Math.floor(Math.log(i)/Math.log(1024));return parseFloat((i/Math.pow(1024,_)).toFixed(g))+" "+["Bytes","KB","MB","GB"][_]},getMipLevelCount=(i,m)=>Math.floor(Math.log2(Math.max(i,m)))+1,Pn=create$5(),En={x:0,y:0,z:0,w:0},getScreenPoint=(i,m)=>{"View3D"!==i?.constructor?.name&&consoleAndThrowError("allow only View3D instance"),identity$2(Pn);const{projectionMatrix:g,rawCamera:_,pixelRectArray:b}=i;return multiply$5(Pn,g,_.modelMatrix),multiply$5(Pn,Pn,m),En.z=Pn[14],En.w=Pn[15],En.x=.5*Pn[12]/En.w+.5,En.y=.5*Pn[13]/En.w+.5,[(b[0]+En.x*b[2])/window.devicePixelRatio,(b[1]+(1-En.y)*b[3])/window.devicePixelRatio]},In=create$5(),localToWorld=(i,m,g,_)=>(validateNumber(m),validateNumber(g),validateNumber(_),identity$2(In),translate$1(In,In,[m,g,_]),multiply$5(In,i,In),[In[12],In[13],In[14]]),mat4ToEuler=(i,m,g)=>{m=m||[0,0,0],g=g||"XYZ";let _=i[0],b=i[4],y=i[8],T=i[1],w=i[5],P=i[9],$=i[2],H=i[6],q=i[10];return"XYZ"===g?(m[1]=Math.asin(clamp(y,-1,1)),Math.abs(y)<.99999?(m[0]=Math.atan2(-P,q),m[2]=Math.atan2(-b,_)):(m[0]=Math.atan2(H,w),m[2]=0)):"YXZ"===g?(m[0]=Math.asin(-clamp(P,-1,1)),Math.abs(P)<.99999?(m[1]=Math.atan2(y,q),m[2]=Math.atan2(T,w)):(m[1]=Math.atan2(-$,_),m[2]=0)):"ZXY"===g?(m[0]=Math.asin(clamp(H,-1,1)),Math.abs(H)<.99999?(m[1]=Math.atan2(-$,q),m[2]=Math.atan2(-b,w)):(m[1]=0,m[2]=Math.atan2(T,_))):"ZYX"===g?(m[1]=Math.asin(-clamp($,-1,1)),Math.abs($)<.99999?(m[0]=Math.atan2(H,q),m[2]=Math.atan2(T,_)):(m[0]=0,m[2]=Math.atan2(-b,w))):"YZX"===g?(m[2]=Math.asin(clamp(T,-1,1)),Math.abs(T)<.99999?(m[0]=Math.atan2(-P,w),m[1]=Math.atan2(-$,_)):(m[0]=0,m[1]=Math.atan2(y,q))):"XZY"===g&&(m[2]=Math.asin(-clamp(b,-1,1)),Math.abs(b)<.99999?(m[0]=Math.atan2(H,w),m[1]=Math.atan2(y,_)):(m[0]=Math.atan2(-P,q),m[1]=0)),m};let clamp=function(i,m,g){return Math.max(m,Math.min(g,i))};const quaternionToRotationMat4=(i,m)=>{let g=i[0],_=i[1],b=i[2],y=i[3],T=g+g,w=_+_,P=b+b,$=g*T,H=g*w,q=g*P,W=_*w,ye=_*P,Ge=b*P,Ke=y*T,Xe=y*w,Ye=y*P;return m[0]=1-(W+Ge),m[4]=H-Ye,m[8]=q+Xe,m[1]=H+Ye,m[5]=1-($+Ge),m[9]=ye-Ke,m[2]=q-Xe,m[6]=ye+Ke,m[10]=1-($+W),m[3]=0,m[7]=0,m[11]=0,m[12]=0,m[13]=0,m[14]=0,m[15]=1,m};let Bn,Ln,Dn,Un,An,kn,On=create$4(),Nn=create$5(),Gn=create$5();const screenToWorld=(i,m,g)=>{const{rawCamera:_,pixelRectArray:b}=g;return Bn=2*(i*window.devicePixelRatio+b[0])/b[2]-1,Ln=-2*(m*window.devicePixelRatio+b[1])/b[3]+1,Dn=1,multiply$5(Gn,g.projectionMatrix,_.modelMatrix),kn=clone$5(Gn),invert$2(kn,kn),On=fromValues$4(Bn,Ln,1),identity$2(Nn),translate$1(Nn,Nn,On),multiply$5(kn,kn,Nn),On[0]=kn[12],On[1]=kn[13],On[2]=kn[14],Un=Gn[12]*Bn+Gn[13]*Ln+Gn[15],0!==Un&&(An=1/Un,On[0]/=An,On[1]/=An,On[2]/=An,On[0]=On[0]+_.x,On[1]=On[1]+_.y,On[2]=On[2]+_.z),[On[0],On[1],On[2]]};function sortTransparentObjects(i,m){const g={},{x:_,y:b,z:y}=i;return m.sort((i,m)=>{if(!g[i.uuid]){const m=i.x-_,T=i.y-b,w=i.z-y;g[i.uuid]=m*m+T*T+w*w}if(!g[m.uuid]){const i=m.x-_,T=m.y-b,w=m.z-y;g[m.uuid]=i*i+T*T+w*w}return g[m.uuid]-g[i.uuid]})}const Fn=create$5(),Vn=create$4(),worldToLocal=(i,m,g,_)=>(validateNumber(m),validateNumber(g),validateNumber(_),invert$2(Fn,i),set$4(Vn,m,g,_),transformMat4$2(Vn,Vn,Fn),[Vn[0],Vn[1],Vn[2]]),$n=console.log.bind(console);var Hn=Object.freeze({__proto__:null,AABB:AABB,OBB:OBB,calculateGeometryAABB:calculateGeometryAABB,calculateMeshAABB:calculateMeshAABB,calculateMeshCombinedAABB:calculateMeshCombinedAABB,calculateMeshOBB:calculateMeshOBB,calculateNormals:calculateNormals,calculateTextureByteSize:calculateTextureByteSize,computeViewFrustumPlanes:computeViewFrustumPlanes,convertHexToRgb:convertHexToRgb,convertRgbToHex:convertRgbToHex,createUUID:createUUID,formatBytes:formatBytes,getAbsoluteURL:getAbsoluteURL,getFileExtension:getFileExtension,getFileName:getFileName,getFilePath:getFilePath,getMipLevelCount:getMipLevelCount,getScreenPoint:getScreenPoint,keepLog:$n,localToWorld:localToWorld,matToEuler:mat4ToEuler,quaternionToRotationMat4:quaternionToRotationMat4,screenToWorld:screenToWorld,sortTransparentObjects:sortTransparentObjects,uuidToUint:uuidToUint,worldToLocal:worldToLocal});class GeometryGPURenderInfo{buffers;constructor(i){this.buffers=i}}Object.freeze(GeometryGPURenderInfo);const validateRedGPUContext=i=>{if("RedGPUContext"!==i?.constructor?.name){return consoleAndThrowError(`from ${i?.constructor?.name}:requires a RedGPUContext instance,but received:${i}`),!1}return!0};class ResourceBase{#v=createUUID();#b;#y;#a="";#e;#T=[];constructor(i){validateRedGPUContext(i),this.#b=i,this.#y=i.gpuDevice}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get uuid(){return this.#v}get gpuDevice(){return this.#y}get redGPUContext(){return this.#b}__addDirtyPipelineListener(i){this.#S(!0),this.#T.push(i)}__removeDirtyPipelineListener(i){const m=this.#T.indexOf(i);m>-1&&(this.#T.splice(m,1),this.#S(!1))}__fireListenerList(i=!1){for(const i of this.#T)i(this);i&&(this.#T.length=0)}#S(i){const{resourceManager:m}=this.#b;if(m){const g=m[`managed${this.constructor.name}State`]?.table?.[this.#v];g&&(i?g.useNum++:g.useNum--)}}}class Geometry extends ResourceBase{gpuRenderInfo;#w;#M;#R;constructor(i,m,g){super(i),this.#C(m),this.#P(g);const{interleavedStruct:_}=this.#w;this.gpuRenderInfo=new GeometryGPURenderInfo([{arrayStride:_.arrayStride,attributes:_.attributes}])}get vertexBuffer(){return this.#w}get indexBuffer(){return this.#M}get volume(){return this.#R||(this.#R=calculateGeometryAABB(this.#w)),this.#R}#C(i){const m=this.#w;this.#w=i,m&&m.__removeDirtyPipelineListener(this.#E),i&&i.__addDirtyPipelineListener(this.#E),this.#R=null}#P(i){const m=this.#M;this.#M=i,m&&m.__removeDirtyPipelineListener(this.#I),i&&i.__addDirtyPipelineListener(this.#I)}#E(){this.__fireListenerList()}#I(){this.__fireListenerList()}}Object.freeze(Geometry);const zn={POINT_LIST:"point-list",LINE_LIST:"line-list",LINE_STRIP:"line-strip",TRIANGLE_LIST:"triangle-list",TRIANGLE_STRIP:"triangle-strip"};Object.freeze(zn);class ColorRGB{#B;#L;#D;#U;constructor(i=255,m=255,g=255,_=void 0){this.#A(i,m,g),this.#k(i,m,g),_&&(this.#U=_)}get r(){return this.#B}set r(i){validateUintRange(i,0,255),this.#B=i,this.#U?.()}get g(){return this.#L}set g(i){validateUintRange(i,0,255),this.#L=i,this.#U?.()}get b(){return this.#D}set b(i){validateUintRange(i,0,255),this.#D=i,this.#U?.()}get rgb(){return[this.#B,this.#L,this.#D]}get rgbNormal(){return[this.#B/255,this.#L/255,this.#D/255]}get hex(){return convertRgbToHex(this.#B,this.#L,this.#D)}setColorByRGB(i,m,g){this.#A(i,m,g),this.#k(i,m,g)}setColorByHEX(i){const{r:m,g:g,b:_}=convertHexToRgb(i);this.#k(m,g,_)}setColorByRGBString(i){const m=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(i);m||consoleAndThrowError(`Invalid rgb color value:${i}`);const[,g,_,b]=m.map(Number);this.#A(g,_,b),this.#k(g,_,b)}#k(i,m,g){this.#B=i,this.#L=m,this.#D=g,this.#U?.()}#A(i,m,g){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255)}}function defineColorRGB(i,m="#fff",g=!0){const _=Symbol(i);return{get:function(){if(void 0===this[_]){let b=255,y=255,T=255;if(isHexColor(m)){const i=convertHexToRgb(m);b=i.r,y=i.g,T=i.b}this[_]=new ColorRGB(b,y,T,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbNormal)}})}return this[_]},...bn}}Object.freeze(defineColorRGB);class ColorRGBA extends ColorRGB{#O;#U;constructor(i=255,m=255,g=255,_=1,b=void 0){super(i,m,g,b),validatePositiveNumberRange(_,0,1),this.#O=_,b&&(this.#U=b)}get a(){return this.#O}set a(i){validatePositiveNumberRange(i,0,1),this.#O=i,this.#U?.()}get rgba(){return[this.r,this.g,this.b,this.#O]}get rgbaNormal(){return[this.r/255,this.g/255,this.b/255,this.#O]}setColorByRGBA(i,m,g,_){this.#N(i,m,g,_),this.r=i,this.g=m,this.b=g,this.#O=_,this.#U?.()}setColorByRGBAString(i){const m=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d*(?:\.\d+)?)\s*\)/.exec(i);if(!m)throw new Error(`Invalid rgba color value:${i}`);const[,g,_,b,y]=m.map(Number);this.#N(g,_,b,y),this.r=g,this.g=_,this.b=b,this.#O=y,this.#U?.()}#N(i,m,g,_){validateUintRange(i,0,255),validateUintRange(m,0,255),validateUintRange(g,0,255),validatePositiveNumberRange(_,0,1)}}function defineColorRGBA(i,m="#fff",g=!0){const _=Symbol(i);return{get:function(){if(void 0===this[_]){let b=255,y=255,T=255,w=1;if(isHexColor(m)){const i=convertHexToRgb(m);b=i.r,y=i.g,T=i.b}this[_]=new ColorRGBA(b,y,T,w,()=>{const{gpuRenderInfo:m}=this;if(m)if(g){const{fragmentUniformInfo:g,fragmentUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbaNormal)}else{const{vertexUniformInfo:g,vertexUniformBuffer:b}=m;b.writeBuffer(g.members[i],this[_].rgbaNormal)}})}return this[_]},...bn}}function createSetter$1(i,m,g){const _=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const b=this[m];this[m]=i,this.updateTexture(b,i);const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=y;_ in this?this[_]=!!i:m.members[_]&&g.writeBuffer(m.members[_],i?1:0)}else if(y){const{vertexUniformInfo:m,vertexUniformBuffer:g}=y;m.members[_]&&g.writeBuffer(g.members[_],i?1:0)}}}function defineCubeTexture(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter$1(i,g,m),...bn}}function defineSampler(i){const m=Symbol(i);return{get:function(){return this[m]},set:function(i){const g=this[m];this[m]=i,this.updateSampler(g,i)},...bn}}function createSetter(i,m,g){const _=`use${i.charAt(0).toUpperCase()}${i.substring(1)}`;return function(i){const b=this[m];this[m]=i,this.updateTexture(b,i);const{gpuRenderInfo:y}=this;if(g){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=y;_ in this?this[_]=!!i:m.members[_]&&g.writeBuffer(m.members[_],i?1:0)}else if(y){const{vertexUniformInfo:m,vertexUniformBuffer:g}=y;m.members[_]&&g.writeBuffer(g.members[_],i?1:0)}}}function defineTexture$1(i,m=!0){const g=Symbol(i);return{get:function(){return this[g]},set:createSetter(i,g,m),...bn}}function defineProperty_vec4(i,m=[0,0,0,0]){return defineVector(i,m)}function defineProperty_vec3(i,m=[0,0,0]){return defineVector(i,m)}function defineProperty_vec2(i,m=[0,0]){return defineVector(i,m)}Object.freeze(defineColorRGBA),Object.freeze(defineCubeTexture),Object.freeze(defineSampler),Object.freeze(defineTexture$1);const qn={},Kn={AO_STRENGTH:"aoStrength",SPECULAR_STRENGTH:"specularStrength",EMISSIVE_STRENGTH:"emissiveStrength",OPACITY:"opacity",SHININESS:"shininess",NORMAL_SCALE:"normalScale"},Wn={},Xn={ALPHA_TEXTURE_SAMPLER:"alphaTextureSampler",AO_TEXTURE_SAMPLER:"aoTextureSampler",DIFFUSE_TEXTURE_SAMPLER:"diffuseTextureSampler",EMISSIVE_TEXTURE_SAMPLER:"emissiveTextureSampler",ENVIRONMENT_TEXTURE_SAMPLER:"environmentTextureSampler",NORMAL_TEXTURE_SAMPLER:"normalTextureSampler",SPECULAR_TEXTURE_SAMPLER:"specularTextureSampler"},Yn={ENVIRONMENT_TEXTURE:"environmentTexture"},jn={},Zn={},Jn={},Qn={ALPHA_TEXTURE:"alphaTexture",AO_TEXTURE:"aoTexture",DIFFUSE_TEXTURE:"diffuseTexture",EMISSIVE_TEXTURE:"emissiveTexture",NORMAL_TEXTURE:"normalTexture",SPECULAR_TEXTURE:"specularTexture"},er={COLOR:"color",EMISSIVE_COLOR:"emissiveColor",SPECULAR_COLOR:"specularColor"},tr={...createDefineByPreset({defineBoolean:[defineBoolean,qn],definePositiveNumber:[definePositiveNumberRange,Kn],defineUint:[defineUintRange,Wn],defineVec2:[defineProperty_vec2,jn],defineVec3:[defineProperty_vec3,Zn],defineVec4:[defineProperty_vec4,Jn],defineColorRGB:[defineColorRGB,er],defineSampler:[defineSampler,Xn],defineTexture:[defineTexture$1,Qn],defineCubeTexture:[defineCubeTexture,Yn]}),defineBoolean:defineProperties(defineBoolean),definePositiveNumber:defineProperties(definePositiveNumberRange),defineUint:defineProperties(defineUintRange),defineVec2:defineProperties(defineProperty_vec2),defineVec3:defineProperties(defineProperty_vec3),defineVec4:defineProperties(defineProperty_vec4),defineColorRGB:defineProperties(defineColorRGB),defineColorRGBA:defineProperties(defineColorRGBA),defineSampler:defineProperties(defineSampler),defineTexture:defineProperties(defineTexture$1),defineCubeTexture:defineProperties(defineCubeTexture),PRESET_BOOLEAN:qn,PRESET_POSITIVE_NUMBER:Kn,PRESET_UINT:Wn,PRESET_SAMPLER:Xn,PRESET_TEXTURE:Qn,PRESET_CUBE_TEXTURE:Yn,PRESET_VEC2:jn,PRESET_VEC3:Zn,PRESET_VEC4:Jn,PRESET_COLOR_RGB:er};Object.freeze(tr);class e{constructor(i,m){this.name=i,this.attributes=m,this.size=0}get isArray(){return!1}get isStruct(){return!1}get isTemplate(){return!1}get isPointer(){return!1}getTypeName(){return this.name}}class t{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g,this.offset=0,this.size=0}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class n extends e{constructor(i,m){super(i,m),this.members=[],this.align=0,this.startLine=-1,this.endLine=-1,this.inUse=!1}get isStruct(){return!0}}class s extends e{constructor(i,m){super(i,m),this.count=0,this.stride=0}get isArray(){return!0}getTypeName(){return`array<${this.format.getTypeName()},${this.count}>`}}class r extends e{constructor(i,m,g){super(i,g),this.format=m}get isPointer(){return!0}getTypeName(){return`&${this.format.getTypeName()}`}}class a extends e{constructor(i,m,g,_){super(i,g),this.format=m,this.access=_}get isTemplate(){return!0}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}var nr;(i=>{i[i.Uniform=0]="Uniform",i[i.Storage=1]="Storage",i[i.Texture=2]="Texture",i[i.Sampler=3]="Sampler",i[i.StorageTexture=4]="StorageTexture"})(nr||(nr={}));class o{constructor(i,m,g,_,b,y,T){this.name=i,this.type=m,this.group=g,this.binding=_,this.attributes=b,this.resourceType=y,this.access=T}get isArray(){return this.type.isArray}get isStruct(){return this.type.isStruct}get isTemplate(){return this.type.isTemplate}get size(){return this.type.size}get align(){return this.type.isStruct?this.type.align:0}get members(){return this.type.isStruct?this.type.members:null}get format(){return this.type.isArray||this.type.isTemplate?this.type.format:null}get count(){return this.type.isArray?this.type.count:0}get stride(){return this.type.isArray?this.type.stride:this.size}}class l{constructor(i,m){this.name=i,this.type=m}}class c{constructor(i,m,g,_){this.name=i,this.type=m,this.locationType=g,this.location=_,this.interpolation=null}}class u{constructor(i,m,g,_){this.name=i,this.type=m,this.locationType=g,this.location=_}}class h{constructor(i,m,g,_){this.name=i,this.type=m,this.attributes=g,this.id=_}}class f{constructor(i,m,g){this.name=i,this.type=m,this.attributes=g}}class p{constructor(i,m=null,g){this.stage=null,this.inputs=[],this.outputs=[],this.arguments=[],this.returnType=null,this.resources=[],this.overrides=[],this.startLine=-1,this.endLine=-1,this.inUse=!1,this.calls=new Set,this.name=i,this.stage=m,this.attributes=g}}class d{constructor(){this.vertex=[],this.fragment=[],this.compute=[]}}const rr=new Float32Array(1),ir=new Int32Array(rr.buffer),ar=new Uint16Array(1);function x(i){rr[0]=i;const m=ir[0],g=m>>31&1;let _=m>>23&255,b=8388607&m;if(255===_)return ar[0]=g<<15|31744|(0!==b?512:0),ar[0];if(0===_){if(0===b)return ar[0]=g<<15,ar[0];b|=8388608;let i=113;for(;!(8388608&b);)b<<=1,i--;return _=127-i,b&=8388607,_>0?(b=(b>>126-_)+(b>>127-_&1),ar[0]=g<<15|_<<10|b>>13,ar[0]):(ar[0]=g<<15,ar[0])}return _=_-127+15,_>=31?(ar[0]=g<<15|31744,ar[0]):_<=0?_<-10?(ar[0]=g<<15,ar[0]):(b=(8388608|b)>>1-_,ar[0]=g<<15|b>>13,ar[0]):(b>>=13,ar[0]=g<<15|_<<10|b,ar[0])}const sr=new Uint32Array(1),or=new Float32Array(sr.buffer,0,1);function v(i){const m=112+(i>>6&31)<<23|(63&i)<<17;return sr[0]=m,or[0]}function k(i,m,g,_){const b=[0,0,0,0];for(let $=0;$<_;++$)switch(g){case"8unorm":b[$]=i[m]/255,m++;break;case"8snorm":b[$]=i[m]/255*2-1,m++;break;case"8uint":b[$]=i[m],m++;break;case"8sint":b[$]=i[m]-127,m++;break;case"16uint":b[$]=i[m]|i[m+1]<<8,m+=2;break;case"16sint":b[$]=(i[m]|i[m+1]<<8)-32768,m+=2;break;case"16float":b[$]=(void 0,void 0,void 0,T=(32768&(y=i[m]|i[m+1]<<8))>>15,P=1023&y,0==(w=(31744&y)>>10)?(T?-1:1)*Math.pow(2,-14)*(P/Math.pow(2,10)):31==w?P?NaN:1/0*(T?-1:1):(T?-1:1)*Math.pow(2,w-15)*(1+P/Math.pow(2,10))),m+=2;break;case"32uint":case"32sint":b[$]=i[m]|i[m+1]<<8|i[m+2]<<16|i[m+3]<<24,m+=4;break;case"32float":b[$]=new Float32Array(i.buffer,m,1)[0],m+=4}var y,T,w,P;return b}function I(i,m,g,_,b){for(let y=0;y<_;++y)switch(g){case"8unorm":i[m]=255*b[y],m++;break;case"8snorm":i[m]=.5*(b[y]+1)*255,m++;break;case"8uint":i[m]=b[y],m++;break;case"8sint":i[m]=b[y]+127,m++;break;case"16uint":new Uint16Array(i.buffer,m,1)[0]=b[y],m+=2;break;case"16sint":new Int16Array(i.buffer,m,1)[0]=b[y],m+=2;break;case"16float":{const g=x(b[y]);new Uint16Array(i.buffer,m,1)[0]=g,m+=2;break}case"32uint":new Uint32Array(i.buffer,m,1)[0]=b[y],m+=4;break;case"32sint":new Int32Array(i.buffer,m,1)[0]=b[y],m+=4;break;case"32float":new Float32Array(i.buffer,m,1)[0]=b[y],m+=4}return b}const ur={r8unorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8snorm:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8uint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r8sint:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg8unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8snorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg8sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"rgba8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8snorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba8sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},bgra8unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bgra8unorm-srgb":{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r16uint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16sint:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r16float:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg16uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg16float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba16uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba16float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},r32uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32sint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},r32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:1},rg32uint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32sint:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rg32float:{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,channels:2},rgba32uint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32sint:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgba32float:{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2uint:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rgb10a2unorm:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},rg11b10ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},stencil8:{bytesPerBlock:1,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!1,hasStencil:!0,channels:1},depth16unorm:{bytesPerBlock:2,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},depth24plus:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,depthOnlyFormat:"depth32float",channels:1},"depth24plus-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,depthOnlyFormat:"depth32float",channels:1},depth32float:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!1,channels:1},"depth32float-stencil8":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!1,isDepthStencil:!0,hasDepth:!0,hasStencil:!0,stencilOnlyFormat:"depth32float",channels:1},rgb9e5ufloat:{bytesPerBlock:4,blockWidth:1,blockHeight:1,isCompressed:!1,channels:4},"bc1-rgba-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc1-rgba-unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc2-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc3-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc4-r-unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc4-r-snorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:1},"bc5-rg-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc5-rg-snorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:2},"bc6h-rgb-ufloat":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc6h-rgb-float":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"bc7-rgba-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgb8a1unorm-srgb":{bytesPerBlock:8,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"etc2-rgba8unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"eac-r11unorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-r11snorm":{bytesPerBlock:8,blockWidth:1,blockHeight:1,isCompressed:!0,channels:1},"eac-rg11unorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"eac-rg11snorm":{bytesPerBlock:16,blockWidth:1,blockHeight:1,isCompressed:!0,channels:2},"astc-4x4-unorm":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-4x4-unorm-srgb":{bytesPerBlock:16,blockWidth:4,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x4-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:4,isCompressed:!0,channels:4},"astc-5x5-unorm":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-5x5-unorm-srgb":{bytesPerBlock:16,blockWidth:5,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x5-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:5,isCompressed:!0,channels:4},"astc-6x6-unorm":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-6x6-unorm-srgb":{bytesPerBlock:16,blockWidth:6,blockHeight:6,isCompressed:!0,channels:4},"astc-8x5-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x5-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:5,isCompressed:!0,channels:4},"astc-8x6-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x6-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:6,isCompressed:!0,channels:4},"astc-8x8-unorm":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-8x8-unorm-srgb":{bytesPerBlock:16,blockWidth:8,blockHeight:8,isCompressed:!0,channels:4},"astc-10x5-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x5-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:5,isCompressed:!0,channels:4},"astc-10x6-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x6-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:6,isCompressed:!0,channels:4},"astc-10x8-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x8-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:8,isCompressed:!0,channels:4},"astc-10x10-unorm":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-10x10-unorm-srgb":{bytesPerBlock:16,blockWidth:10,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x10-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:10,isCompressed:!0,channels:4},"astc-12x12-unorm":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4},"astc-12x12-unorm-srgb":{bytesPerBlock:16,blockWidth:12,blockHeight:12,isCompressed:!0,channels:4}};class S{constructor(){this.id=S._id++,this.line=0}get isAstNode(){return!0}get astNodeType(){return""}search(i){i(this)}searchBlock(i,m){if(i){m(A.instance);for(const g of i)g instanceof Array?this.searchBlock(g,m):g.search(m);m(E.instance)}}constEvaluate(i,m){throw new Error("Cannot evaluate node")}constEvaluateString(i){return this.constEvaluate(i).toString()}}S._id=0;class A extends S{}A.instance=new A;class E extends S{}E.instance=new E;const lr=new Set(["all","all","any","select","arrayLength","abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","clamp","cos","cosh","countLeadingZeros","countOneBits","countTrailingZeros","cross","degrees","determinant","distance","dot","dot4U8Packed","dot4I8Packed","exp","exp2","extractBits","faceForward","firstLeadingBit","firstTrailingBit","floor","fma","fract","frexp","insertBits","inverseSqrt","ldexp","length","log","log2","max","min","mix","modf","normalize","pow","quantizeToF16","radians","reflect","refract","reverseBits","round","saturate","sign","sin","sinh","smoothStep","sqrt","step","tan","tanh","transpose","trunc","dpdx","dpdxCoarse","dpdxFine","dpdy","dpdyCoarse","dpdyFine","fwidth","fwidthCoarse","fwidthFine","textureDimensions","textureGather","textureGatherCompare","textureLoad","textureNumLayers","textureNumLevels","textureNumSamples","textureSample","textureSampleBias","textureSampleCompare","textureSampleCompareLevel","textureSampleGrad","textureSampleLevel","textureSampleBaseClampToEdge","textureStore","atomicLoad","atomicStore","atomicAdd","atomicSub","atomicMax","atomicMin","atomicAnd","atomicOr","atomicXor","atomicExchange","atomicCompareExchangeWeak","pack4x8snorm","pack4x8unorm","pack4xI8","pack4xU8","pack4x8Clamp","pack4xU8Clamp","pack2x16snorm","pack2x16unorm","pack2x16float","unpack4x8snorm","unpack4x8unorm","unpack4xI8","unpack4xU8","unpack2x16snorm","unpack2x16unorm","unpack2x16float","storageBarrier","textureBarrier","workgroupBarrier","workgroupUniformLoad","subgroupAdd","subgroupExclusiveAdd","subgroupInclusiveAdd","subgroupAll","subgroupAnd","subgroupAny","subgroupBallot","subgroupBroadcast","subgroupBroadcastFirst","subgroupElect","subgroupMax","subgroupMin","subgroupMul","subgroupExclusiveMul","subgroupInclusiveMul","subgroupOr","subgroupShuffle","subgroupShuffleDown","subgroupShuffleUp","subgroupShuffleXor","subgroupXor","quadBroadcast","quadSwapDiagonal","quadSwapX","quadSwapY"]);class L extends S{constructor(){super()}}class C extends L{constructor(i,m,g,_,b,y){super(),this.calls=new Set,this.name=i,this.args=m,this.returnType=g,this.body=_,this.startLine=b,this.endLine=y}get astNodeType(){return"function"}search(i){if(this.attributes)for(const m of this.attributes)i(m);i(this);for(const m of this.args)i(m);this.searchBlock(this.body,i)}}class D extends L{constructor(i){super(),this.expression=i}get astNodeType(){return"staticAssert"}search(i){this.expression.search(i)}}class N extends L{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"while"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class V extends L{constructor(i,m){super(),this.body=i,this.loopId=m}get astNodeType(){return"continuing"}search(i){this.searchBlock(this.body,i)}}class O extends L{constructor(i,m,g,_){super(),this.init=i,this.condition=m,this.increment=g,this.body=_}get astNodeType(){return"for"}search(i){var m,g,_;null===(m=this.init)||void 0===m||m.search(i),null===(g=this.condition)||void 0===g||g.search(i),null===(_=this.increment)||void 0===_||_.search(i),this.searchBlock(this.body,i)}}class B extends L{constructor(i,m,g,_,b){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=_,this.value=b}get astNodeType(){return"var"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class F extends L{constructor(i,m,g){super(),this.attributes=null,this.name=i,this.type=m,this.value=g}get astNodeType(){return"override"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class M extends L{constructor(i,m,g,_,b){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=_,this.value=b}get astNodeType(){return"let"}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}class U extends L{constructor(i,m,g,_,b){super(),this.attributes=null,this.name=i,this.type=m,this.storage=g,this.access=_,this.value=b}get astNodeType(){return"const"}constEvaluate(i,m){return this.value.constEvaluate(i,m)}search(i){var m;i(this),null===(m=this.value)||void 0===m||m.search(i)}}var cr,hr,fr,dr;(i=>{i.increment="++",i.decrement="--"})(cr||(cr={})),(i=>{i.parse=function(m){const g=m;if("parse"==g)throw new Error("Invalid value for IncrementOperator");return i[g]}})(cr||(cr={}));class z extends L{constructor(i,m){super(),this.operator=i,this.variable=m}get astNodeType(){return"increment"}search(i){this.variable.search(i)}}(i=>{i.assign="=",i.addAssign="+=",i.subtractAssin="-=",i.multiplyAssign="*=",i.divideAssign="/=",i.moduloAssign="%=",i.andAssign="&=",i.orAssign="|=",i.xorAssign="^=",i.shiftLeftAssign="<<=",i.shiftRightAssign=">>="})(hr||(hr={})),(hr||(hr={})).parse=function(i){const m=i;if("parse"==m)throw new Error("Invalid value for AssignOperator");return m};class R extends L{constructor(i,m,g){super(),this.operator=i,this.variable=m,this.value=g}get astNodeType(){return"assign"}search(i){this.variable.search(i),this.value.search(i)}}class G extends L{constructor(i,m){super(),this.name=i,this.args=m}get astNodeType(){return"call"}isBuiltin(){return lr.has(this.name)}search(i){for(const m of this.args)m.search(i);i(this)}}class X extends L{constructor(i,m){super(),this.body=i,this.continuing=m}get astNodeType(){return"loop"}}class j extends L{constructor(i,m){super(),this.condition=i,this.cases=m}get astNodeType(){return"switch"}search(i){i(this);for(const m of this.cases)m.search(i)}}class Z extends L{constructor(i,m,g,_){super(),this.condition=i,this.body=m,this.elseif=g,this.else=_}get astNodeType(){return"if"}search(i){this.condition.search(i),this.searchBlock(this.body,i),this.searchBlock(this.elseif,i),this.searchBlock(this.else,i)}}class Q extends L{constructor(i){super(),this.value=i}get astNodeType(){return"return"}search(i){var m;null===(m=this.value)||void 0===m||m.search(i)}}class Y extends L{constructor(i){super(),this.name=i}get astNodeType(){return"enable"}}class K extends L{constructor(i){super(),this.extensions=i}get astNodeType(){return"requires"}}class J extends L{constructor(i,m){super(),this.severity=i,this.rule=m}get astNodeType(){return"diagnostic"}}class ee extends L{constructor(i,m){super(),this.name=i,this.type=m}get astNodeType(){return"alias"}}class te extends L{constructor(){super()}get astNodeType(){return"discard"}}class ne extends L{constructor(){super(),this.condition=null,this.loopId=-1}get astNodeType(){return"break"}}class se extends L{constructor(){super(),this.loopId=-1}get astNodeType(){return"continue"}}class re extends L{constructor(i){super(),this.attributes=null,this.name=i}get astNodeType(){return"type"}get isStruct(){return!1}get isArray(){return!1}static maxFormatType(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const _=re._priority.get(m.name);re._priority.get(i[g].name)<_&&(m=i[g])}return"x32"===m.name?re.i32:m}getTypeName(){return this.name}}re.x32=new re("x32"),re.f32=new re("f32"),re.i32=new re("i32"),re.u32=new re("u32"),re.f16=new re("f16"),re.bool=new re("bool"),re.void=new re("void"),re._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class ae extends re{constructor(i){super(i)}}class ie extends re{constructor(i,m,g,_){super(i),this.members=m,this.startLine=g,this.endLine=_}get astNodeType(){return"struct"}get isStruct(){return!0}getMemberIndex(i){for(let m=0;m<this.members.length;m++)if(this.members[m].name==i)return m;return-1}search(i){for(const m of this.members)i(m)}}class oe extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"template"}getTypeName(){let i=this.name;if(null!==this.format){if("vec2"===i||"vec3"===i||"vec4"===i||"mat2x2"===i||"mat2x3"===i||"mat2x4"===i||"mat3x2"===i||"mat3x3"===i||"mat3x4"===i||"mat4x2"===i||"mat4x3"===i||"mat4x4"===i){if("f32"===this.format.name)return i+="f",i;if("i32"===this.format.name)return i+="i",i;if("u32"===this.format.name)return i+="u",i;if("bool"===this.format.name)return i+="b",i;if("f16"===this.format.name)return i+="h",i}i+=`<${this.format.name}>`}else if("vec2"===i||"vec3"===i||"vec4"===i)return i;return i}}oe.vec2f=new oe("vec2",re.f32,null),oe.vec3f=new oe("vec3",re.f32,null),oe.vec4f=new oe("vec4",re.f32,null),oe.vec2i=new oe("vec2",re.i32,null),oe.vec3i=new oe("vec3",re.i32,null),oe.vec4i=new oe("vec4",re.i32,null),oe.vec2u=new oe("vec2",re.u32,null),oe.vec3u=new oe("vec3",re.u32,null),oe.vec4u=new oe("vec4",re.u32,null),oe.vec2h=new oe("vec2",re.f16,null),oe.vec3h=new oe("vec3",re.f16,null),oe.vec4h=new oe("vec4",re.f16,null),oe.vec2b=new oe("vec2",re.bool,null),oe.vec3b=new oe("vec3",re.bool,null),oe.vec4b=new oe("vec4",re.bool,null),oe.mat2x2f=new oe("mat2x2",re.f32,null),oe.mat2x3f=new oe("mat2x3",re.f32,null),oe.mat2x4f=new oe("mat2x4",re.f32,null),oe.mat3x2f=new oe("mat3x2",re.f32,null),oe.mat3x3f=new oe("mat3x3",re.f32,null),oe.mat3x4f=new oe("mat3x4",re.f32,null),oe.mat4x2f=new oe("mat4x2",re.f32,null),oe.mat4x3f=new oe("mat4x3",re.f32,null),oe.mat4x4f=new oe("mat4x4",re.f32,null),oe.mat2x2h=new oe("mat2x2",re.f16,null),oe.mat2x3h=new oe("mat2x3",re.f16,null),oe.mat2x4h=new oe("mat2x4",re.f16,null),oe.mat3x2h=new oe("mat3x2",re.f16,null),oe.mat3x3h=new oe("mat3x3",re.f16,null),oe.mat3x4h=new oe("mat3x4",re.f16,null),oe.mat4x2h=new oe("mat4x2",re.f16,null),oe.mat4x3h=new oe("mat4x3",re.f16,null),oe.mat4x4h=new oe("mat4x4",re.f16,null),oe.mat2x2i=new oe("mat2x2",re.i32,null),oe.mat2x3i=new oe("mat2x3",re.i32,null),oe.mat2x4i=new oe("mat2x4",re.i32,null),oe.mat3x2i=new oe("mat3x2",re.i32,null),oe.mat3x3i=new oe("mat3x3",re.i32,null),oe.mat3x4i=new oe("mat3x4",re.i32,null),oe.mat4x2i=new oe("mat4x2",re.i32,null),oe.mat4x3i=new oe("mat4x3",re.i32,null),oe.mat4x4i=new oe("mat4x4",re.i32,null),oe.mat2x2u=new oe("mat2x2",re.u32,null),oe.mat2x3u=new oe("mat2x3",re.u32,null),oe.mat2x4u=new oe("mat2x4",re.u32,null),oe.mat3x2u=new oe("mat3x2",re.u32,null),oe.mat3x3u=new oe("mat3x3",re.u32,null),oe.mat3x4u=new oe("mat3x4",re.u32,null),oe.mat4x2u=new oe("mat4x2",re.u32,null),oe.mat4x3u=new oe("mat4x3",re.u32,null),oe.mat4x4u=new oe("mat4x4",re.u32,null);class le extends re{constructor(i,m,g,_){super(i),this.storage=m,this.type=g,this.access=_}get astNodeType(){return"pointer"}}class ce extends re{constructor(i,m,g,_){super(i),this.attributes=m,this.format=g,this.count=_}get astNodeType(){return"array"}get isArray(){return!0}}class ue extends re{constructor(i,m,g){super(i),this.format=m,this.access=g}get astNodeType(){return"sampler"}}class he extends S{constructor(){super(),this.postfix=null}}class fe extends he{constructor(i){super(),this.value=i}get astNodeType(){return"stringExpr"}toString(){return this.value}constEvaluateString(){return this.value}}class pe extends he{constructor(i,m){super(),this.type=i,this.args=m}get astNodeType(){return"createExpr"}search(i){if(i(this),this.args)for(const m of this.args)m.search(i)}constEvaluate(i,m){return m&&(m[0]=this.type),i.evalExpression(this,i.context)}}class de extends he{constructor(i,m){super(),this.cachedReturnValue=null,this.name=i,this.args=m}get astNodeType(){return"callExpr"}setCachedReturnValue(i){this.cachedReturnValue=i}get isBuiltin(){return lr.has(this.name)}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){for(const m of this.args)m.search(i);i(this)}}class me extends he{constructor(i){super(),this.name=i}get astNodeType(){return"varExpr"}search(i){i(this),this.postfix&&this.postfix.search(i)}constEvaluate(i,m){return i.evalExpression(this,i.context)}}class _e extends he{constructor(i,m){super(),this.name=i,this.initializer=m}get astNodeType(){return"constExpr"}constEvaluate(i,m){if(this.initializer){const m=i.evalExpression(this.initializer,i.context);return null!==m&&this.postfix?m.getSubData(i,this.postfix,i.context):m}return null}search(i){this.initializer.search(i)}}class ge extends he{constructor(i,m){super(),this.value=i,this.type=m}get astNodeType(){return"literalExpr"}constEvaluate(i,m){return void 0!==m&&(m[0]=this.type),this.value}get isScalar(){return this.value instanceof Oe}get isVector(){return this.value instanceof Fe||this.value instanceof Me}get scalarValue(){return this.value instanceof Oe?this.value.value:(console.error("Value is not scalar."),0)}get vectorValue(){return this.value instanceof Fe||this.value instanceof Me?this.value.data:(console.error("Value is not a vector or matrix."),new Float32Array(0))}}class xe extends he{constructor(i,m){super(),this.type=i,this.value=m}get astNodeType(){return"bitcastExpr"}search(i){this.value.search(i)}}class be extends he{constructor(i){super(),this.index=i}search(i){this.index.search(i)}}class ve extends he{constructor(){super()}}class we extends ve{constructor(i,m){super(),this.operator=i,this.right=m}get astNodeType(){return"unaryOp"}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.right.search(i)}}class ke extends ve{constructor(i,m,g){super(),this.operator=i,this.left=m,this.right=g}get astNodeType(){return"binaryOp"}_getPromotedType(i,m){return i.name===m.name?i:"f32"===i.name||"f32"===m.name?re.f32:"u32"===i.name||"u32"===m.name?re.u32:re.i32}constEvaluate(i,m){return i.evalExpression(this,i.context)}search(i){this.left.search(i),this.right.search(i)}}class Ie extends S{constructor(i){super(),this.body=i}search(i){i(this),this.searchBlock(this.body,i)}}class Te extends he{constructor(){super()}get astNodeType(){return"default"}}class Se extends Ie{constructor(i,m){super(m),this.selectors=i}get astNodeType(){return"case"}search(i){this.searchBlock(this.body,i)}}class Ae extends Ie{constructor(i){super(i)}get astNodeType(){return"default"}search(i){this.searchBlock(this.body,i)}}class Ee extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"argument"}}class $e extends S{constructor(i,m){super(),this.condition=i,this.body=m}get astNodeType(){return"elseif"}search(i){this.condition.search(i),this.searchBlock(this.body,i)}}class Le extends S{constructor(i,m,g){super(),this.name=i,this.type=m,this.attributes=g}get astNodeType(){return"member"}}class Ce extends S{constructor(i,m){super(),this.name=i,this.value=m}get astNodeType(){return"attribute"}}class De{constructor(i,m){this.parent=null,this.typeInfo=i,this.parent=m,this.id=De._id++}clone(){throw`Clone:Not implemented for ${this.constructor.name}`}setDataValue(i,m,g,_){console.error(`SetDataValue:Not implemented for ${this.constructor.name}`)}getSubData(i,m,g){return console.error(`GetDataValue:Not implemented for ${this.constructor.name}`),null}toString(){return`<${this.typeInfo.getTypeName()}>`}}De._id=0;class Ne extends De{constructor(){super(new e("void",null),null)}toString(){return"void"}}Ne.void=new Ne;class Ve extends De{constructor(i){super(new r("pointer",i.typeInfo,null),null),this.reference=i}clone(){return this}setDataValue(i,m,g,_){this.reference.setDataValue(i,m,g,_)}getSubData(i,m,g){return m?this.reference.getSubData(i,m,g):this}toString(){return`&${this.reference.toString()}`}}class Oe extends De{constructor(i,m,g=null){super(m,g),i instanceof Int32Array||i instanceof Uint32Array||i instanceof Float32Array?this.data=i:"x32"===this.typeInfo.name?i-Math.floor(i)!=0?this.data=new Float32Array([i]):this.data=i>=0?new Uint32Array([i]):new Int32Array([i]):"i32"===this.typeInfo.name||"bool"===this.typeInfo.name?this.data=new Int32Array([i]):"u32"===this.typeInfo.name?this.data=new Uint32Array([i]):"f32"===this.typeInfo.name||"f16"===this.typeInfo.name?this.data=new Float32Array([i]):console.error("ScalarData2:Invalid type",m)}clone(){if(this.data instanceof Float32Array)return new Oe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Oe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Oe(new Uint32Array(this.data),this.typeInfo,null);throw"ScalarData:Invalid data type"}get value(){return this.data[0]}set value(i){this.data[0]=i}setDataValue(i,m,g,_){if(g)return void console.error("SetDataValue:Scalar data does not support postfix",g);if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);let b=m.data[0];"i32"===this.typeInfo.name||"u32"===this.typeInfo.name?b=Math.floor(b):"bool"===this.typeInfo.name&&(b=b?1:0),this.data[0]=b}getSubData(i,m,g){return m?(console.error("getSubData:Scalar data does not support postfix",m),null):this}toString(){return`${this.value}`}}function Be(i,m,g){const _=m.length;return 2===_?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec2i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec2u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec2h")):(console.error(`getSubData:Unknown format ${g}`),null):3===_?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec3i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec3u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec3h")):(console.error(`getSubData:Unknown format ${g}`),null):4===_?"f32"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4f")):"i32"===g||"bool"===g?new Fe(new Int32Array(m),i.getTypeInfo("vec4i")):"u32"===g?new Fe(new Uint32Array(m),i.getTypeInfo("vec4u")):"f16"===g?new Fe(new Float32Array(m),i.getTypeInfo("vec4h")):(console.error(`getSubData:Unknown format ${g}`),null):(console.error(`getSubData:Invalid vector size ${m.length}`),null)}class Fe extends De{constructor(i,m,g=null){if(super(m,g),i instanceof Float32Array||i instanceof Uint32Array||i instanceof Int32Array)this.data=i;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?this.data=new Float32Array(i):"vec2i"===m||"vec3i"===m||"vec4i"===m?this.data=new Int32Array(i):"vec2u"===m||"vec3u"===m||"vec4u"===m?this.data=new Uint32Array(i):"vec2h"===m||"vec3h"===m||"vec4h"===m?this.data=new Float32Array(i):"vec2b"===m||"vec3b"===m||"vec4b"===m?this.data=new Int32Array(i):"vec2"===m||"vec3"===m||"vec4"===m?this.data=new Float32Array(i):console.error(`VectorData:Invalid type ${m}`)}}clone(){if(this.data instanceof Float32Array)return new Fe(new Float32Array(this.data),this.typeInfo,null);if(this.data instanceof Int32Array)return new Fe(new Int32Array(this.data),this.typeInfo,null);if(this.data instanceof Uint32Array)return new Fe(new Uint32Array(this.data),this.typeInfo,null);throw"VectorData:Invalid data type"}setDataValue(i,m,g,_){g instanceof fe?console.error("TODO:Set vector postfix"):m instanceof Fe?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;let _=i.getTypeInfo("f32");if(this.typeInfo instanceof a)_=this.typeInfo.format||_;else{const m=this.typeInfo.name;"vec2f"===m||"vec3f"===m||"vec4f"===m?_=i.getTypeInfo("f32"):"vec2i"===m||"vec3i"===m||"vec4i"===m?_=i.getTypeInfo("i32"):"vec2b"===m||"vec3b"===m||"vec4b"===m?_=i.getTypeInfo("bool"):"vec2u"===m||"vec3u"===m||"vec4u"===m?_=i.getTypeInfo("u32"):"vec2h"===m||"vec3h"===m||"vec4h"===m?_=i.getTypeInfo("f16"):console.error(`GetSubData:Unknown type ${m}`)}let b=this;for(;null!==m&&null!==b;){if(m instanceof be){const y=m.index;let T=-1;if(y instanceof ge){if(!(y.value instanceof Oe))return console.error(`GetSubData:Invalid array index ${y.value}`),null;T=y.value.value}else{const m=i.evalExpression(y,g);if(!(m instanceof Oe))return console.error("GetSubData:Unknown index type",y),null;T=m.value}if(T<0||T>=b.data.length)return console.error("GetSubData:Index out of range",T),null;if(b.data instanceof Float32Array){const i=new Float32Array(b.data.buffer,b.data.byteOffset+4*T,1);return new Oe(i,_)}if(b.data instanceof Int32Array){const i=new Int32Array(b.data.buffer,b.data.byteOffset+4*T,1);return new Oe(i,_)}if(b.data instanceof Uint32Array){const i=new Uint32Array(b.data.buffer,b.data.byteOffset+4*T,1);return new Oe(i,_)}throw"GetSubData:Invalid data type"}if(!(m instanceof fe))return console.error("GetSubData:Unknown postfix",m),null;{const g=m.value.toLowerCase();if(1===g.length){let i=0;if("x"===g||"r"===g)i=0;else if("y"===g||"g"===g)i=1;else if("z"===g||"b"===g)i=2;else{if("w"!==g&&"a"!==g)return console.error(`GetSubData:Unknown member ${g}`),null;i=3}if(this.data instanceof Float32Array){let m=new Float32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,_,this)}if(this.data instanceof Int32Array){let m=new Int32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,_,this)}if(this.data instanceof Uint32Array){let m=new Uint32Array(this.data.buffer,this.data.byteOffset+4*i,1);return new Oe(m,_,this)}}const y=[];for(const i of g)"x"===i||"r"===i?y.push(this.data[0]):"y"===i||"g"===i?y.push(this.data[1]):"z"===i||"b"===i?y.push(this.data[2]):"w"===i||"a"===i?y.push(this.data[3]):console.error(`GetDataValue:Unknown member ${i}`);b=Be(i,y,_.name)}m=m.postfix}return b}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Me extends De{constructor(i,m,g=null){super(m,g),i instanceof Float32Array?this.data=i:this.data=new Float32Array(i)}clone(){return new Me(new Float32Array(this.data),this.typeInfo,null)}setDataValue(i,m,g,_){g instanceof fe?console.error("TODO:Set matrix postfix"):m instanceof Me?this.data=m.data:console.error("SetDataValue:Invalid value",m)}getSubData(i,m,g){if(null===m)return this;const _=this.typeInfo.name;if(i.getTypeInfo("f32"),this.typeInfo instanceof a)this.typeInfo.format;else if(_.endsWith("f"))i.getTypeInfo("f32");else if(_.endsWith("i"))i.getTypeInfo("i32");else if(_.endsWith("u"))i.getTypeInfo("u32");else{if(!_.endsWith("h"))return console.error(`GetDataValue:Unknown type ${_}`),null;i.getTypeInfo("f16")}if(m instanceof be){const b=m.index;let y=-1;if(b instanceof ge){if(!(b.value instanceof Oe))return console.error(`GetDataValue:Invalid array index ${b.value}`),null;y=b.value.value}else{const m=i.evalExpression(b,g);if(!(m instanceof Oe))return console.error("GetDataValue:Unknown index type",b),null;y=m.value}if(y<0||y>=this.data.length)return console.error("GetDataValue:Index out of range",y),null;const T=_.endsWith("h")?"h":"f";let w;if("mat2x2"===_||"mat2x2f"===_||"mat2x2h"===_||"mat3x2"===_||"mat3x2f"===_||"mat3x2h"===_||"mat4x2"===_||"mat4x2f"===_||"mat4x2h"===_)w=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+2*y*4,2),i.getTypeInfo(`vec2${T}`));else if("mat2x3"===_||"mat2x3f"===_||"mat2x3h"===_||"mat3x3"===_||"mat3x3f"===_||"mat3x3h"===_||"mat4x3"===_||"mat4x3f"===_||"mat4x3h"===_)w=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+3*y*4,3),i.getTypeInfo(`vec3${T}`));else{if("mat2x4"!==_&&"mat2x4f"!==_&&"mat2x4h"!==_&&"mat3x4"!==_&&"mat3x4f"!==_&&"mat3x4h"!==_&&"mat4x4"!==_&&"mat4x4f"!==_&&"mat4x4h"!==_)return console.error(`GetDataValue:Unknown type ${_}`),null;w=new Fe(new Float32Array(this.data.buffer,this.data.byteOffset+4*y*4,4),i.getTypeInfo(`vec4${T}`))}return m.postfix?w.getSubData(i,m.postfix,g):w}return console.error("GetDataValue:Invalid postfix",m),null}toString(){let i=`${this.data[0]}`;for(let m=1;m<this.data.length;++m)i+=`,${this.data[m]}`;return i}}class Ue extends De{constructor(i,m,g=0,_=null){super(m,_),this.buffer=i instanceof ArrayBuffer?i:i.buffer,this.offset=g}clone(){const i=new Uint8Array(new Uint8Array(this.buffer,this.offset,this.typeInfo.size));return new Ue(i.buffer,this.typeInfo,0,null)}setDataValue(i,m,g,_){if(null===m)return void console.log("setDataValue:NULL data.");let b=this.offset,y=this.typeInfo;for(;g;){if(g instanceof be)if(y instanceof s){const m=g.index;if(m instanceof ge){if(!(m.value instanceof Oe))return void console.error(`SetDataValue:Invalid index type ${m.value}`);b+=m.value.value*y.stride}else{const g=i.evalExpression(m,_);if(!(g instanceof Oe))return void console.error("SetDataValue:Unknown index type",m);b+=g.value*y.stride}y=y.format}else console.error(`SetDataValue:Type ${y.getTypeName()} is not an array`);else{if(!(g instanceof fe))return void console.error("SetDataValue:Unknown postfix type",g);{const i=g.value;if(y instanceof n){let m=!1;for(const g of y.members)if(g.name===i){b+=g.offset,y=g.type,m=!0;break}if(!m)return void console.error(`SetDataValue:Member ${i} not found`)}else if(y instanceof e){const g=y.getTypeName();let _=0;if("x"===i||"r"===i)_=0;else if("y"===i||"g"===i)_=1;else if("z"===i||"b"===i)_=2;else{if("w"!==i&&"a"!==i)return void console.error(`SetDataValue:Unknown member ${i}`);_=3}if(!(m instanceof Oe))return void console.error("SetDataValue:Invalid value",m);const T=m.value;return"vec2f"===g?void(new Float32Array(this.buffer,b,2)[_]=T):"vec3f"===g?void(new Float32Array(this.buffer,b,3)[_]=T):"vec4f"===g?void(new Float32Array(this.buffer,b,4)[_]=T):"vec2i"===g?void(new Int32Array(this.buffer,b,2)[_]=T):"vec3i"===g?void(new Int32Array(this.buffer,b,3)[_]=T):"vec4i"===g?void(new Int32Array(this.buffer,b,4)[_]=T):"vec2u"===g?void(new Uint32Array(this.buffer,b,2)[_]=T):"vec3u"===g?void(new Uint32Array(this.buffer,b,3)[_]=T):"vec4u"===g?void(new Uint32Array(this.buffer,b,4)[_]=T):void console.error(`SetDataValue:Type ${g} is not a struct`)}}}g=g.postfix}this.setData(i,m,y,b,_)}setData(i,m,g,_,b){const y=g.getTypeName();if("f32"!==y&&"f16"!==y)if("i32"!==y&&"atomic<i32>"!==y&&"x32"!==y)if("u32"!==y&&"atomic<u32>"!==y)if("bool"!==y)if("vec2f"!==y&&"vec2h"!==y)if("vec3f"!==y&&"vec3h"!==y)if("vec4f"!==y&&"vec4h"!==y)if("vec2i"!==y)if("vec3i"!==y)if("vec4i"!==y)if("vec2u"!==y)if("vec3u"!==y)if("vec4u"!==y)if("vec2b"!==y)if("vec3b"!==y)if("vec4b"!==y)if("mat2x2f"!==y&&"mat2x2h"!==y)if("mat2x3f"!==y&&"mat2x3h"!==y)if("mat2x4f"!==y&&"mat2x4h"!==y)if("mat3x2f"!==y&&"mat3x2h"!==y)if("mat3x3f"!==y&&"mat3x3h"!==y)if("mat3x4f"!==y&&"mat3x4h"!==y)if("mat4x2f"!==y&&"mat4x2h"!==y)if("mat4x3f"!==y&&"mat4x3h"!==y)if("mat4x4f"!==y&&"mat4x4h"!==y)if(m instanceof Ue){if(g===m.typeInfo)return void new Uint8Array(this.buffer,_,m.buffer.byteLength).set(new Uint8Array(m.buffer));console.error("SetDataValue:Type mismatch",y,m.typeInfo.getTypeName())}else console.error(`SetData:Unknown type ${y}`);else{const i=new Float32Array(this.buffer,_,16);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11],i[12]=m.data[12],i[13]=m.data[13],i[14]=m.data[14],i[15]=m.data[15]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15])}else{const i=new Float32Array(this.buffer,_,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,_,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,_,12);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8],i[9]=m.data[9],i[10]=m.data[10],i[11]=m.data[11]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11])}else{const i=new Float32Array(this.buffer,_,9);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7],i[8]=m.data[8]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8])}else{const i=new Float32Array(this.buffer,_,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,_,8);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5],i[6]=m.data[6],i[7]=m.data[7]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7])}else{const i=new Float32Array(this.buffer,_,6);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3],i[4]=m.data[4],i[5]=m.data[5]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5])}else{const i=new Float32Array(this.buffer,_,4);m instanceof Me?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Uint32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Uint32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Uint32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Int32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Int32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Int32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else{const i=new Float32Array(this.buffer,_,4);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2],i[3]=m.data[3]):(i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3])}else{const i=new Float32Array(this.buffer,_,3);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1],i[2]=m.data[2]):(i[0]=m[0],i[1]=m[1],i[2]=m[2])}else{const i=new Float32Array(this.buffer,_,2);m instanceof Fe?(i[0]=m.data[0],i[1]=m.data[1]):(i[0]=m[0],i[1]=m[1])}else m instanceof Oe&&(new Int32Array(this.buffer,_,1)[0]=m.value);else m instanceof Oe&&(new Uint32Array(this.buffer,_,1)[0]=m.value);else m instanceof Oe&&(new Int32Array(this.buffer,_,1)[0]=m.value);else m instanceof Oe&&(new Float32Array(this.buffer,_,1)[0]=m.value)}getSubData(i,m,g){var _,b,y;if(null===m)return this;let T=this.offset,w=this.typeInfo;for(;m;){if(m instanceof be){const _=m.index,b=_ instanceof he?i.evalExpression(_,g):_;let y=0;if(b instanceof Oe?y=b.value:"number"==typeof b?y=b:console.error("GetDataValue:Invalid index type",_),w instanceof s)T+=y*w.stride,w=w.format;else{const m=w.getTypeName();"mat4x4"===m||"mat4x4f"===m||"mat4x4h"===m?(T+=16*y,w=i.getTypeInfo("vec4f")):console.error(`getDataValue:Type ${w.getTypeName()} is not an array`)}}else{if(!(m instanceof fe))return console.error("GetDataValue:Unknown postfix type",m),null;{const g=m.value;if(w instanceof n){let i=!1;for(const m of w.members)if(m.name===g){T+=m.offset,w=m.type,i=!0;break}if(!i)return console.error(`GetDataValue:Member ${g} not found`),null}else if(w instanceof e){const m=w.getTypeName();if("vec2f"===m||"vec3f"===m||"vec4f"===m||"vec2i"===m||"vec3i"===m||"vec4i"===m||"vec2u"===m||"vec3u"===m||"vec4u"===m||"vec2b"===m||"vec3b"===m||"vec4b"===m||"vec2h"===m||"vec3h"===m||"vec4h"===m||"vec2"===m||"vec3"===m||"vec4"===m){if(g.length>0&&g.length<5){let _="f";const b=[];for(let y=0;y<g.length;++y){const w=g[y].toLowerCase();let P=0;if("x"===w||"r"===w)P=0;else if("y"===w||"g"===w)P=1;else if("z"===w||"b"===w)P=2;else{if("w"!==w&&"a"!==w)return console.error(`Unknown member ${g}`),null;P=3}if(1===g.length){if(m.endsWith("f"))return this.buffer.byteLength<T+4*P+4?(console.log("Insufficient buffer data"),null):new Oe(new Float32Array(this.buffer,T+4*P,1),i.getTypeInfo("f32"),this);if(m.endsWith("h"))return new Oe(new Float32Array(this.buffer,T+4*P,1),i.getTypeInfo("f16"),this);if(m.endsWith("i"))return new Oe(new Int32Array(this.buffer,T+4*P,1),i.getTypeInfo("i32"),this);if(m.endsWith("b"))return new Oe(new Int32Array(this.buffer,T+4*P,1),i.getTypeInfo("bool"),this);if(m.endsWith("u"))return new Oe(new Uint32Array(this.buffer,T+4*P,1),i.getTypeInfo("i32"),this)}if("vec2f"===m)b.push(new Float32Array(this.buffer,T,2)[P]);else if("vec3f"===m){if(T+12>=this.buffer.byteLength)return console.log("Insufficient buffer data"),null;const i=new Float32Array(this.buffer,T,3);b.push(i[P])}else if("vec4f"===m)b.push(new Float32Array(this.buffer,T,4)[P]);else if("vec2i"===m)_="i",b.push(new Int32Array(this.buffer,T,2)[P]);else if("vec3i"===m)_="i",b.push(new Int32Array(this.buffer,T,3)[P]);else if("vec4i"===m)_="i",b.push(new Int32Array(this.buffer,T,4)[P]);else if("vec2u"===m){_="u";const i=new Uint32Array(this.buffer,T,2);b.push(i[P])}else"vec3u"===m?(_="u",b.push(new Uint32Array(this.buffer,T,3)[P])):"vec4u"===m&&(_="u",b.push(new Uint32Array(this.buffer,T,4)[P]))}return 2===b.length?w=i.getTypeInfo(`vec2${_}`):3===b.length?w=i.getTypeInfo(`vec3${_}`):4===b.length?w=i.getTypeInfo(`vec4${_}`):console.error(`GetDataValue:Invalid vector length ${b.length}`),new Fe(b,w,null)}return console.error(`GetDataValue:Unknown member ${g}`),null}return console.error(`GetDataValue:Type ${m} is not a struct`),null}}}m=m.postfix}const P=w.getTypeName();return"f32"===P?new Oe(new Float32Array(this.buffer,T,1),w,this):"i32"===P?new Oe(new Int32Array(this.buffer,T,1),w,this):"u32"===P?new Oe(new Uint32Array(this.buffer,T,1),w,this):"vec2f"===P?new Fe(new Float32Array(this.buffer,T,2),w,this):"vec3f"===P?new Fe(new Float32Array(this.buffer,T,3),w,this):"vec4f"===P?new Fe(new Float32Array(this.buffer,T,4),w,this):"vec2i"===P?new Fe(new Int32Array(this.buffer,T,2),w,this):"vec3i"===P?new Fe(new Int32Array(this.buffer,T,3),w,this):"vec4i"===P?new Fe(new Int32Array(this.buffer,T,4),w,this):"vec2u"===P?new Fe(new Uint32Array(this.buffer,T,2),w,this):"vec3u"===P?new Fe(new Uint32Array(this.buffer,T,3),w,this):"vec4u"===P?new Fe(new Uint32Array(this.buffer,T,4),w,this):w instanceof a&&"atomic"===w.name?"u32"===(null===(_=w.format)||void 0===_?void 0:_.name)?new Oe(new Uint32Array(this.buffer,T,1)[0],w.format,this):"i32"===(null===(b=w.format)||void 0===b?void 0:b.name)?new Oe(new Int32Array(this.buffer,T,1)[0],w.format,this):(console.error(`GetDataValue:Invalid atomic format ${null===(y=w.format)||void 0===y?void 0:y.name}`),null):new Ue(this.buffer,w,T,this)}toString(){let i="";if(this.typeInfo instanceof s)if("f32"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("i32"===this.typeInfo.format.name){const m=new Int32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("u32"===this.typeInfo.format.name){const m=new Uint32Array(this.buffer,this.offset);i=`[${m[0]}`;for(let g=1;g<m.length;++g)i+=`,${m[g]}`}else if("vec2f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]}]`;for(let g=1;g<m.length/2;++g)i+=`,[${m[2*g]},${m[2*g+1]}]`}else if("vec3f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]}]`}else if("vec4f"===this.typeInfo.format.name){const m=new Float32Array(this.buffer,this.offset);i=`[${m[0]},${m[1]},${m[2]},${m[3]}]`;for(let g=4;g<m.length;g+=4)i+=`,[${m[g]},${m[g+1]},${m[g+2]},${m[g+3]}]`}else i="[...]";else this.typeInfo instanceof n?i+="{...}":i="[...]";return i}}class Pe extends De{constructor(i,m,g,_){super(m,null),this.data=i,this.descriptor=g,this.view=_}clone(){return new Pe(this.data,this.typeInfo,this.descriptor,this.view)}get width(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>0?null!==(i=g[0])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.width)&&void 0!==m?m:0}get height(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>1?null!==(i=g[1])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.height)&&void 0!==m?m:0}get depthOrArrayLayers(){var i,m;const g=this.descriptor.size;return g instanceof Array&&g.length>2?null!==(i=g[2])&&void 0!==i?i:0:g instanceof Object&&null!==(m=g.depthOrArrayLayers)&&void 0!==m?m:0}get format(){var i;return this.descriptor&&null!==(i=this.descriptor.format)&&void 0!==i?i:"rgba8unorm"}get sampleCount(){var i;return this.descriptor&&null!==(i=this.descriptor.sampleCount)&&void 0!==i?i:1}get mipLevelCount(){var i;return this.descriptor&&null!==(i=this.descriptor.mipLevelCount)&&void 0!==i?i:1}get dimension(){var i;return this.descriptor&&null!==(i=this.descriptor.dimension)&&void 0!==i?i:"2d"}getMipLevelSize(i){if(i>=this.mipLevelCount)return[0,0,0];const m=[this.width,this.height,this.depthOrArrayLayers];for(let g=0;g<m.length;++g)m[g]=Math.max(1,m[g]>>i);return m}get texelByteSize(){const i=this.format,m=ur[i];return m?m.isDepthStencil?4:m.bytesPerBlock:0}get bytesPerRow(){return this.width*this.texelByteSize}get isDepthStencil(){const i=this.format,m=ur[i];return!!m&&m.isDepthStencil}getGpuSize(){const i=this.format,m=ur[i],g=this.width;if(!i||g<=0||!m)return-1;const _=this.height,b=this.depthOrArrayLayers,y=this.dimension;return g/m.blockWidth*("1d"===y?1:_/m.blockHeight)*m.bytesPerBlock*b}getPixel(i,m,g=0,_=0){const b=this.texelByteSize,y=this.bytesPerRow,T=this.height,w=this.data[_];return function(i,m,g,_,b,y,T,w,P){const $=_*(T>>=b)*(y>>=b)+g*T+m*w;switch(P){case"r8unorm":return[k(i,$,"8unorm",1)[0]];case"r8snorm":return[k(i,$,"8snorm",1)[0]];case"r8uint":return[k(i,$,"8uint",1)[0]];case"r8sint":return[k(i,$,"8sint",1)[0]];case"rg8unorm":{const m=k(i,$,"8unorm",2);return[m[0],m[1]]}case"rg8snorm":{const m=k(i,$,"8snorm",2);return[m[0],m[1]]}case"rg8uint":{const m=k(i,$,"8uint",2);return[m[0],m[1]]}case"rg8sint":{const m=k(i,$,"8sint",2);return[m[0],m[1]]}case"rgba8unorm-srgb":case"rgba8unorm":{const m=k(i,$,"8unorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8snorm":{const m=k(i,$,"8snorm",4);return[m[0],m[1],m[2],m[3]]}case"rgba8uint":{const m=k(i,$,"8uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba8sint":{const m=k(i,$,"8sint",4);return[m[0],m[1],m[2],m[3]]}case"bgra8unorm-srgb":case"bgra8unorm":{const m=k(i,$,"8unorm",4);return[m[2],m[1],m[0],m[3]]}case"r16uint":return[k(i,$,"16uint",1)[0]];case"r16sint":return[k(i,$,"16sint",1)[0]];case"r16float":return[k(i,$,"16float",1)[0]];case"rg16uint":{const m=k(i,$,"16uint",2);return[m[0],m[1]]}case"rg16sint":{const m=k(i,$,"16sint",2);return[m[0],m[1]]}case"rg16float":{const m=k(i,$,"16float",2);return[m[0],m[1]]}case"rgba16uint":{const m=k(i,$,"16uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16sint":{const m=k(i,$,"16sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba16float":{const m=k(i,$,"16float",4);return[m[0],m[1],m[2],m[3]]}case"r32uint":return[k(i,$,"32uint",1)[0]];case"r32sint":return[k(i,$,"32sint",1)[0]];case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return[k(i,$,"32float",1)[0]];case"rg32uint":{const m=k(i,$,"32uint",2);return[m[0],m[1]]}case"rg32sint":{const m=k(i,$,"32sint",2);return[m[0],m[1]]}case"rg32float":{const m=k(i,$,"32float",2);return[m[0],m[1]]}case"rgba32uint":{const m=k(i,$,"32uint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32sint":{const m=k(i,$,"32sint",4);return[m[0],m[1],m[2],m[3]]}case"rgba32float":{const m=k(i,$,"32float",4);return[m[0],m[1],m[2],m[3]]}case"rg11b10ufloat":{const m=new Uint32Array(i.buffer,$,1)[0],g=(4192256&m)>>11,_=(4290772992&m)>>22;return[v(2047&m),v(g),function(i){const m=112+(i>>5&31)<<23|(31&i)<<18;return sr[0]=m,or[0]}(_),1]}}return null}(new Uint8Array(w),i,m,g,_,T,y,b,this.format)}setPixel(i,m,g,_,b){const y=this.texelByteSize,T=this.bytesPerRow,w=this.height,P=this.data[_];!function(i,m,g,_,b,y,T,w,P,$){const H=_*(T>>=b)*(y>>=b)+g*T+m*w;switch(P){case"r8unorm":return void I(i,H,"8unorm",1,$);case"r8snorm":return void I(i,H,"8snorm",1,$);case"r8uint":return void I(i,H,"8uint",1,$);case"r8sint":return void I(i,H,"8sint",1,$);case"rg8unorm":return void I(i,H,"8unorm",2,$);case"rg8snorm":return void I(i,H,"8snorm",2,$);case"rg8uint":return void I(i,H,"8uint",2,$);case"rg8sint":return void I(i,H,"8sint",2,$);case"rgba8unorm-srgb":case"rgba8unorm":case"bgra8unorm-srgb":case"bgra8unorm":return void I(i,H,"8unorm",4,$);case"rgba8snorm":return void I(i,H,"8snorm",4,$);case"rgba8uint":return void I(i,H,"8uint",4,$);case"rgba8sint":return void I(i,H,"8sint",4,$);case"r16uint":return void I(i,H,"16uint",1,$);case"r16sint":return void I(i,H,"16sint",1,$);case"r16float":return void I(i,H,"16float",1,$);case"rg16uint":return void I(i,H,"16uint",2,$);case"rg16sint":return void I(i,H,"16sint",2,$);case"rg16float":return void I(i,H,"16float",2,$);case"rgba16uint":return void I(i,H,"16uint",4,$);case"rgba16sint":return void I(i,H,"16sint",4,$);case"rgba16float":return void I(i,H,"16float",4,$);case"r32uint":return void I(i,H,"32uint",1,$);case"r32sint":return void I(i,H,"32sint",1,$);case"depth16unorm":case"depth24plus":case"depth24plus-stencil8":case"depth32float":case"depth32float-stencil8":case"r32float":return void I(i,H,"32float",1,$);case"rg32uint":return void I(i,H,"32uint",2,$);case"rg32sint":return void I(i,H,"32sint",2,$);case"rg32float":return void I(i,H,"32float",2,$);case"rgba32uint":return void I(i,H,"32uint",4,$);case"rgba32sint":return void I(i,H,"32sint",4,$);case"rgba32float":return void I(i,H,"32float",4,$);case"rg11b10ufloat":console.error("TODO:rg11b10ufloat not supported for writing")}}(new Uint8Array(P),i,m,g,_,w,T,y,this.format,b)}}(i=>{i[i.token=0]="token",i[i.keyword=1]="keyword",i[i.reserved=2]="reserved"})(dr||(dr={}));class We{constructor(i,m,g){this.name=i,this.type=m,this.rule=g}toString(){return this.name}}class qe{}fr=qe,qe.none=new We("",dr.reserved,""),qe.eof=new We("EOF",dr.token,""),qe.reserved={asm:new We("asm",dr.reserved,"asm"),bf16:new We("bf16",dr.reserved,"bf16"),do:new We("do",dr.reserved,"do"),enum:new We("enum",dr.reserved,"enum"),f16:new We("f16",dr.reserved,"f16"),f64:new We("f64",dr.reserved,"f64"),handle:new We("handle",dr.reserved,"handle"),i8:new We("i8",dr.reserved,"i8"),i16:new We("i16",dr.reserved,"i16"),i64:new We("i64",dr.reserved,"i64"),mat:new We("mat",dr.reserved,"mat"),premerge:new We("premerge",dr.reserved,"premerge"),regardless:new We("regardless",dr.reserved,"regardless"),typedef:new We("typedef",dr.reserved,"typedef"),u8:new We("u8",dr.reserved,"u8"),u16:new We("u16",dr.reserved,"u16"),u64:new We("u64",dr.reserved,"u64"),unless:new We("unless",dr.reserved,"unless"),using:new We("using",dr.reserved,"using"),vec:new We("vec",dr.reserved,"vec"),void:new We("void",dr.reserved,"void")},qe.keywords={array:new We("array",dr.keyword,"array"),atomic:new We("atomic",dr.keyword,"atomic"),bool:new We("bool",dr.keyword,"bool"),f32:new We("f32",dr.keyword,"f32"),i32:new We("i32",dr.keyword,"i32"),mat2x2:new We("mat2x2",dr.keyword,"mat2x2"),mat2x3:new We("mat2x3",dr.keyword,"mat2x3"),mat2x4:new We("mat2x4",dr.keyword,"mat2x4"),mat3x2:new We("mat3x2",dr.keyword,"mat3x2"),mat3x3:new We("mat3x3",dr.keyword,"mat3x3"),mat3x4:new We("mat3x4",dr.keyword,"mat3x4"),mat4x2:new We("mat4x2",dr.keyword,"mat4x2"),mat4x3:new We("mat4x3",dr.keyword,"mat4x3"),mat4x4:new We("mat4x4",dr.keyword,"mat4x4"),ptr:new We("ptr",dr.keyword,"ptr"),sampler:new We("sampler",dr.keyword,"sampler"),sampler_comparison:new We("sampler_comparison",dr.keyword,"sampler_comparison"),struct:new We("struct",dr.keyword,"struct"),texture_1d:new We("texture_1d",dr.keyword,"texture_1d"),texture_2d:new We("texture_2d",dr.keyword,"texture_2d"),texture_2d_array:new We("texture_2d_array",dr.keyword,"texture_2d_array"),texture_3d:new We("texture_3d",dr.keyword,"texture_3d"),texture_cube:new We("texture_cube",dr.keyword,"texture_cube"),texture_cube_array:new We("texture_cube_array",dr.keyword,"texture_cube_array"),texture_multisampled_2d:new We("texture_multisampled_2d",dr.keyword,"texture_multisampled_2d"),texture_storage_1d:new We("texture_storage_1d",dr.keyword,"texture_storage_1d"),texture_storage_2d:new We("texture_storage_2d",dr.keyword,"texture_storage_2d"),texture_storage_2d_array:new We("texture_storage_2d_array",dr.keyword,"texture_storage_2d_array"),texture_storage_3d:new We("texture_storage_3d",dr.keyword,"texture_storage_3d"),texture_depth_2d:new We("texture_depth_2d",dr.keyword,"texture_depth_2d"),texture_depth_2d_array:new We("texture_depth_2d_array",dr.keyword,"texture_depth_2d_array"),texture_depth_cube:new We("texture_depth_cube",dr.keyword,"texture_depth_cube"),texture_depth_cube_array:new We("texture_depth_cube_array",dr.keyword,"texture_depth_cube_array"),texture_depth_multisampled_2d:new We("texture_depth_multisampled_2d",dr.keyword,"texture_depth_multisampled_2d"),texture_external:new We("texture_external",dr.keyword,"texture_external"),u32:new We("u32",dr.keyword,"u32"),vec2:new We("vec2",dr.keyword,"vec2"),vec3:new We("vec3",dr.keyword,"vec3"),vec4:new We("vec4",dr.keyword,"vec4"),bitcast:new We("bitcast",dr.keyword,"bitcast"),block:new We("block",dr.keyword,"block"),break:new We("break",dr.keyword,"break"),case:new We("case",dr.keyword,"case"),continue:new We("continue",dr.keyword,"continue"),continuing:new We("continuing",dr.keyword,"continuing"),default:new We("default",dr.keyword,"default"),diagnostic:new We("diagnostic",dr.keyword,"diagnostic"),discard:new We("discard",dr.keyword,"discard"),else:new We("else",dr.keyword,"else"),enable:new We("enable",dr.keyword,"enable"),fallthrough:new We("fallthrough",dr.keyword,"fallthrough"),false:new We("false",dr.keyword,"false"),fn:new We("fn",dr.keyword,"fn"),for:new We("for",dr.keyword,"for"),function:new We("function",dr.keyword,"function"),if:new We("if",dr.keyword,"if"),let:new We("let",dr.keyword,"let"),const:new We("const",dr.keyword,"const"),loop:new We("loop",dr.keyword,"loop"),while:new We("while",dr.keyword,"while"),private:new We("private",dr.keyword,"private"),read:new We("read",dr.keyword,"read"),read_write:new We("read_write",dr.keyword,"read_write"),return:new We("return",dr.keyword,"return"),requires:new We("requires",dr.keyword,"requires"),storage:new We("storage",dr.keyword,"storage"),switch:new We("switch",dr.keyword,"switch"),true:new We("true",dr.keyword,"true"),alias:new We("alias",dr.keyword,"alias"),type:new We("type",dr.keyword,"type"),uniform:new We("uniform",dr.keyword,"uniform"),var:new We("var",dr.keyword,"var"),override:new We("override",dr.keyword,"override"),workgroup:new We("workgroup",dr.keyword,"workgroup"),write:new We("write",dr.keyword,"write"),r8unorm:new We("r8unorm",dr.keyword,"r8unorm"),r8snorm:new We("r8snorm",dr.keyword,"r8snorm"),r8uint:new We("r8uint",dr.keyword,"r8uint"),r8sint:new We("r8sint",dr.keyword,"r8sint"),r16uint:new We("r16uint",dr.keyword,"r16uint"),r16sint:new We("r16sint",dr.keyword,"r16sint"),r16float:new We("r16float",dr.keyword,"r16float"),rg8unorm:new We("rg8unorm",dr.keyword,"rg8unorm"),rg8snorm:new We("rg8snorm",dr.keyword,"rg8snorm"),rg8uint:new We("rg8uint",dr.keyword,"rg8uint"),rg8sint:new We("rg8sint",dr.keyword,"rg8sint"),r32uint:new We("r32uint",dr.keyword,"r32uint"),r32sint:new We("r32sint",dr.keyword,"r32sint"),r32float:new We("r32float",dr.keyword,"r32float"),rg16uint:new We("rg16uint",dr.keyword,"rg16uint"),rg16sint:new We("rg16sint",dr.keyword,"rg16sint"),rg16float:new We("rg16float",dr.keyword,"rg16float"),rgba8unorm:new We("rgba8unorm",dr.keyword,"rgba8unorm"),rgba8unorm_srgb:new We("rgba8unorm_srgb",dr.keyword,"rgba8unorm_srgb"),rgba8snorm:new We("rgba8snorm",dr.keyword,"rgba8snorm"),rgba8uint:new We("rgba8uint",dr.keyword,"rgba8uint"),rgba8sint:new We("rgba8sint",dr.keyword,"rgba8sint"),bgra8unorm:new We("bgra8unorm",dr.keyword,"bgra8unorm"),bgra8unorm_srgb:new We("bgra8unorm_srgb",dr.keyword,"bgra8unorm_srgb"),rgb10a2unorm:new We("rgb10a2unorm",dr.keyword,"rgb10a2unorm"),rg11b10float:new We("rg11b10float",dr.keyword,"rg11b10float"),rg32uint:new We("rg32uint",dr.keyword,"rg32uint"),rg32sint:new We("rg32sint",dr.keyword,"rg32sint"),rg32float:new We("rg32float",dr.keyword,"rg32float"),rgba16uint:new We("rgba16uint",dr.keyword,"rgba16uint"),rgba16sint:new We("rgba16sint",dr.keyword,"rgba16sint"),rgba16float:new We("rgba16float",dr.keyword,"rgba16float"),rgba32uint:new We("rgba32uint",dr.keyword,"rgba32uint"),rgba32sint:new We("rgba32sint",dr.keyword,"rgba32sint"),rgba32float:new We("rgba32float",dr.keyword,"rgba32float"),static_assert:new We("static_assert",dr.keyword,"static_assert")},qe.tokens={decimal_float_literal:new We("decimal_float_literal",dr.token,/((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/),hex_float_literal:new We("hex_float_literal",dr.token,/-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/),int_literal:new We("int_literal",dr.token,/-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),uint_literal:new We("uint_literal",dr.token,/0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),name:new We("name",dr.token,/([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u),ident:new We("ident",dr.token,/[_a-zA-Z][0-9a-zA-Z_]*/),and:new We("and",dr.token,"&"),and_and:new We("and_and",dr.token,"&&"),arrow:new We("arrow ",dr.token,"->"),attr:new We("attr",dr.token,"@"),forward_slash:new We("forward_slash",dr.token,"/"),bang:new We("bang",dr.token,"!"),bracket_left:new We("bracket_left",dr.token,"["),bracket_right:new We("bracket_right",dr.token,"]"),brace_left:new We("brace_left",dr.token,"{"),brace_right:new We("brace_right",dr.token,"}"),colon:new We("colon",dr.token,":"),comma:new We("comma",dr.token,","),equal:new We("equal",dr.token,"="),equal_equal:new We("equal_equal",dr.token,"=="),not_equal:new We("not_equal",dr.token,"!="),greater_than:new We("greater_than",dr.token,">"),greater_than_equal:new We("greater_than_equal",dr.token,">="),shift_right:new We("shift_right",dr.token,">>"),less_than:new We("less_than",dr.token,"<"),less_than_equal:new We("less_than_equal",dr.token,"<="),shift_left:new We("shift_left",dr.token,"<<"),modulo:new We("modulo",dr.token,"%"),minus:new We("minus",dr.token,"-"),minus_minus:new We("minus_minus",dr.token,"--"),period:new We("period",dr.token,"."),plus:new We("plus",dr.token,"+"),plus_plus:new We("plus_plus",dr.token,"++"),or:new We("or",dr.token,"|"),or_or:new We("or_or",dr.token,"||"),paren_left:new We("paren_left",dr.token,"("),paren_right:new We("paren_right",dr.token,")"),semicolon:new We("semicolon",dr.token,";"),star:new We("star",dr.token,"*"),tilde:new We("tilde",dr.token,"~"),underscore:new We("underscore",dr.token,"_"),xor:new We("xor",dr.token,"^"),plus_equal:new We("plus_equal",dr.token,"+="),minus_equal:new We("minus_equal",dr.token,"-="),times_equal:new We("times_equal",dr.token,"*="),division_equal:new We("division_equal",dr.token,"/="),modulo_equal:new We("modulo_equal",dr.token,"%="),and_equal:new We("and_equal",dr.token,"&="),or_equal:new We("or_equal",dr.token,"|="),xor_equal:new We("xor_equal",dr.token,"^="),shift_right_equal:new We("shift_right_equal",dr.token,">>="),shift_left_equal:new We("shift_left_equal",dr.token,"<<=")},qe.simpleTokens={"@":fr.tokens.attr,"{":fr.tokens.brace_left,"}":fr.tokens.brace_right,":":fr.tokens.colon,",":fr.tokens.comma,"(":fr.tokens.paren_left,")":fr.tokens.paren_right,";":fr.tokens.semicolon},qe.literalTokens={"&":fr.tokens.and,"&&":fr.tokens.and_and,"->":fr.tokens.arrow,"/":fr.tokens.forward_slash,"!":fr.tokens.bang,"[":fr.tokens.bracket_left,"]":fr.tokens.bracket_right,"=":fr.tokens.equal,"==":fr.tokens.equal_equal,"!=":fr.tokens.not_equal,">":fr.tokens.greater_than,">=":fr.tokens.greater_than_equal,">>":fr.tokens.shift_right,"<":fr.tokens.less_than,"<=":fr.tokens.less_than_equal,"<<":fr.tokens.shift_left,"%":fr.tokens.modulo,"-":fr.tokens.minus,"--":fr.tokens.minus_minus,".":fr.tokens.period,"+":fr.tokens.plus,"++":fr.tokens.plus_plus,"|":fr.tokens.or,"||":fr.tokens.or_or,"*":fr.tokens.star,"~":fr.tokens.tilde,_:fr.tokens.underscore,"^":fr.tokens.xor,"+=":fr.tokens.plus_equal,"-=":fr.tokens.minus_equal,"*=":fr.tokens.times_equal,"/=":fr.tokens.division_equal,"%=":fr.tokens.modulo_equal,"&=":fr.tokens.and_equal,"|=":fr.tokens.or_equal,"^=":fr.tokens.xor_equal,">>=":fr.tokens.shift_right_equal,"<<=":fr.tokens.shift_left_equal},qe.regexTokens={decimal_float_literal:fr.tokens.decimal_float_literal,hex_float_literal:fr.tokens.hex_float_literal,int_literal:fr.tokens.int_literal,uint_literal:fr.tokens.uint_literal,ident:fr.tokens.ident},qe.storage_class=[fr.keywords.function,fr.keywords.private,fr.keywords.workgroup,fr.keywords.uniform,fr.keywords.storage],qe.access_mode=[fr.keywords.read,fr.keywords.write,fr.keywords.read_write],qe.sampler_type=[fr.keywords.sampler,fr.keywords.sampler_comparison],qe.sampled_texture_type=[fr.keywords.texture_1d,fr.keywords.texture_2d,fr.keywords.texture_2d_array,fr.keywords.texture_3d,fr.keywords.texture_cube,fr.keywords.texture_cube_array],qe.multisampled_texture_type=[fr.keywords.texture_multisampled_2d],qe.storage_texture_type=[fr.keywords.texture_storage_1d,fr.keywords.texture_storage_2d,fr.keywords.texture_storage_2d_array,fr.keywords.texture_storage_3d],qe.depth_texture_type=[fr.keywords.texture_depth_2d,fr.keywords.texture_depth_2d_array,fr.keywords.texture_depth_cube,fr.keywords.texture_depth_cube_array,fr.keywords.texture_depth_multisampled_2d],qe.texture_external_type=[fr.keywords.texture_external],qe.any_texture_type=[...fr.sampled_texture_type,...fr.multisampled_texture_type,...fr.storage_texture_type,...fr.depth_texture_type,...fr.texture_external_type],qe.texel_format=[fr.keywords.r8unorm,fr.keywords.r8snorm,fr.keywords.r8uint,fr.keywords.r8sint,fr.keywords.r16uint,fr.keywords.r16sint,fr.keywords.r16float,fr.keywords.rg8unorm,fr.keywords.rg8snorm,fr.keywords.rg8uint,fr.keywords.rg8sint,fr.keywords.r32uint,fr.keywords.r32sint,fr.keywords.r32float,fr.keywords.rg16uint,fr.keywords.rg16sint,fr.keywords.rg16float,fr.keywords.rgba8unorm,fr.keywords.rgba8unorm_srgb,fr.keywords.rgba8snorm,fr.keywords.rgba8uint,fr.keywords.rgba8sint,fr.keywords.bgra8unorm,fr.keywords.bgra8unorm_srgb,fr.keywords.rgb10a2unorm,fr.keywords.rg11b10float,fr.keywords.rg32uint,fr.keywords.rg32sint,fr.keywords.rg32float,fr.keywords.rgba16uint,fr.keywords.rgba16sint,fr.keywords.rgba16float,fr.keywords.rgba32uint,fr.keywords.rgba32sint,fr.keywords.rgba32float],qe.const_literal=[fr.tokens.int_literal,fr.tokens.uint_literal,fr.tokens.decimal_float_literal,fr.tokens.hex_float_literal,fr.keywords.true,fr.keywords.false],qe.literal_or_ident=[fr.tokens.ident,fr.tokens.int_literal,fr.tokens.uint_literal,fr.tokens.decimal_float_literal,fr.tokens.hex_float_literal,fr.tokens.name],qe.element_count_expression=[fr.tokens.int_literal,fr.tokens.uint_literal,fr.tokens.ident],qe.template_types=[fr.keywords.vec2,fr.keywords.vec3,fr.keywords.vec4,fr.keywords.mat2x2,fr.keywords.mat2x3,fr.keywords.mat2x4,fr.keywords.mat3x2,fr.keywords.mat3x3,fr.keywords.mat3x4,fr.keywords.mat4x2,fr.keywords.mat4x3,fr.keywords.mat4x4,fr.keywords.atomic,fr.keywords.bitcast,...fr.any_texture_type],qe.attribute_name=[fr.tokens.ident,fr.keywords.block,fr.keywords.diagnostic],qe.assignment_operators=[fr.tokens.equal,fr.tokens.plus_equal,fr.tokens.minus_equal,fr.tokens.times_equal,fr.tokens.division_equal,fr.tokens.modulo_equal,fr.tokens.and_equal,fr.tokens.or_equal,fr.tokens.xor_equal,fr.tokens.shift_right_equal,fr.tokens.shift_left_equal],qe.increment_operators=[fr.tokens.plus_plus,fr.tokens.minus_minus];class He{constructor(i,m,g,_,b){this.type=i,this.lexeme=m,this.line=g,this.start=_,this.end=b}toString(){return this.lexeme}isTemplateType(){return-1!=qe.template_types.indexOf(this.type)}isArrayType(){return this.type==qe.keywords.array}isArrayOrTemplateType(){return this.isArrayType()||this.isTemplateType()}}class ze{constructor(i){this._tokens=[],this._start=0,this._current=0,this._line=1,this._source=null!=i?i:""}scanTokens(){for(;!this._isAtEnd();)if(this._start=this._current,!this.scanToken())throw`Invalid syntax at line ${this._line}`;return this._tokens.push(new He(qe.eof,"",this._line,this._current,this._current)),this._tokens}scanToken(){let i=this._advance();if("\n"==i)return this._line++,!0;if(this._isWhitespace(i))return!0;if("/"==i){if("/"==this._peekAhead()){for(;"\n"!=i;){if(this._isAtEnd())return!0;i=this._advance()}return this._line++,!0}if("*"==this._peekAhead()){this._advance();let m=1;for(;m>0;){if(this._isAtEnd())return!0;if(i=this._advance(),"\n"==i)this._line++;else if("*"==i){if("/"==this._peekAhead()&&(this._advance(),m--,0==m))return!0}else"/"==i&&"*"==this._peekAhead()&&(this._advance(),m++)}return!0}}const m=qe.simpleTokens[i];if(m)return this._addToken(m),!0;let g=qe.none;const _=this._isAlpha(i),b="_"===i;if(this._isAlphaNumeric(i)){let m=this._peekAhead();for(;this._isAlphaNumeric(m);)i+=this._advance(),m=this._peekAhead()}if(_){const m=qe.keywords[i];if(m)return this._addToken(m),!0}if(_||b)return this._addToken(qe.tokens.ident),!0;for(;;){let m=this._findType(i);const _=this._peekAhead();if("-"==i&&this._tokens.length>0){if("="==_)return this._current++,i+=_,this._addToken(qe.tokens.minus_equal),!0;if("-"==_)return this._current++,i+=_,this._addToken(qe.tokens.minus_minus),!0;const g=this._tokens.length-1;if((-1!=qe.literal_or_ident.indexOf(this._tokens[g].type)||this._tokens[g].type==qe.tokens.paren_right)&&">"!=_)return this._addToken(m),!0}if(">"==i&&(">"==_||"="==_)){let i=!1,g=this._tokens.length-1;for(let m=0;m<5&&g>=0&&-1===qe.assignment_operators.indexOf(this._tokens[g].type);++m,--g)if(this._tokens[g].type===qe.tokens.less_than){g>0&&this._tokens[g-1].isArrayOrTemplateType()&&(i=!0);break}if(i)return this._addToken(m),!0}if(m===qe.none){let _=i,b=0;const y=2;for(let i=0;i<y;++i)if(_+=this._peekAhead(i),m=this._findType(_),m!==qe.none){b=i;break}if(m===qe.none)return g!==qe.none&&(this._current--,this._addToken(g),!0);i=_,this._current+=b+1}if(g=m,this._isAtEnd())break;i+=this._advance()}return g!==qe.none&&(this._addToken(g),!0)}_findType(i){for(const m in qe.regexTokens){const g=qe.regexTokens[m];if(this._match(i,g.rule))return g}return qe.literalTokens[i]||qe.none}_match(i,m){const g=m.exec(i);return g&&0==g.index&&g[0]==i}_isAtEnd(){return this._current>=this._source.length}_isAlpha(i){return!this._isNumeric(i)&&!this._isWhitespace(i)&&"_"!==i&&"."!==i&&"("!==i&&")"!==i&&"["!==i&&"]"!==i&&"{"!==i&&"}"!==i&&","!==i&&";"!==i&&":"!==i&&"="!==i&&"!"!==i&&"<"!==i&&">"!==i&&"+"!==i&&"-"!==i&&"*"!==i&&"/"!==i&&"%"!==i&&"&"!==i&&"|"!==i&&"^"!==i&&"~"!==i&&"@"!==i&&"#"!==i&&"?"!==i&&"'"!==i&&"`"!==i&&'"'!==i&&"\\"!==i&&"\n"!==i&&"\r"!==i&&"\t"!==i&&"\0"!==i}_isNumeric(i){return i>="0"&&i<="9"}_isAlphaNumeric(i){return this._isAlpha(i)||this._isNumeric(i)||"_"===i}_isWhitespace(i){return" "==i||"\t"==i||"\r"==i}_advance(i=0){let m=this._source[this._current];return i=i||0,i++,this._current+=i,m}_peekAhead(i=0){return i=i||0,this._current+i>=this._source.length?"\0":this._source[this._current+i]}_addToken(i){const m=this._source.substring(this._start,this._current);this._tokens.push(new He(i,m,this._line,this._start,this._current))}}function Re(i){return Array.isArray(i)||(null==i?void 0:i.buffer)instanceof ArrayBuffer}const mr=new Float32Array(1),pr=new Uint32Array(mr.buffer),gr=new Uint32Array(mr.buffer),xr=new Int32Array(1),_r=new Float32Array(xr.buffer),vr=new Uint32Array(xr.buffer),br=new Uint32Array(1),yr=new Float32Array(br.buffer),Tr=new Int32Array(br.buffer);function tt(i,m,g){if(m===g)return i;if("f32"===m){if("i32"===g||"x32"===g)return mr[0]=i,pr[0];if("u32"===g)return mr[0]=i,gr[0]}else if("i32"===m||"x32"===m){if("f32"===g)return xr[0]=i,_r[0];if("u32"===g)return xr[0]=i,vr[0]}else if("u32"===m){if("f32"===g)return br[0]=i,yr[0];if("i32"===g||"x32"===g)return br[0]=i,Tr[0]}return console.error(`Unsupported cast from ${m} to ${g}`),i}class nt{constructor(i){this.resources=null,this.inUse=!1,this.info=null,this.node=i}}class st{constructor(i,m){this.align=i,this.size=m}}class rt{constructor(){this.uniforms=[],this.storage=[],this.textures=[],this.samplers=[],this.aliases=[],this.overrides=[],this.structs=[],this.entry=new d,this.functions=[],this._types=new Map,this._functions=new Map}_isStorageTexture(i){return"texture_storage_1d"==i.name||"texture_storage_2d"==i.name||"texture_storage_2d_array"==i.name||"texture_storage_3d"==i.name}updateAST(i){for(const m of i)m instanceof C&&this._functions.set(m.name,new nt(m));for(const m of i)if(m instanceof ie){const i=this.getTypeInfo(m,null);i instanceof n&&this.structs.push(i)}for(const m of i)if(m instanceof ee)this.aliases.push(this._getAliasInfo(m));else if(m instanceof F){const i=m,g=this._getAttributeNum(i.attributes,"id",0),_=null!=i.type?this.getTypeInfo(i.type,i.attributes):null;this.overrides.push(new h(i.name,_,i.attributes,g))}else if(this._isUniformVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=new o(i.name,b,g,_,i.attributes,nr.Uniform,i.access);y.access||(y.access="read"),this.uniforms.push(y)}else if(this._isStorageVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=this._isStorageTexture(b),T=new o(i.name,b,g,_,i.attributes,y?nr.StorageTexture:nr.Storage,i.access);T.access||(T.access="read"),this.storage.push(T)}else if(this._isTextureVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=this._isStorageTexture(b),T=new o(i.name,b,g,_,i.attributes,y?nr.StorageTexture:nr.Texture,i.access);T.access||(T.access="read"),y?this.storage.push(T):this.textures.push(T)}else if(this._isSamplerVar(m)){const i=m,g=this._getAttributeNum(i.attributes,"group",0),_=this._getAttributeNum(i.attributes,"binding",0),b=this.getTypeInfo(i.type,i.attributes),y=new o(i.name,b,g,_,i.attributes,nr.Sampler,i.access);this.samplers.push(y)}for(const m of i)if(m instanceof C){const i=this._getAttribute(m,"vertex"),g=this._getAttribute(m,"fragment"),_=this._getAttribute(m,"compute"),b=i||g||_,y=new p(m.name,null==b?void 0:b.name,m.attributes);y.attributes=m.attributes,y.startLine=m.startLine,y.endLine=m.endLine,this.functions.push(y),this._functions.get(m.name).info=y,b&&(this._functions.get(m.name).inUse=!0,y.inUse=!0,y.resources=this._findResources(m,!!b),y.inputs=this._getInputs(m.args),y.outputs=this._getOutputs(m.returnType),this.entry[b.name].push(y)),y.arguments=m.args.map(i=>new f(i.name,this.getTypeInfo(i.type,i.attributes),i.attributes)),y.returnType=m.returnType?this.getTypeInfo(m.returnType,m.attributes):null}for(const i of this._functions.values())i.info&&(i.info.inUse=i.inUse,this._addCalls(i.node,i.info.calls));for(const i of this._functions.values())i.node.search(m=>{var g,_,b;if(m instanceof Ce){if(m.value)if(Re(m.value))for(const _ of m.value)for(const m of this.overrides)_===m.name&&(null===(g=i.info)||void 0===g||g.overrides.push(m));else for(const g of this.overrides)m.value===g.name&&(null===(_=i.info)||void 0===_||_.overrides.push(g))}else if(m instanceof me)for(const g of this.overrides)m.name===g.name&&(null===(b=i.info)||void 0===b||b.overrides.push(g))});for(const i of this.uniforms)this._markStructsInUse(i.type);for(const i of this.storage)this._markStructsInUse(i.type)}getStructInfo(i){for(const m of this.structs)if(m.name==i)return m;return null}getOverrideInfo(i){for(const m of this.overrides)if(m.name==i)return m;return null}_markStructsInUse(i){if(i)if(i.isStruct){if(i.inUse=!0,i.members)for(const m of i.members)this._markStructsInUse(m.type)}else if(i.isArray)this._markStructsInUse(i.format);else if(i.isTemplate)i.format&&this._markStructsInUse(i.format);else{const m=this._getAlias(i.name);m&&this._markStructsInUse(m)}}_addCalls(i,m){var g;for(const _ of i.calls){const i=null===(g=this._functions.get(_.name))||void 0===g?void 0:g.info;i&&m.add(i)}}findResource(i,m,g){if(g){for(const _ of this.entry.compute)if(_.name===g)for(const g of _.resources)if(g.group==i&&g.binding==m)return g;for(const _ of this.entry.vertex)if(_.name===g)for(const g of _.resources)if(g.group==i&&g.binding==m)return g;for(const _ of this.entry.fragment)if(_.name===g)for(const g of _.resources)if(g.group==i&&g.binding==m)return g}for(const g of this.uniforms)if(g.group==i&&g.binding==m)return g;for(const g of this.storage)if(g.group==i&&g.binding==m)return g;for(const g of this.textures)if(g.group==i&&g.binding==m)return g;for(const g of this.samplers)if(g.group==i&&g.binding==m)return g;return null}_findResource(i){for(const m of this.uniforms)if(m.name==i)return m;for(const m of this.storage)if(m.name==i)return m;for(const m of this.textures)if(m.name==i)return m;for(const m of this.samplers)if(m.name==i)return m;return null}_markStructsFromAST(i){const m=this.getTypeInfo(i,null);this._markStructsInUse(m)}_findResources(i,m){const g=[],_=this,b=[];return i.search(y=>{if(y instanceof A)b.push({});else if(y instanceof E)b.pop();else if(y instanceof B){const i=y;m&&null!==i.type&&this._markStructsFromAST(i.type),b.length>0&&(b[b.length-1][i.name]=i)}else if(y instanceof pe){const i=y;m&&null!==i.type&&this._markStructsFromAST(i.type)}else if(y instanceof M){const i=y;m&&null!==i.type&&this._markStructsFromAST(i.type),b.length>0&&(b[b.length-1][i.name]=i)}else if(y instanceof me){const i=y;if(b.length>0&&b[b.length-1][i.name])return;const m=_._findResource(i.name);m&&g.push(m)}else if(y instanceof de){const b=y,T=_._functions.get(b.name);T&&(m&&(T.inUse=!0),i.calls.add(T.node),null===T.resources&&(T.resources=_._findResources(T.node,m)),g.push(...T.resources))}else if(y instanceof G){const b=y,T=_._functions.get(b.name);T&&(m&&(T.inUse=!0),i.calls.add(T.node),null===T.resources&&(T.resources=_._findResources(T.node,m)),g.push(...T.resources))}}),[...new Map(g.map(i=>[i.name,i])).values()]}getBindGroups(){const i=[];function t(m,g){m>=i.length&&(i.length=m+1),void 0===i[m]&&(i[m]=[]),g>=i[m].length&&(i[m].length=g+1)}for(const m of this.uniforms)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.storage)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.textures)t(m.group,m.binding),i[m.group][m.binding]=m;for(const m of this.samplers)t(m.group,m.binding),i[m.group][m.binding]=m;return i}_getOutputs(i,m=void 0){if(void 0===m&&(m=[]),i instanceof ie)this._getStructOutputs(i,m);else{const g=this._getOutputInfo(i);null!==g&&m.push(g)}return m}_getStructOutputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructOutputs(g.type,m);else{const i=this._getAttribute(g,"location")||this._getAttribute(g,"builtin");if(null!==i){const _=this.getTypeInfo(g.type,g.type.attributes),b=this._parseInt(i.value),y=new u(g.name,_,i.name,b);m.push(y)}}}_getOutputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this.getTypeInfo(i,i.attributes),_=this._parseInt(m.value);return new u("",g,m.name,_)}return null}_getInputs(i,m=void 0){void 0===m&&(m=[]);for(const g of i)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}return m}_getStructInputs(i,m){for(const g of i.members)if(g.type instanceof ie)this._getStructInputs(g.type,m);else{const i=this._getInputInfo(g);null!==i&&m.push(i)}}_getInputInfo(i){const m=this._getAttribute(i,"location")||this._getAttribute(i,"builtin");if(null!==m){const g=this._getAttribute(i,"interpolation"),_=this.getTypeInfo(i.type,i.attributes),b=this._parseInt(m.value),y=new c(i.name,_,m.name,b);return null!==g&&(y.interpolation=this._parseString(g.value)),y}return null}_parseString(i){return i instanceof Array&&(i=i[0]),i}_parseInt(i){i instanceof Array&&(i=i[0]);const m=parseInt(i);return isNaN(m)?i:m}_getAlias(i){for(const m of this.aliases)if(m.name==i)return m.type;return null}_getAliasInfo(i){return new l(i.name,this.getTypeInfo(i.type,null))}getTypeInfoByName(i){for(const m of this.structs)if(m.name==i)return m;for(const m of this.aliases)if(m.name==i)return m.type;return null}getTypeInfo(i,m=null){if(this._types.has(i))return this._types.get(i);if(i instanceof le){const g=i.type?this.getTypeInfo(i.type,i.attributes):null,_=new r(i.name,g,m);return this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof ce){const g=i,_=g.format?this.getTypeInfo(g.format,g.attributes):null,b=new s(g.name,m);return b.format=_,b.count=g.count,this._types.set(i,b),this._updateTypeInfo(b),b}if(i instanceof ie){const g=i,_=new n(g.name,m);_.startLine=g.startLine,_.endLine=g.endLine;for(const i of g.members){const m=this.getTypeInfo(i.type,i.attributes);_.members.push(new t(i.name,m,i.attributes))}return this._types.set(i,_),this._updateTypeInfo(_),_}if(i instanceof ue){const g=i,_=g.format instanceof re,b=g.format?_?this.getTypeInfo(g.format,null):new e(g.format,null):null,y=new a(g.name,b,m,g.access);return this._types.set(i,y),this._updateTypeInfo(y),y}if(i instanceof oe){const g=i,_=g.format?this.getTypeInfo(g.format,null):null,b=new a(g.name,_,m,g.access);return this._types.set(i,b),this._updateTypeInfo(b),b}const g=new e(i.name,m);return this._types.set(i,g),this._updateTypeInfo(g),g}_updateTypeInfo(i){var m,g,_;const b=this._getTypeSize(i);if(i.size=null!==(m=null==b?void 0:b.size)&&void 0!==m?m:0,i instanceof s&&i.format){const m=this._getTypeSize(i.format);i.stride=Math.max(null!==(g=null==m?void 0:m.size)&&void 0!==g?g:0,null!==(_=null==m?void 0:m.align)&&void 0!==_?_:0),this._updateTypeInfo(i.format)}i instanceof r&&this._updateTypeInfo(i.format),i instanceof n&&this._updateStructInfo(i)}_updateStructInfo(i){var m;let g=0,_=0,b=0,y=0;for(let T=0,w=i.members.length;T<w;++T){const w=i.members[T],P=this._getTypeSize(w);if(!P)continue;null!==(m=this._getAlias(w.type.name))&&void 0!==m||w.type;const $=P.align,H=P.size;g=this._roundUp($,g+_),_=H,b=g,y=Math.max(y,$),w.offset=g,w.size=H,this._updateTypeInfo(w.type)}i.size=this._roundUp(y,b+_),i.align=y}_getTypeSize(i){var m,g;if(null==i)return null;const _=this._getAttributeNum(i.attributes,"size",0),b=this._getAttributeNum(i.attributes,"align",0);if(i instanceof t&&(i=i.type),i instanceof e){const m=this._getAlias(i.name);null!==m&&(i=m)}{const g=rt._typeInfo[i.name];if(void 0!==g){const y="f16"===(null===(m=i.format)||void 0===m?void 0:m.name)?2:1;return new st(Math.max(b,g.align/y),Math.max(_,g.size/y))}}{const m=rt._typeInfo[i.name.substring(0,i.name.length-1)];if(m){const g="h"===i.name[i.name.length-1]?2:1;return new st(Math.max(b,m.align/g),Math.max(_,m.size/g))}}if(i instanceof s){let m=i,y=8,T=8;const w=this._getTypeSize(m.format);return null!==w&&(T=w.size,y=w.align),T=m.count*this._getAttributeNum(null!==(g=null==i?void 0:i.attributes)&&void 0!==g?g:null,"stride",this._roundUp(y,T)),_&&(T=_),new st(Math.max(b,y),Math.max(_,T))}if(i instanceof n){let m=0,g=0,y=0,T=0,w=0;for(const g of i.members){const i=this._getTypeSize(g.type);null!==i&&(m=Math.max(i.align,m),y=this._roundUp(i.align,y+T),T=i.size,w=y)}return g=this._roundUp(m,w+T),new st(Math.max(b,m),Math.max(_,g))}return null}_isUniformVar(i){return i instanceof B&&"uniform"==i.storage}_isStorageVar(i){return i instanceof B&&"storage"==i.storage}_isTextureVar(i){return i instanceof B&&null!==i.type&&-1!=rt._textureTypes.indexOf(i.type.name)}_isSamplerVar(i){return i instanceof B&&null!==i.type&&-1!=rt._samplerTypes.indexOf(i.type.name)}_getAttribute(i,m){const g=i;if(!g||!g.attributes)return null;const _=g.attributes;for(let i of _)if(i.name==m)return i;return null}_getAttributeNum(i,m,g){if(null===i)return g;for(let _ of i)if(_.name==m){let i=null!==_&&null!==_.value?_.value:g;return i instanceof Array&&(i=i[0]),"number"==typeof i?i:"string"==typeof i?parseInt(i):g}return g}_roundUp(i,m){return Math.ceil(m/i)*i}}rt._typeInfo={f16:{align:2,size:2},i32:{align:4,size:4},u32:{align:4,size:4},f32:{align:4,size:4},atomic:{align:4,size:4},vec2:{align:8,size:8},vec3:{align:16,size:12},vec4:{align:16,size:16},mat2x2:{align:8,size:16},mat3x2:{align:8,size:24},mat4x2:{align:8,size:32},mat2x3:{align:16,size:32},mat3x3:{align:16,size:48},mat4x3:{align:16,size:64},mat2x4:{align:16,size:32},mat3x4:{align:16,size:48},mat4x4:{align:16,size:64}},rt._textureTypes=qe.any_texture_type.map(i=>i.name),rt._samplerTypes=qe.sampler_type.map(i=>i.name);let Sr=0;class it{constructor(i,m,g){this.id=Sr++,this.name=i,this.value=m,this.node=g}clone(){return new it(this.name,this.value,this.node)}}class ot{constructor(i){this.id=Sr++,this.name=i.name,this.node=i}clone(){return new ot(this.node)}}class lt{constructor(i){this.parent=null,this.variables=new Map,this.functions=new Map,this.currentFunctionName="",this.id=Sr++,i&&(this.parent=i,this.currentFunctionName=i.currentFunctionName)}getVariable(i){var m;return this.variables.has(i)?null!==(m=this.variables.get(i))&&void 0!==m?m:null:this.parent?this.parent.getVariable(i):null}getFunction(i){var m;return this.functions.has(i)?null!==(m=this.functions.get(i))&&void 0!==m?m:null:this.parent?this.parent.getFunction(i):null}createVariable(i,m,g){this.variables.set(i,new it(i,m,null!=g?g:null))}setVariable(i,m,g){const _=this.getVariable(i);null!==_?_.value=m:this.createVariable(i,m,g)}getVariableValue(i){var m;const g=this.getVariable(i);return null!==(m=null==g?void 0:g.value)&&void 0!==m?m:null}clone(){return new lt(this)}}class ct{evalExpression(i,m){return null}getTypeInfo(i){return null}getVariableName(i,m){return""}}class ut{constructor(i){this.exec=i}getTypeInfo(i){return this.exec.getTypeInfo(i)}All(i,m){const g=this.exec.evalExpression(i.args[0],m);let _=!0;if(g instanceof Fe)return g.data.forEach(i=>{i||(_=!1)}),new Oe(_?1:0,this.getTypeInfo("bool"));throw new Error(`All() expects a vector argument. Line ${i.line}`)}Any(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const i=g.data.some(i=>i);return new Oe(i?1:0,this.getTypeInfo("bool"))}throw new Error(`Any() expects a vector argument. Line ${i.line}`)}Select(i,m){const g=this.exec.evalExpression(i.args[2],m);if(!(g instanceof Oe))throw new Error(`Select() expects a bool condition. Line ${i.line}`);return g.value?this.exec.evalExpression(i.args[1],m):this.exec.evalExpression(i.args[0],m)}ArrayLength(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.evalExpression(g,m);if(_ instanceof Ue&&0===_.typeInfo.size){const i=_.typeInfo,m=_.buffer.byteLength/i.stride;return new Oe(m,this.getTypeInfo("u32"))}return new Oe(_.typeInfo.size,this.getTypeInfo("u32"))}Abs(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.abs(i)),g.typeInfo);const _=g;return new Oe(Math.abs(_.value),_.typeInfo)}Acos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acos(i)),g.typeInfo);const _=g;return new Oe(Math.acos(_.value),g.typeInfo)}Acosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.acosh(i)),g.typeInfo);const _=g;return new Oe(Math.acosh(_.value),g.typeInfo)}Asin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asin(i)),g.typeInfo);const _=g;return new Oe(Math.asin(_.value),g.typeInfo)}Asinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.asinh(i)),g.typeInfo);const _=g;return new Oe(Math.asinh(_.value),g.typeInfo)}Atan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atan(i)),g.typeInfo);const _=g;return new Oe(Math.atan(_.value),g.typeInfo)}Atanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.atanh(i)),g.typeInfo);const _=g;return new Oe(Math.atanh(_.value),g.typeInfo)}Atan2(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.atan2(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.atan2(b.value,y.value),g.typeInfo)}Ceil(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.ceil(i)),g.typeInfo);const _=g;return new Oe(Math.ceil(_.value),g.typeInfo)}_clamp(i,m,g){return Math.min(Math.max(i,m),g)}Clamp(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe)return new Fe(g.data.map((i,m)=>this._clamp(i,_.data[m],b.data[m])),g.typeInfo);const y=g,T=_,w=b;return new Oe(this._clamp(y.value,T.value,w.value),g.typeInfo)}Cos(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cos(i)),g.typeInfo);const _=g;return new Oe(Math.cos(_.value),g.typeInfo)}Cosh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.cosh(i)),g.typeInfo);const _=g;return new Oe(Math.cos(_.value),g.typeInfo)}CountLeadingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.clz32(i)),g.typeInfo);const _=g;return new Oe(Math.clz32(_.value),g.typeInfo)}_countOneBits(i){let m=0;for(;0!==i;)1&i&&m++,i>>=1;return m}CountOneBits(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countOneBits(i)),g.typeInfo);const _=g;return new Oe(this._countOneBits(_.value),g.typeInfo)}_countTrailingZeros(i){if(0===i)return 32;let m=0;for(;!(1&i);)i>>=1,m++;return m}CountTrailingZeros(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._countTrailingZeros(i)),g.typeInfo);const _=g;return new Oe(this._countTrailingZeros(_.value),g.typeInfo)}Cross(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe){if(3!==g.data.length||3!==_.data.length)return console.error(`Cross() expects 3D vectors. Line ${i.line}`),null;const m=g.data,b=_.data;return new Fe([m[1]*b[2]-b[1]*m[2],m[2]*b[0]-b[2]*m[0],m[0]*b[1]-b[0]*m[1]],g.typeInfo)}return console.error(`Cross() expects vector arguments. Line ${i.line}`),null}Degrees(i,m){const g=this.exec.evalExpression(i.args[0],m),_=180/Math.PI;return g instanceof Fe?new Fe(g.data.map(i=>i*_),g.typeInfo):new Oe(g.value*_,this.getTypeInfo("f32"))}Determinant(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Me){const i=g.data,m=g.typeInfo.getTypeName(),_=m.endsWith("h")?this.getTypeInfo("f16"):this.getTypeInfo("f32");if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m)return new Oe(i[0]*i[3]-i[1]*i[2],_);if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),_);if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m)console.error(`TODO:Determinant for ${m}`);else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m)console.error(`TODO:Determinant for ${m}`);else{if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m)return new Oe(i[0]*(i[4]*i[8]-i[5]*i[7])-i[1]*(i[3]*i[8]-i[5]*i[6])+i[2]*(i[3]*i[7]-i[4]*i[6]),_);"mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m||"mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m||"mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m?console.error(`TODO:Determinant for ${m}`):"mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m||console.error(`TODO:Determinant for ${m}`)}}return console.error(`Determinant expects a matrix argument. Line ${i.line}`),null}Distance(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe){let i=0;for(let m=0;m<g.data.length;++m)i+=(g.data[m]-_.data[m])*(g.data[m]-_.data[m]);return new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const b=g,y=_;return new Oe(Math.abs(b.value-y.value),g.typeInfo)}_dot(i,m){let g=0;for(let _=0;_<i.length;++_)g+=m[_]*i[_];return g}Dot(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);return g instanceof Fe&&_ instanceof Fe?new Oe(this._dot(g.data,_.data),this.getTypeInfo("f32")):(console.error(`Dot() expects vector arguments. Line ${i.line}`),null)}Dot4U8Packed(i,m){return console.error(`TODO:dot4U8Packed. Line ${i.line}`),null}Dot4I8Packed(i,m){return console.error(`TODO:dot4I8Packed. Line ${i.line}`),null}Exp(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.exp(i)),g.typeInfo);const _=g;return new Oe(Math.exp(_.value),g.typeInfo)}Exp2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.pow(2,i)),g.typeInfo);const _=g;return new Oe(Math.pow(2,_.value),g.typeInfo)}ExtractBits(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if("u32"!==_.typeInfo.name&&"x32"!==_.typeInfo.name)return console.error(`ExtractBits() expects an i32 offset argument. Line ${i.line}`),null;if("u32"!==b.typeInfo.name&&"x32"!==b.typeInfo.name)return console.error(`ExtractBits() expects an i32 count argument. Line ${i.line}`),null;const y=_.value,T=b.value;if(g instanceof Fe)return new Fe(g.data.map(i=>i>>y&(1<<T)-1),g.typeInfo);if("i32"!==g.typeInfo.name&&"x32"!==g.typeInfo.name)return console.error(`ExtractBits() expects an i32 argument. Line ${i.line}`),null;const w=g.value;return new Oe(w>>y&(1<<T)-1,this.getTypeInfo("i32"))}FaceForward(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe){const i=this._dot(_.data,b.data);return new Fe(i<0?Array.from(g.data):g.data.map(i=>-i),g.typeInfo)}return console.error(`FaceForward() expects vector arguments. Line ${i.line}`),null}_firstLeadingBit(i){return 0===i?-1:31-Math.clz32(i)}FirstLeadingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstLeadingBit(i)),g.typeInfo);const _=g;return new Oe(this._firstLeadingBit(_.value),g.typeInfo)}_firstTrailingBit(i){return 0===i?-1:Math.log2(i&-i)}FirstTrailingBit(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>this._firstTrailingBit(i)),g.typeInfo);const _=g;return new Oe(this._firstTrailingBit(_.value),g.typeInfo)}Floor(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.floor(i)),g.typeInfo);const _=g;return new Oe(Math.floor(_.value),g.typeInfo)}Fma(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe)return g.data.length!==_.data.length||g.data.length!==b.data.length?(console.error(`Fma() expects vectors of the same length. Line ${i.line}`),null):new Fe(g.data.map((i,m)=>i*_.data[m]+b.data[m]),g.typeInfo);const y=g,T=_,w=b;return new Oe(y.value*T.value+w.value,y.typeInfo)}Fract(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>i-Math.floor(i)),g.typeInfo);const _=g;return new Oe(_.value-Math.floor(_.value),g.typeInfo)}Frexp(i,m){return console.error(`TODO:frexp. Line ${i.line}`),null}InsertBits(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m),y=this.exec.evalExpression(i.args[3],m);if("u32"!==b.typeInfo.name&&"x32"!==b.typeInfo.name)return console.error(`InsertBits() expects an i32 offset argument. Line ${i.line}`),null;const T=b.value,w=(1<<y.value)-1<<T,P=~w;if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>i&P|_.data[m]<<T&w),g.typeInfo);const $=g.value,H=_.value;return new Oe($&P|H<<T&w,g.typeInfo)}InverseSqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>1/Math.sqrt(i)),g.typeInfo);const _=g;return new Oe(1/Math.sqrt(_.value),g.typeInfo)}Ldexp(i,m){return console.error(`TODO:ldexp. Line ${i.line}`),null}Length(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){let i=0;return g.data.forEach(m=>{i+=m*m}),new Oe(Math.sqrt(i),this.getTypeInfo("f32"))}const _=g;return new Oe(Math.abs(_.value),g.typeInfo)}Log(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log(i)),g.typeInfo);const _=g;return new Oe(Math.log(_.value),g.typeInfo)}Log2(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.log2(i)),g.typeInfo);const _=g;return new Oe(Math.log2(_.value),g.typeInfo)}Max(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.max(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.max(b.value,y.value),g.typeInfo)}Min(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.min(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.min(b.value,y.value),g.typeInfo)}Mix(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Fe)return new Fe(g.data.map((i,m)=>g.data[m]*(1-b.data[m])+_.data[m]*b.data[m]),g.typeInfo);const y=_,T=b;return new Oe(g.value*(1-T.value)+y.value*T.value,g.typeInfo)}Modf(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>i%_.data[m]),g.typeInfo);const b=_;return new Oe(g.value%b.value,g.typeInfo)}Normalize(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe){const _=this.Length(i,m).value;return new Fe(g.data.map(i=>i/_),g.typeInfo)}return console.error(`Normalize() expects a vector argument. Line ${i.line}`),null}Pow(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe)return new Fe(g.data.map((i,m)=>Math.pow(i,_.data[m])),g.typeInfo);const b=g,y=_;return new Oe(Math.pow(b.value,y.value),g.typeInfo)}QuantizeToF16(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i),g.typeInfo):new Oe(g.value,g.typeInfo)}Radians(i,m){const g=this.exec.evalExpression(i.args[0],m);return g instanceof Fe?new Fe(g.data.map(i=>i*Math.PI/180),g.typeInfo):new Oe(g.value*Math.PI/180,this.getTypeInfo("f32"))}Reflect(i,m){let g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(g instanceof Fe&&_ instanceof Fe){const i=this._dot(g.data,_.data);return new Fe(g.data.map((m,g)=>m-2*i*_.data[g]),g.typeInfo)}return console.error(`Reflect() expects vector arguments. Line ${i.line}`),null}Refract(i,m){let g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(g instanceof Fe&&_ instanceof Fe&&b instanceof Oe){const i=this._dot(_.data,g.data);return new Fe(g.data.map((m,g)=>{const y=1-b.value*b.value*(1-i*i);if(y<0)return 0;const T=Math.sqrt(y);return b.value*m-(b.value*i+T)*_.data[g]}),g.typeInfo)}return console.error(`Refract() expects vector arguments and a scalar argument. Line ${i.line}`),null}ReverseBits(i,m){return console.error(`TODO:reverseBits. Line ${i.line}`),null}Round(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.round(i)),g.typeInfo);const _=g;return new Oe(Math.round(_.value),g.typeInfo)}Saturate(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.min(Math.max(i,0),1)),g.typeInfo);const _=g;return new Oe(Math.min(Math.max(_.value,0),1),g.typeInfo)}Sign(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sign(i)),g.typeInfo);const _=g;return new Oe(Math.sign(_.value),g.typeInfo)}Sin(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sin(i)),g.typeInfo);const _=g;return new Oe(Math.sin(_.value),g.typeInfo)}Sinh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sinh(i)),g.typeInfo);const _=g;return new Oe(Math.sinh(_.value),g.typeInfo)}_smoothstep(i,m,g){const _=Math.min(Math.max((g-i)/(m-i),0),1);return _*_*(3-2*_)}SmoothStep(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m),b=this.exec.evalExpression(i.args[2],m);if(b instanceof Fe&&g instanceof Fe&&_ instanceof Fe)return new Fe(b.data.map((i,m)=>this._smoothstep(g.data[m],_.data[m],i)),b.typeInfo);const y=g,T=_,w=b;return new Oe(this._smoothstep(y.value,T.value,w.value),b.typeInfo)}Sqrt(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.sqrt(i)),g.typeInfo);const _=g;return new Oe(Math.sqrt(_.value),g.typeInfo)}Step(i,m){const g=this.exec.evalExpression(i.args[0],m),_=this.exec.evalExpression(i.args[1],m);if(_ instanceof Fe&&g instanceof Fe)return new Fe(_.data.map((i,m)=>i<g.data[m]?0:1),_.typeInfo);const b=g;return new Oe(_.value<b.value?0:1,b.typeInfo)}Tan(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tan(i)),g.typeInfo);const _=g;return new Oe(Math.tan(_.value),g.typeInfo)}Tanh(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.tanh(i)),g.typeInfo);const _=g;return new Oe(Math.tanh(_.value),g.typeInfo)}_getTransposeType(i){const m=i.getTypeName();return"mat2x2f"===m||"mat2x2h"===m?i:"mat2x3f"===m?this.getTypeInfo("mat3x2f"):"mat2x3h"===m?this.getTypeInfo("mat3x2h"):"mat2x4f"===m?this.getTypeInfo("mat4x2f"):"mat2x4h"===m?this.getTypeInfo("mat4x2h"):"mat3x2f"===m?this.getTypeInfo("mat2x3f"):"mat3x2h"===m?this.getTypeInfo("mat2x3h"):"mat3x3f"===m||"mat3x3h"===m?i:"mat3x4f"===m?this.getTypeInfo("mat4x3f"):"mat3x4h"===m?this.getTypeInfo("mat4x3h"):"mat4x2f"===m?this.getTypeInfo("mat2x4f"):"mat4x2h"===m?this.getTypeInfo("mat2x4h"):"mat4x3f"===m?this.getTypeInfo("mat3x4f"):"mat4x3h"===m?this.getTypeInfo("mat3x4h"):("mat4x4f"===m||"mat4x4h"===m||console.error(`Invalid matrix type ${m}`),i)}Transpose(i,m){const g=this.exec.evalExpression(i.args[0],m);if(!(g instanceof Me))return console.error(`Transpose() expects a matrix argument. Line ${i.line}`),null;const _=this._getTransposeType(g.typeInfo);if("mat2x2"===g.typeInfo.name||"mat2x2f"===g.typeInfo.name||"mat2x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[2],i[1],i[3]],_)}if("mat2x3"===g.typeInfo.name||"mat2x3f"===g.typeInfo.name||"mat2x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7]],_)}if("mat2x4"===g.typeInfo.name||"mat2x4f"===g.typeInfo.name||"mat2x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13]],_)}if("mat3x2"===g.typeInfo.name||"mat3x2f"===g.typeInfo.name||"mat3x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[1],i[4],i[2],i[5]],_)}if("mat3x3"===g.typeInfo.name||"mat3x3f"===g.typeInfo.name||"mat3x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[3],i[6],i[1],i[4],i[7],i[2],i[5],i[8]],_)}if("mat3x4"===g.typeInfo.name||"mat3x4f"===g.typeInfo.name||"mat3x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14]],_)}if("mat4x2"===g.typeInfo.name||"mat4x2f"===g.typeInfo.name||"mat4x2h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[1],i[5],i[2],i[6]],_)}if("mat4x3"===g.typeInfo.name||"mat4x3f"===g.typeInfo.name||"mat4x3h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]],_)}if("mat4x4"===g.typeInfo.name||"mat4x4f"===g.typeInfo.name||"mat4x4h"===g.typeInfo.name){const i=g.data;return new Me([i[0],i[4],i[8],i[12],i[1],i[5],i[9],i[13],i[2],i[6],i[10],i[14],i[3],i[7],i[11],i[15]],_)}return console.error(`Invalid matrix type ${g.typeInfo.name}`),null}Trunc(i,m){const g=this.exec.evalExpression(i.args[0],m);if(g instanceof Fe)return new Fe(g.data.map(i=>Math.trunc(i)),g.typeInfo);const _=g;return new Oe(Math.trunc(_.value),g.typeInfo)}Dpdx(i,m){return console.error(`TODO:dpdx. Line ${i.line}`),null}DpdxCoarse(i,m){return console.error(`TODO:dpdxCoarse. Line ${i.line}`),null}DpdxFine(i,m){return console.error("TODO:dpdxFine"),null}Dpdy(i,m){return console.error("TODO:dpdy"),null}DpdyCoarse(i,m){return console.error("TODO:dpdyCoarse"),null}DpdyFine(i,m){return console.error("TODO:dpdyFine"),null}Fwidth(i,m){return console.error("TODO:fwidth"),null}FwidthCoarse(i,m){return console.error("TODO:fwidthCoarse"),null}FwidthFine(i,m){return console.error("TODO:fwidthFine"),null}TextureDimensions(i,m){const g=i.args[0],_=i.args.length>1?this.exec.evalExpression(i.args[1],m).value:0;if(g instanceof me){const b=g.name,y=m.getVariableValue(b);if(y instanceof Pe){if(_<0||_>=y.mipLevelCount)return console.error(`Invalid mip level for textureDimensions. Line ${i.line}`),null;const m=y.getMipLevelSize(_),g=y.dimension;return"1d"===g?new Oe(m[0],this.getTypeInfo("u32")):"3d"===g?new Fe(m,this.getTypeInfo("vec3u")):"2d"===g?new Fe(m.slice(0,2),this.getTypeInfo("vec2u")):(console.error(`Invalid texture dimension ${g} not found. Line ${i.line}`),null)}return console.error(`Texture ${b} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureDimensions. Line ${i.line}`),null}TextureGather(i,m){return console.error("TODO:textureGather"),null}TextureGatherCompare(i,m){return console.error("TODO:textureGatherCompare"),null}TextureLoad(i,m){const g=i.args[0],_=this.exec.evalExpression(i.args[1],m),b=i.args.length>2?this.exec.evalExpression(i.args[2],m).value:0;if(!(_ instanceof Fe)||2!==_.data.length)return console.error(`Invalid UV argument for textureLoad. Line ${i.line}`),null;if(g instanceof me){const y=g.name,T=m.getVariableValue(y);if(T instanceof Pe){const m=Math.floor(_.data[0]),g=Math.floor(_.data[1]);if(m<0||m>=T.width||g<0||g>=T.height)return console.error(`Texture ${y} out of bounds. Line ${i.line}`),null;const w=T.getPixel(m,g,0,b);return null===w?(console.error(`Invalid texture format for textureLoad. Line ${i.line}`),null):new Fe(w,this.getTypeInfo("vec4f"))}return console.error(`Texture ${y} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureLoad. Line ${i.line}`),null}TextureNumLayers(i,m){const g=i.args[0];if(g instanceof me){const _=g.name,b=m.getVariableValue(_);return b instanceof Pe?new Oe(b.depthOrArrayLayers,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLayers. Line ${i.line}`),null}TextureNumLevels(i,m){const g=i.args[0];if(g instanceof me){const _=g.name,b=m.getVariableValue(_);return b instanceof Pe?new Oe(b.mipLevelCount,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumLevels. Line ${i.line}`),null}TextureNumSamples(i,m){const g=i.args[0];if(g instanceof me){const _=g.name,b=m.getVariableValue(_);return b instanceof Pe?new Oe(b.sampleCount,this.getTypeInfo("u32")):(console.error(`Texture ${_} not found. Line ${i.line}`),null)}return console.error(`Invalid texture argument for textureNumSamples. Line ${i.line}`),null}TextureSample(i,m){return console.error("TODO:textureSample"),null}TextureSampleBias(i,m){return console.error("TODO:textureSampleBias"),null}TextureSampleCompare(i,m){return console.error("TODO:textureSampleCompare"),null}TextureSampleCompareLevel(i,m){return console.error("TODO:textureSampleCompareLevel"),null}TextureSampleGrad(i,m){return console.error("TODO:textureSampleGrad"),null}TextureSampleLevel(i,m){return console.error("TODO:textureSampleLevel"),null}TextureSampleBaseClampToEdge(i,m){return console.error("TODO:textureSampleBaseClampToEdge"),null}TextureStore(i,m){const g=i.args[0],_=this.exec.evalExpression(i.args[1],m),b=4===i.args.length?this.exec.evalExpression(i.args[2],m).value:0,y=4===i.args.length?this.exec.evalExpression(i.args[3],m).data:this.exec.evalExpression(i.args[2],m).data;if(4!==y.length)return console.error(`Invalid value argument for textureStore. Line ${i.line}`),null;if(!(_ instanceof Fe)||2!==_.data.length)return console.error(`Invalid UV argument for textureStore. Line ${i.line}`),null;if(g instanceof me){const T=g.name,w=m.getVariableValue(T);if(w instanceof Pe){const m=w.getMipLevelSize(0),g=Math.floor(_.data[0]),P=Math.floor(_.data[1]);return g<0||g>=m[0]||P<0||P>=m[1]?(console.error(`Texture ${T} out of bounds. Line ${i.line}`),null):(w.setPixel(g,P,0,b,Array.from(y)),null)}return console.error(`Texture ${T} not found. Line ${i.line}`),null}return console.error(`Invalid texture argument for textureStore. Line ${i.line}`),null}AtomicLoad(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m);return m.getVariable(_).value.getSubData(this.exec,g.postfix,m)}AtomicStore(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m);return w instanceof Oe&&T instanceof Oe&&(w.value=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),null}AtomicAdd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value+=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicSub(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value-=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicMax(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=Math.max(w.value,T.value)),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicMin(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=Math.min(w.value,T.value)),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicAnd(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=w.value&T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicOr(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=w.value|T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicXor(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=w.value^T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicExchange(i,m){let g=i.args[0];g instanceof we&&(g=g.right);const _=this.exec.getVariableName(g,m),b=m.getVariable(_);let y=i.args[1];const T=this.exec.evalExpression(y,m),w=b.value.getSubData(this.exec,g.postfix,m),P=new Oe(w.value,w.typeInfo);return w instanceof Oe&&T instanceof Oe&&(w.value=T.value),b.value instanceof Ue&&b.value.setDataValue(this.exec,w,g.postfix,m),P}AtomicCompareExchangeWeak(i,m){return console.error("TODO:atomicCompareExchangeWeak"),null}Pack4x8snorm(i,m){return console.error("TODO:pack4x8snorm"),null}Pack4x8unorm(i,m){return console.error("TODO:pack4x8unorm"),null}Pack4xI8(i,m){return console.error("TODO:pack4xI8"),null}Pack4xU8(i,m){return console.error("TODO:pack4xU8"),null}Pack4x8Clamp(i,m){return console.error("TODO:pack4x8Clamp"),null}Pack4xU8Clamp(i,m){return console.error("TODO:pack4xU8Clamp"),null}Pack2x16snorm(i,m){return console.error("TODO:pack2x16snorm"),null}Pack2x16unorm(i,m){return console.error("TODO:pack2x16unorm"),null}Pack2x16float(i,m){return console.error("TODO:pack2x16float"),null}Unpack4x8snorm(i,m){return console.error("TODO:unpack4x8snorm"),null}Unpack4x8unorm(i,m){return console.error("TODO:unpack4x8unorm"),null}Unpack4xI8(i,m){return console.error("TODO:unpack4xI8"),null}Unpack4xU8(i,m){return console.error("TODO:unpack4xU8"),null}Unpack2x16snorm(i,m){return console.error("TODO:unpack2x16snorm"),null}Unpack2x16unorm(i,m){return console.error("TODO:unpack2x16unorm"),null}Unpack2x16float(i,m){return console.error("TODO:unpack2x16float"),null}StorageBarrier(i,m){return null}TextureBarrier(i,m){return null}WorkgroupBarrier(i,m){return null}WorkgroupUniformLoad(i,m){return null}SubgroupAdd(i,m){return console.error("TODO:subgroupAdd"),null}SubgroupExclusiveAdd(i,m){return console.error("TODO:subgroupExclusiveAdd"),null}SubgroupInclusiveAdd(i,m){return console.error("TODO:subgroupInclusiveAdd"),null}SubgroupAll(i,m){return console.error("TODO:subgroupAll"),null}SubgroupAnd(i,m){return console.error("TODO:subgroupAnd"),null}SubgroupAny(i,m){return console.error("TODO:subgroupAny"),null}SubgroupBallot(i,m){return console.error("TODO:subgroupBallot"),null}SubgroupBroadcast(i,m){return console.error("TODO:subgroupBroadcast"),null}SubgroupBroadcastFirst(i,m){return console.error("TODO:subgroupBroadcastFirst"),null}SubgroupElect(i,m){return console.error("TODO:subgroupElect"),null}SubgroupMax(i,m){return console.error("TODO:subgroupMax"),null}SubgroupMin(i,m){return console.error("TODO:subgroupMin"),null}SubgroupMul(i,m){return console.error("TODO:subgroupMul"),null}SubgroupExclusiveMul(i,m){return console.error("TODO:subgroupExclusiveMul"),null}SubgroupInclusiveMul(i,m){return console.error("TODO:subgroupInclusiveMul"),null}SubgroupOr(i,m){return console.error("TODO:subgroupOr"),null}SubgroupShuffle(i,m){return console.error("TODO:subgroupShuffle"),null}SubgroupShuffleDown(i,m){return console.error("TODO:subgroupShuffleDown"),null}SubgroupShuffleUp(i,m){return console.error("TODO:subgroupShuffleUp"),null}SubgroupShuffleXor(i,m){return console.error("TODO:subgroupShuffleXor"),null}SubgroupXor(i,m){return console.error("TODO:subgroupXor"),null}QuadBroadcast(i,m){return console.error("TODO:quadBroadcast"),null}QuadSwapDiagonal(i,m){return console.error("TODO:quadSwapDiagonal"),null}QuadSwapX(i,m){return console.error("TODO:quadSwapX"),null}QuadSwapY(i,m){return console.error("TODO:quadSwapY"),null}}const wr={vec2:2,vec2f:2,vec2i:2,vec2u:2,vec2b:2,vec2h:2,vec3:3,vec3f:3,vec3i:3,vec3u:3,vec3b:3,vec3h:3,vec4:4,vec4f:4,vec4i:4,vec4u:4,vec4b:4,vec4h:4},Mr={mat2x2:[2,2,4],mat2x2f:[2,2,4],mat2x2h:[2,2,4],mat2x3:[2,3,6],mat2x3f:[2,3,6],mat2x3h:[2,3,6],mat2x4:[2,4,8],mat2x4f:[2,4,8],mat2x4h:[2,4,8],mat3x2:[3,2,6],mat3x2f:[3,2,6],mat3x2h:[3,2,6],mat3x3:[3,3,9],mat3x3f:[3,3,9],mat3x3h:[3,3,9],mat3x4:[3,4,12],mat3x4f:[3,4,12],mat3x4h:[3,4,12],mat4x2:[4,2,8],mat4x2f:[4,2,8],mat4x2h:[4,2,8],mat4x3:[4,3,12],mat4x3f:[4,3,12],mat4x3h:[4,3,12],mat4x4:[4,4,16],mat4x4f:[4,4,16],mat4x4h:[4,4,16]};class pt extends ct{constructor(i,m){var g;super(),this.ast=null!=i?i:[],this.reflection=new rt,this.reflection.updateAST(this.ast),this.context=null!==(g=null==m?void 0:m.clone())&&void 0!==g?g:new lt,this.builtins=new ut(this),this.typeInfo={bool:this.getTypeInfo(re.bool),i32:this.getTypeInfo(re.i32),u32:this.getTypeInfo(re.u32),f32:this.getTypeInfo(re.f32),f16:this.getTypeInfo(re.f16),vec2f:this.getTypeInfo(oe.vec2f),vec2u:this.getTypeInfo(oe.vec2u),vec2i:this.getTypeInfo(oe.vec2i),vec2h:this.getTypeInfo(oe.vec2h),vec3f:this.getTypeInfo(oe.vec3f),vec3u:this.getTypeInfo(oe.vec3u),vec3i:this.getTypeInfo(oe.vec3i),vec3h:this.getTypeInfo(oe.vec3h),vec4f:this.getTypeInfo(oe.vec4f),vec4u:this.getTypeInfo(oe.vec4u),vec4i:this.getTypeInfo(oe.vec4i),vec4h:this.getTypeInfo(oe.vec4h),mat2x2f:this.getTypeInfo(oe.mat2x2f),mat2x3f:this.getTypeInfo(oe.mat2x3f),mat2x4f:this.getTypeInfo(oe.mat2x4f),mat3x2f:this.getTypeInfo(oe.mat3x2f),mat3x3f:this.getTypeInfo(oe.mat3x3f),mat3x4f:this.getTypeInfo(oe.mat3x4f),mat4x2f:this.getTypeInfo(oe.mat4x2f),mat4x3f:this.getTypeInfo(oe.mat4x3f),mat4x4f:this.getTypeInfo(oe.mat4x4f)}}getVariableValue(i){var m,g;const _=null!==(g=null===(m=this.context.getVariable(i))||void 0===m?void 0:m.value)&&void 0!==g?g:null;if(null===_)return null;if(_ instanceof Oe)return _.value;if(_ instanceof Fe)return Array.from(_.data);if(_ instanceof Me)return Array.from(_.data);if(_ instanceof Ue&&_.typeInfo instanceof s){if("u32"===_.typeInfo.format.name)return Array.from(new Uint32Array(_.buffer,_.offset,_.typeInfo.count));if("i32"===_.typeInfo.format.name)return Array.from(new Int32Array(_.buffer,_.offset,_.typeInfo.count));if("f32"===_.typeInfo.format.name)return Array.from(new Float32Array(_.buffer,_.offset,_.typeInfo.count))}return console.error(`Unsupported return variable type ${_.typeInfo.name}`),null}execute(i){(i=null!=i?i:{}).constants&&this._setOverrides(i.constants,this.context),this._execStatements(this.ast,this.context)}dispatchWorkgroups(i,m,g,_){const b=this.context.clone();(_=null!=_?_:{}).constants&&this._setOverrides(_.constants,b),this._execStatements(this.ast,b);const y=b.getFunction(i);if(!y)return void console.error(`Function ${i} not found`);if("number"==typeof m)m=[m,1,1];else{if(0===m.length)return void console.error("Invalid dispatch count");1===m.length?m=[m[0],1,1]:2===m.length?m=[m[0],m[1],1]:m.length>3&&(m=[m[0],m[1],m[2]])}const T=m[0],w=m[1],P=m[2],$=this.getTypeInfo("vec3u");b.setVariable("@num_workgroups",new Fe(m,$));for(const i in g)for(const m in g[i]){const _=g[i][m];b.variables.forEach(g=>{var b;const y=g.node;if(null==y?void 0:y.attributes){let T=null,w=null;for(const i of y.attributes)"binding"===i.name?T=i.value:"group"===i.name&&(w=i.value);if(m==T&&i==w)if(void 0!==_.texture&&void 0!==_.descriptor){const i=new Pe(_.texture,this.getTypeInfo(y.type),_.descriptor,null!==(b=_.texture.view)&&void 0!==b?b:null);g.value=i}else void 0!==_.uniform?g.value=new Ue(_.uniform,this.getTypeInfo(y.type)):g.value=new Ue(_,this.getTypeInfo(y.type))}})}for(let i=0;i<P;++i)for(let m=0;m<w;++m)for(let g=0;g<T;++g)b.setVariable("@workgroup_id",new Fe([g,m,i],this.getTypeInfo("vec3u"))),this._dispatchWorkgroup(y,[g,m,i],b)}execStatement(i,m){if(i instanceof Q)return this.evalExpression(i.value,m);if(i instanceof ne){if(i.condition){const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))throw new Error("Invalid break-if condition");if(!g.value)return null}return pt._breakObj}if(i instanceof se)return pt._continueObj;if(i instanceof M)this._let(i,m);else if(i instanceof B)this._var(i,m);else if(i instanceof U)this._const(i,m);else if(i instanceof C)this._function(i,m);else{if(i instanceof Z)return this._if(i,m);if(i instanceof j)return this._switch(i,m);if(i instanceof O)return this._for(i,m);if(i instanceof N)return this._while(i,m);if(i instanceof X)return this._loop(i,m);if(i instanceof V){const g=m.clone();return g.currentFunctionName=m.currentFunctionName,this._execStatements(i.body,g)}if(i instanceof R)this._assign(i,m);else if(i instanceof z)this._increment(i,m);else{if(i instanceof ie)return null;if(i instanceof F){const g=i.name;null===m.getVariable(g)&&m.setVariable(g,new Oe(0,this.getTypeInfo("u32")))}else if(i instanceof G)this._call(i,m);else{if(i instanceof J)return null;if(i instanceof ee)return null;console.error("Invalid statement type.",i,`Line ${i.line}`)}}}return null}evalExpression(i,m){return i instanceof ke?this._evalBinaryOp(i,m):i instanceof ge?this._evalLiteral(i,m):i instanceof me?this._evalVariable(i,m):i instanceof de?this._evalCall(i,m):i instanceof pe?this._evalCreate(i,m):i instanceof _e?this._evalConst(i,m):i instanceof xe?this._evalBitcast(i,m):i instanceof we?this._evalUnaryOp(i,m):(console.error("Invalid expression type",i,`Line ${i.line}`),null)}getTypeInfo(i){var m;if(i instanceof re){const m=this.reflection.getTypeInfo(i);if(null!==m)return m}let g=null!==(m=this.typeInfo[i])&&void 0!==m?m:null;return null!==g||(g=this.reflection.getTypeInfoByName(i)),g}_setOverrides(i,m){for(const g in i){const _=i[g],b=this.reflection.getOverrideInfo(g);null!==b?(null===b.type&&(b.type=this.getTypeInfo("u32")),"u32"===b.type.name||"i32"===b.type.name||"f32"===b.type.name||"f16"===b.type.name?m.setVariable(g,new Oe(_,b.type)):"bool"===b.type.name?m.setVariable(g,new Oe(_?1:0,b.type)):"vec2"===b.type.name||"vec3"===b.type.name||"vec4"===b.type.name||"vec2f"===b.type.name||"vec3f"===b.type.name||"vec4f"===b.type.name||"vec2i"===b.type.name||"vec3i"===b.type.name||"vec4i"===b.type.name||"vec2u"===b.type.name||"vec3u"===b.type.name||"vec4u"===b.type.name||"vec2h"===b.type.name||"vec3h"===b.type.name||"vec4h"===b.type.name?m.setVariable(g,new Fe(_,b.type)):console.error(`Invalid constant type for ${g}`)):console.error(`Override ${g} does not exist in the shader.`)}}_dispatchWorkgroup(i,m,g){const _=[1,1,1];for(const m of i.node.attributes)if("workgroup_size"===m.name){if(m.value.length>0){const i=g.getVariableValue(m.value[0]);_[0]=i instanceof Oe?i.value:parseInt(m.value[0])}if(m.value.length>1){const i=g.getVariableValue(m.value[1]);_[1]=i instanceof Oe?i.value:parseInt(m.value[1])}if(m.value.length>2){const i=g.getVariableValue(m.value[2]);_[2]=i instanceof Oe?i.value:parseInt(m.value[2])}}const b=this.getTypeInfo("vec3u"),y=this.getTypeInfo("u32");g.setVariable("@workgroup_size",new Fe(_,b));const T=_[0],w=_[1],P=_[2];for(let $=0,H=0;$<P;++$)for(let P=0;P<w;++P)for(let w=0;w<T;++w,++H){const T=[w,P,$],q=[w+m[0]*_[0],P+m[1]*_[1],$+m[2]*_[2]];g.setVariable("@local_invocation_id",new Fe(T,b)),g.setVariable("@global_invocation_id",new Fe(q,b)),g.setVariable("@local_invocation_index",new Oe(H,y)),this._dispatchExec(i,g)}}_dispatchExec(i,m){for(const g of i.node.args)for(const i of g.attributes)if("builtin"===i.name){const _=`@${i.value}`,b=m.getVariable(_);void 0!==b&&m.variables.set(g.name,b)}this._execStatements(i.node.body,m)}getVariableName(i,m){for(;i instanceof we;)i=i.right;return i instanceof me?i.name:(console.error("Unknown variable type",i,"Line",i.line),null)}_execStatements(i,m){for(const g of i){if(g instanceof Array){const i=m.clone(),_=this._execStatements(g,i);if(_)return _;continue}const i=this.execStatement(g,m);if(i)return i}return null}_call(i,m){const g=m.clone();g.currentFunctionName=i.name;const _=m.getFunction(i.name);if(_){for(let m=0;m<_.node.args.length;++m){const b=_.node.args[m],y=this.evalExpression(i.args[m],g);g.setVariable(b.name,y,b)}this._execStatements(_.node.body,g)}else i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)&&this._evalCreate(i,m)}_increment(i,m){const g=this.getVariableName(i.variable,m),_=m.getVariable(g);_?"++"===i.operator?_.value instanceof Oe?_.value.value++:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):"--"===i.operator?_.value instanceof Oe?_.value.value--:console.error(`Variable ${g} is not a scalar. Line ${i.line}`):console.error(`Unknown increment operator ${i.operator}. Line ${i.line}`):console.error(`Variable ${g} not found. Line ${i.line}`)}_getVariableData(i,m){if(i instanceof me){const g=this.getVariableName(i,m),_=m.getVariable(g);return null===_?(console.error(`Variable ${g} not found. Line ${i.line}`),null):_.value.getSubData(this,i.postfix,m)}if(i instanceof we){if("*"===i.operator){const g=this._getVariableData(i.right,m);return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Variable ${i.right} is not a pointer. Line ${i.line}`),null)}if("&"===i.operator){const g=this._getVariableData(i.right,m);return new Ve(g)}}return null}_assign(i,m){let g=null,_="<var>",b=null;if(i.variable instanceof we){const g=this._getVariableData(i.variable,m),_=this.evalExpression(i.value,m),b=i.operator;if("="===b){if(g instanceof Oe||g instanceof Fe||g instanceof Me){if(_ instanceof Oe||_ instanceof Fe||_ instanceof Me&&g.data.length===_.data.length)return void g.data.set(_.data);console.error(`Invalid assignment. Line ${i.line}`)}else if(g instanceof Ue&&_ instanceof Ue&&g.buffer.byteLength-g.offset>=_.buffer.byteLength-_.offset)return void(g.buffer.byteLength%4==0?new Uint32Array(g.buffer,g.offset,g.typeInfo.size/4).set(new Uint32Array(_.buffer,_.offset,_.typeInfo.size/4)):new Uint8Array(g.buffer,g.offset,g.typeInfo.size).set(new Uint8Array(_.buffer,_.offset,_.typeInfo.size)));return console.error(`Invalid assignment. Line ${i.line}`),null}if("+="===b)return g instanceof Oe||g instanceof Fe||g instanceof Me?_ instanceof Oe||_ instanceof Fe||_ instanceof Me?void g.data.set(_.data.map((i,m)=>g.data[m]+i)):void console.error(`Invalid assignment . Line ${i.line}`):void console.error(`Invalid assignment. Line ${i.line}`);if("-="===b)return(g instanceof Oe||g instanceof Fe||g instanceof Me)&&(_ instanceof Oe||_ instanceof Fe||_ instanceof Me)?void g.data.set(_.data.map((i,m)=>g.data[m]-i)):void console.error(`Invalid assignment. Line ${i.line}`)}if(i.variable instanceof we){if("*"===i.variable.operator){_=this.getVariableName(i.variable.right,m);const b=m.getVariable(_);if(!(b&&b.value instanceof Ve))return void console.error(`Variable ${_} is not a pointer. Line ${i.line}`);g=b.value.reference;let y=i.variable.postfix;if(!y){let m=i.variable.right;for(;m instanceof we;){if(m.postfix){y=m.postfix;break}m=m.right}}y&&(g=g.getSubData(this,y,m))}}else{b=i.variable.postfix,_=this.getVariableName(i.variable,m);const y=m.getVariable(_);if(null===y)return void console.error(`Variable ${_} not found. Line ${i.line}`);g=y.value}if(g instanceof Ve&&(g=g.reference),null===g)return void console.error(`Variable ${_} not found. Line ${i.line}`);const y=this.evalExpression(i.value,m),T=i.operator;if("="===T)if(g instanceof Ue)g.setDataValue(this,y,b,m);else if(b){if(!(g instanceof Fe||g instanceof Me))return void console.error(`Variable ${_} is not a vector or matrix. Line ${i.line}`);if(b instanceof be){const T=this.evalExpression(b.index,m).value;if(g instanceof Fe){if(!(y instanceof Oe))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[T]=y.value}else{if(!(g instanceof Me))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);{const T=this.evalExpression(b.index,m).value;if(T<0)return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(!(y instanceof Fe))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);{const m=g.typeInfo.getTypeName();if("mat2x2"===m||"mat2x2f"===m||"mat2x2h"===m){if(!(T<2&&2===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[2*T]=y.data[0],g.data[2*T+1]=y.data[1]}else if("mat2x3"===m||"mat2x3f"===m||"mat2x3h"===m){if(!(T<2&&3===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[3*T]=y.data[0],g.data[3*T+1]=y.data[1],g.data[3*T+2]=y.data[2]}else if("mat2x4"===m||"mat2x4f"===m||"mat2x4h"===m){if(!(T<2&&4===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[4*T]=y.data[0],g.data[4*T+1]=y.data[1],g.data[4*T+2]=y.data[2],g.data[4*T+3]=y.data[3]}else if("mat3x2"===m||"mat3x2f"===m||"mat3x2h"===m){if(!(T<3&&2===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[2*T]=y.data[0],g.data[2*T+1]=y.data[1]}else if("mat3x3"===m||"mat3x3f"===m||"mat3x3h"===m){if(!(T<3&&3===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[3*T]=y.data[0],g.data[3*T+1]=y.data[1],g.data[3*T+2]=y.data[2]}else if("mat3x4"===m||"mat3x4f"===m||"mat3x4h"===m){if(!(T<3&&4===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[4*T]=y.data[0],g.data[4*T+1]=y.data[1],g.data[4*T+2]=y.data[2],g.data[4*T+3]=y.data[3]}else if("mat4x2"===m||"mat4x2f"===m||"mat4x2h"===m){if(!(T<4&&2===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[2*T]=y.data[0],g.data[2*T+1]=y.data[1]}else if("mat4x3"===m||"mat4x3f"===m||"mat4x3h"===m){if(!(T<4&&3===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[3*T]=y.data[0],g.data[3*T+1]=y.data[1],g.data[3*T+2]=y.data[2]}else{if("mat4x4"!==m&&"mat4x4f"!==m&&"mat4x4h"!==m)return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(!(T<4&&4===y.data.length))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);g.data[4*T]=y.data[0],g.data[4*T+1]=y.data[1],g.data[4*T+2]=y.data[2],g.data[4*T+3]=y.data[3]}}}}}else if(b instanceof fe){const m=b.value;if(!(g instanceof Fe))return void console.error(`Invalid assignment to ${m}. Variable ${_} is not a vector. Line ${i.line}`);if(y instanceof Oe){if(m.length>1)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);if("x"===m)g.data[0]=y.value;else if("y"===m){if(g.data.length<2)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);g.data[1]=y.value}else if("z"===m){if(g.data.length<3)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);g.data[2]=y.value}else if("w"===m){if(g.data.length<4)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);g.data[3]=y.value}}else{if(!(y instanceof Fe))return void console.error(`Invalid assignment to ${_}. Line ${i.line}`);if(m.length!==y.data.length)return void console.error(`Invalid assignment to ${m} for variable ${_}. Line ${i.line}`);for(let b=0;b<m.length;++b){const T=m[b];if("x"===T||"r"===T)g.data[0]=y.data[b];else if("y"===T||"g"===T){if(y.data.length<2)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);g.data[1]=y.data[b]}else if("z"===T||"b"===T){if(y.data.length<3)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);g.data[2]=y.data[b]}else{if("w"!==T&&"a"!==T)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);if(y.data.length<4)return void console.error(`Invalid assignment to ${T} for variable ${_}. Line ${i.line}`);g.data[3]=y.data[b]}}}}}else g instanceof Oe&&y instanceof Oe?g.value=y.value:g instanceof Fe&&y instanceof Fe||g instanceof Me&&y instanceof Me?g.data.set(y.data):console.error(`Invalid assignment to ${_}. Line ${i.line}`);else{const _=g.getSubData(this,b,m);if(_ instanceof Fe&&y instanceof Oe){const m=_.data,g=y.value;if("+="===T)for(let i=0;i<m.length;++i)m[i]+=g;else if("-="===T)for(let i=0;i<m.length;++i)m[i]-=g;else if("*="===T)for(let i=0;i<m.length;++i)m[i]*=g;else if("/="===T)for(let i=0;i<m.length;++i)m[i]/=g;else if("%="===T)for(let i=0;i<m.length;++i)m[i]%=g;else if("&="===T)for(let i=0;i<m.length;++i)m[i]&=g;else if("|="===T)for(let i=0;i<m.length;++i)m[i]|=g;else if("^="===T)for(let i=0;i<m.length;++i)m[i]^=g;else if("<<="===T)for(let i=0;i<m.length;++i)m[i]<<=g;else if(">>="===T)for(let i=0;i<m.length;++i)m[i]>>=g;else console.error(`Invalid operator ${T}. Line ${i.line}`)}else if(_ instanceof Fe&&y instanceof Fe){const m=_.data,g=y.data;if(m.length!==g.length)return void console.error(`Vector length mismatch. Line ${i.line}`);if("+="===T)for(let i=0;i<m.length;++i)m[i]+=g[i];else if("-="===T)for(let i=0;i<m.length;++i)m[i]-=g[i];else if("*="===T)for(let i=0;i<m.length;++i)m[i]*=g[i];else if("/="===T)for(let i=0;i<m.length;++i)m[i]/=g[i];else if("%="===T)for(let i=0;i<m.length;++i)m[i]%=g[i];else if("&="===T)for(let i=0;i<m.length;++i)m[i]&=g[i];else if("|="===T)for(let i=0;i<m.length;++i)m[i]|=g[i];else if("^="===T)for(let i=0;i<m.length;++i)m[i]^=g[i];else if("<<="===T)for(let i=0;i<m.length;++i)m[i]<<=g[i];else if(">>="===T)for(let i=0;i<m.length;++i)m[i]>>=g[i];else console.error(`Invalid operator ${T}. Line ${i.line}`)}else{if(!(_ instanceof Oe&&y instanceof Oe))return void console.error(`Invalid type for ${i.operator} operator. Line ${i.line}`);"+="===T?_.value+=y.value:"-="===T?_.value-=y.value:"*="===T?_.value*=y.value:"/="===T?_.value/=y.value:"%="===T?_.value%=y.value:"&="===T?_.value&=y.value:"|="===T?_.value|=y.value:"^="===T?_.value^=y.value:"<<="===T?_.value<<=y.value:">>="===T?_.value>>=y.value:console.error(`Invalid operator ${T}. Line ${i.line}`)}g instanceof Ue&&g.setDataValue(this,_,b,m)}}_function(i,m){const g=new ot(i);m.functions.set(i.name,g)}_const(i,m){let g=null;null!==i.value&&(g=this.evalExpression(i.value,m)),m.createVariable(i.name,g,i)}_let(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{const _=i.type.name;if("f32"===_||"i32"===_||"u32"===_||"bool"===_||"f16"===_||"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2b"===_||"vec3b"===_||"vec4b"===_||"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_||"array"===_){const _=new pe(i.type,[]);g=this._evalCreate(_,m)}}m.createVariable(i.name,g,i)}_var(i,m){let g=null;if(null!==i.value){if(g=this.evalExpression(i.value,m),null===g)return void console.error(`Invalid value for variable ${i.name}. Line ${i.line}`);i.value instanceof we||(g=g.clone())}else{if(null===i.type)return void console.error(`Variable ${i.name} has no type. Line ${i.line}`);const _=i.type.name;if("f32"===_||"i32"===_||"u32"===_||"bool"===_||"f16"===_||"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2b"===_||"vec3b"===_||"vec4b"===_||"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_||i.type instanceof ce||i.type instanceof ie||i.type instanceof oe){const _=new pe(i.type,[]);g=this._evalCreate(_,m)}}m.createVariable(i.name,g,i)}_switch(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;let _=null;for(const b of i.cases)if(b instanceof Se)for(const y of b.selectors){if(y instanceof Te){_=b;continue}const T=this.evalExpression(y,m);if(!(T instanceof Oe))return console.error(`Invalid case selector. Line ${i.line}`),null;if(T.value===g.value)return this._execStatements(b.body,m)}else b instanceof Ae&&(_=b);return _?this._execStatements(_.body,m):null}_if(i,m){m=m.clone();const g=this.evalExpression(i.condition,m);if(!(g instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(g.value)return this._execStatements(i.body,m);for(const g of i.elseif){const _=this.evalExpression(g.condition,m);if(!(_ instanceof Oe))return console.error(`Invalid if condition. Line ${i.line}`),null;if(_.value)return this._execStatements(g.body,m)}return i.else?this._execStatements(i.else,m):null}_getScalarValue(i){return i instanceof Oe?i.value:(console.error("Expected scalar value.",i),0)}_for(i,m){for(m=m.clone(),this.execStatement(i.init,m);this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(null!==g&&g!==pt._continueObj)return g;this.execStatement(i.increment,m)}return null}_loop(i,m){for(m=m.clone();;){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g===pt._continueObj){if(i.continuing&&this._execStatements(i.continuing.body,m)===pt._breakObj)break}else if(null!==g)return g}return null}_while(i,m){for(m=m.clone();this._getScalarValue(this.evalExpression(i.condition,m));){const g=this._execStatements(i.body,m);if(g===pt._breakObj)break;if(g!==pt._continueObj&&null!==g)return g}return null}_evalBitcast(i,m){const g=this.evalExpression(i.value,m),_=i.type;if(g instanceof Oe){const i=tt(g.value,g.typeInfo.name,_.name);return new Oe(i,this.getTypeInfo(_))}if(g instanceof Fe){const m=g.typeInfo.getTypeName();let b="";if(m.endsWith("f"))b="f32";else if(m.endsWith("i"))b="i32";else if(m.endsWith("u"))b="u32";else if(m.endsWith("b"))b="bool";else{if(!m.endsWith("h"))return console.error(`Unknown vector type ${m}. Line ${i.line}`),null;b="f16"}const y=_.getTypeName();let T="";if(y.endsWith("f"))T="f32";else if(y.endsWith("i"))T="i32";else if(y.endsWith("u"))T="u32";else if(y.endsWith("b"))T="bool";else{if(!y.endsWith("h"))return console.error(`Unknown vector type ${T}. Line ${i.line}`),null;T="f16"}const w=function(i,m,g){if(m===g)return i;const _=new Array(i.length);for(let b=0;b<i.length;b++)_[b]=tt(i[b],m,g);return _}(Array.from(g.data),b,T);return new Fe(w,this.getTypeInfo(_))}return console.error(`TODO:bitcast for ${g.typeInfo.name}. Line ${i.line}`),null}_evalConst(i,m){return m.getVariableValue(i.name).clone().getSubData(this,i.postfix,m)}_evalCreate(i,m){var g;if(i instanceof pe){if(null===i.type)return Ne.void;switch(i.type.getTypeName()){case"bool":case"i32":case"u32":case"f32":case"f16":return this._callConstructorValue(i,m);case"vec2":case"vec3":case"vec4":case"vec2f":case"vec3f":case"vec4f":case"vec2h":case"vec3h":case"vec4h":case"vec2i":case"vec3i":case"vec4i":case"vec2u":case"vec3u":case"vec4u":case"vec2b":case"vec3b":case"vec4b":return this._callConstructorVec(i,m);case"mat2x2":case"mat2x2f":case"mat2x2h":case"mat2x3":case"mat2x3f":case"mat2x3h":case"mat2x4":case"mat2x4f":case"mat2x4h":case"mat3x2":case"mat3x2f":case"mat3x2h":case"mat3x3":case"mat3x3f":case"mat3x3h":case"mat3x4":case"mat3x4f":case"mat3x4h":case"mat4x2":case"mat4x2f":case"mat4x2h":case"mat4x3":case"mat4x3f":case"mat4x3h":case"mat4x4":case"mat4x4f":case"mat4x4h":return this._callConstructorMatrix(i,m)}}const _=i instanceof pe?i.type.name:i.name,b=i instanceof pe?this.getTypeInfo(i.type):this.getTypeInfo(i.name);if(null===b)return console.error(`Unknown type ${_}. Line ${i.line}`),null;if(0===b.size)return null;const y=new Ue(new ArrayBuffer(b.size),b,0);if(b instanceof n){if(i.args)for(let g=0;g<i.args.length;++g){const _=b.members[g],T=i.args[g],w=this.evalExpression(T,m);y.setData(this,w,_.type,_.offset,m)}}else if(b instanceof s){let _=0;if(i.args)for(let T=0;T<i.args.length;++T){const w=i.args[T],P=this.evalExpression(w,m);null===b.format&&("x32"===(null===(g=P.typeInfo)||void 0===g?void 0:g.name)?b.format=this.getTypeInfo("i32"):b.format=P.typeInfo),y.setData(this,P,b.format,_,m),_+=b.stride}}else console.error(`Unknown type "${_}". Line ${i.line}`);return i instanceof pe?y.getSubData(this,i.postfix,m):y}_evalLiteral(i,m){const g=this.getTypeInfo(i.type),_=g.name;return"x32"===_||"u32"===_||"f32"===_||"f16"===_||"i32"===_||"bool"===_?new Oe(i.scalarValue,g):"vec2"===_||"vec3"===_||"vec4"===_||"vec2f"===_||"vec3f"===_||"vec4f"===_||"vec2h"===_||"vec3h"===_||"vec4h"===_||"vec2i"===_||"vec3i"===_||"vec4i"===_||"vec2u"===_||"vec3u"===_||"vec4u"===_?this._callConstructorVec(i,m):"mat2x2"===_||"mat2x3"===_||"mat2x4"===_||"mat3x2"===_||"mat3x3"===_||"mat3x4"===_||"mat4x2"===_||"mat4x3"===_||"mat4x4"===_||"mat2x2f"===_||"mat2x3f"===_||"mat2x4f"===_||"mat3x2f"===_||"mat3x3f"===_||"mat3x4f"===_||"mat4x2f"===_||"mat4x3f"===_||"mat4x4f"===_||"mat2x2h"===_||"mat2x3h"===_||"mat2x4h"===_||"mat3x2h"===_||"mat3x3h"===_||"mat3x4h"===_||"mat4x2h"===_||"mat4x3h"===_||"mat4x4h"===_?this._callConstructorMatrix(i,m):i.value}_evalVariable(i,m){const g=m.getVariableValue(i.name);return null===g?g:g.getSubData(this,i.postfix,m)}_maxFormatTypeInfo(i){let m=i[0];if("f32"===m.name)return m;for(let g=1;g<i.length;++g){const _=pt._priority.get(m.name);pt._priority.get(i[g].name)<_&&(m=i[g])}return"x32"===m.name?this.getTypeInfo("i32"):m}_evalUnaryOp(i,m){const g=this.evalExpression(i.right,m);if("&"===i.operator)return new Ve(g);if("*"===i.operator)return g instanceof Ve?g.reference.getSubData(this,i.postfix,m):(console.error(`Invalid dereference. Line ${i.line}`),null);const _=g instanceof Oe?g.value:g instanceof Fe?Array.from(g.data):null;switch(i.operator){case"+":{if(Re(_)){const i=_.map((i,m)=>+i);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(+i,m)}case"-":{if(Re(_)){const i=_.map((i,m)=>-i);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(-i,m)}case"!":{if(Re(_)){const i=_.map((i,m)=>i?0:1);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(i?0:1,m)}case"~":{if(Re(_)){const i=_.map((i,m)=>~i);return new Fe(i,g.typeInfo)}const i=_,m=this._maxFormatTypeInfo([g.typeInfo,g.typeInfo]);return new Oe(~i,m)}}return console.error(`Invalid unary operator ${i.operator}. Line ${i.line}`),null}_evalBinaryOp(i,m){const g=this.evalExpression(i.left,m),_=this.evalExpression(i.right,m),b=g instanceof Oe?g.value:g instanceof Fe||g instanceof Me?Array.from(g.data):null,y=_ instanceof Oe?_.value:_ instanceof Fe||_ instanceof Me?Array.from(_.data):null;switch(i.operator){case"+":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i+_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m+i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i+m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m+T,w)}case"-":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i-_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m-i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i-m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m-T,w)}case"*":{if(Re(b)&&Re(y)){const m=b,T=y;if(g instanceof Me&&_ instanceof Me){const b=function(i,m,g,_){if(void 0===Mr[m.name]||void 0===Mr[_.name])return null;const b=Mr[m.name][0],y=Mr[m.name][1],T=Mr[_.name][0];if(b!==Mr[_.name][1])return null;const w=new Array(T*y);for(let m=0;m<y;m++)for(let _=0;_<T;_++){let P=0;for(let T=0;T<b;T++)P+=i[T*y+m]*g[_*b+T];w[m*T+_]=P}return w}(m,g.typeInfo,T,_.typeInfo);if(null===b)return console.error(`Matrix multiplication failed. Line ${i.line}.`),null;const y=Mr[_.typeInfo.name][0],w=Mr[g.typeInfo.name][1],P=this.getTypeInfo(`mat${y}x${w}f`);return new Me(b,P)}if(g instanceof Me&&_ instanceof Fe){const b=function(i,m,g,_){if(void 0===Mr[m.name]||void 0===wr[_.name])return null;const b=Mr[m.name][0],y=Mr[m.name][1];if(b!==g.length)return null;const T=new Array(y);for(let m=0;m<y;m++){let _=0;for(let T=0;T<b;T++)_+=i[T*y+m]*g[T];T[m]=_}return T}(m,g.typeInfo,T,_.typeInfo);return null===b?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(b,_.typeInfo)}if(g instanceof Fe&&_ instanceof Me){const b=function(i,m,g,_){if(void 0===wr[m.name]||void 0===Mr[_.name])return null;const b=Mr[_.name][0],y=Mr[_.name][1];if(y!==i.length)return null;const T=[];for(let m=0;m<b;m++){let _=0;for(let T=0;T<y;T++)_+=i[T]*g[T*b+m];T[m]=_}return T}(m,g.typeInfo,T,_.typeInfo);return null===b?(console.error(`Matrix vector multiplication failed. Line ${i.line}.`),null):new Fe(b,g.typeInfo)}{if(m.length!==T.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const _=m.map((i,m)=>i*T[m]);return new Fe(_,g.typeInfo)}}if(Re(b)){const i=y,m=b.map((m,g)=>m*i);return g instanceof Me?new Me(m,g.typeInfo):new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i*m);return _ instanceof Me?new Me(m,_.typeInfo):new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m*T,w)}case"%":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i%_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m%i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i%m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m%T,w)}case"/":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i/_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m/i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i/m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m/T,w)}case"&":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i&_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m&i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i&m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m&T,w)}case"|":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i|_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m|i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i|m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m|T,w)}case"^":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i^_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m^i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i^m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m^T,w)}case"<<":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i<<_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m<<i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i<<m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m<<T,w)}case">>":{if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i>>_[m]);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m>>i);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i>>m);return new Fe(m,_.typeInfo)}const m=b,T=y,w=this._maxFormatTypeInfo([g.typeInfo,_.typeInfo]);return new Oe(m>>T,w)}case">":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i>_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m>i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i>m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b>y?1:0,this.getTypeInfo("bool"));case"<":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i<_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m<i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i<m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b<y?1:0,this.getTypeInfo("bool"));case"==":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i===_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m==i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i==m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b===y?1:0,this.getTypeInfo("bool"));case"!=":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i!==_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m!==i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i!==m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b!==y?1:0,this.getTypeInfo("bool"));case">=":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i>=_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m>=i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i>=m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b>=y?1:0,this.getTypeInfo("bool"));case"<=":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i<=_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m<=i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i<=m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b<=y?1:0,this.getTypeInfo("bool"));case"&&":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i&&_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m&&i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i&&m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b&&y?1:0,this.getTypeInfo("bool"));case"||":if(Re(b)&&Re(y)){const m=b,_=y;if(m.length!==_.length)return console.error(`Vector length mismatch. Line ${i.line}.`),null;const T=m.map((i,m)=>i||_[m]?1:0);return new Fe(T,g.typeInfo)}if(Re(b)){const i=y,m=b.map((m,g)=>m||i?1:0);return new Fe(m,g.typeInfo)}if(Re(y)){const i=b,m=y.map((m,g)=>i||m?1:0);return new Fe(m,_.typeInfo)}return new Oe(b||y?1:0,this.getTypeInfo("bool"))}return console.error(`Unknown operator ${i.operator}. Line ${i.line}`),null}_evalCall(i,m){if(null!==i.cachedReturnValue)return i.cachedReturnValue;const g=m.clone();g.currentFunctionName=i.name;const _=m.getFunction(i.name);if(!_)return i.isBuiltin?this._callBuiltinFunction(i,g):this.getTypeInfo(i.name)?this._evalCreate(i,m):(console.error(`Unknown function "${i.name}". Line ${i.line}`),null);for(let m=0;m<_.node.args.length;++m){const b=_.node.args[m],y=this.evalExpression(i.args[m],g);g.createVariable(b.name,y,b)}return this._execStatements(_.node.body,g)}_callBuiltinFunction(i,m){switch(i.name){case"all":return this.builtins.All(i,m);case"any":return this.builtins.Any(i,m);case"select":return this.builtins.Select(i,m);case"arrayLength":return this.builtins.ArrayLength(i,m);case"abs":return this.builtins.Abs(i,m);case"acos":return this.builtins.Acos(i,m);case"acosh":return this.builtins.Acosh(i,m);case"asin":return this.builtins.Asin(i,m);case"asinh":return this.builtins.Asinh(i,m);case"atan":return this.builtins.Atan(i,m);case"atanh":return this.builtins.Atanh(i,m);case"atan2":return this.builtins.Atan2(i,m);case"ceil":return this.builtins.Ceil(i,m);case"clamp":return this.builtins.Clamp(i,m);case"cos":return this.builtins.Cos(i,m);case"cosh":return this.builtins.Cosh(i,m);case"countLeadingZeros":return this.builtins.CountLeadingZeros(i,m);case"countOneBits":return this.builtins.CountOneBits(i,m);case"countTrailingZeros":return this.builtins.CountTrailingZeros(i,m);case"cross":return this.builtins.Cross(i,m);case"degrees":return this.builtins.Degrees(i,m);case"determinant":return this.builtins.Determinant(i,m);case"distance":return this.builtins.Distance(i,m);case"dot":return this.builtins.Dot(i,m);case"dot4U8Packed":return this.builtins.Dot4U8Packed(i,m);case"dot4I8Packed":return this.builtins.Dot4I8Packed(i,m);case"exp":return this.builtins.Exp(i,m);case"exp2":return this.builtins.Exp2(i,m);case"extractBits":return this.builtins.ExtractBits(i,m);case"faceForward":return this.builtins.FaceForward(i,m);case"firstLeadingBit":return this.builtins.FirstLeadingBit(i,m);case"firstTrailingBit":return this.builtins.FirstTrailingBit(i,m);case"floor":return this.builtins.Floor(i,m);case"fma":return this.builtins.Fma(i,m);case"fract":return this.builtins.Fract(i,m);case"frexp":return this.builtins.Frexp(i,m);case"insertBits":return this.builtins.InsertBits(i,m);case"inverseSqrt":return this.builtins.InverseSqrt(i,m);case"ldexp":return this.builtins.Ldexp(i,m);case"length":return this.builtins.Length(i,m);case"log":return this.builtins.Log(i,m);case"log2":return this.builtins.Log2(i,m);case"max":return this.builtins.Max(i,m);case"min":return this.builtins.Min(i,m);case"mix":return this.builtins.Mix(i,m);case"modf":return this.builtins.Modf(i,m);case"normalize":return this.builtins.Normalize(i,m);case"pow":return this.builtins.Pow(i,m);case"quantizeToF16":return this.builtins.QuantizeToF16(i,m);case"radians":return this.builtins.Radians(i,m);case"reflect":return this.builtins.Reflect(i,m);case"refract":return this.builtins.Refract(i,m);case"reverseBits":return this.builtins.ReverseBits(i,m);case"round":return this.builtins.Round(i,m);case"saturate":return this.builtins.Saturate(i,m);case"sign":return this.builtins.Sign(i,m);case"sin":return this.builtins.Sin(i,m);case"sinh":return this.builtins.Sinh(i,m);case"smoothStep":return this.builtins.SmoothStep(i,m);case"sqrt":return this.builtins.Sqrt(i,m);case"step":return this.builtins.Step(i,m);case"tan":return this.builtins.Tan(i,m);case"tanh":return this.builtins.Tanh(i,m);case"transpose":return this.builtins.Transpose(i,m);case"trunc":return this.builtins.Trunc(i,m);case"dpdx":return this.builtins.Dpdx(i,m);case"dpdxCoarse":return this.builtins.DpdxCoarse(i,m);case"dpdxFine":return this.builtins.DpdxFine(i,m);case"dpdy":return this.builtins.Dpdy(i,m);case"dpdyCoarse":return this.builtins.DpdyCoarse(i,m);case"dpdyFine":return this.builtins.DpdyFine(i,m);case"fwidth":return this.builtins.Fwidth(i,m);case"fwidthCoarse":return this.builtins.FwidthCoarse(i,m);case"fwidthFine":return this.builtins.FwidthFine(i,m);case"textureDimensions":return this.builtins.TextureDimensions(i,m);case"textureGather":return this.builtins.TextureGather(i,m);case"textureGatherCompare":return this.builtins.TextureGatherCompare(i,m);case"textureLoad":return this.builtins.TextureLoad(i,m);case"textureNumLayers":return this.builtins.TextureNumLayers(i,m);case"textureNumLevels":return this.builtins.TextureNumLevels(i,m);case"textureNumSamples":return this.builtins.TextureNumSamples(i,m);case"textureSample":return this.builtins.TextureSample(i,m);case"textureSampleBias":return this.builtins.TextureSampleBias(i,m);case"textureSampleCompare":return this.builtins.TextureSampleCompare(i,m);case"textureSampleCompareLevel":return this.builtins.TextureSampleCompareLevel(i,m);case"textureSampleGrad":return this.builtins.TextureSampleGrad(i,m);case"textureSampleLevel":return this.builtins.TextureSampleLevel(i,m);case"textureSampleBaseClampToEdge":return this.builtins.TextureSampleBaseClampToEdge(i,m);case"textureStore":return this.builtins.TextureStore(i,m);case"atomicLoad":return this.builtins.AtomicLoad(i,m);case"atomicStore":return this.builtins.AtomicStore(i,m);case"atomicAdd":return this.builtins.AtomicAdd(i,m);case"atomicSub":return this.builtins.AtomicSub(i,m);case"atomicMax":return this.builtins.AtomicMax(i,m);case"atomicMin":return this.builtins.AtomicMin(i,m);case"atomicAnd":return this.builtins.AtomicAnd(i,m);case"atomicOr":return this.builtins.AtomicOr(i,m);case"atomicXor":return this.builtins.AtomicXor(i,m);case"atomicExchange":return this.builtins.AtomicExchange(i,m);case"atomicCompareExchangeWeak":return this.builtins.AtomicCompareExchangeWeak(i,m);case"pack4x8snorm":return this.builtins.Pack4x8snorm(i,m);case"pack4x8unorm":return this.builtins.Pack4x8unorm(i,m);case"pack4xI8":return this.builtins.Pack4xI8(i,m);case"pack4xU8":return this.builtins.Pack4xU8(i,m);case"pack4x8Clamp":return this.builtins.Pack4x8Clamp(i,m);case"pack4xU8Clamp":return this.builtins.Pack4xU8Clamp(i,m);case"pack2x16snorm":return this.builtins.Pack2x16snorm(i,m);case"pack2x16unorm":return this.builtins.Pack2x16unorm(i,m);case"pack2x16float":return this.builtins.Pack2x16float(i,m);case"unpack4x8snorm":return this.builtins.Unpack4x8snorm(i,m);case"unpack4x8unorm":return this.builtins.Unpack4x8unorm(i,m);case"unpack4xI8":return this.builtins.Unpack4xI8(i,m);case"unpack4xU8":return this.builtins.Unpack4xU8(i,m);case"unpack2x16snorm":return this.builtins.Unpack2x16snorm(i,m);case"unpack2x16unorm":return this.builtins.Unpack2x16unorm(i,m);case"unpack2x16float":return this.builtins.Unpack2x16float(i,m);case"storageBarrier":return this.builtins.StorageBarrier(i,m);case"textureBarrier":return this.builtins.TextureBarrier(i,m);case"workgroupBarrier":return this.builtins.WorkgroupBarrier(i,m);case"workgroupUniformLoad":return this.builtins.WorkgroupUniformLoad(i,m);case"subgroupAdd":return this.builtins.SubgroupAdd(i,m);case"subgroupExclusiveAdd":return this.builtins.SubgroupExclusiveAdd(i,m);case"subgroupInclusiveAdd":return this.builtins.SubgroupInclusiveAdd(i,m);case"subgroupAll":return this.builtins.SubgroupAll(i,m);case"subgroupAnd":return this.builtins.SubgroupAnd(i,m);case"subgroupAny":return this.builtins.SubgroupAny(i,m);case"subgroupBallot":return this.builtins.SubgroupBallot(i,m);case"subgroupBroadcast":return this.builtins.SubgroupBroadcast(i,m);case"subgroupBroadcastFirst":return this.builtins.SubgroupBroadcastFirst(i,m);case"subgroupElect":return this.builtins.SubgroupElect(i,m);case"subgroupMax":return this.builtins.SubgroupMax(i,m);case"subgroupMin":return this.builtins.SubgroupMin(i,m);case"subgroupMul":return this.builtins.SubgroupMul(i,m);case"subgroupExclusiveMul":return this.builtins.SubgroupExclusiveMul(i,m);case"subgroupInclusiveMul":return this.builtins.SubgroupInclusiveMul(i,m);case"subgroupOr":return this.builtins.SubgroupOr(i,m);case"subgroupShuffle":return this.builtins.SubgroupShuffle(i,m);case"subgroupShuffleDown":return this.builtins.SubgroupShuffleDown(i,m);case"subgroupShuffleUp":return this.builtins.SubgroupShuffleUp(i,m);case"subgroupShuffleXor":return this.builtins.SubgroupShuffleXor(i,m);case"subgroupXor":return this.builtins.SubgroupXor(i,m);case"quadBroadcast":return this.builtins.QuadBroadcast(i,m);case"quadSwapDiagonal":return this.builtins.QuadSwapDiagonal(i,m);case"quadSwapX":return this.builtins.QuadSwapX(i,m);case"quadSwapY":return this.builtins.QuadSwapY(i,m)}const g=m.getFunction(i.name);if(g){const _=m.clone();for(let m=0;m<g.node.args.length;++m){const b=g.node.args[m],y=this.evalExpression(i.args[m],_);_.setVariable(b.name,y,b)}return this._execStatements(g.node.body,_)}return null}_callConstructorValue(i,m){if(!i.args||0===i.args.length)return new Oe(0,this.getTypeInfo(i.type));const g=this.evalExpression(i.args[0],m);return g.typeInfo=this.getTypeInfo(i.type),g.getSubData(this,i.postfix,m).clone()}_callConstructorVec(i,m){const g=this.getTypeInfo(i.type),_=i.type.getTypeName(),b=wr[_];if(void 0===b)return console.error(`Invalid vec constructor ${_}. Line ${i.line}`),null;const y=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)y.push(i)}else y.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);if(i instanceof Fe){const m=i.data;for(let i=0;i<m.length;++i){let g=m[i];y.push(g)}}else if(i instanceof Oe){let m=i.value;y.push(m)}}if(i.type instanceof oe&&null===i.type.format&&(i.type.format=oe.f32),0===y.length){const _=new Array(b).fill(0);return new Fe(_,g).getSubData(this,i.postfix,m)}if(1===y.length)for(;y.length<b;)y.push(y[0]);return y.length<b?(console.error(`Invalid vec constructor. Line ${i.line}`),null):new Fe(y.length>b?y.slice(0,b):y,g).getSubData(this,i.postfix,m)}_callConstructorMatrix(i,m){const g=this.getTypeInfo(i.type),_=i.type.getTypeName(),b=Mr[_];if(void 0===b)return console.error(`Invalid matrix constructor ${_}. Line ${i.line}`),null;const y=[];if(i instanceof ge)if(i.isVector){const m=i.vectorValue;for(const i of m)y.push(i)}else y.push(i.scalarValue);else if(i.args)for(const g of i.args){const i=this.evalExpression(g,m);i instanceof Fe?y.push(...i.data):i instanceof Oe?y.push(i.value):i instanceof Me&&y.push(...i.data)}if(g instanceof a&&null===g.format&&(g.format=this.getTypeInfo("f32")),0===y.length){const _=new Array(b[2]).fill(0);return new Me(_,g).getSubData(this,i.postfix,m)}return y.length!==b[2]?(console.error(`Invalid matrix constructor. Line ${i.line}`),null):new Me(y,g).getSubData(this,i.postfix,m)}}pt._breakObj=new De(new e("BREAK",null),null),pt._continueObj=new De(new e("CONTINUE",null),null),pt._priority=new Map([["f32",0],["f16",1],["u32",2],["i32",3],["x32",3]]);class dt{constructor(){this.constants=new Map,this.aliases=new Map,this.structs=new Map}}class mt{constructor(){this._tokens=[],this._current=0,this._currentLine=1,this._deferArrayCountEval=[],this._currentLoop=[],this._context=new dt,this._exec=new pt,this._forwardTypeCount=0}parse(i){this._initialize(i),this._deferArrayCountEval.length=0;const m=[];for(;!this._isAtEnd();){const i=this._global_decl_or_directive();if(!i)break;m.push(i)}if(this._deferArrayCountEval.length>0){for(const m of this._deferArrayCountEval){const g=m.arrayType,_=m.countNode;if(_ instanceof me){const m=_.name,b=this._context.constants.get(m);if(b)try{const i=b.constEvaluate(this._exec);g.count=i}catch(i){}}}this._deferArrayCountEval.length=0}if(this._forwardTypeCount>0)for(const i of m)i.search(i=>{i instanceof Le||i instanceof le?i.type=this._forwardType(i.type):i instanceof ce?i.format=this._forwardType(i.format):i instanceof B||i instanceof M||i instanceof U?i.type=this._forwardType(i.type):i instanceof C?i.returnType=this._forwardType(i.returnType):i instanceof Ee&&(i.type=this._forwardType(i.type))});return m}_forwardType(i){if(i instanceof ae){const m=this._getType(i.name);if(m)return m}else i instanceof le?i.type=this._forwardType(i.type):i instanceof ce&&(i.format=this._forwardType(i.format));return i}_initialize(i){if(i)if("string"==typeof i){const m=new ze(i);this._tokens=m.scanTokens()}else this._tokens=i;else this._tokens=[];this._current=0}_updateNode(i,m){return i.line=null!=m?m:this._currentLine,i}_error(i,m){return{token:i,message:m,toString:()=>`${m}`}}_isAtEnd(){return this._current>=this._tokens.length||this._peek().type==qe.eof}_match(i){if(i instanceof We)return!!this._check(i)&&(this._advance(),!0);for(let m=0,g=i.length;m<g;++m){const g=i[m];if(this._check(g))return this._advance(),!0}return!1}_consume(i,m){if(this._check(i))return this._advance();throw this._error(this._peek(),`${m}. Line:${this._currentLine}`)}_check(i){if(this._isAtEnd())return!1;const m=this._peek();if(i instanceof Array){const g=m.type;let _=!1;for(const m of i){if(g===m)return!0;m===qe.tokens.name&&(_=!0)}if(_){const i=qe.tokens.name.rule.exec(m.lexeme);if(i&&0==i.index&&i[0]==m.lexeme)return!0}return!1}if(m.type===i)return!0;if(i===qe.tokens.name){const i=qe.tokens.name.rule.exec(m.lexeme);return i&&0==i.index&&i[0]==m.lexeme}return!1}_advance(){var i,m;return this._currentLine=null!==(m=null===(i=this._peek())||void 0===i?void 0:i.line)&&void 0!==m?m:-1,this._isAtEnd()||this._current++,this._previous()}_peek(){return this._tokens[this._current]}_previous(){return this._tokens[this._current-1]}_global_decl_or_directive(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._match(qe.keywords.alias)){const i=this._type_alias();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.diagnostic)){const i=this._diagnostic();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.requires)){const i=this._requires_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}if(this._match(qe.keywords.enable)){const i=this._enable_directive();return this._consume(qe.tokens.semicolon,"Expected ';'"),this._exec.reflection.updateAST([i]),i}const i=this._attribute();if(this._check(qe.keywords.var)){const m=this._global_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.override)){const m=this._override_variable_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.let)){const m=this._global_let_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.const)){const m=this._global_const_decl();return null!=m&&(m.attributes=i),this._consume(qe.tokens.semicolon,"Expected ';'."),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.struct)){const m=this._struct_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}if(this._check(qe.keywords.fn)){const m=this._function_decl();return null!=m&&(m.attributes=i),this._exec.reflection.updateAST([m]),m}return null}_function_decl(){if(!this._match(qe.keywords.fn))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected function name.").toString();this._consume(qe.tokens.paren_left,"Expected '(' for function arguments.");const g=[];if(!this._check(qe.tokens.paren_right))do{if(this._check(qe.tokens.paren_right))break;const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected argument name.").toString();this._consume(qe.tokens.colon,"Expected ':' for argument type.");const _=this._attribute(),b=this._type_decl();null!=b&&(b.attributes=_,g.push(this._updateNode(new Ee(m,b,i))))}while(this._match(qe.tokens.comma));this._consume(qe.tokens.paren_right,"Expected ')' after function arguments.");let _=null;if(this._match(qe.tokens.arrow)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}const b=this._compound_statement(),y=this._currentLine;return this._updateNode(new C(m,g,_,b,i,y),i)}_compound_statement(){const i=[];for(this._consume(qe.tokens.brace_left,"Expected '{' for block.");!this._check(qe.tokens.brace_right);){const m=this._statement();null!==m&&i.push(m)}return this._consume(qe.tokens.brace_right,"Expected '}' for block."),i}_statement(){for(;this._match(qe.tokens.semicolon)&&!this._isAtEnd(););if(this._check(qe.tokens.attr)&&this._attribute(),this._check(qe.keywords.if))return this._if_statement();if(this._check(qe.keywords.switch))return this._switch_statement();if(this._check(qe.keywords.loop))return this._loop_statement();if(this._check(qe.keywords.for))return this._for_statement();if(this._check(qe.keywords.while))return this._while_statement();if(this._check(qe.keywords.continuing))return this._continuing_statement();if(this._check(qe.keywords.static_assert))return this._static_assert_statement();if(this._check(qe.tokens.brace_left))return this._compound_statement();let i=null;if(this._check(qe.keywords.return))i=this._return_statement();else if(this._check([qe.keywords.var,qe.keywords.let,qe.keywords.const]))i=this._variable_statement();else if(this._match(qe.keywords.discard))i=this._updateNode(new te);else if(this._match(qe.keywords.break)){const m=this._updateNode(new ne);if(this._currentLoop.length>0){const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m,this._check(qe.keywords.if)&&(this._advance(),m.condition=this._optional_paren_expression())}else if(this._match(qe.keywords.continue)){const m=this._updateNode(new se);if(!(this._currentLoop.length>0))throw this._error(this._peek(),`Continue statement must be inside a loop. Line:${m.line}`);{const i=this._currentLoop[this._currentLoop.length-1];m.loopId=i.id}i=m}else i=this._increment_decrement_statement()||this._func_call_statement()||this._assignment_statement();return null!=i&&this._consume(qe.tokens.semicolon,"Expected ';' after statement."),i}_static_assert_statement(){if(!this._match(qe.keywords.static_assert))return null;const i=this._currentLine,m=this._optional_paren_expression();return this._updateNode(new D(m),i)}_while_statement(){if(!this._match(qe.keywords.while))return null;const i=this._updateNode(new N(null,null));return this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_continuing_statement(){const i=this._currentLoop.length>0?this._currentLoop[this._currentLoop.length-1].id:-1;if(!this._match(qe.keywords.continuing))return null;const m=this._currentLine,g=this._compound_statement();return this._updateNode(new V(g,i),m)}_for_statement(){if(!this._match(qe.keywords.for))return null;this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._updateNode(new O(null,null,null,null));return this._currentLoop.push(i),i.init=this._check(qe.tokens.semicolon)?null:this._for_init(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.condition=this._check(qe.tokens.semicolon)?null:this._short_circuit_or_expression(),this._consume(qe.tokens.semicolon,"Expected ';'."),i.increment=this._check(qe.tokens.paren_right)?null:this._for_increment(),this._consume(qe.tokens.paren_right,"Expected ')'."),this._check(qe.tokens.attr)&&this._attribute(),i.body=this._compound_statement(),this._currentLoop.pop(),i}_for_init(){return this._variable_statement()||this._func_call_statement()||this._assignment_statement()}_for_increment(){return this._func_call_statement()||this._increment_decrement_statement()||this._assignment_statement()}_variable_statement(){if(this._check(qe.keywords.var)){const i=this._variable_decl();if(null===i)throw this._error(this._peek(),"Variable declaration expected.");let m=null;return this._match(qe.tokens.equal)&&(m=this._short_circuit_or_expression()),this._updateNode(new B(i.name,i.type,i.storage,i.access,m),i.line)}if(this._match(qe.keywords.let)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for let.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for let.");const _=this._short_circuit_or_expression();return this._updateNode(new M(m,g,null,null,_),i)}if(this._match(qe.keywords.const)){const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected name for const.").toString();let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}this._consume(qe.tokens.equal,"Expected '=' for const.");const _=this._short_circuit_or_expression();return null===g&&_ instanceof ge&&(g=_.type),this._updateNode(new U(m,g,null,null,_),i)}return null}_increment_decrement_statement(){const i=this._current,m=this._unary_expression();if(null==m)return null;if(!this._check(qe.increment_operators))return this._current=i,null;const g=this._consume(qe.increment_operators,"Expected increment operator");return this._updateNode(new z(g.type===qe.tokens.plus_plus?cr.increment:cr.decrement,m))}_assignment_statement(){let i=null;const m=this._currentLine;if(this._check(qe.tokens.brace_right))return null;let g=this._match(qe.tokens.underscore);if(g||(i=this._unary_expression()),!g&&null==i)return null;const _=this._consume(qe.assignment_operators,"Expected assignment operator."),b=this._short_circuit_or_expression();return this._updateNode(new R(hr.parse(_.lexeme),i,b),m)}_func_call_statement(){if(!this._check(qe.tokens.ident))return null;const i=this._currentLine,m=this._current,g=this._consume(qe.tokens.ident,"Expected function name."),_=this._argument_expression_list();return null===_?(this._current=m,null):this._updateNode(new G(g.lexeme,_),i)}_loop_statement(){if(!this._match(qe.keywords.loop))return null;this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for loop.");const i=this._updateNode(new X([],null));this._currentLoop.push(i);let m=this._statement();for(;null!==m;){if(Array.isArray(m))for(let g of m)i.body.push(g);else i.body.push(m);if(m instanceof V){i.continuing=m;break}m=this._statement()}return this._currentLoop.pop(),this._consume(qe.tokens.brace_right,"Expected '}' for loop."),i}_switch_statement(){if(!this._match(qe.keywords.switch))return null;const i=this._updateNode(new j(null,[]));if(this._currentLoop.push(i),i.condition=this._optional_paren_expression(),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Expected '{' for switch."),i.cases=this._switch_body(),null==i.cases||0==i.cases.length)throw this._error(this._previous(),"Expected 'case' or 'default'.");return this._consume(qe.tokens.brace_right,"Expected '}' for switch."),this._currentLoop.pop(),i}_switch_body(){const i=[];let m=!1;for(;this._check([qe.keywords.default,qe.keywords.case]);){if(this._match(qe.keywords.case)){const g=this._case_selectors();for(const i of g)if(i instanceof Te){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");m=!0;break}this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch case.");const _=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch case."),i.push(this._updateNode(new Se(g,_)))}if(this._match(qe.keywords.default)){if(m)throw this._error(this._previous(),"Multiple default cases in switch statement.");this._match(qe.tokens.colon),this._check(qe.tokens.attr)&&this._attribute(),this._consume(qe.tokens.brace_left,"Exected '{' for switch default.");const g=this._case_body();this._consume(qe.tokens.brace_right,"Exected '}' for switch default."),i.push(this._updateNode(new Ae(g)))}}return i}_case_selectors(){const i=[];for(this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());this._match(qe.tokens.comma);)this._match(qe.keywords.default)?i.push(this._updateNode(new Te)):i.push(this._shift_expression());return i}_case_body(){if(this._match(qe.keywords.fallthrough))return this._consume(qe.tokens.semicolon,"Expected ';'"),[];let i=this._statement();if(null==i)return[];i instanceof Array||(i=[i]);const m=this._case_body();return 0==m.length?i:[...i,m[0]]}_if_statement(){if(!this._match(qe.keywords.if))return null;const i=this._currentLine,m=this._optional_paren_expression();this._check(qe.tokens.attr)&&this._attribute();const g=this._compound_statement();let _=[];this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),_=this._elseif_statement(_));let b=null;return this._match(qe.keywords.else)&&(this._check(qe.tokens.attr)&&this._attribute(),b=this._compound_statement()),this._updateNode(new Z(m,g,_,b),i)}_match_elseif(){return this._tokens[this._current].type===qe.keywords.else&&this._tokens[this._current+1].type===qe.keywords.if&&(this._advance(),this._advance(),!0)}_elseif_statement(i=[]){const m=this._optional_paren_expression(),g=this._compound_statement();return i.push(this._updateNode(new $e(m,g))),this._match_elseif()&&(this._check(qe.tokens.attr)&&this._attribute(),this._elseif_statement(i)),i}_return_statement(){if(!this._match(qe.keywords.return))return null;const i=this._short_circuit_or_expression();return this._updateNode(new Q(i))}_short_circuit_or_expression(){let i=this._short_circuit_and_expr();for(;this._match(qe.tokens.or_or);)i=this._updateNode(new ke(this._previous().toString(),i,this._short_circuit_and_expr()));return i}_short_circuit_and_expr(){let i=this._inclusive_or_expression();for(;this._match(qe.tokens.and_and);)i=this._updateNode(new ke(this._previous().toString(),i,this._inclusive_or_expression()));return i}_inclusive_or_expression(){let i=this._exclusive_or_expression();for(;this._match(qe.tokens.or);)i=this._updateNode(new ke(this._previous().toString(),i,this._exclusive_or_expression()));return i}_exclusive_or_expression(){let i=this._and_expression();for(;this._match(qe.tokens.xor);)i=this._updateNode(new ke(this._previous().toString(),i,this._and_expression()));return i}_and_expression(){let i=this._equality_expression();for(;this._match(qe.tokens.and);)i=this._updateNode(new ke(this._previous().toString(),i,this._equality_expression()));return i}_equality_expression(){const i=this._relational_expression();return this._match([qe.tokens.equal_equal,qe.tokens.not_equal])?this._updateNode(new ke(this._previous().toString(),i,this._relational_expression())):i}_relational_expression(){let i=this._shift_expression();for(;this._match([qe.tokens.less_than,qe.tokens.greater_than,qe.tokens.less_than_equal,qe.tokens.greater_than_equal]);)i=this._updateNode(new ke(this._previous().toString(),i,this._shift_expression()));return i}_shift_expression(){let i=this._additive_expression();for(;this._match([qe.tokens.shift_left,qe.tokens.shift_right]);)i=this._updateNode(new ke(this._previous().toString(),i,this._additive_expression()));return i}_additive_expression(){let i=this._multiplicative_expression();for(;this._match([qe.tokens.plus,qe.tokens.minus]);)i=this._updateNode(new ke(this._previous().toString(),i,this._multiplicative_expression()));return i}_multiplicative_expression(){let i=this._unary_expression();for(;this._match([qe.tokens.star,qe.tokens.forward_slash,qe.tokens.modulo]);)i=this._updateNode(new ke(this._previous().toString(),i,this._unary_expression()));return i}_unary_expression(){return this._match([qe.tokens.minus,qe.tokens.bang,qe.tokens.tilde,qe.tokens.star,qe.tokens.and])?this._updateNode(new we(this._previous().toString(),this._unary_expression())):this._singular_expression()}_singular_expression(){const i=this._primary_expression(),m=this._postfix_expression();return m&&(i.postfix=m),i}_postfix_expression(){if(this._match(qe.tokens.bracket_left)){const i=this._short_circuit_or_expression();this._consume(qe.tokens.bracket_right,"Expected ']'.");const m=this._updateNode(new be(i)),g=this._postfix_expression();return g&&(m.postfix=g),m}if(this._match(qe.tokens.period)){const i=this._consume(qe.tokens.name,"Expected member name."),m=this._postfix_expression(),g=this._updateNode(new fe(i.lexeme));return m&&(g.postfix=m),g}return null}_getStruct(i){return this._context.aliases.has(i)?this._context.aliases.get(i).type:this._context.structs.has(i)?this._context.structs.get(i):null}_getType(i){const m=this._getStruct(i);if(null!==m)return m;switch(i){case"void":return re.void;case"bool":return re.bool;case"i32":return re.i32;case"u32":return re.u32;case"f32":return re.f32;case"f16":return re.f16;case"vec2f":return oe.vec2f;case"vec3f":return oe.vec3f;case"vec4f":return oe.vec4f;case"vec2i":return oe.vec2i;case"vec3i":return oe.vec3i;case"vec4i":return oe.vec4i;case"vec2u":return oe.vec2u;case"vec3u":return oe.vec3u;case"vec4u":return oe.vec4u;case"vec2h":return oe.vec2h;case"vec3h":return oe.vec3h;case"vec4h":return oe.vec4h;case"mat2x2f":return oe.mat2x2f;case"mat2x3f":return oe.mat2x3f;case"mat2x4f":return oe.mat2x4f;case"mat3x2f":return oe.mat3x2f;case"mat3x3f":return oe.mat3x3f;case"mat3x4f":return oe.mat3x4f;case"mat4x2f":return oe.mat4x2f;case"mat4x3f":return oe.mat4x3f;case"mat4x4f":return oe.mat4x4f;case"mat2x2h":return oe.mat2x2h;case"mat2x3h":return oe.mat2x3h;case"mat2x4h":return oe.mat2x4h;case"mat3x2h":return oe.mat3x2h;case"mat3x3h":return oe.mat3x3h;case"mat3x4h":return oe.mat3x4h;case"mat4x2h":return oe.mat4x2h;case"mat4x3h":return oe.mat4x3h;case"mat4x4h":return oe.mat4x4h;case"mat2x2i":return oe.mat2x2i;case"mat2x3i":return oe.mat2x3i;case"mat2x4i":return oe.mat2x4i;case"mat3x2i":return oe.mat3x2i;case"mat3x3i":return oe.mat3x3i;case"mat3x4i":return oe.mat3x4i;case"mat4x2i":return oe.mat4x2i;case"mat4x3i":return oe.mat4x3i;case"mat4x4i":return oe.mat4x4i;case"mat2x2u":return oe.mat2x2u;case"mat2x3u":return oe.mat2x3u;case"mat2x4u":return oe.mat2x4u;case"mat3x2u":return oe.mat3x2u;case"mat3x3u":return oe.mat3x3u;case"mat3x4u":return oe.mat3x4u;case"mat4x2u":return oe.mat4x2u;case"mat4x3u":return oe.mat4x3u;case"mat4x4u":return oe.mat4x4u}return null}_validateTypeRange(i,m){if("i32"===m.name){if(i<-2147483648||i>2147483647)throw this._error(this._previous(),`Value out of range for i32:${i}. Line:${this._currentLine}.`)}else if("u32"===m.name&&(i<0||i>4294967295))throw this._error(this._previous(),`Value out of range for u32:${i}. Line:${this._currentLine}.`)}_primary_expression(){if(this._match(qe.tokens.ident)){const i=this._previous().toString();if(this._check(qe.tokens.paren_left)){const m=this._argument_expression_list(),g=this._getType(i);return null!==g?this._updateNode(new pe(g,m)):this._updateNode(new de(i,m))}if(this._context.constants.has(i)){const m=this._context.constants.get(i);return this._updateNode(new _e(i,m.value))}return this._updateNode(new me(i))}if(this._match(qe.tokens.int_literal)){const i=this._previous().toString();let m=i.endsWith("i")||i.endsWith("i")?re.i32:i.endsWith("u")||i.endsWith("U")?re.u32:re.x32;const g=parseInt(i);return this._validateTypeRange(g,m),this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(m)),m))}if(this._match(qe.tokens.uint_literal)){const i=parseInt(this._previous().toString());return this._validateTypeRange(i,re.u32),this._updateNode(new ge(new Oe(i,this._exec.getTypeInfo(re.u32)),re.u32))}if(this._match([qe.tokens.decimal_float_literal,qe.tokens.hex_float_literal])){let i=this._previous().toString(),m=i.endsWith("h");m&&(i=i.substring(0,i.length-1));const g=parseFloat(i);this._validateTypeRange(g,m?re.f16:re.f32);const _=m?re.f16:re.f32;return this._updateNode(new ge(new Oe(g,this._exec.getTypeInfo(_)),_))}if(this._match([qe.keywords.true,qe.keywords.false])){let i=this._previous().toString()===qe.keywords.true.rule;return this._updateNode(new ge(new Oe(i?1:0,this._exec.getTypeInfo(re.bool)),re.bool))}if(this._check(qe.tokens.paren_left))return this._paren_expression();if(this._match(qe.keywords.bitcast)){this._consume(qe.tokens.less_than,"Expected '<'.");const i=this._type_decl();this._consume(qe.tokens.greater_than,"Expected '>'.");const m=this._paren_expression();return this._updateNode(new xe(i,m))}const i=this._type_decl(),m=this._argument_expression_list();return this._updateNode(new pe(i,m))}_argument_expression_list(){if(!this._match(qe.tokens.paren_left))return null;const i=[];do{if(this._check(qe.tokens.paren_right))break;const m=this._short_circuit_or_expression();i.push(m)}while(this._match(qe.tokens.comma));return this._consume(qe.tokens.paren_right,"Expected ')' for agument list"),i}_optional_paren_expression(){this._match(qe.tokens.paren_left);const i=this._short_circuit_or_expression();return this._match(qe.tokens.paren_right),i}_paren_expression(){this._consume(qe.tokens.paren_left,"Expected '('.");const i=this._short_circuit_or_expression();return this._consume(qe.tokens.paren_right,"Expected ')'."),i}_struct_decl(){if(!this._match(qe.keywords.struct))return null;const i=this._currentLine,m=this._consume(qe.tokens.ident,"Expected name for struct.").toString();this._consume(qe.tokens.brace_left,"Expected '{' for struct body.");const g=[];for(;!this._check(qe.tokens.brace_right);){const i=this._attribute(),m=this._consume(qe.tokens.name,"Expected variable name.").toString();this._consume(qe.tokens.colon,"Expected ':' for struct member type.");const _=this._attribute(),b=this._type_decl();null!=b&&(b.attributes=_),this._check(qe.tokens.brace_right)?this._match(qe.tokens.comma):this._consume(qe.tokens.comma,"Expected ',' for struct member."),g.push(this._updateNode(new Le(m,b,i)))}this._consume(qe.tokens.brace_right,"Expected '}' after struct body.");const _=this._currentLine,b=this._updateNode(new ie(m,g,i,_),i);return this._context.structs.set(m,b),b}_global_variable_decl(){const i=this._variable_decl();if(!i)return null;if(this._match(qe.tokens.equal)){const m=this._const_expression();i.value=m}if(null!==i.type&&i.value instanceof ge){if("x32"!==i.value.type.name&&i.type.getTypeName()!==i.value.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${i.value.type.name} to ${i.type.name}. Line:${this._currentLine}`);i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type),i.value.type=i.type}else null===i.type&&i.value instanceof ge&&(i.type="x32"===i.value.type.name?re.i32:i.value.type,i.value.isScalar&&this._validateTypeRange(i.value.scalarValue,i.type));return i}_override_variable_decl(){const i=this._override_decl();return i&&this._match(qe.tokens.equal)&&(i.value=this._const_expression()),i}_global_const_decl(){var i;if(!this._match(qe.keywords.const))return null;const m=this._consume(qe.tokens.name,"Expected variable name"),g=this._currentLine;let _=null;if(this._match(qe.tokens.colon)){const i=this._attribute();_=this._type_decl(),null!=_&&(_.attributes=i)}let b=null;this._consume(qe.tokens.equal,"const declarations require an assignment");const y=this._short_circuit_or_expression();try{let i=[re.f32],g=y.constEvaluate(this._exec,i);g instanceof Oe&&this._validateTypeRange(g.value,i[0]),i[0]instanceof oe&&null===i[0].format&&g.typeInfo instanceof a&&null!==g.typeInfo.format&&("f16"===g.typeInfo.format.name?i[0].format=re.f16:"f32"===g.typeInfo.format.name?i[0].format=re.f32:"i32"===g.typeInfo.format.name?i[0].format=re.i32:"u32"===g.typeInfo.format.name?i[0].format=re.u32:"bool"===g.typeInfo.format.name?i[0].format=re.bool:console.error(`TODO:impelement template format type ${g.typeInfo.format.name}`)),b=this._updateNode(new ge(g,i[0])),this._exec.context.setVariable(m.toString(),g)}catch(i){b=y}if(null!==_&&b instanceof ge){if("x32"!==b.type.name&&_.getTypeName()!==b.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${b.type.name} to ${_.name}. Line:${this._currentLine}`);b.type=_,b.isScalar&&this._validateTypeRange(b.scalarValue,b.type)}else null===_&&b instanceof ge&&(_=null!==(i=null==b?void 0:b.type)&&void 0!==i?i:re.f32,_===re.x32&&(_=re.i32));const T=this._updateNode(new U(m.toString(),_,"","",b),g);return this._context.constants.set(T.name,T),T}_global_let_decl(){if(!this._match(qe.keywords.let))return null;const i=this._currentLine,m=this._consume(qe.tokens.name,"Expected variable name");let g=null;if(this._match(qe.tokens.colon)){const i=this._attribute();g=this._type_decl(),null!=g&&(g.attributes=i)}let _=null;if(this._match(qe.tokens.equal)&&(_=this._const_expression()),null!==g&&_ instanceof ge){if("x32"!==_.type.name&&g.getTypeName()!==_.type.getTypeName())throw this._error(this._peek(),`Invalid cast from ${_.type.name} to ${g.name}. Line:${this._currentLine}`);_.type=g}else null===g&&_ instanceof ge&&(g="x32"===_.type.name?re.i32:_.type);return _ instanceof ge&&_.isScalar&&this._validateTypeRange(_.scalarValue,g),this._updateNode(new M(m.toString(),g,"","",_),i)}_const_expression(){return this._short_circuit_or_expression()}_variable_decl(){if(!this._match(qe.keywords.var))return null;const i=this._currentLine;let m="",g="";this._match(qe.tokens.less_than)&&(m=this._consume(qe.storage_class,"Expected storage_class.").toString(),this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode.").toString()),this._consume(qe.tokens.greater_than,"Expected '>'."));const _=this._consume(qe.tokens.name,"Expected variable name");let b=null;if(this._match(qe.tokens.colon)){const i=this._attribute();b=this._type_decl(),null!=b&&(b.attributes=i)}return this._updateNode(new B(_.toString(),b,m,g,null),i)}_override_decl(){if(!this._match(qe.keywords.override))return null;const i=this._consume(qe.tokens.name,"Expected variable name");let m=null;if(this._match(qe.tokens.colon)){const i=this._attribute();m=this._type_decl(),null!=m&&(m.attributes=i)}return this._updateNode(new F(i.toString(),m,null))}_diagnostic(){this._consume(qe.tokens.paren_left,"Expected '('");const i=this._consume(qe.tokens.ident,"Expected severity control name.");this._consume(qe.tokens.comma,"Expected ','");let m=this._consume(qe.tokens.ident,"Expected diagnostic rule name.").toString();return this._match(qe.tokens.period)&&(m+=`.${this._consume(qe.tokens.ident,"Expected diagnostic message.").toString()}`),this._consume(qe.tokens.paren_right,"Expected ')'"),this._updateNode(new J(i.toString(),m))}_enable_directive(){const i=this._consume(qe.tokens.ident,"identity expected.");return this._updateNode(new Y(i.toString()))}_requires_directive(){const i=[this._consume(qe.tokens.ident,"identity expected.").toString()];for(;this._match(qe.tokens.comma);){const m=this._consume(qe.tokens.ident,"identity expected.");i.push(m.toString())}return this._updateNode(new K(i))}_type_alias(){const i=this._consume(qe.tokens.ident,"identity expected.");this._consume(qe.tokens.equal,"Expected '=' for type alias.");let m=this._type_decl();if(null===m)throw this._error(this._peek(),"Expected Type for Alias.");this._context.aliases.has(m.name)&&(m=this._context.aliases.get(m.name).type);const g=this._updateNode(new ee(i.toString(),m));return this._context.aliases.set(g.name,g),g}_type_decl(){if(this._check([qe.tokens.ident,...qe.texel_format,qe.keywords.bool,qe.keywords.f32,qe.keywords.i32,qe.keywords.u32])){const i=this._advance().toString();if(this._context.structs.has(i))return this._context.structs.get(i);if(this._context.aliases.has(i))return this._context.aliases.get(i).type;if(!this._getType(i)){const m=this._updateNode(new ae(i));return this._forwardTypeCount++,m}return this._updateNode(new re(i))}let i=this._texture_sampler_types();if(i)return i;if(this._check(qe.template_types)){let i=this._advance().toString(),m=null,g=null;return this._match(qe.tokens.less_than)&&(m=this._type_decl(),g=null,this._match(qe.tokens.comma)&&(g=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for type.")),this._updateNode(new oe(i,m,g))}if(this._match(qe.keywords.ptr)){let i=this._previous().toString();this._consume(qe.tokens.less_than,"Expected '<' for pointer.");const m=this._consume(qe.storage_class,"Expected storage_class for pointer");this._consume(qe.tokens.comma,"Expected ',' for pointer.");const g=this._type_decl();let _=null;return this._match(qe.tokens.comma)&&(_=this._consume(qe.access_mode,"Expected access_mode for pointer").toString()),this._consume(qe.tokens.greater_than,"Expected '>' for pointer."),this._updateNode(new le(i,m.toString(),g,_))}const m=this._attribute();if(this._match(qe.keywords.array)){let g=null,_=-1;const b=this._previous();let y=null;if(this._match(qe.tokens.less_than)){g=this._type_decl(),this._context.aliases.has(g.name)&&(g=this._context.aliases.get(g.name).type);let m="";if(this._match(qe.tokens.comma)){y=this._shift_expression();try{m=y.constEvaluate(this._exec).toString(),y=null}catch(i){m="1"}}this._consume(qe.tokens.greater_than,"Expected '>' for array."),_=m?parseInt(m):0}const T=this._updateNode(new ce(b.toString(),m,g,_));return y&&this._deferArrayCountEval.push({arrayType:T,countNode:y}),T}return null}_texture_sampler_types(){if(this._match(qe.sampler_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.depth_texture_type))return this._updateNode(new ue(this._previous().toString(),null,null));if(this._match(qe.sampled_texture_type)||this._match(qe.multisampled_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._type_decl();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,null))}if(this._match(qe.storage_texture_type)){const i=this._previous();this._consume(qe.tokens.less_than,"Expected '<' for sampler type.");const m=this._consume(qe.texel_format,"Invalid texel format.").toString();this._consume(qe.tokens.comma,"Expected ',' after texel format.");const g=this._consume(qe.access_mode,"Expected access mode for storage texture type.").toString();return this._consume(qe.tokens.greater_than,"Expected '>' for sampler type."),this._updateNode(new ue(i.toString(),m,g))}return null}_attribute(){let i=[];for(;this._match(qe.tokens.attr);){const m=this._consume(qe.attribute_name,"Expected attribute name"),g=this._updateNode(new Ce(m.toString(),null));if(this._match(qe.tokens.paren_left)){if(g.value=this._consume(qe.literal_or_ident,"Expected attribute value").toString(),this._check(qe.tokens.comma)){this._advance();do{const i=this._consume(qe.literal_or_ident,"Expected attribute value").toString();g.value instanceof Array||(g.value=[g.value]),g.value.push(i)}while(this._match(qe.tokens.comma))}this._consume(qe.tokens.paren_right,"Expected ')'")}i.push(g)}return 0==i.length?null:i}}class _t extends rt{constructor(i){super(),i&&this.update(i)}update(i){const m=(new mt).parse(i);this.updateAST(m)}}class UniformType{static get i32(){return{numElements:1,align:4,size:4,type:"i32",wgslType:"i32",View:Int32Array}}static get u32(){return{numElements:1,align:4,size:4,type:"u32",wgslType:"u32",View:Uint32Array}}static get f32(){return{numElements:1,align:4,size:4,type:"f32",wgslType:"f32",View:Float32Array}}static get f16(){return{numElements:1,align:2,size:2,type:"f16",wgslType:"f16",View:Uint16Array}}static get vec2f32(){return{numElements:2,align:8,size:8,type:"f32",wgslType:"vec2<f32>",View:Float32Array}}static get vec2i32(){return{numElements:2,align:8,size:8,type:"i32",wgslType:"vec2<i32>",View:Int32Array}}static get vec2u32(){return{numElements:2,align:8,size:8,type:"u32",wgslType:"vec2<u32>",View:Uint32Array}}static get vec2u16(){return{numElements:2,align:4,size:4,type:"u16",wgslType:"vec2<u16>",View:Uint16Array}}static get vec3i32(){return{numElements:3,align:16,size:12,type:"i32",wgslType:"vec3<i32>",View:Int32Array}}static get vec3u32(){return{numElements:3,align:16,size:12,type:"u32",wgslType:"vec3<u32>",View:Uint32Array}}static get vec3f32(){return{numElements:3,align:16,size:12,type:"f32",wgslType:"vec3<f32>",View:Float32Array}}static get vec3u16(){return{numElements:3,align:8,size:6,type:"u16",wgslType:"vec3<u16>",View:Uint16Array}}static get vec4i32(){return{numElements:4,align:16,size:16,type:"i32",wgslType:"vec4<i32>",View:Int32Array}}static get vec4u32(){return{numElements:4,align:16,size:16,type:"u32",wgslType:"vec4<u32>",View:Uint32Array}}static get vec4f32(){return{numElements:4,align:16,size:16,type:"f32",wgslType:"vec4<f32>",View:Float32Array}}static get vec4u16(){return{numElements:4,align:8,size:8,type:"u16",wgslType:"vec4<u16>",View:Uint16Array}}static get mat2x2f32(){return{numElements:4,align:8,size:16,type:"f32",wgslType:"mat2x2<f32>",View:Float32Array}}static get mat2x2u16(){return{numElements:4,align:4,size:8,type:"u16",wgslType:"mat2x2<u16>",View:Uint16Array}}static get mat3x2f32(){return{numElements:6,align:8,size:24,type:"f32",wgslType:"mat3x2<f32>",View:Float32Array}}static get mat3x2u16(){return{numElements:6,align:4,size:12,type:"u16",wgslType:"mat3x2<u16>",View:Uint16Array}}static get mat3x3f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat3x3<f32>",View:Float32Array}}static get mat4x2f32(){return{numElements:8,align:8,size:32,type:"f32",wgslType:"mat4x2<f32>",View:Float32Array}}static get mat4x2u16(){return{numElements:8,align:4,size:16,type:"u16",wgslType:"mat4x2<u16>",View:Uint16Array}}static get mat2x3f32(){return{numElements:8,align:16,size:32,type:"f32",wgslType:"mat2x3<f32>",View:Float32Array}}static get mat2x3u16(){return{numElements:8,align:8,size:16,type:"u16",wgslType:"mat2x3<u16>",View:Uint16Array}}static get mat4x4f32(){return{numElements:16,align:16,size:64,type:"f32",wgslType:"mat4x4<f32>",View:Float32Array}}static get mat4x4u16(){return{numElements:16,align:8,size:32,type:"u16",wgslType:"mat4x4<u16>",View:Uint16Array}}}Object.freeze(UniformType);const Rr={TILE_COUNT_X:32,TILE_COUNT_Y:32,TILE_COUNT_Z:48,WORKGROUP_SIZE_X:8,WORKGROUP_SIZE_Y:4,WORKGROUP_SIZE_Z:8,MAX_LIGHTS_PER_CLUSTER:100,MAX_CLUSTER_LIGHTS:1024,getTotalTileSize:()=>Rr.TILE_COUNT_X*Rr.TILE_COUNT_Y*Rr.TILE_COUNT_Z,getClusterLightsBufferSize:()=>{const i=Rr.getTotalTileSize();return 8*i+8*Rr.MAX_LIGHTS_PER_CLUSTER*i+4},getDispatchSize:()=>[Math.ceil(Rr.TILE_COUNT_X/Rr.WORKGROUP_SIZE_X),Math.ceil(Rr.TILE_COUNT_Y/Rr.WORKGROUP_SIZE_Y),Math.ceil(Rr.TILE_COUNT_Z/Rr.WORKGROUP_SIZE_Z)]};Object.freeze(Rr);const Cr=Object.freeze({SYSTEM_UNIFORM:"struct DirectionalLight { direction:vec3<f32>, color:vec3<f32>, intensity:f32,\n};\nstruct AmbientLight { color:vec3<f32>, intensity:f32\n};\nstruct Camera { cameraMatrix:mat4x4<f32>, cameraPosition:vec3<f32>, nearClipping:f32, farClipping:f32\n};\nstruct SystemUniform { projectionMatrix:mat4x4<f32>, inverseProjectionMatrix:mat4x4<f32>, projectionCameraMatrix:mat4x4<f32>, camera:Camera, resolution:vec2<f32>, viewPosition:vec2<f32>, directionalLightCount:u32, directionalLights:array<DirectionalLight,3>, directionalLightProjectionViewMatrix:mat4x4<f32>, directionalLightProjectionMatrix:mat4x4<f32>, directionalLightViewMatrix:mat4x4<f32>, shadowDepthTextureSize:u32, bias:f32, ambientLight:AmbientLight, time:f32, useIblTexture:u32, isView3D:u32,\n};\n@group(0) @binding(0) var<uniform> systemUniforms:SystemUniform;\n@group(0) @binding(1) var directionalShadowMapSampler:sampler_comparison;\n@group(0) @binding(2) var directionalShadowMap:texture_depth_2d;\n@group(0) @binding(3) var iblTextureSampler:sampler;\n@group(0) @binding(7) var renderPath1ResultTextureSampler:sampler;\n@group(0) @binding(8) var renderPath1ResultTexture:texture_2d<f32>;\n@group(0) @binding(9) var packedTextureSampler:sampler;\n@group(0) @binding(10) var ibl_environmentTexture:texture_cube<f32>;\n@group(0) @binding(11) var ibl_irradianceTexture:texture_cube<f32>;\nconst clusterLight_indicesLength:u32=u32(REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu * REDGPU_DEFINE_TOTAL_TILESu);\nconst clusterLight_tileCount=vec3<u32>(REDGPU_DEFINE_TILE_COUNT_Xu,REDGPU_DEFINE_TILE_COUNT_Yu,REDGPU_DEFINE_TILE_COUNT_Zu);\nstruct ClusterLights { offset:u32, count:u32\n};\nstruct ClusterLightsGroup { offset:atomic<u32>, lights:array<ClusterLights,REDGPU_DEFINE_TOTAL_TILES>, indices:array<u32,clusterLight_indicesLength>\n};\nstruct ClusterLight_ClusterCube { minAABB:vec4<f32>, maxAABB:vec4<f32> };\nstruct ClusterLight_Clusters { cubeList:array<ClusterLight_ClusterCube,REDGPU_DEFINE_TOTAL_TILES>\n};\nfn linearDepth(depthSample:f32) -> f32 { return systemUniforms.camera.farClipping*systemUniforms.camera.nearClipping/fma(depthSample,systemUniforms.camera.nearClipping-systemUniforms.camera.farClipping,systemUniforms.camera.farClipping);\n}\nfn getClusterLightClusterIndex(fragCoord:vec4<f32>) -> u32 { let tile=getClusterLightTile(fragCoord); return tile.x + tile.y * clusterLight_tileCount.x + tile.z * clusterLight_tileCount.x * clusterLight_tileCount.y;\n}\nfn getClusterLightTile(fragCoord:vec4<f32>) -> vec3<u32> { let sliceScale=f32(clusterLight_tileCount.z)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping); let sliceBias=-(f32(clusterLight_tileCount.z) * log2(systemUniforms.camera.nearClipping)/log2(systemUniforms.camera.farClipping/systemUniforms.camera.nearClipping)); let zTile=u32(max(log2(linearDepth(fragCoord.z)) * sliceScale + sliceBias,0.0)); return vec3<u32>(u32(fragCoord.x/(systemUniforms.resolution.x/f32(clusterLight_tileCount.x))), u32(fragCoord.y/(systemUniforms.resolution.y/f32(clusterLight_tileCount.y))), zTile);\n}\nstruct ClusterLight { position:vec3<f32>,radius:f32, color:vec3<f32>,intensity:f32, isSpotLight:f32,directionX:f32,directionY:f32,directionZ:f32, outerCutoff:f32,innerCutoff:f32,\n};\nstruct ClusterLightList { count:vec4<f32>, lights:array<ClusterLight>\n};\n@group(0) @binding(5) var<storage> clusterLightList:ClusterLightList;\n@group(0) @binding(6) var<storage,read_write> clusterLightGroup:ClusterLightsGroup;\n",calcTintBlendMode:"\nfn rgbToHsl(rgb:vec3<f32>) -> vec3<f32> { let maxVal:f32=max(max(rgb.r,rgb.g),rgb.b); let minVal:f32=min(min(rgb.r,rgb.g),rgb.b); let delta:f32=maxVal - minVal; let eps=1e-6; let lightness:f32=(maxVal + minVal) * 0.5; if (delta < eps) { return vec3<f32>(0.0,0.0,lightness); } var saturation:f32; if (lightness < 0.5) { saturation=delta/(maxVal + minVal + eps); } else { saturation=delta/(2.0 - maxVal - minVal + eps); } var hue:f32=0.0; if (abs(rgb.r - maxVal) < eps) { hue=(rgb.g - rgb.b)/delta; if (rgb.g < rgb.b) { hue +=6.0; } } else if (abs(rgb.g - maxVal) < eps) { hue=(rgb.b - rgb.r)/delta + 2.0; } else { hue=(rgb.r - rgb.g)/delta + 4.0; } hue=hue/6.0; return vec3<f32>(hue,saturation,lightness);\n}\nfn hslToRgb(hsl:vec3<f32>) -> vec3<f32> { let h=hsl.x; let s=hsl.y; let l=hsl.z; if (s==0.0) { return vec3<f32>(l,l,l); } var q:f32; if (l < 0.5) { q=l * (1.0 + s); } else { q=l + s - l * s; } let p=2.0 * l - q; var r:f32; var g:f32; var b:f32; for (var i:i32=0;i < 3;i=i + 1) { var t:f32; if (i==0) { t=h + 1.0/3.0; } else if (i==1) { t=h; } else { t=h - 1.0/3.0; } if (t < 0.0) { t=t + 1.0; } if (t > 1.0) { t=t - 1.0; } var color:f32; if (t < 1.0/6.0) { color=p + (q - p) * 6.0 * t; } else if (t < 1.0/2.0) { color=q; } else if (t < 2.0/3.0) { color=p + (q - p) * (2.0/3.0 - t) * 6.0; } else { color=p; } if (i==0) { r=color; } else if (i==1) { g=color; } else { b=color; } } return vec3<f32>(r,g,b);\n}\nfn calcTintBlendMode(baseColor:vec4<f32>,tintBlendMode:u32,tint:vec4<f32>) -> vec4<f32> { var tintedColor:vec3<f32>; let eps=1e-6; switch (tintBlendMode) { case 0u:{  tintedColor=mix(baseColor.rgb,tint.rgb,tint.a); } case 1u:{  tintedColor=baseColor.rgb * tint.rgb; } case 2u:{  tintedColor=max(baseColor.rgb,tint.rgb); } case 3u:{  tintedColor=1.0 - (1.0 - baseColor.rgb) * (1.0 - tint.rgb); } case 4u:{  tintedColor=clamp(baseColor.rgb + tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0)); } case 5u:{  tintedColor=clamp(baseColor.rgb - tint.rgb,vec3<f32>(0.0),vec3<f32>(1.0)); } case 6u:{  tintedColor=min(baseColor.rgb,tint.rgb); } case 7u:{  tintedColor=mix( 2.0 * baseColor.rgb * tint.rgb, 1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb), step(vec3<f32>(0.5),baseColor.rgb) ); } case 8u:{  tintedColor=clamp(baseColor.rgb/(1.0 - tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 9u:{  tintedColor=1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 10u:{  tintedColor=mix( 2.0 * baseColor.rgb * tint.rgb, 1.0 - 2.0 * (1.0 - baseColor.rgb) * (1.0 - tint.rgb), step(vec3<f32>(0.5),tint.rgb) ); } case 11u:{  tintedColor=mix( baseColor.rgb * (tint.rgb + tint.rgb - vec3<f32>(1.0)), baseColor.rgb + tint.rgb - baseColor.rgb * tint.rgb, step(vec3<f32>(0.5),tint.rgb) ); } case 12u:{  tintedColor=abs(baseColor.rgb - tint.rgb); } case 13u:{  tintedColor=baseColor.rgb + tint.rgb - 2.0 * baseColor.rgb * tint.rgb; } case 14u:{  tintedColor=clamp(baseColor.rgb/(tint.rgb + eps),vec3<f32>(0.0),vec3<f32>(1.0)); } case 15u:{  tintedColor=mix( clamp(baseColor.rgb/(1.0 - (tint.rgb - vec3<f32>(0.5)) * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)), 1.0 - clamp((1.0 - baseColor.rgb)/(tint.rgb * 2.0 + eps),vec3<f32>(0.0),vec3<f32>(1.0)), step(vec3<f32>(0.5),tint.rgb) ); } case 16u:{  tintedColor=clamp(baseColor.rgb + tint.rgb - vec3<f32>(1.0),vec3<f32>(0.0),vec3<f32>(1.0)); } case 17u:{  tintedColor=mix( min(baseColor.rgb,2.0 * tint.rgb), max(baseColor.rgb,2.0 * tint.rgb - vec3<f32>(1.0)), step(vec3<f32>(0.5),tint.rgb) ); } case 18u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(baseHsl.x,tintHsl.y,baseHsl.z)); } case 19u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(tintHsl.x,baseHsl.y,baseHsl.z)); } case 20u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(baseHsl.x,baseHsl.y,tintHsl.z)); } case 21u:{  let baseHsl=rgbToHsl(baseColor.rgb); let tintHsl=rgbToHsl(tint.rgb); tintedColor=hslToRgb(vec3<f32>(tintHsl.x,tintHsl.y,baseHsl.z)); } case 22u:{  tintedColor=1.0 - abs(1.0 - baseColor.rgb - tint.rgb); } default:{ tintedColor=baseColor.rgb; } } return vec4<f32>(tintedColor,baseColor.a * tint.a);\n}\n",calcDisplacements:"fn calcDisplacementPosition(input_position:vec3<f32>,input_vertexNormal:vec3<f32>,displacementTexture:texture_2d<f32>,displacementTextureSampler:sampler,displacementScale:f32,input_uv:vec2<f32>,mipLevel:f32) -> vec3<f32> { let displacementSample=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,mipLevel).r; let scaledDisplacement=(displacementSample - 0.5) * displacementScale; let displacedPosition=input_position + input_vertexNormal * scaledDisplacement; return displacedPosition;\n}\nfn calcDisplacementNormal( input_vertexNormal:vec3<f32>, displacementTexture:texture_2d<f32>, displacementTextureSampler:sampler, displacementScale:f32, input_uv:vec2<f32>, mipLevel:f32\n) -> vec3<f32> { let textureDimensions=vec2<f32>(textureDimensions(displacementTexture,0)); let adaptiveOffset=vec2<f32>(1.0)/textureDimensions; let actualMipLevel=mipLevel; let center=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv,actualMipLevel).r; let left=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(adaptiveOffset.x,0.0),actualMipLevel).r; let right=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(adaptiveOffset.x,0.0),actualMipLevel).r; let down=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv - vec2<f32>(0.0,adaptiveOffset.y),actualMipLevel).r; let up=textureSampleLevel(displacementTexture,displacementTextureSampler,input_uv + vec2<f32>(0.0,adaptiveOffset.y),actualMipLevel).r; let ddx=((right - 0.5) - (left - 0.5)) * displacementScale/(2.0 * adaptiveOffset.x); let ddy=((up - 0.5) - (down - 0.5)) * displacementScale/(2.0 * adaptiveOffset.y); let tangentSpaceNormal=normalize(vec3<f32>(-ddx,-ddy,1.0)); let worldNormal=normalize(input_vertexNormal); let normalStrength=clamp(1.0 - mipLevel * 0.1,0.2,1.0); let blendedNormal=normalize(mix(worldNormal,tangentSpaceNormal,normalStrength * 0.3)); return blendedNormal;\n}\n",drawDirectionalShadowDepth:"struct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); #redgpu_if useDisplacementTexture { let distance=distance(position.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition( input_position, input_vertexNormal, displacementTexture, displacementTextureSampler, vertexUniforms.displacementScale, input_uv, mipLevel ); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } #redgpu_endIf output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n",picking:"@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let input_position=inputData.position; let u_modelMatrix=vertexUniforms.modelMatrix; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0); output.position=u_projectionMatrix * u_cameraMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n",getBillboardMatrix:"fn getBillboardMatrix(cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>) -> mat4x4<f32> { let scaleX=length(vec3<f32>(modelMatrix[0].xyz)); let scaleY=length(vec3<f32>(modelMatrix[1].xyz)); let scaleZ=length(vec3<f32>(modelMatrix[2].xyz)); let scaleMatrix=mat4x4<f32>( vec4<f32>(scaleX,0.0,0.0,0.0), vec4<f32>(0.0,scaleY,0.0,0.0), vec4<f32>(0.0,0.0,scaleZ,0.0), vec4<f32>(0.0,0.0,0.0,1.0) ); var resultMatrix=cameraMatrix * modelMatrix; resultMatrix[0][0]=1.0;resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0; resultMatrix[1][0]=0.0;resultMatrix[1][1]=1.0;resultMatrix[1][2]=0.0; resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=1.0; return resultMatrix * scaleMatrix;\n}\nfn getBillboardMatrixNoScaleRatio( cameraMatrix:mat4x4<f32>,modelMatrix:mat4x4<f32>)-> mat4x4<f32>{ var resultMatrix=cameraMatrix * modelMatrix; resultMatrix[0][0]=modelMatrix[0][0];resultMatrix[0][1]=0.0;resultMatrix[0][2]=0.0; resultMatrix[1][0]=0.0;resultMatrix[1][1]=modelMatrix[1][1];resultMatrix[1][2]=0.0; resultMatrix[2][0]=0.0;resultMatrix[2][1]=0.0;resultMatrix[2][2]=modelMatrix[2][2]; return resultMatrix;\n}\n",extractScaleAndTranslation:"fn extractScaleAndTranslation(modelMatrix:mat4x4<f32>) -> mat4x4<f32> { let scaleX=length(vec3<f32>(modelMatrix[0].xyz)); let scaleY=length(vec3<f32>(modelMatrix[1].xyz)); let scaleZ=length(vec3<f32>(modelMatrix[2].xyz)); let scaleMatrix=mat4x4<f32>( vec4<f32>(scaleX,0.0,0.0,0.0), vec4<f32>(0.0,scaleY,0.0,0.0), vec4<f32>(0.0,0.0,scaleZ,0.0), vec4<f32>(0.0,0.0,0.0,1.0) ); return mat4x4<f32>( scaleMatrix[0], scaleMatrix[1], scaleMatrix[2], modelMatrix[3]  );\n}\n",calcDirectionalShadowVisibility:"fn calcDirectionalShadowVisibility( directionalShadowMap:texture_depth_2d, directionalShadowMapSampler:sampler_comparison, shadowDepthTextureSize:u32, bias:f32, shadowPos:vec3<f32>\n) -> f32 { let oneOverShadowDepthTextureSize=1.0/f32(shadowDepthTextureSize); let shadowDepth=clamp(shadowPos.z,0.0,1.0); var visibility:f32=0.0; for (var y=-1;y <=1;y++) { for (var x=-1;x <=1;x++) { let offset=vec2f(vec2(x,y)) * oneOverShadowDepthTextureSize; let tUV=shadowPos.xy + offset; let sampleVisibility=textureSampleCompare( directionalShadowMap, directionalShadowMapSampler, tUV, shadowDepth - bias ); if (tUV.x < 0.0 || tUV.x > 1.0 || tUV.y < 0.0 || tUV.y > 1.0) { visibility +=1.0; } else { visibility +=sampleVisibility; } } } visibility/=9.0; let depthFactor=shadowDepth; let minVisibility=0.2 + depthFactor * 0.6; return max(visibility,minVisibility);\n}\n",drawPicking:"\n@fragment\nfn picking(inputData:InputData) -> @location(0) vec4<f32> { var finalColor:vec4<f32>=inputData.pickingId; return finalColor;\n}\n",normalFunctions:"\nfn cotangent_frame( N:vec3<f32>,p:vec3<f32>,uv:vec2<f32>) -> mat3x3<f32>{ let dp1:vec3<f32>=dpdx( p ); let dp2:vec3<f32>=dpdy( p ); let duv1:vec2<f32>=dpdx( uv ); let duv2:vec2<f32>=dpdy( uv ); let dp2perp:vec3<f32>=cross( dp2,N ); let dp1perp:vec3<f32>=cross( N,dp1 ); let T:vec3<f32>=dp2perp * duv1.x + dp1perp * duv2.x; let B:vec3<f32>=dp2perp * duv1.y + dp1perp * duv2.y; let invmax:f32=inverseSqrt( max( dot(T,T),dot(B,B) ) ); return mat3x3<f32>( T * invmax,B * invmax,N );\n}\nfn perturb_normal( N:vec3<f32>,V:vec3<f32>,texcoord:vec2<f32>,normalColor:vec3<f32>,normalPower:f32 ) -> vec3<f32> { var map:vec3<f32>=normalColor; map=map * 255./127. - 128./127.; map=vec3<f32>(map.xy * -normalPower,map.z); let TBN:mat3x3<f32>=cotangent_frame(N,V,texcoord); return normalize(TBN * map);\n}\n",calcPrePathBackground:"fn calcPrePathBackground( u_useKHR_materials_volume:bool,thicknessParameter:f32,u_KHR_dispersion:f32,u_KHR_attenuationDistance:f32,u_KHR_attenuationColor:vec3<f32>, ior:f32,roughnessParameter:f32,albedo:vec3<f32>, projectionCameraMatrix:mat4x4<f32>,input_vertexPosition:vec3<f32>,input_ndcPosition:vec3<f32>, V:vec3<f32>,N:vec3<f32>, renderPath1ResultTexture:texture_2d<f32>,renderPath1ResultTextureSampler:sampler\n) -> vec3<f32> { var prePathBackground=vec3<f32>(0.0); let transmissionMipLevel:f32=roughnessParameter * f32(textureNumLevels(renderPath1ResultTexture) - 1); if(u_useKHR_materials_volume){ var iorR:f32=ior; var iorG:f32=ior; var iorB:f32=ior; if(u_KHR_dispersion>0.0){ let halfSpread:f32=(ior - 1.0) * 0.025 * u_KHR_dispersion; iorR=ior + halfSpread; iorG=ior; iorB=ior - halfSpread; } let refractedVecR:vec3<f32>=refract(-V,N,1.0/iorR); let refractedVecG:vec3<f32>=refract(-V,N,1.0/iorG); let refractedVecB:vec3<f32>=refract(-V,N,1.0/iorB); let worldPosR:vec3<f32>=input_vertexPosition + refractedVecR * thicknessParameter; let worldPosG:vec3<f32>=input_vertexPosition + refractedVecG * thicknessParameter; let worldPosB:vec3<f32>=input_vertexPosition + refractedVecB * thicknessParameter; let clipPosR:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosR,1.0); let clipPosG:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosG,1.0); let clipPosB:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPosB,1.0); let ndcR:vec2<f32>=clipPosR.xy/clipPosR.w * 0.5 + 0.5; let ndcG:vec2<f32>=clipPosG.xy/clipPosG.w * 0.5 + 0.5; let ndcB:vec2<f32>=clipPosB.xy/clipPosB.w * 0.5 + 0.5; let finalUV_R:vec2<f32>=vec2<f32>(ndcR.x,1.0 - ndcR.y); let finalUV_G:vec2<f32>=vec2<f32>(ndcG.x,1.0 - ndcG.y); let finalUV_B:vec2<f32>=vec2<f32>(ndcB.x,1.0 - ndcB.y); prePathBackground.r=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_R,transmissionMipLevel).r; prePathBackground.g=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_G,transmissionMipLevel).g; prePathBackground.b=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV_B,transmissionMipLevel).b; } else { let refractedVec:vec3<f32>=refract(-V,N,1.0/ior); let worldPos:vec3<f32>=input_vertexPosition + refractedVec * thicknessParameter; let clipPos:vec4<f32>=projectionCameraMatrix * vec4<f32>(worldPos,1.0); let ndc:vec2<f32>=clipPos.xy/clipPos.w * 0.5 + 0.5; let finalUV:vec2<f32>=vec2<f32>(ndc.x,1.0 - ndc.y); prePathBackground=textureSampleLevel(renderPath1ResultTexture,renderPath1ResultTextureSampler,finalUV,transmissionMipLevel).rgb; } prePathBackground *=albedo; return prePathBackground;\n}\n"});Object.freeze(Cr);class ShaderVariantGenerator{#G=new Map;#F;#V;constructor(i,m){this.#F=i,this.#V=m}getVariant(i){if(this.#G.has(i))return this.#G.get(i);const m="none"===i?[]:i.split("+"),g=this.#$(m);return this.#G.set(i,g),g}getCachedVariants(){return Array.from(this.#G.keys())}#$(i){let m=this.#F;for(let g=this.#V.length-1;g>=0;g--){const _=this.#V[g];m=i.includes(_.uniformName)?m.replace(_.fullMatch,_.ifBlock):m.replace(_.fullMatch,_.elseBlock||"")}return m}}const Pr=Object.keys(Cr).join("|"),Er=new RegExp(`#redgpu_include (${Pr})`,"g"),Ir=/REDGPU_DEFINE_(?:TILE_COUNT_[XYZ]|TOTAL_TILES|WORKGROUP_SIZE_[XYZ]|MAX_LIGHTS_PER_CLUSTER)/g,Br={REDGPU_DEFINE_TILE_COUNT_X:Rr.TILE_COUNT_X.toString(),REDGPU_DEFINE_TILE_COUNT_Y:Rr.TILE_COUNT_Y.toString(),REDGPU_DEFINE_TILE_COUNT_Z:Rr.TILE_COUNT_Z.toString(),REDGPU_DEFINE_TOTAL_TILES:Rr.getTotalTileSize().toString(),REDGPU_DEFINE_WORKGROUP_SIZE_X:Rr.WORKGROUP_SIZE_X.toString(),REDGPU_DEFINE_WORKGROUP_SIZE_Y:Rr.WORKGROUP_SIZE_Y.toString(),REDGPU_DEFINE_WORKGROUP_SIZE_Z:Rr.WORKGROUP_SIZE_Z.toString(),REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTER:Rr.MAX_LIGHTS_PER_CLUSTER.toString()},Lr=/#redgpu_if\s+(\w+)\b([\s\S]*?)(?:#redgpu_else([\s\S]*?))?#redgpu_endIf/g,Dr=new Map,preprocessWGSL=i=>{const m=(i=>{let m=0;for(let g=0;g<i.length;g++)m=(m<<5)-m+i.charCodeAt(g),m&=m;return m.toString(36)})(i),g=Dr.get(m);if(g)return g;const _=(i=>i.replace(Er,(i,m)=>Cr[m]||i))(i),b=(i=>i.replace(Ir,i=>Br[i]||i))(_),y=(i=>{const m=[];let g,_=0;for(Lr.lastIndex=0;null!==(g=Lr.exec(i));){const[i,b,y,T]=g;m.push({uniformName:b,ifBlock:y.trim(),elseBlock:T?.trim(),fullMatch:i,blockIndex:_++})}return m})(b);(i=>{if(!i.length)return;const m=new Map;i.forEach(i=>{m.set(i.uniformName,(m.get(i.uniformName)||0)+1)}),Array.from(m.entries()).filter(([i,m])=>m>1).length})(y);const T=((i,m)=>{let g=i;for(let i=m.length-1;i>=0;i--){const _=m[i];g=g.replace(_.fullMatch,_.ifBlock)}return g})(b,y),w=[...new Set(y.map(i=>i.uniformName))],P={cacheKey:m,defaultSource:T,shaderSourceVariant:new ShaderVariantGenerator(b,y),conditionalBlocks:w};return Math.pow(2,w.length),Dr.set(m,P),P},processMembers=(i,m=0,g=0)=>{let _=0,b=g;const y=i?.reduce((i,g,y)=>{const{type:T,offset:w,size:P,stride:$,count:H,isArray:q}=g,{format:W}=T,ye="array"===T.name?`${W.name}${W.format?`${W.format.name}`:""}`:`${T.name}${W?`${W.name}`:""}`;if(0===y&&(_=w),b=w+P,i[g.name]=((i,m,g)=>{const _=UniformType[g];return{uniformOffset:i.offset+m,stride:i.stride,isArray:i.isArray,typeInfo:_,View:_?.View}})(g,m,ye),q&&W.members){const m=processMembers(W.members).members;i[g.name].memberList=Array.from({length:H},(i,g)=>{const _={};for(const i in m){const b=_[i]={...m[i]};b.uniformOffset=b.uniformOffset+w+$*g}return _})}else T.members&&(i[g.name]=processMembers(T.members,w+m,b));return i},{});return{members:y,startOffset:_,endOffset:b}},Ur=new Map,parseWGSL=i=>{const{defaultSource:m,shaderSourceVariant:g,conditionalBlocks:_,cacheKey:b}=preprocessWGSL(i),y=Ur.get(b);let T;if(y)T=y;else{const i=new _t(m);T={uniforms:{...(P=i.uniforms,P.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},storage:{...(w=i.storage,w.reduce((i,m)=>(i[m.name]={name:m.name,...processMembers(m.members),arrayBufferByteLength:m.size,stride:m.stride,acccess:m.access,type:m.type},m.attributes?.forEach(g=>i[m.name][g.name]=+g.value),i),{}))},samplers:i.samplers,textures:i.textures,vertexEntries:i.entry.vertex.map(i=>i.name),fragmentEntries:i.entry.fragment.map(i=>i.name),computeEntries:i.entry.compute.map(i=>i.name)},Ur.set(b,T)}var w,P;return{...T,defaultSource:m,shaderSourceVariant:g,conditionalBlocks:_}},Ar={ZERO:"zero",ONE:"one",SRC:"src",ONE_MINUS_SRC:"one-minus-src",SRC_ALPHA:"src-alpha",ONE_MINUS_SRC_ALPHA:"one-minus-src-alpha",DST:"dst",ONE_MINUS_DST:"one-minus-dst",DST_ALPHA:"dst-alpha",ONE_MINUS_DST_ALPHA:"one-minus-dst-alpha",SRC_ALPHA_SATURATED:"src-alpha-saturated",CONSTANT:"constant",ONE_MINUS_CONSTANT:"one-minus-constant",SRC1:"src1",ONE_MINUS_SRC1:"one-minus-src1",SRC1_ALPHA:"src1-alpha",ONE_MINUS_SRC1_ALPHA:"one-minus-src1-alpha"};Object.freeze(Ar);const kr={ADD:"add",SUBTRACT:"subtract",REVERSE_SUBTRACT:"reverse-subtract",MIN:"min",MAX:"max"};Object.freeze(kr);class FragmentGPURenderInfo{fragmentShaderModule;fragmentShaderSourceVariant;fragmentShaderVariantConditionalBlocks;fragmentUniformInfo;fragmentBindGroupLayout;fragmentUniformBuffer;fragmentUniformBindGroup;fragmentState;constructor(i,m,g,_,b,y,T,w){this.fragmentShaderModule=i,this.fragmentShaderSourceVariant=m,this.fragmentShaderVariantConditionalBlocks=g,this.fragmentUniformInfo=_,this.fragmentBindGroupLayout=b,this.fragmentUniformBuffer=y,this.fragmentUniformBindGroup=T,this.fragmentState=w}}Object.freeze(FragmentGPURenderInfo);const Or=Object.values(Ar),Nr=Object.values(kr);class BlendState{state;#H;#z;#q;#K;constructor(i,m,g,_){this.#K=i,this.srcFactor=m,this.dstFactor=g,this.operation=_}get operation(){return this.#q}set operation(i){Nr.includes(i)||consoleAndThrowError(`Invalid GPUBlendOperation:${i}. Valid operations are ${Nr.join(",")}`),this.#q=i,this.#W()}get srcFactor(){return this.#H}set srcFactor(i){Or.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid srcFactor factors are ${Or.join(",")}`),this.#H=i,this.#W()}get dstFactor(){return this.#z}set dstFactor(i){Or.includes(i)||consoleAndThrowError(`Invalid GPUBlendFactor:${i}. Valid dstFactor factors are ${Or.join(",")}`),this.#z=i,this.#W()}#W(){const i=this.#q?{operation:this.#q}:{},m=this.#H?{srcFactor:this.#H}:{},g=this.#z?{dstFactor:this.#z}:{};this.state={...i,...m,...g},this.#K.dirtyPipeline=!0}}let Gr=class{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}};class ResourceStateCubeTexture{texture;srcList;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.srcList=i.srcList,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}class ResourceStateBitmapTexture{texture;src;cacheKey;useNum=0;uuid;constructor(i){this.texture=i,this.src=i.src,this.cacheKey=i.cacheKey,this.useNum=0,this.uuid=i.uuid}}const basicRegisterResource=(i,m)=>{const{uuid:g,targetResourceManagedState:_}=i,b=m instanceof ResourceStateCubeTexture||m instanceof Gr||m instanceof ResourceStateBitmapTexture;try{_.table[g]&&consoleAndThrowError(`Buffer with UUID ${g} is already registered.`),_.table[g]=m,_.length++,b||(_.videoMemory+=i.size)}catch(i){consoleAndThrowError(i.message)}};class ResourceStateUniformBuffer{static dirtyList=[];buffer;uuid;#X=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateUniformBuffer.dirtyList.push(this)}}const basicUnregisterResource=i=>{const{uuid:m,targetResourceManagedState:g}=i,{table:_}=g;_[m]&&(g.videoMemory-=i.size,delete _[m],g.length--)};class ManagedResourceBase extends ResourceBase{#Y;constructor(i,m){super(i),this.#Y=i.resourceManager[m]}get targetResourceManagedState(){return this.#Y}}class ABaseBuffer extends ManagedResourceBase{#j;constructor(i,m,g){super(i,m),this.#j=g}get usage(){return this.#j}}class AUniformBaseBuffer extends ABaseBuffer{#Z;#J;#Q;#ee;constructor(i,m,g,_,b=""){super(i,m,g),this.#J=_.byteLength,this.#Z={size:this.#J,usage:this.usage,label:b};try{this.#ee=i.gpuDevice.createBuffer(this.#Z)}catch(i){console.error("GPU 버퍼 생성에 실패했습니다:",i)}i.gpuDevice.queue.writeBuffer(this.#ee,0,_)}get gpuBuffer(){return this.#ee}get data(){return this.#Q}get size(){return this.#J}get uniformBufferDescriptor(){return this.#Z}destroy(){const i=this.#ee;i&&(this.#ee=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}writeBuffers(i){const{gpuDevice:m}=this.redGPUContext;let g=i.length;for(;g--;){const[_,b]=i[g];m.queue.writeBuffer(this.gpuBuffer,_.uniformOffset,new _.View("number"==typeof b?[b]:b))}}writeBuffer(i,m){this.redGPUContext.gpuDevice.queue.writeBuffer(this.gpuBuffer,i.uniformOffset,new i.View("number"==typeof m?[m]:m))}}const getCacheBufferFromResourceState=(i,m)=>{const{targetResourceManagedState:g}=i,_=((i,m)=>{if(!m)return;let g;const _=i.table;for(const i in _)if(_[i].label===m){g=_[i];break}return g})(g,m);return _?g.table[i.uuid].buffer:null};class UniformBuffer extends AUniformBaseBuffer{constructor(i,m,g="",_=""){super(i,"managedUniformBufferState",GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,m,g);const b=getCacheBufferFromResourceState(this,_);if(b)return b;_&&(this.name=_),basicRegisterResource(this,new ResourceStateUniformBuffer(this))}}Object.freeze(UniformBuffer);const Fr={CLAMP_TO_EDGE:"clamp-to-edge",REPEAT:"repeat",MIRRORED_REPEAT:"mirror-repeat"};Object.freeze(Fr);const Vr={NEAREST:"nearest",LINEAR:"linear"};Object.freeze(Vr);const $r={NEAREST:"nearest",LINEAR:"linear"};Object.freeze($r);const Hr=new Map,zr=Object.values(Vr),qr=Object.values(Fr),Kr=Object.values($r);class Sampler extends ResourceBase{#te;#ne=Vr.LINEAR;#re=Vr.LINEAR;#ie=$r.LINEAR;#ae=Fr.REPEAT;#se=Fr.REPEAT;#oe=Fr.REPEAT;#ue;#le;#ce;#he=1;constructor(i,m){super(i),this.#fe(m)}get addressModeU(){return this.#ae}set addressModeU(i){this.#de(i,"addressModeU")}get addressModeV(){return this.#se}set addressModeV(i){this.#de(i,"addressModeV")}get addressModeW(){return this.#oe}set addressModeW(i){this.#de(i,"addressModeW")}get mipmapFilter(){return this.#ie}set mipmapFilter(i){this.#me(i,Kr,"mipmapFilter")}get gpuSampler(){return this.#te}get magFilter(){return this.#ne}set magFilter(i){this.#me(i,zr,"magFilter")}get minFilter(){return this.#re}set minFilter(i){this.#me(i,zr,"minFilter")}get maxAnisotropy(){return this.#he}set maxAnisotropy(i){validateUintRange(i,1,16),this.#he=i,this.#fe()}get isAnisotropyValid(){return!this.#he||"linear"===this.#ne&&"linear"===this.#re&&"linear"===this.#ie}#pe(){this.__fireListenerList()}#de(i,m){if(qr.includes(i)){switch(m){case"addressModeU":this.#ae=i;break;case"addressModeV":this.#se=i;break;case"addressModeW":this.#oe=i}this.#fe()}else consoleAndThrowError(`Invalid ${m} value. Must be one of ${qr.join(",")},but received:${i}.`)}#me(i,m,g){if(m.includes(i)||null===i){switch(g){case"mipmapFilter":this.#ie=i;break;case"magFilter":this.#ne=i;break;case"minFilter":this.#re=i}this.#fe()}else consoleAndThrowError(`Invalid ${g} value. Must be one of ${m.join(",")},but received:${i}.`)}#ge(){return`${this.#ne}:${this.#re}:${this.#ie}:${this.#ae}:${this.#se}:${this.#oe}:${this.#ue}:${this.#le}:${this.#ce}:${this.#he}`}#fe(i){i&&(i.magFilter&&(this.#ne=i.magFilter),i.minFilter&&(this.#re=i.minFilter),i.mipmapFilter&&(this.#ie=i.mipmapFilter),i.addressModeU&&(this.#ae=i.addressModeU),i.addressModeV&&(this.#se=i.addressModeV),i.addressModeW&&(this.#oe=i.addressModeW),void 0!==i.lodMinClamp&&(this.#ue=i.lodMinClamp),void 0!==i.lodMaxClamp&&(this.#le=i.lodMaxClamp),i.compare&&(this.#ce=i.compare),i.maxAnisotropy&&(this.#he=i.maxAnisotropy)),this.isAnisotropyValid||1===this.#he||(console.warn(`Invalid maxAnisotropy setting (${this.#he}) detected:magFilter(${this.#ne}),minFilter(${this.#re}),mipmapFilter(${this.#ie}) must all be set to 'linear' for anisotropic filtering to work. Falling back to default (1).`),this.#he=1);const m=this.#ge();if(!Hr.has(m)){let i={};this.#ne&&(i.magFilter=this.#ne),this.#re&&(i.minFilter=this.#re),this.#ie&&(i.mipmapFilter=this.#ie),this.#ae&&(i.addressModeU=this.#ae),this.#se&&(i.addressModeV=this.#se),this.#oe&&(i.addressModeW=this.#oe),void 0!==this.#ue&&(i.lodMinClamp=this.#ue),void 0!==this.#le&&(i.lodMaxClamp=this.#le),this.#ce&&(i.compare=this.#ce),this.#he&&(i.maxAnisotropy=this.#he),Hr.set(m,this.redGPUContext.gpuDevice.createSampler(i))}this.#te=Hr.get(m),this.#pe()}}Object.freeze(Sampler);const Wr=new Map,Xr=new WeakMap;let Yr,jr,Zr;class PackedTexture{#b;#xe;#_e;#y;#ve;#be=new Map;get gpuTexture(){return this.#_e}constructor(i){this.#b=i,this.#y=i.gpuDevice,this.#ye(),this.#xe=this.#Te()}#ye(){Zr||(Zr=this.#y.createBuffer({label:"PACK_TEXTURE_MAPPING_BUFFER",size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST})),jr||(jr=this.#b.resourceManager.createBindGroupLayout("PACK_TEXTURE_BIND_GROUP_LAYOUT",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:3,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:4,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:5,visibility:GPUShaderStage.FRAGMENT,buffer:{type:"uniform"}}]})),Yr||(Yr=this.#Se())}#we(i){const m=`${i.r?.label||"empty"}_${i.g?.label||"empty"}_${i.b?.label||"empty"}_${i.a?.label||"empty"}`,{resourceManager:g}=this.#b;if(!this.#be.has(m)){const _=[{binding:0,resource:g.getGPUResourceBitmapTextureView(i.r)},{binding:1,resource:g.getGPUResourceBitmapTextureView(i.g)},{binding:2,resource:g.getGPUResourceBitmapTextureView(i.b)},{binding:3,resource:g.getGPUResourceBitmapTextureView(i.a)},{binding:4,resource:this.#xe},{binding:5,resource:{buffer:Zr}}],b=this.#y.createBindGroup({label:`PACK_TEXTURE_BIND_GROUP_${m}`,layout:jr,entries:_});this.#be.set(m,b)}this.#ve=this.#be.get(m)}async packing(i,m,g,_,b){const y={r:"r",g:"g",b:"b",a:"a",...b},T=`${i.r?.label||""}_${i.g?.label||""}_${i.b?.label||""}_${i.a?.label||""}`,w=`${JSON.stringify(y)}_${T}`;if(!(i.r||i.g||i.b||i.a))return;this.#Me(w);Wr.get(w)||await this.#Re(i,m,g,_,y,w)}#Me(i){const m=Xr.get(this);if(m&&m!==i){const i=Wr.get(m);i&&(i.useNum--,$n(`텍스처 사용 횟수 감소:${m} (${i.useNum})`),0===i.useNum&&($n("삭제된 텍스쳐",i),i.gpuTexture?.destroy(),Wr.delete(m),$n("이전키가 더이상 사용되지 않아서 캐시에서 삭제함",i)))}const g=Wr.get(i);g&&(this.#_e=g.gpuTexture,g.useNum++,$n("기존 생성된 텍스쳐를 사용함",g)),Xr.set(this,i)}async#Re(i,m,g,_,b,y){const T={size:[m,g,1],format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,label:_||`PACK_TEXTURE_${createUUID()}`};this.#_e&&(this.#_e=null);const w=this.#y.createTexture(T),P=new Uint32Array([["r","g","b","a"].indexOf(b.r),["r","g","b","a"].indexOf(b.g),["r","g","b","a"].indexOf(b.b),["r","g","b","a"].indexOf(b.a)]);this.#y.queue.writeBuffer(Zr,0,P),this.#we(i),this.#Ce(w),this.#_e=this.#b.resourceManager.mipmapGenerator.generateMipmap(w,T),Wr.set(y,{gpuTexture:this.#_e,useNum:1,mappingKey:y}),$n("packing 함",Wr.get(y)),this.#ve=null}#Ce(i){const{resourceManager:m}=this.#b,g=this.#y.createCommandEncoder(),_=g.beginRenderPass({colorAttachments:[{view:m.getGPUResourceBitmapTextureView(i),loadOp:"clear",storeOp:"store",clearValue:[0,0,0,0]}]});_.setPipeline(Yr),_.setBindGroup(0,this.#ve),_.draw(6,1,0,0),_.end(),this.#y.queue.submit([g.finish()])}destroy(){const i=Xr.get(this);if(i){const m=Wr.get(i);m&&(m.useNum--,0===m.useNum&&(m.gpuTexture?.destroy(),Wr.delete(i))),Xr.delete(this)}}#Se(){const i="struct VertexOut { @builtin(position) position:vec4<f32>, @location(0) uv:vec2<f32>,\n};\n@vertex\nfn vertexMain(@builtin(vertex_index) VertexIndex:u32) -> VertexOut { var pos=array<vec2<f32>,6>( vec2(-1.0,-1.0), vec2( 1.0,-1.0), vec2(-1.0,1.0), vec2(-1.0,1.0), vec2( 1.0,-1.0), vec2( 1.0,1.0) ); var uv=array<vec2<f32>,6>( vec2(0.0,1.0), vec2(1.0,1.0), vec2(0.0,0.0), vec2(0.0,0.0), vec2(1.0,1.0), vec2(1.0,0.0) ); var output:VertexOut; output.position=vec4(pos[VertexIndex],0.0,1.0); output.uv=uv[VertexIndex]; return output;\n}\nstruct ComponentMapping { r_component:u32, g_component:u32, b_component:u32, a_component:u32,\n};\n@group(0) @binding(0) var textureR:texture_2d<f32>;\n@group(0) @binding(1) var textureG:texture_2d<f32>;\n@group(0) @binding(2) var textureB:texture_2d<f32>;\n@group(0) @binding(3) var textureA:texture_2d<f32>;\n@group(0) @binding(4) var sampler0:sampler;\n@group(0) @binding(5) var<uniform> mapping:ComponentMapping;\nfn getComponent(color:vec4<f32>,componentIndex:u32) -> f32 { switch componentIndex { case 0u:{ return color.r;} case 1u:{ return color.g;} case 2u:{ return color.b;} case 3u:{ return color.a;} default:{ return 0.0;} }\n}\n@fragment\nfn fragmentMain(input:VertexOut) -> @location(0) vec4<f32> { let colorR=textureSample(textureR,sampler0,input.uv); let colorG=textureSample(textureG,sampler0,input.uv); let colorB=textureSample(textureB,sampler0,input.uv); let colorA=textureSample(textureA,sampler0,input.uv); let r=getComponent(colorR,mapping.r_component); let g=getComponent(colorG,mapping.g_component); let b=getComponent(colorB,mapping.b_component); let a=getComponent(colorA,mapping.a_component); return vec4(r,g,b,a);\n}\n",{resourceManager:m}=this.#b,g=this.#y.createPipelineLayout({label:"PACK_TEXTURE_PIPELINE_LAYOUT",bindGroupLayouts:[jr]});return this.#y.createRenderPipeline({label:"PACK_TEXTURE_PIPELINE",layout:g,vertex:{module:m.createGPUShaderModule("PACK_TEXTURE_SHADER_MODULE",{code:i}),entryPoint:"vertexMain"},fragment:{module:m.createGPUShaderModule("PACK_TEXTURE_SHADER_MODULE",{code:i}),entryPoint:"fragmentMain",targets:[{format:"rgba8unorm"}]},primitive:{topology:"triangle-list"}})}#Te(){return new Sampler(this.#b).gpuSampler}}const Jr={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DARKEN:6,OVERLAY:7,COLOR_DODGE:8,COLOR_BURN:9,HARD_LIGHT:10,SOFT_LIGHT:11,DIFFERENCE:12,EXCLUSION:13,DIVIDE:14,VIVID_LIGHT:15,LINEAR_BURN:16,PIN_LIGHT:17,SATURATION:18,HUE:19,LUMINOSITY:20,COLOR:21,NEGATION:22},getBindGroupLayoutDescriptorFromShaderInfo=(i,m,g,_=!0)=>{const{textures:b,samplers:y,uniforms:T,storage:w}=i,P=[];for(const i in w){const _=w[i],{binding:b,name:y,group:T,type:$}=_;if(_.access){const i={write:"write-only-storage",read:"read-only-storage",read_write:"read-write-storage"}[_.access];m===T&&P.push({binding:b,visibility:g,buffer:{type:i}})}else if(m===T){const{access:i,format:m}=$,_={write:"write-only",read:"read-only",read_write:"read-write"}[i],y=m.name;P.push({binding:b,visibility:g,storageTexture:{access:_,format:y}})}}for(const i in b){const y=b[i],{binding:T,name:w,group:$,type:H}=y,{name:q}=H;m===$&&P.push({binding:T,visibility:g,texture:"texture_depth_2d"===q||"texture_depth_multisampled_2d"===q?{viewDimension:"2d",sampleType:"depth",multisampled:_}:"texture_cube"===q?{viewDimension:"cube"}:{}})}for(const i in y){const _=y[i],{binding:b,name:T,group:w}=_;m===w&&P.push({binding:b,visibility:g,sampler:{type:"filtering"}})}for(const i in T){const _=T[i],{binding:b,name:y,group:w}=_;m===w&&P.push({binding:b,visibility:g,buffer:{type:"uniform"}})}return{entries:P}},getFragmentBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.FRAGMENT),getVertexBindGroupLayoutDescriptorFromShaderInfo=(i,m)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.VERTEX),getComputeBindGroupLayoutDescriptorFromShaderInfo=(i,m,g)=>getBindGroupLayoutDescriptorFromShaderInfo(i,m,GPUShaderStage.COMPUTE,g);class ABaseMaterial extends ResourceBase{use2PathRender;gpuRenderInfo;dirtyPipeline=!1;transparent=!1;#Pe=GPUColorWrite.ALL;#Ee;#Ie;#Be;#Le;#De;#Ue;#Ae;#ke;#Oe;#Ne;#Ge;#Fe;#Ve;#$e;#He;#ze;#qe=Jr.MULTIPLY;constructor(i,m,g,_){super(i),this.#He=m,this.#Ae=`FRAGMENT_MODULE_${this.#He}`,this.#ke=`FRAGMENT_BIND_GROUP_DESCRIPTOR_${m}`,this.#Oe=`FRAGMENT_BIND_GROUP_LAYOUT_${m}`,this.#Ne=g,this.#Ge=g?.storage,this.#Fe=g?.uniforms.uniforms,this.#Ve=g?.textures,this.#$e=g?.samplers,this.#ze=i.resourceManager.getGPUBindGroupLayout(this.#Oe)||i.resourceManager.createBindGroupLayout(this.#Oe,getFragmentBindGroupLayoutDescriptorFromShaderInfo(g,_)),this.#Ee=new BlendState(this,Ar.SRC_ALPHA,Ar.ONE_MINUS_SRC_ALPHA,kr.ADD),this.#Ie=new BlendState(this,Ar.SRC_ALPHA,Ar.ONE_MINUS_SRC_ALPHA,kr.ADD),this.#Be=i.resourceManager,this.#Le=this.#Be.basicSampler.gpuSampler,this.#De=this.#Be.emptyBitmapTextureView,this.#Ue=this.#Be.emptyCubeTextureView}get tintBlendMode(){const i=Object.entries(Jr).find(([,i])=>i===this.#qe);if(!i)throw new Error(`Invalid tint mode value:${this.#qe}`);return i[0]}set tintBlendMode(i){const{fragmentUniformInfo:m,fragmentUniformBuffer:g}=this.gpuRenderInfo;let _;if("string"==typeof i){if(!(i in Jr))throw new Error(`Invalid tint mode key:${i}`);_=Jr[i]}else{if("number"!=typeof i||!Object.values(Jr).includes(i))throw new Error(`Invalid tint mode:${i}`);_=i}g.writeBuffer(m.members.tintBlendMode,_),this.#qe=_}get MODULE_NAME(){return this.#He}get FRAGMENT_SHADER_MODULE_NAME(){return this.#Ae}get FRAGMENT_BIND_GROUP_DESCRIPTOR_NAME(){return this.#ke}get STORAGE_STRUCT(){return this.#Ge}get UNIFORM_STRUCT(){return this.#Fe}get blendColorState(){return this.#Ee}get blendAlphaState(){return this.#Ie}get writeMaskState(){return this.#Pe}set writeMaskState(i){this.#Pe=i}initGPURenderInfos(){const{redGPUContext:i}=this,{resourceManager:m}=i,g=m.createGPUShaderModule(this.#Ae,{code:this.#Ne.defaultSource}),_=new ArrayBuffer(Math.max(this.#Fe.arrayBufferByteLength,16)),b=new UniformBuffer(i,_,`UniformBuffer_${this.#He}_${this.uuid}`);this.gpuRenderInfo=new FragmentGPURenderInfo(g,this.#Ne.shaderSourceVariant,this.#Ne.conditionalBlocks,this.#Fe,this.#ze,b,null,null),this._updateBaseProperty(),this._updateFragmentState()}_updateFragmentState(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext;this.#Ke();const g=[];for(const i in this.#Ve){const _=this.#Ve[i],{binding:b,name:y,group:T,type:w}=_,{name:P}=w;let $;$="texture_cube"===P?m.getGPUResourceCubeTextureView(this[y]):this[y]instanceof PackedTexture?m.getGPUResourceBitmapTextureView(this[y]):m.getGPUResourceBitmapTextureView(this[y])||this.#De,2===T&&g.push({binding:b,resource:$})}for(const i in this.#$e){const m=this.#$e[i],{binding:_,name:b,group:y}=m;2===y&&g.push({binding:_,resource:this.getGPUResourceSampler(this[b])})}this.#Fe&&g.push({binding:this.#Fe.binding,resource:{buffer:this.gpuRenderInfo.fragmentUniformBuffer.gpuBuffer,offset:0,size:this.gpuRenderInfo.fragmentUniformBuffer.size}});const _={layout:this.gpuRenderInfo.fragmentBindGroupLayout,label:this.#ke,entries:g},b=i.createBindGroup(_);this.gpuRenderInfo.fragmentState=this.getFragmentRenderState(),this.gpuRenderInfo.fragmentUniformBindGroup=b}getFragmentRenderState(i="main"){return{module:this.gpuRenderInfo.fragmentShaderModule,entryPoint:i,targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.blendColorState.state,alpha:this.blendAlphaState.state},writeMask:this.writeMaskState}]}}_updateBaseProperty(){const{fragmentUniformInfo:i,fragmentUniformBuffer:m}=this.gpuRenderInfo,{members:g}=i;for(const _ in g){const g=this[_];g instanceof ColorRGBA?m.writeBuffer(i.members[_],g.rgbaNormal):g instanceof ColorRGB?m.writeBuffer(i.members[_],g.rgbNormal):Qr.test(_)||(this[_]=g)}}getGPUResourceSampler(i){return i?.gpuSampler||this.#Le}#Ke(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,g=this.#We(),_=`${this.#Ae}_${g}`;let b=m.getGPUShaderModule(_);if(!b){const i=this.gpuRenderInfo.fragmentShaderSourceVariant.getVariant(g);i?($n("프레그먼트 바리안트 셰이더 모듈 생성:",g,_),b=m.createGPUShaderModule(_,{code:i})):(console.warn("⚠️ 바리안트 소스를 찾을 수 없음:",g),b=this.gpuRenderInfo.fragmentShaderModule)}this.gpuRenderInfo.fragmentShaderModule=b}#We(){const{fragmentShaderVariantConditionalBlocks:i}=this.gpuRenderInfo,m=new Set;for(const g of i)this[g]&&m.add(g);const g=m.size>0?Array.from(m).sort().join("+"):"none";return m.size,g}}const Qr=/^use\w+Texture$/;tr.defineByPreset(ABaseMaterial,[tr.PRESET_POSITIVE_NUMBER.OPACITY]),tr.defineBoolean(ABaseMaterial,[["useTint",!1]]),tr.defineColorRGBA(ABaseMaterial,["tint","#ff0000"]),Object.freeze(ABaseMaterial);const ei=parseWGSL("#redgpu_include drawPicking;\n#redgpu_include calcTintBlendMode;\nstruct Uniforms { color:vec3<f32>, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(12) combinedOpacity:f32, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> { var finalColor=vec4<f32>( uniforms.color.r,uniforms.color.g,uniforms.color.b,uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf return finalColor;\n}\n");class ColorMaterial extends ABaseMaterial{constructor(i,m="#fff"){super(i,"COLOR_MATERIAL",ei,2),this.initGPURenderInfos(),this.color.setColorByHEX(m)}}tr.defineByPreset(ColorMaterial,[tr.PRESET_COLOR_RGB.COLOR]),Object.freeze(ColorMaterial);class InterleaveType{static get float32(){return{numElements:1,stride:Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32",offset:0}}static get float32x2(){return{numElements:2,stride:2*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x2",offset:0}}static get float32x3(){return{numElements:3,stride:3*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x3",offset:0}}static get float32x4(){return{numElements:4,stride:4*Float32Array.BYTES_PER_ELEMENT,gpuVertexFormat:"float32x4",offset:0}}}Object.freeze(InterleaveType);class InterleavedStructElement{attributeName;attributeStride;interleaveType;constructor(i,m,g){this.attributeName=i,this.attributeStride=m,this.interleaveType=g}}class InterleavedStruct{#Xe;#a="";#Ye=[];#je=0;constructor(i,m=""){this.#a=m,this.#Ze(i),this.#Je()}get label(){return this.#a}get attributes(){return this.#Ye}get arrayStride(){return this.#je}get define(){return{...this.#Xe}}#Ze(i){let m={};for(const g in i){const _=i[g],b=_.stride;m[g]=new InterleavedStructElement(g,b,_),b%4!=0&&consoleAndThrowError(`Invalid attribute stride:${b}`)}this.#Xe=m}#Je(){this.#je=0,this.#Ye=[];for(const[i,{attributeStride:m,interleaveType:g}]of Object.entries(this.#Xe))this.#Ye.push({attributeName:i,shaderLocation:this.#Ye.length,offset:this.#je,format:g.gpuVertexFormat}),this.#je+=m}}class ResourceStateVertexBuffer{static dirtyList=[];buffer;label;uuid;#X=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateVertexBuffer.dirtyList.push(this)}}class VertexBuffer extends ABaseBuffer{#Qe=0;#et=0;#tt;#Q;#nt=0;#ee;constructor(i,m,g,_=GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,b=""){super(i,"managedVertexBufferState",_);const y=getCacheBufferFromResourceState(this,b);if(y)return y;this.#tt=g,b&&(this.name=b),this.changeData(m,this.#tt),basicRegisterResource(this,new ResourceStateVertexBuffer(this))}get gpuBuffer(){return this.#ee}get stride(){return this.#et}get data(){return this.#Q}get size(){return this.#Q.byteLength||0}get interleavedStruct(){return this.#tt}get vertexCount(){return this.#Qe}get triangleCount(){return this.#nt}destroy(){const i=this.#ee;i&&(this.#ee=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}updateAllData(i){const{gpuDevice:m}=this;m.queue.writeBuffer(this.#ee,0,this.#Q)}changeData(i,m){const{gpuDevice:g}=this;if(Array.isArray(i)&&(i=new Float32Array(i)),this.#Q=i,m&&this.#rt(m),this.#ee){this.targetResourceManagedState.videoMemory-=this.#Q.byteLength||0;let i=this.#ee;requestAnimationFrame(()=>{i.destroy()}),this.#ee=null}this.targetResourceManagedState.videoMemory+=this.#Q.byteLength;const _={size:this.#Q.byteLength,usage:this.usage,label:this.name};this.#ee=g.createBuffer(_),this.#nt=this.#Q.length/this.#et,g.queue.writeBuffer(this.#ee,0,this.#Q)}#rt(i){this.#tt=i,this.#Qe=0,this.#et=0;for(const i in this.#tt.define){const m=this.#tt.define[i].attributeStride/Float32Array.BYTES_PER_ELEMENT;this.#Qe+=m,this.#et+=m}this.#Qe=this.#Q.length/this.#Qe}}Object.freeze(VertexBuffer);class DrawDebuggerMesh{#b;#it;#w;#at;#st;#ot="AABB";#ut;#lt;#ct=null;#ht=null;constructor(i,m){this.#b=i,this.#it=m;const g=this.#ft(i);this.#w=g.vertexBuffer,this.#at=new ColorMaterial(i),this.#at.color.setColorByRGB(255,0,0),this.#st=new Mesh(i,g,this.#at),this.#st.primitiveState.cullMode="none",this.#st.primitiveState.topology=zn.LINE_LIST,this.#st.depthStencilState.depthWriteEnabled=!1;const _=this.#ft(i);this.#ut=new ColorMaterial(i),this.#ut.color.setColorByRGB(0,255,0),this.#lt=new Mesh(i,_,this.#ut),this.#lt.primitiveState.cullMode="none",this.#lt.primitiveState.topology=zn.LINE_LIST,this.#lt.depthStencilState.depthWriteEnabled=!1}get debugMode(){return this.#ot}set debugMode(i){this.#ot=i,"OBB"===i?this.#at.color.setColorByRGB(255,0,0):"AABB"===i||"COMBINED_AABB"===i?this.#at.color.setColorByRGB(0,255,0):"BOTH"===i&&(this.#at.color.setColorByRGB(255,0,0),this.#ut.color.setColorByRGB(0,255,0)),this.#ct=null,this.#ht=null}render(i){if(this.#it.enableDebugger)if("OBB"===this.#ot){const m=this.#it.boundingOBB;this.#dt(m)&&(this.#mt(m,this.#w),this.#pt(m)),this.#st.setPosition(0,0,0),this.#st.setRotation(0,0,0),this.#st.setScale(1,1,1),this.#st.render(i)}else if("AABB"===this.#ot||"COMBINED_AABB"===this.#ot){const m="COMBINED_AABB"===this.#ot?this.#it.combinedBoundingAABB:this.#it.boundingAABB;this.#gt(m)&&(this.#xt(m,this.#w),this.#_t(m)),this.#st.setPosition(0,0,0),this.#st.setRotation(0,0,0),this.#st.setScale(1,1,1),this.#st.render(i)}else if("BOTH"===this.#ot){const m=this.#it.boundingOBB,g=this.#it.boundingAABB;this.#dt(m)&&(this.#mt(m,this.#w),this.#pt(m)),this.#st.setPosition(0,0,0),this.#st.setRotation(0,0,0),this.#st.setScale(1,1,1),this.#st.render(i),this.#gt(g)&&(this.#xt(g,this.#lt.geometry.vertexBuffer),this.#_t(g)),this.#lt.setPosition(0,0,0),this.#lt.setRotation(0,0,0),this.#lt.setScale(1,1,1),this.#lt.render(i)}}#ft(i){const m=new Float32Array(192),g=new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},`wireframeBoxStruct_${Math.random()}`),_=new VertexBuffer(i,m,g);return new Geometry(i,_)}#dt(i){if(!this.#ct)return!0;const m=this.#ct;return m.center[0]!==i.center[0]||m.center[1]!==i.center[1]||m.center[2]!==i.center[2]||m.halfExtents[0]!==i.halfExtents[0]||m.halfExtents[1]!==i.halfExtents[1]||m.halfExtents[2]!==i.halfExtents[2]||!this.#vt(m.orientation,i.orientation)}#gt(i){if(!this.#ht)return!0;const m=this.#ht;return m.minX!==i.minX||m.maxX!==i.maxX||m.minY!==i.minY||m.maxY!==i.maxY||m.minZ!==i.minZ||m.maxZ!==i.maxZ}#vt(i,m){if(i.length!==m.length)return!1;for(let g=0;g<i.length;g++)if(Math.abs(i[g]-m[g])>1e-4)return!1;return!0}#pt(i){this.#ct=new OBB(i.center,i.halfExtents,i.orientation)}#_t(i){this.#ht=i.clone()}#mt(i,m){const{center:g,halfExtents:_,orientation:b}=i,y=[[-1,-1,-1],[1,-1,-1],[1,1,-1],[-1,1,-1],[-1,-1,1],[1,-1,1],[1,1,1],[-1,1,1]].map(i=>{const m=[i[0]*_[0],i[1]*_[1],i[2]*_[2]],y=[b[0]*m[0]+b[4]*m[1]+b[8]*m[2],b[1]*m[0]+b[5]*m[1]+b[9]*m[2],b[2]*m[0]+b[6]*m[1]+b[10]*m[2]];return[y[0]+g[0],y[1]+g[1],y[2]+g[2]]});this.#C(y,m)}#xt(i,m){const{minX:g,maxX:_,minY:b,maxY:y,minZ:T,maxZ:w}=i,P=[[g,b,T],[_,b,T],[_,y,T],[g,y,T],[g,b,w],[_,b,w],[_,y,w],[g,y,w]];this.#C(P,m)}#C(i,m){const g=m.data;let _=0;[[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]].forEach(([m,b])=>{g[_++]=i[m][0],g[_++]=i[m][1],g[_++]=i[m][2],g[_++]=0,g[_++]=0,g[_++]=1,g[_++]=0,g[_++]=0,g[_++]=i[b][0],g[_++]=i[b][1],g[_++]=i[b][2],g[_++]=0,g[_++]=0,g[_++]=1,g[_++]=0,g[_++]=0}),m.updateAllData(g)}}Object.freeze(DrawDebuggerMesh);const imageBitmapToGPUTexture=(i,m,g,_=!0)=>{const b=i.createTexture(g);for(let y=0;y<m.length;y++){const T=m[y],w={source:T},P={texture:b,origin:[0,0,y],premultipliedAlpha:_};g.format.includes("srgb")&&(P.colorSpace="srgb");const $=[T.width,T.height];i.queue.copyExternalImageToTexture(w,P,$)}return b};async function loadAndCreateBitmapImage(i,m="none",g="premultiply"){const _=await fetch(i),b=await _.blob();return createImageBitmap(b,{colorSpaceConversion:m,premultiplyAlpha:g})}class BitmapTexture extends ManagedResourceBase{#_e;#bt;#yt;#Tt;#St;#wt;#Mt=0;#Rt=!0;#Ct;#Pt;#Et;get width(){return this.#wt?.width||0}get height(){return this.#wt?.height||0}constructor(i,m,g=!0,_,b,y,T=!1){if(super(i,"managedBitmapTextureState"),this.#Pt=_,this.#Et=b,this.#Rt=T,this.#St=g,this.#Ct=y||navigator.gpu.getPreferredCanvasFormat(),m){this.#bt=m?.src||m,this.#yt=m?.cacheKey||m||this.uuid;const{table:i}=this.targetResourceManagedState;let g;for(const m in i)if(i[m].cacheKey===this.#yt){g=i[m];break}if(g)return this.#Pt?.(this),i[g.uuid].texture;this.src=m,this.#It()}}get usePremultiplyAlpha(){return this.#Rt}get cacheKey(){return this.#yt}get videoMemorySize(){return this.#Mt}get gpuTexture(){return this.#_e}get mipLevelCount(){return this.#Tt}get src(){return this.#bt}set src(i){this.#bt=i?.src||i,this.#yt=i?.cacheKey||i||this.uuid,this.#bt&&this.#Bt(this.#bt)}get useMipmap(){return this.#St}set useMipmap(i){this.#St=i,this.#Lt()}destroy(){const i=this.#_e;this.#Dt(null),this.__fireListenerList(!0),this.#bt=null,this.#yt=null,this.#Ut(),i&&i.destroy()}#Dt(i){this.#_e=i,i||(this.#wt=null),this.__fireListenerList()}#It(){basicRegisterResource(this,new Gr(this))}#Ut(){basicUnregisterResource(this)}#Lt(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#_e&&(this.#_e.destroy(),this.#_e=null),this.targetResourceManagedState.videoMemory-=this.#Mt,this.#Mt=0;const{width:_,height:b}=this.#wt;this.#Tt=1;const y={size:[_,b],format:this.#Ct,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:this.#bt};this.#St&&(this.#Tt=getMipLevelCount(_,b),y.mipLevelCount=this.#Tt,y.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const T=imageBitmapToGPUTexture(i,[this.#wt],y,this.#Rt);this.#Mt=calculateTextureByteSize(y),this.targetResourceManagedState.videoMemory+=this.#Mt,this.#St&&g.generateMipmap(T,y),this.#Dt(T)}async#At(i){return new Promise((m,g)=>{const _=new Image;_.src=i,_.onload=()=>{const i=document.createElement("canvas");i.width=_.width||512,i.height=_.height||512;const b=i.getContext("2d");b?(b.fillStyle="rgba(0,0,0,0)",b.fillRect(0,0,i.width,i.height),b.drawImage(_,0,0,i.width,i.height),createImageBitmap(i,{colorSpaceConversion:"none",premultiplyAlpha:this.#Rt?"premultiply":"none"}).then(m).catch(g)):g(new Error("Canvas context could not be created."))},_.onerror=i=>{g(new Error(`Failed to load SVG:${i}`))}})}async#Bt(i){try{i.endsWith(".svg")?this.#wt=await this.#At(i):this.#wt=await loadAndCreateBitmapImage(i,"none",this.#Rt?"premultiply":"none"),this.#Lt(),this.#Pt?.(this)}catch(i){console.error(i),this.#Et?.(i)}}}Object.freeze(BitmapTexture);class DownSampleCubeMapGenerator{#b;#kt=new Map;#Ot=new Map;#Nt=null;#Gt=null;#Ft=null;#Vt=null;#$t=8;#Ht=8;#zt=new Map;#be=new Map;constructor(i){this.#b=i}createSourceTextureView(i,m){const g=`DOWN_SAMPLE_CUBE_GENERATOR_SOURCE_VIEW_${i.label}_${m}`;if(!this.#zt.has(g)){const _=i.createView({label:g,dimension:"cube",baseMipLevel:m,mipLevelCount:1});this.#zt.set(g,_)}return this.#zt.get(g)}createTargetTextureView(i,m){const g=`DOWN_SAMPLE_CUBE_GENERATOR_TARGET_VIEW_${i.label}_${m}`;if(!this.#zt.has(g)){const _=i.createView({label:g,dimension:"2d-array",baseMipLevel:m,mipLevelCount:1,arrayLayerCount:6});this.#zt.set(g,_)}return this.#zt.get(g)}createBindGroup(i,m,g){const _=`DOWN_SAMPLE_CUBE_GENERATOR_BIND_GROUP_${m.label}_${g.label}`;if(!this.#be.has(_)){const{gpuDevice:b}=this.#b,y=b.createBindGroup({label:_,layout:i,entries:[{binding:0,resource:m},{binding:1,resource:g},{binding:2,resource:this.#Vt},{binding:3,resource:{buffer:this.#Gt}}]});this.#be.set(_,y)}return this.#be.get(_)}async downsampleCubemap(i,m=256,g="rgba8unorm"){try{this.#qt(),this.#Kt();const{gpuDevice:_}=this.#b;if(!i)throw new Error("Invalid source cubemap texture");if(m<=0||!Number.isInteger(m))throw new Error("Target size must be a positive integer");const b=i.mipLevelCount,y=getMipLevelCount(m,m),T=_.createTexture({size:[m,m,6],format:g,usage:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:y,label:`DOWN_SAMPLE_CUBE_GENERATOR_TEXTURE_${m}x${m}_${y}mips_${Date.now()}`});for(let _=0;_<y;_++){const y=Math.max(1,m>>_),w=this.#Wt(i.width,m,_,b);await this.#Xt(i,T,w,_,y,g)}return this.#qt(),T}catch(i){throw console.error("큐브맵 다운샘플링 실패:",i),this.#qt(),i}}destroy(){this.#qt(),this.#Gt&&(this.#Gt.destroy(),this.#Gt=null),this.#kt.clear(),this.#Ot.clear(),this.#Nt=null,this.#Vt=null}#qt(){this.#zt.clear(),this.#be.clear()}#Kt(){if(this.#Nt)return;const{gpuDevice:i,resourceManager:m}=this.#b;this.#Vt=new Sampler(this.#b,{minFilter:"linear",magFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}).gpuSampler,this.#Nt=m.createGPUShaderModule("DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_SHADER",{code:"\nstruct Uniforms { targetSize:f32, sourceMipLevel:f32, targetMipLevel:f32, padding:f32,\n};\n@group(0) @binding(0) var sourceCubemap:texture_cube<f32>;\n@group(0) @binding(1) var targetCubemap:texture_storage_2d_array<rgba8unorm,write>;\n@group(0) @binding(2) var cubemapSampler:sampler;\n@group(0) @binding(3) var<uniform> uniforms:Uniforms;\nfn cubemapUVToDirection(uv:vec2<f32>,face:u32) -> vec3<f32> { let u=uv.x * 2.0 - 1.0; let v=uv.y * 2.0 - 1.0; switch face { case 0u:{ return vec3<f32>(1.0,-v,-u); } case 1u:{ return vec3<f32>(-1.0,-v,u); } case 2u:{ return vec3<f32>(u,1.0,v); } case 3u:{ return vec3<f32>(u,-1.0,-v); } case 4u:{ return vec3<f32>(u,-v,1.0); } case 5u:{ return vec3<f32>(-u,-v,-1.0); } default:{ return vec3<f32>(0.0,0.0,1.0); } }\n}\nfn gaussianWeight(x:f32,y:f32,sigma:f32) -> f32 { let sigmaSq=sigma * sigma; return exp(-(x * x + y * y)/(2.0 * sigmaSq))/(2.0 * 3.14159265359 * sigmaSq);\n}\nfn clampCubemapUV(uv:vec2<f32>) -> vec2<f32> { return clamp(uv,vec2<f32>(0.0),vec2<f32>(1.0));\n}\n@compute @workgroup_size(8,8,1)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let face=global_id.z; let coord=vec2<u32>(global_id.xy); let targetSize=u32(uniforms.targetSize); if (coord.x >=targetSize || coord.y >=targetSize || face >=6u) { return; } let uv=(vec2<f32>(coord) + 0.5)/f32(targetSize); let direction=normalize(cubemapUVToDirection(uv,face)); let sourceMipLevel=uniforms.sourceMipLevel; let targetMipLevel=uniforms.targetMipLevel; var color=vec4<f32>(0.0); if (sourceMipLevel==0.0 && targetSize > 64u) { let sampleCount=16u; let sampleRadius=1.0/f32(targetSize); var totalWeight=0.0; for (var i=0u;i < sampleCount;i++) { let angle=2.0 * 3.14159265359 * f32(i)/f32(sampleCount); let radius=sampleRadius * (0.5 + 0.5 * f32(i % 4u)/4.0); let offsetUV=clampCubemapUV(uv + vec2<f32>( cos(angle) * radius, sin(angle) * radius )); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); let sampleColor=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); let weight=gaussianWeight( cos(angle) * radius * f32(targetSize), sin(angle) * radius * f32(targetSize), 0.8 ); color +=sampleColor * weight; totalWeight +=weight; } if (totalWeight > 0.0) { color=color/totalWeight; } } else if (sourceMipLevel==0.0 && targetSize > 16u) { let sampleCount=4u; let invSampleCount=1.0/f32(sampleCount * sampleCount); let sampleOffset=0.5/f32(targetSize); for (var x=0u;x < sampleCount;x++) { for (var y=0u;y < sampleCount;y++) { let offset=vec2<f32>( (f32(x) - 1.5) * sampleOffset, (f32(y) - 1.5) * sampleOffset ); let offsetUV=clampCubemapUV(uv + offset); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); } } color *=invSampleCount; } else if (targetSize > 4u) { let sampleCount=2u; let invSampleCount=1.0/f32(sampleCount * sampleCount); let sampleOffset=0.25/f32(targetSize); for (var x=0u;x < sampleCount;x++) { for (var y=0u;y < sampleCount;y++) { let offset=vec2<f32>( (f32(x) - 0.5) * sampleOffset, (f32(y) - 0.5) * sampleOffset ); let offsetUV=clampCubemapUV(uv + offset); let sampleDir=normalize(cubemapUVToDirection(offsetUV,face)); color +=textureSampleLevel(sourceCubemap,cubemapSampler,sampleDir,sourceMipLevel); } } color *=invSampleCount; } else { color=textureSampleLevel(sourceCubemap,cubemapSampler,direction,sourceMipLevel); } if (targetMipLevel > 0.0) { let luminance=dot(color.rgb,vec3<f32>(0.299,0.587,0.114)); let saturation=0.9 + 0.1/(1.0 + targetMipLevel * 0.1); color=vec4<f32>(mix(vec3<f32>(luminance),color.rgb,saturation),color.a); } textureStore(targetCubemap,vec2<i32>(coord),i32(face),color);\n}\n"}),this.#Yt()}#jt(i){if(!this.#kt.has(i)){const{gpuDevice:m,resourceManager:g}=this.#b,_=g.createBindGroupLayout(`DOWN_SAMPLE_CUBE_GENERATOR_BIND_GROUP_LAYOUT_${i}`,{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,texture:{viewDimension:"cube",sampleType:"float"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:i,viewDimension:"2d-array"}},{binding:2,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:3,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}]}),b=m.createComputePipeline({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_PIPELINE_${i}`,layout:m.createPipelineLayout({label:`DOWN_SAMPLE_CUBE_GENERATOR_PIPELINE_LAYOUT_${i}`,bindGroupLayouts:[_]}),compute:{module:this.#Nt,entryPoint:"main"}});this.#Ot.set(i,_),this.#kt.set(i,b)}return this.#kt.get(i)}#Yt(){const{gpuDevice:i}=this.#b;this.#Ft={arrayBufferByteLength:16,properties:{targetSize:{byteOffset:0,size:4},sourceMipLevel:{byteOffset:4,size:4},targetMipLevel:{byteOffset:8,size:4},padding:{byteOffset:12,size:4}}},this.#Gt=i.createBuffer({size:this.#Ft.arrayBufferByteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"DOWN_SAMPLE_CUBE_GENERATOR_UNIFORM_BUFFER"})}#Wt(i,m,g,_){const b=i/Math.max(1,m>>g),y=Math.max(0,Math.floor(Math.log2(b)));return Math.min(y,_-1)}async#Xt(i,m,g,_,b,y){const{gpuDevice:T}=this.#b,w=this.#jt(y),P=this.#Ot.get(y),$=this.createSourceTextureView(i,g),H=this.createTargetTextureView(m,_),q=this.createBindGroup(P,$,H);this.#Zt(g,_,b);const W=T.createCommandEncoder({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMMAND_ENCODER_MIP${_}`}),ye=W.beginComputePass({label:`DOWN_SAMPLE_CUBE_GENERATOR_COMPUTE_PASS_MIP${_}`});ye.setPipeline(w),ye.setBindGroup(0,q),ye.dispatchWorkgroups(Math.ceil(b/this.#$t),Math.ceil(b/this.#Ht),6),ye.end();const Ge=W.finish();T.queue.submit([Ge]),await T.queue.onSubmittedWorkDone()}#Zt(i,m,g){const{gpuDevice:_}=this.#b,b=new Float32Array([g,i,m,0]);_.queue.writeBuffer(this.#Gt,0,b)}}Object.freeze(DownSampleCubeMapGenerator);const ti={LOAD:"load",CLEAR:"clear"};Object.freeze(ti);const ni={STORE:"store",DISCARD:"discard"};Object.freeze(ni);class MipmapGenerator{#b;#xe;#Jt;#Qt;#ze;#en;#zt=new Map;#be=new Map;#tn=new WeakMap;#nn=new WeakMap;constructor(i){this.#b=i,this.#xe=new Sampler(i,{minFilter:"linear"}).gpuSampler,this.#Qt={}}createTextureView(i,m,g,_=!1){const b=`${m}_${g}`;if(_){let _=this.#nn.get(i);if(_||(_=new Map,this.#nn.set(i,_)),_.has(b))return _.get(b);const y=i.createView({baseMipLevel:m,mipLevelCount:1,dimension:"2d",baseArrayLayer:g,arrayLayerCount:1,label:`MIPMAP_GENERATOR_CACHED_${i.label}_${b}`});return _.set(b,y),y}{const _=`MIPMAP_GENERATOR_${i.label}_${m}_${g}`;if(!this.#zt.has(_)){const b=i.createView({baseMipLevel:m,mipLevelCount:1,dimension:"2d",baseArrayLayer:g,arrayLayerCount:1,label:_});this.#zt.set(_,b)}return this.#zt.get(_)}}createBindGroup(i,m,g=!1){const{gpuDevice:_}=this.#b;if(g){let g=this.#tn.get(i);g||(g=new Map,this.#tn.set(i,g));const b=m.label||"unlabeled";if(g.has(b))return g.get(b);const y=_.createBindGroup({label:`MIPMAP_GENERATOR_BIND_GROUP_CACHED_${i.label}_${b}`,layout:this.#ze,entries:[{binding:0,resource:this.#xe},{binding:1,resource:m}]});return g.set(b,y),y}{const g=`${i.label}_${m.label}`;if(this.#be.has(g))return this.#be.get(g);const b=_.createBindGroup({label:`MIPMAP_GENERATOR_BIND_GROUP_TEMP_${g}`,layout:this.#ze,entries:[{binding:0,resource:this.#xe},{binding:1,resource:m}]});return this.#be.set(g,b),b}}getMipmapPipeline(i){const{gpuDevice:m,resourceManager:g}=this.#b;let _=this.#Qt[i];return _||(this.#en||(this.#en=g.createGPUShaderModule("MIPMAP_GENERATOR_SHADER_MODULE",{code:"\nvar<private> pos:array<vec2<f32>,3>=array<vec2<f32>,3>( vec2<f32>(-1.0,-1.0), vec2<f32>(-1.0,3.0), vec2<f32>(3.0,-1.0)\n);\nstruct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n};\n@vertex\nfn vertexMain(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var output:VertexOutput; output.texCoord=pos[vertexIndex] * vec2<f32>(0.5,-0.5) + vec2<f32>(0.5); output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); return output;\n}\n@group(0) @binding(0)\nvar imgSampler:sampler;\n@group(0) @binding(1)\nvar img:texture_2d<f32>;\n@fragment\nfn fragmentMain(@location(0) texCoord:vec2<f32>) -> @location(0) vec4<f32> { return textureSample(img,imgSampler,texCoord);\n}\n"}),this.#ze=g.createBindGroupLayout("MIPMAP_GENERATOR_FRAGMENT_BIND_GROUP_LAYOUT",{entries:[{binding:0,visibility:GPUShaderStage.FRAGMENT,sampler:{}},{binding:1,visibility:GPUShaderStage.FRAGMENT,texture:{}}]}),this.#Jt=g.createGPUPipelineLayout("MIPMAP_GENERATOR_PIPELINE_LAYOUT",{bindGroupLayouts:[this.#ze]})),_=m.createRenderPipeline({label:`MIPMAP_GENERATOR_PIPELINE_${i}`,layout:this.#Jt,vertex:{module:this.#en,entryPoint:"vertexMain"},fragment:{module:this.#en,entryPoint:"fragmentMain",targets:[{format:i}]}}),this.#Qt[i]=_),_}generateMipmap(i,m,g=!1){g||this.#qt();const{gpuDevice:_}=this.#b,b=this.getMipmapPipeline(m.format);if("3d"==m.dimension||"1d"==m.dimension)throw new Error("Generating mipmaps for non-2d textures is currently unsupported!");let y=i;const T=m.size[0],w=m.size[1],P=m.size[2]||1,$=m.usage&GPUTextureUsage.RENDER_ATTACHMENT;if(!$){const i={size:{width:Math.max(1,T>>>1),height:Math.max(1,w>>>1),depthOrArrayLayers:P},format:m.format,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.RENDER_ATTACHMENT,mipLevelCount:m.mipLevelCount-1};y=_.createTexture(i)}const H=_.createCommandEncoder({});for(let _=0;_<P;++_){let T=this.createTextureView(i,0,_,g),w=$?1:0;for(let P=1;P<m.mipLevelCount;++P){const m=this.createTextureView(y,w++,_,g),P=H.beginRenderPass({colorAttachments:[{view:m,clearValue:{r:0,g:0,b:0,a:0},loadOp:ti.CLEAR,storeOp:ni.STORE}]}),$=this.createBindGroup(i,T,g);P.setPipeline(b),P.setBindGroup(0,$),P.draw(3,1,0,0),P.end(),T=m}}if(!$){const g={width:Math.max(1,T>>>1),height:Math.max(1,w>>>1),depthOrArrayLayers:P};for(let _=1;_<m.mipLevelCount;++_)H.copyTextureToTexture({texture:y,mipLevel:_-1},{texture:i,mipLevel:_},g),g.width=Math.max(1,g.width>>>1),g.height=Math.max(1,g.height>>>1)}return _.queue.submit([H.finish()]),$||y.destroy(),g||this.#qt(),i}#qt(){this.#zt.clear(),this.#be.clear()}destroy(){this.#qt()}}Object.freeze(MipmapGenerator);class CubeTexture extends ManagedResourceBase{static defaultViewDescriptor={dimension:"cube",aspect:"all",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:0,arrayLayerCount:6};#_e;#rn;#yt;#Tt;#St;#in;#Mt=0;#Ct;#Pt;#Et;constructor(i,m,g=!0,_,b,y){super(i,"managedCubeTextureState"),this.#Pt=_,this.#Et=b,this.#St=g,this.#Ct=y||navigator.gpu.getPreferredCanvasFormat(),this.#rn=m,this.#yt=m?.toString();const{table:T}=this.targetResourceManagedState;let w;for(const i in T)if(T[i].cacheKey===this.#yt){w=T[i];break}if(w){const i=T[w.uuid].texture;this.#Pt?.(i)}else this.srcList=m,this.#It()}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#Tt}}get cacheKey(){return this.#yt}get videoMemorySize(){return this.#Mt}get gpuTexture(){return this.#_e}get mipLevelCount(){return this.#Tt}get srcList(){return this.#rn}set srcList(i){this.#rn=i,this.#yt=i?.toString()||createUUID(),this.#rn?.length&&this.#Bt(this.#rn)}get useMipmap(){return this.#St}set useMipmap(i){this.#St=i,this.#Lt()}destroy(){const i=this.#_e;this.#Dt(null),this.__fireListenerList(!0),this.#rn=null,this.#yt=null,this.#Ut(),i&&i.destroy()}setGPUTextureDirectly(i,m,g=!0){this.#_e&&(this.#_e.destroy(),this.targetResourceManagedState.videoMemory-=this.#Mt),this.#_e=i,this.#St=g,this.#Tt=i.mipLevelCount,this.#yt=m||`direct_${this.uuid}`;const _={size:[i.width,i.height,i.depthOrArrayLayers],format:i.format,usage:i.usage,mipLevelCount:this.#Tt};this.#Mt=calculateTextureByteSize(_),this.targetResourceManagedState.videoMemory+=this.#Mt,this.__fireListenerList()}#Dt(i){this.#_e=i,i||(this.#in=null),this.__fireListenerList()}#It(){basicRegisterResource(this,new ResourceStateCubeTexture(this))}#Ut(){basicUnregisterResource(this)}#Lt(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;this.#_e&&(this.#_e.destroy(),this.#_e=null),this.#Tt=1;{const m=this.#in,_=m[0],{width:b,height:y}=_,T={size:[b,y,6],format:this.#Ct,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`cubeTexture_${this.#rn?.toString()||this.uuid}`};this.#St&&(this.#Tt=getMipLevelCount(b,y),T.mipLevelCount=this.#Tt,T.usage|=GPUTextureUsage.RENDER_ATTACHMENT);const w=imageBitmapToGPUTexture(i,m,T);this.targetResourceManagedState.videoMemory-=this.#Mt,this.#Mt=calculateTextureByteSize(T),this.targetResourceManagedState.videoMemory+=this.#Mt,this.#St&&g.generateMipmap(w,T),this.#Dt(w)}}async#Bt(i){this.#in=await async function(i){const m=i.map(i=>loadAndCreateBitmapImage(i));return await Promise.all(m)}(i);try{this.#Lt(),this.#Pt?.(this)}catch(i){console.error(i),this.#Et?.(i)}}}Object.freeze(CubeTexture);class ResourceState{table={};videoMemory=0;length=0;constructor(){}}var ri;Object.freeze(ResourceState),function(i){i.GPUShaderModule="GPUShaderModule",i.GPUBindGroupLayout="GPUBindGroupLayout",i.GPUPipelineLayout="GPUPipelineLayout"}(ri||(ri={}));const ii=new WeakMap;class ResourceManager extends ResourceBase{static PRESET_GPUBindGroupLayout_System="PRESET_GPUBindGroupLayout_System";static PRESET_VERTEX_GPUBindGroupLayout_Instancing="PRESET_VERTEX_GPUBindGroupLayout_Instancing";static PRESET_VERTEX_GPUBindGroupLayout="PRESET_VERTEX_GPUBindGroupLayout";static PRESET_VERTEX_GPUBindGroupLayout_SKIN="PRESET_VERTEX_GPUBindGroupLayout_SKIN";#an=new ImmutableKeyMap([[ri.GPUShaderModule,new Map],[ri.GPUBindGroupLayout,new Map],[ri.GPUPipelineLayout,new Map]]);#sn=new ResourceState;#on=new ResourceState;#un=new ResourceState;#ln=new ResourceState;#cn=new ResourceState;#hn=new ResourceState;#fn=new ResourceState;#dn={};#mn;#Ue;#pn;#gn;#xn;constructor(i){super(i),this.#pn=new MipmapGenerator(i),this.#gn=new DownSampleCubeMapGenerator(i),this.#_n()}getGPUResourceBitmapTextureView(i){const m=i instanceof GPUTexture?i:i?.gpuTexture;if(!m)return this.#mn;let g=ii.get(m);return g||(g=m.createView({label:m.label}),ii.set(m,g)),g}getGPUResourceCubeTextureView(i,m){const g=i instanceof GPUTexture?i:i?.gpuTexture,_=i instanceof GPUTexture?null:i?.viewDescriptor;if(!g)return this.#Ue;let b=ii.get(g);if(!b){const i={...m||_||CubeTexture.defaultViewDescriptor,label:g?.label};b=g.createView(i),ii.set(g,b)}return b}get basicSampler(){return this.#xn}get mipmapGenerator(){return this.#pn}get downSampleCubeMapGenerator(){return this.#gn}get cachedBufferState(){return this.#dn}get emptyBitmapTextureView(){return this.#mn}get emptyCubeTextureView(){return this.#Ue}get managedBitmapTextureState(){return this.#sn}get managedCubeTextureState(){return this.#on}get managedHDRTextureState(){return this.#un}get managedUniformBufferState(){return this.#ln}get managedVertexBufferState(){return this.#cn}get managedIndexBufferState(){return this.#hn}get managedStorageBufferState(){return this.#fn}get resources(){return this.#an}createGPUShaderModule(i,m){return this.#vn(i,m,m=>this.#bn(i,m),ri.GPUShaderModule)}getGPUShaderModule(i){return this.#yn(i,ri.GPUShaderModule)}deleteGPUShaderModule(i){this.#Tn(i,ri.GPUShaderModule)}createBindGroupLayout(i,m){return this.#vn(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createBindGroupLayout(m)),ri.GPUBindGroupLayout)}getGPUBindGroupLayout(i){return this.#yn(i,ri.GPUBindGroupLayout)}deleteGPUBindGroupLayout(i){this.#Tn(i,ri.GPUBindGroupLayout)}createGPUPipelineLayout(i,m){return this.#vn(i,m,m=>(m.label||(m.label=i),this.redGPUContext.gpuDevice.createPipelineLayout(m)),ri.GPUPipelineLayout)}getGPUPipelineLayout(i){return this.#yn(i,ri.GPUPipelineLayout)}deleteGPUPipelineLayout(i){this.#Tn(i,ri.GPUPipelineLayout)}#_n(){const{gpuDevice:i}=this.redGPUContext;{const m=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:1},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"EMPTY_BITMAP_TEXTURE"});this.#mn=m.createView({label:m.label});const g=new Uint8Array([0,0,0,0]);i.queue.writeTexture({texture:m},g,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});const _=i.createTexture({size:{width:1,height:1,depthOrArrayLayers:6},format:"rgba8unorm",usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:"EMPTY_CUBE_TEXTURE"});this.#Ue=_.createView(CubeTexture.defaultViewDescriptor);const b=new Uint8Array([0,0,0,0]);for(let m=0;m<6;m++)i.queue.writeTexture({texture:_,origin:{x:0,y:0,z:m}},b,{bytesPerRow:4,rowsPerImage:1},{width:1,height:1,depthOrArrayLayers:1});this.#xn=new Sampler(this.redGPUContext)}this.createBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT,sampler:{type:"comparison"}},{binding:2,visibility:GPUShaderStage.FRAGMENT,texture:{sampleType:"depth"}},{binding:3,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:5,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}},{binding:6,visibility:GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE,buffer:{type:"storage"}},{binding:7,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:8,visibility:GPUShaderStage.FRAGMENT,texture:{}},{binding:9,visibility:GPUShaderStage.FRAGMENT,sampler:{type:"filtering"}},{binding:10,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}},{binding:11,visibility:GPUShaderStage.FRAGMENT,texture:{viewDimension:"cube"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}},{binding:3,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}}]}),this.createBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing,{entries:[{binding:0,visibility:GPUShaderStage.VERTEX,buffer:{type:"read-only-storage"}},{binding:1,visibility:GPUShaderStage.VERTEX,sampler:{type:"filtering"}},{binding:2,visibility:GPUShaderStage.VERTEX,texture:{}}]})}#Sn(i){return this.#an.get(i)}#bn(i,m){const{code:g}=m,_=preprocessWGSL(g).defaultSource,b=this.redGPUContext.gpuDevice.createShaderModule({...m,code:_});return this.#Sn(ri.GPUShaderModule).set(i,b),b}#wn(i,m){if(!i)throw new Error("Name is required");return this.#Sn(m)}#vn(i,m,g,_){const b=this.#wn(i,_);if(b.has(i))return b.get(i);m.label||(m.label=i);const y=g(m);return b.set(i,y),y}#yn(i,m){return this.#wn(i,m).get(i)}#Tn(i,m){const g=this.#wn(i,m);if(!g.has(i))throw new Error(`${m} with name ${i} doesn't exist.`);g.delete(i)}}Object.freeze(BitmapTexture);class ImmutableKeyMap extends Map{constructor(i=[]){super(),i?.forEach(([i,m])=>super.set(i,m))}set(i,m){if(this.has(i))throw new Error("Cannot change the value of an existing key");return super.set(i,m)}}const createMeshVertexUniformBuffers=(i,m=!1)=>{const{gpuRenderInfo:g,redGPUContext:_}=i,{resourceManager:b}=_,y=b.getGPUBindGroupLayout(m?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout),T=new ArrayBuffer(g.vertexUniformInfo.arrayBufferByteLength),w=new UniformBuffer(_,T,i.name);g.vertexBindGroupLayout=y,g.vertexUniformBuffer=w};class ABitmapBaseMaterial extends ABaseMaterial{__packingList;constructor(i,m,g,_){super(i,m,g,_)}updateTexture(i,m){i&&i.__removeDirtyPipelineListener(this.#Mn),m&&m.__addDirtyPipelineListener(this.#Mn),this.#Mn()}updateSampler(i,m){i&&i.__removeDirtyPipelineListener(this.#Mn),m&&m.__addDirtyPipelineListener(this.#Mn),this.#Mn()}#Mn=()=>{this.dirtyPipeline=!0;{let i=(this.__packingList||[]).length;for(;i--;)this.__packingList[i]()}this.gpuRenderInfo?.fragmentShaderModule?this._updateFragmentState():this.initGPURenderInfos()}}Object.freeze(ABitmapBaseMaterial);const ai=[{textureList:["baseColorTexture"],vec4List:[["baseColorFactor",[1,1,1,1]]]},{textureList:["normalTexture"]},{textureList:["metallicRoughnessTexture"],positiveNumberList:["metallicFactor","roughnessFactor"]},{textureList:["emissiveTexture"],vec3List:["emissiveFactor"]},{textureList:["occlusionTexture"],positiveNumberList:["occlusionStrength"]},{extensionName:"KHR_materials_clearcoat",textureList:["KHR_clearcoatTexture","KHR_clearcoatNormalTexture","KHR_clearcoatRoughnessTexture"],positiveNumberList:[["KHR_clearcoatFactor",0],["KHR_clearcoatRoughnessFactor",0],"KHR_clearcoatNormalScale"]},{extensionName:"KHR_materials_sheen",textureList:["KHR_sheenColorTexture","KHR_sheenRoughnessTexture"],positiveNumberList:[["KHR_sheenRoughnessFactor",0]],vec3List:[["KHR_sheenColorFactor",[0,0,0]]]},{extensionName:"KHR_materials_specular",textureList:["KHR_specularTexture","KHR_specularColorTexture"],positiveNumberList:["KHR_specularFactor"],vec3List:[["KHR_specularColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_transmission",textureList:["KHR_transmissionTexture"],positiveNumberList:[["KHR_transmissionFactor",0]]},{extensionName:"KHR_materials_volume",textureList:["KHR_thicknessTexture"],positiveNumberList:[["KHR_thicknessFactor",0],["KHR_attenuationDistance",1]],vec3List:[["KHR_attenuationColor",[1,1,1]]]},{extensionName:"KHR_materials_diffuse_transmission",textureList:["KHR_diffuseTransmissionTexture","KHR_diffuseTransmissionColorTexture"],positiveNumberList:[["KHR_diffuseTransmissionFactor",0]],vec3List:[["KHR_diffuseTransmissionColorFactor",[1,1,1]]]},{extensionName:"KHR_materials_anisotropy",textureList:["KHR_anisotropyTexture"],positiveNumberList:[["KHR_anisotropyStrength",0],["KHR_anisotropyRotation",0]]},{extensionName:"KHR_materials_iridescence",textureList:["KHR_iridescenceTexture","KHR_iridescenceThicknessTexture"],positiveNumberList:[["KHR_iridescenceFactor",0],["KHR_iridescenceIor",1.3],["KHR_iridescenceThicknessMinimum",100],["KHR_iridescenceThicknessMaximum",400]]}],si=parseWGSL((i=>{const m=ai.map(i=>{const{textureList:m,positiveNumberList:g}=i,_=m?.map(i=>` use${i.charAt(0).toUpperCase()}${i.substring(1)}:u32, ${i}_texCoord_index:u32, use_${i}_KHR_texture_transform:u32, ${i}_KHR_texture_transform_offset:vec2<f32>, ${i}_KHR_texture_transform_scale:vec2<f32>, ${i}_KHR_texture_transform_rotation:f32,`).join("");return[_].join("\n")}).join("");return i.replace(/#redgpu_include KHR_texture_transform/g,m)})("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include calcTintBlendMode;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\n#redgpu_include calcPrePathBackground\nstruct Uniforms { useVertexColor:u32, useCutOff:u32, cutOff:f32, alphaBlend:u32, doubleSided:u32, useVertexTangent:u32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32, baseColorFactor:vec4<f32>, emissiveFactor:vec3<f32>, emissiveStrength:f32, occlusionStrength:f32, metallicFactor:f32, roughnessFactor:f32, normalScale:f32, useKHR_materials_unlit:u32, KHR_materials_ior:f32, useKHR_materials_transmission:u32, KHR_transmissionFactor:f32, useKHR_materials_diffuse_transmission:u32, KHR_diffuseTransmissionFactor:f32, KHR_diffuseTransmissionColorFactor:vec3<f32>, KHR_dispersion:f32, useKHR_materials_volume:u32, KHR_thicknessFactor:f32, KHR_attenuationDistance:f32, KHR_attenuationColor:vec3<f32>, useKHR_materials_specular:u32, KHR_specularFactor:f32, KHR_specularColorFactor:vec3<f32>, useKHR_materials_anisotropy:u32, KHR_anisotropyStrength:f32, KHR_anisotropyRotation:f32, useKHR_materials_iridescence:u32, KHR_iridescenceFactor:f32, KHR_iridescenceIor:f32, KHR_iridescenceThicknessMinimum:f32, KHR_iridescenceThicknessMaximum:f32, useKHR_materials_sheen:u32, KHR_sheenColorFactor:vec3<f32>, KHR_sheenRoughnessFactor:f32, useKHR_materials_clearcoat:u32, KHR_clearcoatFactor:f32, KHR_clearcoatRoughnessFactor:f32, KHR_clearcoatNormalScale:f32, #redgpu_include KHR_texture_transform\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var baseColorTextureSampler:sampler;\n@group(2) @binding(2) var baseColorTexture:texture_2d<f32>;\n@group(2) @binding(3) var emissiveTextureSampler:sampler;\n@group(2) @binding(4) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(5) var normalTextureSampler:sampler;\n@group(2) @binding(6) var normalTexture:texture_2d<f32>;\n@group(2) @binding(7) var packedORMTexture:texture_2d<f32>;\n@group(2) @binding(8) var KHR_specularTextureSampler:sampler;\n@group(2) @binding(9) var KHR_specularTexture:texture_2d<f32>;\n@group(2) @binding(10) var KHR_specularColorTextureSampler:sampler;\n@group(2) @binding(11) var KHR_specularColorTexture:texture_2d<f32>;\n@group(2) @binding(12) var KHR_clearcoatNormalTexture:texture_2d<f32>;\n@group(2) @binding(13) var packedKHR_clearcoatTexture_transmission:texture_2d<f32>;\n@group(2) @binding(14) var packedKHR_diffuse_transmission:texture_2d<f32>;\n@group(2) @binding(15) var packedKHR_sheen:texture_2d<f32>;\n@group(2) @binding(16) var KHR_anisotropyTexture:texture_2d<f32>;\n@group(2) @binding(17) var packedKHR_iridescence:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32,\n}\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> { let input_vertexNormal=(inputData.vertexNormal.xyz); let input_vertexPosition=inputData.vertexPosition.xyz; let input_vertexColor_0=inputData.vertexColor_0; let input_vertexTangent=inputData.vertexTangent; let input_ndcPosition=inputData.ndcPosition; let input_uv=inputData.uv; let input_uv1=inputData.uv1; let u_ambientLight=systemUniforms.ambientLight; let u_ambientLightColor=u_ambientLight.color; let u_ambientLightIntensity=u_ambientLight.intensity; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize; let u_bias=systemUniforms.bias; let u_useIblTexture=systemUniforms.useIblTexture==1u; let receiveShadowYn=inputData.receiveShadow !=.0; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_opacity=uniforms.opacity; let u_cutOff=uniforms.cutOff; let u_useVertexColor=uniforms.useVertexColor==1u; let u_useVertexTangent=uniforms.useVertexTangent==1u; let u_baseColorFactor=uniforms.baseColorFactor; let u_metallicFactor=uniforms.metallicFactor; let u_roughnessFactor=uniforms.roughnessFactor; let u_normalScale=uniforms.normalScale; let u_occlusionStrength=uniforms.occlusionStrength; let u_emissiveFactor=uniforms.emissiveFactor; let u_emissiveStrength=uniforms.emissiveStrength; let u_useKHR_materials_unlit=uniforms.useKHR_materials_unlit==1u; let u_KHR_materials_ior=uniforms.KHR_materials_ior; let u_KHR_dispersion=uniforms.KHR_dispersion; let u_KHR_transmissionFactor=uniforms.KHR_transmissionFactor; var u_useKHR_materials_volume=uniforms.useKHR_materials_volume==1u; var u_KHR_thicknessFactor=uniforms.KHR_thicknessFactor; var u_KHR_attenuationColor=uniforms.KHR_attenuationColor; var u_KHR_attenuationDistance=uniforms.KHR_attenuationDistance; let u_useKHR_materials_diffuse_transmission=uniforms.useKHR_materials_diffuse_transmission==1u; let u_KHR_diffuseTransmissionFactor=uniforms.KHR_diffuseTransmissionFactor; let u_KHR_diffuseTransmissionColorFactor=uniforms.KHR_diffuseTransmissionColorFactor; let u_KHR_specularFactor=uniforms.KHR_specularFactor; let u_KHR_specularColorFactor=uniforms.KHR_specularColorFactor; let u_KHR_anisotropyStrength=uniforms.KHR_anisotropyStrength; let u_KHR_anisotropyRotation=uniforms.KHR_anisotropyRotation; let u_useKHR_anisotropyTexture=uniforms.useKHR_anisotropyTexture==1u; let u_KHR_sheenColorFactor=uniforms.KHR_sheenColorFactor; let u_KHR_sheenRoughnessFactor=uniforms.KHR_sheenRoughnessFactor; let u_useKHR_materials_iridescence=uniforms.useKHR_materials_iridescence==1u; let u_KHR_iridescenceFactor=uniforms.KHR_iridescenceFactor; let u_KHR_iridescenceIor=uniforms.KHR_iridescenceIor; let u_KHR_iridescenceThicknessMinimum=uniforms.KHR_iridescenceThicknessMinimum; let u_KHR_iridescenceThicknessMaximum=uniforms.KHR_iridescenceThicknessMaximum; let u_KHR_clearcoatFactor=uniforms.KHR_clearcoatFactor; let u_KHR_clearcoatRoughnessFactor=uniforms.KHR_clearcoatRoughnessFactor; let u_KHR_clearcoatNormalScale=uniforms.KHR_clearcoatNormalScale; let diffuseUV=get_transformed_uv( input_uv,input_uv1, uniforms.baseColorTexture_texCoord_index, uniforms.use_baseColorTexture_KHR_texture_transform, uniforms.baseColorTexture_KHR_texture_transform_offset, uniforms.baseColorTexture_KHR_texture_transform_rotation, uniforms.baseColorTexture_KHR_texture_transform_scale ); let emissiveUV=get_transformed_uv( input_uv,input_uv1, uniforms.emissiveTexture_texCoord_index, uniforms.use_emissiveTexture_KHR_texture_transform, uniforms.emissiveTexture_KHR_texture_transform_offset, uniforms.emissiveTexture_KHR_texture_transform_rotation, uniforms.emissiveTexture_KHR_texture_transform_scale ); let occlusionUV=get_transformed_uv( input_uv,input_uv1, uniforms.occlusionTexture_texCoord_index, uniforms.use_occlusionTexture_KHR_texture_transform, uniforms.occlusionTexture_KHR_texture_transform_offset, uniforms.occlusionTexture_KHR_texture_transform_rotation, uniforms.occlusionTexture_KHR_texture_transform_scale ); let metallicRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.metallicRoughnessTexture_texCoord_index, uniforms.use_metallicRoughnessTexture_KHR_texture_transform, uniforms.metallicRoughnessTexture_KHR_texture_transform_offset, uniforms.metallicRoughnessTexture_KHR_texture_transform_rotation, uniforms.metallicRoughnessTexture_KHR_texture_transform_scale ); let normalUV=get_transformed_uv( input_uv,input_uv1, uniforms.normalTexture_texCoord_index, uniforms.use_normalTexture_KHR_texture_transform, uniforms.normalTexture_KHR_texture_transform_offset, uniforms.normalTexture_KHR_texture_transform_rotation, uniforms.normalTexture_KHR_texture_transform_scale ); let KHR_clearcoatUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatTexture_texCoord_index, uniforms.use_KHR_clearcoatTexture_KHR_texture_transform, uniforms.KHR_clearcoatTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatTexture_KHR_texture_transform_scale ); let KHR_clearcoatNormalUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatNormalTexture_texCoord_index, uniforms.use_KHR_clearcoatNormalTexture_KHR_texture_transform, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatNormalTexture_KHR_texture_transform_scale ); let KHR_clearcoatRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_clearcoatRoughnessTexture_texCoord_index, uniforms.use_KHR_clearcoatRoughnessTexture_KHR_texture_transform, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_offset, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_rotation, uniforms.KHR_clearcoatRoughnessTexture_KHR_texture_transform_scale ); let KHR_sheenColorUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_sheenColorTexture_texCoord_index, uniforms.use_KHR_sheenColorTexture_KHR_texture_transform, uniforms.KHR_sheenColorTexture_KHR_texture_transform_offset, uniforms.KHR_sheenColorTexture_KHR_texture_transform_rotation, uniforms.KHR_sheenColorTexture_KHR_texture_transform_scale ); let KHR_sheenRoughnessUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_sheenRoughnessTexture_texCoord_index, uniforms.use_KHR_sheenRoughnessTexture_KHR_texture_transform, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_offset, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_rotation, uniforms.KHR_sheenRoughnessTexture_KHR_texture_transform_scale ); let KHR_specularTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_specularTexture_texCoord_index, uniforms.use_KHR_specularTexture_KHR_texture_transform, uniforms.KHR_specularTexture_KHR_texture_transform_offset, uniforms.KHR_specularTexture_KHR_texture_transform_rotation, uniforms.KHR_specularTexture_KHR_texture_transform_scale ); let KHR_specularColorTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_specularColorTexture_texCoord_index, uniforms.use_KHR_specularColorTexture_KHR_texture_transform, uniforms.KHR_specularColorTexture_KHR_texture_transform_offset, uniforms.KHR_specularColorTexture_KHR_texture_transform_rotation, uniforms.KHR_specularColorTexture_KHR_texture_transform_scale ); let KHR_iridescenceTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_iridescenceTexture_texCoord_index, uniforms.use_KHR_iridescenceTexture_KHR_texture_transform, uniforms.KHR_iridescenceTexture_KHR_texture_transform_offset, uniforms.KHR_iridescenceTexture_KHR_texture_transform_rotation, uniforms.KHR_iridescenceTexture_KHR_texture_transform_scale ); let KHR_iridescenceThicknessTextureUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_iridescenceThicknessTexture_texCoord_index, uniforms.use_KHR_iridescenceThicknessTexture_KHR_texture_transform, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_offset, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_rotation, uniforms.KHR_iridescenceThicknessTexture_KHR_texture_transform_scale ); let KHR_transmissionUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_transmissionTexture_texCoord_index, uniforms.use_KHR_transmissionTexture_KHR_texture_transform, uniforms.KHR_transmissionTexture_KHR_texture_transform_offset, uniforms.KHR_transmissionTexture_KHR_texture_transform_rotation, uniforms.KHR_transmissionTexture_KHR_texture_transform_scale ); let KHR_diffuseTransmissionUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_diffuseTransmissionTexture_texCoord_index, uniforms.use_KHR_diffuseTransmissionTexture_KHR_texture_transform, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_offset, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_rotation, uniforms.KHR_diffuseTransmissionTexture_KHR_texture_transform_scale ); let KHR_diffuseTransmissionColorUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_diffuseTransmissionColorTexture_texCoord_index, uniforms.use_KHR_diffuseTransmissionColorTexture_KHR_texture_transform, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_offset, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_rotation, uniforms.KHR_diffuseTransmissionColorTexture_KHR_texture_transform_scale ); let KHR_anisotropyUV=get_transformed_uv( input_uv,input_uv1, uniforms.KHR_anisotropyTexture_texCoord_index, uniforms.use_KHR_anisotropyTexture_KHR_texture_transform, uniforms.KHR_anisotropyTexture_KHR_texture_transform_offset, uniforms.KHR_anisotropyTexture_KHR_texture_transform_rotation, uniforms.KHR_anisotropyTexture_KHR_texture_transform_scale ); var N:vec3<f32>=normalize(input_vertexNormal.xyz); var backFaceYn:bool=false; #redgpu_if doubleSided { var fdx:vec3<f32>=dpdx(input_vertexPosition); var fdy:vec3<f32>=dpdy(input_vertexPosition); var faceNormal:vec3<f32>=normalize(cross(fdy,fdx)); if (dot(N,faceNormal) < 0.0) { N=-N; backFaceYn=true; }; } #redgpu_endIf #redgpu_if normalTexture { var targetUv=select(normalUV,1.0 - normalUV,backFaceYn); let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,normalUV).rgb; N=perturb_normal( N, input_vertexPosition, targetUv, vec3<f32>(normalSamplerColor.r,1.0 - normalSamplerColor.g,normalSamplerColor.b), u_normalScale ); N=select(N,select(N,-N,backFaceYn),u_useVertexTangent); } #redgpu_else { N=N * u_normalScale; } #redgpu_endIf let V:vec3<f32>=normalize(u_cameraPosition - input_vertexPosition); let NdotV=max(dot(N,V),0.04); let VdotN=max(dot(V,N),0.0); var visibility:f32=1.0; visibility=calcDirectionalShadowVisibility( directionalShadowMap, directionalShadowMapSampler, u_shadowDepthTextureSize, u_bias, inputData.shadowPos ); if(!receiveShadowYn){ visibility=1.0; } var finalColor:vec4<f32>; var ior:f32=u_KHR_materials_ior; var baseColor=u_baseColorFactor; var resultAlpha:f32=u_opacity * baseColor.a; baseColor *=select(vec4<f32>(1.0),input_vertexColor_0,u_useVertexColor); #redgpu_if baseColorTexture let diffuseSampleColor=(textureSample(baseColorTexture,baseColorTextureSampler,diffuseUV)); baseColor *=diffuseSampleColor; resultAlpha *=diffuseSampleColor.a; #redgpu_endIf let albedo:vec3<f32>=baseColor.rgb; #redgpu_if useKHR_materials_unlit if(u_useKHR_materials_unlit){ return baseColor; } #redgpu_endIf var occlusionParameter:f32=1; #redgpu_if useOcclusionTexture occlusionParameter=textureSample(packedORMTexture,packedTextureSampler,occlusionUV).r * u_occlusionStrength; #redgpu_endIf var metallicParameter:f32=u_metallicFactor; var roughnessParameter:f32=u_roughnessFactor; #redgpu_if useMetallicRoughnessTexture let metallicRoughnessSample=(textureSample(packedORMTexture,packedTextureSampler,metallicRoughnessUV)); metallicParameter=metallicRoughnessSample.b * metallicParameter; roughnessParameter=metallicRoughnessSample.g * roughnessParameter; #redgpu_endIf roughnessParameter=max(roughnessParameter,0.045); if (abs(ior - 1.0) < 0.0001) { roughnessParameter=0;} var clearcoatParameter=u_KHR_clearcoatFactor; var clearcoatRoughnessParameter=u_KHR_clearcoatRoughnessFactor; var clearcoatNormal:vec3<f32>=N; if(clearcoatParameter !=0.0){ #redgpu_if useKHR_clearcoatTexture let clearcoatSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatUV); clearcoatParameter *=clearcoatSample.r; #redgpu_endIf #redgpu_if useKHR_clearcoatRoughnessTexture let clearcoatRoughnesstSample=textureSample(packedKHR_clearcoatTexture_transmission,packedTextureSampler,KHR_clearcoatRoughnessUV); clearcoatRoughnessParameter *=clearcoatRoughnesstSample.g; #redgpu_endIf var clearcoatNormalSampler=textureSample(KHR_clearcoatNormalTexture,baseColorTextureSampler,KHR_clearcoatNormalUV); #redgpu_if useKHR_clearcoatNormalTexture { var targetUv=KHR_clearcoatNormalUV; if(backFaceYn){ targetUv=1.0 - targetUv; } clearcoatNormal=clearcoatNormalSampler.rgb; clearcoatNormal=perturb_normal( N, input_vertexPosition, targetUv, clearcoatNormal, u_normalScale ); if(u_useVertexTangent){ if(backFaceYn ){ clearcoatNormal=-clearcoatNormal;} } clearcoatNormal=normalize(clearcoatNormal); } #redgpu_endIf } var specularParameter=u_KHR_specularFactor; var specularColor=u_KHR_specularColorFactor; #redgpu_if KHR_specularColorTexture let specularColorTextureSample=textureSample( KHR_specularColorTexture, KHR_specularColorTextureSampler, KHR_specularColorTextureUV ); specularColor *=specularColorTextureSample.rgb; #redgpu_endIf #redgpu_if KHR_specularTexture let specularTextureSample=textureSample( KHR_specularTexture, KHR_specularTextureSampler, KHR_specularTextureUV ); specularParameter *=specularTextureSample.a; #redgpu_endIf var transmissionParameter:f32=u_KHR_transmissionFactor; #redgpu_if useKHR_transmissionTexture let transmissionSample:vec4<f32>=textureSample( packedKHR_clearcoatTexture_transmission, packedTextureSampler, KHR_transmissionUV ); transmissionParameter *=transmissionSample.b; #redgpu_endIf var thicknessParameter:f32=u_KHR_thicknessFactor; #redgpu_if useKHR_thicknessTexture let thicknessSample:vec4<f32>=textureSample( packedKHR_clearcoatTexture_transmission, packedTextureSampler, KHR_transmissionUV ); thicknessParameter *=thicknessSample.a; #redgpu_endIf var diffuseTransmissionColor:vec3<f32>=u_KHR_diffuseTransmissionColorFactor; var diffuseTransmissionParameter:f32=u_KHR_diffuseTransmissionFactor; #redgpu_if useKHR_diffuseTransmissionTexture let diffuseTransmissionTextureSample=textureSample( packedKHR_diffuse_transmission, packedTextureSampler, KHR_diffuseTransmissionUV ); diffuseTransmissionParameter *=diffuseTransmissionTextureSample.a; #redgpu_endIf #redgpu_if useKHR_diffuseTransmissionColorTexture let diffuseTransmissionColorTextureSample=textureSample( packedKHR_diffuse_transmission, packedTextureSampler, KHR_diffuseTransmissionColorUV ); diffuseTransmissionColor *=diffuseTransmissionColorTextureSample.rgb; #redgpu_endIf var sheenColor=u_KHR_sheenColorFactor; var sheenRoughnessParameter=u_KHR_sheenRoughnessFactor; #redgpu_if useKHR_sheenColorTexture let sheenColorSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenColorUV)); sheenColor *=sheenColorSample.rgb; #redgpu_endIf #redgpu_if useKHR_sheenRoughnessTexture let sheenRoughnessSample=(textureSample(packedKHR_sheen,packedTextureSampler,KHR_sheenRoughnessUV)); sheenRoughnessParameter *=sheenRoughnessSample.a; #redgpu_endIf var iridescenceParameter=u_KHR_iridescenceFactor; var iridescenceThickness=u_KHR_iridescenceThicknessMaximum; #redgpu_if useKHR_iridescenceTexture let iridescenceTextureSample:vec4<f32>=textureSample( packedKHR_iridescence, packedTextureSampler, KHR_iridescenceTextureUV ); iridescenceParameter *=iridescenceTextureSample.r; #redgpu_endIf #redgpu_if useKHR_iridescenceThicknessTexture let iridescenceThicknessTextureSample:vec4<f32>=textureSample( packedKHR_iridescence, packedTextureSampler, KHR_iridescenceThicknessTextureUV ); iridescenceThickness=mix(u_KHR_iridescenceThicknessMinimum,u_KHR_iridescenceThicknessMaximum,iridescenceThicknessTextureSample.g); #redgpu_endIf var anisotropy:f32=u_KHR_anisotropyStrength; var anisotropicT:vec3<f32>=vec3<f32>(1.0); var anisotropicB:vec3<f32>=vec3<f32>(1.0); #redgpu_if useKHR_materials_anisotropy { var anisotropicDirection:vec2<f32>=vec2<f32>(1.0,0.0); if(u_useKHR_anisotropyTexture){ let anisotropyTex=textureSample(KHR_anisotropyTexture,baseColorTextureSampler,KHR_anisotropyUV).rgb; anisotropicDirection=anisotropyTex.rg * 2.0 - vec2<f32>(1.0,1.0); var anisotropyRotation:vec2<f32>; if( u_KHR_anisotropyRotation < 0.0001 ){ anisotropyRotation=vec2<f32>(1.0,0.0);} else{ anisotropyRotation=vec2<f32>( cos(u_KHR_anisotropyRotation),sin(u_KHR_anisotropyRotation) );} let rotationMtx:mat2x2<f32>=mat2x2<f32>( anisotropyRotation.x,anisotropyRotation.y, -anisotropyRotation.y,anisotropyRotation.x ); anisotropicDirection=rotationMtx * normalize(anisotropicDirection); anisotropy *=anisotropyTex.b; } var T:vec3<f32>; var B:vec3<f32>; if (u_useVertexTangent) { if (length(input_vertexTangent.xyz) > 0.0) { T=normalize(input_vertexTangent.xyz); B=normalize(cross(T,N) * input_vertexTangent.w); } else { T=vec3<f32>(1.0,0.0,0.0); B=normalize(cross(T,N) * 1.0); } } else { T=vec3<f32>(1.0,0.0,0.0); B=normalize(cross(T,N) * 1.0); } let TBN:mat3x3<f32>=mat3x3<f32>(T,B,N); anisotropicT=normalize(TBN * vec3<f32>(anisotropicDirection,0.0)); anisotropicB=normalize(cross(N,anisotropicT)); } #redgpu_endIf var prePathBackground=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission prePathBackground=calcPrePathBackground( u_useKHR_materials_volume,thicknessParameter * inputData.volumeScale,u_KHR_dispersion,u_KHR_attenuationDistance,u_KHR_attenuationColor, ior,roughnessParameter,albedo, systemUniforms.projectionCameraMatrix,input_vertexPosition,input_ndcPosition, V,N, renderPath1ResultTexture,renderPath1ResultTextureSampler ); #redgpu_endIf let F0_dielectric:vec3<f32>=vec3(pow((1.0 - ior)/(1.0 + ior),2.0)); let F0_metal=baseColor.rgb; var F0=mix(F0_dielectric,F0_metal,metallicParameter); #redgpu_if useKHR_materials_iridescence if (iridescenceParameter > 0.0) { F0=iridescent_fresnel(1.0,u_KHR_iridescenceIor,F0,iridescenceThickness,iridescenceParameter,NdotV); } #redgpu_endIf var totalDirectLighting=vec3<f32>(0.0); for (var i=0u;i < u_directionalLightCount;i++) { totalDirectLighting +=calcLight( u_directionalLights[i].color,u_directionalLights[i].intensity * visibility, N,V,-normalize(u_directionalLights[i].direction), VdotN, roughnessParameter,metallicParameter,albedo, F0,ior, prePathBackground, specularColor,specularParameter, u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor, transmissionParameter, sheenColor,sheenRoughnessParameter, anisotropy,anisotropicT,anisotropicB, clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal ); } { let clusterIndex=getClusterLightClusterIndex(inputData.position); let lightOffset=clusterLightGroup.lights[clusterIndex].offset; let lightCount:u32=clusterLightGroup.lights[clusterIndex].count; for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) { let i=clusterLightGroup.indices[lightOffset + lightIndex]; let targetLight=clusterLightList.lights[i]; let u_clusterLightPosition=targetLight.position; let u_clusterLightRadius=targetLight.radius; let u_isSpotLight=targetLight.isSpotLight; let lightDistance=length(u_clusterLightPosition - input_vertexPosition); if (lightDistance > u_clusterLightRadius) { continue; } let lightDir=normalize(u_clusterLightPosition - input_vertexPosition); let attenuation=clamp(1.0 - (lightDistance * lightDistance)/(u_clusterLightRadius * u_clusterLightRadius),0.0,1.0); var finalAttenuation=attenuation; if (u_isSpotLight > 0.0) { let u_clusterLightDirection=normalize(vec3<f32>( targetLight.directionX, targetLight.directionY, targetLight.directionZ )); let u_clusterLightInnerAngle=targetLight.innerCutoff; let u_clusterLightOuterCutoff=targetLight.outerCutoff; let lightToVertex=normalize(-lightDir); let cosTheta=dot(lightToVertex,u_clusterLightDirection); let cosOuter=cos(radians(u_clusterLightOuterCutoff)); let cosInner=cos(radians(u_clusterLightInnerAngle)); if (cosTheta < cosOuter) { continue; } let epsilon=cosInner - cosOuter; let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0); finalAttenuation *=spotIntensity; } totalDirectLighting +=calcLight( targetLight.color,targetLight.intensity * finalAttenuation, N,V,lightDir, VdotN, roughnessParameter,metallicParameter,albedo, F0,ior, prePathBackground, specularColor,specularParameter, u_useKHR_materials_diffuse_transmission,diffuseTransmissionParameter,diffuseTransmissionColor, transmissionParameter, sheenColor,sheenRoughnessParameter, anisotropy,anisotropicT,anisotropicB, clearcoatParameter,clearcoatRoughnessParameter,clearcoatNormal ); } } if (u_useIblTexture) { let R=normalize(reflect(-V,N)); let NdotV=max(dot(N,V),0.04); let NdotV_fresnel=max(dot(N,V),0.04); let fresnel=pow(1.0 - NdotV_fresnel,5.0); let F_IBL_dielectric=F0_dielectric + (vec3<f32>(1.0) - F0_dielectric) * fresnel; let F_IBL_metal=F0_metal + (vec3<f32>(1.0) - F0_metal) * fresnel; var F_IBL=F0 + (vec3<f32>(1.0) - F0) * fresnel; #redgpu_if useKHR_materials_iridescence if (iridescenceParameter > 0.0) { let base_f0=mix(F0_dielectric,baseColor.rgb,metallicParameter); let iridescence_effect=iridescent_fresnel( 1.0, u_KHR_iridescenceIor, base_f0, iridescenceThickness, iridescenceParameter, NdotV  ); F_IBL=iridescence_effect; } #redgpu_endIf let K=(roughnessParameter + 1.0) * (roughnessParameter + 1.0)/8.0; let G=NdotV/(NdotV * (1.0 - K) + K); let a2=roughnessParameter * roughnessParameter; let G_smith=NdotV/(NdotV * (1.0 - a2) + a2); let iblMipmapCount:f32=f32(textureNumLevels(ibl_environmentTexture) - 1); let mipLevel=pow(roughnessParameter,0.4) * iblMipmapCount; var reflectedColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,R,mipLevel).rgb; let effectiveTransmission=transmissionParameter * (1.0 - metallicParameter); let iblDiffuseColor=textureSampleLevel(ibl_irradianceTexture,iblTextureSampler,N,0).rgb; var envIBL_DIFFUSE:vec3<f32>=albedo * iblDiffuseColor * (vec3<f32>(1.0) - F_IBL_dielectric); #redgpu_if useKHR_materials_diffuse_transmission { var backScatteringColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,-N,mipLevel).rgb; let transmittedIBL=backScatteringColor * diffuseTransmissionColor * (vec3<f32>(1.0) - F_IBL); envIBL_DIFFUSE=mix(envIBL_DIFFUSE,transmittedIBL,diffuseTransmissionParameter); } #redgpu_endIf var envIBL_SPECULAR:vec3<f32>; let specularColorCorrected=max(vec3<f32>(0.16),specularColor); envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter; #redgpu_if useKHR_materials_anisotropy { var bentNormal=cross(anisotropicB,V); bentNormal=normalize(cross(bentNormal,anisotropicB)); let temp=1.0 - anisotropy * (1.0 - roughnessParameter); let tempSquared=temp * temp; var a=tempSquared * tempSquared; bentNormal=normalize(mix(bentNormal,N,a)); var reflectVec=reflect(-V,bentNormal); reflectVec=normalize(mix(reflectVec,bentNormal,roughnessParameter * roughnessParameter)); let roughnessT=roughnessParameter * (1.0 + anisotropy); let roughnessB=roughnessParameter * (1.0 - anisotropy); let TdotR=dot(anisotropicT,reflectVec); let BdotR=dot(anisotropicB,reflectVec); let TdotV=dot(anisotropicT,V); let BdotV=dot(anisotropicB,V); let anisotropicR=normalize(reflectVec - anisotropy * (TdotR * anisotropicT - BdotR * anisotropicB)); let VdotN=max(0.04,dot(V,N)); let oneMinusVdotN=1.0 - VdotN; let directionFactor=oneMinusVdotN * oneMinusVdotN * oneMinusVdotN; let VdotT_abs=abs(TdotV); let VdotB_abs=abs(BdotV); let totalWeight=max(0.0001,VdotT_abs + VdotB_abs); let weightedRoughness=(roughnessT * VdotT_abs + roughnessB * VdotB_abs)/totalWeight; let anisotropyFactor=max(0.0,min(1.0,anisotropy)); let finalRoughness=mix( roughnessParameter,weightedRoughness,anisotropyFactor * directionFactor ); let anistropyMipmap=pow(finalRoughness,0.4) * iblMipmapCount; reflectedColor=textureSampleLevel( ibl_environmentTexture,iblTextureSampler,anisotropicR,anistropyMipmap ).rgb; let a2=finalRoughness * finalRoughness; let G_smith=NdotV/(NdotV * (1.0 - a2) + a2); envIBL_SPECULAR=reflectedColor * G_smith * specularColorCorrected * F_IBL * specularParameter; } #redgpu_endIf var envIBL_SPECULAR_BTDF=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission var refractedDir:vec3<f32>; let eta=1.0/ior; if (abs(ior - 1.0) < 0.0001) { refractedDir=V;} else { refractedDir=refract(-V,-N,eta);} if(length(refractedDir) > 0.0001) { let NdotT=abs(dot(N,normalize(refractedDir))); let F_transmission=vec3<f32>(1.0) - F_IBL_dielectric; var attenuatedBackground=prePathBackground; if (u_useKHR_materials_volume) { let localNodeScale=inputData.localNodeScale; let volumeScale=inputData.volumeScale; let scaledThickness=thicknessParameter * localNodeScale; let safeAttenuationColor=clamp(u_KHR_attenuationColor,vec3<f32>(0.0001),vec3<f32>(1.0)); let safeAttenuationDistance=max(u_KHR_attenuationDistance,0.0001); let attenuationCoefficient=-log(safeAttenuationColor)/safeAttenuationDistance; let cosTheta=max(NdotT,0.001); let pathLength=scaledThickness/cosTheta; let transmittance=exp(-attenuationCoefficient * pathLength); attenuatedBackground *=transmittance; }else{ attenuatedBackground *=albedo; } envIBL_SPECULAR_BTDF=attenuatedBackground * F_transmission * transmissionParameter + reflectedColor * G_smith * F_IBL * NdotT; } #redgpu_endIf let envIBL_DIELECTRIC=mix(envIBL_DIFFUSE,envIBL_SPECULAR_BTDF,transmissionParameter) + envIBL_SPECULAR; var envIBL_SHEEN=vec3<f32>(0.0); var sheen_albedo_scaling:f32=1.0; let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z)); #redgpu_if useKHR_materials_sheen let sheenResult=calcIBLSheen( N, V, sheenColor, maxSheenColor, sheenRoughnessParameter, iblMipmapCount ); envIBL_SHEEN=sheenResult.envIBL_SHEEN; sheen_albedo_scaling=sheenResult.sheen_albedo_scaling; #redgpu_endIf let envIBL_METAL=select(reflectedColor * max(baseColor.rgb,vec3<f32>(0.04)),reflectedColor * F_IBL,iridescenceParameter>0.0); let metallicPart=envIBL_METAL * metallicParameter * sheen_albedo_scaling; let dielectricPart=envIBL_DIELECTRIC * (1.0 - metallicParameter); var indirectLighting=metallicPart + dielectricPart + envIBL_SHEEN; #redgpu_if useKHR_materials_clearcoat if (clearcoatParameter > 0.0) { let clearcoatR=reflect(-V,clearcoatNormal); let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04); let clearcoatMipLevel=pow(clearcoatRoughnessParameter,0.4) * iblMipmapCount; let clearcoatPrefilteredColor=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,clearcoatR,clearcoatMipLevel).rgb; let clearcoatF0=F0; let clearcoatF=clearcoatF0 + (vec3<f32>(1.0) - clearcoatF0) * pow(1.0 - clearcoatNdotV,5.0); let clearcoatK=(clearcoatRoughnessParameter + 1.0) * (clearcoatRoughnessParameter + 1.0)/8.0; let clearcoatG=clearcoatNdotV/(clearcoatNdotV * (1.0 - clearcoatK) + clearcoatK); let clearcoatBRDF=clearcoatF * clearcoatG; let clearcoatSpecularIBL=clearcoatPrefilteredColor * clearcoatBRDF * clearcoatParameter; let clearcoatFresnel=clearcoatF; indirectLighting=clearcoatSpecularIBL + (vec3<f32>(1.0) - clearcoatFresnel) * indirectLighting; } #redgpu_endIf let environmentIntensity=1.0; let surfaceColor=totalDirectLighting + indirectLighting * environmentIntensity * occlusionParameter; finalColor=vec4<f32>(surfaceColor,resultAlpha); } else { let ambientContribution=albedo * u_ambientLightColor * u_ambientLightIntensity * occlusionParameter; finalColor=vec4<f32>(totalDirectLighting + ambientContribution,resultAlpha); } var emissiveSamplerColor=vec3<f32>(1.0); #redgpu_if emissiveTexture emissiveSamplerColor=textureSample(emissiveTexture,emissiveTextureSampler,emissiveUV).rgb; #redgpu_endIf finalColor +=vec4<f32>( emissiveSamplerColor.rgb * u_emissiveFactor * u_emissiveStrength,0); finalColor=linear_to_srgb(finalColor); #redgpu_if useCutOff if (resultAlpha <=u_cutOff) { discard;} #redgpu_endIf return finalColor;\n};\nstruct SheenResult { envIBL_SHEEN:vec3<f32>, sheen_albedo_scaling:f32\n}\nfn calcIBLSheen( N:vec3<f32>, V:vec3<f32>, sheenColor:vec3<f32>, maxSheenColor:f32, sheenRoughnessParameter:f32, iblMipmapCount:f32\n) -> SheenResult { let NdotV=max(dot(N,V),0.0001); let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter; let R=reflect(-V,N); let sheenLobe=sheenRoughnessParameter * sheenRoughnessParameter; let sheenSamplingDir=normalize(mix(R,N,sheenLobe)); var sheenMipLevel=log2(sheenRoughnessParameter) * 1.2 + iblMipmapCount - 1.0; sheenMipLevel=clamp(sheenMipLevel,0.0,iblMipmapCount - 1.0); let sheenRadiance=textureSampleLevel(ibl_environmentTexture,iblTextureSampler,sheenSamplingDir,sheenMipLevel).rgb; let F0=0.04; let sheenFresnel=F0 + (1.0 - F0) * pow(1.0 - NdotV,5.0); let E_VdotN=1.0 - pow(1.0 - NdotV,5.0); let sheen_albedo_scaling=max(1.0 - maxSheenColor * E_VdotN,0.04); let envIBL_SHEEN=sheenColor * sheenFresnel; return SheenResult(envIBL_SHEEN,sheen_albedo_scaling);\n}\nfn calcLight( lightColor:vec3<f32>,lightIntensity:f32, N:vec3<f32>,V:vec3<f32>,L:vec3<f32>, VdotN:f32, roughnessParameter:f32,metallicParameter:f32,albedo:vec3<f32>, F0:vec3<f32>,ior:f32, prePathBackground:vec3<f32>, specularColor:vec3<f32>,specularParameter:f32, u_useKHR_materials_diffuse_transmission:bool,diffuseTransmissionParameter:f32,diffuseTransmissionColor:vec3<f32>, transmissionParameter:f32, sheenColor:vec3<f32>,sheenRoughnessParameter:f32, anisotropy:f32,anisotropicT:vec3<f32>,anisotropicB:vec3<f32>, clearcoatParameter:f32,clearcoatRoughnessParameter:f32,clearcoatNormal:vec3<f32>\n) -> vec3<f32>{ let dLight=lightColor * lightIntensity; let NdotL=max(dot(N,L),0.04); let NdotV=max(dot(N,V),0.04); let H=normalize(L + V); let LdotH=max(dot(L,H),0.0); let NdotH=max(dot(N,H),0.0); let VdotH=max(dot(V,H),0.0); var DIFFUSE_BRDF:vec3<f32>=diffuse_brdf_disney(NdotL,NdotV,LdotH,roughnessParameter,albedo); #redgpu_if useKHR_materials_diffuse_transmission DIFFUSE_BRDF=mix(DIFFUSE_BRDF,diffuse_btdf(N,L,diffuseTransmissionColor),diffuseTransmissionParameter); #redgpu_endIf var SPECULAR_BRDF:vec3<f32>; if (anisotropy > 0.0) { #redgpu_if useKHR_materials_anisotropy var TdotL=dot(anisotropicT,L); var TdotV=dot(anisotropicT,V); var BdotL=dot(anisotropicB,L); var TdotH=dot(anisotropicT,H); var BdotH=dot(anisotropicB,H); var BdotV=dot(anisotropicB,V); SPECULAR_BRDF=BRDF_specularAnisotropicGGX( albedo, vec3<f32>(1.0), roughnessParameter * roughnessParameter, VdotH,NdotL,NdotV,NdotH,BdotV,TdotV,TdotL,BdotL,TdotH,BdotH, anisotropy ); #redgpu_endIf }else{ SPECULAR_BRDF=specular_brdf( albedo,roughnessParameter,NdotH,NdotV,NdotL,LdotH); } let METAL_BRDF=conductor_fresnel( albedo,SPECULAR_BRDF,VdotH);; var SPECULAR_BTDF=vec3<f32>(0.0); #redgpu_if useKHR_materials_transmission if(transmissionParameter > 0.0){ SPECULAR_BTDF=specular_btdf( NdotV,NdotL,NdotH,VdotH,LdotH,roughnessParameter,albedo,ior); } #redgpu_endIf let DIELECTRIC_BRDF=fresnel_mix( F0, specularParameter, mix(DIFFUSE_BRDF,SPECULAR_BTDF,transmissionParameter), SPECULAR_BRDF, VdotH ); var SHEEN_BRDF:vec3<f32>=vec3<f32>(0.0); var sheen_albedo_scaling:f32=1.0; #redgpu_if useKHR_materials_sheen let maxSheenColor=max(sheenColor.x,max(sheenColor.y,sheenColor.z)); if(sheenRoughnessParameter > 0.0 && maxSheenColor > 0.001 && dot(N,V) > 0) { let NdotV=dot(N,V); let sheenRoughnessAlpha=sheenRoughnessParameter * sheenRoughnessParameter; let invR=1/sheenRoughnessAlpha; let cos2h=NdotH * NdotH; let sin2h=1 - cos2h; let sheenDistribution=(2 + invR) * pow(sin2h,invR * 0.5)/(2 * pi); let sheen_visibility=1.0/((1.0 + lambda_sheen(NdotV,sheenRoughnessAlpha) + lambda_sheen(NdotL,sheenRoughnessAlpha)) * (4.0 * NdotV * NdotL)); let LdotN=max(dot(L,N),0.04); let E_LdotN=1.0 - pow(1.0 - LdotN,5.0); let E_VdotN=1.0 - pow(1.0 - VdotN,5.0); sheen_albedo_scaling=max(min(1.0 - maxSheenColor * E_VdotN,1.0 - maxSheenColor * E_LdotN),0.04); SHEEN_BRDF=sheenColor * sheenDistribution * sheen_visibility; } #redgpu_endIf let metallicPart=METAL_BRDF * metallicParameter * sheen_albedo_scaling; let dielectricPart=DIELECTRIC_BRDF * sheen_albedo_scaling; let sheenPart=SHEEN_BRDF; var directLighting=(metallicPart + dielectricPart + sheenPart); #redgpu_if useKHR_materials_transmission if(transmissionParameter > 0.0) { let transmissionWeight=transmissionParameter * (vec3<f32>(1.0) - F0); directLighting=mix(directLighting,prePathBackground,transmissionWeight); } #redgpu_endIf #redgpu_if useKHR_materials_clearcoat if(clearcoatParameter > 0.0){ let clearcoatNdotL=max(dot(clearcoatNormal,L),0.04); let clearcoatNdotV=max(dot(clearcoatNormal,V),0.04); let clearcoatNdotH=max(dot(clearcoatNormal,H),0.0); let CLEARCOAT_BRDF=specular_brdf( F0,clearcoatRoughnessParameter,clearcoatNdotH,clearcoatNdotV,clearcoatNdotL,LdotH); directLighting=fresnel_coat(clearcoatNdotV,ior,clearcoatParameter,directLighting,CLEARCOAT_BRDF); } #redgpu_endIf var lightDirection:f32; #redgpu_if useKHR_materials_diffuse_transmission lightDirection=mix(abs(dot(N,L)),1.0,diffuseTransmissionParameter); #redgpu_else lightDirection=NdotL; #redgpu_endIf let lightContribution=directLighting * dLight * lightDirection; return lightContribution;\n}\nconst pi:f32=3.14159265359;\nfn BRDF_specularAnisotropicGGX( f0:vec3<f32>,f90:vec3<f32>,alphaRoughness:f32,VdotH:f32,NdotL:f32,NdotV:f32,NdotH:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,TdotH:f32,BdotH:f32,anisotropy:f32 ) -> vec3<f32> { var at=mix(alphaRoughness,1.0,anisotropy * anisotropy); var ab=alphaRoughness; var F:vec3<f32>=fresnel_schlick(VdotH,f0); var V:f32=V_GGX_anisotropic(NdotL,NdotV,BdotV,TdotV,TdotL,BdotL,at,ab); var D:f32=D_GGX_anisotropic(NdotH,TdotH,BdotH,at,ab); return F * (V * D);\n}\nfn D_GGX_anisotropic( NdotH:f32,TdotH:f32,BdotH:f32,at:f32,ab:f32 ) -> f32 { let a2:f32=at * ab; let f:vec3<f32>=vec3<f32>(ab * TdotH,at * BdotH,a2 * NdotH); let denominator:f32=dot(f,f); let w2:f32=a2/denominator; return a2 * w2 * w2/pi;\n}\nfn V_GGX_anisotropic( NdotL:f32,NdotV:f32,BdotV:f32,TdotV:f32,TdotL:f32,BdotL:f32,at:f32,ab:f32 ) -> f32 { let GGXV=NdotL * length(vec3<f32>(at * TdotV,ab * BdotV,NdotV)); let GGXL=NdotV * length(vec3<f32>(at * TdotL,ab * BdotL,NdotL)); let v=0.5/(GGXV + GGXL); return clamp(v,0.0,1.0);\n}\nfn iridescent_fresnel(outside_ior:f32,iridescence_ior:f32,base_f0:vec3<f32>, iridescence_thickness:f32,iridescence_factor:f32,cos_theta1:f32) -> vec3<f32> { if (iridescence_thickness <=0.0 || iridescence_factor <=0.0) { return base_f0; } let cos_theta1_abs=abs(cos_theta1); let safe_iridescence_ior=max(iridescence_ior,1.01); let sin_theta1=sqrt(max(0.0,1.0 - cos_theta1_abs * cos_theta1_abs)); let sin_theta2=(outside_ior/safe_iridescence_ior) * sin_theta1; if (sin_theta2 >=1.0) { return base_f0 + iridescence_factor * (vec3<f32>(1.0) - base_f0); } let cos_theta2=sqrt(max(0.0,1.0 - sin_theta2 * sin_theta2)); let wavelengths=vec3<f32>(650.0,510.0,475.0); let effective_thickness=max(iridescence_thickness,10.0); let ior_scale=max(1.0,1.5 - 0.5 * (safe_iridescence_ior/1.5)); let optical_thickness=2.0 * effective_thickness * safe_iridescence_ior * cos_theta2 * ior_scale; let phase=(2.0 * 3.14159265359 * optical_thickness)/wavelengths; let cos_phase=cos(phase); let sin_phase=sin(phase); let outside_cos1=outside_ior * cos_theta1_abs; let iridescence_cos2=safe_iridescence_ior * cos_theta2; let iridescence_cos1=safe_iridescence_ior * cos_theta1_abs; let outside_cos2=outside_ior * cos_theta2; let r12_s=(outside_cos1 - iridescence_cos2)/(outside_cos1 + iridescence_cos2); let r12_p=(iridescence_cos1 - outside_cos2)/(iridescence_cos1 + outside_cos2); let sqrt_f0=sqrt(clamp(base_f0,vec3<f32>(0.01),vec3<f32>(0.99))); let safe_n3=max((1.0 + sqrt_f0)/(1.0 - sqrt_f0),vec3<f32>(1.2)); let iridescence_cos2_vec=vec3<f32>(iridescence_cos2); let cos_theta1_abs_vec=vec3<f32>(cos_theta1_abs); let iridescence_cos1_vec=vec3<f32>(iridescence_cos1); let cos_theta2_vec=vec3<f32>(cos_theta2); let r23_s=(iridescence_cos2_vec - safe_n3 * cos_theta1_abs_vec)/ (iridescence_cos2_vec + safe_n3 * cos_theta1_abs_vec); let r23_p=(safe_n3 * cos_theta2_vec - iridescence_cos1_vec)/ (safe_n3 * cos_theta2_vec + iridescence_cos1_vec); let r12_s_vec=vec3<f32>(r12_s); let r12_p_vec=vec3<f32>(r12_p); let num_s_real=r12_s_vec + r23_s * cos_phase; let num_s_imag=r23_s * sin_phase; let den_s_real=vec3<f32>(1.0) + r12_s_vec * r23_s * cos_phase; let den_s_imag=r12_s_vec * r23_s * sin_phase; let num_p_real=r12_p_vec + r23_p * cos_phase; let num_p_imag=r23_p * sin_phase; let den_p_real=vec3<f32>(1.0) + r12_p_vec * r23_p * cos_phase; let den_p_imag=r12_p_vec * r23_p * sin_phase; let den_s_squared=den_s_real * den_s_real + den_s_imag * den_s_imag + vec3<f32>(0.001); let rs_real=(num_s_real * den_s_real + num_s_imag * den_s_imag)/den_s_squared; let rs_imag=(num_s_imag * den_s_real - num_s_real * den_s_imag)/den_s_squared; let Rs=rs_real * rs_real + rs_imag * rs_imag; let den_p_squared=den_p_real * den_p_real + den_p_imag * den_p_imag + vec3<f32>(0.001); let rp_real=(num_p_real * den_p_real + num_p_imag * den_p_imag)/den_p_squared; let rp_imag=(num_p_imag * den_p_real - num_p_real * den_p_imag)/den_p_squared; let Rp=rp_real * rp_real + rp_imag * rp_imag; let reflectance=0.5 * (Rs + Rp); let ior_influence=smoothstep(1.0,2.0,safe_iridescence_ior); let enhanced_reflectance=mix( pow(reflectance,vec3<f32>(0.8)) * 1.2, reflectance, ior_influence ); let clamped_reflectance=clamp(enhanced_reflectance,vec3<f32>(0.0),vec3<f32>(1.0)); return mix(base_f0,clamped_reflectance,iridescence_factor);\n}\nfn specular_btdf( NdotV:f32, NdotL:f32, NdotH:f32, VdotH:f32, LdotH:f32, roughness:f32, F0:vec3<f32>, ior:f32\n) -> vec3<f32> { let eta:f32=1.0/ior; let D_rough:f32=distribution_ggx(NdotH,roughness * roughness); let t:f32=clamp((ior - 1.0) * 100.0,0.0,1.0); let D:f32=mix(1.0,D_rough,t); let G:f32=min(1.0,min((2.0 * NdotH * NdotV)/VdotH,(2.0 * NdotH * NdotL)/VdotH)); let F:vec3<f32>=fresnel_schlick(VdotH,F0); let denom:f32=(eta * VdotH + LdotH) * (eta * VdotH + LdotH); let btdf:vec3<f32>= (vec3<f32>(1.0) - F) *  abs(VdotH * LdotH) *  (eta * eta) *  D *  G/ (NdotV * denom + 0.001); return btdf;\n}\nfn lambda_sheen_calc_l(x:f32,alpha_g:f32) -> f32 { let one_minus_alpha_sq=(1.0 - alpha_g) * (1.0 - alpha_g); let a=mix(21.5473,25.3245,one_minus_alpha_sq); let b=mix(3.82987,3.32435,one_minus_alpha_sq); let c=mix(0.19823,0.16801,one_minus_alpha_sq); let d=mix(-1.97760,-1.27393,one_minus_alpha_sq); let e=mix(-4.32054,-4.85967,one_minus_alpha_sq); return a/(1.0 + b * pow(x,c)) + d * x + e;\n}\nfn lambda_sheen(cos_theta:f32,alpha_g:f32) -> f32 { if (abs(cos_theta) < 0.5) { return exp(lambda_sheen_calc_l(cos_theta,alpha_g)); } else { return exp(2.0 * lambda_sheen_calc_l(0.5,alpha_g) - lambda_sheen_calc_l(1.0 - cos_theta,alpha_g)); }\n}\nfn fresnel_coat(NdotV:f32,ior:f32,weight:f32,base:vec3<f32>,layer:vec3<f32>) -> vec3<f32> { let f0:f32=pow((1.0 - ior)/(1.0 + ior),2.0); let fr:f32=f0 + (1.0 - f0) * pow(1.0 - abs(NdotV),5.0); return mix(base,layer,weight * fr);\n}\nfn conductor_fresnel(F0:vec3<f32>,bsdf:vec3<f32>,VdotH:f32) -> vec3<f32> { let fresnel=F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - abs(VdotH),5.0); return bsdf * fresnel;\n}\nfn fresnel_mix( F0:vec3<f32>, weight:f32, base:vec3<f32>, layer:vec3<f32>, VdotH:f32\n) -> vec3<f32> { var f0=F0; f0=min(f0,vec3<f32>(1.0)); let fr=f0 + (1.0 - f0) * pow(1.0 - abs(VdotH),5.0); return (1 - weight * max(max(fr.x,fr.y),fr.z)) * base + weight * fr * layer;\n}\nfn fresnel_mix_ibl( F0:vec3<f32>, weight:f32, base:vec3<f32>, layer:vec3<f32>, NdotV:f32\n) -> vec3<f32> { var f0=F0; f0=min(f0,vec3<f32>(1.0)); let fr=f0 + (1.0 - f0) * pow(1.0 - max(NdotV,0.0),5.0); return base * (1.0 - fr * weight) + layer * fr * weight;\n}\nfn diffuse_brdf_disney(NdotL:f32,NdotV:f32,LdotH:f32,roughness:f32,albedo:vec3<f32>) -> vec3<f32> { if (NdotL <=0.0) { return vec3<f32>(0.0);} let energyBias=mix(0.0,0.5,roughness); let energyFactor=mix(1.0,1.0/1.51,roughness); let fd90=energyBias + 2.0 * LdotH * LdotH * roughness; let f0=1.0; let lightScatter=f0 + (fd90 - f0) * pow(1.0 - NdotL,5.0); let viewScatter=f0 + (fd90 - f0) * pow(1.0 - NdotV,5.0); return albedo * NdotL * lightScatter * viewScatter * energyFactor/pi;\n}\nfn diffuse_brdf(NdotL:f32,albedo:vec3<f32>) -> vec3<f32> { return albedo * NdotL/pi;\n}\nfn diffuse_btdf(N:vec3<f32>,L:vec3<f32>,Albedo:vec3<f32>) -> vec3<f32> { let cos_theta=max(-dot(N,L),0.0); return Albedo * cos_theta/pi;\n}\nfn specular_brdf( F0:vec3<f32>, roughness:f32, NdotH:f32, NdotV:f32, NdotL:f32, LdotH:f32\n) -> vec3<f32> { let D=distribution_ggx(NdotH,roughness); let G=geometry_smith(NdotV,NdotL,roughness); let F=fresnel_schlick(LdotH,F0); let numerator=D * G * F; let denominator=4.0 * NdotV * NdotL + 0.04; return (numerator/denominator);\n}\nfn distribution_ggx(NdotH:f32,roughness:f32) -> f32 { let alpha=roughness * roughness; let alpha2=alpha * alpha; let NdotH2=NdotH * NdotH; let nom=alpha2; let denom=(NdotH2 * (alpha2 - 1.0) + 1.0); let denom_squared=denom * denom; return nom/(denom_squared * 3.14159265359);\n}\nfn geometry_smith(NdotV:f32,NdotL:f32,roughness:f32) -> f32 { let alpha=roughness * roughness; let k=alpha/2.0; let ggx1=NdotV/(NdotV * (1.0 - k) + k); let ggx2=NdotL/(NdotL * (1.0 - k) + k); return ggx1 * ggx2;\n}\nfn fresnel_schlick(cosTheta:f32,F0:vec3<f32>) -> vec3<f32> { return F0 + (vec3<f32>(1.0) - F0) * pow(1.0 - cosTheta,5.0);\n}\nfn get_transformed_uv( input_uv:vec2<f32>, input_uv1:vec2<f32>, texCoord_index:u32, use_transform:u32, transform_offset:vec2<f32>, transform_rotation:f32, transform_scale:vec2<f32>\n) -> vec2<f32> { var result_uv=select(input_uv,input_uv1,texCoord_index==1); if (use_transform==1) { let translation=mat3x3<f32>( 1.0,0.0,0.0, 0.0,1.0,0.0, transform_offset.x,transform_offset.y,1.0 ); let cos_rot=cos(transform_rotation); let sin_rot=sin(transform_rotation); let rotation_matrix=mat3x3<f32>( cos_rot,-sin_rot,0.0, sin_rot,cos_rot,0.0, 0.0,0.0,1.0 ); let scale_matrix=mat3x3<f32>( transform_scale.x,0.0,0.0, 0.0,transform_scale.y,0.0, 0.0,0.0,1.0 ); let result_matrix=translation * rotation_matrix * scale_matrix; result_uv=(result_matrix * vec3<f32>(result_uv,1.0)).xy; } return result_uv;\n}\nfn linear_to_srgb(linearColor:vec4<f32>) -> vec4<f32> { let cutoff=vec4<f32>(0.0031308); let higher=vec4<f32>(1.055) * pow(linearColor,vec4<f32>(1.0/2.4)) - vec4<f32>(0.055); let lower=linearColor * vec4<f32>(12.92); return vec4<f32>( mix(higher.r,lower.r,step(linearColor.r,cutoff.r)), mix(higher.g,lower.g,step(linearColor.g,cutoff.g)), mix(higher.b,lower.b,step(linearColor.b,cutoff.b)), linearColor.a  );\n}\n"));class PBRMaterial extends ABitmapBaseMaterial{#Rn;#Cn;#Pn;#En;#In;constructor(i){super(i,"PBR_MATERIAL",si,2),this.initGPURenderInfos(),this.#Rn=new PackedTexture(i),this.#In=new PackedTexture(i),this.#Cn=new PackedTexture(i),this.#Pn=new PackedTexture(i),this.#En=new PackedTexture(i),this.__packingList=[()=>{this.setupPackORMTexture(),this.setupPackedKHR_clearcoatTexture_transmission(),this.setupPackedKHR_diffuse_transmission(),this.setupPackedKHR_sheen(),this.setupPackedKHR_iridescence()}]}get packedKHR_clearcoatTexture_transmission(){return this.#In}get packedKHR_iridescence(){return this.#En}get packedORMTexture(){return this.#Rn}get packedKHR_sheen(){return this.#Pn}get packedKHR_diffuse_transmission(){return this.#Cn}async setupPackORMTexture(){const i=Math.max(this.occlusionTexture?.gpuTexture?.width||1,this.metallicRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.occlusionTexture?.gpuTexture?.height||1,this.metallicRoughnessTexture?.gpuTexture?.height||1);await this.#Rn.packing({r:this.occlusionTexture?.gpuTexture,g:this.metallicRoughnessTexture?.gpuTexture,b:this.metallicRoughnessTexture?.gpuTexture},i,m,"packedORMTexture")}async setupPackedKHR_clearcoatTexture_transmission(){const i=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.width||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_clearcoatTexture?.gpuTexture?.height||1,this.KHR_clearcoatRoughnessTexture?.gpuTexture?.height||1),g=Math.max(this.KHR_transmissionTexture?.gpuTexture?.width||1,this.KHR_thicknessTexture?.gpuTexture?.width||1),_=Math.max(this.KHR_transmissionTexture?.gpuTexture?.height||1,this.KHR_thicknessTexture?.gpuTexture?.height||1),b=Math.max(i,g),y=Math.max(m,_);await this.#In.packing({r:this.KHR_clearcoatTexture?.gpuTexture,g:this.KHR_clearcoatRoughnessTexture?.gpuTexture,b:this.KHR_transmissionTexture?.gpuTexture,a:this.KHR_thicknessTexture?.gpuTexture},b,y,"packedKHR_clearcoatTexture_transmission",{b:"r",a:"g"})}async setupPackedKHR_diffuse_transmission(){const i=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.width||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_diffuseTransmissionColorTexture?.gpuTexture?.height||1,this.KHR_diffuseTransmissionTexture?.gpuTexture?.height||1);await this.#Cn.packing({r:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,g:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,b:this.KHR_diffuseTransmissionColorTexture?.gpuTexture,a:this.KHR_diffuseTransmissionTexture?.gpuTexture},i,m,"packedKHR_diffuse_transmission")}async setupPackedKHR_sheen(){const i=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.width||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_sheenColorTexture?.gpuTexture?.height||1,this.KHR_sheenRoughnessTexture?.gpuTexture?.height||1);await this.#Pn.packing({r:this.KHR_sheenColorTexture?.gpuTexture,g:this.KHR_sheenColorTexture?.gpuTexture,b:this.KHR_sheenColorTexture?.gpuTexture,a:this.KHR_sheenRoughnessTexture?.gpuTexture},i,m,"packedKHR_sheen")}async setupPackedKHR_iridescence(){const i=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.width||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.width||1),m=Math.max(this.KHR_iridescenceTexture?.gpuTexture?.height||1,this.KHR_iridescenceThicknessTexture?.gpuTexture?.height||1);await this.#En.packing({r:this.KHR_iridescenceTexture?.gpuTexture,g:this.KHR_iridescenceThicknessTexture?.gpuTexture},i,m,"packedKHR_iridescence")}}tr.defineByPreset(PBRMaterial,[tr.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,tr.PRESET_POSITIVE_NUMBER.NORMAL_SCALE]);ai.forEach(i=>{const{extensionName:m,textureList:g,useSampler:_}=i,{positiveNumberList:b,vec3List:y,vec4List:T}=i;m&&tr.defineBoolean(PBRMaterial,[`use${m}`]),((i,m)=>{i?.forEach(i=>{tr.defineBoolean(PBRMaterial,[`use${i.charAt(0).toUpperCase()}${i.substring(1)}`]),tr.definePositiveNumber(PBRMaterial,[[`${i}_KHR_texture_transform_rotation`,0]]),tr.defineBoolean(PBRMaterial,[`use_${i}_KHR_texture_transform`]),tr.defineVec2(PBRMaterial,[`${i}_KHR_texture_transform_offset`,[`${i}_KHR_texture_transform_scale`,[1,1]]]),tr.defineUint(PBRMaterial,[`${i}_texCoord_index`]),tr.defineTexture(PBRMaterial,[i]),m&&tr.defineSampler(PBRMaterial,[`${i}Sampler`])})})(g,!_),b?.forEach(i=>{tr.definePositiveNumber(PBRMaterial,[i])}),y?.forEach(i=>{tr.defineVec3(PBRMaterial,[i])}),T?.forEach(i=>{tr.defineVec4(PBRMaterial,[i])})}),tr.definePositiveNumber(PBRMaterial,[["cutOff",0],["KHR_materials_ior",1.5],["KHR_dispersion",0]]),tr.defineUint(PBRMaterial,["alphaBlend"]),tr.defineBoolean(PBRMaterial,["doubleSided","useCutOff","useVertexColor","useVertexTangent","useKHR_materials_unlit"]),Object.freeze(PBRMaterial);var oi="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include picking;\n#redgpu_include calcDisplacements;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, receiveShadow:f32, combinedOpacity:f32, useDisplacementTexture:u32, displacementScale:f32,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(9) ndcPosition:vec3<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_displacementScale=vertexUniforms.displacementScale; let u_useDisplacementTexture=vertexUniforms.useDisplacementTexture==1u; let u_receiveShadow=vertexUniforms.receiveShadow; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useDisplacementTexture let tempPosition=u_modelMatrix * vec4<f32>(input_position,1.0); let distance=distance(tempPosition.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); let worldUV=input_uv; var displacedNormal:vec3<f32>; displacedNormal=calcDisplacementNormal( normalize((u_normalModelMatrix * vec4<f32>(input_vertexNormal,0.0)).xyz), displacementTexture, displacementTextureSampler, u_displacementScale, worldUV, mipLevel ); normalPosition=vec4<f32>(displacedNormal,0.0); #redgpu_else position=u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); #redgpu_endIf output.position=u_projectionMatrix * u_cameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.ndcPosition=output.position.xyz/output.position.w; #redgpu_if receiveShadow { var posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3( posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z ); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\n",ui="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include drawDirectionalShadowDepth;\n#redgpu_include picking;\nstruct VertexUniforms { pickingId:u32, localMatrix:mat4x4<f32>, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, receiveShadow:f32\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexWeight:vec4<f32>, @location(6) vertexJoint:vec4<f32>, @location(7) vertexTangent:vec4<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_localMatrix=vertexUniforms.localMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_receiveShadow=vertexUniforms.receiveShadow; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * u_cameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=inputData.uv; output.uv1=inputData.uv1; output.vertexColor_0=inputData.vertexColor_0; output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent; #redgpu_if receiveShadow { var posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3( posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z ); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf output.ndcPosition=output.position.xyz/output.position.w; let nodeScaleX:f32=length(u_localMatrix[0].xyz); let nodeScaleY:f32=length(u_localMatrix[1].xyz); let nodeScaleZ=length(u_localMatrix[2].xyz); output.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0); let volumeScaleX:f32=length(u_modelMatrix[0].xyz); let volumeScaleY:f32=length(u_modelMatrix[1].xyz); let volumeScaleZ=length(u_modelMatrix[2].xyz); output.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0); return output;\n}\n";class ResourceStateStorageBuffer{static dirtyList=[];buffer;uuid;#X=0;constructor(i){this.buffer=i,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateStorageBuffer.dirtyList.push(this)}}class StorageBuffer extends AUniformBaseBuffer{constructor(i,m,g="",_=""){super(i,"managedStorageBufferState",GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC,m,g);const b=getCacheBufferFromResourceState(this,_);if(b)return b;_&&(this.name=_),basicRegisterResource(this,new ResourceStateStorageBuffer(this))}}Object.freeze(StorageBuffer);const getBasicMeshVertexBindGroupDescriptor=(i,m=!1)=>{const{redGPUContext:g,gpuRenderInfo:_,material:b}=i,{resourceManager:y}=g,{vertexUniformBuffer:T,vertexBindGroupLayout:w}=_,{basicSampler:P,emptyBitmapTextureView:$,emptyCubeTextureView:H}=y,{gpuSampler:q}=P;return{layout:w,label:m?"VERTEX_BIND_GROUP_DESCRIPTOR_MESH_SKIN":"VERTEX_BIND_GROUP_DESCRIPTOR_MESH",entries:m?[{binding:0,resource:{buffer:T.gpuBuffer,offset:0,size:T.size}},{binding:1,resource:getGPUResourceSampler(b?.displacementTextureSampler)||q},{binding:2,resource:y.getGPUResourceBitmapTextureView(b?.displacementTexture)||$},{binding:3,resource:{buffer:i.animationInfo.skinInfo.vertexStorageBuffer.gpuBuffer,offset:0,size:i.animationInfo.skinInfo.vertexStorageBuffer.size}}]:[{binding:0,resource:{buffer:T.gpuBuffer,offset:0,size:T.size}},{binding:1,resource:getGPUResourceSampler(b?.displacementTextureSampler)||q},{binding:2,resource:y.getGPUResourceBitmapTextureView(b?.displacementTexture)||$}]}},getGPUResourceSampler=i=>i?.gpuSampler,li=parseWGSL(ui),ci=li.uniforms.vertexUniforms,hi=parseWGSL(oi),fi=hi.uniforms.vertexUniforms,createMeshVertexShaderModule=i=>{const{material:m}=i;let g;return g=m instanceof PBRMaterial?i.animationInfo.skinInfo?((i,m)=>{const{redGPUContext:g,currentShaderModuleName:_}=m,{resourceManager:b}=g,{gpuRenderInfo:y}=m,T=`${m.animationInfo.skinInfo.joints.length}`,w=`${i}_${T}`,P="#redgpu_include SYSTEM_UNIFORM;\nstruct VertexUniforms { pickingId:u32, localMatrix:mat4x4<f32>, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, receiveShadow:f32\n};\nstruct VertexStorages { jointMatrix:array<mat4x4<f32>,#JOINT_NUM>,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\n@group(1) @binding(3) var<storage,read> vertexStorages:VertexStorages;\nstruct InputDataSkin { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexWeight:vec4<f32>, @location(6) vertexJoint:vec4<f32>, @location(7) vertexTangent:vec4<f32>,\n};\nstruct OutputDataSkin { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(3) uv1:vec2<f32>, @location(4) vertexColor_0:vec4<f32>, @location(5) vertexTangent:vec4<f32>, @location(6) shadowPos:vec3<f32>, @location(7) receiveShadow:f32, @location(8) pickingId:vec4<f32>, @location(9) ndcPosition:vec3<f32>, @location(10) localNodeScale:f32, @location(11) volumeScale:f32,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputDataSkin) -> OutputDataSkin { let u_projectionMatrix=systemUniforms.projectionMatrix; let u_projectionCameraMatrix=systemUniforms.projectionCameraMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_localMatrix=vertexUniforms.localMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_receiveShadow=vertexUniforms.receiveShadow; var output:OutputDataSkin; var skinMat:mat4x4<f32>; let vertexJoint:vec4<f32>=inputData.vertexJoint; let vertexWeight:vec4<f32>=inputData.vertexWeight; let jointMatrix=vertexStorages.jointMatrix; skinMat=vertexWeight.x * jointMatrix[u32(vertexJoint.x)] + vertexWeight.y * jointMatrix[u32(vertexJoint.y)] + vertexWeight.z * jointMatrix[u32(vertexJoint.z)] + vertexWeight.w * jointMatrix[u32(vertexJoint.w)]; let position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0); let normalPosition=u_normalModelMatrix * skinMat * vec4<f32>(inputData.vertexNormal,1.0); output.position=u_projectionCameraMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=inputData.uv; output.uv1=inputData.uv1; output.vertexColor_0=inputData.vertexColor_0; output.vertexTangent=u_normalModelMatrix * inputData.vertexTangent; #redgpu_if receiveShadow { var posFromLight=u_directionalLightProjectionViewMatrix * vec4(position.xyz,1.0); output.shadowPos=vec3( posFromLight.xy * vec2(0.5,-0.5) + vec2(0.5),posFromLight.z ); output.receiveShadow=vertexUniforms.receiveShadow; } #redgpu_endIf output.ndcPosition=output.position.xyz/output.position.w; let nodeScaleX:f32=length(u_localMatrix[0].xyz); let nodeScaleY:f32=length(u_localMatrix[1].xyz); let nodeScaleZ:f32=length(u_localMatrix[2].xyz); output.localNodeScale=pow(nodeScaleX * nodeScaleY * nodeScaleZ,1.0/3.0); let volumeScaleX:f32=length(u_modelMatrix[0].xyz); let volumeScaleY:f32=length(u_modelMatrix[1].xyz); let volumeScaleZ:f32=length(u_modelMatrix[2].xyz); output.volumeScale=pow(volumeScaleX * volumeScaleY * volumeScaleZ,1.0/3.0); return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputDataSkin) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let input_position=inputData.position; var position:vec4<f32>; var skinMat:mat4x4<f32>=mat4x4<f32>( 1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); var vertexJoint:vec4<f32>=inputData.vertexJoint; var vertexWeight:vec4<f32>=inputData.vertexWeight; var jointMatrix=vertexStorages.jointMatrix; skinMat=vertexWeight.x * jointMatrix[u32(vertexJoint.x)] + vertexWeight.y * jointMatrix[u32(vertexJoint.y)] + vertexWeight.z * jointMatrix[u32(vertexJoint.z)] + vertexWeight.w * jointMatrix[u32(vertexJoint.w)]; position=u_modelMatrix * skinMat * vec4<f32>(input_position,1.0); output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n@vertex\nfn picking(inputData:InputDataSkin) -> OutputDataSkin { let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; var output:OutputDataSkin; var skinMat:mat4x4<f32>=mat4x4<f32>( 1.0,0.0,0.0,0.0, 0.0,1.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); var vertexJoint:vec4<f32>=inputData.vertexJoint; var vertexWeight:vec4<f32>=inputData.vertexWeight; var jointMatrix=vertexStorages.jointMatrix; skinMat=vertexWeight.x * jointMatrix[u32(vertexJoint.x)] + vertexWeight.y * jointMatrix[u32(vertexJoint.y)] + vertexWeight.z * jointMatrix[u32(vertexJoint.z)] + vertexWeight.w * jointMatrix[u32(vertexJoint.w)]; var position:vec4<f32>; position=u_modelMatrix * skinMat * vec4<f32>(inputData.position,1.0); output.position=u_projectionMatrix * u_cameraMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n",$={code:P};if(_===w)return b.getGPUShaderModule(w);if($.code=P.replaceAll("#JOINT_NUM",T),y.vertexUniformInfo=parseWGSL($.code).uniforms.vertexUniforms,m.animationInfo.skinInfo){createMeshVertexUniformBuffers(m,!0),m.animationInfo.skinInfo.vertexStorageInfo=parseWGSL($.code).storage.vertexStorages;const i=new ArrayBuffer(m.animationInfo.skinInfo.vertexStorageInfo.arrayBufferByteLength);m.animationInfo.skinInfo.vertexStorageBuffer=new StorageBuffer(m.redGPUContext,i,m.name),y.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m,!0))}else createMeshVertexUniformBuffers(m),y.vertexUniformBindGroup=g.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(m));const H=b.createGPUShaderModule(w,$);return m.gpuRenderInfo.vertexShaderModule=H,m.gpuRenderInfo.vertexShaderModule})("VERTEX_MODULE_MESH_PBR_SKIN",i):i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH_PBR",li,ci,ui):i.createCustomMeshVertexShaderModule?i.createCustomMeshVertexShaderModule():i.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_MESH",hi,fi,oi),i.currentShaderModuleName=g.label,g},di={NEVER:"never",LESS:"less",EQUAL:"equal",LESS_EQUAL:"less-equal",GREATER:"greater",NOT_EQUAL:"not-equal",GREATER_EQUAL:"greater-equal",ALWAYS:"always"};Object.freeze(di);const mi="shadow",pi="picking",createBasePipeline=(i,m,g,_)=>{const{redGPUContext:b}=i,{gpuDevice:y,resourceManager:T}=b,w=i.material.gpuRenderInfo;let P,$;switch(m=i.gpuRenderInfo.vertexShaderModule,_){case mi:P="drawDirectionalShadowDepth",$=`${m.label}_shadow_pipeline`;break;case pi:P="picking",$=`${m.label}_picking_pipeline`;break;default:P="main",$=`${m.label}_pipeline`}const H={module:m,entryPoint:P,buffers:i.vertexStateBuffers},q=[T.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),g];_!==mi&&q.push(w.fragmentBindGroupLayout);const W={bindGroupLayouts:q,label:`${$}_${w.fragmentBindGroupLayout.label}`},ye={label:$,layout:T.createGPUPipelineLayout(`${W.label}`,W),vertex:H,primitive:i.primitiveState.state};switch(_){case mi:ye.depthStencil={depthWriteEnabled:!0,depthCompare:di.LESS_EQUAL,format:"depth32float"};break;case pi:i.material&&(ye.fragment={module:i.material.gpuRenderInfo.fragmentShaderModule,entryPoint:"picking",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},ye.depthStencil=i.depthStencilState.state);break;default:ye.fragment=w.fragmentState,ye.depthStencil=i.depthStencilState.state,ye.multisample={count:b.antialiasingManager.useMSAA?4:1}}return y.createRenderPipeline(ye)},updateMeshDirtyPipeline=(i,m)=>{const{material:g,gpuRenderInfo:_,redGPUContext:b}=i,{resourceManager:y}=b;i.dirtyTransform=!0,g.dirtyPipeline&&g._updateFragmentState();const T=createMeshVertexShaderModule(i),w=y.getGPUBindGroupLayout(i.animationInfo.skinInfo?ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_SKIN:ResourceManager.PRESET_VERTEX_GPUBindGroupLayout);_.vertexShaderModule=T,_.pipeline=createBasePipeline(i,T,w),_.shadowPipeline=null,_.pickingPipeline=null;const{vertexUniformInfo:P}=i.gpuRenderInfo,{members:$}=P;for(const m in $)"pickingId"!==m&&(i[m]=i[m]);i.gpuRenderInfo.vertexUniformInfo.members.pickingId&&i.gpuRenderInfo.vertexUniformBuffer.writeBuffer(i.gpuRenderInfo.vertexUniformInfo.members.pickingId,i.pickingId),g.dirtyPipeline=!1,i.dirtyPipeline=!1,m&&m.numDirtyPipelines++},gi=Object.values(di);class DepthStencilState{state;#Bn;#Ct="depth32float";#Ln=["r8unorm","r8snorm","r8uint","r8sint","r16uint","r16sint","r16float","rg8unorm","rg8snorm","rg8uint","rg8sint","r32uint","r32sint","r32float","rg16uint","rg16sint","rg16float","rgba8unorm","rgba8unorm-srgb","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","bgra8unorm-srgb","rgb9e5ufloat","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rg32uint","rg32sint","rg32float","rgba16uint","rgba16sint","rgba16float","rgba32uint","rgba32sint","rgba32float","stencil8","depth16unorm","depth24plus","depth24plus-stencil8","depth32float","depth32float-stencil8","bc1-rgba-unorm","bc1-rgba-unorm-srgb","bc2-rgba-unorm","bc2-rgba-unorm-srgb","bc3-rgba-unorm","bc3-rgba-unorm-srgb","bc4-r-unorm","bc4-r-snorm","bc5-rg-unorm","bc5-rg-snorm","bc6h-rgb-ufloat","bc6h-rgb-float","bc7-rgba-unorm","bc7-rgba-unorm-srgb","etc2-rgb8unorm","etc2-rgb8unorm-srgb","etc2-rgb8a1unorm","etc2-rgb8a1unorm-srgb","etc2-rgba8unorm","etc2-rgba8unorm-srgb","eac-r11unorm","eac-r11snorm","eac-rg11unorm","eac-rg11snorm","astc-4x4-unorm","astc-4x4-unorm-srgb","astc-5x4-unorm","astc-5x4-unorm-srgb","astc-5x5-unorm","astc-5x5-unorm-srgb","astc-6x5-unorm","astc-6x5-unorm-srgb","astc-6x6-unorm","astc-6x6-unorm-srgb","astc-8x5-unorm","astc-8x5-unorm-srgb","astc-8x6-unorm","astc-8x6-unorm-srgb","astc-8x8-unorm","astc-8x8-unorm-srgb","astc-10x5-unorm","astc-10x5-unorm-srgb","astc-10x6-unorm","astc-10x6-unorm-srgb","astc-10x8-unorm","astc-10x8-unorm-srgb","astc-10x10-unorm","astc-10x10-unorm-srgb","astc-12x10-unorm","astc-12x10-unorm-srgb","astc-12x12-unorm","astc-12x12-unorm-srgb"];#Dn=!0;#Un=di.LESS_EQUAL;#An;#kn;#On;#Nn;#Gn;#Fn;#Vn;constructor(i){this.#Bn=i,this.#W()}get format(){return this.#Ct}set format(i){this.#Ln.includes(i)?(this.#Ct=i,this.#W()):consoleAndThrowError(`Invalid value for format. Received ${i}. Expected one of:${this.#Ln.join(",")}`)}get depthWriteEnabled(){return this.#Dn}set depthWriteEnabled(i){this.#Dn=i,this.#W()}get depthCompare(){return this.#Un}set depthCompare(i){gi.includes(i)?(this.#Un=i,this.#W()):consoleAndThrowError(`Invalid value for depthCompare. Received ${i}. Expected one of:${gi.join(",")}`)}get stencilFront(){return this.#An}set stencilFront(i){this.#An=i,this.#W()}get stencilBack(){return this.#kn}set stencilBack(i){this.#kn=i,this.#W()}get stencilReadMask(){return this.#On}set stencilReadMask(i){this.#On=i,this.#W()}get stencilWriteMask(){return this.#Nn}set stencilWriteMask(i){this.#Nn=i,this.#W()}get depthBias(){return this.#Gn}set depthBias(i){this.#Gn=i,this.#W()}get depthBiasSlopeScale(){return this.#Fn}set depthBiasSlopeScale(i){this.#Fn=i,this.#W()}get depthBiasClamp(){return this.#Vn}set depthBiasClamp(i){this.#Vn=i,this.#W()}#W(){this.state={format:this.#Ct,depthWriteEnabled:this.#Dn,depthCompare:this.#Un,stencilFront:this.#An,stencilBack:this.#kn,stencilReadMask:this.#On,stencilWriteMask:this.#Nn,depthBias:this.#Gn,depthBiasSlopeScale:this.#Fn,depthBiasClamp:this.#Vn},this.#Bn.dirtyPipeline=!0}}const xi={NONE:"none",FRONT:"front",BACK:"back"};Object.freeze(xi);const _i={CW:"cw",CCW:"ccw"};Object.freeze(_i);const vi={UINT16:"uint16",UINT32:"uint32"};Object.freeze(vi);const bi=Object.values(vi),yi=Object.values(_i),Ti=Object.values(xi),Si=["point-list","line-list","line-strip","triangle-list","triangle-strip"];class PrimitiveState{dirtyPipeline=!1;state;#Bn;#$n=zn.TRIANGLE_LIST;#Hn;#zn=_i.CCW;#qn=xi.BACK;#Kn=!1;constructor(i){this.#Bn=i,this.#W()}get topology(){return this.#$n}set topology(i){Si.includes(i)?(this.#$n=i,this.#W()):consoleAndThrowError(`Invalid value for topology. Received ${i}. Expected one of:${Si.join(",")}`)}get stripIndexFormat(){return this.#Hn}set stripIndexFormat(i){bi.includes(i)?(this.#Hn=i,this.#W()):consoleAndThrowError(`Invalid value for stripIndexFormat. Received ${i}. Expected one of:${bi.join(",")}`)}get frontFace(){return this.#zn}set frontFace(i){yi.includes(i)?(this.#zn=i,this.#W()):consoleAndThrowError(`Invalid value for frontFace. Received ${i}. Expected one of:${yi.join(",")}`)}get cullMode(){return this.#qn}set cullMode(i){Ti.includes(i)?(this.#qn=i,this.#W()):consoleAndThrowError(`Invalid value for cullMode. Received ${i}. Expected one of:${Ti.join(",")}`)}get unclippedDepth(){return this.#Kn}set unclippedDepth(i){"boolean"==typeof i?(this.#Kn=i,this.#W()):consoleAndThrowError(`Invalid type for unclippedDepth. Received ${typeof i}. Expected type:boolean.`)}#W(){this.state={topology:this.#$n,stripIndexFormat:this.#Hn,frontFace:this.#zn,cullMode:this.#qn,unclippedDepth:this.#Kn},this.#Bn.dirtyPipeline=!0}}class Object3DContainer{modelMatrix=create$5();#Wn=[];constructor(){}get children(){return this.#Wn}get numChildren(){return this.#Wn.length}contains(i){return this.#Xn(i),this.#Wn.includes(i)}addChild(i){return this.#Xn(i),this.#Yn(i)?(this.#Wn.push(i),i.dirtyTransform=!0,i):null}addChildAt(i,m){if(validateUintRange(m),this.#Wn.length<m&&(m=this.#Wn.length),!(m<0||m>this.#Wn.length)&&this.#Yn(i))return this.#Wn.splice(m,0,i),i.dirtyTransform=!0,this}getChildAt(i){if(validateUintRange(i),!(i>=this.#Wn.length||i<0))return this.#Wn[i]}getChildIndex(i){this.#Xn(i);const m=this.#Wn.indexOf(i);return-1===m?-1:m}setChildIndex(i,m){this.#Xn(i),validateUintRange(m);const g=this.#Wn.length,_=m>=g,b=this.#Wn.indexOf(i);-1!==b?_?consoleAndThrowError(`Invalid index. Index ${m} is out of bounds. Index should be between 0 and ${g-1}.`):(this.#Wn.splice(b,1),this.#Wn.splice(m,0,i)):consoleAndThrowError(`The provided is not a child of the Object3DContainer.:${i}`)}swapChildren(i,m){if(this.#Xn(i),this.#Xn(m),i===m)return void consoleAndThrowError("Error:child1 and child2 are the same. Cannot swap a child with itself.");const g=this.#Wn.indexOf(i),_=this.#Wn.indexOf(m);-1!==g&&-1!==_||consoleAndThrowError(`Error:${-1===g?"child1":"child2"} is not a child of this Object3DContainer.`),this.swapChildrenAt(g,_)}swapChildrenAt(i,m){validateUintRange(i),validateUintRange(m),i===m&&consoleAndThrowError("Error:index1 and index2 are identical. Cannot swap a child with itself.");const g=this.#Wn.length;(i>=g||m>=g)&&consoleAndThrowError(`Error:Both index1 and index2 should be less than the number of children. Provided index1:${i},index2:${m},number of children:${g}`);let _=this.#Wn[i];this.#Wn[i]=this.#Wn[m],this.#Wn[m]=_}removeChild(i){this.#Xn(i);const m=this.#Wn.indexOf(i);if(m>-1)return i.parent=null,this.#Wn.splice(m,1)[0];consoleAndThrowError("Error:Child not found within parent.")}removeChildAt(i){validateUintRange(i);const m=this.#Wn[i];if(m)return m.parent=null,this.#Wn.splice(i,1)[0];throw new Error(`Error:No child found at provided index:${i}.`)}removeAllChildren(){let i=this.#Wn.length;for(;i--;)this.#Wn[i].parent=null;return this.#Wn.length=0,this}#Xn(i){i instanceof Object3DContainer||consoleAndThrowError("allow only Object3DContainer instance.")}#Yn=i=>(this.#Xn(i),i.parent?!!i.parent?.removeChild(i)&&(i.parent=this,!0):(i.parent=this,!0))}class MeshBase extends Object3DContainer{gpuRenderInfo;animationInfo={skinInfo:null,morphInfo:null,animationsList:null};gltfLoaderInfo;dirtyPipeline=!0;dirtyTransform=!0;dirtyOpacity=!0;modelMatrix=create$5();localMatrix=create$5();normalModelMatrix=create$5();#b;#y;#jn;#Zn;#Jn;#T=[];#v=createUUID();constructor(i){super(),validateRedGPUContext(i),this.#b=i,this.#y=i.gpuDevice,this.#jn=new PrimitiveState(this),this.#Zn=new DepthStencilState(this)}get uuid(){return this.#v}get currentShaderModuleName(){return this.#Jn}set currentShaderModuleName(i){this.#Jn=i}get primitiveState(){return this.#jn}get depthStencilState(){return this.#Zn}get gpuDevice(){return this.#y}get redGPUContext(){return this.#b}worldToLocal(i,m,g){return worldToLocal(this.modelMatrix,i,m,g)}localToWorld(i,m,g){return localToWorld(this.modelMatrix,i,m,g)}getScreenPoint(i){return getScreenPoint(i,this.modelMatrix)}__fireListenerList(i=!1){for(const i of this.#T)i(this);i&&(this.#T.length=0)}}const wi="VERTEX_MODULE_MESH_PBR_SKIN",Mi=Math.PI/180,Ri=3.141592653589793,Ci=6.283185307179586,Pi=.225,Ei=1.27323954,Ii=.405284735,Bi=1.5707963267948966;class Mesh extends MeshBase{displacementTexture;castShadow=!1;#e;#a;#Qn;#n=0;#i=0;#r=0;#er=[0,0,0];#tr=0;#nr=0;#rr=0;#ir;#ar=1;#sr=1;#or=1;#ur=[1,1,1];#o=0;#u=0;#l=0;#lr=[0,0,0];#cr={};#hr=0;#fr=!1;#dr=1;#mr;#pr=!1;#gr;#xr;constructor(i,m,g,_){super(i),_&&(this.name=_),this._geometry=m,this._material=g,this.#ir=uuidToUint(this.uuid)}get enableDebugger(){return this.#pr}set enableDebugger(i){this.#pr=i,i&&!this.#mr&&(this.#mr=new DrawDebuggerMesh(this.redGPUContext,this))}get drawDebugger(){return this.#mr}_material;get material(){return this._material}set material(i){this._material=i,this.dirtyPipeline=!0,"blendMode"in this&&(this.blendMode=this.blendMode)}_geometry;get geometry(){return this._geometry}set geometry(i){this._geometry=i,this.dirtyPipeline=!0,this.dirtyTransform=!0}get opacity(){return this.#dr}set opacity(i){validatePositiveNumberRange(i,0,1),this.#dr=i,this.dirtyOpacity=!0}get ignoreFrustumCulling(){return this.#fr}set ignoreFrustumCulling(i){this.#fr=i}get pickingId(){return this.#ir}get events(){return this.#cr}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get vertexStateBuffers(){return this._geometry.gpuRenderInfo.buffers}get parent(){return this.#Qn}set parent(i){this.#Qn=i}get pivotX(){return this.#tr}set pivotX(i){this.#tr=i,this.dirtyTransform=!0}get pivotY(){return this.#nr}set pivotY(i){this.#nr=i,this.dirtyTransform=!0}get pivotZ(){return this.#rr}set pivotZ(i){this.#rr=i,this.dirtyTransform=!0}get x(){return this.#n}set x(i){this.#n=this.#er[0]=i,this.dirtyTransform=!0}get y(){return this.#r}set y(i){this.#r=this.#er[1]=i,this.dirtyTransform=!0}get z(){return this.#i}set z(i){this.#i=this.#er[2]=i,this.dirtyTransform=!0}get position(){return this.#er}get scaleX(){return this.#ar}set scaleX(i){this.#ar=this.#ur[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#sr}set scaleY(i){this.#sr=this.#ur[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#or}set scaleZ(i){this.#or=this.#ur[2]=i,this.dirtyTransform=!0}get scale(){return this.#er}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#lr[0]=i%360,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#lr[1]=i%360,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#lr[2]=i%360,this.dirtyTransform=!0}get rotation(){return this.#lr}get boundingOBB(){return this.#xr&&!this.dirtyTransform||(this.#xr=null,this.#gr=null,this.#xr=calculateMeshOBB(this)),this.#xr}get boundingAABB(){return this.#gr&&!this.dirtyTransform||(this.#xr=null,this.#gr=null,this.#gr=calculateMeshAABB(this)),this.#gr}get combinedBoundingAABB(){return calculateMeshCombinedAABB(this)}setEnableDebuggerRecursively(i=!1){"enableDebugger"in this&&(this.enableDebugger=i),this.children&&this.children.forEach(m=>{m.setEnableDebuggerRecursively(i)})}setCastShadowRecursively(i=!1){"castShadow"in this&&(this.castShadow=i),this.children&&this.children.forEach(m=>{m.setCastShadowRecursively(i)})}setReceiveShadowRecursively(i=!1){"receiveShadow"in this&&(this.receiveShadow=i),this.children&&this.children.forEach(m=>{m.setReceiveShadowRecursively(i)})}getCombinedOpacity(){if(this.is2DMeshType){const i=this.parent;return this.#dr*(i?.getCombinedOpacity?i.getCombinedOpacity():1)}return 1}addListener(i,m){this.#cr[i]=m,this.#hr=Object.keys(this.#cr).length}lookAt(i,m,g){var _,b=new Float32Array([0,1,0]),y=[];y[0]=i,y[1]=m,y[2]=g,identity$2(this.localMatrix),targetTo(this.localMatrix,[this.#n,this.#r,this.#i],y,b),_=mat4ToEuler(this.localMatrix,[]),this.rotationX=180*-_[0]/Math.PI,this.rotationY=180*-_[1]/Math.PI,this.rotationZ=180*-_[2]/Math.PI}setScale(i,m,g){m=m??i,g=g??i;const _=this.#ur;this.#ar=_[0]=i,this.#sr=_[1]=m,this.#or=_[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const _=this.#er;this.#n=_[0]=i,this.#r=_[1]=m,this.#i=_[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const _=this.#lr;this.#o=_[0]=i,this.#u=_[1]=m,this.#l=_[2]=g,this.dirtyTransform=!0}clone(){const i=new Mesh(this.redGPUContext,this._geometry,this._material);i.setPosition(this.#n,this.#r,this.#i),i.setRotation(this.#o,this.#u,this.#l),i.setScale(this.#ar,this.#sr,this.#or);let m=this.children.length;for(;m--;)i.addChild(this.children[m].clone());return i}render(i){const{redGPUContext:m}=this,{view:g,isScene2DMode:_,currentRenderPassEncoder:b,timestamp:y,frustumPlanes:T,dirtyVertexUniformFromMaterial:w,useDistanceCulling:P,cullingDistanceSquared:$}=i,{scene:H}=g,{shadowManager:q}=H,{directionalShadowManager:W}=q,{pickingManager:ye}=g,{castingList:Ge}=W,Ke=this._geometry,Xe=this._material,{uuid:Ye}=Xe||{};let je,Ze;if(_&&(this.#i=0,this.#rr=0,this.depthStencilState.depthWriteEnabled&&(this.depthStencilState.depthWriteEnabled=!1)),this.dirtyTransform){je=!0;{const{pixelRectObject:i}=g,m=this.parent,b=this.localMatrix;let y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Ct,Pt,Et,It,Bt,Lt,Dt,Ut;if(b[12]=this.#n,b[13]=this.#r,b[14]=this.#i,b[15]=1,y=this.#o*Mi,T=this.#u*Mi,w=this.#l*Mi,xt=1,vt=0,bt=0,Tt=0,St=1,wt=0,Rt=0,Ct=0,Pt=1,Ut=y%Ci,Ut<-Ri?Ut+=Ci:Ut>Ri&&(Ut-=Ci),Ut=Ut<0?Ei*Ut+Ii*Ut*Ut:Ei*Ut-Ii*Ut*Ut,P=Ut<0?Pi*(Ut*-Ut-Ut)+Ut:Pi*(Ut*Ut-Ut)+Ut,Ut=(y+Bi)%Ci,Ut<-Ri?Ut+=Ci:Ut>Ri&&(Ut-=Ci),Ut=Ut<0?Ei*Ut+Ii*Ut*Ut:Ei*Ut-Ii*Ut*Ut,q=Ut<0?Pi*(Ut*-Ut-Ut)+Ut:Pi*(Ut*Ut-Ut)+Ut,Ut=T%Ci,Ut<-Ri?Ut+=Ci:Ut>Ri&&(Ut-=Ci),Ut=Ut<0?Ei*Ut+Ii*Ut*Ut:Ei*Ut-Ii*Ut*Ut,$=Ut<0?Pi*(Ut*-Ut-Ut)+Ut:Pi*(Ut*Ut-Ut)+Ut,Ut=(T+Bi)%Ci,Ut<-Ri?Ut+=Ci:Ut>Ri&&(Ut-=Ci),Ut=Ut<0?Ei*Ut+Ii*Ut*Ut:Ei*Ut-Ii*Ut*Ut,W=Ut<0?Pi*(Ut*-Ut-Ut)+Ut:Pi*(Ut*Ut-Ut)+Ut,Ut=w%Ci,Ut<-Ri?Ut+=Ci:Ut>Ri&&(Ut-=Ci),Ut=Ut<0?Ei*Ut+Ii*Ut*Ut:Ei*Ut-Ii*Ut*Ut,H=Ut<0?Pi*(Ut*-Ut-Ut)+Ut:Pi*(Ut*Ut-Ut)+Ut,Ut=(w+Bi)%Ci,Ut<-Ri?Ut+=Ci:Ut>Ri&&(Ut-=Ci),Ut=Ut<0?Ei*Ut+Ii*Ut*Ut:Ei*Ut-Ii*Ut*Ut,ye=Ut<0?Pi*(Ut*-Ut-Ut)+Ut:Pi*(Ut*Ut-Ut)+Ut,je=W*ye,Ze=P*$*ye-q*H,Je=q*$*ye+P*H,Qe=W*H,et=P*$*H+q*ye,at=q*$*H-P*ye,ht=-$,ft=P*W,gt=q*W,y=this.#ar,T=this.#sr,w=this.#or,this.renderTextureWidth&&(y*=this.renderTextureWidth,T*=this.renderTextureHeight),b[0]=(xt*je+Tt*Ze+Rt*Je)*y,b[1]=(vt*je+St*Ze+Ct*Je)*y,b[2]=(bt*je+wt*Ze+Pt*Je)*y,b[3]=b[3]*y,b[4]=(xt*Qe+Tt*et+Rt*at)*T,b[5]=(vt*Qe+St*et+Ct*at)*T,b[6]=(bt*Qe+wt*et+Pt*at)*T,b[7]=b[7]*T,b[8]=(xt*ht+Tt*ft+Rt*gt)*w,b[9]=(vt*ht+St*ft+Ct*gt)*w,b[10]=(bt*ht+wt*ft+Pt*gt)*w,b[11]=b[11]*w,(this.#tr||this.#nr||this.#rr)&&(xt=b[0],vt=b[1],bt=b[2],yt=b[3],Tt=b[4],St=b[5],wt=b[6],Mt=b[7],Rt=b[8],Ct=b[9],Pt=b[10],Et=b[11],It=b[12],Bt=b[13],Lt=b[14],Dt=b[15],Ge=1,Ke=0,Xe=0,Ye=0,b[0]=Ge*xt+Ke*Tt+Xe*Rt+Ye*It,b[1]=Ge*vt+Ke*St+Xe*Ct+Ye*Bt,b[2]=Ge*bt+Ke*wt+Xe*Pt+Ye*Lt,b[3]=Ge*yt+Ke*Mt+Xe*Et+Ye*Dt,Ge=0,Ke=1,Xe=0,Ye=0,b[4]=Ge*xt+Ke*Tt+Xe*Rt+Ye*It,b[5]=Ge*vt+Ke*St+Xe*Ct+Ye*Bt,b[6]=Ge*bt+Ke*wt+Xe*Pt+Ye*Lt,b[7]=Ge*yt+Ke*Mt+Xe*Et+Ye*Dt,Ge=0,Ke=0,Xe=1,Ye=0,b[8]=Ge*xt+Ke*Tt+Xe*Rt+Ye*It,b[9]=Ge*vt+Ke*St+Xe*Ct+Ye*Bt,b[10]=Ge*bt+Ke*wt+Xe*Pt+Ye*Lt,b[11]=Ge*yt+Ke*Mt+Xe*Et+Ye*Dt,_?m?.modelMatrix?(Ge=-this.#tr,Ke=-this.#nr,Xe=-this.#rr,Ye=1):(Ge=-this.#tr/y,Ke=-this.#nr/T,Xe=-this.#rr,Ye=1):(Ge=-this.#tr,Ke=-this.#nr,Xe=-this.#rr,Ye=1),b[12]=Ge*xt+Ke*Tt+Xe*Rt+Ye*It,b[13]=Ge*vt+Ke*St+Xe*Ct+Ye*Bt,b[14]=Ge*bt+Ke*wt+Xe*Pt+Ye*Lt,b[15]=Ge*yt+Ke*Mt+Xe*Et+Ye*Dt),m?.modelMatrix){let i=m.modelMatrix,g=this.localMatrix,_=this.modelMatrix,b=i[0],y=i[1],T=i[2],w=i[3],P=i[4],$=i[5],H=i[6],q=i[7],W=i[8],ye=i[9],Ge=i[10],Ke=i[11],Xe=i[12],Ye=i[13],je=i[14],Ze=i[15],Je=g[0],Qe=g[1],et=g[2],at=g[3];_[0]=Je*b+Qe*P+et*W+at*Xe,_[1]=Je*y+Qe*$+et*ye+at*Ye,_[2]=Je*T+Qe*H+et*Ge+at*je,_[3]=Je*w+Qe*q+et*Ke+at*Ze,Je=g[4],Qe=g[5],et=g[6],at=g[7],_[4]=Je*b+Qe*P+et*W+at*Xe,_[5]=Je*y+Qe*$+et*ye+at*Ye,_[6]=Je*T+Qe*H+et*Ge+at*je,_[7]=Je*w+Qe*q+et*Ke+at*Ze,Je=g[8],Qe=g[9],et=g[10],at=g[11],_[8]=Je*b+Qe*P+et*W+at*Xe,_[9]=Je*y+Qe*$+et*ye+at*Ye,_[10]=Je*T+Qe*H+et*Ge+at*je,_[11]=Je*w+Qe*q+et*Ke+at*Ze,Je=g[12],Qe=g[13],et=g[14],at=g[15],_[12]=Je*b+Qe*P+et*W+at*Xe,_[13]=Je*y+Qe*$+et*ye+at*Ye,_[14]=Je*T+Qe*H+et*Ge+at*je,_[15]=Je*w+Qe*q+et*Ke+at*Ze}else{const{modelMatrix:i,localMatrix:m}=this;i[0]=m[0],i[1]=m[1],i[2]=m[2],i[3]=m[3],i[4]=m[4],i[5]=m[5],i[6]=m[6],i[7]=m[7],i[8]=m[8],i[9]=m[9],i[10]=m[10],i[11]=m[11],i[12]=m[12],i[13]=m[13],i[14]=m[14],i[15]=m[15]}{let i=this.normalModelMatrix,m=this.modelMatrix,g=m[0],_=m[1],b=m[2],y=m[3],T=m[4],w=m[5],P=m[6],$=m[7],H=m[8],q=m[9],W=m[10],ye=m[11],Ge=m[12],Ke=m[13],Xe=m[14],Ye=m[15],je=g*w-_*T,Ze=g*P-b*T,Je=g*$-y*T,Qe=_*P-b*w,et=_*$-y*w,at=b*$-y*P,ht=H*Ke-q*Ge,ft=H*Xe-W*Ge,gt=H*Ye-ye*Ge,xt=W*Ye-ye*Xe,vt=q*Ye-ye*Ke,bt=je*xt-Ze*vt+Je*xt+Qe*gt-et*ft+at*ht;bt=1/bt,i[0]=(w*xt-P*vt+$*xt)*bt,i[4]=(-_*xt+b*vt-y*xt)*bt,i[8]=(Ke*at-Xe*et+Ye*Qe)*bt,i[12]=(-q*at+W*et-ye*Qe)*bt,i[1]=(-T*xt+P*gt-$*ft)*bt,i[5]=(g*xt-b*gt+y*ft)*bt,i[9]=(-Ge*at+Xe*Je-Ye*Ze)*bt,i[13]=(H*at-W*Je+ye*Ze)*bt,i[2]=(T*vt-w*gt+$*ht)*bt,i[6]=(-g*vt+_*gt-y*ht)*bt,i[10]=(Ge*et-Ke*Je+Ye*je)*bt,i[14]=(-H*et+q*Je-ye*je)*bt,i[3]=(-T*xt+w*ft-P*ht)*bt,i[7]=(g*xt-_*ft+b*ht)*bt,i[11]=(-Ge*Qe+Ke*Ze-Xe*je)*bt,i[15]=(H*Qe-q*Ze+W*je)*bt}}}this.gltfLoaderInfo?.activeAnimations?.length&&((i,m)=>{let g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe=m.length;for(;Xe--;)for(P=m[Xe],w=P.targetAniTrackList,T=w.length;T--;){$=w[T];const{animationTargetMesh:m,timeAnimationInfo:Xe,aniDataAnimationInfo:Ye,weightMeshes:je}=$;for(g=(i-P.startTime)%(1e3*w.maxTime)/1e3,W=Xe.dataList,ye=Ye.dataList,Ge=W.length,Ke=0,q=W.length-1,H=0,_=W[q],b=W[H];Ke<Ge;Ke++){const i=W[Ke];if(i<g&&(q=Ke,_=W[q],H=null==W[q+1]?0:q+1,b=W[H]),0==Ke&&g<i){q=Ge-1,_=W[q],H=Ke,b=W[H],g=i;break}if(Ke==Ge-1&&g>i){q=0,_=W[q],H=Ge-1,b=W[H],g=i;break}}let Ze,Je,Qe,et,at,ht,ft;switch("CUBICSPLINE"==$.interpolation?(y=b-_,"NaN"==y.toString()&&(y=0),Ze=(g-_)/y,"NaN"==Ze.toString()&&(Ze=0),Je=Ze*Ze,Qe=Je*Ze,ht=-2*Qe+3*Je,ft=Qe-Je,et=1-ht,at=ft-Je+Ze):(y="STEP"==$.interpolation?0:(g-_)/(b-_),"NaN"==y.toString()&&(y=0)),$.key){case"rotation":gltfAnimationLooper_rotation($.interpolation,m,ye,Ge,y,q,H,et,at,ht,ft);break;case"translation":gltfAnimationLooper_transition($.interpolation,m,ye,Ge,y,q,H,et,at,ht,ft);break;case"scale":gltfAnimationLooper_scale($.interpolation,m,ye,Ge,y,q,H,et,at,ht,ft);break;case"weights":gltfAnimationLooper_weight(je,ye,y,q,H)}}})(y,this.gltfLoaderInfo.activeAnimations),this.animationInfo.skinInfo&&(this.currentShaderModuleName.includes(wi)||(this.dirtyPipeline=!0),this.currentShaderModuleName===`${wi}_${this.animationInfo.skinInfo.joints?.length}`&&(this.animationInfo.skinInfo.update(m,this),je=!1));let Je=!0;if(P&&Ke){const{rawCamera:i}=g,m=this.boundingAABB,_=i.x-m.centerX,b=i.y-m.centerY,y=i.z-m.centerZ;_*_+b*b+y*y>$+m.geometryRadius*m.geometryRadius&&(Je=!1)}if(T&&Je)if(Ke){const i=this.boundingAABB,m=T[0],g=T[1],_=T[2],b=T[3],y=T[4],w=T[5],P=i.centerX,$=i.centerY,H=i.centerZ,q=i.geometryRadius;(m[0]*P+m[1]*$+m[2]*H+m[3]<=-q||g[0]*P+g[1]*$+g[2]*H+g[3]<=-q||_[0]*P+_[1]*$+_[2]*H+_[3]<=-q||b[0]*P+b[1]*$+b[2]*H+b[3]<=-q||y[0]*P+y[1]*$+y[2]*H+y[3]<=-q||w[0]*P+w[1]*$+w[2]*H+w[3]<=-q)&&(Je=!1)}else Je=!1;this.#fr&&(Je=!0),Ke?i.num3DObjects++:i.num3DGroups++;const{displacementTexture:Qe,displacementScale:et}=Xe||{};(this.dirtyPipeline||Xe?.dirtyPipeline||w[Ye])&&(w[Ye]=!0);const{antialiasingManager:at,gpuDevice:ht}=m;if(Ke){at.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.initGPURenderInfos();const m=!!Qe;this.useDisplacementTexture!==m&&(this.useDisplacementTexture=m,this.dirtyPipeline=!0),(this.dirtyPipeline||w[Ye])&&updateMeshDirtyPipeline(this,i)}if(Ke&&Je){{const{gpuRenderInfo:i}=this,{vertexUniformBuffer:m,vertexUniformInfo:g}=i,{members:_}=g;void 0!==_.displacementScale&&_.displacementScale!==et&&ht.queue.writeBuffer(m.gpuBuffer,_.displacementScale.uniformOffset,new _.displacementScale.View([et]))}const{gpuRenderInfo:m}=this,{vertexUniformBuffer:g,vertexUniformBindGroup:_,vertexUniformInfo:y,pipeline:T}=m,{members:w}=y;if(this.dirtyTransform&&(ht.queue.writeBuffer(g.gpuBuffer,w.modelMatrix.uniformOffset,new w.modelMatrix.View(this.is2DMeshType?multiply$5(create$5(),this.modelMatrix,fromValues$5(this.width,0,0,0,0,this.height,0,0,0,0,1,0,0,0,0,1)):this.modelMatrix)),ht.queue.writeBuffer(g.gpuBuffer,w.normalModelMatrix.uniformOffset,new w.normalModelMatrix.View(this.normalModelMatrix)),w.localMatrix&&ht.queue.writeBuffer(g.gpuBuffer,w.localMatrix.uniformOffset,new w.localMatrix.View(this.localMatrix)),je=!0,this.dirtyTransform=!1),this.dirtyOpacity&&(Ze=!0,w.combinedOpacity&&ht.queue.writeBuffer(g.gpuBuffer,w.combinedOpacity.uniformOffset,new w.combinedOpacity.View([this.getCombinedOpacity()])),this.dirtyOpacity=!1),Xe.use2PathRender)i.render2PathLayer[i.render2PathLayer.length]=this;else if("particle"===this.meshType)i.particleLayer[i.particleLayer.length]=this;else if("instanceMesh"===this.meshType)i.instanceMeshLayer[i.instanceMeshLayer.length]=this;else if(Xe.transparent)i.transparentLayer[i.transparentLayer.length]=this;else if(2===Xe.alphaBlend||Xe.opacity<1||!this.depthStencilState.depthWriteEnabled)i.alphaLayer[i.alphaLayer.length]=this;else{b.setPipeline(T);const{gpuBuffer:m}=Ke.vertexBuffer,{fragmentUniformBindGroup:g}=Xe.gpuRenderInfo;if(i.prevVertexGpuBuffer!==m&&(b.setVertexBuffer(0,m),i.prevVertexGpuBuffer=m),b.setBindGroup(1,_),i.prevFragmentUniformBindGroup!==g&&(b.setBindGroup(2,g),i.prevFragmentUniformBindGroup=g),i.numDrawCalls++,Ke.indexBuffer){const{indexBuffer:m}=Ke,{indexNum:g,triangleCount:_,gpuBuffer:y}=m;b.setIndexBuffer(y,"uint32"),this.particleBuffers?b.drawIndexed(g,this.particleNum,0,0,0):b.drawIndexed(g,1,0,0,0),i.numTriangles+=_,i.numPoints+=g}else{const{vertexBuffer:m}=Ke,{vertexCount:g,triangleCount:_}=m;b.draw(g,1,0,0),i.numTriangles+=_,i.numPoints+=g}}this.#hr&&(ye.castingList[ye.castingList.length]=this)}(this.castShadow||this.castShadow&&!Ke)&&(Ge[Ge.length]=this),this.#pr&&this.#mr.render(i);const{children:ft}=this;let gt=0;const xt=ft.length;for(;gt<xt;gt++)je&&(ft[gt].dirtyTransform=je),Ze&&(ft[gt].dirtyOpacity=Ze),ft[gt].render(i)}initGPURenderInfos(){this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null,null,null),updateMeshDirtyPipeline(this)}createMeshVertexShaderModuleBASIC=(i,m,g,_)=>{const{redGPUContext:b}=this,{gpuRenderInfo:y}=this;return y.vertexUniformInfo!==g&&(y.vertexUniformInfo=g,y.vertexStructInfo=m,createMeshVertexUniformBuffers(this)),y.vertexShaderSourceVariant=m.shaderSourceVariant,y.vertexShaderVariantConditionalBlocks=m.conditionalBlocks,y.vertexUniformBindGroup=b.gpuDevice.createBindGroup(getBasicMeshVertexBindGroupDescriptor(this)),this.#Ke(i),this.gpuRenderInfo.vertexShaderModule};#Ke(i){const{gpuDevice:m,resourceManager:g}=this.redGPUContext,_=this.#We(),b=`${i}_${_}`;let y=g.getGPUShaderModule(b);if(!y){let i=this.gpuRenderInfo.vertexShaderSourceVariant.getVariant(_);if(i)if($n("버텍스 바리안트 셰이더 모듈 생성:",_,b),this.animationInfo?.skinInfo){const m=`${this.animationInfo.skinInfo.joints.length}`;i=i.replaceAll("#JOINT_NUM",m),this.gpuRenderInfo.vertexShaderSourceVariant.getVariant(_),y=g.createGPUShaderModule(`${b}_${m}`,{code:i})}else y=g.createGPUShaderModule(b,{code:i});else console.warn("⚠️ 버텍스 바리안트 소스를 찾을 수 없음:",_),y=this.gpuRenderInfo.vertexShaderModule}this.gpuRenderInfo.vertexShaderModule=y}#We(){const{vertexShaderVariantConditionalBlocks:i}=this.gpuRenderInfo,m=new Set;for(const g of i)this[g]&&m.add(g);const g=m.size>0?Array.from(m).sort().join("+"):"none";return m.size,g}}Object.defineProperty(Mesh.prototype,"meshType",{value:"mesh",writable:!1}),wn.defineByPreset(Mesh,[wn.PRESET_BOOLEAN.RECEIVE_SHADOW]),wn.defineBoolean(Mesh,[["useDisplacementTexture",!1]]),Object.freeze(Mesh);class AController{#_r;constructor(){}get camera(){return this.#_r}set camera(i){this.#_r=i}update(i,m){}getCanvasEventPoint=(i,m)=>{const g=m.htmlCanvas,_=m.detector.isMobile,b=g.getBoundingClientRect(),y="clientX",T="clientY";let w,P;if(_){const m=i.changedTouches[0];w=m[y],P=m[T]}else{const m=i;w=m[y],P=m[T]}return{x:w-b.left,y:P-b.top}}}let Li,Di=create$5();const Ui=create$5(),Ai=create$4();const validateNumberRange=(i,m=-Number.MAX_VALUE,g=Number.MAX_VALUE)=>("number"!=typeof i&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof m&&consoleAndThrowError("Only numbers allowed."),"number"!=typeof g&&consoleAndThrowError("Only numbers allowed."),(i<m||i>g)&&consoleAndThrowError(`Only numbers within the range of [${m},${g}] are allowed. input:${i}`),!0);let ki;var Oi=Object.freeze({__proto__:null,BasicController:class extends AController{#vr;#br={moveForward:"w",moveBack:"s",moveLeft:"a",moveRight:"d",moveUp:"t",moveDown:"g",turnLeft:"q",turnRight:"e",turnUp:"r",turnDown:"f"};#yr=1;#Tr=.1;#Sr=1;#wr=.1;#Mr=3;#Rr=0;#Cr=[0,0,0];#Pr=0;#Er=0;#Ir;constructor(i){super(),this.#Ir=new Mesh(i),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let _,b;const checkArea=m=>{let g=this.#vr;if(Li&&g===Li){let _,b,y=g.pixelRectObject;const{x:T,y:w}=this.getCanvasEventPoint(m,i);if(_=T*window.devicePixelRatio*i.renderScale,b=w*window.devicePixelRatio*i.renderScale,!(y.x<_&&_<y.x+y.width))return;if(!(y.y<b&&b<y.y+y.height))return}return!0};_=0,b=0;const HD_Move=m=>{const{x:g,y:y}=this.getCanvasEventPoint(m,i),T=g-_,w=y-b;_=g,b=y,this.#Pr-=T*this.#Sr*.1,this.#Er-=w*this.#Sr*.1},HD_up=()=>{Li=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{if(Li=this.#vr,!checkArea(m))return;const{x:y,y:T}=this.getCanvasEventPoint(m,i);_=y,b=T,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)})}get x(){return this.#Ir.x}set x(i){validateNumber(i),this.#Ir.x=i,this.#Cr[0]=i}get y(){return this.#Ir.y}set y(i){validateNumber(i),this.#Ir.y=i,this.#Cr[1]=i}get z(){return this.#Ir.z}set z(i){validateNumber(i),this.#Ir.z=i,this.#Cr[2]=i}get tilt(){return this.#Er}set tilt(i){validateNumber(i),this.#Ir.rotationX=i,this.#Er=i}get pan(){return this.#Pr}set pan(i){validateNumber(i),this.#Ir.rotationY=i,this.#Pr=i}get keyNameMapper(){return{...this.#br}}setMoveForwardKey(i){this.#br.moveForward=i}setMoveBackKey(i){this.#br.moveBack=i}setMoveLeftKey(i){this.#br.moveLeft=i}setMoveRightKey(i){this.#br.moveRight=i}setMoveUpKey(i){this.#br.moveUp=i}setMoveDownKey(i){this.#br.moveDown=i}setTurnLeftKey(i){this.#br.turnLeft=i}setTurnRightKey(i){this.#br.turnRight=i}setTurnUpKey(i){this.#br.turnUp=i}setTurnDownKey(i){this.#br.turnDown=i}update(i,m){this.#vr=i;const g=this.#Tr,_=this.#wr,b=this.#Cr,y=this.#Ir;y.rotationY+=(this.#Pr-y.rotationY)*_,y.rotationX+=(this.#Er-y.rotationX)*_,this.#Br(i)&&(Di=y.modelMatrix,identity$2(Ui),rotateY$3(Ui,Ui,y.rotationY*Math.PI/180),rotateX$3(Ui,Ui,y.rotationX*Math.PI/180),translate$1(Ui,Ui,Ai),identity$2(Di),translate$1(Di,Di,y.position),multiply$5(Di,Di,Ui),b[0]=Di[12],b[1]=Di[13],b[2]=Di[14]),y.x+=(b[0]-y.x)*g,y.y+=(b[1]-y.y)*g,y.z+=(b[2]-y.z)*g,y.rotationY+=(this.#Pr-y.rotationY)*_,y.rotationX+=(this.#Er-y.rotationX)*_,Di=y.modelMatrix,identity$2(Di),translate$1(Di,Di,y.position),rotateY$3(Di,Di,y.rotationY*Math.PI/180),rotateX$3(Di,Di,y.rotationX*Math.PI/180);const T=clone$5(Di);translate$1(T,T,[0,0,.01]),this.camera.setPosition(T[12],T[13],T[14]),this.camera.lookAt(y.x,y.y,y.z)}#Br(i){if(!i.checkMouseInViewBounds())return;const m=this.#yr,g=this.#Sr,{keyboardKeyBuffer:_}=i.redGPUContext,b=this.#br;let y=!1,T=!1,w=0,P=0;Ai[0]=0,Ai[1]=0,Ai[2]=0;const $=this.#Rr*m;return _[b.turnLeft]&&(T=!0,w=g),_[b.turnRight]&&(T=!0,w=-g),_[b.turnUp]&&(T=!0,P=g),_[b.turnDown]&&(T=!0,P=-g),_[b.moveForward]&&(y=!0,Ai[2]=-$),_[b.moveBack]&&(y=!0,Ai[2]=$),_[b.moveLeft]&&(y=!0,Ai[0]=-$),_[b.moveRight]&&(y=!0,Ai[0]=$),_[b.moveUp]&&(y=!0,Ai[1]=$),_[b.moveDown]&&(y=!0,Ai[1]=-$),T||y?(this.#Rr+=.1,this.#Rr>this.#Mr&&(this.#Rr=this.#Mr)):(this.#Rr+=-.1,this.#Rr<0&&(this.#Rr=0)),T&&(this.#Pr+=w,this.#Er+=P),y||T}},Camera2D:Camera2D,ObitController:class extends AController{#e;#a;#Lr=0;#Dr=0;#Ur=0;#Ar=15;#kr=2;#Or=.1;#Sr=3;#wr=.1;#Nr=-35;#Gr=-90;#Fr=90;#Vr=0;#$r=0;#Hr=0;#zr=0;#qr=new Set;#Kr=-1;constructor(i){super(),this.camera=new PerspectiveCamera;const m=i.detector.isMobile,g={move:m?"touchmove":"mousemove",up:m?"touchend":"mouseup",down:m?"touchstart":"mousedown"};let _,b;const findTargetView=m=>{const{x:g,y:_}=this.getCanvasEventPoint(m,i);let b,y;b=g*window.devicePixelRatio*i.renderScale,y=_*window.devicePixelRatio*i.renderScale;for(const i of this.#qr){const m=i.pixelRectObject;if(m.x<b&&b<m.x+m.width&&m.y<y&&y<m.y+m.height)return i}return null};_=0,b=0;const HD_Move=m=>{if(!ki)return;const{x:g,y:y}=this.getCanvasEventPoint(m,i),T=g-_,w=y-b;_=g,b=y,this.#Vr-=T*this.#Sr*.1,this.#Nr-=w*this.#Sr*.1},HD_up=()=>{ki=null,i.htmlCanvas.removeEventListener(g.move,HD_Move),window.removeEventListener(g.up,HD_up)};i.htmlCanvas.addEventListener(g.down,m=>{const y=findTargetView(m);if(!y)return;ki=y;const{x:T,y:w}=this.getCanvasEventPoint(m,i);_=T,b=w,i.htmlCanvas.addEventListener(g.move,HD_Move),window.addEventListener(g.up,HD_up)}),i.htmlCanvas.addEventListener("wheel",i=>{findTargetView(i)&&(this.#Ar+=i.deltaY/100*this.#kr)})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get centerX(){return this.#Lr}set centerX(i){this.#Lr=i}get centerY(){return this.#Dr}set centerY(i){this.#Dr=i}get centerZ(){return this.#Ur}set centerZ(i){this.#Ur=i}get distance(){return this.#Ar}set distance(i){validateNumberRange(i,0),this.#Ar=i}get speedDistance(){return this.#kr}set speedDistance(i){validateNumberRange(i,.01),this.#kr=i}get delayDistance(){return this.#Or}set delayDistance(i){validateNumberRange(i,.01,1),this.#Or=i}get speedRotation(){return this.#Sr}set speedRotation(i){validateNumberRange(i,.01),this.#Sr=i}get delayRotation(){return this.#wr}set delayRotation(i){validateNumberRange(i,.01,1),this.#wr=i}get minTilt(){return this.#Gr}set minTilt(i){validateNumberRange(i,-90,90),this.#Gr=i}get maxTilt(){return this.#Fr}set maxTilt(i){validateNumberRange(i,-90,90),this.#Fr=i}get pan(){return this.#Vr}set pan(i){this.#Vr=i}get tilt(){return this.#Nr}set tilt(i){validateNumberRange(i,-90,90),this.#Nr=i}update(i,m){this.#Kr!==m&&(this.#Kr=m,this.#qr.clear()),this.#qr.add(i),1===this.#qr.size&&this.#Wr()}#Wr(){const i=Math.PI/180;this.#Nr<this.#Gr&&(this.#Nr=this.#Gr),this.#Nr>this.#Fr&&(this.#Nr=this.#Fr);const{camera:m}=this;this.#$r+=(this.#Vr-this.#$r)*this.#wr,this.#Hr+=(this.#Nr-this.#Hr)*this.#wr,this.#Ar<m.nearClipping&&(this.#Ar=m.nearClipping),this.#zr+=(this.#Ar-this.#zr)*this.#Or,this.#zr<m.nearClipping&&(this.#zr=m.nearClipping);const g=m.modelMatrix;identity$2(g),translate$1(g,g,[this.#Lr,this.#Dr,this.#Ur]),rotateY$3(g,g,this.#$r*i),rotateX$3(g,g,this.#Hr*i),translate$1(g,g,[0,0,this.#zr]),m.x=g[12],m.y=g[13],m.z=g[14],this.camera.lookAt(this.#Lr,this.#Dr,this.#Ur)}},OrthographicCamera:OrthographicCamera,PerspectiveCamera:PerspectiveCamera});class RedGPUContextSizeManager{#Xr;#Yr;#b;#jr=[0,0,0,0];#Zr;#Jr=1;constructor(i,m="100%",g="100%"){this.#b=i,this.#Zr=i.htmlCanvas,this.#Zr.style.boxSizing="border-box",this.#Xr=m,this.#Yr=g}get renderScale(){return this.#Jr}set renderScale(i){validateNumber(i),i<=0&&(i=.01),this.#Jr=i,this.setSize()}get width(){return this.#Xr}set width(i){this.setSize(i,this.#Yr)}get height(){return this.#Yr}set height(i){this.setSize(this.#Xr,i)}get pixelRectArray(){return this.#jr}get pixelRectObject(){return{x:this.#jr[0],y:this.#jr[1],width:this.#jr[2],height:this.#jr[3]}}get parentDomRect(){return(this.#Zr.parentNode||document.body).getBoundingClientRect()}get screenRectObject(){return{x:this.#jr[0]/devicePixelRatio,y:this.#jr[1]/devicePixelRatio,width:this.#jr[2]/devicePixelRatio,height:this.#jr[3]/devicePixelRatio}}static validateSizeValue=i=>{switch(typeof i){case"number":validatePositiveNumberRange(i);break;case"string":new RegExp(/^[+]?^[.]?(\d+)(\.\d+)?(?:px|%|$)/gm).test(i)||consoleAndThrowError(`allow positive number,%,px model/input:${i}`);break;default:consoleAndThrowError(`positive number,%,px model/input:${i}`)}};static validatePositionValue=i=>{switch(typeof i){case"number":validateNumber(i);break;case"string":new RegExp(/^-?\d+(\.\d+)?(px|%)?$/).test(i)||consoleAndThrowError(`allow number,%,px model /input:${i}`);break;default:consoleAndThrowError(`number,%,px model/input:${i}`)}};static getPixelDimension(i,m,g){return"number"==typeof g?g:RedGPUContextSizeManager.calculateSizeFromString(i,m,g)}static calculateSizeFromString(i,m,g){return g.includes("%")?Math.floor(i[m]*+g.replace("%","")/100):+g.replace("px","")}setSize(i=this.#Xr,m=this.#Yr){RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#Xr=i,this.#Yr=m;const g=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"width",i),_=RedGPUContextSizeManager.getPixelDimension(this.parentDomRect,"height",m);this.#Qr(g,_),this.#ei(g,_),this.#ti()}#ei(i,m){this.#jr[2]=Math.floor(i*this.#Jr*window.devicePixelRatio),this.#jr[3]=Math.floor(m*this.#Jr*window.devicePixelRatio)}#ti(){this.#b.onResize&&this.#b.onResize(this.screenRectObject.width,this.screenRectObject.height),this.#b.viewList.forEach(i=>{i.setSize(),i.setPosition()})}#Qr(i,m){const g=this.#Zr,{style:_}=g;g.width=i*this.#Jr*window.devicePixelRatio,g.height=m*this.#Jr*window.devicePixelRatio,_.width=`${i}px`,_.height=`${m}px`}}class PassClusterLightBound{#ni;#ri;#ii;#ai;#si;#b;constructor(i,m){validateRedGPUContext(i),this.#b=i,this.#ni=m,this.#oi()}get clusterBoundBuffer(){return this.#ri}render(){const i=this.#ni.systemUniform_Vertex_UniformBindGroup;if(i){const{gpuDevice:m}=this.#b,g=m.createCommandEncoder(),_=g.beginComputePass({label:"Bound cluster"}),b=Rr.getDispatchSize();_.setPipeline(this.#si),_.setBindGroup(0,i),_.setBindGroup(1,this.#ai),_.dispatchWorkgroups(b[0],b[1],b[2]),_.end(),m.queue.submit([g.finish()])}}#oi(){const{gpuDevice:i,resourceManager:m}=this.#b,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage,read_write> clusterLight_Clusters:ClusterLight_Clusters;\nfn lineIntersectionToZPlane(a:vec3<f32>,b:vec3<f32>,zDistance:f32) -> vec3<f32> { let normal=vec3<f32>(0.0,0.0,0.5); let ab=b - a; let t=(zDistance - dot(normal,a))/dot(normal,ab); return a + t * ab;\n}\nfn clipToView(clip:vec4<f32>) -> vec4<f32> { let view=systemUniforms.inverseProjectionMatrix * clip; return view/vec4<f32>(view.w,view.w,view.w,view.w);\n}\nfn screen2View(screen:vec4<f32>) -> vec4<f32> { let texCoord=screen.xy/systemUniforms.resolution.xy; let clip=vec4<f32>(vec2<f32>(texCoord.x,1.0 - texCoord.y) * 2.0 - vec2<f32>(1.0,1.0),screen.z,screen.w ); return clipToView(clip);\n}\nconst eyePos=vec3<f32>(0.0);\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let tileIndex=global_id.x + global_id.y * clusterLight_tileCount.x + global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y; let tileSize=vec2<f32>( systemUniforms.resolution.x/f32(clusterLight_tileCount.x), systemUniforms.resolution.y/f32(clusterLight_tileCount.y) ); let global_id_x_pos_one=vec2<f32>(f32(global_id.x + 1u),f32(global_id.y + 1u)) * tileSize; let global_id_x_y=vec2<f32>(f32(global_id.x),f32(global_id.y)) * tileSize; let maxPoint_sS=vec4<f32>(global_id_x_pos_one,0.0,1.0); let minPoint_sS=vec4<f32>(global_id_x_y,0.0,1.0); let maxPoint_vS=screen2View(maxPoint_sS).xyz; let minPoint_vS=screen2View(minPoint_sS).xyz; let nearFarX=systemUniforms.camera.nearClipping; let nearFarY=systemUniforms.camera.farClipping; let tileZ=f32(global_id.z)/f32(clusterLight_tileCount.z); let tileZ_plus_one=f32(global_id.z + 1u)/f32(clusterLight_tileCount.z); let tileNear=-nearFarX * pow(nearFarY/nearFarX,tileZ); let tileFar=-nearFarX * pow(nearFarY/nearFarX,tileZ_plus_one); let minPointNear=lineIntersectionToZPlane(eyePos,minPoint_vS,tileNear); let minPointFar=lineIntersectionToZPlane(eyePos,minPoint_vS,tileFar); let maxPointNear=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileNear); let maxPointFar=lineIntersectionToZPlane(eyePos,maxPoint_vS,tileFar); let minAABB=min(min(minPointNear,minPointFar),min(maxPointNear,maxPointFar)); let maxAABB=max(max(minPointNear,minPointFar),max(maxPointNear,maxPointFar)); clusterLight_Clusters.cubeList[tileIndex].minAABB=vec4<f32>(minAABB,0.0); clusterLight_Clusters.cubeList[tileIndex].maxAABB=vec4<f32>(maxAABB,0.0);\n}\n").defaultSource;this.#ri=i.createBuffer({size:32*Rr.getTotalTileSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST}),this.#ii=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),this.#ai=i.createBindGroup({label:"CLUSTER_BOUND_BIND_GROUP",layout:this.#ii,entries:[{binding:0,resource:{buffer:this.#ri}}]}),this.#si=i.createComputePipeline({label:"CLUSTER_BOUND_PIPELINE",layout:i.createPipelineLayout({bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),this.#ii]}),compute:{module:i.createShaderModule({code:g,label:"CLUSTER_BOUND"}),entryPoint:"main"}})}}const Ni=new Uint32Array([0,0,0,0]);class PassClustersLight{#ni;#ui;#li;#ci;#b;constructor(i,m){validateRedGPUContext(i),this.#b=i,this.#ni=m,this.#oi()}get clusterLightsBuffer(){return this.#ci}render(){const{gpuDevice:i}=this.#b,m=this.#ni.systemUniform_Vertex_UniformBindGroup;if(m){const g=i.createCommandEncoder(),_=g.beginComputePass({label:"ClusterLight cluster"}),b=Rr.getDispatchSize();this.#b.gpuDevice.queue.writeBuffer(this.clusterLightsBuffer,0,Ni),_.setPipeline(this.#li),_.setBindGroup(0,m),_.setBindGroup(1,this.#ui),_.dispatchWorkgroups(b[0],b[1],b[2]),_.end(),i.queue.submit([g.finish()])}}#oi(){const{gpuDevice:i,resourceManager:m}=this.#b,g=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n@group(1) @binding(0) var<storage> clusterLight_Clusters:ClusterLight_Clusters;\nfn pointLight_testSphereAABB(light:u32,tile:u32) -> bool { let targetLight=clusterLightList.lights[light]; let targetTile=clusterLight_Clusters.cubeList[tile]; let radius:f32=targetLight.radius; let position:vec3<f32>=targetLight.position; let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz; let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz); return squaredDistance <=(radius * radius);\n}\nfn pointLight_sqDistPointAABB(targetPoint:vec3<f32>,tile:u32,minAABB:vec3<f32>,maxAABB:vec3<f32>) -> f32 { var sqDist=0.0; for(var i=0u;i < 3u;i=i + 1u) { let v=targetPoint[i]; let _minAABB=minAABB[i]; let _maxAABB=maxAABB[i]; if(v < _minAABB){ sqDist +=(_minAABB - v) * (_minAABB - v); } if(v > _maxAABB){ sqDist +=(v - _maxAABB) * (v - _maxAABB); } } return sqDist;\n}\nfn spotLight_testSphereAABB(light:u32,tile:u32) -> bool { let targetLight=clusterLightList.lights[light]; let targetTile=clusterLight_Clusters.cubeList[tile]; let radius:f32=targetLight.radius; let position:vec3<f32>=targetLight.position; let center:vec3<f32>=(systemUniforms.camera.cameraMatrix * vec4<f32>(position,1.0)).xyz; let squaredDistance:f32=pointLight_sqDistPointAABB(center,tile,targetTile.minAABB.xyz,targetTile.maxAABB.xyz); return squaredDistance <=(radius * radius);\n}\n@compute @workgroup_size(REDGPU_DEFINE_WORKGROUP_SIZE_X,REDGPU_DEFINE_WORKGROUP_SIZE_Y,REDGPU_DEFINE_WORKGROUP_SIZE_Z)\nfn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let tileIndex=global_id.x + global_id.y * clusterLight_tileCount.x + global_id.z * clusterLight_tileCount.x * clusterLight_tileCount.y; var clusterLightCount=0u; var clusterLightIndices:array<u32,REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu>; for (var i=0u;i < u32(clusterLightList.count[0]);i=i + 1u) { let lightInCluster=pointLight_testSphereAABB(i,tileIndex); if (lightInCluster) { clusterLightIndices[clusterLightCount]=i; clusterLightCount=clusterLightCount + 1u; } if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) { break; } } let spotLightStartIndex=u32(clusterLightList.count[0]); for (var i=0u;i < u32(clusterLightList.count[1]);i=i + 1u) { let actualLightIndex=spotLightStartIndex + i; let sphereTest=spotLight_testSphereAABB(actualLightIndex,tileIndex); if (sphereTest) { clusterLightIndices[clusterLightCount]=actualLightIndex; clusterLightCount=clusterLightCount + 1u; } if (clusterLightCount==REDGPU_DEFINE_MAX_LIGHTS_PER_CLUSTERu) { break; } } var offset=atomicAdd(&clusterLightGroup.offset,clusterLightCount); for(var i=0u;i < clusterLightCount;i=i + 1u) { clusterLightGroup.indices[offset + i]=clusterLightIndices[i]; } clusterLightGroup.lights[tileIndex].offset=offset; clusterLightGroup.lights[tileIndex].count=clusterLightCount;\n}\n").defaultSource;this.#ci=i.createBuffer({size:Rr.getClusterLightsBufferSize(),usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST});const _=i.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}]});this.#ui=i.createBindGroup({label:"CLUSTER_LIGHT_BIND_GROUP",layout:_,entries:[{binding:0,resource:{buffer:this.#ni.passLightClustersBound.clusterBoundBuffer}}]}),this.#li=i.createComputePipeline({label:"CLUSTER_LIGHT_PIPELINE",layout:i.createPipelineLayout({label:"CLUSTER_LIGHT_PIPELINE_LAYOUT",bindGroupLayouts:[m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),_]}),compute:{module:i.createShaderModule({code:g,label:"CLUSTER_LIGHTS"}),entryPoint:"main"}})}}class PickingEvent{pickingId;mouseX;mouseY;target;time;type;movementX=0;movementY=0;localX=0;localY=0;localZ=0;altKey=!1;ctrlKey=!1;shiftKey=!1;constructor(i,m,g,_,b,y,T){this.pickingId=i,this.mouseX=m,this.mouseY=g,this.target=_,this.time=b,this.type=y,this.altKey=T.altKey,this.ctrlKey=T.ctrlKey,this.shiftKey=T.shiftKey}}const Gi={MOVE:"move",DOWN:"down",UP:"up",OVER:"over",OUT:"out",CLICK:"click"};class PickingManager{lastMouseEvent;lastMouseClickEvent;#hi;#fi;#di;#mi;#b;#ni;#pi=[];#gi=0;#xi=0;#_i;#vi;get mouseX(){return this.#gi}set mouseX(i){this.#gi=i}get mouseY(){return this.#xi}set mouseY(i){this.#xi=i}get castingList(){return this.#pi}get pickingGPUTexture(){return this.#di}get pickingGPUTextureView(){return this.#mi}get pickingDepthGPUTextureView(){return this.#fi}resetCastingList(){this.#pi.length=0}destroy(){this.#di&&(this.#di.destroy(),this.#hi.destroy(),this.#di=null,this.#mi=null,this.#hi=null,this.#fi=null)}checkTexture(i){const{redGPUContext:m}=i,{resourceManager:g}=m;this.#ni=i,this.#b=m,this.#di?.width===this.#ni.pixelRectObject.width&&this.#di?.height===this.#ni.pixelRectObject.height||(this.destroy(),this.#di=this.#bi("picking",navigator.gpu.getPreferredCanvasFormat()),this.#mi=g.getGPUResourceBitmapTextureView(this.#di),this.#hi=this.#bi("pickingDepth","depth32float"),this.#fi=g.getGPUResourceBitmapTextureView(this.#hi))}checkEvents(i,m){this.#yi(i,m),this.resetCastingList()}#bi(i,m){const{gpuDevice:g}=this.#b;return g.createTexture({size:[this.#ni.pixelRectObject.width,this.#ni.pixelRectObject.height,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC,format:m,sampleCount:1,label:`${i}_${this.#ni.pixelRectObject.width}x${this.#ni.pixelRectObject.height}_${Date.now()}`})}#yi=async(i,m,g=1,_=1)=>{const{gpuDevice:b}=i.redGPUContext,{pixelRectArray:y}=i,T=this.#gi,w=this.#xi;if(T<=0||T>=y[2]||w<=0||w>=y[3])return;const P=this.#Ti(),$=this.#Si(b,g,_,T,w),H=await this.#wi($);$.destroy(),H?(this.#Mi(H,T,w,m,P),this.#Ri(H,T,w,m,P)):this.#Ci(),this.lastMouseEvent=null,this.lastMouseClickEvent=null};#Ti=()=>this.#pi.reduce((i,m)=>(i[m.pickingId]=m,i),{});#Si=(i,m,g,_,b)=>{const y=i.createCommandEncoder(),T=i.createBuffer({size:16*m*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),w={texture:this.#di,origin:{x:_,y:b,z:0}},P={buffer:T,bytesPerRow:Math.max(256,4*m*g),rowsPerImage:1},$={width:m,height:g,depthOrArrayLayers:1};return y.copyTextureToBuffer(w,P,$),i.queue.submit([y.finish()]),T};#Mi=(i,m,g,_,b)=>{const y=b[i],T=this.lastMouseClickEvent?.type;if(T===Gi.CLICK){const b=new PickingEvent(i,m,g,y,_,T,this.lastMouseClickEvent);this.#Pi(T,b)}};#Ri=(i,m,g,_,b)=>{const y=b[i],T=this.lastMouseEvent?.type;if(T){const b=new PickingEvent(i,m,g,y,_,T,this.lastMouseEvent);switch(this.#_i&&(b.movementX=m-this.#_i.mouseX,b.movementY=g-this.#_i.mouseY),T){case Gi.DOWN:case Gi.UP:this.#Pi(T,b);break;case Gi.MOVE:this.#Ei(i,y,b)}this.#_i=b}};#Ei=(i,m,g)=>{const _=this.#_i?.pickingId;_!==i?(this.#_i&&_&&_!==i&&this.#Ci(),this.#vi!==m&&(this.#Pi(Gi.OVER,g),document.body.style.cursor="pointer"),this.#vi=m):this.#Pi(Gi.MOVE,g)};#Ci=()=>{this.#_i&&this.#Pi(Gi.OUT,this.#_i),this.#_i=null,this.#vi=null,document.body.style.cursor="default"};async#wi(i){await i.mapAsync(GPUMapMode.READ);const m=new DataView(i.getMappedRange()),g="rgba8unorm"==this.#di.format?[0,1,2,3]:[2,1,0,3],_=m.getUint8(g[0]),b=m.getUint8(g[1]),y=m.getUint8(g[2]);return(m.getUint8(g[3])<<24|y<<16|b<<8|_)>>>0}#Pi(i,m){m.target.events[i]&&m.target.events[i](m)}}Object.freeze(PickingManager);var Fi="struct Camera { cameraMatrix:mat4x4<f32>, cameraPosition:vec3<f32>, nearClipping:f32, farClipping:f32, fieldOfView:f32\n};\nstruct SystemUniform { projectionMatrix:mat4x4<f32>, inverseProjectionMatrix:mat4x4<f32>, projectionCameraMatrix:mat4x4<f32>, inverseProjectionCameraMatrix:mat4x4<f32>, camera:Camera,\n};\n@group(1) @binding(1) var<uniform> systemUniforms:SystemUniform;\n";const Vi=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\nstruct Uniforms { opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> { var finalColor:vec4<f32>=vec4<f32>(0.0); #redgpu_if diffuseTexture finalColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); #redgpu_endIf let alpha2D=select(finalColor.a,1.0,systemUniforms.isView3D==1u); finalColor=vec4<f32>(finalColor.rgb * alpha2D,finalColor.a * uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (systemUniforms.isView3D==1 && finalColor.a==0.0) { discard; } return finalColor;\n};\n");class BitmapMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"BITMAP_MATERIAL",Vi,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}tr.defineByPreset(BitmapMaterial,[tr.PRESET_TEXTURE.DIFFUSE_TEXTURE,tr.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(BitmapMaterial);const $i={NORMAL:0,MULTIPLY:1,LIGHTEN:2,SCREEN:3,LINEAR_DODGE:4,SUBTRACT:5,DIFFERENCE:6,EXCLUSION:7};const Hi=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include calcDirectionalShadowVisibility;\n#redgpu_include normalFunctions;\n#redgpu_include drawPicking;\nstruct Uniforms { color:vec3<f32>, emissiveColor:vec3<f32>, emissiveStrength:f32, specularColor:vec3<f32>, specularStrength:f32, shininess:f32, aoStrength:f32, normalScale:f32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\n@group(2) @binding(3) var alphaTextureSampler:sampler;\n@group(2) @binding(4) var alphaTexture:texture_2d<f32>;\n@group(2) @binding(5) var specularTextureSampler:sampler;\n@group(2) @binding(6) var specularTexture:texture_2d<f32>;\n@group(2) @binding(7) var emissiveTextureSampler:sampler;\n@group(2) @binding(8) var emissiveTexture:texture_2d<f32>;\n@group(2) @binding(9) var aoTextureSampler:sampler;\n@group(2) @binding(10) var aoTexture:texture_2d<f32>;\n@group(2) @binding(11) var normalTextureSampler:sampler;\n@group(2) @binding(12) var normalTexture:texture_2d<f32>;\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> { let u_ambientLight=systemUniforms.ambientLight; let u_ambientLightColor=u_ambientLight.color; let u_ambientLightIntensity=u_ambientLight.intensity; let u_directionalLightCount=systemUniforms.directionalLightCount; let u_directionalLights=systemUniforms.directionalLights; let u_shadowDepthTextureSize=systemUniforms.shadowDepthTextureSize; let u_bias=systemUniforms.bias; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_color=uniforms.color; let u_aoStrength=uniforms.aoStrength; let u_emissiveColor=uniforms.emissiveColor; let u_emissiveStrength=uniforms.emissiveStrength; let u_normalScale=uniforms.normalScale; let u_specularColor=uniforms.specularColor; let u_specularStrength=uniforms.specularStrength; let u_shininess=uniforms.shininess; let u_opacity=uniforms.opacity; let E=normalize(u_cameraPosition - inputData.vertexPosition); let receiveShadowYn=inputData.receiveShadow !=.0; var N=normalize(inputData.vertexNormal) * u_normalScale; #redgpu_if normalTexture let normalSamplerColor=textureSample(normalTexture,normalTextureSampler,inputData.uv).rgb; N=perturb_normal( N,inputData.vertexPosition,inputData.uv,normalSamplerColor,u_normalScale ); #redgpu_endIf var finalColor:vec4<f32>; var resultAlpha:f32=u_opacity * inputData.combinedOpacity; var diffuseColor:vec3<f32>=u_color; #redgpu_if diffuseTexture let diffuseSampleColor=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); diffuseColor=diffuseSampleColor.rgb; resultAlpha=resultAlpha * diffuseSampleColor.a; #redgpu_endIf var specularSamplerValue:f32=1; #redgpu_if specularTexture specularSamplerValue=textureSample(specularTexture,specularTextureSampler,inputData.uv).r; #redgpu_endIf var mixColor:vec3<f32>; let ambientContribution=u_ambientLightColor * u_ambientLightIntensity; let ambientDiffuse=diffuseColor * ambientContribution; mixColor +=ambientDiffuse; var visibility:f32=1.0; visibility=calcDirectionalShadowVisibility( directionalShadowMap, directionalShadowMapSampler, u_shadowDepthTextureSize, u_bias, inputData.shadowPos, ); if(!receiveShadowYn){ visibility=1.0; } for (var i=0u;i < u_directionalLightCount;i=i + 1) { let u_directionalLightDirection=u_directionalLights[i].direction; let u_directionalLightColor=u_directionalLights[i].color; let u_directionalLightIntensity=u_directionalLights[i].intensity; let L=normalize(u_directionalLightDirection); let R=reflect(L,N); let lambertTerm=max(dot(N,-L),0.0); let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue; let lightContribution=u_directionalLightColor * u_directionalLightIntensity * visibility; let ld=diffuseColor * lightContribution * lambertTerm; let ls=u_specularColor * u_specularStrength * lightContribution * specular; mixColor +=ld + ls; } let clusterIndex=getClusterLightClusterIndex(inputData.position); let lightOffset=clusterLightGroup.lights[clusterIndex].offset; let lightCount:u32=clusterLightGroup.lights[clusterIndex].count; for (var lightIndex=0u;lightIndex < lightCount;lightIndex=lightIndex + 1u) { let i=clusterLightGroup.indices[lightOffset + lightIndex]; let u_clusterLightPosition=clusterLightList.lights[i].position; let u_clusterLightColor=clusterLightList.lights[i].color; let u_clusterLightIntensity=clusterLightList.lights[i].intensity; let u_clusterLightRadius=clusterLightList.lights[i].radius; let u_isSpotLight=clusterLightList.lights[i].isSpotLight; let lightDir=u_clusterLightPosition - inputData.vertexPosition; let lightDistance=length(lightDir); if (lightDistance > u_clusterLightRadius) { continue; } let L=normalize(lightDir); let attenuation=clamp(1.0 - (lightDistance * lightDistance)/(u_clusterLightRadius * u_clusterLightRadius),0.0,1.0); var finalAttenuation=attenuation; if (u_isSpotLight > 0.0) { let u_clusterLightDirection=normalize(vec3<f32>( clusterLightList.lights[i].directionX, clusterLightList.lights[i].directionY, clusterLightList.lights[i].directionZ )); let u_clusterLightInnerAngle=clusterLightList.lights[i].innerCutoff; let u_clusterLightOuterCutoff=clusterLightList.lights[i].outerCutoff; let lightToVertex=normalize(-lightDir); let cosTheta=dot(lightToVertex,u_clusterLightDirection); let cosOuter=cos(radians(u_clusterLightOuterCutoff)); let cosInner=cos(radians(u_clusterLightInnerAngle)); if (cosTheta < cosOuter) { continue; } let epsilon=cosInner - cosOuter; let spotIntensity=clamp((cosTheta - cosOuter)/epsilon,0.0,1.0); finalAttenuation *=spotIntensity; } let R=reflect(-L,N); let diffuse=diffuseColor * max(dot(N,L),0.0); let specular=pow(max(dot(R,E),0.0),u_shininess) * specularSamplerValue; let diffuseAttenuation=finalAttenuation; let specularAttenuation=finalAttenuation * finalAttenuation; let ld=u_clusterLightColor * diffuse * diffuseAttenuation * u_clusterLightIntensity; let ls=u_specularColor * u_specularStrength * specular * specularAttenuation * u_clusterLightIntensity; mixColor +=ld + ls; } #redgpu_if alphaTexture let alphaMapValue:f32=textureSample(alphaTexture,alphaTextureSampler,inputData.uv).r; resultAlpha=alphaMapValue * resultAlpha; if(resultAlpha==0){ discard;} #redgpu_endIf var emissiveColor=u_emissiveColor * u_emissiveStrength; #redgpu_if emissiveTexture emissiveColor=textureSample(emissiveTexture,emissiveTextureSampler,inputData.uv).rgb * u_emissiveStrength; #redgpu_endIf #redgpu_if aoTexture mixColor=mixColor * textureSample(aoTexture,aoTextureSampler,inputData.uv).rgb * u_aoStrength; #redgpu_endIf finalColor=vec4<f32>(mixColor + emissiveColor,resultAlpha); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (systemUniforms.isView3D==1 && finalColor.a==0.0) { discard; } return finalColor;\n}\n");class PhongMaterial extends ABitmapBaseMaterial{#Ii;#Bi=1;constructor(i,m="#fff",g){super(i,"PHONG_MATERIAL",Hi,2),g&&(this.name=g),this.initGPURenderInfos(),this.color.setColorByHEX(m),this.emissiveColor.setColorByHEX(this.emissiveColor.hex),this.specularColor.setColorByHEX(this.specularColor.hex)}get displacementScale(){return this.#Bi}set displacementScale(i){this.#Bi=i}get displacementTexture(){return this.#Ii}set displacementTexture(i){const m=this.#Ii;this.#Ii=i,this.updateTexture(m,i),this.dirtyPipeline=!0}}tr.defineByPreset(PhongMaterial,[tr.PRESET_COLOR_RGB.COLOR,tr.PRESET_TEXTURE.ALPHA_TEXTURE,tr.PRESET_SAMPLER.ALPHA_TEXTURE_SAMPLER,tr.PRESET_TEXTURE.AO_TEXTURE,tr.PRESET_SAMPLER.AO_TEXTURE_SAMPLER,tr.PRESET_POSITIVE_NUMBER.AO_STRENGTH,tr.PRESET_TEXTURE.DIFFUSE_TEXTURE,tr.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER,tr.PRESET_TEXTURE.EMISSIVE_TEXTURE,tr.PRESET_SAMPLER.EMISSIVE_TEXTURE_SAMPLER,tr.PRESET_POSITIVE_NUMBER.EMISSIVE_STRENGTH,[tr.PRESET_COLOR_RGB.EMISSIVE_COLOR,"#000000"],tr.PRESET_TEXTURE.NORMAL_TEXTURE,tr.PRESET_SAMPLER.NORMAL_TEXTURE_SAMPLER,tr.PRESET_POSITIVE_NUMBER.NORMAL_SCALE,tr.PRESET_TEXTURE.SPECULAR_TEXTURE,tr.PRESET_SAMPLER.SPECULAR_TEXTURE_SAMPLER,tr.PRESET_POSITIVE_NUMBER.SPECULAR_STRENGTH,[tr.PRESET_COLOR_RGB.SPECULAR_COLOR,"#ffffff"],[tr.PRESET_POSITIVE_NUMBER.SHININESS,32]]),Object.freeze(PhongMaterial);var zi=Object.freeze({__proto__:null,ABaseMaterial:ABaseMaterial,ABitmapBaseMaterial:ABitmapBaseMaterial,BLEND_MODE:$i,BitmapMaterial:BitmapMaterial,COMPOSITE_MODE:{ADDITIVE:"additive",SOURCE_OVER:"source-over",SOURCE_IN:"source-in",SOURCE_OUT:"source-out",SOURCE_ATOP:"source-atop",DESTINATION_OVER:"destination-over",DESTINATION_IN:"destination-in",DESTINATION_OUT:"destination-out",DESTINATION_ATOP:"destination-atop"},ColorMaterial:ColorMaterial,PhongMaterial:PhongMaterial,TINT_BLEND_MODE:Jr,getComputeBindGroupLayoutDescriptorFromShaderInfo:getComputeBindGroupLayoutDescriptorFromShaderInfo,getFragmentBindGroupLayoutDescriptorFromShaderInfo:getFragmentBindGroupLayoutDescriptorFromShaderInfo,getVertexBindGroupLayoutDescriptorFromShaderInfo:getVertexBindGroupLayoutDescriptorFromShaderInfo});class ASinglePassPostEffect{#Li;#Di;#Ui;#Ai;#ki;#Oi;#Ni;#Gi;#Fi;#Vi;#$i;#Hi;#zi;#a;#qi;#Ki;#Wi;#Xi=[];#Yi=[];#ji=16;#Zi=16;#Ji=1;#Qi=!1;#b;#ea;#ta=[];constructor(i){this.#b=i,this.#ea=i.antialiasingManager}get useDepthTexture(){return this.#Qi}set useDepthTexture(i){this.#Qi=i}get redGPUContext(){return this.#b}get storageInfo(){return this.#zi}get shaderInfo(){return this.#ea.useMSAA?this.#qi:this.#Ki}get uniformBuffer(){return this.#Vi}get uniformsInfo(){return this.#$i}get systemUuniformsInfo(){return this.#Hi}get WORK_SIZE_X(){return this.#ji}set WORK_SIZE_X(i){this.#ji=i}get WORK_SIZE_Y(){return this.#Zi}set WORK_SIZE_Y(i){this.#Zi=i}get WORK_SIZE_Z(){return this.#Ji}set WORK_SIZE_Z(i){this.#Ji=i}get outputTextureView(){return this.#Yi}getOutputTextureView(){return this.#Yi[this.#Yi.length-1]}clear(){this.#Xi&&(this.#Xi.forEach(i=>i.destroy()),this.#Xi.length=0,this.#Yi.length=0)}init(i,m,g,_){this.#a=m;const{resourceManager:b}=i;this.#Li=b.createGPUShaderModule(`${m}_MSAA`,{code:g.msaa}),this.#Di=b.createGPUShaderModule(`${m}_NonMSAA`,{code:g.nonMsaa}),this.#qi=parseWGSL(g.msaa),this.#Ki=parseWGSL(g.nonMsaa);const y=this.#qi.storage,T=this.#qi.uniforms;if(this.#zi=y,this.#$i=T.uniforms,this.#Hi=T.systemUniforms,this.#$i){const m=new ArrayBuffer(this.#$i.arrayBufferByteLength);this.#Vi=new UniformBuffer(i,m,`${this.constructor.name}_UniformBuffer`)}}execute(i,m,g){const _=i.createCommandEncoder(),b=_.beginComputePass();b.setPipeline(this.#Fi),b.setBindGroup(0,this.#ki),b.setBindGroup(1,this.#Oi),b.dispatchWorkgroups(Math.ceil(m/this.WORK_SIZE_X),Math.ceil(g/this.WORK_SIZE_Y)),b.end(),i.queue.submit([_.finish()])}render(i,m,g,..._){const{gpuDevice:b,antialiasingManager:y}=this.#b,{useMSAA:T}=y,w=this.#na(i),P=y.changedMSAA,$=this.#ra(_),H=this.getOutputTextureView(),{redGPUContext:q}=i;if(w||P||$){const m=this.storageInfo,g=this.uniformsInfo,b=this.systemUuniformsInfo;this.#Ni=[],this.#Gi=[];for(const i in m){const g=m[i],{binding:b,name:y}=g;"outputTexture"!==y&&this.#Ni.push({binding:b,resource:_[b]})}this.#Gi.push({binding:0,resource:H}),this.shaderInfo.textures.forEach(m=>{const{name:g,binding:_}=m;"depthTexture"===g&&this.#Ni.push({binding:_,resource:i.viewRenderTextureManager.depthTextureView})}),b&&this.#Gi.push({binding:b.binding,resource:{buffer:i.postEffectManager.postEffectSystemUniformBuffer.gpuBuffer,offset:0,size:i.postEffectManager.postEffectSystemUniformBuffer.size}}),this.#Vi&&g&&this.#Gi.push({binding:g.binding,resource:{buffer:this.#Vi.gpuBuffer,offset:0,size:this.#Vi.size}})}if(w||P||$){const i=T?this.#qi:this.#Ki,m=T?this.#Li:this.#Di;this.#Ui=q.resourceManager.getGPUBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_0_USE_MSAA_${T}`)||q.resourceManager.createBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_0_USE_MSAA_${T}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(i,0,T)),this.#Ai=q.resourceManager.getGPUBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_1_USE_MSAA_${T}`)||q.resourceManager.createBindGroupLayout(`${this.#a}_BIND_GROUP_LAYOUT_1_USE_MSAA_${T}`,getComputeBindGroupLayoutDescriptorFromShaderInfo(i,1,T)),this.#ki=b.createBindGroup({label:`${this.#a}_BIND_GROUP_0_USE_MSAA_${T}`,layout:this.#Ui,entries:this.#Ni}),this.#Oi=b.createBindGroup({label:`${this.#a}_BIND_GROUP_1_USE_MSAA_${T}`,layout:this.#Ai,entries:this.#Gi}),this.#Fi=b.createComputePipeline({label:`${this.#a}_COMPUTE_PIPELINE_USE_MSAA_${T}`,layout:b.createPipelineLayout({bindGroupLayouts:[this.#Ui,this.#Ai]}),compute:{module:m,entryPoint:"main"}}),this.#ia(_)}return this.update(performance.now()),this.execute(b,m,g),H}update(i){}updateUniform(i,m){this.uniformBuffer.writeBuffer(this.uniformsInfo.members[i],m)}#ra(i){if(!this.#ta||this.#ta.length!==i.length)return!0;for(let m=0;m<i.length;m++)if(this.#ta[m]!==i[m])return!0;return!1}#ia(i){this.#ta=[...i]}#na(i){const{redGPUContext:m,viewRenderTextureManager:g}=i,{colorTexture:_}=g,{gpuDevice:b}=m,{width:y,height:T}=_,w=y!==this.#Wi?.width||T!==this.#Wi?.height||0===this.#Xi.length;if(w){this.clear();const i=b.createTexture({size:{width:y,height:T},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`PostEffect_${this.#a}_${y}x${T}_${Date.now()}`});this.#Xi.push(i),this.#Yi.push(i.createView({label:i.label}))}return this.#Wi={width:y,height:T},w}}Object.freeze(ASinglePassPostEffect);const createCode=(i,m,g="",_=!1)=>{const{WORK_SIZE_X:b,WORK_SIZE_Y:y,WORK_SIZE_Z:T}=i,w=_?"texture_depth_multisampled_2d":"texture_depth_2d";return`\n ${g} @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; ${i.useDepthTexture?`@group(0) @binding(1) var depthTexture:${w}`:""};\n\t @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; ${Fi} ${g?"@group(1) @binding(2) var<uniform> uniforms:Uniforms;":""} @compute @workgroup_size(${b},${y},${T}) fn main (  @builtin(global_invocation_id) global_id:vec3<u32>, ){ ${m} } `},createBasicPostEffectCode=(i,m,g="")=>({msaa:createCode(i,m,g,!0),nonMsaa:createCode(i,m,g,!1)});Object.freeze(createBasicPostEffectCode);class FXAA extends ASinglePassPostEffect{#aa=.75;#sa=.166;#oa=.0833;constructor(i){super(i);this.init(i,"POST_EFFECT_FXAA",createBasicPostEffectCode(this,"\nlet index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\n\nvar colorC=textureLoad(sourceTexture,index);\nvar colorN=textureLoad(sourceTexture,vec2<u32>(index.x,u32(max(i32(index.y) - 1,0))));\nvar colorS=textureLoad(sourceTexture,vec2<u32>(index.x,u32(min(i32(index.y) + 1,i32(dimH - 1)))));\nvar colorW=textureLoad(sourceTexture,vec2<u32>(u32(max(i32(index.x) - 1,0)),index.y));\nvar colorE=textureLoad(sourceTexture,vec2<u32>(u32(min(i32(index.x) + 1,i32(dimW - 1))),index.y));\n\nlet lumaC=dot(colorC.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaN=dot(colorN.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaS=dot(colorS.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaW=dot(colorW.rgb,vec3<f32>(0.299,0.587,0.114));\nlet lumaE=dot(colorE.rgb,vec3<f32>(0.299,0.587,0.114));\n\nlet lumaMin=min(lumaC,min(min(lumaN,lumaS),min(lumaW,lumaE)));\nlet lumaMax=max(lumaC,max(max(lumaN,lumaS),max(lumaW,lumaE)));\nlet range=lumaMax - lumaMin;\n\nlet edgeThreshold=uniforms.edgeThreshold;\nlet edgeThresholdMin=uniforms.edgeThresholdMin;\nlet subpix=uniforms.subpix;\n\nif (range < edgeThresholdMin) {\ntextureStore(outputTexture,index,colorC);\nreturn;\n}\n\nlet blurredColor=(colorN.rgb + colorS.rgb + colorW.rgb + colorE.rgb + colorC.rgb) * 0.2;\n\nlet blendAmount=min(1.0,range * 50.0 + 0.5) * subpix;\n\nlet finalColor=mix(colorC.rgb,blurredColor,blendAmount);\n\ntextureStore(outputTexture,index,vec4<f32>(finalColor,colorC.a));\n","\nstruct Uniforms { subpix:f32, edgeThreshold:f32, edgeThresholdMin:f32 \n};\n")),this.subpix=this.#aa,this.edgeThreshold=this.#sa,this.edgeThresholdMin=this.#oa}get subpix(){return this.#aa}set subpix(i){validateNumberRange(i,0,1),this.#aa=i,this.updateUniform("subpix",i)}get edgeThreshold(){return this.#sa}set edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#sa=i,this.updateUniform("edgeThreshold",i)}get edgeThresholdMin(){return this.#oa}set edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#oa=i,this.updateUniform("edgeThresholdMin",i)}}Object.freeze(FXAA);class PostEffectManager{#ni;#ua=[];#la;#ca;#ha;#$t=16;#Ht=4;#fa=1;#da;#ma;#pa;#ga;#xa;#_a;#va;#ba;constructor(i){this.#ni=i,this.#ya()}get postEffectSystemUniformBuffer(){return this.#va}get view(){return this.#ni}get effectList(){return this.#ua}addEffect(i){this.#ua.push(i)}addEffectAt(i){}getEffectAt(i){return this.#ua[i]}removeEffect(i){}removeEffectAt(i){}removeAllEffect(){this.#ua.forEach(i=>{i.clear()}),this.#ua.length=0}render(){const{viewRenderTextureManager:i,redGPUContext:m}=this.#ni,{antialiasingManager:g}=m,{useMSAA:_,useFXAA:b}=g,{colorTextureView:y,colorResolveTextureView:T,colorTexture:w}=i,{width:P,height:$}=w;this.#Ta();const H=_?T:y;this.#ca=this.#Sa(this.#ni,H);let q=this.#ca;return this.#ua.forEach(i=>{q=i.render(this.#ni,P,$,q)}),b&&(this.#da||(this.#da=new FXAA(m)),this.#da.subpix=g.fxaa_subpix,q=this.#da.render(this.#ni,P,$,q)),q}clear(){this.#ua.forEach(i=>{i.clear()})}#Ta(){const{inverseProjectionMatrix:i,projectionMatrix:m,rawCamera:g,redGPUContext:_,scene:b}=this.#ni,{gpuDevice:y}=_,{modelMatrix:T,position:w}=g,P=this.#ba,$=this.#va.gpuBuffer,H=g instanceof Camera2D,q=multiply$5(qi,m,T);[{key:"projectionMatrix",value:m},{key:"projectionCameraMatrix",value:q},{key:"inverseProjectionMatrix",value:i},{key:"inverseProjectionCameraMatrix",value:invert$2(Ki,q)}].forEach(({key:i,value:m})=>{y.queue.writeBuffer($,P.members[i].uniformOffset,new P.members[i].View(m))}),[{key:"cameraMatrix",value:T},{key:"cameraPosition",value:w},{key:"nearClipping",value:[H?0:g.nearClipping]},{key:"farClipping",value:[H?0:g.farClipping]},{key:"fieldOfView",value:g.fieldOfView*Math.PI/180}].forEach(({key:i,value:m})=>{y.queue.writeBuffer($,P.members.camera.members[i].uniformOffset,new P.members.camera.members[i].View(m))})}#ya(){const{redGPUContext:i}=this.#ni,{gpuDevice:m}=i,g=this.#wa();this.#ma=m.createShaderModule({code:g,label:"POST_EFFECT_TEXTURE_COPY_COMPUTE_SHADER"}),this.#ga=this.#Ma(i),this.#xa=this.#Ra(m,this.#ma,this.#ga);const _=parseWGSL(Fi).uniforms.systemUniforms,b=new ArrayBuffer(_.arrayBufferByteLength);this.#ba=_,this.#va=new UniformBuffer(i,b,"POST_EFFECT_SYSTEM_UNIFORM_BUFFER")}#Sa(i,m){const{redGPUContext:g,viewRenderTextureManager:_}=i,{colorTexture:b}=_,{gpuDevice:y,antialiasingManager:T}=g,{useMSAA:w,changedMSAA:P}=T,{width:$,height:H}=b,q=$!==this.#_a?.width||H!==this.#_a?.height;return q&&(this.#la&&(this.#la.destroy(),this.#la=null),this.#la=this.#Ca(y,$,H),this.#ha=this.#la.createView({label:"POST_EFFECT_STORAGE_TEXTURE_VIEW"})),(q||P)&&(this.#pa=this.#Pa(g,this.#ga,m,this.#ha)),this.#_a={width:$,height:H},this.#Ea(y,this.#xa,this.#pa,$,H),this.#ha}#wa(){return` @group(0) @binding(0) var sourceTextureSampler:sampler; @group(0) @binding(1) var sourceTexture:texture_2d<f32>; @group(0) @binding(2) var outputTexture:texture_storage_2d<rgba8unorm,write>; @compute @workgroup_size(${this.#$t},${this.#Ht},${this.#fa}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy ); let dimensions:vec2<u32>=textureDimensions(sourceTexture); let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let uv=\tvec2<f32>((f32(index.x)+0.5)/dimW,(f32(index.y)+0.5)/dimH); var color:vec4<f32>=textureSampleLevel( sourceTexture, sourceTextureSampler, uv, 0 ); textureStore(outputTexture,index,color ); }; `}#Ma(i){return i.resourceManager.createBindGroupLayout("POST_EFFECT_TEXTURE_COPY_BIND_GROUP_LAYOUT",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,sampler:{type:"filtering"}},{binding:1,visibility:GPUShaderStage.COMPUTE,texture:{}},{binding:2,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#Ca(i,m,g){return i.createTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`POST_EFFECT_STORAGE_TEXTURE_${m}x${g}`})}#Pa(i,m,g,_){const b=Date.now();return i.gpuDevice.createBindGroup({label:`POST_EFFECT_TEXTURE_COPY_BIND_GROUP_${b}`,layout:m,entries:[{binding:0,resource:new Sampler(i).gpuSampler},{binding:1,resource:g},{binding:2,resource:_}]})}#Ra(i,m,g){return i.createComputePipeline({label:"POST_EFFECT_TEXTURE_COPY_COMPUTE_PIPELINE",layout:i.createPipelineLayout({label:"POST_EFFECT_TEXTURE_COPY_PIPELINE_LAYOUT",bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#Ea(i,m,g,_,b){const y=i.createCommandEncoder({label:"POST_EFFECT_TEXTURE_COPY_COMMAND_ENCODER"}),T=y.beginComputePass({label:"POST_EFFECT_TEXTURE_COPY_COMPUTE_PASS"});T.setPipeline(m),T.setBindGroup(0,g),T.dispatchWorkgroups(Math.ceil(_/this.#$t),Math.ceil(b/this.#Ht)),T.end(),i.queue.submit([y.finish()])}}let qi=create$5(),Ki=create$5();Object.freeze(PostEffectManager);class RenderViewStateData{useDistanceCulling;cullingDistanceSquared;distanceCulling;num3DGroups;num3DObjects;numDrawCalls;numDirtyPipelines;numInstances;numTriangles;numPoints;viewRenderTime;viewportSize;usedVideoMemory;currentRenderPassEncoder;timestamp;frustumPlanes;prevVertexGpuBuffer;prevFragmentUniformBindGroup;dirtyVertexUniformFromMaterial={};alphaLayer=[];transparentLayer=[];particleLayer=[];instanceMeshLayer=[];render2PathLayer=[];startTime;isScene2DMode=!1;#ni;constructor(i){this.#ni=i}get view(){return this.#ni}reset(i,m){if(!m||!this.#ni)throw new Error("Invalid parameters provided");const g=this.#ni,{useFrustumCulling:_,frustumPlanes:b}=g,{colorTexture:y,depthTexture:T}=g.viewRenderTextureManager;if(!y||!T)throw new Error("Invalid view properties");this.useDistanceCulling=g.useDistanceCulling,this.distanceCulling=g.distanceCulling,this.cullingDistanceSquared=this.distanceCulling*this.distanceCulling,this.num3DGroups=0,this.num3DObjects=0,this.numDrawCalls=0,this.numInstances=0,this.numDirtyPipelines=0,this.numTriangles=0,this.numPoints=0,this.viewRenderTime=0,this.currentRenderPassEncoder=i,this.timestamp=m,this.prevVertexGpuBuffer=null,this.prevFragmentUniformBindGroup=null,this.dirtyVertexUniformFromMaterial={},this.alphaLayer=[],this.transparentLayer=[],this.particleLayer=[],this.instanceMeshLayer=[],this.render2PathLayer=[],this.startTime=performance.now(),this.isScene2DMode=g.camera instanceof Camera2D,this.viewportSize={x:g.x,y:g.y,width:g.width,height:g.height,pixelRectArray:g.pixelRectArray};try{this.usedVideoMemory=calculateTextureByteSize({size:[y.width,y.height,y.depthOrArrayLayers],format:y.format,sampleCount:y.sampleCount,usage:y.usage})+calculateTextureByteSize({size:[T.width,T.height,T.depthOrArrayLayers],format:T.format,sampleCount:T.sampleCount,usage:T.usage})}catch(i){throw new Error("Could not calculate texture size:"+i.message)}this.frustumPlanes=_?b:null}}class ResourceStateIndexBuffer{static dirtyList=[];buffer;label;uuid;#X=0;constructor(i){this.buffer=i,this.label=i.name,this.uuid=i.uuid}get useNum(){return this.#X}set useNum(i){this.#X=i,ResourceStateIndexBuffer.dirtyList.push(this)}}class IndexBuffer extends ABaseBuffer{#Q;#Ia=0;#nt=0;#ee;constructor(i,m,g=GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,_=""){super(i,"managedIndexBufferState",g);const b=getCacheBufferFromResourceState(this,_);if(b)return b;_&&(this.name=_),this.changeData(m),basicRegisterResource(this,new ResourceStateIndexBuffer(this))}get gpuBuffer(){return this.#ee}get size(){return this.#Q.byteLength||0}get triangleCount(){return this.#nt}get indexNum(){return this.#Ia}destroy(){const i=this.#ee;i&&(this.#ee=null,this.__fireListenerList(!0),basicUnregisterResource(this),i&&i.destroy())}changeData(i){const{gpuDevice:m}=this;if(Array.isArray(i)&&(i=new Uint32Array(i)),this.#ee){this.targetResourceManagedState.videoMemory-=this.#Q.byteLength||0;let i=this.#ee;requestAnimationFrame(()=>{i.destroy()}),this.#ee=null}this.#Q=i,this.#Ia=i.length,this.targetResourceManagedState.videoMemory+=this.#Q.byteLength;const g={size:this.#Q.byteLength,usage:this.usage,label:this.name};this.#ee=m.createBuffer(g),this.#nt=this.#Ia/3,m.queue.writeBuffer(this.#ee,0,this.#Q)}updatePartialData(i,m){const{gpuDevice:g}=this;(i<0||i>=this.#Q.length)&&consoleAndThrowError(`Offset value is out of data bounds. Tried to access index ${i} on data of length ${this.#Q.length}`),Array.isArray(m)&&(m=new Uint32Array(m)),this.#Ia=m.length,g.queue.writeBuffer(this.#ee,i,m)}}Object.freeze(IndexBuffer);class Primitive{#Ba;#w;#M;#R;constructor(i){validateRedGPUContext(i)}static get primitiveInterleaveStruct(){return new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},"primitiveInterleaveStruct")}get gpuRenderInfo(){return this.#Ba}get vertexBuffer(){return this.#w}get indexBuffer(){return this.#M}get volume(){return this.#R||(this.#R=calculateGeometryAABB(this.#w)),this.#R}_setData(i){if(this.#w=i.vertexBuffer,this.#M=i.indexBuffer,this.#w){const{interleavedStruct:i}=this.#w;this.#Ba=new GeometryGPURenderInfo([{arrayStride:i.arrayStride,attributes:i.attributes}])}}}Object.freeze(Primitive);const createPrimitiveGeometry=(i,m,g,_)=>new Geometry(i,new VertexBuffer(i,new Float32Array(m),Primitive.primitiveInterleaveStruct,void 0,`VertexBuffer_${_}`),new IndexBuffer(i,new Uint32Array(g),void 0,`IndexBuffer_${_}`));class Box extends Primitive{#La=function(){let i,m;return m=function(m,g,_,b,y,T,w,P,$,H,q,W,ye){let Ge,Ke,Xe=P/q,Ye=$/W,je=P/2,Ze=$/2,Je=H/2,Qe=q+1,et=W+1,at=0,ht=[];for(Ke=0;Ke<et;Ke++){let i=Ke*Ye-Ze;for(Ge=0;Ge<Qe;Ge++){let g=Ge*Xe-je;ht[_]=g*T,ht[b]=i*w,ht[y]=Je,m.push(ht.x,ht.y,ht.z),ht[_]=0,ht[b]=0,ht[y]=H>0?1:-1,m.push(ht.x,ht.y,ht.z),m.push(Ge/q*ye,Ke/W*ye),at+=1}}for(Ke=0;Ke<W;Ke++)for(Ge=0;Ge<q;Ge++){let m=i+Ge+Qe*Ke,_=i+Ge+Qe*(Ke+1),b=i+(Ge+1)+Qe*(Ke+1),y=i+(Ge+1)+Qe*Ke;g.push(m,_,y,_,b,y)}i+=at},function(g,_,b,y,T,w,P,$,H){let q=[],W=[];return i=0,m(q,W,"z","y","x",-1,-1,T,y,b,$,P,H),m(q,W,"z","y","x",1,-1,T,y,-b,$,P,H),m(q,W,"x","z","y",1,1,b,T,y,w,$,H),m(q,W,"x","z","y",1,-1,b,T,-y,w,$,H),m(q,W,"x","y","z",1,-1,b,y,T,w,P,H),m(q,W,"x","y","z",-1,-1,b,y,-T,w,P,H),createPrimitiveGeometry(_,q,W,g)}}();constructor(i,m=1,g=1,_=1,b=1,y=1,T=1,w=1){super(i);const P=`PRIMITIVE_BOX_W${m}_H${g}_D${_}_WS${b}_HS${y}_DS${T}_UV${w}`,$=i.resourceManager.cachedBufferState;let H=$[P];H||(H=$[P]=this.#La(P,i,m,g,_,b,y,T,w)),this._setData(H)}}class Cylinder extends Primitive{#La=function(){let i,m;return function(g,_,b,y,T,w,P,$,H,q){const W=[],ye=[];let Ge=0;const Ke=[],Xe=T/2;return i=function(){let i,m;const g=[],_=[],$=(y-b)/T;for(m=0;m<=P;m++){const ye=[],Ye=m/P,je=Ye*(y-b)+b;for(i=0;i<=w;i++){const m=i/w,b=m*q+H,y=Math.sin(b),P=Math.cos(b);_[0]=je*y,_[1]=-Ye*T+Xe,_[2]=je*P,W.push(_[0],_[1],_[2]),g[0]=y,g[1]=$,g[2]=P,normalize$4(g,g),W.push(g[0],g[1],g[2]),W.push(m,Ye),ye.push(Ge++)}Ke.push(ye)}for(i=0;i<w;i++)for(m=0;m<P;m++){const g=Ke[m][i],_=Ke[m+1][i],b=Ke[m+1][i+1],y=Ke[m][i+1];ye.push(g,_,y),ye.push(_,b,y)}},m=function(i){let m,g,_;const T=[],P=[],$=!0===i?b:y,Ke=!0===i?1:-1;for(g=Ge,m=1;m<=w;m++)W.push(0,Xe*Ke,0),W.push(0,Ke,0),W.push(.5,.5),Ge++;for(_=Ge,m=0;m<=w;m++){const i=m/w*q+H,g=Math.cos(i),_=Math.sin(i);P[0]=$*_,P[1]=Xe*Ke,P[2]=$*g,W.push(P[0],P[1],P[2]),W.push(0,Ke,0),T[0]=.5*g+.5,T[1]=.5*_*Ke+.5,W.push(T[0],1-T[1]),Ge++}for(m=0;m<w;m++){const b=g+m,y=_+m;!0===i?ye.push(y,y+1,b):ye.push(y+1,y,b)}},i(),!1===$&&(b>0&&m(!0),y>0&&m(!1)),createPrimitiveGeometry(_,W,ye,g)}}();constructor(i,m=1,g=1,_=1,b=8,y=8,T=!1,w=0,P=2*Math.PI){super(i);const $=`PRIMITIVE_CYLINDER_RT${m}_RB${g}_H${_}_RS${b}_HS${y}_TS${T}_TS${w}_TL${P}`,H=i.resourceManager.cachedBufferState;let q=H[$];q||(q=H[$]=this.#La($,i,m,g,_,b,y,T,w,P)),this._setData(q)}}class Sphere extends Primitive{#La=function(){let i,m,g,_,b,y,T,w,P=[];const $=new Float32Array(3),H=new Float32Array(3);return function(q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je){i=je+Ze,_=0,P.length=0;const Qe=[],et=[];for(g=0;g<=Ke;g++){const i=[],b=g/Ke;for(m=0;m<=Ge;m++){const g=m/Ge;$[0]=-ye*Math.cos(Xe+g*Ye)*Math.sin(je+b*Ze),$[1]=ye*Math.cos(je+b*Ze),$[2]=ye*Math.sin(Xe+g*Ye)*Math.sin(je+b*Ze),Qe.push($[0],$[1],$[2]),H[0]=$[0],H[1]=$[1],H[2]=$[2],normalize$4(H,H),Qe.push(H[0],H[1],H[2]),Qe.push(g*Je,b*Je),i.push(_++)}P.push(i)}for(g=0;g<Ke;g++)for(m=0;m<Ge;m++)b=P[g][m+1],y=P[g][m],T=P[g+1][m],w=P[g+1][m+1],(0!==g||je>0)&&et.push(b,y,w),(g!==Ke-1||i<Math.PI)&&et.push(y,T,w);return createPrimitiveGeometry(W,Qe,et,q)}}();constructor(i,m=1,g=16,_=16,b=0,y=2*Math.PI,T=0,w=Math.PI,P=1){super(i);const $=`PRIMITIVE_SPHERE_R${m}_WS${g}_HS${_}_PS${b}_PL${y}_TS${T}_TL${w}_UV${P}`,H=i.resourceManager.cachedBufferState;let q=H[$];q||(q=H[$]=this.#La($,i,m,g,_,b,y,T,w,P)),this._setData(q)}}class DrawDebuggerAxis extends Mesh{constructor(i){super(i,null,null);const m=new Mesh(i,new Sphere(i,.5),new ColorMaterial(i));this.addChild(m);const g=new Box(i);this.addChild(this.#Da(g,"#ff0000",[5,.1,.1],[2.5,0,0])),this.addChild(this.#Ua(i,"#ff0000",[.5,1.25],[5.5,0,0],[0,0,-90])),this.addChild(this.#Da(g,"#00ff00",[.1,5,.1],[0,2.5,0])),this.addChild(this.#Ua(i,"#00ff00",[.5,1.25],[0,5.5,0],[180,0,0])),this.addChild(this.#Da(g,"#0000ff",[.1,.1,5],[0,0,2.5])),this.addChild(this.#Ua(i,"#0000ff",[.5,1.25],[0,0,5.5],[90,0,0]))}#Da(i,m,g,_){const{redGPUContext:b}=this,y=new Mesh(b,i,new ColorMaterial(b,m));return y.setScale(...g),y.setPosition(..._),y}#Ua(i,m,g,_,b){const y=new Mesh(i,new Cylinder(i,g[0],.001,g[1],32,1),new ColorMaterial(i,m));return y.setScale(g[0],g[1],g[0]),y.setPosition(..._),y.setRotation(...b),y}}var Wi="#redgpu_include SYSTEM_UNIFORM;\nstruct VertexIn { @location(0) pos:vec4<f32>, @location(1) uv:vec2<f32>,\n}\nstruct VertexOut { @builtin(position) pos:vec4<f32>, @location(0) uv:vec2<f32>,\n}\n@vertex\nfn vertexMain(in:VertexIn) -> VertexOut { var out:VertexOut; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; out.pos=u_projectionMatrix * u_cameraMatrix * in.pos; out.uv=in.uv; return out;\n}\nfn PristineGrid(uv:vec2<f32>,lineWidth:vec2<f32>) -> f32 { let uvDDXY=vec4<f32>(dpdx(uv),dpdy(uv)); let uvDeriv=vec2<f32>(length(uvDDXY.xz),length(uvDDXY.yw)); let invertLine:vec2<bool>=lineWidth > vec2f(0.5); let targetWidth:vec2<f32>=select(lineWidth,1 - lineWidth,invertLine); let drawWidth:vec2<f32>=clamp(targetWidth,uvDeriv,vec2f(0.5)); let lineAA:vec2<f32>=uvDeriv * 1.5; var gridUV:vec2<f32>=abs(fract(uv) * 2.0 - 1.0); gridUV=select(1 - gridUV,gridUV,invertLine); var grid2:vec2<f32>=smoothstep(drawWidth + lineAA,drawWidth - lineAA,gridUV); grid2 *=saturate(targetWidth/drawWidth); grid2=mix(grid2,targetWidth,saturate(uvDeriv * 2.0 - 1.0)); grid2=select(grid2,1.0 - grid2,invertLine); return mix(grid2.x,1.0,grid2.y);\n}\nstruct GridArgs { lineColor:vec4<f32>, baseColor:vec4<f32>, lineWidth:vec2<f32>, size:f32, distance:f32,\n}\n@group(1) @binding(0) var<uniform> gridArgs:GridArgs;\n@fragment\nfn fragmentMain(in:VertexOut) -> @location(0) vec4<f32> { var lineWidthWeight:f32=1; var color:vec4<f32>=gridArgs.lineColor; let DIVISION_SIZE:f32=gridArgs.size; let ASIX_SIZE:f32=max(DIVISION_SIZE * gridArgs.lineWidth.x,DIVISION_SIZE/20); let HALF_DIVISION_SIZE:f32=DIVISION_SIZE * 0.5; let PER_SIZE:f32=1/DIVISION_SIZE * ASIX_SIZE; let MIN_RANGE=HALF_DIVISION_SIZE - PER_SIZE; let MAX_RANGE=HALF_DIVISION_SIZE + PER_SIZE; if( MIN_RANGE <=in.uv.x && in.uv.x <=MAX_RANGE) { color=vec4<f32>(0,0,1,1); lineWidthWeight=ASIX_SIZE; }else if( MIN_RANGE <=in.uv.y && in.uv.y <=MAX_RANGE) { color=vec4<f32>(1,0,0,1); lineWidthWeight=ASIX_SIZE; } var grid=PristineGrid(in.uv,gridArgs.lineWidth * lineWidthWeight); return mix(gridArgs.baseColor,color,grid * gridArgs.lineColor.a);\n;\n}\n";const Xi=parseWGSL(Wi),Yi=Xi.uniforms.gridArgs;class DrawDebuggerGrid{#w;#M;#Vi;#Aa;#ka;#Oa;#Ee;#Ie;#Na;#J=100;#e;#a;#Ga=1;constructor(i){validateRedGPUContext(i),this.#e=InstanceIdGenerator.getNextId(this.constructor);const{resourceManager:m,gpuDevice:g}=i,_={code:Wi},b=m.createGPUShaderModule("VERTEX_MODULE_GRID",_);this.#Ee=new BlendState(this,Ar.ONE,Ar.ONE_MINUS_SRC_ALPHA,kr.ADD),this.#Ie=new BlendState(this,Ar.SRC_ALPHA,Ar.ONE_MINUS_SRC_ALPHA,kr.ADD),this.#Na=new ColorRGBA(128,128,128,1);const y=m.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),T=i.resourceManager.getGPUBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT")||i.resourceManager.createBindGroupLayout("GRID_MATERIAL_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(Xi,1));this.#Fa(i),this.#Aa=g.createBindGroup({label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_GRID",layout:T,entries:[{binding:0,resource:{buffer:this.#Vi.gpuBuffer,offset:0,size:this.#Vi.size}}]});const w={label:"PIPELINE_DESCRIPTOR_GRID",layout:g.createPipelineLayout({label:"DRAW_DEBUGGER_GRID_PIPELINE_LAYOUT",bindGroupLayouts:[y,T]}),vertex:{module:b,entryPoint:"vertexMain",buffers:[{arrayStride:this.#w.interleavedStruct.arrayStride,attributes:this.#w.interleavedStruct.attributes}]},fragment:{module:b,entryPoint:"fragmentMain",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:this.#Ee.state,alpha:this.#Ie.state}}]},depthStencil:{format:"depth32float",depthWriteEnabled:!1,depthCompare:di.LESS_EQUAL}};this.#ka=g.createRenderPipeline(w),this.#Oa=g.createRenderPipeline({...w,multisample:{count:4}})}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get size(){return this.#J}set size(i){this.#J=i}get lineColor(){return this.#Na}get lineWidth(){return this.#Ga}set lineWidth(i){validatePositiveNumberRange(i),this.#Ga=i}render(i){const{view:m,currentRenderPassEncoder:g}=i,_=create$4();set$4(_,m.rawCamera.x,m.rawCamera.y,m.rawCamera.z);const b=distance$2(_,[0,0,0]),y=this.#J;i.num3DObjects++,i.numDrawCalls++;const T=1/m.pixelRectObject.width*b*this.#Ga;this.#Vi.writeBuffers([[Yi.members.lineColor,this.#Na.rgbaNormal],[Yi.members.lineWidth,[T,T]],[Yi.members.size,y],[Yi.members.distance,b]]);const w=[-y/2,-0,-y/2,0,0,y/2,-0,-y/2,y,0,-y/2,-0,y/2,0,y,y/2,-0,y/2,y,y];if(this.#w.changeData(w),this.#ka){const{triangleCount:_,indexNum:b}=this.#M;g.setPipeline(m.redGPUContext.antialiasingManager.useMSAA?this.#Oa:this.#ka),g.setBindGroup(1,this.#Aa),g.setVertexBuffer(0,this.#w.gpuBuffer),g.setIndexBuffer(this.#M.gpuBuffer,"uint32"),g.drawIndexed(6),i.numTriangles+=_,i.numPoints+=b}}#Fa(i){const m=this.#J,{resourceManager:g}=i,{cachedBufferState:_}=g;{const g="VertexBuffer_Grid",b=_[g],y=[-m,-0,-m,0,0,m,-0,-m,m,0,-m,-0,m,0,m,m,-0,m,m,m];_[g]=this.#w=b||new VertexBuffer(i,y,new InterleavedStruct({position:InterleaveType.float32x3,uv:InterleaveType.float32x2}),void 0,g)}{const m="IndexBuffer_Grid",g=_[m],b=[0,1,2,1,2,3];_[m]=this.#M=g||new IndexBuffer(i,b,void 0,m)}{const m="UniformBuffer_Grid",g=_[m],b=new ArrayBuffer(Yi.arrayBufferByteLength);_[m]=this.#Vi=g||new UniformBuffer(i,b)}}}class Plane extends Primitive{#La=function(){const i=[],m=[];return function(g,_,b,y,T,w,P,$){const H=b/2,q=y/2,W=Math.floor(T)||1,ye=Math.floor(w)||1,Ge=W+1,Ke=ye+1,Xe=b/W,Ye=y/ye;i.length=0,m.length=0;for(let g=0;g<Ke;g++){const _=g*Ye-q,b=$?(1-g/ye)*P:g/ye*P;for(let y=0;y<Ge;y++){const T=y*Xe-H,w=y/W*P;if(i.push(T,-_,0,0,0,1,w,b),g<ye&&y<W){const i=y+Ge*g,_=y+Ge*(g+1),b=y+1+Ge*(g+1),T=y+1+Ge*g;m.push(i,_,T),m.push(_,b,T)}}}return createPrimitiveGeometry(_,i,m,g)}}();constructor(i,m=1,g=1,_=1,b=1,y=1,T=!1){super(i);const w=`PRIMITIVE_PLANE_W${m}_H${g}_WS${_}_HS${b}_UV${y}_FY${T}`,P=i.resourceManager.cachedBufferState;let $=P[w];$||($=P[w]=this.#La(w,i,m,g,_,b,y,T)),this._setData($)}}const ji=parseWGSL("#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcTintBlendMode;\n#redgpu_include drawPicking;\nstruct Uniforms { useDiffuseTexture:u32, opacity:f32, useTint:u32, tint:vec4<f32>, tintBlendMode:u32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var diffuseTextureSampler:sampler;\n@group(2) @binding(2) var diffuseTexture:texture_2d<f32>;\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> { var finalColor:vec4<f32>=textureSample(diffuseTexture,diffuseTextureSampler,inputData.uv); finalColor=vec4<f32>(finalColor.rgb/finalColor.a,finalColor.a * uniforms.opacity * inputData.combinedOpacity); #redgpu_if useTint finalColor=calcTintBlendMode(finalColor,uniforms.tintBlendMode,uniforms.tint); #redgpu_endIf if (finalColor.a==0.0) { discard; } return finalColor;\n};\n");class TextFieldMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m,g){super(i,"TEXT_FILED_MATERIAL",ji,2),g&&(this.name=g),this.diffuseTexture=m,this.diffuseTextureSampler=new Sampler(this.redGPUContext),this.initGPURenderInfos()}}tr.defineByPreset(TextFieldMaterial,[tr.PRESET_TEXTURE.DIFFUSE_TEXTURE,tr.PRESET_SAMPLER.DIFFUSE_TEXTURE_SAMPLER]),Object.freeze(TextFieldMaterial);const Zi=";box-sizing:content-box;white-space:nowrap;",Ji={padding:0,background:"transparent",color:"#fff",fontFamily:"Arial",fontSize:16,fontWeight:"normal",fontStyle:"normal",letterSpacing:0,wordBreak:"keep-all",verticalAlign:"middle",textAlign:"center",lineHeight:1.4,border:"",boxShadow:"none",boxSizing:"border-box",filter:""};class ATextField extends Mesh{#Va;#$a;#Ha;#za;#qa;#Ka;#Wa;#Xa=!0;#b;#Ya;#ja=!1;#Za;#Ja;constructor(i,m,g=!0){super(i),this.#b=i,this.#Xa=g,this.#Wa=m,this._material=new TextFieldMaterial(i,new BitmapTexture(i,null,!0,i=>{this.#Za=this.#qa.width,this.#Ja=this.#qa.height})),this._material.transparent=!0,this._material.diffuseTextureSampler=new Sampler(i,g?{minFilter:Vr.LINEAR,magFilter:Vr.LINEAR,mipmapFilter:$r.LINEAR}:{minFilter:Vr.NEAREST,magFilter:Vr.NEAREST,mipmapFilter:null}),this.depthStencilState.depthWriteEnabled=!1,this.#Qa(),this.#es(),this.#ts(),this.#ns(),this.#rs()}get text(){return this.#Ka}set text(i){if(this.#Ka===i)return;this.#Ka=i;const m=this.#Ha.querySelector("foreignObject div"),g=this.#is(i);this.#za.innerHTML=g,m.innerHTML=g,this.#ja=!0}render(i){this.#Wa(this.#Za,this.#Ja),this.#as(),super.render(i)}#is(i){return i.toString().replace(/\<br\/>/gi,"<div/>")}#Qa(){"undefined"!=typeof OffscreenCanvas?this.#Va=new OffscreenCanvas(100,100):this.#Va=document.createElement("canvas"),this.#$a=this.#Va.getContext("2d")}#ss(){const i=this.#za.getBoundingClientRect();const m=i.width+3+3,g=i.height+3+3;return{width:-2&Math.ceil(m),height:-2&Math.ceil(g),extraTop:3,extraRight:3,extraBottom:3,extraLeft:3}}#os(){const i=this.#Ha,m=i.querySelector("foreignObject"),{width:g,height:_,extraTop:b,extraRight:y,extraBottom:T,extraLeft:w}=this.#ss();m.setAttribute("width",g.toString()),m.setAttribute("height",_.toString()),m.style.padding=`${b}px ${y}px ${T}px ${w}px`,i.setAttribute("width",g.toString()),i.setAttribute("height",_.toString()),this.#qa.src="data:image/svg+xml;charset=utf-8,"+encodeURIComponent(i.outerHTML)}#ns(){this.#qa=new Image,this.#qa.style.cssText="position:absolute;bottom:0px;left:0;",this.#qa.onload=i=>{let m,g;const{width:_,height:b}=this.#ss(),y=(this.#Xa,2),T=this.#Xa?1:2;m=_*y,g=b*y,this.#qa.width=m/T,this.#qa.height=g/T,this.#Va.width=m,this.#Va.height=g,this.#Va instanceof OffscreenCanvas||(this.#Va.style.width=m/y+"px",this.#Va.style.height=g/y+"px"),this.#$a.imageSmoothingEnabled=!0,this.#$a.imageSmoothingQuality="high",this.#$a.clearRect(0,0,m,g),this.#$a.fillStyle="rgba(0,0,0,0)",this.#$a.fillRect(0,0,m,g),this.#$a.drawImage(this.#qa,0,0,m,g),this.dirtyTransform=!0;const callback=i=>{const m=this.material.diffuseTexture.src;"string"==typeof m&&m?.startsWith?.("blob:")&&URL.revokeObjectURL(m),this.material.diffuseTexture.src=URL.createObjectURL(i)};this.#Va instanceof OffscreenCanvas?this.#Va.convertToBlob({type:"image/png"}).then(callback):this.#Va.toBlob(callback,"image/png")}}#as(){this.#ja&&(this.#Ya&&cancelAnimationFrame(this.#Ya),this.#Ya=requestAnimationFrame(()=>{this.#os()})),this.#ja=!1}#us=(i,m)=>{const g=this.#Ha.querySelector("foreignObject > div").style,_=this.#za.style,b=`_${i}`;this[b]=m,Object.defineProperty(this,i,{get:()=>this[b],set:m=>{const y=this[b];this[b]=m;const T=(i=>"number"==typeof i)(m)&&(i=>!["lineHeight","fontWeight"].includes(i))(i)?`${m}px`:m;g[i]=T,_[i]=T,y!==m&&(this.#ja=!0)}}),this[i]=m};#es(){this.#za=document.createElement("div"),this.#za.style.cssText=Zi+";position:absolute;top:200px;left:0;visibility:hidden;text-rendering:optimizeLegibility",document.body.appendChild(this.#za)}#ts(){const i=this.#Ha=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("xmlns","http://www.w3.org/2000/svg"),i.setAttribute("text-rendering","optimizeLegibility"),i.style.cssText="position:absolute;top:0px;left:0px;z-index:1;margin:0;padding:0;overflow:visible;background:transparent",i.innerHTML=` <rect x="0" y="0" width="100%" height="100%" fill="rgba(0,0,0,0)"/> <foreignObject width="100%" height="100%" style="margin:0;padding:0;" overflow="visible"> <div xmlns="http://www.w3.org/1999/xhtml" style="${Zi}"></div> </foreignObject>`}#rs(){for(const[i,m]of Object.entries(Ji))this.#us(i,m);this.#ja=!0}}Object.freeze(ATextField);var Qi="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_positionVec4=vec4<f32>(input_position,1.0); let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0); let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz); let objectPosition=input_position.xyz; let distance=length(cameraPosition - objectPosition); let scaleFactor=distance; var scaleMatrix:mat4x4<f32>=mat4x4<f32>( 10.0,0.0,0.0,0.0, 0.0,10.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); #redgpu_if useBillboard { if (u_useBillboardPerspective !=1) { scaleMatrix=mat4x4<f32>( scaleFactor,0.0,0.0,0.0, 0.0,scaleFactor,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); } position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * scaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; output.position=vec4<f32>( temp.xy + objectPosition.xy * vec2<f32>( (u_projectionMatrix * u_modelMatrix)[0][0], (u_projectionMatrix * u_modelMatrix)[1][1] ), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * scaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); let input_uv=inputData.uv; var position:vec4<f32>; let cameraPosition=vec3<f32>((u_cameraMatrix * u_modelMatrix)[3].xyz); let objectPosition=input_position.xyz; let distance=length(cameraPosition - objectPosition); let scaleFactor=distance; var scaleMatrix:mat4x4<f32>=mat4x4<f32>( 10.0,0.0,0.0,0.0, 0.0,10.0,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); if (u_useBillboard==1) { if (u_useBillboardPerspective !=1) { scaleMatrix=mat4x4<f32>( scaleFactor,0.0,0.0,0.0, 0.0,scaleFactor,0.0,0.0, 0.0,0.0,1.0,0.0, 0.0,0.0,0.0,1.0 ); } position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * scaleMatrix * vec4<f32>(objectPosition,1.0); output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; output.position=vec4<f32>( temp.xy + objectPosition.xy * vec2<f32>( (u_projectionMatrix * u_modelMatrix)[0][0], (u_projectionMatrix * u_modelMatrix)[1][1] ), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * scaleMatrix * vec4<f32>(objectPosition,1.0); output.position=u_projectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const ea=parseWGSL(Qi),ta=ea.uniforms.vertexUniforms;class TextField3D extends ATextField{#ls=1;#cs=1;constructor(i,m){super(i,(i,m)=>{const g=this.#ls,_=this.#cs;this.#ls=i/1024,this.#cs=m/1024,g===this.#ls&&_===this.#cs||(this.dirtyTransform=!0)}),this._geometry=new Plane(i),m&&(this.text=m)}get geometry(){return this._geometry}set geometry(i){console.error("TextField3D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField3D can not change material")}get renderTextureWidth(){return this.#ls}get renderTextureHeight(){return this.#cs}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_3D",ea,ta,Qi)}}wn.defineByPreset(TextField3D,[[wn.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],wn.PRESET_BOOLEAN.USE_BILLBOARD]),Object.freeze(TextField3D);class ADrawDebuggerLight{#b;#hs;#fs;constructor(i,m,g=32){this.#b=i;const _=this.createLightDebugGeometry(i,g);this.#hs=new ColorMaterial(i),this.#hs.color.setColorByRGB(m[0],m[1],m[2]),this.#fs=new Mesh(i,_,this.#hs),this.#fs.primitiveState.cullMode="none",this.#fs.primitiveState.topology=zn.LINE_LIST,this.#fs.depthStencilState.depthWriteEnabled=!1}get lightMaterial(){return this.#hs}get lightDebugMesh(){return this.#fs}updateVertexBuffer(i,m){const g=m.data;let _=0;const b=Math.min(i.length,Math.floor(g.length/16));for(let m=0;m<b;m++){const[b,y]=i[m];g[_++]=b[0],g[_++]=b[1],g[_++]=b[2],g[_++]=0,g[_++]=0,g[_++]=1,g[_++]=0,g[_++]=0,g[_++]=y[0],g[_++]=y[1],g[_++]=y[2],g[_++]=0,g[_++]=0,g[_++]=1,g[_++]=0,g[_++]=0}m.updateAllData(g)}createLightDebugGeometry(i,m){const g=new Float32Array(2*m*8),_=new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexNormal:InterleaveType.float32x3,texcoord:InterleaveType.float32x2},`lightDebugStruct_${Math.random()}`),b=new VertexBuffer(i,g,_);return new Geometry(i,b)}}class DrawDebuggerPointLight extends ADrawDebuggerLight{#it;#ds;constructor(i,m){super(i,[0,255,255],51),this.#it=m,this.#ds=new TextField3D(i),this.#ds.useBillboard=!0,this.#ds.fontSize=40,this.#ds.text="💡",this.lightDebugMesh.addChild(this.#ds)}render(i){this.#it.enableDebugger&&(this.#ms(this.#it,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#ds.setPosition(...this.#it.position))}#ms(i,m){const g=i.position||[0,0,0],_=i.radius||1,b=16,y=[];for(let i=0;i<b;i++){const m=i/b*Math.PI*2,T=(i+1)/b*Math.PI*2,w=g[0]+Math.cos(m)*_,P=g[1]+Math.sin(m)*_,$=g[2],H=g[0]+Math.cos(T)*_,q=g[1]+Math.sin(T)*_,W=g[2];y.push([[w,P,$],[H,q,W]])}for(let i=0;i<b;i++){const m=i/b*Math.PI*2,T=(i+1)/b*Math.PI*2,w=g[0]+Math.cos(m)*_,P=g[1],$=g[2]+Math.sin(m)*_,H=g[0]+Math.cos(T)*_,q=g[1],W=g[2]+Math.sin(T)*_;y.push([[w,P,$],[H,q,W]])}for(let i=0;i<b;i++){const m=i/b*Math.PI*2,T=(i+1)/b*Math.PI*2,w=g[0],P=g[1]+Math.cos(m)*_,$=g[2]+Math.sin(m)*_,H=g[0],q=g[1]+Math.cos(T)*_,W=g[2]+Math.sin(T)*_;y.push([[w,P,$],[H,q,W]])}const T=.2*_;y.push([[g[0]-T,g[1],g[2]],[g[0]+T,g[1],g[2]]]),y.push([[g[0],g[1]-T,g[2]],[g[0],g[1]+T,g[2]]]),y.push([[g[0],g[1],g[2]-T],[g[0],g[1],g[2]+T]]),this.updateVertexBuffer(y,m)}}Object.freeze(DrawDebuggerPointLight);class DrawDebuggerSpotLight extends ADrawDebuggerLight{#it;#ds;constructor(i,m){super(i,[255,255,0],80),this.#it=m,this.#ds=new TextField3D(i),this.#ds.useBillboard=!0,this.#ds.fontSize=40,this.#ds.text="🔦",this.lightDebugMesh.addChild(this.#ds)}render(i){this.#it.enableDebugger&&(this.#ps(this.#it,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i),this.#ds.setPosition(...this.#it.position))}#ps(i,m){const g=i.position||[0,0,0],_=i.direction||[0,-1,0],b=i.radius||5,y=i.outerCutoff||22.5,T=i.innerCutoff||15,w=[],P=Math.sqrt(_[0]*_[0]+_[1]*_[1]+_[2]*_[2]),$=[_[0]/P,_[1]/P,_[2]/P],H=[g[0]+$[0]*b,g[1]+$[1]*b,g[2]+$[2]*b],q=b*Math.tan(y*Math.PI/180),W=b*Math.tan(T*Math.PI/180);let ye=[0,1,0];Math.abs($[1])>.99&&(ye=[1,0,0]);const Ge=[$[1]*ye[2]-$[2]*ye[1],$[2]*ye[0]-$[0]*ye[2],$[0]*ye[1]-$[1]*ye[0]],Ke=Math.sqrt(Ge[0]*Ge[0]+Ge[1]*Ge[1]+Ge[2]*Ge[2]),Xe=[Ge[0]/Ke,Ge[1]/Ke,Ge[2]/Ke],Ye=[Xe[1]*$[2]-Xe[2]*$[1],Xe[2]*$[0]-Xe[0]*$[2],Xe[0]*$[1]-Xe[1]*$[0]],je=16;for(let i=0;i<je;i++){const m=i/je*Math.PI*2,_=(i+1)/je*Math.PI*2,b=Math.cos(m),y=Math.sin(m),T=Math.cos(_),P=Math.sin(_),$=[H[0]+(Xe[0]*b+Ye[0]*y)*q,H[1]+(Xe[1]*b+Ye[1]*y)*q,H[2]+(Xe[2]*b+Ye[2]*y)*q],W=[H[0]+(Xe[0]*T+Ye[0]*P)*q,H[1]+(Xe[1]*T+Ye[1]*P)*q,H[2]+(Xe[2]*T+Ye[2]*P)*q];w.push([$,W]),w.push([g,$])}for(let i=0;i<je;i++){const m=i/je*Math.PI*2,g=(i+1)/je*Math.PI*2,_=Math.cos(m),b=Math.sin(m),y=Math.cos(g),T=Math.sin(g),P=[H[0]+(Xe[0]*_+Ye[0]*b)*W,H[1]+(Xe[1]*_+Ye[1]*b)*W,H[2]+(Xe[2]*_+Ye[2]*b)*W],$=[H[0]+(Xe[0]*y+Ye[0]*T)*W,H[1]+(Xe[1]*y+Ye[1]*T)*W,H[2]+(Xe[2]*y+Ye[2]*T)*W];w.push([P,$])}w.push([g,H]);const Ze=.3;w.push([[g[0]-Ze,g[1],g[2]],[g[0]+Ze,g[1],g[2]]]),w.push([[g[0],g[1]-Ze,g[2]],[g[0],g[1]+Ze,g[2]]]),w.push([[g[0],g[1],g[2]-Ze],[g[0],g[1],g[2]+Ze]]);for(let i=0;i<4;i++){const m=i/4*Math.PI*2,_=Math.cos(m),b=Math.sin(m),y=[H[0]+(Xe[0]*_+Ye[0]*b)*q,H[1]+(Xe[1]*_+Ye[1]*b)*q,H[2]+(Xe[2]*_+Ye[2]*b)*q];w.push([g,y])}this.updateVertexBuffer(w,m)}}Object.freeze(DrawDebuggerSpotLight);class DrawDebuggerDirectionalLight extends ADrawDebuggerLight{#it;#ds;#gs=[0,10,0];constructor(i,m){super(i,[255,255,0],8),this.#it=m,this.#ds=new TextField3D(i),this.#ds.useBillboard=!0,this.#ds.fontSize=40,this.#ds.text="☀️",this.lightDebugMesh.addChild(this.#ds)}render(i){if(!this.#it.enableDebugger)return;this.#xs(this.#it,this.lightDebugMesh.geometry.vertexBuffer),this.lightDebugMesh.setPosition(0,0,0),this.lightDebugMesh.setRotation(0,0,0),this.lightDebugMesh.setScale(1,1,1),this.lightDebugMesh.render(i);const m=this.#it.direction,g=this.#gs,_=Math.sqrt(m[0]*m[0]+m[1]*m[1]+m[2]*m[2]),b=[m[0]/_,m[1]/_,m[2]/_];this.#ds.setPosition(g[0]-0*b[0],g[1]-0*b[1],g[2]-0*b[2])}#xs(i,m){const g=this.#gs,_=i.direction||[0,-1,0],b=Math.sqrt(_[0]*_[0]+_[1]*_[1]+_[2]*_[2]),y=[_[0]/b,_[1]/b,_[2]/b],T=[g[0]+3*y[0],g[1]+3*y[1],g[2]+3*y[2]],w=.3;let P=[0,1,0];Math.abs(y[1])>.99&&(P=[1,0,0]);const $=[y[1]*P[2]-y[2]*P[1],y[2]*P[0]-y[0]*P[2],y[0]*P[1]-y[1]*P[0]],H=Math.sqrt($[0]*$[0]+$[1]*$[1]+$[2]*$[2]),q=[$[0]/H,$[1]/H,$[2]/H],W=[q[1]*y[2]-q[2]*y[1],q[2]*y[0]-q[0]*y[2],q[0]*y[1]-q[1]*y[0]],ye=[[g,T],[T,[T[0]+-.5*y[0]+q[0]*w,T[1]+-.5*y[1]+q[1]*w,T[2]+-.5*y[2]+q[2]*w]],[T,[T[0]+-.5*y[0]-q[0]*w,T[1]+-.5*y[1]-q[1]*w,T[2]+-.5*y[2]-q[2]*w]],[T,[T[0]+-.5*y[0]+W[0]*w,T[1]+-.5*y[1]+W[1]*w,T[2]+-.5*y[2]+W[2]*w]],[T,[T[0]+-.5*y[0]-W[0]*w,T[1]+-.5*y[1]-W[1]*w,T[2]+-.5*y[2]-W[2]*w]],[[g[0]-.3,g[1],g[2]],[g[0]+.3,g[1],g[2]]],[[g[0],g[1]-.3,g[2]],[g[0],g[1]+.3,g[2]]],[[g[0],g[1],g[2]-.3],[g[0],g[1],g[2]+.3]]];this.updateVertexBuffer(ye,m)}}Object.freeze(DrawDebuggerDirectionalLight);class BaseLight{drawDebugger;#_s;#vs;#pr=!1;constructor(i,m=1){this.#_s=i,this.#vs=m}get enableDebugger(){return this.#pr}set enableDebugger(i){this.#pr=i}get color(){return this.#_s}set color(i){this.#_s=i}get intensity(){return this.#vs}set intensity(i){this.#vs=i}}Object.freeze(BaseLight);class AmbientLight extends BaseLight{constructor(i=new ColorRGB(173,216,230),m=.1){super(i,m)}}Object.freeze(AmbientLight);class DirectionalLight extends BaseLight{#bs=-1;#ys=-1;#Ts=-1;constructor(i=[-1,-1,-1],m="#fff",g=1){super(new ColorRGB(...convertHexToRgb(m,!0)),g),this.#bs=i[0],this.#ys=i[1],this.#Ts=i[2]}get directionX(){return this.#bs}set directionX(i){this.#bs=i}get directionY(){return this.#ys}set directionY(i){this.#ys=i}get directionZ(){return this.#Ts}set directionZ(i){this.#Ts=i}get direction(){return[this.#bs,this.#ys,this.#Ts]}set direction(i){this.#bs=i[0],this.#ys=i[1],this.#Ts=i[2]}}Object.freeze(DirectionalLight);class PointLight extends BaseLight{#Ss=1;#n=0;#r=0;#i=0;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#n}set x(i){this.#n=i}get y(){return this.#r}set y(i){this.#r=i}get z(){return this.#i}set z(i){this.#i=i}get position(){return[this.#n,this.#r,this.#i]}get radius(){return this.#Ss}set radius(i){this.#Ss=i}setPosition(i,m,g){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=m,this.#i=g)}}Object.freeze(PointLight);class SpotLight extends BaseLight{#Ss=1;#n=0;#r=2;#i=0;#bs=0;#ys=-1;#Ts=0;#ws=15;#Ms=22.5;constructor(i="#fff",m=1){super(new ColorRGB(...convertHexToRgb(i,!0)),m)}get x(){return this.#n}set x(i){this.#n=i}get y(){return this.#r}set y(i){this.#r=i}get z(){return this.#i}set z(i){this.#i=i}get position(){return[this.#n,this.#r,this.#i]}get radius(){return this.#Ss}set radius(i){this.#Ss=i}get directionX(){return this.#bs}set directionX(i){this.#bs=i}get directionY(){return this.#ys}set directionY(i){this.#ys=i}get directionZ(){return this.#Ts}set directionZ(i){this.#Ts=i}get direction(){return[this.#bs,this.#ys,this.#Ts]}set direction(i){this.#bs=i[0],this.#ys=i[1],this.#Ts=i[2]}get innerCutoff(){return this.#ws}set innerCutoff(i){this.#ws=i}get outerCutoff(){return this.#Ms}set outerCutoff(i){this.#Ms=i}get innerCutoffCos(){return Math.cos(this.#ws*Math.PI/180)}get outerCutoffCos(){return Math.cos(this.#Ms*Math.PI/180)}setPosition(i,m,g){Array.isArray(i)?[this.#n,this.#r,this.#i]=i:(this.#n=i,this.#r=m,this.#i=g)}lookAt(i,m,g){let _,b,y;Array.isArray(i)?[_,b,y]=i:(_=i,b=m,y=g);const T=_-this.#n,w=b-this.#r,P=y-this.#i,$=Math.sqrt(T*T+w*w+P*P);$>0&&(this.#bs=T/$,this.#ys=w/$,this.#Ts=P/$)}}Object.freeze(SpotLight);class LightManager{#Rs=3;#Cs=Rr.MAX_CLUSTER_LIGHTS;#Ps=[];#Es=[];#Is=[];#Bs=new AmbientLight;#Ls=create$5();get spotLights(){return this.#Is}get spotLightCount(){return this.#Is.length}get limitClusterLightCount(){return this.#Cs}get pointLights(){return this.#Es}get pointLightCount(){return this.#Es.length}get limitDirectionalLightCount(){return this.#Rs}get directionalLightCount(){return this.#Ps.length}get directionalLights(){return this.#Ps}get ambientLight(){return this.#Bs}set ambientLight(i){i instanceof AmbientLight||consoleAndThrowError("allow only AmbientLight instance"),this.#Bs=i}addSpotLight(i){i instanceof SpotLight||consoleAndThrowError("allow only SpotLight instance");this.#Is.length+this.#Es.length>this.#Cs&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#Is.push(i)}addPointLight(i){i instanceof PointLight||consoleAndThrowError("allow only PointLight instance");this.#Is.length+this.#Es.length>this.#Cs&&consoleAndThrowError("Cannot add more cluster lights. The limit has been reached."),this.#Es.push(i)}addDirectionalLight(i){i instanceof DirectionalLight||consoleAndThrowError("allow only DirectionalLight instance");this.#Ps.length>this.#Rs&&consoleAndThrowError("Cannot add more directional lights. The limit has been reached."),this.#Ps.push(i)}removeSpotLight(i){const m=this.#Is.indexOf(i);-1!==m&&this.#Is.splice(m,1)}removePointLight(i){const m=this.#Es.indexOf(i);-1!==m&&this.#Es.splice(m,1)}removeDirectionalLight(i){const m=this.#Ps.indexOf(i);-1!==m&&this.#Ps.splice(m,1)}removeAllSpotLight(){this.#Is=[]}removeAllPointLight(){this.#Es=[]}removeAllDirectionalLight(){this.#Ps=[]}removeAllLight(){this.removeAllPointLight(),this.removeAllSpotLight(),this.removeAllDirectionalLight(),this.#Bs=null}updateViewSystemUniforms(i){const{scene:m,redGPUContext:g}=i,_=i.systemUniform_Vertex_StructInfo,{systemUniform_Vertex_UniformBuffer:b}=i,{members:y}=_,{lightManager:T,shadowManager:w}=m,{directionalShadowManager:P}=w;if(b.writeBuffers([[y.directionalLightCount,T.directionalLightCount],[y.directionalLightProjectionViewMatrix,this.#Ds(i)],[y.directionalLightProjectionMatrix,this.#Us(i)],[y.directionalLightViewMatrix,this.#As(i)],[y.shadowDepthTextureSize,P.shadowDepthTextureSize],[y.bias,P.bias]]),T.directionalLights.forEach((m,_)=>{const{directionalLights:T}=y,{direction:w,color:P,intensity:$}=T.memberList[_];m.enableDebugger&&(m.drawDebugger||(m.drawDebugger=new DrawDebuggerDirectionalLight(g,m)),m.drawDebugger.render(i.debugViewRenderState)),b.writeBuffers([[w,m.direction],[P,m.color.rgbNormal],[$,m.intensity]])}),T.ambientLight){const m=i.scene.lightManager.ambientLight,{ambientLight:g}=y,{color:_,intensity:T}=g.members;b.writeBuffers([[_,m.color.rgbNormal],[T,m.intensity]])}}#Ds(i){return multiply$5(create$5(),this.#Us(i),this.#As(i))}#Us(i){const m=create$5(),g=i.rawCamera instanceof Camera2D?fromValues$4(0,0,0):fromValues$4(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),_=Math.max(distance$2(g,create$4()),1);return Ke(m,-_,_,-_,_,3*-_,3*_),m}#As(i){identity$2(this.#Ls);const m=i.rawCamera instanceof Camera2D?fromValues$4(0,0,0):fromValues$4(i.rawCamera.x,i.rawCamera.y,i.rawCamera.z),g=Math.max(distance$2(m,create$4()),1),_=fromValues$4(0,1,0),b=fromValues$4(0,0,0),y=i.scene.lightManager.directionalLights.length?fromValues$4(-i.scene.lightManager.directionalLights[0].direction[0]*g,-i.scene.lightManager.directionalLights[0].direction[1]*g,-i.scene.lightManager.directionalLights[0].direction[2]*g):create$4(),T=create$5();return lookAt(T,y,b,_),T}}Object.freeze(LightManager);class DirectionalShadowManager{#ks=2048;#Os=.005;#Ns;#Gs;#Fs;#b;#pi=[];get castingList(){return this.#pi}get shadowDepthTextureView(){return this.#Gs}get shadowDepthTextureViewEmpty(){return this.#Fs}get bias(){return this.#Os}set bias(i){validatePositiveNumberRange(i,0,1),this.#Os=i}get shadowDepthTextureSize(){return this.#ks}set shadowDepthTextureSize(i){validateUintRange(i,1),this.#ks=i,this.#Vs()}resetCastingList(){this.#pi.length=0}updateViewSystemUniforms(i){this.#b=i,this.#Vs()}destroy(){this.#Ns&&(this.#Ns.destroy(),this.#Ns=null,this.#Gs=null)}#Vs(){this.#Ns?.width!==this.#ks&&(this.destroy(),this.#$s())}#Hs(i){const m=i.createTexture({size:[1,1,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_EmptyDepthTexture_1x1_${Date.now()}`});this.#Fs=m.createView({label:m.label})}#$s(){const{gpuDevice:i}=this.#b;this.#Ns=i.createTexture({size:[this.#ks,this.#ks,1],usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING,format:"depth32float",label:`DirectionalShadowManager_shadowDepthTextureSize_${this.#ks}x${this.#ks}_${Date.now()}`}),this.#Gs=this.#Ns.createView({label:this.#Ns.label}),this.#Fs||this.#Hs(i)}}Object.freeze(DirectionalShadowManager);class ShadowManager{#zs=new DirectionalShadowManager;constructor(){}get directionalShadowManager(){return this.#zs}}Object.freeze(ShadowManager);class Scene extends Object3DContainer{#e;#a;#qs=new ColorRGBA;#Ks=!1;#Ws=new LightManager;#Xs=new ShadowManager;constructor(i){super(),this.#e=InstanceIdGenerator.getNextId(this.constructor),this.#a=i}get lightManager(){return this.#Ws}get shadowManager(){return this.#Xs}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get backgroundColor(){return this.#qs}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#qs=i}get useBackgroundColor(){return this.#Ks}set useBackgroundColor(i){this.#Ks=i}}class ViewRenderTextureManager{#Ys;#js;#Zs;#Js;#Qs;#eo;#to;#no;#ro;#io=!0;#ao=!0;#b;#ni;constructor(i){validateRedGPUContext(i.redGPUContext),this.#b=i.redGPUContext,this.#ni=i}get renderPath1ResultTextureDescriptor(){return this.#Js}get colorTexture(){return this.#Ys}get colorResolveTexture(){return this.#Qs}get depthTexture(){return this.#eo}get depthTextureView(){return this.#so("depth"),this.#ro}get colorTextureView(){return this.#so("color"),this.#to}get colorResolveTextureView(){return this.#no}get renderPath1ResultTextureView(){return this.#Zs}get renderPath1ResultTexture(){return this.#oo(),this.#js}#oo(){const{gpuDevice:i,resourceManager:m}=this.#b,g=this.#js,{pixelRectObject:_}=this.#ni,{width:b,height:y}=_;(!g||(g?.width!==b||g?.height!==y))&&(g&&(g?.destroy(),this.#js=null,this.#Zs=null),this.#Js={size:{width:Math.max(1,b),height:Math.max(1,y),depthOrArrayLayers:1},format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,mipLevelCount:getMipLevelCount(b,y),label:`renderPath1ResultTexture_${b}x${y}_${Date.now()}`},this.#js=i.createTexture(this.#Js),this.#Zs=m.getGPUResourceBitmapTextureView(this.#js))}#so(i){const m="depth"===i,{antialiasingManager:g,gpuDevice:_,resourceManager:b}=this.#b,{useMSAA:y}=g,T=m?this.#eo:this.#Ys,{pixelRectObject:w}=this.#ni,{width:P,height:$}=w,H=T?.width!==P||T?.height!==$,q=m?this.#ao!==y:this.#io!==y,W=!T||H||q;if(m?this.#ao=y:this.#io=y,W){T&&(T?.destroy(),m||(this.#Qs?.destroy(),this.#Qs=null,this.#no=null));const g=_.createTexture({size:[Math.max(P,1),Math.max($,1),1],sampleCount:y?4:1,label:`${i}_${P}x${$}_${Date.now()}`,format:m?"depth32float":navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|(m||y?0:GPUTextureUsage.COPY_SRC)});if(m)this.#eo=g,this.#ro=b.getGPUResourceBitmapTextureView(g);else if(this.#Ys=g,this.#to=b.getGPUResourceBitmapTextureView(g),y){const m=_.createTexture({size:{width:Math.max(P,1),height:Math.max($,1),depthOrArrayLayers:1},sampleCount:1,label:`${i}_resolve_${P}x${$}_${Date.now()}`,format:navigator.gpu.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC});this.#Qs=m,this.#no=b.getGPUResourceBitmapTextureView(m)}}}}Object.freeze(ViewRenderTextureManager);class ViewTransform{onResize=null;#b;#uo=create$5();#_r;#n=0;#r=0;#Xr;#Yr;#jr=[0,0,0,0];constructor(i){validateRedGPUContext(i),this.#b=i}get redGPUContext(){return this.#b}get camera(){return this.#_r}set camera(i){i instanceof PerspectiveCamera||i instanceof Camera2D||i instanceof Camera2D||i instanceof OrthographicCamera||i instanceof AController||consoleAndThrowError("allow PerspectiveCamera or OrthographicCamera or AController instance"),this.#_r=i}get x(){return this.#n}set x(i){this.setPosition(i,this.y)}get y(){return this.#r}set y(i){this.setPosition(this.x,i)}get width(){return this.#Xr}set width(i){this.setSize(i,this.#Yr)}get height(){return this.#Yr}set height(i){this.setSize(this.#Xr,i)}get pixelRectArray(){return this.#jr}get pixelRectObject(){return{x:this.#jr[0],y:this.#jr[1],width:this.#jr[2],height:this.#jr[3]}}get screenRectObject(){return{x:this.#jr[0]/devicePixelRatio,y:this.#jr[1]/devicePixelRatio,width:this.#jr[2]/devicePixelRatio,height:this.#jr[3]/devicePixelRatio}}get aspect(){return this.#jr[2]/this.#jr[3]}get frustumPlanes(){return this.#_r instanceof AController?computeViewFrustumPlanes(this.projectionMatrix,this.#_r.camera.modelMatrix):computeViewFrustumPlanes(this.projectionMatrix,this.#_r.modelMatrix)}get rawCamera(){return this.#_r instanceof AController?this.#_r.camera:this.#_r}get projectionMatrix(){const{pixelRectObject:i,redGPUContext:m}=this;if(this.rawCamera instanceof OrthographicCamera){const{nearClipping:i,farClipping:m}=this.rawCamera;orthoZO(this.#uo,this.rawCamera.left,this.rawCamera.right,this.rawCamera.bottom,this.rawCamera.top,i,m)}else if(this.rawCamera instanceof Camera2D)Ke(this.#uo,-.5,.5,-.5,.5,-1e5,1e5),scale$5(this.#uo,this.#uo,[m.renderScale,m.renderScale,1]),translate$1(this.#uo,this.#uo,[-.5,.5,0]),scale$5(this.#uo,this.#uo,[1/i.width*window.devicePixelRatio,-1/i.height*window.devicePixelRatio,1]),identity$2(this.rawCamera.modelMatrix);else{const{fieldOfView:i,nearClipping:m,farClipping:g}=this.rawCamera;Ge(this.#uo,Math.PI/180*i,this.aspect,m,g)}return this.#uo}get inverseProjectionMatrix(){return invert$2(create$5(),this.#uo)}setPosition(i=this.#n,m=this.#r){const{sizeManager:g}=this.#b;RedGPUContextSizeManager.validatePositionValue(i),RedGPUContextSizeManager.validatePositionValue(m),this.#n=i,this.#r=m;const _=g.pixelRectObject,b=RedGPUContextSizeManager.getPixelDimension(_,"width",i),y=RedGPUContextSizeManager.getPixelDimension(_,"height",m);this.#jr[0]=Math.floor(b*(this.#n.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#jr[1]=Math.floor(y*(this.#r.toString().includes("%")?1:g.renderScale*window.devicePixelRatio))}setSize(i=this.#Xr,m=this.#Yr){const{sizeManager:g}=this.#b;RedGPUContextSizeManager.validateSizeValue(i),RedGPUContextSizeManager.validateSizeValue(m),this.#Xr=i,this.#Yr=m;const _=g.pixelRectObject,b=RedGPUContextSizeManager.getPixelDimension(_,"width",i),y=RedGPUContextSizeManager.getPixelDimension(_,"height",m);this.#jr[2]=Math.floor(b*(this.#Xr.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.#jr[3]=Math.floor(y*(this.#Yr.toString().includes("%")?1:g.renderScale*window.devicePixelRatio)),this.onResize&&this.onResize(this.screenRectObject.width,this.screenRectObject.height)}}const na=parseWGSL(Cr.SYSTEM_UNIFORM).uniforms.systemUniforms;class View3D extends ViewTransform{#lo=na;#co;#ho;#e;#fo;#do;#mo;#a;#po;#go=!0;#xo=!1;#_o=50;#vo;#bo;#yo;#To;#So=new PickingManager;#wo=[];#Mo;#xn;#ci;#Ro;#Co;#Po;#Eo=void 0;#Io=void 0;constructor(i,m,g,_){super(i),this.scene=m,this.camera=g,_&&(this.name=_),this.#ya(),this.#To=new ViewRenderTextureManager(this),this.#bo=new RenderViewStateData(this),this.#yo=new PostEffectManager(this),this.setSize("100%","100%")}get viewRenderTextureManager(){return this.#To}get systemUniform_Vertex_StructInfo(){return this.#lo}get systemUniform_Vertex_UniformBindGroup(){return this.#co}get systemUniform_Vertex_UniformBuffer(){return this.#ho}get passLightClustersBound(){return this.#Po}get ibl(){return this.#vo}set ibl(i){this.#vo=i}get pickingManager(){return this.#So}get postEffectManager(){return this.#yo}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get debugViewRenderState(){return this.#bo}get grid(){return this.#fo}set grid(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerGrid(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerGrid)&&null!==i)throw new TypeError("grid must be of type 'DrawDebuggerGrid','boolean',or 'null'.");this.#fo=i}get axis(){return this.#do}set axis(i){if("boolean"==typeof i)i=!0===i?new DrawDebuggerAxis(this.redGPUContext):null;else if(!(i instanceof DrawDebuggerAxis)&&null!==i)throw new TypeError("axis must be of type 'DrawDebuggerAxis','boolean',or 'null'.");this.#do=i}get skybox(){return this.#mo}set skybox(i){this.#mo=i}get useFrustumCulling(){return this.#go}set useFrustumCulling(i){this.#go=i}get useDistanceCulling(){return this.#xo}set useDistanceCulling(i){this.#xo=i}get distanceCulling(){return this.#_o}set distanceCulling(i){this.#_o=i}get scene(){return this.#po}set scene(i){i instanceof Scene||consoleAndThrowError("allow only Scene instance"),this.#po=i}screenToWorld(i,m){return screenToWorld(i,m,this)}update(i,m=!1,g=!1,_){const{scene:b}=i,{shadowManager:y}=b,{directionalShadowManager:T}=y,w=i.ibl,P=w?.iblTexture?.gpuTexture,$=w?.irradianceTexture?.gpuTexture;let H=m?T.shadowDepthTextureViewEmpty:T.shadowDepthTextureView;const q=i.redGPUContext.viewList.indexOf(i),W=`${q}_${m?"shadowRender":"basic"}_2path${!!_}`;if(q>-1){let m=!0,g=this.#wo[W];g&&(m=g.ibl!==w||g.ibl_iblTexture!==P||g.ibl_irradianceTexture!==$||g.renderPath1ResultTextureView!==_||g.shadowDepthTextureView!==H||!this.#Co),m?this.#Bo(W,H,i.ibl,_):this.#co=this.#wo[W].vertexUniformBindGroup,[{key:"useIblTexture",value:[P?1:0]},{key:"time",value:[i.debugViewRenderState.timestamp||0]},{key:"isView3D",value:[this.constructor===View3D?1:0]}].forEach(({key:i,value:m})=>{this.redGPUContext.gpuDevice.queue.writeBuffer(this.#ho.gpuBuffer,this.#lo.members[i].uniformOffset,new this.#lo.members[i].View(m))}),this.#wo[W]={ibl:w,ibl_iblTexture:P,ibl_irradianceTexture:$,renderPath1ResultTextureView:_,shadowDepthTextureView:H,vertexUniformBindGroup:this.#co}}this.#Lo(g)}checkMouseInViewBounds(){const{pixelRectObject:i,pickingManager:m}=this,{mouseX:g,mouseY:_}=m;return 0<g&&g<i.width&&0<_&&_<i.height}#Bo(i,m,g,_){this.#Lo(!0);const b=g?.iblTexture,y=g?.irradianceTexture,{resourceManager:T}=this.redGPUContext,w={layout:T.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),label:`SYSTEM_UNIFORM_bindGroup_${i}`,entries:[{binding:0,resource:{buffer:this.#ho.gpuBuffer,offset:0,size:this.#ho.size}},{binding:1,resource:this.#Mo},{binding:2,resource:m},{binding:3,resource:this.#xn},{binding:5,resource:{buffer:this.#ci,offset:0,size:this.#ci.size}},{binding:6,resource:{buffer:this.#Co.clusterLightsBuffer,offset:0,size:this.#Co.clusterLightsBuffer.size}},{binding:7,resource:this.#xn},{binding:8,resource:_||T.emptyBitmapTextureView},{binding:9,resource:this.#xn},{binding:10,resource:T.getGPUResourceCubeTextureView(b,b?.viewDescriptor||CubeTexture.defaultViewDescriptor)},{binding:11,resource:T.getGPUResourceCubeTextureView(y,y?.viewDescriptor||CubeTexture.defaultViewDescriptor)}]};this.#co=this.redGPUContext.gpuDevice.createBindGroup(w)}#ya(){const i=new ArrayBuffer(na.arrayBufferByteLength);this.#ho=new UniformBuffer(this.redGPUContext,i,"#systemUniform_Vertex_UniformBuffer"),this.#Ro=new Float32Array(16*Rr.MAX_CLUSTER_LIGHTS+4),this.#ci=this.redGPUContext.gpuDevice.createBuffer({label:"clusterLightsBuffer",size:this.#Ro.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC}),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#ci,0,this.#Ro),this.#Mo=new Sampler(this.redGPUContext,{addressModeU:Fr.CLAMP_TO_EDGE,addressModeV:Fr.CLAMP_TO_EDGE,addressModeW:Fr.CLAMP_TO_EDGE,compare:di.LESS_EQUAL}).gpuSampler,this.#xn=new Sampler(this.redGPUContext).gpuSampler}#Lo(i=!1){if(!i)return;const{redGPUContext:m,scene:g,debugViewRenderState:_}=this;if(this.#Po||(this.#Po=new PassClusterLightBound(m,this)),this.#Co&&(this.#Po.render(),this.#Eo=this.pixelRectArray[2],this.#Io=this.pixelRectArray[3]),this.#Co||(this.#Co=new PassClustersLight(m,this)),g){const{pointLights:i,spotLights:b}=g.lightManager,y=i.length,T=b.length;if(y){let g=y;for(;g--;){const b=i[g],y=4+16*g;this.#Ro.set([...b.position,b.radius,...b.color.rgbNormal,b.intensity,0],y),b.enableDebugger&&(b.drawDebugger||(b.drawDebugger=new DrawDebuggerPointLight(m,b)),b.drawDebugger.render(_))}}if(T){const i=16,g=y*i;let w=T;for(;w--;){const y=b[w],T=4+i*w+g;this.#Ro.set([...y.position,y.radius,...y.color.rgbNormal,y.intensity,1,...y.direction,y.outerCutoff,y.innerCutoff],T),y.enableDebugger&&(y.drawDebugger||(y.drawDebugger=new DrawDebuggerSpotLight(m,y)),y.drawDebugger.render(_))}}this.#Ro.set([y,T,0,0],0),this.redGPUContext.gpuDevice.queue.writeBuffer(this.#ci,0,this.#Ro),this.#Co.render()}}}Object.freeze(View3D);class RedGPUContextViewContainer{#Do=[];constructor(){}get viewList(){return this.#Do}get numViews(){return this.#Do.length}contains(i){return this.#Do.includes(i)}addView(i){this.#Uo(i),this.#Do.push(i)}addViewAt(i,m){this.#Uo(i),validateUintRange(m);const g=this.#Do.length;g<m&&(m=g),this.#Do[m]=i}getViewAt(i){return validateUintRange(i),this.#Do[i]}getViewIndex(i){return this.#Uo(i),this.#Do.indexOf(i)}setViewIndex(i,m){this.#Uo(i),validateUintRange(m);const g=this.#Do.length,_=m>=g,b=this.#Do.indexOf(i);-1===b&&consoleAndThrowError("입력하신 View 는 RedGPUContext instance 에 등록되지 않은 View 입니다."),_&&consoleAndThrowError(`index must be smaller than the viewList length./index:${m}/this.#viewList.length:${g}`),this.#Do.splice(b,1),this.#Do.splice(m,0,i)}swapViews(i,m){this.#Uo(i),this.#Uo(m);const g=this.#Do.indexOf(i),_=this.#Do.indexOf(m);-1!==g&&-1!==_||consoleAndThrowError((-1===g?"view1":"view2")+" is not child of this RedGPUContext instance."),this.swapViewsAt(g,_)}swapViewsAt(i,m){i===m&&consoleAndThrowError("The indices to swap cannot be the same."),validateUintRange(i),validateUintRange(m);const g=this.#Do.length;(i>=g||m>=g)&&consoleAndThrowError(`index1,index2 must be smaller than the viewList length./index1:${i}/index2:${m}/this.#viewList.length:${g}`);const _=this.#Do[i];this.#Do[i]=this.#Do[m],this.#Do[m]=_}removeView(i){this.#Uo(i);const m=this.#Do.indexOf(i);m>-1?this.#Do.splice(m,1):consoleAndThrowError("View3D is not found in the view list.")}removeViewAt(i){validateUintRange(i);const m=this.#Do.length;i<m?this.#Do.splice(i,1):consoleAndThrowError(`Index ${i} is out of range. View list length is ${m}.`)}removeAllViews(){this.#Do.length=0}#Uo(i){i instanceof View3D||consoleAndThrowError("allow only View3D instance")}}class RedGPUContextDetector{#Ao;#ko;#Oo;#No;#Go;constructor(i){this.#ya(i.gpuAdapter)}get adapterInfo(){return this.#Ao}get limits(){return this.#ko}get isFallbackAdapter(){return this.#Oo}get groupedLimits(){return this.#No}get userAgent(){return this.#Go}get isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Windows Phone|Kindle|Silk|PlayBook/i.test(navigator.userAgent)}#ya(i){this.#Go=navigator.userAgent,this.#Fo(i),this.#Vo()}#Fo(i){if(i){const{limits:m,info:g}=i,{isFallbackAdapter:_}=g;this.#Ao=g,this.#Oo=_,this.#ko=m}}#Vo(){const i={TextureLimits:["maxTextureDimension1D","maxTextureDimension2D","maxTextureDimension3D","maxTextureArrayLayers","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage"],BufferLimits:["maxBindGroups","maxBindGroupsPlusVertexBuffers","maxBindingsPerBindGroup","maxDynamicUniformBuffersPerPipelineLayout","maxDynamicStorageBuffersPerPipelineLayout","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxUniformBufferBindingSize","maxStorageBufferBindingSize","minUniformBufferOffsetAlignment","minStorageBufferOffsetAlignment","maxBufferSize"],PipelineAndShaderLimits:["maxVertexBuffers","maxVertexAttributes","maxVertexBufferArrayStride","maxInterStageShaderComponents","maxInterStageShaderVariables"],ComputeLimits:["maxComputeWorkgroupStorageSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeWorkgroupsPerDimension"],ColorLimits:["maxColorAttachments","maxColorAttachmentBytesPerSample"]};let m={TextureLimits:{},BufferLimits:{},PipelineAndShaderLimits:{},ComputeLimits:{},ColorLimits:{},EtcLimit:{}};for(const g in this.#ko){let _=!1;for(const b in i)if(i[b].includes(g)){m[b][g]=this.#ko[g],_=!0;break}_||(m.EtcLimit[g]=this.#ko[g])}this.#No=m}}class AntialiasingManager{#b;#$o=!0;#Ho=!1;#zo=.75;#qo=.166;#Ko=.0833;#Wo=!0;constructor(i){this.#b=i}get fxaa_subpix(){return this.#zo}set fxaa_subpix(i){validateNumberRange(i,0,1),this.#zo=i}get fxaa_edgeThreshold(){return this.#qo}set fxaa_edgeThreshold(i){validateNumberRange(i,1e-4,.25),this.#qo=i}get fxaa_edgeThresholdMin(){return this.#Ko}set fxaa_edgeThresholdMin(i){validateNumberRange(i,1e-5,.1),this.#Ko=i}get useMSAA(){return this.#$o}set useMSAA(i){this.#$o=i,this.#Wo=!0}get useFXAA(){return this.#Ho}set useFXAA(i){this.#Ho=i}get changedMSAA(){return this.#Wo}set changedMSAA(i){this.#Wo=i}}Object.freeze(AntialiasingManager);class RedGPUContext extends RedGPUContextViewContainer{currentRequestAnimationFrame;onResize=null;#Xo;#Yo;#jo;#Zo;#y;#Zr;#Jo;#Qo;#Be;#qs=new ColorRGBA(0,0,0,1);#eu=!1;#tu={};#ea;constructor(i,m,g,_,b){super(),this.#Yo=m,this.#y=g,this.#Zo=_,this.#jo=b,this.#Zr=i,this.#Jo=new RedGPUContextSizeManager(this),this.#Qo=new RedGPUContextDetector(this),this.#Be=new ResourceManager(this),this.#ea=new AntialiasingManager(this),this.#nu()}get antialiasingManager(){return this.#ea}get useDebugPanel(){return this.#eu}set useDebugPanel(i){this.#eu=i}get backgroundColor(){return this.#qs}set backgroundColor(i){i instanceof ColorRGBA||consoleAndThrowError("allow only ColorRGBA instance"),this.#qs=i}get detector(){return this.#Qo}get configurationDescription(){return this.#Xo}get gpuAdapter(){return this.#Yo}get alphaMode(){return this.#jo}set alphaMode(i){this.#jo=i,this.#ru()}get gpuContext(){return this.#Zo}get gpuDevice(){return this.#y}get htmlCanvas(){return this.#Zr}get keyboardKeyBuffer(){return this.#tu}set keyboardKeyBuffer(i){this.#tu=i}get resourceManager(){return this.#Be}get sizeManager(){return this.#Jo}get width(){return this.#Jo.width}set width(i){this.#Jo.width=i}get height(){return this.#Jo.height}set height(i){this.#Jo.height=i}get screenRectObject(){return this.#Jo.screenRectObject}get renderScale(){return this.#Jo.renderScale}set renderScale(i){this.#Jo.renderScale=i,this.viewList.forEach(i=>{i.setPosition(),i.setSize()})}destroy(){this.#y.destroy()}setSize(i=this.width,m=this.height){this.sizeManager.setSize(i,m)}#nu(){this.#ru(),this.sizeManager.setSize("100%","100%"),window?.addEventListener("resize",()=>{this.sizeManager.setSize(),this.viewList.forEach(i=>{i.setSize(),i.setPosition()})});(this.detector.isMobile?["click","touchmove","touchstart","touchend"]:["click","mousemove","mousedown","mouseup"]).forEach(i=>{const m=this.detector.isMobile?{click:Gi.CLICK,touchmove:Gi.MOVE,touchstart:Gi.DOWN,touchend:Gi.UP}:{click:Gi.CLICK,mousemove:Gi.MOVE,mousedown:Gi.DOWN,mouseup:Gi.UP};this.#Zr.addEventListener(i,i=>{const g=m[i.type];this.viewList.forEach(m=>{this.detector.isMobile&&i instanceof TouchEvent&&i.touches.length>0?(m.pickingManager.mouseX=i.touches[0].clientX*devicePixelRatio-m.pixelRectObject.x,m.pickingManager.mouseY=i.touches[0].clientY*devicePixelRatio-m.pixelRectObject.y):i instanceof MouseEvent&&(m.pickingManager.mouseX=i.offsetX*devicePixelRatio-m.pixelRectObject.x,m.pickingManager.mouseY=i.offsetY*devicePixelRatio-m.pixelRectObject.y),g===Gi.CLICK?m.pickingManager.lastMouseClickEvent={...i,type:g}:m.pickingManager.lastMouseEvent={...i,type:g}})})});{const HD_keyDown=i=>{this.#tu[i.key]=!0},HD_keyUp=i=>{this.#tu[i.key]=!1};window?.addEventListener("keyup",HD_keyUp),window?.addEventListener("keydown",HD_keyDown)}new ResizeObserver(i=>{}).observe(this.#Zr)}#ru(){const i=navigator.gpu.getPreferredCanvasFormat();this.#Xo={device:this.#y,format:i,alphaMode:this.#jo},this.#Zo.configure(this.#Xo)}}Object.freeze(RedGPUContext);const copyGPUBuffer=(i,m,g)=>{const _=i.createCommandEncoder();_.copyBufferToBuffer(m,0,g,0,Math.min(m.size,g.size));const b=_.finish();i.queue.submit([b])},ra=3.141592653589793,ia=6.283185307179586,aa=.225,sa=1.27323954,oa=.405284735,ua=1.5707963267948966,la=Math.PI/180;class InstancingMeshObject3D{modelMatrix=create$5();localMatrix=create$5();normalModelMatrix=create$5();inited=!1;#n=0;#i=0;#r=0;#er=[0,0,0];#ar=1;#sr=1;#or=1;#ur=[1,1,1];#o=0;#u=0;#l=0;#lr=[0,0,0];#iu=0;#au;#b;#dr=1;constructor(i,m,g){validateRedGPUContext(i),this.#b=i,this.#au=g,this.#iu=m}get opacity(){return this.#dr}set opacity(i){validatePositiveNumberRange(i,0,1),this.#dr=i,this.#su()}get x(){return this.#n}set x(i){this.#n=this.#er[0]=i,this.#su()}get y(){return this.#r}set y(i){this.#r=this.#er[1]=i,this.#su()}get z(){return this.#i}set z(i){this.#i=this.#er[2]=i,this.#su()}get position(){return this.#er}set position(i){this.#n=this.#er[0]=i,this.#r=this.#er[1]=i,this.#i=this.#er[2]=i,this.#su()}get scaleX(){return this.#ar}set scaleX(i){this.#ar=this.#ur[0]=i,this.#su()}get scaleY(){return this.#sr}set scaleY(i){this.#sr=this.#ur[1]=i,this.#su()}get scaleZ(){return this.#or}set scaleZ(i){this.#or=this.#ur[2]=i,this.#su()}get scale(){return this.#er}set scale(i){this.#ar=this.#ur[0]=i,this.#sr=this.#ur[1]=i,this.#or=this.#ur[2]=i,this.#su()}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#lr[0]=i,this.#su()}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#lr[1]=i,this.#su()}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#lr[2]=i,this.#su()}get rotation(){return this.#lr}set rotation(i){this.#o=this.#lr[0]=i,this.#u=this.#lr[1]=i,this.#l=this.#lr[2]=i,this.#su()}setScale(i,m,g){m=m??i,g=g??i;const _=this.#ur;this.#ar=_[0]=i,this.#sr=_[1]=m,this.#or=_[2]=g,this.#su()}setPosition(i,m,g){m=m??i,g=g??i;const _=this.#er;this.#n=_[0]=i,this.#r=_[1]=m,this.#i=_[2]=g,this.#su()}setRotation(i,m,g){m=m??i,g=g??i;const _=this.#lr;this.#o=_[0]=i,this.#u=_[1]=m,this.#l=_[2]=g,this.#su()}#su(){let i,m,g,_,b,y,T,w,P,$,H,q,W,ye,Ge,Ke,Xe,Ye,je,Ze,Je,Qe,et,at,ht,ft,gt,xt,vt,bt,yt,Tt,St,wt,Mt,Rt,Ct,Pt;this.inited=!0;{const W=this.localMatrix;let Xe;$=1,H=0,q=0,ye=0,Ge=1,Ke=0,Ye=0,je=0,Ze=1,W[12]=this.#n,W[13]=this.#r,W[14]=this.#i,W[15]=1,T=this.#o*la,w=this.#u*la,P=this.#l*la,Xe=T%ia,Xe<-ra?Xe+=ia:Xe>ra&&(Xe-=ia),Xe=Xe<0?sa*Xe+oa*Xe*Xe:sa*Xe-oa*Xe*Xe,i=Xe<0?aa*(Xe*-Xe-Xe)+Xe:aa*(Xe*Xe-Xe)+Xe,Xe=(T+ua)%ia,Xe<-ra?Xe+=ia:Xe>ra&&(Xe-=ia),Xe=Xe<0?sa*Xe+oa*Xe*Xe:sa*Xe-oa*Xe*Xe,_=Xe<0?aa*(Xe*-Xe-Xe)+Xe:aa*(Xe*Xe-Xe)+Xe,Xe=w%ia,Xe<-ra?Xe+=ia:Xe>ra&&(Xe-=ia),Xe=Xe<0?sa*Xe+oa*Xe*Xe:sa*Xe-oa*Xe*Xe,m=Xe<0?aa*(Xe*-Xe-Xe)+Xe:aa*(Xe*Xe-Xe)+Xe,Xe=(w+ua)%ia,Xe<-ra?Xe+=ia:Xe>ra&&(Xe-=ia),Xe=Xe<0?sa*Xe+oa*Xe*Xe:sa*Xe-oa*Xe*Xe,b=Xe<0?aa*(Xe*-Xe-Xe)+Xe:aa*(Xe*Xe-Xe)+Xe,Xe=P%ia,Xe<-ra?Xe+=ia:Xe>ra&&(Xe-=ia),Xe=Xe<0?sa*Xe+oa*Xe*Xe:sa*Xe-oa*Xe*Xe,g=Xe<0?aa*(Xe*-Xe-Xe)+Xe:aa*(Xe*Xe-Xe)+Xe,Xe=(P+ua)%ia,Xe<-ra?Xe+=ia:Xe>ra&&(Xe-=ia),Xe=Xe<0?sa*Xe+oa*Xe*Xe:sa*Xe-oa*Xe*Xe,y=Xe<0?aa*(Xe*-Xe-Xe)+Xe:aa*(Xe*Xe-Xe)+Xe,bt=b*y,yt=i*m*y-_*g,Tt=_*m*y+i*g,St=b*g,wt=i*m*g+_*y,Mt=_*m*g-i*y,Rt=-m,Ct=i*b,Pt=_*b,T=this.#ar,w=this.#sr,P=this.#or,W[0]=($*bt+ye*yt+Ye*Tt)*T,W[1]=(H*bt+Ge*yt+je*Tt)*T,W[2]=(q*bt+Ke*yt+Ze*Tt)*T,W[3]=W[3]*T,W[4]=($*St+ye*wt+Ye*Mt)*w,W[5]=(H*St+Ge*wt+je*Mt)*w,W[6]=(q*St+Ke*wt+Ze*Mt)*w,W[7]=W[7]*w,W[8]=($*Rt+ye*Ct+Ye*Pt)*P,W[9]=(H*Rt+Ge*Ct+je*Pt)*P,W[10]=(q*Rt+Ke*Ct+Ze*Pt)*P,W[11]=W[11]*P}this.modelMatrix=this.localMatrix;{let i=this.normalModelMatrix,m=this.modelMatrix;$=m[0],H=m[1],q=m[2],W=m[3],ye=m[4],Ge=m[5],Ke=m[6],Xe=m[7],Ye=m[8],je=m[9],Ze=m[10],Je=m[11],et=m[12],at=m[13],ht=m[14],ft=m[15],Qe=$*Ge-H*ye,gt=$*Ke-q*ye,xt=$*Xe-W*ye,vt=H*Ke-q*Ge,bt=H*Xe-W*Ge,yt=q*Xe-W*Ke,Tt=Ye*at-je*et,St=Ye*ht-Ze*et,wt=Ye*ft-Je*et,Rt=je*ft-Je*at,Mt=Ze*ft-Je*ht,Pt=Qe*Mt-gt*Rt+xt*Mt+vt*wt-bt*St+yt*Tt,Pt=1/Pt,i[0]=(Ge*Mt-Ke*Rt+Xe*Mt)*Pt,i[4]=(-H*Mt+q*Rt-W*Mt)*Pt,i[8]=(at*yt-ht*bt+ft*vt)*Pt,i[12]=(-je*yt+Ze*bt-Je*vt)*Pt,i[1]=(-ye*Mt+Ke*wt-Xe*St)*Pt,i[5]=($*Mt-q*wt+W*St)*Pt,i[9]=(-et*yt+ht*xt-ft*gt)*Pt,i[13]=(Ye*yt-Ze*xt+Je*gt)*Pt,i[2]=(ye*Rt-Ge*wt+Xe*Tt)*Pt,i[6]=(-$*Rt+H*wt-W*Tt)*Pt,i[10]=(et*bt-at*xt+ft*Qe)*Pt,i[14]=(-Ye*bt+je*xt-Je*Qe)*Pt,i[3]=(-ye*Mt+Ge*St-Ke*Tt)*Pt,i[7]=($*Mt-H*St+q*Tt)*Pt,i[11]=(-et*vt+at*gt-ht*Qe)*Pt,i[15]=(Ye*vt-je*gt+Ze*Qe)*Pt}if(this.#au.gpuRenderInfo){const{vertexUniformBuffer:i,vertexUniformInfo:m}=this.#au.gpuRenderInfo,g=m.members.instanceModelMatrixs,_=m.members.instanceNormalModelMatrix,b=m.members.instanceOpacity;this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,g.uniformOffset+g.stride*this.#iu,new g.View(this.modelMatrix)),this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,_.uniformOffset+_.stride*this.#iu,new _.View(this.normalModelMatrix)),this.#b.gpuDevice.queue.writeBuffer(i.gpuBuffer,b.uniformOffset+b.stride*this.#iu,new b.View([this.opacity]))}}}var ca="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include calcDisplacements;\nstruct InstanceUniforms { instanceGroupModelMatrix:mat4x4<f32>, instanceModelMatrixs:array<mat4x4<f32>,100000>, instanceNormalModelMatrix:array<mat4x4<f32>,100000>, instanceOpacity:array<f32,100000>, useDisplacementTexture:u32, displacementScale:f32,\n};\n@group(1) @binding(0) var<storage,read> instanceUniforms:InstanceUniforms;\n@group(1) @binding(1) var displacementTextureSampler:sampler;\n@group(1) @binding(2) var displacementTexture:texture_2d<f32>;\nstruct InputData { @builtin(instance_index) instanceIdx:u32, @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) instanceOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\nconst maxDistance:f32=1000.0;\nconst maxMipLevel:f32=10.0;\n@vertex\nfn main( inputData:InputData ) -> OutputData { var output:OutputData; let input_instanceIdx:u32=inputData.instanceIdx; let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx]; let u_normalModelMatrix=instanceUniforms.instanceNormalModelMatrix[input_instanceIdx]; let u_instanceGroupModelMatrix=instanceUniforms.instanceGroupModelMatrix; let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u; let u_displacementScale=instanceUniforms.displacementScale; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>=u_modelMatrix * vec4<f32>(input_position,1.0); let worldPosition=position.xyz; let margin:f32=0.5; var clipPosition:vec4<f32>=u_projectionMatrix * u_cameraMatrix * vec4<f32>(worldPosition,1.0); let ndcPosition:vec3<f32>=clipPosition.xyz/clipPosition.w;\noutput.position=clipPosition; var normalPosition:vec3<f32>=(u_instanceGroupModelMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0)).xyz;; if (u_useDisplacementTexture) { let distance=distance(position.xyz,u_cameraPosition); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } output.position=u_projectionMatrix * u_cameraMatrix * u_instanceGroupModelMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition; output.uv=input_uv; output.instanceOpacity=instanceUniforms.instanceOpacity[input_instanceIdx]; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth( inputData:InputData ) -> OutputShadowData { var output:OutputShadowData; let input_instanceIdx:u32=inputData.instanceIdx; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_modelMatrix=instanceUniforms.instanceModelMatrixs[input_instanceIdx]; let u_useDisplacementTexture=instanceUniforms.useDisplacementTexture==1u; let u_displacementScale=instanceUniforms.displacementScale; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); if (u_useDisplacementTexture) { let distance=distance(position.xyz,u_directionalLightProjectionViewMatrix[3].xyz); let mipLevel=(distance/maxDistance) * maxMipLevel; let displacedPosition=calcDisplacementPosition(input_position,input_vertexNormal,displacementTexture,displacementTextureSampler,u_displacementScale,input_uv,mipLevel); position=u_modelMatrix * vec4<f32>(displacedPosition,1.0); } output.position=u_directionalLightProjectionViewMatrix * position; return output;\n}\n";const ha="VERTEX_BIND_GROUP_DESCRIPTOR_INSTANCING";class InstancingMesh extends Mesh{#b;#ou=1;#uu=[];constructor(i,m,g,_){super(i,g,_),this.#b=i,this.gpuRenderInfo=new VertexGPURenderInfo(null,null,null,null,null,null,null,null),this.instanceCount=m,this.#lu(i)}get instanceCount(){return this.#ou}set instanceCount(i){validateUintRange(i),this.gpuRenderInfo.vertexUniformInfo=parseWGSL(ca).storage.instanceUniforms;const m=new ArrayBuffer(this.gpuRenderInfo.vertexUniformInfo.arrayBufferByteLength),g=new StorageBuffer(this.#b,m,this.name),_=this.gpuRenderInfo.vertexUniformBuffer;_?.gpuBuffer&&copyGPUBuffer(this.#b.gpuDevice,_.gpuBuffer,g.gpuBuffer),_?.destroy(),this.gpuRenderInfo.vertexUniformBuffer=g;let b=i;for(;b--;)this.#uu[b]||(this.#uu[b]=new InstancingMeshObject3D(this.#b,b,this));this.#ou=i,this.#lu(this.#b)}get instanceChildren(){return this.#uu}render(i,m=!1){const{view:g,currentRenderPassEncoder:_}=i,{scene:b}=g,{shadowManager:y}=b,{directionalShadowManager:T}=y,{castingList:w}=T,P=this.parent;let $=this.dirtyTransform;$&&(identity$2(this.localMatrix),translate$1(this.localMatrix,this.localMatrix,[this.x,this.y,this.z]),rotateX$3(this.localMatrix,this.localMatrix,this.rotationX),rotateY$3(this.localMatrix,this.localMatrix,this.rotationY),rotateZ$3(this.localMatrix,this.localMatrix,this.rotationZ),scale$5(this.localMatrix,this.localMatrix,[this.scaleX,this.scaleY,this.scaleZ]),P?.modelMatrix?multiply$5(this.modelMatrix,this.localMatrix,P.modelMatrix):this.modelMatrix=clone$5(this.localMatrix)),this.geometry?i.num3DObjects++:i.num3DGroups++;const H=this.#b;if(this.geometry){const{antialiasingManager:g,gpuDevice:b}=H;g.changedMSAA&&(this.dirtyPipeline=!0),this.gpuRenderInfo||this.#lu(H);const y=this.dirtyPipeline||this.material.dirtyPipeline,{displacementTexture:T,displacementScale:w}=this.material||{};y&&(this.dirtyTransform=!0,this.material.dirtyPipeline&&this.material._updateFragmentState(),this.#cu(),this.material.dirtyPipeline=!1,this.dirtyPipeline=!1,i.numDirtyPipelines++);const{gpuRenderInfo:P}=this,{vertexUniformBuffer:$,vertexUniformBindGroup:q,vertexUniformInfo:W,pipeline:ye,shadowPipeline:Ge}=P;void 0!==W.members.displacementScale&&b.queue.writeBuffer($.gpuBuffer,W.members.displacementScale.uniformOffset,new W.members.displacementScale.View([w])),void 0!==W.members.useDisplacementTexture&&b.queue.writeBuffer($.gpuBuffer,W.members.useDisplacementTexture.uniformOffset,new W.members.useDisplacementTexture.View([T?1:0])),this.dirtyTransform&&b.queue.writeBuffer($.gpuBuffer,W.members.instanceGroupModelMatrix.uniformOffset,new W.members.instanceGroupModelMatrix.View(this.modelMatrix)),this.dirtyTransform=!1,_.setPipeline(m?Ge:ye);const{gpuBuffer:Ke}=this.geometry.vertexBuffer,{fragmentUniformBindGroup:Xe}=this.material.gpuRenderInfo;if(i.prevVertexGpuBuffer!==Ke&&(_.setVertexBuffer(0,Ke),i.prevVertexGpuBuffer=Ke),_.setBindGroup(1,q),_.setBindGroup(2,Xe),i.numDrawCalls++,i.numInstances++,this.geometry.indexBuffer){const{indexBuffer:m}=this.geometry,{indexNum:g,triangleCount:b,gpuBuffer:y}=m;_.setIndexBuffer(y,"uint32"),_.drawIndexed(g,this.#ou,0,0,0),i.numTriangles+=b*this.#ou,i.numPoints+=g*this.#ou}else{const{vertexBuffer:m}=this.geometry,{vertexCount:g,triangleCount:b}=m;_.draw(g,this.#ou,0,0),i.numTriangles+=b,i.numPoints+=g}}this.castShadow&&(w[w.length]=this);const{children:q}=this;let W=q.length;for(;W--;)q[W].dirtyTransform=$,q[W].render(i);this.dirtyTransform=!1}#lu(i){this.dirtyPipeline=!0;const{resourceManager:m}=this.#b,g=m.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),{basicSampler:_,emptyBitmapTextureView:b,emptyCubeTextureView:y}=m,{gpuSampler:T}=_,{vertexUniformBuffer:w}=this.gpuRenderInfo,{material:P}=this,$={layout:g,label:ha,entries:[{binding:0,resource:{buffer:w.gpuBuffer,offset:0,size:w.size}},{binding:1,resource:P?.displacementTextureSampler?.gpuSampler||T},{binding:2,resource:m.getGPUResourceBitmapTextureView(P?.displacementTexture)||b}]},H=i.gpuDevice.createBindGroup($);this.#cu(),this.gpuRenderInfo.vertexBindGroupLayout=g,this.gpuRenderInfo.vertexUniformBindGroup=H}#cu(){const{resourceManager:i}=this.#b,m={code:ca},g=i.createGPUShaderModule("VERTEX_MODULE_INSTANCING",m),{vertexUniformBuffer:_}=this.gpuRenderInfo,{material:b}=this,{basicSampler:y,emptyBitmapTextureView:T,emptyCubeTextureView:w}=i,{gpuSampler:P}=y,$=i.getGPUBindGroupLayout(ResourceManager.PRESET_VERTEX_GPUBindGroupLayout_Instancing),H={layout:$,label:ha,entries:[{binding:0,resource:{buffer:_.gpuBuffer,offset:0,size:_.size}},{binding:1,resource:b?.displacementTextureSampler?.gpuSampler||P},{binding:2,resource:i.getGPUResourceBitmapTextureView(b?.displacementTexture)||T}]};this.gpuRenderInfo.vertexUniformBindGroup=this.redGPUContext.gpuDevice.createBindGroup(H),this.gpuRenderInfo.vertexShaderModule=g,this.gpuRenderInfo.pipeline=createBasePipeline(this,g,$),this.gpuRenderInfo.shadowPipeline=createBasePipeline(this,g,$,mi)}}Object.defineProperty(InstancingMesh.prototype,"meshType",{value:"instanceMesh",writable:!1});class HDRLoader{#hu=!0;constructor(i=!0){this.#hu=i}get enableDebugLogs(){return this.#hu}set enableDebugLogs(i){this.#hu=i}async loadHDRFile(i){this.#hu&&$n(`HDR 파일 로딩 시작:${i}`);const m=await fetch(i);if(!m.ok)throw new Error(`HTTP ${m.status}:${m.statusText}`);const g=await m.arrayBuffer(),_=new Uint8Array(g),b=this.#fu(_,i);return this.#du(b)}#du(i){this.#hu&&$n("HDR 데이터 분석 시작 (원본 데이터 보존)...");const m=this.#mu(i),g=this.#pu(m);return this.#hu&&$n(`권장 노출값 계산:${g.toFixed(3)} (원본 데이터는 보존)`),{...i,recommendedExposure:g,luminanceStats:m}}#mu(i){let m=1/0,g=0,_=0;const b=i.width*i.height;for(let b=0;b<i.data.length;b+=4){const y=.2126*i.data[b]+.7152*i.data[b+1]+.0722*i.data[b+2];m=Math.min(m,y),g=Math.max(g,y),_+=y}return{min:Math.max(.001,m),max:g,average:Math.max(.001,_/b),median:Math.max(.001,_/b)}}#pu(i){const{average:m,median:g,max:_}=i;let b=.18;m<.01?b=.5:m<.05?b=.36:m>2?b=.09:m>.8&&(b=.12);let y=b/Math.max(Math.pow(m*g,.5),.001);const T=_/Math.max(i.min,.001);m<.05?y*=2.5:m<.1&&(y*=1.8),T>1e3?y*=.8:T>100&&(y*=.9),_>10?y*=.5:_>5?y*=.7:_>2&&(y*=.85);const w=g/m;return w<.3?y*=.8:w>1.5&&(y*=1.2),y=Math.max(1,Math.min(15,y)),y}#fu(i,m){const g=this.#gu(i);if(this.#hu&&$n(`파일 형식:${g.format}`),!g.isValid)throw new Error(g.error||"지원되지 않는 파일 형식입니다");if(m.toLowerCase().endsWith(".hdr")){this.#hu&&this.#xu(i.slice(0,200));const m=this.#_u(i);return this.#hu&&this.#vu(m),m}throw m.toLowerCase().endsWith(".exr")?new Error("EXR format not supported yet"):new Error(`Unsupported HDR format:${m}`)}#_u(i){let m=0,g="";const _={};for(;m<i.length;){const _=String.fromCharCode(i[m++]);if("\n"===_)break;g+=_}if(!g.startsWith("#?RADIANCE")&&!g.startsWith("#?RGBE"))throw new Error("Invalid HDR file header");for(;m<i.length;){for(g="";m<i.length;){const _=String.fromCharCode(i[m++]);if("\n"===_)break;g+=_}if(""===g.trim())break;const b=g.indexOf("=");if(b>0){const i=g.substring(0,b).trim(),m=g.substring(b+1).trim();_[i]=m}}for(g="";m<i.length;){const _=String.fromCharCode(i[m++]);if("\n"===_)break;g+=_}const b=g.match(/-Y\s+(\d+)\s+\+X\s+(\d+)/);if(!b)throw new Error("Invalid resolution format in HDR file");const y=parseInt(b[1]),T=parseInt(b[2]);let w;_.EXPOSURE&&(w=parseFloat(_.EXPOSURE),this.#hu&&$n(`파일 노출값:${w.toFixed(3)}`));const P=new Float32Array(T*y*4);let $=0;for(let g=0;g<y;g++){const g=this.#bu(i,m,T);m=g.nextOffset;for(let i=0;i<T;i++){const m=4*i,_=g.data[m],b=g.data[m+1],y=g.data[m+2],T=g.data[m+3];if(0===T)P[$++]=0,P[$++]=0,P[$++]=0,P[$++]=1;else{const i=Math.pow(2,T-128-8);P[$++]=_*i,P[$++]=b*i,P[$++]=y*i,P[$++]=1}}}return{data:P,width:T,height:y,exposure:w}}#gu(i){if(i.length<50)return{isValid:!1,format:"unknown",error:"파일이 너무 작습니다"};const m=new TextDecoder("ascii",{fatal:!1}).decode(i.slice(0,50));return m.startsWith("#?RADIANCE")||m.startsWith("#?RGBE")?{isValid:!0,format:"RGBE/Radiance"}:m.includes("RADIANCE")||m.includes("RGBE")?{isValid:!0,format:"RGBE/Radiance (variant)"}:{isValid:!1,format:"unknown",error:"지원되지 않는 HDR 형식입니다"}}#bu(i,m,g){const _=new Uint8Array(4*g);if(2===i[m]&&2===i[m+1]&&i[m+2]===(g>>8&255)&&i[m+3]===(255&g)){m+=4;for(let b=0;b<4;b++){let y=b;for(;y<4*g;){const b=i[m++];if(b>128){const T=b-128,w=i[m++];for(let i=0;i<T&&y<4*g;i++)_[y]=w,y+=4}else{const T=b;for(let b=0;b<T&&y<4*g;b++)_[y]=i[m++],y+=4}}}}else for(let b=0;b<4*g;b++)_[b]=i[m++];return{data:_,nextOffset:m}}#vu(i){if(this.#hu){$n("HDR 정보:"),$n(`크기:${i.width} x ${i.height}`),$n(`데이터 길이:${i.data.length}`),$n("예상 픽셀 수:"+i.width*i.height*4);for(let m=0;m<Math.min(16,i.data.length);m+=4)i.data[m],i.data[m+1],i.data[m+2],i.data[m+3]}}#xu(i){if(this.#hu)for(let m=0;m<i.length;m+=16)Array.from(i.slice(m,m+16)).map(i=>i.toString(16).padStart(2,"0")).join(" "),Array.from(i.slice(m,m+16)).map(i=>i>=32&&i<=126?String.fromCharCode(i):".").join("")}}async function float32ToUint8WithToneMapping(i,m,g){const _=performance.now(),{gpuDevice:b}=i,{exposure:y,width:T,height:w,workgroupSize:P=[8,8]}=g,$=m.length/4,H=function(i){return` struct Constants { exposure:f32, width:u32, height:u32, }  @group(0) @binding(0) var<storage,read> inputData:array<f32>; @group(0) @binding(1) var<storage,read_write> outputData:array<u32>; @group(0) @binding(2) var<uniform> constants:Constants;  /* ACES 톤매핑 함수 */ fn acesToneMapping(x:f32) -> f32 { let a=2.51; let b=0.03; let c=2.43; let d=0.59; let e=0.14; return max(0.0,(x * (a * x + b))/(x * (c * x + d) + e)); }  /* Linear → sRGB 감마 보정 */ fn linearToSRGB(linearValue:f32) -> f32 { if (linearValue <=0.0031308) { return 12.92 * linearValue; } else { return 1.055 * pow(linearValue,1.0/2.4) - 0.055; } }  @compute @workgroup_size(${i[0]},${i[1]}) fn main(@builtin(global_invocation_id) global_id:vec3<u32>) { let x=global_id.x; let y=global_id.y;  /* 범위 체크 */ if (x >=constants.width || y >=constants.height) { return; }  let pixelIndex=y * constants.width + x; let baseIndex=pixelIndex * 4u;  /* RGBA 각 채널 처리 */ var processedPixel=0u;  for (var channel=0u;channel < 4u;channel++) { let inputIndex=baseIndex + channel; let originalVal=inputData[inputIndex];  /* 노출값 적용 */ let exposedVal=originalVal * constants.exposure;  /* 🎬 ACES 톤매핑 적용 */ let toneMappedVal=acesToneMapping(exposedVal);  /* 🔧 감마 보정 적용 (sRGB) */ let gammaCorrectedVal=linearToSRGB(toneMappedVal);  /* 최종 8bit 변환 */ let uint8Val=u32(round(clamp(gammaCorrectedVal,0.0,1.0) * 255.0));  /* 🔧 4개 채널을 하나의 u32에 패킹 */ processedPixel |=(uint8Val << (channel * 8u)); }  outputData[pixelIndex]=processedPixel; } `}(P);try{const i=b.createShaderModule({code:H,label:"hdr_tonemapping_shader"}),g=function(i,m,g){const _=i.createBuffer({size:m.byteLength,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_DST,label:"hdr_input_float32_buffer"}),b=i.createBuffer({size:4*g,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC,label:"hdr_output_uint8_buffer"}),y=i.createBuffer({size:12,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:"hdr_constants_buffer"}),T=i.createBuffer({size:4*g,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ,label:"hdr_read_buffer"});return i.queue.writeBuffer(_,0,m),{inputBuffer:_,outputBuffer:b,constantsBuffer:y,readBuffer:T}}(b,m,$);!function(i,m,g,_,b){const y=new ArrayBuffer(12),T=new DataView(y);T.setFloat32(0,g,!0),T.setUint32(4,_,!0),T.setUint32(8,b,!0),i.queue.writeBuffer(m,0,y)}(b,g.constantsBuffer,y,T,w);const{computePipeline:q,bindGroup:W}=function(i,m,g){const _=i.createComputePipeline({layout:"auto",compute:{module:m,entryPoint:"main"},label:"hdr_tonemapping_pipeline"}),b=i.createBindGroup({layout:_.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g.inputBuffer}},{binding:1,resource:{buffer:g.outputBuffer}},{binding:2,resource:{buffer:g.constantsBuffer}}],label:"hdr_tonemapping_bindgroup"});return{computePipeline:_,bindGroup:b}}(b,i,g),ye=await async function(i,m,g,_,b,y,T,w,P){const $=i.createCommandEncoder({label:"hdr_tonemapping_encoder"}),H=$.beginComputePass({label:"hdr_tonemapping_pass"});H.setPipeline(m),H.setBindGroup(0,g);const q=Math.ceil(y/w[0]),W=Math.ceil(T/w[1]);if(q>65535||W>65535)throw new Error(`이미지가 너무 큽니다. 최대 크기:${65535*w[0]} × ${65535*w[1]}`);H.dispatchWorkgroups(q,W),H.end(),$.copyBufferToBuffer(_,0,b,0,4*P),i.queue.submit([$.finish()]),await b.mapAsync(GPUMapMode.READ);const ye=new Uint32Array(b.getMappedRange()),Ge=ye.byteLength>0?new Uint8Array(ye.buffer.slice(ye.byteOffset,ye.byteOffset+ye.byteLength)):new Uint8Array(4);return b.unmap(),Ge}(b,q,W,g.outputBuffer,g.readBuffer,T,w,P,$);!function(i){i.inputBuffer.destroy(),i.outputBuffer.destroy(),i.constantsBuffer.destroy(),i.readBuffer.destroy()}(g);return{data:ye,processedPixels:$,executionTime:performance.now()-_}}catch(i){throw console.error("톤매핑 처리 실패:",i),i}}class HDRTexture extends ManagedResourceBase{#_e;#bt;#yt;#Tt;#St;#yu;#Mt=0;#Tu=1024;#Su=new HDRLoader;#Ct;#wu=1;#Mu=1;#Ru;#Pt;#Et;#Cu=!1;#Pu=null;constructor(i,m,g,_,b=1024,y=!0){if(super(i,"managedHDRTextureState"),this.#Pt=g,this.#Et=_,this.#Ct="rgba8unorm",this.#Tu=b,this.useMipmap=y,m){this.#Eu(m),this.#bt=m,this.#yt=this.uuid;const{table:i}=this.targetResourceManagedState;let g;for(const m in i)if(i[m].cacheKey===this.#yt){g=i[m];break}if(g){const m=i[g.uuid].texture;return this.#Pt?.(m),m}this.src=m,this.#It()}}get cacheKey(){return this.#yt}get videoMemorySize(){return this.#Mt}get gpuTexture(){return this.#_e}get mipLevelCount(){return this.#Tt}get src(){return this.#bt}set src(i){const m=i?.src||i;this.#Eu(m),this.#bt=m,this.#yt=i?.cacheKey||m||this.uuid,this.#Cu=!1,this.#bt&&this.#Iu(this.#bt)}get useMipmap(){return this.#St}set useMipmap(i){this.#St!==i&&(this.#St=i,this.#Tt=this.#St?getMipLevelCount(this.#Tu,this.#Tu):1,this.#Cu=!1,this.#Lt())}get exposure(){return this.#wu}set exposure(i){const m=Math.max(.01,Math.min(20,i));this.#wu!==m&&(this.#wu=m,this.#Pu&&clearTimeout(this.#Pu),this.#Pu=setTimeout(()=>{this.#yu&&(this.#Cu&&this.#_e?this.#Bu():this.#Lt()),this.#Pu=null},50))}get recommendedExposure(){return this.#Mu}get luminanceAnalysis(){return this.#Ru}get viewDescriptor(){return{...CubeTexture.defaultViewDescriptor,mipLevelCount:this.#Tt}}static isSupportedFormat(i){return!(!i||"string"!=typeof i)&&i.toLowerCase().endsWith(".hdr")}static getSupportedFormats(){return[".hdr"]}resetToRecommendedExposure(){this.exposure=this.#Mu}destroy(){const i=this.#_e;this.#Dt(null),this.#Cu=!1,this.__fireListenerList(!0),this.#bt=null,this.#yt=null,this.#Ru=null,this.#Ut(),i&&i.destroy()}#Eu(i){if(!i||"string"!=typeof i)throw new Error("HDR 파일 경로가 필요합니다");if(!i.toLowerCase().endsWith(".hdr"))throw new Error(`지원되지 않는 형식입니다. .hdr 형식만 지원됩니다. 입력된 파일:${i}`)}async#Iu(i){try{const m=await this.#Su.loadHDRFile(i);this.#yu=m,this.#Mu=m.recommendedExposure||1,this.#wu=this.#Mu,m.luminanceStats&&(this.#Ru={averageLuminance:m.luminanceStats.average,maxLuminance:m.luminanceStats.max,minLuminance:m.luminanceStats.min,medianLuminance:m.luminanceStats.median,percentile95:.95*m.luminanceStats.max,percentile99:.99*m.luminanceStats.max,recommendedExposure:this.#Mu},$n("휘도 분석 완료:",this.#Ru)),$n(`HDR 데이터 로드 완료:${m.width}x${m.height},권장 노출:${this.#Mu.toFixed(3)},현재 노출:${this.#wu.toFixed(3)}`),await this.#Lt(),this.#Pt?.(this)}catch(i){console.error("HDR loading error (.hdr 형식):",i),this.#Et?.(i)}}#Dt(i){this.#_e=i,i||(this.#yu=null,this.#Cu=!1),this.__fireListenerList()}#It(){basicRegisterResource(this,new ResourceStateBitmapTexture(this))}#Ut(){basicUnregisterResource(this)}async#Lt(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext;if(this.#Cu&&this.#_e)return void await this.#Bu();await i.queue.onSubmittedWorkDone();const g=this.#_e;this.#_e=null,this.targetResourceManagedState.videoMemory-=this.#Mt,this.#Mt=0;const _={size:[this.#Tu,this.#Tu,6],format:this.#Ct,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#Tt,dimension:"2d",label:`${this.#bt}_cubemap_exp${this.#wu.toFixed(2)}`},b=i.createTexture(_);this.#Dt(b),this.#Tt=_.mipLevelCount||1,this.#Mt=calculateTextureByteSize(_),this.targetResourceManagedState.videoMemory+=this.#Mt,await this.#Bu(),this.#Cu=!0,g&&(await i.queue.onSubmittedWorkDone(),g.destroy())}async#Bu(){const{gpuDevice:i,resourceManager:m}=this.redGPUContext,{mipmapGenerator:g}=m;if(!this.#_e)return void console.warn("큐브맵 텍스처가 없어 업데이트를 건너뜁니다.");if(!this.#yu)return void console.warn("HDR 데이터가 없어 업데이트를 건너뜁니다.");const{width:_,height:b}=this.#yu,y={size:[_,b],format:this.#Ct,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,label:`${this.#bt}_temp_exp${this.#wu.toFixed(2)}`},T=await this.#Lu(i,this.#yu,y);await this.#Du(T),T.destroy(),this.#St&&g.generateMipmap(this.#_e,{size:[this.#Tu,this.#Tu,6],format:this.#Ct,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_DST,mipLevelCount:this.#Tt,dimension:"2d"})}async#Du(i){const{gpuDevice:m,resourceManager:g}=this.redGPUContext,_=m.createShaderModule({code:"struct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0), vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0) ); var texCoord=array<vec2<f32>,6>( vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0), vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0) ); var output:VertexOutput; output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); output.texCoord=texCoord[vertexIndex]; return output;\n}\n@group(0) @binding(0) var equirectangularTexture:texture_2d<f32>;\n@group(0) @binding(1) var textureSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> { let ndc=vec2<f32>( input.texCoord.x * 2.0 - 1.0, (1.0 - input.texCoord.y) * 2.0 - 1.0 ); var localDirection=vec3<f32>(ndc.x,ndc.y,1.0); let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz); let theta=atan2(worldDirection.z,worldDirection.x); let phi=acos(clamp(worldDirection.y,-1.0,1.0)); var u=(theta + 3.14159265359)/(2.0 * 3.14159265359); var v=phi/3.14159265359; u=fract(u + 1.0); v=clamp(v,0.0001,0.9999); let color=textureSample(equirectangularTexture,textureSampler,vec2<f32>(u,v)); return color;\n}\n"}),b=m.createRenderPipeline({layout:"auto",vertex:{module:_,entryPoint:"vs_main"},fragment:{module:_,entryPoint:"fs_main",targets:[{format:this.#Ct}]}}),y=new Sampler(this.redGPUContext,{magFilter:Vr.LINEAR,minFilter:Vr.LINEAR,mipmapFilter:$r.LINEAR,addressModeU:Fr.CLAMP_TO_EDGE,addressModeV:Fr.CLAMP_TO_EDGE,addressModeW:Fr.CLAMP_TO_EDGE}),T=this.#Uu();for(let m=0;m<6;m++)await this.#Au(b,y,m,T[m],i)}async#Lu(i,m,g){const _=i.createTexture(g);let b,y;if("rgba8unorm"!==this.#Ct)throw new Error(`지원되지 않는 텍스처 포맷:${this.#Ct}`);b=4;y=(await this.#ku(m.data)).buffer;return i.queue.writeTexture({texture:_},y,{bytesPerRow:m.width*b,rowsPerImage:m.height},{width:m.width,height:m.height}),_}async#ku(i){return(await float32ToUint8WithToneMapping(this.redGPUContext,i,{exposure:this.#wu,width:this.#yu.width,height:this.#yu.height,workgroupSize:[8,8]})).data}#Uu(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}async#Au(i,m,g,_,b){const{gpuDevice:y}=this.redGPUContext,T=y.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`hdr_face_${g}_uniform`});y.queue.writeBuffer(T,0,_);const w=y.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:b.createView()},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:T}}]}),P=y.createCommandEncoder(),$=P.beginRenderPass({colorAttachments:[{view:this.#_e.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:0},loadOp:"clear",storeOp:"store"}]});$.setPipeline(i),$.setBindGroup(0,w),$.draw(6,1,0,0),$.end(),y.queue.submit([P.finish()]),T.destroy()}}Object.freeze(HDRTexture);var fa="#redgpu_include SYSTEM_UNIFORM;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec4<f32>,\n};\nstruct VertexUniforms { modelMatrix:mat4x4<f32>,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\n@vertex\nfn main(inputData:InputData) -> OutData { var outData:OutData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; outData.position=u_projectionMatrix * u_cameraMatrix * vertexUniforms.modelMatrix * vec4<f32>(inputData.position,1.0); outData.vertexPosition=0.5 * (vec4<f32>(inputData.position,1.0) + vec4<f32>(1.0,1.0,1.0,1.0)); return outData;\n}\n";const da=parseWGSL("struct Uniforms { opacity:f32, blur:f32, transitionProgress:f32,\n};\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@group(2) @binding(1) var skyboxTextureSampler:sampler;\n@group(2) @binding(2) var skyboxTexture:texture_cube<f32>;\n@group(2) @binding(3) var transitionTexture:texture_cube<f32>;\n@group(2) @binding(4) var transitionAlphaTexture:texture_2d<f32>;\nstruct InputData { @location(0) vertexPosition:vec4<f32>,\n};\nfn sphericalToUV(dir:vec3<f32>) -> vec2<f32> { let normalizedDir=normalize(dir); let phi=atan2(normalizedDir.z,normalizedDir.x); let theta=acos(clamp(normalizedDir.y,-1.0,1.0)); let u=(phi + 3.14159265359)/(2.0 * 3.14159265359); let v=theta/3.14159265359; return vec2<f32>(u,v);\n}\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> { var cubemapVec=inputData.vertexPosition.xyz - vec3<f32>(0.5); let mipmapCount:f32=f32(textureNumLevels(skyboxTexture) - 1); let blurCurve=uniforms.blur * uniforms.blur; let skyboxColor=textureSampleLevel(skyboxTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve); var sampleColor=skyboxColor; let u_transitionProgress=uniforms.transitionProgress; if (u_transitionProgress > 0.0) { let transitionSample=textureSampleLevel(transitionTexture,skyboxTextureSampler,cubemapVec,mipmapCount * blurCurve); #redgpu_if transitionTexture let uv=sphericalToUV(normalize(cubemapVec)); let transitionAlphaSample=textureSampleLevel(transitionAlphaTexture,skyboxTextureSampler,uv,0.0); let transitionAlphaValue=dot(transitionAlphaSample.rgb,vec3<f32>(0.299,0.587,0.114)); let threshold=u_transitionProgress; let noiseInfluence=0.3; let edgeSoftness=0.1; let maskValue=smoothstep( threshold - edgeSoftness, threshold + edgeSoftness, transitionAlphaValue + (u_transitionProgress - 0.5) * noiseInfluence ); sampleColor=mix(transitionSample,skyboxColor,maskValue * (1.0 - u_transitionProgress)); #redgpu_else sampleColor=mix(skyboxColor,transitionSample,u_transitionProgress); #redgpu_endIf } var outColor=vec4<f32>(sampleColor.rgb,sampleColor.a * uniforms.opacity); if (outColor.a==0.0) { discard; } return outColor;\n}\n");class SkyBoxMaterial extends ABitmapBaseMaterial{dirtyPipeline=!1;constructor(i,m){super(i,"SKYBOX_MATERIAL",da,2),this.skyboxTexture=m,this.skyboxTextureSampler=new Sampler(this.redGPUContext,{addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",addressModeW:"clamp-to-edge"}),this.initGPURenderInfos()}}tr.definePositiveNumber(SkyBoxMaterial,[["blur",0]]),tr.definePositiveNumber(SkyBoxMaterial,[["transitionProgress",0]]),tr.defineCubeTexture(SkyBoxMaterial,["transitionTexture"]),tr.defineTexture(SkyBoxMaterial,["transitionAlphaTexture"]),tr.defineCubeTexture(SkyBoxMaterial,["skyboxTexture"]),tr.defineSampler(SkyBoxMaterial,["skyboxTextureSampler"]),Object.freeze(SkyBoxMaterial);const ma=parseWGSL(fa),pa=ma.uniforms.vertexUniforms;class View2D extends View3D{constructor(i,m,g){super(i,m,new Camera2D,g)}}Object.freeze(View2D);const ga=Math.PI/180;class GroupBase extends Object3DContainer{modelMatrix=create$5();localMatrix=create$5();#e;#a;#Qn;#n=0;#i=0;#r=0;#er=[0,0,0];#tr=0;#nr=0;#rr=0;#ar=1;#sr=1;#or=1;#ur=[1,1,1];#o=0;#u=0;#l=0;#lr=[0,0,0];#Ou=!0;constructor(i){super(),i&&(this.name=i)}get dirtyTransform(){return this.#Ou}set dirtyTransform(i){this.#Ou=i}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get parent(){return this.#Qn}set parent(i){this.#Qn=i}get pivotX(){return this.#tr}set pivotX(i){this.#tr=i,this.dirtyTransform=!0}get pivotY(){return this.#nr}set pivotY(i){this.#nr=i,this.dirtyTransform=!0}get pivotZ(){return this.#rr}set pivotZ(i){this.#rr=i,this.dirtyTransform=!0}get x(){return this.#n}set x(i){this.#n=this.#er[0]=i,this.dirtyTransform=!0}get y(){return this.#r}set y(i){this.#r=this.#er[1]=i,this.dirtyTransform=!0}get z(){return this.#i}set z(i){this.#i=this.#er[2]=i,this.dirtyTransform=!0}get position(){return this.#er}get scaleX(){return this.#ar}set scaleX(i){this.#ar=this.#ur[0]=i,this.dirtyTransform=!0}get scaleY(){return this.#sr}set scaleY(i){this.#sr=this.#ur[1]=i,this.dirtyTransform=!0}get scaleZ(){return this.#or}set scaleZ(i){this.#or=this.#ur[2]=i,this.dirtyTransform=!0}get scale(){return this.#er}get rotationX(){return this.#o}set rotationX(i){this.#o=this.#lr[0]=i,this.dirtyTransform=!0}get rotationY(){return this.#u}set rotationY(i){this.#u=this.#lr[1]=i,this.dirtyTransform=!0}get rotationZ(){return this.#l}set rotationZ(i){this.#l=this.#lr[2]=i,this.dirtyTransform=!0}get rotation(){return this.#lr}setScale(i,m,g){m=m??i,g=g??i;const _=this.#ur;this.#ar=_[0]=i,this.#sr=_[1]=m,this.#or=_[2]=g,this.dirtyTransform=!0}setPosition(i,m,g){m=m??i,g=g??i;const _=this.#er;this.#n=_[0]=i,this.#r=_[1]=m,this.#i=_[2]=g,this.dirtyTransform=!0}setRotation(i,m,g){m=m??i,g=g??i;const _=this.#lr;this.#o=_[0]=i,this.#u=_[1]=m,this.#l=_[2]=g,this.dirtyTransform=!0}render(i){const{view:m,isScene2DMode:g}=i;let _;if(g&&(this.#i=0,this.#rr=0),this.dirtyTransform){_=!0;{const{pixelRectObject:i}=m,g=this.parent,_=this.localMatrix;identity$2(_),translate$1(_,_,[this.#n,this.#r,this.#i]),rotateX$3(_,_,this.#o*ga),rotateY$3(_,_,this.#u*ga),rotateZ$3(_,_,this.#l*ga);let b=[this.#ar,this.#sr,this.#or];if(this.renderTextureWidth&&(b[0]*=this.renderTextureWidth/i.height,b[1]*=this.renderTextureHeight/i.height),scale$5(_,_,b),this.#tr||this.#nr||this.#rr){translate$1(_,_,[-this.#tr,-this.#nr,-this.#rr])}g?.modelMatrix?multiply$5(this.modelMatrix,g.modelMatrix,this.localMatrix):copy$5(this.modelMatrix,this.localMatrix)}}this.dirtyTransform&&(_=!0,this.dirtyTransform=!1),i.num3DGroups++;const{children:b}=this;let y=0;const T=b.length;for(;y<T;y++)_&&(b[y].dirtyTransform=_),b[y].render(i)}}Object.defineProperty(GroupBase.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(GroupBase);class Group2D extends GroupBase{#e;#a;#Nu=0;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}get rotation(){return this.#Nu}set rotation(i){this.#Nu=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}}Object.defineProperty(Group2D.prototype,"is2DMeshType",{value:!0,writable:!1}),Object.freeze(Group2D);class Group3D extends GroupBase{#e;#a;constructor(i){super(),i&&(this.name=i)}get name(){return this.#e||(this.#e=InstanceIdGenerator.getNextId(this.constructor)),this.#a||`${this.constructor.name} Instance ${this.#e}`}set name(i){this.#a=i}}Object.defineProperty(Group3D.prototype,"meshType",{value:"mesh",writable:!1}),Object.freeze(Group3D);const xa={Linear:0,QuintIn:1,QuintOut:2,QuintInOut:3,BackIn:4,BackOut:5,BackInOut:6,CircIn:7,CircOut:8,CircInOut:9,CubicIn:10,CubicOut:11,CubicInOut:12,ExpoIn:13,ExpoOut:14,ExpoInOut:15,QuadIn:16,QuadOut:17,QuadInOut:18,QuartIn:19,QuartOut:20,QuartInOut:21,SineIn:22,SineOut:23,SineInOut:24,ElasticIn:25,ElasticOut:26,ElasticInOut:27};var _a="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) a_position:vec3<f32>, @location(1) a_normal:vec3<f32>, @location(2) a_uv:vec2<f32>, @location(3) position:vec3<f32>, @location(4) alpha:f32, @location(5) rotation:vec3<f32>, @location(6) scale:f32,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(14) receiveShadow:f32, @location(15) pickingId:vec4<f32>,\n};\nfn mat4_inverse(a:mat4x4<f32>) -> mat4x4<f32> { var a00:f32=a[0][0]; var a01:f32=a[0][1]; var a02:f32=a[0][2]; var a03:f32=a[0][3]; var a10:f32=a[1][0]; var a11:f32=a[1][1]; var a12:f32=a[1][2]; var a13:f32=a[1][3]; var a20:f32=a[2][0]; var a21:f32=a[2][1]; var a22:f32=a[2][2]; var a23:f32=a[2][3]; var a30:f32=a[3][0]; var a31:f32=a[3][1]; var a32:f32=a[3][2]; var a33:f32=a[3][3]; var b00:f32=a00*a11 - a01*a10; var b01:f32=a00*a12 - a02*a10; var b02:f32=a00*a13 - a03*a10; var b03:f32=a01*a12 - a02*a11; var b04:f32=a01*a13 - a03*a11; var b05:f32=a02*a13 - a03*a12; var b06:f32=a20*a31 - a21*a30; var b07:f32=a20*a32 - a22*a30; var b08:f32=a20*a33 - a23*a30; var b09:f32=a21*a32 - a22*a31; var b10:f32=a21*a33 - a23*a31; var b11:f32=a22*a33 - a23*a32; var det:f32=b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06; if (det !=0.0) { det=1.0/det; return mat4x4<f32>( (a11*b11 - a12*b10 + a13*b09) * det, (a02*b10 - a01*b11 - a03*b09) * det, (a31*b05 - a32*b04 + a33*b03) * det, (a22*b04 - a21*b05 - a23*b03) * det, (a12*b08 - a10*b11 - a13*b07) * det, (a00*b11 - a02*b08 + a03*b07) * det, (a32*b02 - a30*b05 - a33*b01) * det, (a20*b05 - a22*b02 + a23*b01) * det, (a10*b10 - a11*b08 + a13*b06) * det, (a01*b08 - a00*b10 - a03*b06) * det, (a30*b04 - a31*b02 + a33*b00) * det, (a21*b02 - a20*b04 - a23*b00) * det, (a11*b07 - a10*b09 - a12*b06) * det, (a00*b09 - a01*b07 + a02*b06) * det, (a31*b01 - a30*b03 - a32*b00) * det, (a20*b03 - a21*b01 + a22*b00) * det ); } return mat4x4<f32>( 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0, 0.0,0.0,0.0,0.0 );\n}\nfn rotationMTX(t:vec3<f32>)->mat4x4<f32>\n{ var s:f32=sin(t.x); var c:f32=cos(t.x); var m1=mat4x4<f32>(1,0,0,0, 0,c,-s,0, 0,s,c,0, 0,0,0,1); s=sin(t[1]);c=cos(t[1]); var m2=mat4x4<f32>(c,0,s,0, 0,1,0,0, -s,0,c,0, 0,0,0,1); s=sin(t[2]);c=cos(t[2]); var m3=mat4x4<f32>(c,-s,0,0, s,c,0,0, 0,0,1,0, 0,0,0,1); return m1 * m2 * m3;\n}\n@vertex\nfn main( inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective==1u; let u_useBillboard=vertexUniforms.useBillboard==1u; let input_position=inputData.position; var position:vec4<f32>; var normalPosition:vec4<f32>; var scaleMTX=mat4x4<f32>( inputData.scale,0,0,0, 0,inputData.scale,0,0, 0,0,inputData.scale,0, 0,0,0,1 ); var translateTX=mat4x4<f32>( 1,0,0,0, 0,1,0,0, 0,0,1,0, inputData.position.x,inputData.position.y,inputData.position.z,1 ); var temp:mat4x4<f32>; if(u_useBillboard){ var rotateMTX2=rotationMTX( vec3(0,0,inputData.rotation.z) ); temp=translateTX * rotateMTX2; position=rotateMTX2 * vec4<f32>(inputData.a_position,1); output.position=u_projectionMatrix * getBillboardMatrixNoScaleRatio( u_cameraMatrix,temp ) * scaleMTX * position; }else{ var rotateMTX=rotationMTX( inputData.rotation ); temp=translateTX * rotateMTX * scaleMTX; position=temp * vec4<f32>(inputData.a_position,1); output.position=u_projectionMatrix * u_cameraMatrix * position; } output.vertexPosition=position.xyz; output.vertexNormal=(transpose(mat4_inverse(temp) ) * vec4<f32>(inputData.a_normal,1.0)).xyz; output.uv=inputData.a_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n";const va=parseWGSL(_a),ba=va.uniforms.vertexUniforms;class ParticleEmitter extends Mesh{#Gu=1e3;#Fu=5e3;#Vu=0;#$u=0;#Hu=0;#zu=0;#qu=0;#Ku=0;#Wu=-5;#Xu=-5;#Yu=-5;#ju=5;#Zu=5;#Ju=5;#Qu=0;#el=0;#tl=1;#nl=1;#rl=0;#il=1;#al=0;#sl=0;#ol=-360;#ul=-360;#ll=-360;#cl=360;#hl=360;#fl=360;#dl=-360;#ml=-360;#pl=-360;#gl=360;#xl=360;#_l=360;#vl=xa.CubicOut;#bl=xa.CubicOut;#yl=xa.CubicOut;#Tl=xa.Linear;#Sl=xa.Linear;#wl=xa.CubicOut;#Ml=xa.CubicOut;#Rl=xa.CubicOut;#Cl;#Pl;#El;#Fi;#Il;#Bl=2e3;constructor(i){super(i),this.geometry=new Plane(i),this.material=new BitmapMaterial(i),this.ignoreFrustumCulling=!0,this.useBillboard=!0}get vertexStateBuffers(){return[{arrayStride:32,stepMode:"vertex",attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:12,format:"float32x3"},{shaderLocation:2,offset:24,format:"float32x2"}]},{arrayStride:48,stepMode:"instance",attributes:[{shaderLocation:3,offset:16,format:"float32x3"},{shaderLocation:4,offset:28,format:"float32"},{shaderLocation:5,offset:32,format:"float32x3"},{shaderLocation:6,offset:44,format:"float32"}]}]}get particleBuffers(){return this.#Pl}get particleNum(){return this.#Bl}set particleNum(i){this.#Bl=Math.max(Math.min(i,5e5),1),this.#Ll()}get minLife(){return this.#Gu}set minLife(i){this.#Gu=i}get maxLife(){return this.#Fu}set maxLife(i){this.#Fu=i}get minStartX(){return this.#Vu}set minStartX(i){this.#Vu=i}get minStartY(){return this.#$u}set minStartY(i){this.#$u=i}get minStartZ(){return this.#Hu}set minStartZ(i){this.#Hu=i}get maxStartX(){return this.#zu}set maxStartX(i){this.#zu=i}get maxStartY(){return this.#qu}set maxStartY(i){this.#qu=i}get maxStartZ(){return this.#Ku}set maxStartZ(i){this.#Ku=i}get minEndX(){return this.#Wu}set minEndX(i){this.#Wu=i}get minEndY(){return this.#Xu}set minEndY(i){this.#Xu=i}get minEndZ(){return this.#Yu}set minEndZ(i){this.#Yu=i}get maxEndX(){return this.#ju}set maxEndX(i){this.#ju=i}get maxEndY(){return this.#Zu}set maxEndY(i){this.#Zu=i}get maxEndZ(){return this.#Ju}set maxEndZ(i){this.#Ju=i}get minStartAlpha(){return this.#Qu}set minStartAlpha(i){this.#Qu=i}get maxStartAlpha(){return this.#el}set maxStartAlpha(i){this.#el=i}get minEndAlpha(){return this.#tl}set minEndAlpha(i){this.#tl=i}get maxEndAlpha(){return this.#nl}set maxEndAlpha(i){this.#nl=i}get minStartScale(){return this.#rl}set minStartScale(i){this.#rl=i}get maxStartScale(){return this.#il}set maxStartScale(i){this.#il=i}get minEndScale(){return this.#al}set minEndScale(i){this.#al=i}get maxEndScale(){return this.#sl}set maxEndScale(i){this.#sl=i}get minStartRotationX(){return this.#ol}set minStartRotationX(i){this.#ol=i}get minStartRotationY(){return this.#ul}set minStartRotationY(i){this.#ul=i}get minStartRotationZ(){return this.#ll}set minStartRotationZ(i){this.#ll=i}get maxStartRotationX(){return this.#cl}set maxStartRotationX(i){this.#cl=i}get maxStartRotationY(){return this.#hl}set maxStartRotationY(i){this.#hl=i}get maxStartRotationZ(){return this.#fl}set maxStartRotationZ(i){this.#fl=i}get minEndRotationX(){return this.#dl}set minEndRotationX(i){this.#dl=i}get minEndRotationY(){return this.#ml}set minEndRotationY(i){this.#ml=i}get minEndRotationZ(){return this.#pl}set minEndRotationZ(i){this.#pl=i}get maxEndRotationX(){return this.#gl}set maxEndRotationX(i){this.#gl=i}get maxEndRotationY(){return this.#xl}set maxEndRotationY(i){this.#xl=i}get maxEndRotationZ(){return this.#_l}set maxEndRotationZ(i){this.#_l=i}get easeX(){return this.#vl}set easeX(i){this.#vl=i}get easeY(){return this.#bl}set easeY(i){this.#bl=i}get easeZ(){return this.#yl}set easeZ(i){this.#yl=i}get easeAlpha(){return this.#Tl}set easeAlpha(i){this.#Tl=i}get easeScale(){return this.#Sl}set easeScale(i){this.#Sl=i}get easeRotationX(){return this.#wl}set easeRotationX(i){this.#wl=i}get easeRotationY(){return this.#Ml}set easeRotationY(i){this.#Ml=i}get easeRotationZ(){return this.#Rl}set easeRotationZ(i){this.#Rl=i}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_PARTICLE_EMITTER",va,ba,_a)}render(i){this.#Pl||this.#ya(),this.#Dl(i.timestamp),super.render(i)}#Ll(){let i=this.redGPUContext;const m=new Float32Array(12*this.#Bl),g=new Float32Array(12*this.#Bl),_=new Float32Array(12*this.#Bl),b=new Float32Array(4*this.#Bl),y=new Float32Array(4*this.#Bl),T=performance.now(),w=this.localToWorld(this.x,this.y,this.z);for(let i=0;i<this.#Bl;++i){let P=Math.random()*this.#Fu,$=Math.random()*P;const H=w[0]+Math.random()*(this.#zu-this.#Vu)+this.#Vu,q=w[1]+Math.random()*(this.#qu-this.#$u)+this.#$u,W=w[2]+Math.random()*(this.#Ku-this.#Hu)+this.#Hu,ye=Math.random()*(this.#cl-this.#ol)+this.#ol,Ge=Math.random()*(this.#hl-this.#ul)+this.#ul,Ke=Math.random()*(this.#fl-this.#ll)+this.#ll;Math.random(),this.#il,this.#rl,this.#rl,Math.random(),this.#el,this.#Qu,this.#Qu,m[12*i]=T-$,m[12*i+1]=P,m[12*i+4]=H,m[12*i+5]=q,m[12*i+6]=W,m[12*i+7]=0,m[12*i+8]=ye,m[12*i+9]=Ge,m[12*i+10]=Ke,m[12*i+11]=0,g[4*i]=H,g[4*i+1]=Math.random()*(this.#ju-this.#Wu)+this.#Wu,g[4*i+2]=this.#vl,g[4*i+3]=w[0],g[4*i+4]=q,g[4*i+5]=Math.random()*(this.#Zu-this.#Xu)+this.#Xu,g[4*i+6]=this.#bl,g[4*i+7]=w[1],g[4*i+8]=W,g[4*i+9]=Math.random()*(this.#Ju-this.#Yu)+this.#Yu,g[4*i+10]=this.#yl,g[4*i+11]=w[2],_[4*i]=ye,_[4*i+1]=Math.random()*(this.#gl-this.#dl)+this.#dl,_[4*i+2]=this.#wl,_[4*i+3]=0,_[4*i+4]=Ge,_[4*i+5]=Math.random()*(this.#xl-this.#ml)+this.#ml,_[4*i+6]=this.#Ml,_[4*i+7]=0,_[4*i+8]=Ke,_[4*i+9]=Math.random()*(this.#_l-this.#pl)+this.#pl,_[4*i+10]=this.#Rl,_[4*i+11]=0,b[4*i]=0,b[4*i+1]=Math.random()*(this.#sl-this.#al)+this.#al,b[4*i+2]=this.#Sl,b[4*i+3]=0,y[4*i]=0,y[4*i+1]=Math.random()*(this.#nl-this.#tl)+this.#tl,y[4*i+2]=this.#Tl,y[4*i+3]=0}const P=this.#Pl;this.#Pl=[];const $=[m,g,_,b,y];$.forEach((m,g)=>{const _=i.gpuDevice.createBuffer({size:m.byteLength,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.COPY_SRC|GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE});i.gpuDevice.queue.writeBuffer(_,0,m),this.#Pl.push(_),P?.length&&copyGPUBuffer(i.gpuDevice,P[g],_)}),P&&P.forEach(i=>i.destroy());let H={code:"\nstruct Info { startValue:f32, endValue:f32, easeType:f32, birthCenterValue:f32\n};\nstruct InfoGroup { infoX:Info, infoY:Info, infoZ:Info,\n};\nstruct Particle { startTime:f32, life:f32, valuePosition:vec3<f32>, valueAlpha:f32, valueRotation:vec3<f32>, valueScale:f32,\n};\nstruct SimParams { time:f32, currentPositionX:f32,currentPositionY:f32,currentPositionZ:f32, minLife:f32,maxLife:f32, minStartX:f32,maxStartX:f32,minEndX:f32,maxEndX:f32,easeX:f32, minStartY:f32,maxStartY:f32,minEndY:f32,maxEndY:f32,easeY:f32, minStartZ:f32,maxStartZ:f32,minEndZ:f32,maxEndZ:f32,easeZ:f32, minStartAlpha:f32,maxStartAlpha:f32,minEndAlpha:f32,maxEndAlpha:f32,easeAlpha:f32, minStartScale:f32,maxStartScale:f32,minEndScale:f32,maxEndScale:f32,easeScale:f32, minStartRotationX:f32,maxStartRotationX:f32,minEndRotationX:f32,maxEndRotationX:f32,easeRotationX:f32, minStartRotationY:f32,maxStartRotationY:f32,minEndRotationY:f32,maxEndRotationY:f32,easeRotationY:f32, minStartRotationZ:f32,maxStartRotationZ:f32,minEndRotationZ:f32,maxEndRotationZ:f32,easeRotationZ:f32,\n};\n@group(0) @binding(0) var<uniform> params:SimParams;\n@group(0) @binding(1) var<storage,read_write> particles:array<Particle>;\n@group(0) @binding(2) var<storage,read_write> infoPosition:array<InfoGroup>;\n@group(0) @binding(3) var<storage,read_write> infoRotation:array<InfoGroup>;\n@group(0) @binding(4) var<storage,read_write> infoScale:array<Info>;\n@group(0) @binding(5) var<storage,read_write> infoAlpha:array<Info>;\nconst PI:f32=3.141592653589793;\nconst HPI:f32=PI * 0.5;\nconst PI2:f32=PI * 2.0;\nfn calEasing(n:f32,easingType:f32) -> f32 { var m:f32=n; let easingInt:i32=i32(easingType); switch (easingInt) { case 0:{ m=m;} case 1:{ m=m * m * m * m * m;} case 2:{ m -=1.0; m=(m * m * m * m * m) + 1.0; } case 3:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=0.5 * (m * m * m * m * m + 2.0); } } case 4:{ m=m * m * (m * 1.70158 + m - 1.70158);} case 5:{ m -=1.0; m=m * m * (m * 1.70158 + m + 1.70158) + 1.0; } case 6:{ if(m * 2.0 < 1.0) { m *=2.0; m=0.5 * m * m * (m * 1.70158 + m - 1.70158); } else { m=m * 2.0 - 2.0; m=0.5 * m * m * (m * 1.70158 + m + 1.70158) + 1.0; } } case 7:{ m=-1.0 * (sqrt(1.0 - m * m) - 1.0);} case 8:{ m -=1.0; m=sqrt(1.0 - m * m); } case 9:{ if(m * 2.0 < 1.0) { m *=2.0; m=-0.5 * (sqrt(1.0 - m * m) - 1.0); } else { m=m * 2.0 - 2.0; m=0.5 * sqrt(1.0 - m * m) + 0.5; } } case 10:{ m=m * m * m;} case 11:{ m -=1.0; m=m * m * m + 1.0; } case 12:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=0.5 * (m * m * m + 2.0); } } case 13:{ if (m==0.0) { m=0.0;} else { m=pow(2.0,10.0 * (m - 1.0));} } case 14:{ if (m==1.0) { m=1.0;} else { m=-pow(2.0,-10.0 * m) + 1.0;} } case 15:{ if(m * 2.0 < 1.0) { if (m==0.0) { m=0.0;} else { m *=2.0;m=0.5 * pow(2.0,10.0 * (m - 1.0));} } else { if (m==2.0) { m=1.0;} else { m=m * 2.0 - 1.0;m=-0.5 * pow(2.0,-10.0 * m) + 1.0;} } } case 16:{ m=m * m;} case 17:{ m=(2.0 - m) * m;} case 18:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * 0.5; } else { m=2.0 - m; m=0.5 * (m * m + 1.0); } } case 19:{ m=m * m * m * m;} case 20:{ m -=1.0; m=1.0 - (m * m * m * m); } case 21:{ if(m * 2.0 < 1.0) { m *=2.0; m=m * m * m * m * 0.5; } else { m=m * 2.0 - 2.0; m=1.0 - (m * m * m * m * 0.5); } } case 22:{ m=-cos(m * HPI) + 1.0;} case 23:{ m=sin(m * HPI);} case 24:{ m=(-cos(m * PI) + 1.0) * 0.5;} case 25:{ if (m==0.0) { m=0.0;} else if (m==1.0) { m=1.0;} else { m -=1.0;m=-1.0 * pow(2.0,10.0 * m) * sin((m - 0.075) * (PI2)/0.3);} } case 26:{ if (m==0.0) { m=0.0; } else if (m==1.0) { m=1.0; } else { m -=1.0; m=-pow(2.0,10.0 * m) * sin((m - 0.075) * PI2/0.3); } } case 27:{ if (m==0.0) { m=0.0; } else if (m==1.0) { m=1.0; } else { m=pow(2.0,-10.0 * m) * sin((m - 0.075) * PI2/0.3) + 1.0; } } default:{ m=m;} } return m;\n}\nfn rand(n:f32) -> f32 { return fract(sin(n) * 43758.5453123);\n}\nfn randomRange(min:f32,max:f32,v:f32)->f32\n{ var newValue:f32=rand(v); return (newValue * (max-min)) + min;\n}\nfn compute_value(tInfo:Info,lifeRatio:f32) -> f32 { return tInfo.startValue + ((tInfo.endValue - tInfo.startValue) * calEasing(lifeRatio,tInfo.easeType));\n}\n@compute @workgroup_size(256,1,1)\nfn main( @builtin(global_invocation_id) global_id:vec3<u32> ) { let index:u32=(global_id.x); let age:f32=(params.time - particles[index].startTime); var lifeRatio:f32=(age/particles[index].life); if (lifeRatio >=1.0 ) { let uuid:f32=(params.time + f32(index)); particles[index].startTime=params.time; particles[index].life=randomRange( params.minLife,params.maxLife,uuid ); infoPosition[index].infoX.startValue=randomRange( params.minStartX + params.currentPositionX,params.maxStartX + params.currentPositionX,(uuid + 1.0) ); infoPosition[index].infoX.endValue=randomRange( params.minEndX + params.currentPositionX,params.maxEndX + params.currentPositionX,(uuid + 2.0) ); infoPosition[index].infoX.easeType=params.easeX; infoPosition[index].infoX.birthCenterValue=params.currentPositionX; infoPosition[index].infoY.startValue=randomRange( params.minStartY +params.currentPositionY,params.maxStartY+params.currentPositionY,(uuid + 3.0) ); infoPosition[index].infoY.endValue=randomRange( params.minEndY+params.currentPositionY,params.maxEndY+params.currentPositionY,(uuid + 4.0) ); infoPosition[index].infoY.easeType=params.easeY; infoPosition[index].infoY.birthCenterValue=params.currentPositionY; infoPosition[index].infoZ.startValue=randomRange( params.minStartZ+params.currentPositionZ,params.maxStartZ+params.currentPositionZ,(uuid + 5.0) ); infoPosition[index].infoZ.endValue=randomRange( params.minEndZ+params.currentPositionZ,params.maxEndZ+params.currentPositionZ,(uuid + 6.0) ); infoPosition[index].infoZ.easeType=params.easeZ; infoPosition[index].infoZ.birthCenterValue=params.currentPositionZ; infoAlpha[index].startValue=randomRange( params.minStartAlpha,params.maxStartAlpha,(uuid + 7.0) ); infoAlpha[index].endValue=randomRange( params.minEndAlpha,params.maxEndAlpha,(uuid + 8.0) ); infoAlpha[index].easeType=params.easeAlpha; infoScale[index].startValue=randomRange( params.minStartScale,params.maxStartScale,(uuid + 9.0) ); infoScale[index].endValue=randomRange( params.minEndScale,params.maxEndScale,(uuid + 10.0)); infoScale[index].easeType=params.easeScale; infoRotation[index].infoX.startValue=randomRange( params.minStartRotationX,params.maxStartRotationX,(uuid + 11.0)); infoRotation[index].infoX.endValue=randomRange( params.minEndRotationX,params.maxEndRotationX,(uuid + 12.0)); infoRotation[index].infoX.easeType=params.easeRotationX; infoRotation[index].infoY.startValue=randomRange( params.minStartRotationY,params.maxStartRotationY,(uuid + 13.0)); infoRotation[index].infoY.endValue=randomRange( params.minEndRotationY,params.maxEndRotationY,(uuid + 14.0)); infoRotation[index].infoY.easeType=params.easeRotationY; infoRotation[index].infoZ.startValue=randomRange( params.minStartRotationZ,params.maxStartRotationZ,(uuid + 15.0)); infoRotation[index].infoZ.endValue=randomRange( params.minEndRotationZ,params.maxEndRotationZ,(uuid + 16.0)); infoRotation[index].infoZ.easeType=params.easeRotationZ; lifeRatio=0.0; } var targetInfo:Info; let targetParticle=particles[index]; targetInfo=infoPosition[index].infoX; particles[index].valuePosition.x=compute_value(targetInfo,lifeRatio); targetInfo=infoPosition[index].infoY; particles[index].valuePosition.y=compute_value(targetInfo,lifeRatio); targetInfo=infoPosition[index].infoZ; particles[index].valuePosition.z=compute_value(targetInfo,lifeRatio); targetInfo=infoAlpha[index]; particles[index].valueAlpha=compute_value(targetInfo,lifeRatio); targetInfo=infoScale[index]; particles[index].valueScale=compute_value(targetInfo,lifeRatio); targetInfo=infoRotation[index].infoX; particles[index].valueRotation.x=compute_value(targetInfo,lifeRatio) * PI/180.0; targetInfo=infoRotation[index].infoY; particles[index].valueRotation.y=compute_value(targetInfo,lifeRatio) * PI/180.0; targetInfo=infoRotation[index].infoZ; particles[index].valueRotation.z=compute_value(targetInfo,lifeRatio) * PI/180.0;\n}\n"},q=i.resourceManager.createGPUShaderModule("PARTICLE_EMITTER_MODULE",H);const W=[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}],ye=[{binding:0,resource:{buffer:this.#Cl,offset:0,size:this.#El.byteLength}}];$.forEach((i,m)=>{W.push({binding:m+1,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}),ye.push({binding:m+1,resource:{buffer:this.#Pl[m],offset:0,size:i.byteLength}})});const Ge=i.gpuDevice.createBindGroupLayout({entries:W}),Ke=i.gpuDevice.createPipelineLayout({bindGroupLayouts:[Ge]});this.#Il=i.gpuDevice.createBindGroup({layout:Ge,entries:ye}),this.#Fi=i.gpuDevice.createComputePipeline({label:"PARTICLE_EMITTER_PIPELINE",layout:Ke,compute:{module:q,entryPoint:"main"}})}#ya(){this.#El=new Float32Array(46);let i={size:this.#El.byteLength,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST};const{gpuDevice:m}=this.redGPUContext;this.#Cl=m.createBuffer(i),m.queue.writeBuffer(this.#Cl,0,this.#El),this.#Ll(),this.depthStencilState.depthWriteEnabled=!1}#Dl(i){const m=this.localToWorld(this.x,this.y,this.z);this.#El.set([i,...m,this.#Gu,this.#Fu,this.#Vu,this.#zu,this.#Wu,this.#ju,this.#vl,this.#$u,this.#qu,this.#Xu,this.#Zu,this.#bl,this.#Hu,this.#Ku,this.#Yu,this.#Ju,this.#yl,this.#Qu,this.#el,this.#tl,this.#nl,this.#Tl,this.#rl,this.#il,this.#al,this.#sl,this.#Sl,this.#ol,this.#cl,this.#dl,this.#gl,this.#wl,this.#ul,this.#hl,this.#ml,this.#xl,this.#Ml,this.#ll,this.#fl,this.#pl,this.#_l,this.#Rl],0);const{gpuDevice:g}=this.redGPUContext;g.queue.writeBuffer(this.#Cl,0,this.#El);const _=g.createCommandEncoder({}),b=_.beginComputePass();b.setPipeline(this.#Fi),b.setBindGroup(0,this.#Il),b.dispatchWorkgroups(Math.ceil(this.#Bl/256)),b.end(),g.queue.submit([_.finish()])}}function mixInMesh2D(i){const m=class extends i{#Nu=0;#Ul=$i.NORMAL;get blendMode(){const i=Object.entries($i).find(([,i])=>i===this.#Ul);if(!i)throw new Error(`Invalid blendMode value:${this.#Ul}`);return i[0]}set blendMode(i){let m;if("string"==typeof i){if(!(i in $i))throw new Error(`Invalid blendMode key:${i}`);m=$i[i]}else{if("number"!=typeof i||!Object.values($i).includes(i))throw new Error(`Invalid blendMode:${i}`);m=i}this.#Ul=m,this.#Al(m)}get rotation(){return this.#Nu}set rotation(i){this.#Nu=i,super.rotationZ=i}setScale(i,m){m=m??i,super.setScale(i,m,1)}setPosition(i,m){m=m??i,super.setPosition(i,m,0)}setRotation(i){this.rotation=i}#Al(i){const{blendColorState:m,blendAlphaState:g}=this._material;switch(i){case $i.NORMAL:m.operation=kr.ADD,m.srcFactor=Ar.SRC_ALPHA,m.dstFactor=Ar.ONE_MINUS_SRC_ALPHA,g.operation=kr.ADD,g.srcFactor=Ar.SRC_ALPHA,g.dstFactor=Ar.ONE_MINUS_SRC_ALPHA;break;case $i.MULTIPLY:m.operation=kr.ADD,m.srcFactor=Ar.ONE_MINUS_DST_ALPHA,m.dstFactor=Ar.ONE_MINUS_SRC_ALPHA,g.operation=kr.ADD,g.srcFactor=Ar.SRC_ALPHA,g.dstFactor=Ar.ONE_MINUS_SRC_ALPHA;break;case $i.LIGHTEN:m.operation=kr.MAX,m.srcFactor=Ar.ONE,m.dstFactor=Ar.ONE,g.operation=kr.ADD,g.srcFactor=Ar.SRC_ALPHA,g.dstFactor=Ar.ONE_MINUS_SRC_ALPHA;break;case $i.SCREEN:m.operation=kr.ADD,m.srcFactor=Ar.ONE,m.dstFactor=Ar.ONE_MINUS_SRC,g.operation=kr.ADD,g.srcFactor=Ar.SRC_ALPHA,g.dstFactor=Ar.ONE_MINUS_SRC_ALPHA;break;case $i.LINEAR_DODGE:m.operation=kr.ADD,m.srcFactor=Ar.ONE,m.dstFactor=Ar.ONE,g.operation=kr.ADD,g.srcFactor=Ar.SRC_ALPHA,g.dstFactor=Ar.ONE;break;case $i.SUBTRACT:m.operation=kr.REVERSE_SUBTRACT,m.srcFactor=Ar.SRC_ALPHA,m.dstFactor=Ar.ONE_MINUS_SRC_ALPHA,g.operation=kr.REVERSE_SUBTRACT,g.srcFactor=Ar.ONE,g.dstFactor=Ar.ONE;break;case $i.DIFFERENCE:m.operation=kr.SUBTRACT,m.srcFactor=Ar.ONE,m.dstFactor=Ar.ONE,g.operation=kr.SUBTRACT,g.srcFactor=Ar.ONE,g.dstFactor=Ar.ONE;break;case $i.EXCLUSION:m.operation=kr.ADD,m.srcFactor=Ar.ONE_MINUS_DST_ALPHA,m.dstFactor=Ar.ONE_MINUS_SRC_ALPHA,g.operation=kr.ADD,g.srcFactor=Ar.ONE,g.dstFactor=Ar.ONE;break;default:console.warn(`Unsupported blend mode:${i}`)}}};return Object.defineProperty(m.prototype,"is2DMeshType",{value:!0,writable:!1}),m}Object.defineProperty(ParticleEmitter.prototype,"meshType",{value:"particle",writable:!1}),wn.defineByPreset(ParticleEmitter,[wn.PRESET_BOOLEAN.USE_BILLBOARD]),wn.definePositiveNumber(ParticleEmitter,[]),Object.freeze(ParticleEmitter);const ya=mixInMesh2D(Mesh);class Sprite2D extends ya{#Xr=1;#Yr=1;constructor(i,m){super(i,new Plane(i,1,1,1,1,1,!0),m),this.primitiveState.cullMode=xi.FRONT}get width(){return this.#Xr}set width(i){validatePositiveNumberRange(i),this.#Xr=i,this.dirtyTransform=!0}get height(){return this.#Yr}set height(i){validatePositiveNumberRange(i),this.#Yr=i,this.dirtyTransform=!0}get material(){return this._material}set material(i){consoleAndThrowError("Sprite2D can not change material")}setSize(i,m){this.width=i,this.height=void 0!==m?m:i}}Object.freeze(Sprite2D);var Ta="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, billboardFixedScale:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_positionVec4=vec4<f32>(input_position,1.0); let input_vertexNormalVec4=vec4<f32>(input_vertexNormal,1.0); let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useBillboard {  let projectionModelMatrix=u_projectionMatrix * u_modelMatrix; let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix); let billboardNormalMatrix=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix); if (u_useBillboardPerspective==1) { position=billboardMatrix * input_positionVec4; normalPosition=billboardNormalMatrix * input_vertexNormalVec4; } else { position=billboardMatrix * input_positionVec4; normalPosition=billboardNormalMatrix * input_vertexNormalVec4; } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio; let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0); output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * input_positionVec4; normalPosition=u_cameraMatrix * u_normalModelMatrix * input_vertexNormalVec4; output.position=u_projectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; let u_directionalLightProjectionViewMatrix=systemUniforms.directionalLightProjectionViewMatrix; let u_directionalLightProjectionMatrix=systemUniforms.directionalLightProjectionMatrix; let u_directionalLightViewMatrix=systemUniforms.directionalLightViewMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); var position:vec4<f32>; output.position=u_directionalLightProjectionViewMatrix * u_modelMatrix * input_positionVec4; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_cameraMatrix=systemUniforms.camera.cameraMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let input_position=inputData.position; let input_positionVec4=vec4<f32>(input_position,1.0); let u_resolution=systemUniforms.resolution; var position:vec4<f32>; if (u_useBillboard==1) { let projectionModelMatrix=u_projectionMatrix * u_modelMatrix; let billboardMatrix=getBillboardMatrix(u_cameraMatrix,u_modelMatrix); if (u_useBillboardPerspective==1) { position=billboardMatrix * input_positionVec4; } else { position=billboardMatrix * input_positionVec4; } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((projectionModelMatrix)[1][1],-1.0,1.0)/aspectRatio; let scaleY=clamp((projectionModelMatrix)[1][1],-1.0,1.0); output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * input_positionVec4; output.position=u_projectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Sa=parseWGSL(Ta),wa=Sa.uniforms.vertexUniforms;class Sprite3D extends Mesh{constructor(i,m,g){super(i),this._geometry=g||new Plane(i),this._material=m,this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.primitiveState.cullMode=xi.NONE}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_3D",Sa,wa,Ta)}}wn.defineByPreset(Sprite3D,[[wn.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[wn.PRESET_BOOLEAN.USE_BILLBOARD,!0],[wn.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(Sprite3D);class ASpriteSheet extends Mesh{#kl=0;#Ol=0;#Nl=0;#Gl=!0;#Fl=!0;#Vl;#$l;#Hl="play";constructor(i,m,g){super(i),this.#$l=g,this._material=new BitmapMaterial(i),this._material.transparent=!0,this.dirtyPipeline=!0,this.dirtyTransform=!0,this.spriteSheetInfo=m}get state(){return this.#Hl}get loop(){return this.#Fl}set loop(i){this.#Fl=i}get frameRate(){return this.#kl}set frameRate(i){i<0&&(i=0),0===this.#kl&&i&&(this.#Ol=0),this.#kl=i,this.#Nl=1e3/this.#kl}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("ASpriteSheet can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("ASpriteSheet can not change material")}get spriteSheetInfo(){return this.#Vl}set spriteSheetInfo(i){this.#Vl=i,this.frameRate=i.frameRate,this.segmentW=i.segmentW,this.segmentH=i.segmentH,this.totalFrame=i.totalFrame,this.currentIndex=i.startIndex,this.#Fl=!0,this.#Ol=0,this._material.diffuseTexture=i.texture}play(){this.#Gl=!0,this.#Hl="play",this.#Ol=0}pause(){this.#Gl=!1,this.#Hl="pause"}stop(){this.#Gl=!1,this.currentIndex=0,this.#Hl="stop"}render(i){const{diffuseTexture:m}=this._material;this.#$l(m,this.segmentW,this.segmentH);const{timestamp:g}=i;if(this.#Ol||(this.#Ol=this.#Nl+g),this.#Gl&&this.#Ol<g&&this.#kl){const i=Math.floor((g-this.#Ol)/this.#Nl),m=(Number.isFinite(i)?i:0)||1;this.#Ol=this.#Nl+g,this.currentIndex+=m,this.currentIndex>=this.totalFrame&&(this.loop?(this.#Gl=!0,this.currentIndex=0):(this.#Gl=!1,this.currentIndex=this.totalFrame-1))}super.render(i)}}wn.definePositiveNumber(ASpriteSheet,[["segmentW",5],["segmentH",3],["totalFrame",15],["currentIndex",0]]),Object.freeze(ASpriteSheet);var Ma="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, segmentW:f32, segmentH:f32, totalFrame:f32, currentIndex:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.combinedOpacity=vertexUniforms.combinedOpacity; let uv=vec2<f32>( input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW), input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH) ); output.uv=uv; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Ra=parseWGSL(Ma),Ca=Ra.uniforms.vertexUniforms,Pa=mixInMesh2D(ASpriteSheet);class SpriteSheet2D extends Pa{#Xr=1;#Yr=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:_}=i,b=_?.width/m,y=_?.height/g;b===this.#Xr&&y===this.#Yr||(this.#Xr=_?.width/m,this.#Yr=_?.height/g,this.dirtyTransform=!0)}else this.#Xr=1,this.#Yr=1}),this._geometry=new Plane(i,1,1,1,1,1,!0),this.primitiveState.cullMode=xi.FRONT}get width(){return this.#Xr}get height(){return this.#Yr}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_2D",Ra,Ca,Ma)}}Object.freeze(SpriteSheet2D);var Ea="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, useBillboardPerspective:u32, useBillboard:u32, segmentW:f32, segmentH:f32, totalFrame:f32, currentIndex:f32, billboardFixedScale:f32, _renderRatioX:f32, _renderRatioY:f32, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_resolution=systemUniforms.resolution; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let u_renderRatioX=vertexUniforms._renderRatioX; let u_renderRatioY=vertexUniforms._renderRatioY; var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>( u_renderRatioX,0,0,0, 0,u_renderRatioY,0,0, 0,0,1,0, 0,0,0,1 ); let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; #redgpu_if useBillboard { if (u_useBillboardPerspective==1) { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); } else { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=getBillboardMatrix(u_cameraMatrix,u_normalModelMatrix) * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX; let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY; output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } #redgpu_else { position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * ratioScaleMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; } #redgpu_endIf output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.combinedOpacity=vertexUniforms.combinedOpacity; let uv=vec2<f32>( input_uv.x * 1/vertexUniforms.segmentW + ((vertexUniforms.currentIndex % vertexUniforms.segmentW)/vertexUniforms.segmentW), input_uv.y * 1/vertexUniforms.segmentH - (floor(vertexUniforms.currentIndex/vertexUniforms.segmentH)/vertexUniforms.segmentH) ); output.uv=uv; return output;\n}\n@vertex\nfn drawDirectionalShadowDepth(inputData:InputData) -> OutputShadowData { var output:OutputShadowData; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_cameraMatrix=systemUniforms.camera.cameraMatrix; let u_modelMatrix=vertexUniforms.modelMatrix; let u_useBillboardPerspective=vertexUniforms.useBillboardPerspective; let u_useBillboard=vertexUniforms.useBillboard; let u_billboardFixedScale=vertexUniforms.billboardFixedScale; let u_renderRatioX=vertexUniforms._renderRatioX; let u_renderRatioY=vertexUniforms._renderRatioY; var ratioScaleMatrix:mat4x4<f32>=mat4x4<f32>( u_renderRatioX,0,0,0, 0,u_renderRatioY,0,0, 0,0,1,0, 0,0,0,1 ); let input_position=inputData.position; let u_resolution=systemUniforms.resolution; var position:vec4<f32>; if (u_useBillboard==1) { if (u_useBillboardPerspective==1) { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); } else { position=getBillboardMatrix(u_cameraMatrix,u_modelMatrix) * ratioScaleMatrix * vec4<f32>(input_position,1.0); } output.position=u_projectionMatrix * position; if (u_useBillboardPerspective !=1) { var temp=output.position/output.position.w; let aspectRatio=u_resolution.x/u_resolution.y; let scaleX=clamp((u_projectionMatrix)[1][1],-1.0,1.0)/aspectRatio * u_renderRatioX; let scaleY=clamp((u_projectionMatrix)[1][1],-1.0,1.0) * u_renderRatioY; output.position=vec4<f32>( temp.xy + input_position.xy * vec2<f32>(scaleX * u_billboardFixedScale,scaleY * u_billboardFixedScale), temp.zw ); } } else { position=u_cameraMatrix * u_modelMatrix * ratioScaleMatrix * vec4<f32>(input_position,1.0); output.position=u_projectionMatrix * position; } output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Ia=parseWGSL(Ea),Ba=Ia.uniforms.vertexUniforms;class SpriteSheet3D extends ASpriteSheet{#ls=1;#cs=1;constructor(i,m){super(i,m,(i,m,g)=>{if(i){const{gpuTexture:_}=i,b=_?.width/m,y=_?.height/g;b===this.#ls&&y===this.#cs||(this.#ls=_?.width/m,this.#cs=_?.height/g,this.#cs>this.#ls?(this._renderRatioX=1,this._renderRatioY=this.#cs/this.#ls):(this._renderRatioX=this.#ls/this.#cs,this._renderRatioY=1),this.dirtyTransform=!0)}else this.#ls=1,this.#cs=1}),this._geometry=new Plane(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("SpriteSheet3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("SpriteSheet3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_SPRITE_SHEET_3D",Ia,Ba,Ea)}}wn.definePositiveNumber(SpriteSheet3D,[["_renderRatioX",1],["_renderRatioY",1]]),wn.defineByPreset(SpriteSheet3D,[[wn.PRESET_BOOLEAN.USE_BILLBOARD_PERSPECTIVE,!0],[wn.PRESET_BOOLEAN.USE_BILLBOARD,!0],[wn.PRESET_POSITIVE_NUMBER.BILLBOARD_FIXED_SCALE,.1,.1]]),Object.freeze(SpriteSheet3D);class SpriteSheetInfo{#zl=0;#ql=0;#Kl=0;#Wl=0;#kl=0;#Fl=!0;#Xl;constructor(i,m,g,_,b,y,T=!0,w=60){validateRedGPUContext(i),validateUintRange(g),validateUintRange(_),validateUintRange(b),validateUintRange(y),validateUintRange(w),this.#zl=g,this.#ql=_,this.#Kl=b,this.#Wl=y,this.#Xl=new BitmapTexture(i,m),this.#Fl=T,this.#kl=w}get segmentW(){return this.#zl}get segmentH(){return this.#ql}get totalFrame(){return this.#Kl}get startIndex(){return this.#Wl}get texture(){return this.#Xl}get frameRate(){return this.#kl}get loop(){return this.#Fl}}Object.freeze(SpriteSheetInfo);const La=parseWGSL("#redgpu_include drawPicking;\nstruct Uniforms { opacity:f32\n};\nstruct InputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexColor:vec4<f32>, @location(15) pickingId:vec4<f32>,\n}\n@group(2) @binding(0) var<uniform> uniforms:Uniforms;\n@fragment\nfn main(inputData:InputData) -> @location(0) vec4<f32> { return inputData.vertexColor;\n}\n");class LineMaterial extends ABaseMaterial{constructor(i,m){super(i,"LINE_MATERIAL",La,2),m&&(this.name=m),this.initGPURenderInfos()}}Object.freeze(LineMaterial);class LinePoint{position;colorRGBA;constructor(i=0,m=0,g=0,_){this.position=[i,m,g],this.colorRGBA=_}}const getPointsOnBezierCurveWithSplitting=(i,m,g,_)=>{let b=_||[];if(((i,m)=>{let g=i[m].position,_=i[m+1].position,b=i[m+2].position,y=i[m+3].position,T=3*_[0]-2*g[0]-y[0],w=3*_[1]-2*g[1]-y[1],P=3*b[0]-2*y[0]-g[0],$=3*b[1]-2*y[1]-g[1];return T*=T,w*=w,P*=P,$*=$,T<P&&(T=P),w<$&&(w=$),T+w})(i,m)<g)b.push(i[m],i[m+3]);else{let _=.5,y=i[m],T=i[m+1],w=i[m+2],P=i[m+3],$=lerp$4(create$4(),y.position,T.position,_),H=lerp$4(create$4(),T.position,w.position,_),q=lerp$4(create$4(),w.position,P.position,_),W=lerp$4(create$4(),$,H,_),ye=lerp$4(create$4(),H,q,_),Ge=lerp$4(create$4(),W,ye,_);Ge=new LinePoint(Ge[0],Ge[1],Ge[2],y.colorRGBA),$=new LinePoint($[0],$[1],$[2],$.colorRGBA),q=new LinePoint(q[0],q[1],q[2],q.colorRGBA),W=new LinePoint(W[0],W[1],W[2],W.colorRGBA),ye=new LinePoint(ye[0],ye[1],ye[2],ye.colorRGBA),getPointsOnBezierCurveWithSplitting([y,$,W,Ge],0,g,b),getPointsOnBezierCurveWithSplitting([Ge,ye,q,P],0,g,b)}return b};class LinePointWithInOut{inLinePoint;linePoint;outLinePoint;constructor(i=0,m=0,g=0,_=0,b=0,y=0,T=0,w=0,P=0,$,H){let q=[...convertHexToRgb($,!0)];q=[q[0]/255,q[1]/255,q[2]/255,H],this.inLinePoint=new LinePoint(_,b,y,q),this.linePoint=new LinePoint(i,m,g,q),this.outLinePoint=new LinePoint(T,w,P,q)}}const lineVec2DistanceToSegmentSq=function(i,m,g){i=[i[0],i[1]],m=[m[0],m[1]],g=[g[0],g[1]];let _=pn(m,g);if(0===_)return pn(i,m);let b=((i[0]-m[0])*(g[0]-m[0])+(i[1]-m[1])*(g[1]-m[1]))/_;return b=Math.max(0,Math.min(1,b)),pn(i,lerp([0,0],m,g,b))},lineSimplifyPoints=(i,m,g,_,b)=>{let y=b||[],T=i[m],w=i[g-1],P=0,$=1,H=m+1;for(;H<g-1;++H){let m=lineVec2DistanceToSegmentSq(i[H].position,T.position,w.position);m>P&&(P=m,$=H)}return Math.sqrt(P)>_?(lineSimplifyPoints(i,m,$+1,_,y),lineSimplifyPoints(i,$,g,_,y)):y.push(T,w),y},Da={LINEAR:"linear",CATMULL_ROM:"catmullRom",BEZIER:"bezier"};Object.freeze(Da);var Ua="#redgpu_include SYSTEM_UNIFORM; struct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, }; @group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms; struct InputData { @location(0) position:vec3<f32>, @location(1) vertexColor:vec4<f32>, }; struct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexColor:vec4<f32>, @location(15) pickingId:vec4<f32>, }; struct OutputShadowData { @builtin(position) position:vec4<f32>, }; @vertex fn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_resolution=systemUniforms.resolution; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let input_position=inputData.position; let input_vertexColor=inputData.vertexColor; var position:vec4<f32>; position=u_modelMatrix * vec4<f32>(input_position,1.0); output.position=u_projectionMatrix * u_cameraMatrix * position; output.vertexPosition=position.xyz; output.vertexColor=input_vertexColor; return output; } @vertex fn picking(inputData:InputData) -> OutputData { var output:OutputData; return output; }\n";const Aa=parseWGSL(Ua),ka=Aa.uniforms.vertexUniforms;class Line3D extends Mesh{baseColor;#Yl;#jl=1;#Zl=.01;#Ar=.01;#Jl=[];#Ql=[];#ec;constructor(i,m=Da.LINEAR,g="#fff"){super(i),this.primitiveState.topology=zn.LINE_STRIP,this.baseColor=g,this.#Yl=m,this._geometry=new Geometry(i,new VertexBuffer(i,this.#Jl,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4}))),this._material=new LineMaterial(i)}get originalPoints(){return this.#Ql}get type(){return this.#Yl}set type(i){this.#Yl=i,this.#tc()}get interleaveData(){return this.#Jl}get tension(){return this.#jl}set tension(i){validatePositiveNumberRange(i),this.#jl=i,this.#tc()}get tolerance(){return this.#Zl}set tolerance(i){validatePositiveNumberRange(i),this.#Zl=i,this.#tc()}get distance(){return this.#Ar}set distance(i){validatePositiveNumberRange(i),this.#Ar=i,this.#tc()}get numPoints(){return this.#Ql.length}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line3D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line3D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_3D",Aa,ka,Ua)}addPoint(i=0,m=0,g=0,_=this.baseColor,b=1,y=0,T=0,w=0,P=0,$=0,H=0){this.#Ql.push(new LinePointWithInOut(i,m,g,y,T,w,P,$,H,_,b)),this.#tc()}addPointAt(i,m=0,g=0,_=0,b=this.baseColor,y=1,T=0,w=0,P=0,$=0,H=0,q=0){this.#Ql.length<i&&(i=this.#Ql.length),null!=i?this.#Ql.splice(i,0,new LinePointWithInOut(m,g,_,T,w,P,$,H,q,b,y)):this.#Ql.push(new LinePointWithInOut(m,g,_,T,w,P,$,H,q,b,y)),this.#tc()}removePointAt(i){validateUintRange(i),this.#Ql[i]?this.#Ql.splice(i,1):consoleAndThrowError("removeChildAt","index 해당인덱스에 위치한 포인트가 없음.","입력값:"+i),this.#tc()}removeAllPoint(){this.#Ql.length=0,this.#tc()}#W(){if(this._geometry,this.#Ql.length){const{redGPUContext:i}=this;this._geometry=new Geometry(i,new VertexBuffer(i,this.#Jl,new InterleavedStruct({vertexPosition:InterleaveType.float32x3,vertexColor:InterleaveType.float32x4})))}this.dirtyPipeline=!0}#tc(){const i=this.#Ql,m=this.#jl,g=this.#Zl,_=this.#Ar;let b,y,T,w;switch(this.#Jl.length=0,this.#Yl){case Da.CATMULL_ROM:case Da.BEZIER:if(i.length>1)for(this.#ec=(i=>{let m,g=[],_=0,b=0;const y=i.length;for(;_<y;_++){m=i[_];const{inLinePoint:y,linePoint:T,outLinePoint:w}=m;0===b?(g[b++]=T,g[b++]=w):(g[b++]=y,g[b++]=T,i[_+1]&&(g[b++]=w))}return g})(Da.CATMULL_ROM===this.#Yl?((i,m=1)=>{const g=i.length,_=g-2;for(let b=0;b<g-1;b++){const g=b?i[b-1].linePoint.position:i[b].linePoint.position,y=i[b].linePoint.position,T=i[b+1].linePoint.position,w=b===_?T:i[b+2].linePoint.position;i[b].outLinePoint.position=[y[0]+(T[0]-g[0])/6*m,y[1]+(T[1]-g[1])/6*m,y[2]+(T[2]-g[2])/6*m],i[b+1].inLinePoint.position=[T[0]-(w[0]-y[0])/6*m,T[1]-(w[1]-y[1])/6*m,T[2]-(w[2]-y[2])/6*m]}return i})(i,m):i),b=((i,m)=>{let g=[],_=(i.length-1)/3;_=Math.floor(_);let b,y=0;for(;y<_;++y)b=3*y,getPointsOnBezierCurveWithSplitting(i,b,m,g);return g})(this.#ec,g),b=lineSimplifyPoints(b,0,b.length,_),y=0,T=b.length;y<T;y++)w=b[y],this.#Jl.push(...w.position,...w.colorRGBA);else this.#Jl.push(0,0,0,1,1,1,1);break;default:for(y=0,T=i.length;y<T;y++){const{linePoint:m}=i[y],g=m.colorRGBA;this.interleaveData.push(...m.position,...g)}}this.#W()}}Object.freeze(Line3D);const Oa=parseWGSL(Ua),Na=Oa.uniforms.vertexUniforms;var Ga="#redgpu_include SYSTEM_UNIFORM;\n#redgpu_include getBillboardMatrix;\nstruct VertexUniforms { pickingId:u32, modelMatrix:mat4x4<f32>, normalModelMatrix:mat4x4<f32>, combinedOpacity:f32,\n};\n@group(1) @binding(0) var<uniform> vertexUniforms:VertexUniforms;\nstruct InputData { @location(0) position:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>,\n};\nstruct OutputData { @builtin(position) position:vec4<f32>, @location(0) vertexPosition:vec3<f32>, @location(1) vertexNormal:vec3<f32>, @location(2) uv:vec2<f32>, @location(12) combinedOpacity:f32, @location(13) shadowPos:vec3<f32>, @location(15) pickingId:vec4<f32>,\n};\nstruct OutputShadowData { @builtin(position) position:vec4<f32>,\n};\n@vertex\nfn main(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.vertexPosition=position.xyz; output.vertexNormal=normalPosition.xyz; output.uv=input_uv; output.combinedOpacity=vertexUniforms.combinedOpacity; return output;\n}\n@vertex\nfn picking(inputData:InputData) -> OutputData { var output:OutputData; let u_projectionMatrix=systemUniforms.projectionMatrix; let u_camera=systemUniforms.camera; let u_cameraMatrix=u_camera.cameraMatrix; let u_cameraPosition=u_camera.cameraPosition; let u_modelMatrix=vertexUniforms.modelMatrix; let u_normalModelMatrix=vertexUniforms.normalModelMatrix; let input_position=inputData.position; let input_vertexNormal=inputData.vertexNormal; let input_uv=inputData.uv; var position:vec4<f32>; var normalPosition:vec4<f32>; position=u_cameraMatrix * u_modelMatrix * vec4<f32>(input_position,1.0); normalPosition=u_cameraMatrix * u_normalModelMatrix * vec4<f32>(input_vertexNormal,1.0); output.position=u_projectionMatrix * position; output.pickingId=unpack4x8unorm(vertexUniforms.pickingId); return output;\n}\n";const Fa=parseWGSL(Ga),Va=Fa.uniforms.vertexUniforms,$a=mixInMesh2D(ATextField);class TextField2D extends $a{#Xr=1;#Yr=1;#nc=!0;constructor(i,m=!0){super(i,(i,m)=>{this.#Xr=i,this.#Yr=m},!1),this._geometry=new Plane(i,1,1,1,1,1,!0),this.useSmoothing=m,this.primitiveState.cullMode=xi.FRONT}get useSmoothing(){return this.#nc}set useSmoothing(i){this.#nc=i,this.useSmoothing?(this._material.diffuseTextureSampler.minFilter=Vr.LINEAR,this._material.diffuseTextureSampler.magFilter=Vr.LINEAR,this._material.diffuseTextureSampler.mipmapFilter=$r.LINEAR):(this._material.diffuseTextureSampler.minFilter=Vr.NEAREST,this._material.diffuseTextureSampler.magFilter=Vr.NEAREST,this._material.diffuseTextureSampler.mipmapFilter=null)}get width(){return this.#Xr}get height(){return this.#Yr}get geometry(){return this._geometry}set geometry(i){console.error("TextField2D can not change geometry")}get material(){return this._material}set material(i){console.error("TextField2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_TEXT_FIELD_2D",Fa,Va,Ga)}}Object.freeze(TextField2D);var Ha=Object.freeze({__proto__:null,Group2D:Group2D,Group3D:Group3D,InstancingMesh:InstancingMesh,LINE_TYPE:Da,Line2D:class extends Line3D{constructor(i,m=Da.LINEAR,g="#fff"){super(i,m,g),this._material=new LineMaterial(i)}get geometry(){return this._geometry}set geometry(i){consoleAndThrowError("Line2D can not change geometry")}get material(){return this._material}set material(i){consoleAndThrowError("Line2D can not change material")}createCustomMeshVertexShaderModule(){return this.createMeshVertexShaderModuleBASIC("VERTEX_MODULE_LINE_2D",Oa,Na,Ua)}addPoint(i=0,m=0,g=this.baseColor,_=1,b=0,y=0,T=0,w=0){super.addPoint(i,m,0,g,_,b,y,0,T,w,0)}addPointAt(i,m=0,g=0,_=this.baseColor,b=1,y=0,T=0,w=0,P=0){super.addPointAt(i,m,g,0,_,b,y,T,0,w,P,0)}},Line3D:Line3D,Mesh:Mesh,Object3DContainer:Object3DContainer,PARTICLE_EASE:xa,ParticleEmitter:ParticleEmitter,Scene:Scene,SkyBox:class{modelMatrix=create$5();gpuRenderInfo;#rc=!0;#ic;#at;#b;#jn;#Zn;#ac;#sc;#oc=0;#uc=0;#lc=0;constructor(i,m){validateRedGPUContext(i),this.#b=i,this.#ic=new Box(i),this.#ac=m,this.#at=new SkyBoxMaterial(i,this.#ac),this.#jn=new PrimitiveState(this),this.#jn.cullMode=xi.NONE,this.#Zn=new DepthStencilState(this)}get transitionDuration(){return this.#uc}get transitionElapsed(){return this.#lc}get transitionProgress(){return this.#at.transitionProgress}get blur(){return this.#at.blur}set blur(i){validatePositiveNumberRange(1,0,1),this.#at.blur=i}get exposure(){return this.#ac instanceof HDRTexture?this.#ac.exposure:1}set exposure(i){validatePositiveNumberRange(1),this.#ac instanceof HDRTexture&&(this.#ac.exposure=i)}get opacity(){return this.#at.opacity}set opacity(i){validatePositiveNumberRange(1,0,1),this.#at.opacity=i}get skyboxTexture(){return this.#ac}set skyboxTexture(i){i?(this.#ac=i,this.#at.skyboxTexture=i):consoleAndThrowError("SkyBox requires a valid CubeTexture | HDRTexture")}get transitionTexture(){return this.#sc}transition(i,m=300,g){this.#sc=i,this.#at.transitionTexture=i,this.#uc=m,this.#oc=performance.now(),this.#at.transitionAlphaTexture=g}render(i){const{currentRenderPassEncoder:m,startTime:g}=i;if(this.#cc(),this.gpuRenderInfo||this.#lu(this.#b),this.#rc&&(this.gpuRenderInfo.pipeline=this.#hc(),this.#rc=!1,i.numDirtyPipelines++),this.#oc)if(this.#lc=Math.max(g-this.#oc,0),this.#lc>this.#uc)this.#oc=0,this.#at.transitionProgress=0,this.skyboxTexture=this.#sc,this.#at.transitionTexture=null,this.#rc=!0;else{const i=this.#lc/this.#uc;this.#at.transitionProgress=i<0?0:i>1?1:i}const{gpuRenderInfo:_}=this,{vertexUniformBindGroup:b,pipeline:y}=_,{indexBuffer:T}=this.#ic,{triangleCount:w,indexNum:P}=T;m.setPipeline(y),m.setVertexBuffer(0,this.#ic.vertexBuffer.gpuBuffer),m.setBindGroup(1,b),m.setBindGroup(2,this.#at.gpuRenderInfo.fragmentUniformBindGroup),m.setIndexBuffer(T.gpuBuffer,"uint32"),m.drawIndexed(T.indexNum,1,0,0,0),i.num3DObjects++,i.numDrawCalls++,i.numTriangles+=w,i.numPoints+=P}#cc(){const{changedMSAA:i}=this.#b.antialiasingManager;i&&(this.#rc=!0)}#lu(i){const{resourceManager:m}=this.#b,g=m.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||m.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(ma,1)),_=new ArrayBuffer(pa.arrayBufferByteLength),b=new UniformBuffer(i,_);identity$2(this.modelMatrix),scale$5(this.modelMatrix,this.modelMatrix,[1e4,1e4,1e4]),b.writeBuffer(pa.members.modelMatrix,this.modelMatrix);const y={layout:g,label:"VERTEX_BIND_GROUP_DESCRIPTOR_SKYBOX",entries:[{binding:0,resource:{buffer:b.gpuBuffer,offset:0,size:b.size}}]},T=i.gpuDevice.createBindGroup(y);this.gpuRenderInfo=new VertexGPURenderInfo(null,ma.shaderSourceVariant,ma.conditionalBlocks,pa,g,b,T,this.#hc())}#hc(){const{resourceManager:i,gpuDevice:m,antialiasingManager:g}=this.#b,_={code:fa},b={module:i.createGPUShaderModule("VERTEX_MODULE_SKYBOX",_),entryPoint:"main",buffers:this.#ic.gpuRenderInfo.buffers},y=i.getGPUBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT")||i.createBindGroupLayout("SKYBOX_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(ma,1)),T={bindGroupLayouts:[i.getGPUBindGroupLayout(ResourceManager.PRESET_GPUBindGroupLayout_System),y,this.#at.gpuRenderInfo.fragmentBindGroupLayout],label:"SKYBOX_PIPELINE_LAYOUT"},w={label:"PIPELINE_DESCRIPTOR_SKYBOX",layout:m.createPipelineLayout(T),vertex:b,fragment:this.#at.gpuRenderInfo.fragmentState,primitive:this.#jn.state,depthStencil:this.#Zn.state,multisample:{count:g.useMSAA?4:1}};return m.createRenderPipeline(w)}},Sprite2D:Sprite2D,Sprite3D:Sprite3D,SpriteSheet2D:SpriteSheet2D,SpriteSheet3D:SpriteSheet3D,SpriteSheetInfo:SpriteSheetInfo,TextField2D:TextField2D,TextField3D:TextField3D,View2D:View2D,View3D:View3D}),za=Object.freeze({__proto__:null,AmbientLight:AmbientLight,DirectionalLight:DirectionalLight,PointLight:PointLight,SpotLight:SpotLight});function calculatePositionOnCurve(i,m,g,_,b){const y=Math.cos(i),T=Math.sin(i),w=g/m*i,P=Math.cos(w);b[0]=_*(2+P)*.5*y,b[1]=_*(2+P)*T*.5,b[2]=_*Math.sin(w)*.5}var qa=Object.freeze({__proto__:null,Box:Box,Circle:class extends Primitive{#La=function(){return function(i,m,g,_,b,y){const T=[],w=[];T.push(0,0,0,0,0,1,.5,.5);for(let i=0;i<=_;i++){const m=b+i/_*y,w=Math.cos(m),P=Math.sin(m),$=g*w,H=g*P,q=0,W=(w+1)/2,ye=(P+1)/2;T.push($,H,q,0,0,1,W,ye)}for(let i=1;i<=_;i++)w.push(0,i,i+1);return createPrimitiveGeometry(m,T,w,i)}}();constructor(i,m=1,g=32,_=0,b=2*Math.PI){if(super(i),g<3)throw new Error("segments must be 3 or greater");if(m<=0)throw new Error("radius must be greater than 0");if(b<=0)throw new Error("thetaLength must be greater than 0");const y=`PRIMITIVE_CIRCLE_R${m}_S${g}_TS${_}_TL${b}`,T=i.resourceManager.cachedBufferState;let w=T[y];w||(w=T[y]=this.#La(y,i,m,g,_,b)),this._setData(w)}},Cylinder:Cylinder,Ground:class extends Primitive{#La=function(){const i=[],m=[];return function(g,_,b,y,T,w,P,$){const H=b/2,q=y/2,W=Math.floor(T)||1,ye=Math.floor(w)||1,Ge=W+1,Ke=ye+1,Xe=b/W,Ye=y/ye;i.length=0,m.length=0;for(let g=0;g<Ke;g++){const _=g*Ye-q,b=$?(1-g/ye)*P:g/ye*P;for(let y=0;y<Ge;y++){const T=y*Xe-H,w=y/W*P;if(i.push(T,0,_,0,1,0,w,b),g<ye&&y<W){const i=y+Ge*g,_=y+Ge*(g+1),b=y+1+Ge*(g+1),T=y+1+Ge*g;m.push(i,_,T),m.push(_,b,T)}}}return createPrimitiveGeometry(_,i,m,g)}}();constructor(i,m=1,g=1,_=1,b=1,y=1,T=!1){super(i);const w=`PRIMITIVE_GROUND_W${m}_H${g}_WS${_}_HS${b}_UV${y}_FY${T}`,P=i.resourceManager.cachedBufferState;let $=P[w];$||($=P[w]=this.#La(w,i,m,g,_,b,y,T)),this._setData($)}},Plane:Plane,Primitive:Primitive,Sphere:Sphere,Torus:class extends Primitive{#La=function(){return function(i,m,g,_,b,y,T,w){T=T||0;const P=(w=w||2*Math.PI)-T,$=b+1,H=y+1,q=[],W=[];for(let i=0;i<H;++i){const m=i/y,w=m*Math.PI*2,H=Math.sin(w),W=g+H*_,ye=Math.cos(w),Ge=ye*_;for(let i=0;i<$;++i){const g=i/b,_=T+g*P,y=Math.sin(_),w=Math.cos(_),$=y*W,Ke=w*W,Xe=y*H,Ye=w*H;q.push($,Ge,Ke,Xe,ye,Ye,g,1-m)}}for(let i=0;i<y;++i)for(let m=0;m<b;++m){const g=1+m,_=1+i;W.push($*i+m,$*_+m,$*i+g),W.push($*_+m,$*_+g,$*i+g)}return createPrimitiveGeometry(m,q,W,i)}}();constructor(i,m=1,g=.5,_=16,b=16,y=0,T=2*Math.PI){if(super(i),_<3)throw new Error("radialSubdivisions must be 3 or greater");if(b<3)throw new Error("verticalSubdivisions must be 3 or greater");const w=`PRIMITIVE_TORUS_R${m}_T${g}_RSD${_}_BSD${b}_SA${y}_EA${T}`,P=i.resourceManager.cachedBufferState;let $=P[w];$||($=P[w]=this.#La(w,i,m,g,_,b,y,T)),this._setData($)}},TorusKnot:class extends Primitive{#La=function(){return function(i,m,g,_,b,y,T,w){b=Math.floor(b),y=Math.floor(y);const P=[],$=[],H=[],q=[],W=[0,0,0],ye=[0,0,0],Ge=[0,0,0],Ke=[0,0,0],Xe=[0,0,0];for(let i=0;i<=b;++i){const m=i/b*T*Math.PI*2;calculatePositionOnCurve(m,T,w,g,W),calculatePositionOnCurve(m+.01,T,w,g,ye),Ke[0]=ye[0]-W[0],Ke[1]=ye[1]-W[1],Ke[2]=ye[2]-W[2],Xe[0]=ye[0]+W[0],Xe[1]=ye[1]+W[1],Xe[2]=ye[2]+W[2];{const i=Ke[0],m=Ke[1],g=Ke[2],_=Xe[0],b=Xe[1],y=Xe[2];Ge[0]=m*y-g*b,Ge[1]=g*_-i*y,Ge[2]=i*b-m*_}{const i=Ge[0],m=Ge[1],g=Ge[2],_=Ke[0],b=Ke[1],y=Ke[2];Xe[0]=m*y-g*b,Xe[1]=g*_-i*y,Xe[2]=i*b-m*_}{let i=Ge[0],m=Ge[1],g=Ge[2],_=i*i+m*m+g*g;_>0&&(_=1/Math.sqrt(_||1)),Ge[0]=Ge[0]*_,Ge[1]=Ge[1]*_,Ge[2]=Ge[2]*_}{let i=Xe[0],m=Xe[1],g=Xe[2],_=i*i+m*m+g*g;_>0&&(_=1/Math.sqrt(_)),Xe[0]=Xe[0]*_,Xe[1]=Xe[1]*_,Xe[2]=Xe[2]*_}for(let m=0;m<=y;++m){const g=m/y*Math.PI*2,T=-_*Math.cos(g),w=_*Math.sin(g);H[0]=W[0]+(T*Xe[0]+w*Ge[0]),H[1]=W[1]+(T*Xe[1]+w*Ge[1]),H[2]=W[2]+(T*Xe[2]+w*Ge[2]),P.push(H[0],H[1],H[2]);{q[0]=H[0]-W[0],q[1]=H[1]-W[1],q[2]=H[2]-W[2];let i=q[0],m=q[1],g=q[2],_=i*i+m*m+g*g;_>0&&(_=1/Math.sqrt(_)),q[0]=q[0]*_,q[1]=q[1]*_,q[2]=q[2]*_}P.push(q[0],q[1],q[2],i/b,m/y)}}for(let i=1;i<=b;i++)for(let m=1;m<=y;m++){const g=(y+1)*(i-1)+(m-1),_=(y+1)*i+(m-1),b=(y+1)*i+m,T=(y+1)*(i-1)+m;$.push(g,_,T),$.push(_,b,T)}return createPrimitiveGeometry(m,P,$,i)}}();constructor(i,m=1,g=.4,_=64,b=8,y=2,T=3){super(i);const w=`PRIMITIVE_TORUS_NUT_R${m}_T${g}_TS${_}_RS${b}_P${y}_Q${T}`,P=i.resourceManager.cachedBufferState;let $=P[w];$||($=P[w]=this.#La(w,i,m,g,_,b,y,T)),this._setData($)}}});class IBL{#b;#fc;#dc;#mc;#pc;#gc;#xc;#v=createUUID();#Ct="rgba8unorm";#_c;#vc;#bc;constructor(i,m,g=1024,_=512){this.#bc=_,this.#vc=g,this.#b=i,this.#dc=new CubeTexture(i,[],!1,void 0,void 0,this.#Ct),this.#pc=new CubeTexture(i,[],!1,void 0,void 0,this.#Ct),this.#mc=new CubeTexture(i,[],!1,void 0,void 0,this.#Ct),this.#_c="string"==typeof m?new HDRTexture(i,m,i=>{this.#fc=i.gpuTexture,this.#ya()},void 0,g,!0):new CubeTexture(i,m,!0,i=>{this.#fc=i.gpuTexture,this.#ya()})}get exposure(){if(this.#_c instanceof HDRTexture)return this.#_c.exposure}set exposure(i){validatePositiveNumberRange(i),this.#_c instanceof HDRTexture&&(this.#_c.exposure=i)}get envCubeSize(){return this.#vc}get iblCubeSize(){return this.#bc}get irradianceTexture(){return this.#mc}get environmentTexture(){return this.#dc}get iblTexture(){return this.#pc}async#ya(){const{downSampleCubeMapGenerator:i}=this.#b.resourceManager,m=await i.downsampleCubemap(this.#fc,this.#bc);this.#pc.setGPUTextureDirectly(m,`${this.#v}_iblTexture`),this.#dc.setGPUTextureDirectly(this.#fc,`${this.#v}_environmentTexture`);const g=await this.#yc(this.#fc);this.#mc.setGPUTextureDirectly(g,`${this.#v}_irradianceTexture`,!1)}async#yc(i){const{gpuDevice:m}=this.#b,g=m.createTexture({size:[32,32,6],format:this.#Ct,usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.RENDER_ATTACHMENT,dimension:"2d",mipLevelCount:1,label:`${this.#v}_irradianceTexture`}),_=m.createShaderModule({code:"struct VertexOutput { @builtin(position) position:vec4<f32>, @location(0) texCoord:vec2<f32>,\n}\n@vertex fn vs_main(@builtin(vertex_index) vertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2<f32>(-1.0,-1.0),vec2<f32>( 1.0,-1.0),vec2<f32>(-1.0,1.0), vec2<f32>(-1.0,1.0),vec2<f32>( 1.0,-1.0),vec2<f32>( 1.0,1.0) ); var texCoord=array<vec2<f32>,6>( vec2<f32>(1.0,0.0),vec2<f32>(0.0,0.0),vec2<f32>(1.0,1.0), vec2<f32>(1.0,1.0),vec2<f32>(0.0,0.0),vec2<f32>(0.0,1.0) ); var output:VertexOutput; output.position=vec4<f32>(pos[vertexIndex],0.0,1.0); output.texCoord=texCoord[vertexIndex]; return output;\n}\n@group(0) @binding(0) var environmentTexture:texture_cube<f32>;\n@group(0) @binding(1) var environmentSampler:sampler;\n@group(0) @binding(2) var<uniform> faceMatrix:mat4x4<f32>;\nconst PI=3.14159265359;\n@fragment fn fs_main(input:VertexOutput) -> @location(0) vec4<f32> { let ndc=vec2<f32>( input.texCoord.x * 2.0 - 1.0, 1.0 - input.texCoord.y * 2.0  ); let localDirection=vec3<f32>(ndc.x,ndc.y,1.0); let worldDirection=normalize((faceMatrix * vec4<f32>(localDirection,0.0)).xyz); let normal=worldDirection; var irradiance=vec3<f32>(0.0); var up=vec3<f32>(0.0,1.0,0.0); let tangent=normalize(cross(up,normal)); let bitangent=normalize(cross(normal,tangent)); let sampleCount=32u; let invSampleCount=1.0/f32(sampleCount); for (var i=0u;i < sampleCount;i++) { for (var j=0u;j < sampleCount;j++) { let u1=(f32(i) + 0.5) * invSampleCount; let u2=(f32(j) + 0.5) * invSampleCount; let cosTheta=sqrt(u1); let sinTheta=sqrt(1.0 - u1); let phi=2.0 * PI * u2; let cosPhi=cos(phi); let sinPhi=sin(phi); let sampleVec=vec3<f32>( sinTheta * cosPhi, sinTheta * sinPhi, cosTheta ); let worldSample=sampleVec.x * tangent + sampleVec.y * bitangent + sampleVec.z * normal; let sampleColor=textureSample(environmentTexture,environmentSampler,worldSample); irradiance +=sampleColor.rgb * cosTheta; } } irradiance=irradiance * PI * invSampleCount * invSampleCount; return vec4<f32>(irradiance,1.0);\n}\n"}),b=m.createRenderPipeline({layout:"auto",vertex:{module:_,entryPoint:"vs_main"},fragment:{module:_,entryPoint:"fs_main",targets:[{format:this.#Ct}]}}),y=new Sampler(this.#b,{magFilter:Vr.LINEAR,minFilter:Vr.LINEAR,mipmapFilter:$r.LINEAR,addressModeU:Fr.CLAMP_TO_EDGE,addressModeV:Fr.CLAMP_TO_EDGE,addressModeW:Fr.CLAMP_TO_EDGE}),T=this.#Uu();for(let m=0;m<6;m++)await this.#Tc(b,y,m,T[m],i,g);return g}async#Tc(i,m,g,_,b,y){const{gpuDevice:T}=this.#b,w=T.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,label:`irradiance_face_${g}_uniform`});T.queue.writeBuffer(w,0,_);const P=T.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:b.createView({dimension:"cube"})},{binding:1,resource:m.gpuSampler},{binding:2,resource:{buffer:w}}]}),$=T.createCommandEncoder({label:`ibl_irradiance_face_${g}_encoder`}),H=$.beginRenderPass({colorAttachments:[{view:y.createView({dimension:"2d",baseMipLevel:0,mipLevelCount:1,baseArrayLayer:g,arrayLayerCount:1}),clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],label:`irradiance_face_${g}_renderpass`});H.setPipeline(i),H.setBindGroup(0,P),H.draw(6,1,0,0),H.end(),T.queue.submit([$.finish()]),w.destroy()}#Uu(){return[new Float32Array([0,0,-1,0,0,-1,0,0,-1,0,0,0,0,0,0,1]),new Float32Array([0,0,1,0,0,-1,0,0,1,0,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,-1,0,0,1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,0,1,0,0,-1,0,0,0,0,0,1]),new Float32Array([1,0,0,0,0,-1,0,0,0,0,-1,0,0,0,0,1]),new Float32Array([-1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1])]}}Object.freeze(IBL);const Ka={animationSpeed:1,animationX:.1,animationY:.1};class ANoiseTexture extends ManagedResourceBase{cacheKey;mipLevelCount;videoMemorySize;useMipmap;src;#_e;#$t=8;#Ht=8;#fa=1;#ma;#pa;#ga;#xa;#Vi;#Sc;#Xr;#Yr;#wc;#Mc=0;#Rc=1;#Cc=Ka.animationX;#Pc=Ka.animationY;constructor(i,m=1024,g=1024,_){super(i,"managedBitmapTextureState"),validateUintRange(m,2,2048),validateUintRange(g,2,2048),this.#Xr=m,this.#Yr=g,this.#wc=_,this.#ya(i),this.#_e=this.#Ca(i,m,g),this.#Ea(),this.#It()}get animationSpeed(){return this.#Rc}set animationSpeed(i){validatePositiveNumberRange(i),this.#Rc=i,this.updateUniform("animationSpeed",i)}get animationX(){return this.#Cc}set animationX(i){validateNumber(i),this.#Cc=i,this.updateUniform("animationX",i)}get animationY(){return this.#Pc}set animationY(i){validateNumber(i),this.#Pc=i,this.updateUniform("animationY",i)}get uniformInfo(){return this.#Sc}get gpuTexture(){return this.#_e}get time(){return this.#Mc}set time(i){validatePositiveNumberRange(i),this.#Mc=i,this.updateUniform("time",i/1e3)}updateUniform(i,m){this.#Sc.members[i]&&(this.#Vi.writeBuffer(this.#Sc.members[i],m),this.#wc[i]=m),this.#Ea()}updateUniforms(i){Object.entries(i).forEach(([i,m])=>{this.#Sc.members[i]&&(this.#Vi.writeBuffer(this.#Sc.members[i],m),this.#wc[i]=m)}),this.#Ea()}render(i){this.updateUniform("time",i),this.#Ea()}#ya(i){const{gpuDevice:m}=i,g=this.#Ec();this.cacheKey=createUUID(),this.#ma=m.createShaderModule({code:g}),this.#ga=this.#Ma(i),this.#xa=this.#Ra(m,this.#ma,this.#ga);const _=parseWGSL(g);this.#Sc=_.uniforms.uniforms;const b=new ArrayBuffer(this.#Sc.arrayBufferByteLength);this.#Vi=new UniformBuffer(i,b,`${this.constructor.name}_UniformBuffer`),this.#wc.uniformDefaults&&this.updateUniforms({...Ka,...this.#wc.uniformDefaults})}#Ec(){return` ${` struct Uniforms { time:f32, animationSpeed:f32, animationX:f32, animationY:f32, ${this.#wc.uniformStruct||""} }; `} @group(0) @binding(0) var<uniform> uniforms:Uniforms; @group(0) @binding(1) var outputTexture:texture_storage_2d<rgba8unorm,write>;  ${this.#wc.helperFunctions||""} @compute @workgroup_size(${this.#$t},${this.#Ht},${this.#fa}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy); let dimensions:vec2<u32>=textureDimensions(outputTexture);  /* 경계 체크 */ if (index.x >=dimensions.x || index.y >=dimensions.y) { return; }  let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let base_uv=vec2<f32>((f32(index.x) + 0.5)/dimW,(f32(index.y) + 0.5)/dimH); ${this.#wc.mainLogic}  textureStore(outputTexture,index,finalColor); } `}#Ea(){if(!this.#pa)return;const i=this.redGPUContext.gpuDevice.createCommandEncoder(),m=i.beginComputePass();m.setPipeline(this.#xa),m.setBindGroup(0,this.#pa),m.dispatchWorkgroups(Math.ceil(this.#Xr/this.#$t),Math.ceil(this.#Yr/this.#Ht)),m.end(),this.redGPUContext.gpuDevice.queue.submit([i.finish()])}#Ma(i){return i.resourceManager.createBindGroupLayout("NoiseTextureBindGroupLayout",{entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}},{binding:1,visibility:GPUShaderStage.COMPUTE,storageTexture:{format:"rgba8unorm"}}]})}#Ca(i,m,g){const _=i.gpuDevice.createTexture({size:{width:m,height:g},format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING,label:`NoiseTexture_${m}x${g}_${Date.now()}`}),b=_.createView();return this.#pa=this.#Pa(i,this.#ga,b),_}#Pa(i,m,g){return i.gpuDevice.createBindGroup({layout:m,entries:[{binding:0,resource:{buffer:this.#Vi.gpuBuffer,offset:0,size:this.#Vi.gpuBuffer.size}},{binding:1,resource:g}]})}#Ra(i,m,g){return i.createComputePipeline({layout:i.createPipelineLayout({bindGroupLayouts:[g]}),compute:{module:m,entryPoint:"main"}})}#It(){basicRegisterResource(this,new Gr(this))}#Ut(){basicUnregisterResource(this)}}const Wa={MODE_1D:1,MODE_2D:2,MODE_3D:3};Object.freeze(Wa);const mergerNoiseUniformStruct=(i,m)=>[i,m].filter(Boolean).join("\n"),mergerNoiseUniformDefault=(i,m)=>({...i,...m||{}}),mergerNoiseHelperFunctions=(i,m)=>[i,m].filter(Boolean).join("\n");const Xa=Object.values(Wa),Ya={frequency:8,amplitude:1,octaves:1,persistence:.5,lacunarity:2,seed:0,noiseDimension:Wa.MODE_2D};const ja={EUCLIDEAN:0,MANHATTAN:1,CHEBYSHEV:2};Object.freeze(ja);const Za={F1:0,F2:1,F2_MINUS_F1:2,F1_PLUS_F2:3,CELL_ID:4,CELL_ID_COLOR:5};Object.freeze(Za);const Ja=Object.values(ja),Qa=Object.values(Za),es={frequency:8,distanceScale:1,octaves:1,persistence:.5,lacunarity:2,seed:0,distanceType:ja.EUCLIDEAN,outputType:Za.F1,jitter:1,cellIdColorIntensity:1};var ts=Object.freeze({__proto__:null,ANoiseTexture:ANoiseTexture,AUniformBaseBuffer:AUniformBaseBuffer,BitmapTexture:BitmapTexture,CubeTexture:CubeTexture,HDRTexture:HDRTexture,IBL:IBL,IndexBuffer:IndexBuffer,InterleavedStructElement:InterleavedStructElement,NOISE_DIMENSION:Wa,ResourceBase:ResourceBase,ResourceManager:ResourceManager,ResourceState:ResourceState,Sampler:Sampler,ShaderVariantGenerator:ShaderVariantGenerator,SimplexTexture:class extends ANoiseTexture{#Ic=Ya.frequency;#Bc=Ya.amplitude;#Lc=Ya.octaves;#Dc=Ya.persistence;#Uc=Ya.lacunarity;#Ac=Ya.seed;#kc=Ya.noiseDimension;constructor(i,m=1024,g=1024,_){super(i,m,g,{..._,mainLogic:_?.mainLogic||" let uv=vec2<f32>( (base_uv.x + uniforms.time * ( uniforms.animationX * uniforms.animationSpeed )), (base_uv.y + uniforms.time * ( uniforms.animationY * uniforms.animationSpeed ))  ); let noise=getSimplexNoiseByDimension( uv,uniforms );  /* 최종 색상 (그레이스케일) */ let finalColor=vec4<f32>(noise,noise,noise,1.0); ",uniformStruct:mergerNoiseUniformStruct(" noiseDimension:f32, frequency:f32, amplitude:f32, octaves:i32, persistence:f32, lacunarity:f32, seed:f32, ",_?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(Ya,_?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("\nfn mod289_vec3(x:vec3<f32>) -> vec3<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec2(x:vec2<f32>) -> vec2<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_vec4(x:vec4<f32>) -> vec4<f32> { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn mod289_f32(x:f32) -> f32 { return x - floor(x * (1.0/289.0)) * 289.0;\n}\nfn permute(x:vec3<f32>) -> vec3<f32> { return mod289_vec3(((x * 34.0) + 1.0) * x);\n}\nfn permute4(x:vec4<f32>) -> vec4<f32> { return mod289_vec4(((x * 34.0) + 1.0) * x);\n}\nfn permute_f32(x:f32) -> f32 { return mod289_f32(((x * 34.0) + 1.0) * x);\n}\nfn taylorInvSqrt4(r:vec4<f32>) -> vec4<f32> { return 1.79284291400159 - 0.85373472095314 * r;\n}\nfn simplex1D(x:f32) -> f32 { var i=floor(x); let f=fract(x); let g0=select(-1.0,1.0,(permute_f32(i) * 0.024390243902439) >=0.5); let g1=select(-1.0,1.0,(permute_f32(i + 1.0) * 0.024390243902439) >=0.5); let d0=f; let d1=f - 1.0; let t=f * f * f * (f * (f * 6.0 - 15.0) + 10.0); let n0=g0 * d0; let n1=g1 * d1; return mix(n0,n1,t) * 0.395;\n}\nfn simplex2D(v:vec2<f32>) -> f32 { let C=vec4<f32>(0.211324865405187,0.366025403784439,-0.577350269189626,0.024390243902439); var i=floor(v + dot(v,C.yy)); let x0=v - i + dot(i,C.xx); let i1=select(vec2<f32>(0.0,1.0),vec2<f32>(1.0,0.0),x0.x > x0.y); var x12=x0.xyxy + C.xxzz; x12.x=x12.x - i1.x; x12.y=x12.y - i1.y; i=mod289_vec2(i); let p=permute(permute(i.y + vec3<f32>(0.0,i1.y,1.0)) + i.x + vec3<f32>(0.0,i1.x,1.0)); var m=max(0.5 - vec3<f32>(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),vec3<f32>(0.0)); m=m * m; m=m * m; let x=2.0 * fract(p * C.www) - 1.0; let h=abs(x) - 0.5; let ox=floor(x + 0.5); let a0=x - ox; m=m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h)); let g=vec3<f32>(a0.x * x0.x + h.x * x0.y,a0.y * x12.x + h.y * x12.y,a0.z * x12.z + h.z * x12.w); return 130.0 * dot(m,g);\n}\nfn simplex3D(v:vec3<f32>) -> f32 { let C=vec2<f32>(1.0/6.0,1.0/3.0); let D=vec4<f32>(0.0,0.5,1.0,2.0); var i=floor(v + dot(v,C.yyy)); let x0=v - i + dot(i,C.xxx); let g=step(x0.yzx,x0.xyz); let l=1.0 - g; let i1=min(g.xyz,l.zxy); let i2=max(g.xyz,l.zxy); let x1=x0 - i1 + C.xxx; let x2=x0 - i2 + C.yyy; let x3=x0 - D.yyy; i=mod289_vec3(i); let p=permute4(permute4(permute4( i.z + vec4<f32>(0.0,i1.z,i2.z,1.0 )) + i.y + vec4<f32>(0.0,i1.y,i2.y,1.0 )) + i.x + vec4<f32>(0.0,i1.x,i2.x,1.0 )); let n_=0.142857142857; let ns=n_ * D.wyz - D.xzx; let j=p - 49.0 * floor(p * ns.z * ns.z); let x_=floor(j * ns.z); let y_=floor(j - 7.0 * x_ ); let x=x_ *ns.x + ns.yyyy; let y=y_ *ns.x + ns.yyyy; let h=1.0 - abs(x) - abs(y); let b0=vec4<f32>( x.xy,y.xy ); let b1=vec4<f32>( x.zw,y.zw ); let s0=floor(b0)*2.0 + 1.0; let s1=floor(b1)*2.0 + 1.0; let sh=-step(h,vec4<f32>(0.0)); let a0=b0.xzyw + s0.xzyw*sh.xxyy; let a1=b1.xzyw + s1.xzyw*sh.zzww; var p0=vec3<f32>(a0.xy,h.x); var p1=vec3<f32>(a0.zw,h.y); var p2=vec3<f32>(a1.xy,h.z); var p3=vec3<f32>(a1.zw,h.w); let norm=taylorInvSqrt4(vec4<f32>(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3))); p0 *=norm.x; p1 *=norm.y; p2 *=norm.z; p3 *=norm.w; var m=max(0.6 - vec4<f32>(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),vec4<f32>(0.0)); m=m * m; return 42.0 * dot( m*m,vec4<f32>( dot(p0,x0),dot(p1,x1), dot(p2,x2),dot(p3,x3) ) );\n}\nfn fbm1D(pos:f32,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex1D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn fbm(pos:vec2<f32>,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex2D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn fbm3D(pos:vec3<f32>,octaves:i32) -> f32 { var value=0.0; var amplitude=0.5; var frequency=1.0; var max_value=0.0; for (var i=0;i < octaves;i++) { if (i >=octaves) { break;} value +=simplex3D(pos * frequency) * amplitude; max_value +=amplitude; amplitude *=0.5; frequency *=2.0; } return value/max_value;\n}\nfn getSimplexNoise1D(pos:f32,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(pos + uniforms.seed) * current_frequency; let octave_noise=simplex1D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoise2D(uv:vec2<f32>,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(uv + uniforms.seed) * current_frequency; let octave_noise=simplex2D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoise3D(pos:vec3<f32>,uniforms:Uniforms) -> f32 { var total_amplitude:f32=0.0; var noise_value:f32=0.0; var current_amplitude:f32=1.0; var current_frequency:f32=uniforms.frequency; for (var i:i32=0;i < uniforms.octaves;i++) { let noise_pos=(pos + vec3<f32>(uniforms.seed)) * current_frequency; let octave_noise=simplex3D(noise_pos); noise_value +=octave_noise * current_amplitude; total_amplitude +=current_amplitude; current_amplitude *=uniforms.persistence; current_frequency *=uniforms.lacunarity; } noise_value/=total_amplitude; noise_value *=uniforms.amplitude; let normalized_noise=(noise_value + 1.0) * 0.5; return normalized_noise;\n}\nfn getSimplexNoiseByDimension(uv:vec2<f32>,uniforms:Uniforms) -> f32 { if (uniforms.noiseDimension < 1.1) { return getSimplexNoise1D(uv.x,uniforms); } else if (uniforms.noiseDimension < 2.1) { return getSimplexNoise2D(uv,uniforms); } else if (uniforms.noiseDimension < 3.1) { return getSimplexNoise3D(vec3<f32>(uv.x,uv.y,uniforms.seed * 0.1),uniforms); } else { return getSimplexNoise2D(uv,uniforms); }\n}\n",_?.helperFunctions)})}get noiseDimension(){return this.#kc}set noiseDimension(i){Xa.includes(i)?(this.#kc=i,this.updateUniform("noiseDimension",i)):consoleAndThrowError(`Invalid value for noiseDimension. Received ${i}. Expected one of:${Xa.join(",")}`)}get frequency(){return this.#Ic}set frequency(i){validatePositiveNumberRange(i),this.#Ic=i,this.updateUniform("frequency",i)}get amplitude(){return this.#Bc}set amplitude(i){validatePositiveNumberRange(i),this.#Bc=i,this.updateUniform("amplitude",i)}get octaves(){return this.#Lc}set octaves(i){validateUintRange(i,1,8),this.#Lc=i,this.updateUniform("octaves",i)}get persistence(){return this.#Dc}set persistence(i){validatePositiveNumberRange(i,0,1),this.#Dc=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#Uc}set lacunarity(i){validatePositiveNumberRange(i),this.#Uc=i,this.updateUniform("lacunarity",i)}get seed(){return this.#Ac}set seed(i){this.#Ac=i,this.updateUniform("seed",i)}randomizeSeed(){this.seed=1e3*Math.random()}getSettings(){return{frequency:this.#Ic,amplitude:this.#Bc,octaves:this.#Lc,persistence:this.#Dc,lacunarity:this.#Uc,seed:this.#Ac}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.amplitude&&(this.amplitude=i.amplitude),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed)}},StorageBuffer:StorageBuffer,UniformBuffer:UniformBuffer,UniformType:UniformType,VORONOI_DISTANCE_TYPE:ja,VORONOI_OUTPUT_TYPE:Za,VertexBuffer:VertexBuffer,VoronoiTexture:class extends ANoiseTexture{#Ic=es.frequency;#Oc=es.distanceScale;#Lc=es.octaves;#Dc=es.persistence;#Uc=es.lacunarity;#Ac=es.seed;#Nc=es.distanceType;#Gc=es.outputType;#Fc=es.jitter;#Vc=es.cellIdColorIntensity;constructor(i,m=1024,g=1024,_){super(i,m,g,{..._,mainLogic:_?.mainLogic||" let uv=vec2<f32>( (base_uv.x + uniforms.time * (uniforms.animationX * uniforms.animationSpeed)), (base_uv.y + uniforms.time * (uniforms.animationY * uniforms.animationSpeed)) ); var finalColor:vec4<f32>; if (uniforms.outputType==5) { let colorNoise=getVoronoiColorNoise(uv,uniforms); finalColor=vec4<f32>(colorNoise,1.0); } else { let noise=getVoronoiNoise(uv,uniforms); finalColor=vec4<f32>(noise,noise,noise,1.0); } ",uniformStruct:mergerNoiseUniformStruct(" frequency:f32, distanceScale:f32, octaves:i32, persistence:f32, lacunarity:f32, seed:f32, distanceType:i32, outputType:i32, jitter:f32, cellIdColorIntensity:f32, ",_?.uniformStruct),uniformDefaults:mergerNoiseUniformDefault(es,_?.uniformDefaults),helperFunctions:mergerNoiseHelperFunctions("fn hash22(p:vec2<f32>) -> vec2<f32> { var p3=fract(vec3<f32>(p.xyx) * vec3<f32>(0.1031,0.1030,0.0973)); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.xx + p3.yz) * p3.zy);\n}\nfn hash12(p:vec2<f32>) -> f32 { var p3=fract(vec3<f32>(p.xyx) * 0.1031); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.x + p3.y) * p3.z);\n}\nfn euclideanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=a - b; return sqrt(d.x * d.x + d.y * d.y);\n}\nfn manhattanDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=abs(a - b); return d.x + d.y;\n}\nfn chebyshevDistance(a:vec2<f32>,b:vec2<f32>) -> f32 { let d=abs(a - b); return max(d.x,d.y);\n}\nfn calculateDistance(a:vec2<f32>,b:vec2<f32>,distanceType:i32) -> f32 { switch (distanceType) { case 0:{ return euclideanDistance(a,b);} case 1:{ return manhattanDistance(a,b);} case 2:{ return chebyshevDistance(a,b);} default:{ return euclideanDistance(a,b);} }\n}\nfn cellIdToColor(cellId:f32,intensity:f32) -> vec3<f32> { let h=cellId * 6.28318; let s=0.7 + 0.3 * fract(cellId * 7.0); let v=0.6 + 0.4 * fract(cellId * 13.0); let c=v * s; let x=c * (1.0 - abs(((h/1.047198) % 2.0) - 1.0)); let m=v - c; var rgb:vec3<f32>; let sector=i32(h/1.047198) % 6; switch (sector) { case 0:{ rgb=vec3<f32>(c,x,0.0);} case 1:{ rgb=vec3<f32>(x,c,0.0);} case 2:{ rgb=vec3<f32>(0.0,c,x);} case 3:{ rgb=vec3<f32>(0.0,x,c);} case 4:{ rgb=vec3<f32>(x,0.0,c);} default:{ rgb=vec3<f32>(c,0.0,x);} } return (rgb + m) * intensity;\n}\nstruct VoronoiResult { f1:f32, f2:f32, cellId:f32,\n}\nfn voronoiSingle(pos:vec2<f32>,frequency:f32,seed:f32,jitter:f32,distanceType:i32) -> VoronoiResult { let scaledPos=pos * frequency; let gridPos=floor(scaledPos); let localPos=fract(scaledPos); var minDist1=999.0; var minDist2=999.0; var closestCellId=0.0; for (var y=-1;y <=1;y++) { for (var x=-1;x <=1;x++) { let neighborGrid=gridPos + vec2<f32>(f32(x),f32(y)); let randomOffset=hash22(neighborGrid + seed); let jitteredOffset=mix(vec2<f32>(0.5),randomOffset,jitter); let cellPoint=vec2<f32>(f32(x),f32(y)) + jitteredOffset; let dist=calculateDistance(localPos,cellPoint,distanceType); if (dist < minDist1) { minDist2=minDist1; minDist1=dist; closestCellId=hash12(neighborGrid + seed); } else if (dist < minDist2) { minDist2=dist; } } } return VoronoiResult(minDist1,minDist2,closestCellId);\n}\nfn getVoronoiNoise(uv:vec2<f32>,uniforms:Uniforms) -> f32 { var total=0.0; var frequency=uniforms.frequency; var amplitude=1.0; var maxValue=0.0; for (var i=0;i < uniforms.octaves;i++) { let voronoiResult=voronoiSingle( uv, frequency, uniforms.seed + f32(i) * 100.0, uniforms.jitter, uniforms.distanceType ); let F1=voronoiResult.f1 * uniforms.distanceScale; let F2=voronoiResult.f2 * uniforms.distanceScale; let cellId=voronoiResult.cellId; var octaveValue:f32; switch (uniforms.outputType) { case 0:{ octaveValue=F1;} case 1:{ octaveValue=F2;} case 2:{ octaveValue=F2 - F1;} case 3:{ octaveValue=(F1 + F2) * 0.5;} case 4:{ octaveValue=cellId;}  case 5:{ let colorRGB=cellIdToColor(cellId,uniforms.cellIdColorIntensity); octaveValue=(colorRGB.r + colorRGB.g + colorRGB.b)/3.0; } default:{ octaveValue=F1;} } total +=octaveValue * amplitude; maxValue +=amplitude; frequency *=uniforms.lacunarity; amplitude *=uniforms.persistence; } return clamp(total/maxValue,0.0,1.0);\n}\nfn getVoronoiColorNoise(uv:vec2<f32>,uniforms:Uniforms) -> vec3<f32> { if (uniforms.outputType==5) {  let voronoiResult=voronoiSingle( uv, uniforms.frequency, uniforms.seed, uniforms.jitter, uniforms.distanceType ); return cellIdToColor(voronoiResult.cellId,uniforms.cellIdColorIntensity); } else { let grayValue=getVoronoiNoise(uv,uniforms); return vec3<f32>(grayValue,grayValue,grayValue); }\n}\n",_?.helperFunctions)})}get frequency(){return this.#Ic}set frequency(i){validatePositiveNumberRange(i),this.#Ic=i,this.updateUniform("frequency",i)}get distanceScale(){return this.#Oc}set distanceScale(i){validatePositiveNumberRange(i),this.#Oc=i,this.updateUniform("distanceScale",i)}get octaves(){return this.#Lc}set octaves(i){validateUintRange(i,1,8),this.#Lc=i,this.updateUniform("octaves",i)}get persistence(){return this.#Dc}set persistence(i){validatePositiveNumberRange(i,0,1),this.#Dc=i,this.updateUniform("persistence",i)}get lacunarity(){return this.#Uc}set lacunarity(i){validatePositiveNumberRange(i),this.#Uc=i,this.updateUniform("lacunarity",i)}get seed(){return this.#Ac}set seed(i){this.#Ac=i,this.updateUniform("seed",i)}get distanceType(){return this.#Nc}set distanceType(i){Ja.includes(i)?(this.#Nc=i,this.updateUniform("distanceType",i)):consoleAndThrowError(`Invalid value for distanceType. Received ${i}. Expected one of:${Ja.join(",")}`)}get outputType(){return this.#Gc}set outputType(i){Qa.includes(i)?(this.#Gc=i,this.updateUniform("outputType",i)):consoleAndThrowError(`Invalid value for outputType. Received ${i}. Expected one of:${Qa.join(",")}`)}get jitter(){return this.#Fc}set jitter(i){(i<0||i>1)&&consoleAndThrowError(`Jitter must be between 0 and 1. Received:${i}`),validatePositiveNumberRange(i,0,1),this.#Fc=i,this.updateUniform("jitter",i)}get cellIdColorIntensity(){return this.#Vc}set cellIdColorIntensity(i){validatePositiveNumberRange(i),this.#Vc=i,this.updateUniform("cellIdColorIntensity",i)}randomizeSeed(){this.seed=1e3*Math.random()}setEuclideanDistance(){this.distanceType=ja.EUCLIDEAN}setManhattanDistance(){this.distanceType=ja.MANHATTAN}setChebyshevDistance(){this.distanceType=ja.CHEBYSHEV}setF1Output(){this.outputType=Za.F1}setF2Output(){this.outputType=Za.F2}setCrackPattern(){this.outputType=Za.F2_MINUS_F1}setSmoothBlend(){this.outputType=Za.F1_PLUS_F2}setCellIdOutput(){this.outputType=Za.CELL_ID}setCellIdColorOutput(){this.outputType=Za.CELL_ID_COLOR}setCellularPattern(){this.outputType=Za.F1,this.distanceType=ja.EUCLIDEAN,this.jitter=1}setStonePattern(){this.outputType=Za.F2_MINUS_F1,this.distanceType=ja.EUCLIDEAN,this.jitter=.8}setOrganicPattern(){this.distanceType=ja.MANHATTAN,this.jitter=.6}setGridPattern(){this.jitter=0,this.distanceType=ja.EUCLIDEAN}setCrystalPattern(){this.outputType=Za.F2_MINUS_F1,this.distanceType=ja.CHEBYSHEV,this.jitter=.9}setStainedGlassPattern(){this.outputType=Za.CELL_ID_COLOR,this.distanceType=ja.EUCLIDEAN,this.jitter=.7,this.cellIdColorIntensity=.8}setMosaicPattern(){this.outputType=Za.CELL_ID_COLOR,this.distanceType=ja.MANHATTAN,this.jitter=.3,this.cellIdColorIntensity=1}setBiomeMapPattern(){this.outputType=Za.CELL_ID,this.distanceType=ja.EUCLIDEAN,this.jitter=.8,this.frequency=4}getSettings(){return{frequency:this.#Ic,distanceScale:this.#Oc,octaves:this.#Lc,persistence:this.#Dc,lacunarity:this.#Uc,seed:this.#Ac,distanceType:this.#Nc,outputType:this.#Gc,jitter:this.#Fc,cellIdColorIntensity:this.#Vc}}applySettings(i){void 0!==i.frequency&&(this.frequency=i.frequency),void 0!==i.distanceScale&&(this.distanceScale=i.distanceScale),void 0!==i.octaves&&(this.octaves=i.octaves),void 0!==i.persistence&&(this.persistence=i.persistence),void 0!==i.lacunarity&&(this.lacunarity=i.lacunarity),void 0!==i.seed&&(this.seed=i.seed),void 0!==i.distanceType&&(this.distanceType=i.distanceType),void 0!==i.outputType&&(this.outputType=i.outputType),void 0!==i.jitter&&(this.jitter=i.jitter),void 0!==i.cellIdColorIntensity&&(this.cellIdColorIntensity=i.cellIdColorIntensity)}getDistanceTypeName(){return{[ja.EUCLIDEAN]:"Euclidean",[ja.MANHATTAN]:"Manhattan",[ja.CHEBYSHEV]:"Chebyshev"}[this.#Nc]||"Unknown"}getOutputTypeName(){return{[Za.F1]:"F1",[Za.F2]:"F2",[Za.F2_MINUS_F1]:"F2-F1 (Crack)",[Za.F1_PLUS_F2]:"F1+F2 (Blend)",[Za.CELL_ID]:"Cell ID",[Za.CELL_ID_COLOR]:"Cell ID Color"}[this.#Gc]||"Unknown"}},getUniformOffsetByRoundUp:(i,m)=>((i+m-1)/m|0)*m,loadAndCreateBitmapImage:loadAndCreateBitmapImage,parseWGSL:parseWGSL,preprocessWGSL:preprocessWGSL}),ns=Object.freeze({__proto__:null,BlendState:BlendState,DepthStencilState:DepthStencilState,PrimitiveState:PrimitiveState}),rs="\n@group(1) @binding(0)\nvar _sampler:sampler;\n@group(1) @binding(1)\nvar _texture:texture_2d<f32>;\n@fragment\nfn main(@location(0) fragUV:vec2<f32>) -> @location(0) vec4<f32> { var diffuseColor:vec4<f32>=textureSample(_texture,_sampler,fragUV); diffuseColor=vec4<f32>(diffuseColor.rgb,diffuseColor.a); return diffuseColor;\n}\n",is="\nstruct VertexUniforms { modelMatrix:mat4x4<f32>,\n};\n@group(0) @binding(0)\nvar<uniform> vertexUniforms:VertexUniforms;\nstruct VertexOutput { @builtin(position) Position:vec4<f32>, @location(0) fragUV:vec2<f32>,\n};\n@vertex\nfn main(@builtin(vertex_index) VertexIndex:u32) -> VertexOutput { var pos=array<vec2<f32>,6>( vec2( 1.0,1.0), vec2( 1.0,-1.0), vec2(-1.0,-1.0), vec2( 1.0,1.0), vec2(-1.0,-1.0), vec2(-1.0,1.0), ); var uv=array<vec2<f32>,6>( vec2(1.0,0.0), vec2(1.0,1.0), vec2(0.0,1.0), vec2(1.0,0.0), vec2(0.0,1.0), vec2(0.0,0.0), ); var output:VertexOutput; output.Position=vertexUniforms.modelMatrix * vec4<f32>(pos[VertexIndex],0.0,1.0); output.fragUV=uv[VertexIndex]; return output;\n}\n";const as=parseWGSL(is),ss=parseWGSL(rs),os=as.uniforms.vertexUniforms;class FinalRender{#$c=[];#Hc=[];#zc;#qc;#Kc;#Wc;#Xc;#Yc=[];#ka;#jc=[];#Zc=[];#xe;constructor(){}render(i,m){const{sizeManager:g,gpuDevice:_,antialiasingManager:b}=i,{changedMSAA:y,useMSAA:T}=b,{pixelRectObject:w}=g,{width:P,height:$}=w;if(0===P||0===$)return;const H=this.#Jc(i),q=_.createCommandEncoder(),W=q.beginRenderPass(H);W.setViewport(0,0,P,$,0,1),W.setScissorRect(0,0,P,$),this.#zc&&!y||this.#Qc(i),this.#eh(i,W,m.map(i=>{const m=i.colorAttachments[0];return m.postEffectView||m.pickingView||m.resolveTarget||m.view}),P,$,T),W.end(),_.queue.submit([q.finish()])}#eh(i,m,g,_,b,y){const{gpuDevice:T}=i;g.forEach((g,y)=>{const w=i.viewList[y],{x:P,y:$,width:H,height:q}=w.pixelRectObject,W=create$5();Ke(W,0,1,0,1,-1e3,1e3),scale$5(W,W,[1/_,1/b,1]),translate$1(W,W,[H/2+P,b-q/2-$,0]),scale$5(W,W,[H/2,q/2,1]),this.#th(i,y);const ye=this.#$c[y],Ge=this.#Hc[y];T.queue.writeBuffer(ye.gpuBuffer,os.members.modelMatrix.uniformOffset,new os.members.modelMatrix.View(W));if(i.antialiasingManager.changedMSAA||!this.#jc[y]||this.#jc[y].width!==H||this.#jc[y].height!==q||this.#Zc[y]!==g){const i={layout:this.#Wc,label:"FRAGMENT_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:this.#xe.gpuSampler},{binding:1,resource:g}]};this.#Yc[y]=T.createBindGroup(i),this.#jc[y]={width:H||1,height:q||1},this.#Zc[y]=g}m.setPipeline(this.#nh(i)),m.setBindGroup(0,Ge),m.setBindGroup(1,this.#Yc[y]),m.draw(6,1,0,0)})}#Qc(i){const{resourceManager:m}=i;this.#zc=m.createBindGroupLayout("FINAL_RENDER_VERTEX_BIND_GROUP_LAYOUT",getVertexBindGroupLayoutDescriptorFromShaderInfo(as,0)),this.#qc=m.createGPUShaderModule("VERTEX_MODULE_FINAL_RENDER",{code:is}),this.#Kc={module:this.#qc,entryPoint:"main"},this.#Xc=m.createGPUShaderModule("FRAGMENT_MODULE_FINAL_RENDER",{code:rs}),this.#Wc=m.createBindGroupLayout("FINAL_RENDER_BIND_GROUP_LAYOUT",getFragmentBindGroupLayoutDescriptorFromShaderInfo(ss,1)),this.#xe=new Sampler(i,{minFilter:"linear"})}#th(i,m){const{gpuDevice:g}=i;if(!this.#$c[m]){const _=new ArrayBuffer(os.arrayBufferByteLength),b=this.#$c[m]=new UniformBuffer(i,_,`FinalRender_View(${m})_VertexUniform`),y={layout:this.#zc,label:"VERTEX_BIND_GROUP_DESCRIPTOR_FINAL_RENDER",entries:[{binding:0,resource:{buffer:b.gpuBuffer,offset:0,size:b.size}}]};this.#Hc[m]=g.createBindGroup(y)}}#Jc(i){const{backgroundColor:m,gpuContext:g}=i,_=m.rgbaNormal;return{colorAttachments:[{view:g.getCurrentTexture().createView({label:"FINAL_RENDER"}),clearValue:{r:_[0]*_[3],g:_[1]*_[3],b:_[2]*_[3],a:_[3]},loadOp:ti.CLEAR,storeOp:ni.STORE}]}}#nh(i){if(!this.#ka||i.antialiasingManager.changedMSAA){const{gpuDevice:m}=i,g={label:"PIPELINE_DESCRIPTOR_FINAL_RENDER",layout:m.createPipelineLayout({label:"FINAL_RENDER_PIPELINE_LAYOUT",bindGroupLayouts:[this.#zc,this.#Wc]}),vertex:this.#Kc,fragment:{module:this.#Xc,entryPoint:"main",targets:[{format:navigator.gpu.getPreferredCanvasFormat(),blend:{color:{srcFactor:Ar.ONE,dstFactor:Ar.ONE_MINUS_SRC_ALPHA,operation:kr.ADD},alpha:{srcFactor:Ar.ONE,dstFactor:Ar.ONE_MINUS_SRC_ALPHA,operation:kr.ADD}}}]}};this.#ka=m.createRenderPipeline(g)}return this.#ka}}!function(i,m){void 0===m&&(m={});var g=m.insertAt;if("undefined"!=typeof document){var _=document.head||document.getElementsByTagName("head")[0],b=document.createElement("style");b.type="text/css","top"===g&&_.firstChild?_.insertBefore(b,_.firstChild):_.appendChild(b),b.styleSheet?b.styleSheet.cssText=i:b.appendChild(document.createTextNode(i))}}(".RedGPUDebugPanel{background:rgba(0,0,0,.8);bottom:0;color:#fff;font-size:11px;left:0;line-height:1;max-height:100%;min-width:250px;overflow-y:auto;position:fixed;transform:translateZ(0);will-change:transform;z-index:2}.RedGPUDebugPanel::-webkit-scrollbar{width:6px}.RedGPUDebugPanel::-webkit-scrollbar-track{background:#000}.RedGPUDebugPanel::-webkit-scrollbar-thumb{background:#333}.RedGPUDebugPanel::-webkit-scrollbar-thumb:hover{background:#444}.debug-group{line-height:1.4;padding:10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group{background:linear-gradient(90deg,hsla(0,0%,100%,.1),rgba(0,0,0,.01));border:1px solid hsla(0,0%,100%,.16);border-radius:6px;box-shadow:0 0 10px rgba(0,0,0,.16);line-height:1.4;margin:8px 0;padding:6px 10px;b{color:#fdb48d;font-weight:700}}.debug-sub-group-title{color:#e3b096}.debug-item{align-items:center;color:#ccc;display:flex;font-weight:400;gap:10px;justify-content:space-between;transform:translateZ(0);width:100%;will-change:transform;b{color:#fdb48d;font-weight:700}}.boolean-true{background:green}.boolean-false,.boolean-true{border-radius:2px;line-height:1;margin:2px 0;padding:2px 4px}.boolean-false{background:red}.debug-folder{background:rgba(0,0,0,.5);border-bottom:1px solid hsla(0,0%,100%,.05);display:flex;flex-direction:column;width:100%}.debug-folder-title{align-items:center;background:linear-gradient(0deg,rgba(0,0,0,.95),hsla(0,0%,100%,.055));border-bottom:1px solid hsla(0,0%,100%,.025);border-top:1px solid hsla(0,0%,100%,.05);cursor:pointer;display:flex;font-size:12px;justify-content:space-between;line-height:1;padding:10px 8px;width:100%;b{color:#fdb48d;font-size:11px;font-weight:700}}.debug-item-title{color:#888}.debug-item-cache-key,.debug-item-title{font-weight:500;max-width:250px;overflow:hidden;text-overflow:ellipsis;text-shadow:1px 1px 0 rgba(0,0,0,.3)}.debug-item-cache-key{color:#fff;white-space:nowrap}.div-line{background:hsla(0,0%,100%,.06);border-bottom:1px solid transparent;height:1px;margin:10px 0;width:100%}.root-padding{padding:6px;width:100%}.color-box{border:1px solid hsla(0,0%,100%,.2);border-radius:4px;margin:2px;padding:3px}");const createDebugTitle=i=>`<div>${i}</div>`,makeColorDebug=(i,m)=>`\n<div class='debug-item'>\n\x3c!--\t<span class='debug-item-title'>${i}</span> --\x3e\n\t<span class='debug-item-title'></span> \n\t<div style="border:1px solid rgba(255,255,255,0.2);border-radius:4px;background:rgba(${m.rgba});padding:3px;margin:2px"> ${m.rgba}\n\t</div>\n</div>\n`,makeBooleanDebug=(i,m)=>`<span class="${m?"boolean-true":"boolean-false"}">${m?"true":"false"}</span>`,getDebugFormatValue=i=>"boolean"==typeof i?i.toString():"number"==typeof i?i.toLocaleString():i,updateDebugItemValue=(i,m,g,_,b="")=>{const y=i.querySelector(`.${m}`);if(!y)return;const T=`${getDebugFormatValue(g)}${b}`;y.innerHTML!==T&&(y.innerHTML=T,_&&(y.style.background=g?"green":"rgba(255,255,255,0.1)"))};let us=class{dom;#rh;#ih=!1;constructor(i){this.#rh=i,this.dom=document.createElement("div"),this.dom.innerHTML=` <div class="debug-folder">\t <div class="debug-folder-title" style="display:flex;align-items:center;justify-content:space-between;cursor:pointer;"> ${createDebugTitle(`${i} Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)`)} <div class="onoff">${this.#ih?"close":"open"}</div> </div> <div class="item-container" style="display:none"></div> </div>\n`;const m=this.dom.querySelector(".debug-folder"),g=this.dom.querySelector(".item-container");m.addEventListener("click",()=>{this.openYn=!this.openYn,g.style.display=this.#ih?"":"none"})}get openYn(){return this.#ih}set openYn(i){this.#ih=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}update(i,m){const{resourceManager:g}=m,_=g[`managed${this.#rh}State`],{table:b,videoMemory:y,length:T}=_;let w;switch(i.totalUsedVideoMemory+=y,updateDebugItemValue(this.dom,"totalCount",T),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(y)),this.#rh){case"VertexBuffer":if(w=ResourceStateVertexBuffer,w){const{dirtyList:i}=w;i.length&&(this.#ah(i),i.length=0)}break;case"IndexBuffer":if(w=ResourceStateIndexBuffer,w){const{dirtyList:i}=w;i.length&&(this.#ah(i),i.length=0)}break;case"UniformBuffer":w=ResourceStateUniformBuffer,this.#ah(Object.values(b));break;case"StorageBuffer":w=ResourceStateStorageBuffer,this.#ah(Object.values(b))}}#ah(i){const m=this.dom.querySelector(".item-container"),g=new Set,_=this.#rh,b=new Map;m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${_}_`,"");g.add(m),b.set(m,i)}),i.map((i,y)=>{const{useNum:T,buffer:w}=i,{uuid:P,size:$,name:H}=w,q=`${_}_${P}`;let W=b.get(P);W?g.delete(P):(W=document.createElement("div"),W.className=`debug-group ${q}`,W.innerHTML=` <div class='debug-item'> <div> <div class='debug-item-title'><span style="white-space:nowrap">${y} <span class="name"></span></span></div> <div style="font-size:10px">${P}</div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"> <span class='useNum' style="padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span> <span style="white-space:nowrap"><b class="videoMemorySize"></b></span> </div> </div> `,m.appendChild(W)),updateDebugItemValue(W,"name",H),updateDebugItemValue(W,"useNum",T,!0),updateDebugItemValue(W,"videoMemorySize",formatBytes($))});for(let i of g)b.get(i).remove()}};class DebugBufferList{debugStatisticsDomService;constructor(i){this.debugStatisticsDomService=new us(i)}get dom(){return this.debugStatisticsDomService.dom}update(i,m){this.debugStatisticsDomService.update(i,m)}}class ADebugItem{debugStatisticsDomService;constructor(){}get dom(){return this.debugStatisticsDomService.dom}update(i,m,g){this.debugStatisticsDomService.update(i,m)}}class ADebugStatisticsDomService{dom;#ih=!1;constructor(){}get openYn(){return this.#ih}set openYn(i){this.#ih=i,this.dom.querySelector(".onoff").innerHTML=this.openYn?"close":"open"}init(i,m=!1){this.#ih=m,this.dom=document.createElement("div"),this.dom.innerHTML=` <div class="debug-folder">\t <div class="debug-folder-title"> ${i} <div class="onoff">${this.openYn?"close":"open"}</div> </div> <div class="item-container" style="display:${m?"":"none"}"></div> </div>\n`;const g=this.dom.querySelector(".debug-folder-title"),_=this.dom.querySelector(".item-container");g.addEventListener("click",i=>{this.openYn=!this.openYn,_.style.display=this.openYn?"":"none"})}update(i,m){}}const ls=["useMSAA","alphaMode","renderScale"];let cs=class extends ADebugStatisticsDomService{constructor(){super(),this.init(`${createDebugTitle("RedGPUContext")}`,!0),this.#ah()}update(i,m){ls.forEach(i=>this.#sh(m,i)),this.#oh(m)}#ah(){const i=this.dom.querySelector(".item-container"),m=['<div class="debug-group">',...ls.map(i=>this.#uh(i)),this.#uh("width_height"),this.#uh("pixelRectArray"),this.#uh("backgroundColor"),"</div>"];i.innerHTML=m.join("")}#uh(i){return` <div class='debug-item'> ${i} <span class='debug-item-title redGPUContext_${i}'/> </div> `}#sh(i,m){const g=i[m];updateDebugItemValue(this.dom,`redGPUContext_${m}`,"useMSAA"===m?makeBooleanDebug(0,g):getDebugFormatValue(g))}#oh(i){const{sizeManager:m,width:g,height:_,backgroundColor:b}=i,{pixelRectArray:y}=m;updateDebugItemValue(this.dom,"redGPUContext_width_height",`${g},${_}`),updateDebugItemValue(this.dom,"redGPUContext_pixelRectArray",y),updateDebugItemValue(this.dom,"redGPUContext_backgroundColor",makeColorDebug("backgroundColor",b))}};class DebugRedGPUContext extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new cs}}let hs=class extends ADebugStatisticsDomService{#lh;constructor(i){super(),this.#lh=i,this.init(`${createDebugTitle((i?"CubeTexture":"BitmapTexture")+' Num:<span class="totalCount"></span> (<b class="targetVideoMemorySize"></b>)')}`)}update(i,m){const{resourceManager:g}=m,{managedBitmapTextureState:_,managedCubeTextureState:b}=g,{table:y,videoMemory:T,length:w}=this.#lh?b:_;i.totalUsedVideoMemory+=T;const P=Object.values(y);updateDebugItemValue(this.dom,"totalCount",w),updateDebugItemValue(this.dom,"targetVideoMemorySize",formatBytes(T)),this.#ah(P)}getTargetSrc(i){if(i instanceof Gr){const{src:m}=i;return m?m.startsWith("data:")?"base64 texture":m:"null"}{const{srcList:m}=i;return`${m[0]}...`}}getUpdatedTdom(i,m,g,_,b,y){return i||((i=document.createElement("div")).className=`debug-group ${g}`,i.innerHTML=` <div class='debug-item'> <div> <div class='debug-item-title'>${_} <span class="targetSrc">${b}</span></div>  <div class='debug-item-cache-key'>cacheKey:<span class="cacheKey">Place holder for cacheKey</span></div> <div>mipLevelCount:<span class="mipLevelCount"></span>/useMipmap:<span class="useMipmap"></span></div> <div>width:<span class="width"></span>/height:<span class="height"></span></div> </div> <div style="display:flex;flex-direction:column;align-items:center;gap:4px;width:50px"> <span class='useNum' style="padding:2px 4px;border-radius:4px;width:100%;text-align:center"></span> <span><b class="videoMemorySize"></b></span> </div> </div> <div style="font-size:10px">${y}</div> `,m.appendChild(i)),i}updateDebugItems(i,m,g,_,b,y,T,w,P){updateDebugItemValue(i,"mipLevelCount",m),updateDebugItemValue(i,"useMipmap",g),updateDebugItemValue(i,"width",_),updateDebugItemValue(i,"height",b),updateDebugItemValue(i,"useNum",y,!0),updateDebugItemValue(i,"cacheKey",T),updateDebugItemValue(i,"targetSrc",w),updateDebugItemValue(i,"videoMemorySize",formatBytes(P))}#ah(i){const m=this.dom.querySelector(".item-container"),g=new Set,_=this.#lh?"cube_texture":"bitmap_texture";m.querySelectorAll(".debug-group").forEach(i=>{const m=i.className.split(" ")[1].replace(`${_}_`,"");g.add(m)}),i.map((i,b)=>{const{useNum:y,cacheKey:T,texture:w}=i;let P=this.getTargetSrc(i);const{mipLevelCount:$,useMipmap:H,gpuTexture:q,uuid:W,videoMemorySize:ye}=w,{width:Ge,height:Ke}=q||{},Xe=`${_}_${w.uuid}`;let Ye=m.querySelector(`.${Xe}`);Ye=this.getUpdatedTdom(Ye,m,Xe,b,P,W),g.delete(w.uuid),this.updateDebugItems(Ye,$,H,Ge,Ke,y,T,P,ye)});for(let i of g)m.querySelector(`.${_}_${i}`).remove()}};class DebugTextureList extends ADebugItem{constructor(i=!1){super(),this.debugStatisticsDomService=new hs(i)}}const fs=["totalNum3DGroups","totalNum3DObjects","totalNumInstances","totalNumDrawCalls","totalNumTriangles","totalNumPoints","totalUsedVideoMemory"];let ds=class{dom;constructor(){this.dom=document.createElement("div"),this.#ch()}update(i){fs.forEach(m=>{const g=i[m],_="totalUsedVideoMemory"===m?`<b>${formatBytes(g)}</b>`:g;updateDebugItemValue(this.dom,m,_)})}#ch(){const i=this.#ah();this.dom.innerHTML=` <div class="debug-group"> ${createDebugTitle("Total State")} <div>${i}</div>  </div> `}#ah(){return fs.map(i=>"totalUsedVideoMemory"===i?`<div class='debug-item'>${i}<span class='debug-item-title'/><b class="${i}"></b></div>`:`<div class='debug-item'>${i}<span class='debug-item-title ${i}'/></div>`).join("")}};class DebugTotalState extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new ds}}const ms=["usedVideoMemory","viewRenderTime","num3DGroups","num3DObjects","numInstances","numDrawCalls","numTriangles","numPoints"],ps={viewRenderTime:"ms"},gs={camera:"camera.name",scene:"scene.name",useBackgroundColor:"scene.useBackgroundColor",backgroundColor:"scene.backgroundColor",x_y:"x,y",width_height:"width,height"};let xs=class extends ADebugStatisticsDomService{#hh=0;constructor(){super(),this.init(`${createDebugTitle("ViewList")}`,!0)}update(i,m){const{viewList:g,numViews:_}=m;this.#hh!==_&&(this.#fh(g),this.#hh=_),g.forEach((m,g)=>{ms.forEach(_=>this.#sh(m,g,_,i)),this.#oh(m,g)})}#uh(i,m){return` <div class='debug-item'> ${gs[m]||m} <span class='debug-item-title view${i}_${m}'/> </div> `}#fh(i){const m=this.dom.querySelector(".item-container"),g=i.map((i,m)=>{const{name:g}=i,_=ms.map(i=>this.#uh(m,i));return _.push('<div class="debug-sub-group">',this.#uh(m,"x_y"),this.#uh(m,"width_height"),this.#uh(m,"pixelRectArray"),this.#uh(m,"camera"),this.#uh(m,"scene"),this.#uh(m,"useBackgroundColor"),this.#uh(m,"backgroundColor"),"</div>"),`${createDebugTitle(`<div class="debug-sub-group-title">${g}</div>`)}${_.join("")}`});return m.innerHTML=` <div class="debug-group"> ${g.join('<div class="div-line"></div>')} </div> `}#sh(i,m,g,_){const{debugViewRenderState:b}=i,y=`total${g.charAt(0).toUpperCase()}${g.substring(1)}`,T=b[g],w="usedVideoMemory"===g?`<b>${formatBytes(T)}</b>`:T,P=ps[g];_[y]+=T,updateDebugItemValue(this.dom,`view${m}_${g}`,w,!1,P)}#oh(i,m){const{debugViewRenderState:g,rawCamera:_,scene:b}=i,{backgroundColor:y,useBackgroundColor:T}=b,{viewportSize:w}=g,{pixelRectArray:P,x:$,y:H,width:q,height:W}=w;updateDebugItemValue(this.dom,`view${m}_x_y`,`${$},${H}`),updateDebugItemValue(this.dom,`view${m}_width_height`,`${q},${W}`),updateDebugItemValue(this.dom,`view${m}_pixelRectArray`,P),updateDebugItemValue(this.dom,`view${m}_useBackgroundColor`,makeBooleanDebug(0,T)),updateDebugItemValue(this.dom,`view${m}_backgroundColor`,makeColorDebug("backgroundColor",y)),updateDebugItemValue(this.dom,`view${m}_camera`,_.name),updateDebugItemValue(this.dom,`view${m}_scene`,b.name)}};class DebugViewList extends ADebugItem{constructor(){super(),this.debugStatisticsDomService=new xs}}class DebugStatisticsDomService{dom;constructor(){this.dom=document.createElement("div"),this.dom.style.cssText="z-index:1;position:sticky;top:0;background:#000;border-bottom:1px solid rgba(255,255,255,0.06);box-shadow:0 10px 10px rgba(0,0,0,0.5)",this.#ch()}update(i,m,g){const _={elapsedSeconds:i,currentFps:m,averageFps:g};Object.entries(_).forEach(([i,m])=>this.#dh(i,m))}#ch(){this.dom.innerHTML=' <div class="debug-group" > <div class=\'debug-item\'> <span class=\'debug-item-title\'>Frame</span> <span style="text-align:right"> <div class="elapsedSeconds">elapsedSeconds</div> <div class="currentFps">currentFps</div> <div style="color:#fff" class="averageFps">averageFps</div> </span> </div> </div> '}#dh(i,m){const g=this.dom.querySelector(`.${i}`);if(g){const i=m.toLocaleString();g.innerHTML!==i&&(g.innerHTML=i)}}}class Fps extends ADebugItem{#mh;#ph;#gh=0;#xh=0;constructor(){super(),this.debugStatisticsDomService=new DebugStatisticsDomService,this.#ph=performance.now()}update(i,m,g){this.#_h(g);const _=this.#vh(),{elapsedSeconds:b,currentFps:y,averageFps:T}=_;this.debugStatisticsDomService.update(`${b.toLocaleString()}ms`,`${y.toLocaleString()} fps`,`AVG:${T} fps`)}#_h(i){this.#mh=i-this.#ph||16,this.#ph=i,this.#gh++}#vh(){const i=1/(this.#mh/1e3),m=Math.round(i);this.#xh+=i;return{currentFps:m,averageFps:Math.round(this.#xh/this.#gh),elapsedSeconds:this.#mh}}}class DebugRender{fps;debugTotalState;debugViewList;debugRedGPUContext;debugBitmapTextureList;debugCubeTextureList;debugIndexBufferList;debugVertexBufferList;debugUniformBufferList;debugStorageBufferList;totalNum3DGroups;totalNum3DObjects;totalNumDrawCalls;totalNumInstances;totalNumTriangles;totalNumPoints;totalUsedVideoMemory;#bh;constructor(){this.fps=new Fps,this.debugTotalState=new DebugTotalState,this.debugRedGPUContext=new DebugRedGPUContext,this.debugViewList=new DebugViewList,this.debugBitmapTextureList=new DebugTextureList,this.debugCubeTextureList=new DebugTextureList(!0),this.debugIndexBufferList=new DebugBufferList("IndexBuffer"),this.debugVertexBufferList=new DebugBufferList("VertexBuffer"),this.debugUniformBufferList=new DebugBufferList("UniformBuffer"),this.debugStorageBufferList=new DebugBufferList("StorageBuffer"),this.#yh()}render(i,m){i.useDebugPanel?(this.#Th(),this.fps.update(this,i,m),this.debugRedGPUContext.update(this,i,m),this.debugViewList.update(this,i,m),this.debugBitmapTextureList.update(this,i,m),this.debugCubeTextureList.update(this,i,m),this.debugIndexBufferList.update(this,i),this.debugVertexBufferList.update(this,i),this.debugUniformBufferList.update(this,i),this.debugStorageBufferList.update(this,i),this.debugTotalState.update(this,i,m)):this.#Sh(),this.#yh()}#yh(){this.totalNum3DGroups=0,this.totalNum3DObjects=0,this.totalNumInstances=0,this.totalNumDrawCalls=0,this.totalNumTriangles=0,this.totalNumPoints=0,this.totalUsedVideoMemory=0}#Th(){this.#bh||(this.#bh=document.createElement("div"),this.#bh.className="RedGPUDebugPanel",document.body.appendChild(this.#bh),[this.fps.debugStatisticsDomService,this.debugTotalState.debugStatisticsDomService,this.debugRedGPUContext.debugStatisticsDomService,this.debugViewList.debugStatisticsDomService,this.debugVertexBufferList.debugStatisticsDomService,this.debugIndexBufferList.debugStatisticsDomService,this.debugUniformBufferList.debugStatisticsDomService,this.debugStorageBufferList.debugStatisticsDomService,this.debugBitmapTextureList.debugStatisticsDomService,this.debugCubeTextureList.debugStatisticsDomService].forEach(i=>this.#bh.appendChild(i.dom)))}#Sh(){this.#bh&&(this.#bh.remove(),this.#bh=null)}}Object.freeze(DebugRender);const renderListForLayer=(i,m,g="pipeline")=>{let _=0;const b=i.length,{currentRenderPassEncoder:y}=m;for(;_<b;_++){const b=i[_];if(b.gpuRenderInfo){const i=b._geometry,_=b._material;i?m.num3DObjects++:m.num3DGroups++;const{gpuRenderInfo:T}=b,{vertexUniformBindGroup:w}=T;if(T[g]||("shadowPipeline"===g?T.shadowPipeline=b.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("drawDirectionalShadowDepth")?createBasePipeline(b,b.gpuRenderInfo.vertexShaderModule,b.gpuRenderInfo.vertexBindGroupLayout,mi):null:"pickingPipeline"===g&&(T.pickingPipeline=b.gpuRenderInfo.vertexStructInfo.vertexEntries.includes("picking")?createBasePipeline(b,b.gpuRenderInfo.vertexShaderModule,b.gpuRenderInfo.vertexBindGroupLayout,pi):null)),i&&T[g]){y.setPipeline(T[g]);const{gpuBuffer:P}=i.vertexBuffer,{fragmentUniformBindGroup:$}=_.gpuRenderInfo;if(m.prevVertexGpuBuffer!==P&&(y.setVertexBuffer(0,P),m.prevVertexGpuBuffer=P,b.particleBuffers&&(b.particleBuffers.forEach((i,m)=>{y.setVertexBuffer(m+1,i)}),m.prevVertexGpuBuffer=null)),y.setBindGroup(1,w),m.prevFragmentUniformBindGroup!==$&&(y.setBindGroup(2,$),m.prevFragmentUniformBindGroup=$),m.numDrawCalls++,i.indexBuffer){const{indexBuffer:g}=i,{indexNum:_,triangleCount:T,gpuBuffer:w}=g;y.setIndexBuffer(w,"uint32"),b.particleBuffers?y.drawIndexed(_,b.particleNum,0,0,0):y.drawIndexed(_,1,0,0,0),m.numTriangles+=T,m.numPoints+=_}else{const{vertexBuffer:g}=i,{vertexCount:_,triangleCount:b}=g;y.draw(_,1,0,0),m.numTriangles+=b,m.numPoints+=_}}}}m.prevVertexGpuBuffer=null,m.prevFragmentUniformBindGroup=null,m.prevVertexGpuBuffer=null},renderList=(i,m)=>{let g=0;const _=i.length;for(;g<_;g++)i[g].render(m);m.prevVertexGpuBuffer=null,m.prevFragmentUniformBindGroup=null,m.prevVertexGpuBuffer=null};class Renderer{#wh;#Mh;#Rh=new DebugRender;constructor(){}renderFrame(i,m){this.#Mh||(this.#Mh=new FinalRender);const g=[];{let _=0;const b=i.viewList.length;for(;_<b;_++){const b=i.viewList[_];g.push(this.renderView(b,m))}}this.#Mh.render(i,g),i.antialiasingManager.changedMSAA=!1}start(i,m){cancelAnimationFrame(i.currentRequestAnimationFrame);const HD_render=g=>{m?.(g),this.renderFrame(i,g),this.#Rh.render(i,g),i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)};i.currentRequestAnimationFrame=requestAnimationFrame(HD_render)}stop(i){cancelAnimationFrame(i.currentRequestAnimationFrame)}renderView(i,m){const{redGPUContext:g,camera:_,scene:b,pickingManager:y,pixelRectObject:T,axis:w,grid:P,skybox:$,debugViewRenderState:H}=i,{antialiasingManager:q}=g,{useMSAA:W}=q,{shadowManager:ye}=b,{directionalShadowManager:Ge}=ye,{colorAttachment:Ke,depthStencilAttachment:Xe}=this.#Ch(i),Ye={colorAttachments:[Ke],depthStencilAttachment:Xe};_.update?.(i,m);const je=g.gpuDevice.createCommandEncoder();if(i.debugViewRenderState.reset(null,m),T.width&&T.height){if(Ge.shadowDepthTextureView){const m={colorAttachments:[],depthStencilAttachment:{view:Ge.shadowDepthTextureView,depthClearValue:1,depthLoadOp:ti.CLEAR,depthStoreOp:ni.STORE}},g=je.beginRenderPass(m);this.#Ph(i,g,!0,!1),((i,m)=>{const{debugViewRenderState:g,scene:_}=i;g.currentRenderPassEncoder=m;const{shadowManager:b}=_,{directionalShadowManager:y}=b,{castingList:T}=y;renderListForLayer(T,g,"shadowPipeline")})(i,g),g.end(),Ge.resetCastingList()}{const m=je.beginRenderPass(Ye);this.#Ph(i,m,!1,!0),H.currentRenderPassEncoder=m,$&&$.render(H),((i,m)=>{const{debugViewRenderState:g,skybox:_,scene:b}=i;g.currentRenderPassEncoder=m;const{instanceMeshLayer:y}=g,{children:T}=b;_&&_.render(g),renderList(T,g),renderList(y,g)})(i,m),w&&w.render(H),P&&P.render(H),((i,m)=>{const{debugViewRenderState:g,rawCamera:_}=i;g.currentRenderPassEncoder=m;const{alphaLayer:b,transparentLayer:y,particleLayer:T}=g;renderListForLayer(b,g);const{x:w,y:P,z:$}=_;sortTransparentObjects({x:w,y:P,z:$},y),renderListForLayer(y,g),renderListForLayer(T,g)})(i,m),m.end()}if(i.debugViewRenderState.render2PathLayer.length){const{mipmapGenerator:m}=g.resourceManager;let _=i.viewRenderTextureManager.renderPath1ResultTexture,b=W?i.viewRenderTextureManager.colorResolveTexture:i.viewRenderTextureManager.colorTexture;b||(W?console.error("MSAA가 활성화되어 있지만 colorResolveTexture가 정의되지 않았습니다"):console.error("colorTexture가 정의되지 않았습니다")),_||console.error("renderPath1ResultTexture가 정의되지 않았습니다"),je.copyTextureToTexture({texture:b},{texture:_},{width:i.pixelRectObject.width,height:i.pixelRectObject.height,depthOrArrayLayers:1}),m.generateMipmap(_,i.viewRenderTextureManager.renderPath1ResultTextureDescriptor,!0);const y=je.beginRenderPass({colorAttachments:[{...Ke,loadOp:"load"}],depthStencilAttachment:{...Xe,depthLoadOp:ti.LOAD}});let T=i.viewRenderTextureManager.renderPath1ResultTextureView;this.#Ph(i,y,!1,!1,T),((i,m)=>{const{debugViewRenderState:g}=i;g.currentRenderPassEncoder=m;const{render2PathLayer:_}=g;renderListForLayer(_,g)})(i,y),y.end()}if(Ye.colorAttachments[0].postEffectView=i.postEffectManager.render(),y){y.checkTexture(i);const m={colorAttachments:[{view:y.pickingGPUTextureView,clearValue:{r:0,g:0,b:0,a:0},loadOp:ti.CLEAR,storeOp:ni.STORE}],depthStencilAttachment:{view:y.pickingDepthGPUTextureView,depthClearValue:1,depthLoadOp:ti.CLEAR,depthStoreOp:ni.STORE}},g=je.beginRenderPass(m);this.#Ph(i,g,!1,!1),((i,m)=>{const{debugViewRenderState:g,pickingManager:_}=i;g.currentRenderPassEncoder=m;const{castingList:b}=_;renderListForLayer(b,g,"pickingPipeline")})(i,g),g.end()}}return g.gpuDevice.queue.submit([je.finish()]),i.debugViewRenderState.viewRenderTime=performance.now()-i.debugViewRenderState.startTime,y.checkEvents(i,m),Ye}#Ch(i){const{scene:m,redGPUContext:g,viewRenderTextureManager:_}=i,{depthTextureView:b,colorTextureView:y,colorResolveTextureView:T}=_,{useBackgroundColor:w,backgroundColor:P}=m,{antialiasingManager:$}=g,{useMSAA:H}=$,q=P.rgbaNormal,W={view:y,clearValue:w?{r:q[0]*q[3],g:q[1]*q[3],b:q[2]*q[3],a:q[3]}:{r:0,g:0,b:0,a:0},loadOp:ti.CLEAR,storeOp:ni.STORE};H&&(W.resolveTarget=T);return{colorAttachment:W,depthStencilAttachment:{view:b,depthClearValue:1,depthLoadOp:ti.CLEAR,depthStoreOp:ni.STORE}}}#Ph(i,m,g=!1,_=!0,b=null){const{inverseProjectionMatrix:y,pixelRectObject:T,projectionMatrix:w,rawCamera:P,redGPUContext:$,scene:H}=i,{gpuDevice:q}=$,{modelMatrix:W,position:ye}=P,Ge=i.systemUniform_Vertex_StructInfo,Ke=i.systemUniform_Vertex_UniformBuffer.gpuBuffer,{shadowManager:Xe,lightManager:Ye}=H,{directionalShadowManager:je}=Xe,Ze=P instanceof Camera2D;if(g){const i=je.shadowDepthTextureSize,g=je.shadowDepthTextureSize;m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g)}else{const{width:i,height:g}=T;this.#wh&&this.#wh.width===i&&this.#wh.height===g||(m.setViewport(0,0,i,g,0,1),m.setScissorRect(0,0,i,g),this.#wh={width:i,height:g})}Ye.updateViewSystemUniforms(i),je.updateViewSystemUniforms($),i.update(i,g,_,b),m.setBindGroup(0,i.systemUniform_Vertex_UniformBindGroup),[{key:"projectionMatrix",value:w},{key:"projectionCameraMatrix",value:multiply$5(_s,w,W)},{key:"inverseProjectionMatrix",value:y},{key:"resolution",value:[i.pixelRectObject.width,i.pixelRectObject.height]}].forEach(({key:i,value:m})=>{q.queue.writeBuffer(Ke,Ge.members[i].uniformOffset,new Ge.members[i].View(m))}),[{key:"cameraMatrix",value:W},{key:"cameraPosition",value:ye},{key:"nearClipping",value:[Ze?0:P.nearClipping]},{key:"farClipping",value:[Ze?0:P.farClipping]}].forEach(({key:i,value:m})=>{q.queue.writeBuffer(Ke,Ge.members.camera.members[i].uniformOffset,new Ge.members.camera.members[i].View(m))})}}let _s=create$5();var vs=Object.freeze({__proto__:null,isHexColor:isHexColor,isUint:isUint,validateNumber:validateNumber,validateNumberRange:validateNumberRange,validatePositiveNumberRange:validatePositiveNumberRange,validateRedGPUContext:validateRedGPUContext,validateUintRange:validateUintRange});class MeshInfo_OBJ{name;groupName;materialKey;index;position;resultPosition;resultNormal;resultUV;resultInterleave;use;childrenInfo;ableUV;ableNormal;ableLight;mesh;constructor(i,m){this.name=i,this.groupName=m,this.index=[],this.position=[],this.resultPosition=[],this.resultNormal=[],this.resultUV=[],this.resultInterleave=[],this.use=!0,this.childrenInfo={}}createVertexBuffer(i,m){let g={};return this.resultPosition.length&&(g.aVertexPosition=InterleaveType.float32x3),this.resultNormal.length&&(g.aVertexNormal=InterleaveType.float32x3),this.resultUV.length&&(g.aTexcoord=InterleaveType.float32x2),new VertexBuffer(i,new Float32Array(this.resultInterleave.length?this.resultInterleave:this.resultPosition),new InterleavedStruct(g,`InterleavedStruct_${m}}`),void 0,`VertexBuffer_${m}`)}createBufferIndex(i,m){if(this.index.length)return new IndexBuffer(i,this.index,void 0,`IndexBuffer_${m}`)}createColorMaterial(i){return this.resultUV.length&&this.resultNormal.length||this.resultNormal.length?new ColorMaterial(i,"#00ff00"):new ColorMaterial(i,"#0000ff")}}Object.freeze(MeshInfo_OBJ);class TotalPointInfo_OBJ{position=[];normal=[];uv=[];points=[];normalPoints=[];uvPoints=[];constructor(){}}Object.freeze(TotalPointInfo_OBJ);class OBJMTLLoader{complete;parseData;#Eh;#Ih;#Bh;constructor(i,m,g){this.#Eh=getFilePath(m),this.#Ih=getFileName(m),this.#Bh=m,this.#Lh(m,g)}get path(){return this.#Eh}get fileName(){return this.#Ih}get url(){return this.#Bh}#Lh(i,m){fetch(i,{method:"GET",headers:{"Content-Type":"application/x-www-form-urlencoded;charset=UTF-8"}}).then(i=>{if(!i.ok)throw new Error(`HTTP 오류! 상태값:${i.status}`);return i.text()}).then(i=>{this.complete=!0,this.parseData=function(i,m){let g;const _={},b={single:["newmtl","Ns","Ni","d","illum"],multi:["Ka","Kd","Ks"],maps:["map_Kd","map_Ns","map_bump"]};return(m=m.replace(/^\#[\s\S]+?\n/g,"")).split("\n").forEach(m=>{for(const y in b)for(const T of b[y])if(new RegExp(`^(${T} )`).test(m))switch(y){case"single":if("newmtl"===T){const i=m.replace("newmtl ","").trim();g={name:i},_[i]=g}else g[T]=+m.replace(`${T} `,"").trim();break;case"multi":g[T]=m.replace(`${T} `,"").split(" ");break;case"maps":g[T]=i.path+m.replace(`${T} `,"").trim()}}),_}(this,i),m?.(this.parseData)}).catch(i=>{this.complete=!0,this.parseData={},m?.(this.parseData)})}}Object.freeze(OBJMTLLoader);const bs=/^o/,ys=/v( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)( +[\d|\.|\+|\-|e|E]+)/,Ts=/f\s+(([\d]{1,}[\s]?){3,})+/,Ss=/f\s+((([\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,ws=/f\s+((([\d]{1,}\/[\d]{1,}\/[\d]{1,}[\s]?){3,})+)/,Ms=/f\s+((([\d]{1,}\/\/[\d]{1,}[\s]?){3,})+)/;let Rs,Cs;function processMaterialLibrary(i,m,g,_,b){b=new OBJMTLLoader(g,`${m.path}${i.split(" ")[1]}`,i=>{m.mtlLoader=i,m.modelParsingComplete&&(((i,m,g)=>{let _,b,y,T;for(_ in T={},m){let w,P;y=m[_];const{use:$,materialKey:H,mesh:q}=y,{ableLight:W,ableNormal:ye}=y,{resultInterleave:Ge}=y;if($&&Ge.length){let m,_,y;b=g.parseData[H],b&&(b.map_Kd?(T[b.map_Kd]?P=T[b.map_Kd]:(P=new BitmapTexture(i,b.map_Kd),T[b.map_Kd]=P),w=new BitmapMaterial(i,P)):b.Kd&&(m=255*b.Kd[0],_=255*b.Kd[1],y=255*b.Kd[2],w=new ColorMaterial(i,convertRgbToHex(m,_,y))),w&&(b.map_Ns&&(T[b.map_Ns]?P=T[b.map_Ns]:(P=new BitmapTexture(i,b.map_Ns),T[b.map_Ns]=P),w.specularTexture=P),b.map_bump&&(T[b.map_bump]?P=T[b.map_bump]:(P=new BitmapTexture(i,b.map_bump),T[b.map_bump]=P),w.normalTexture=P),void 0!==b.Ns&&(w.shininess=b.Ns),q.material=w))}}})(g,_,b),m.callback&&m.callback(m.result))}),m.mtlLoader=b}function processMaterialUsage(i,m,g){m[g].materialKey=i.split(" ").slice(1).join("").trim()}function processGroup(i,m,g,_){const b=i.split(" ").slice(1).join("").trim();m[g].use=!1;const y=new MeshInfo_OBJ(b,g);y.groupName=g,y.materialKey=b.replace(`${g}_`,""),y.position=Rs.position,_[b]=Rs=y,m[g].childrenInfo[b]=Rs}function processNewObject(i,m,g){const _=i.split(" ").slice(1).join("").trim(),b=new MeshInfo_OBJ(_,_);b.groupName=_,b.materialKey=_,m[_]=Rs=b,g[_]=Rs,Cs=_}function processVertexNormals(i,m,g){const _=i.split(" ");m.push(+_[1],+_[2],+_[3]),g[g.length]=[+_[1],+_[2],+_[3]]}function processTextureCoordinates(i,m,g){const _=i.split(" ");m.push(+_[1],1-_[2]),g[g.length]=[+_[1],1-_[2]]}function processVertex(i,m,g){const _=i.split(" ");m.push(+_[1],+_[2],+_[3]),Rs.position.push(+_[1],+_[2],+_[3]),g[g.length]=[+_[1],+_[2],+_[3]]}function processFaceVertexNormal(i,m,g,_,b){const y=3*(m.length+g.length);i.split(" ").slice(1,4).forEach(i=>{const[m,,g]=i.split("/").map(i=>Number(i)-1),T=_[m],w=b[g],{index:P,resultInterleave:$}=Rs,{resultPosition:H,resultNormal:q,resultUV:W}=Rs;P.push($.length/y),H.push(...T),q.push(...w),$.push(...T,...w)})}function processFaceVertexTextureNormal(i,m,g,_,b,y,T){let w=i.split(" ").slice(1,5);if(4===w.length){let i=w[3];w[3]=w[0],w[4]=w[2],w[5]=i}w.forEach(i=>{const[w,P,$]=i.split("/").map(Number).map(i=>i-1),H=b[w],q=T[P],W=y[$],ye=(m.length?3:0)+(g.length?3:0)+(_.length?2:0),{index:Ge,resultInterleave:Ke}=Rs,{resultPosition:Xe,resultNormal:Ye,resultUV:je}=Rs;Ge.push(Ke.length/ye),m.length&&(Xe.push(...H),Ke.push(...H)),g.length&&(Ye.push(...W),Ke.push(...W)),_.length&&(je.push(...q),Ke.push(...q))})}function processFaceVertexTexture(i,m,g,_,b){i.split(" ").slice(1,4).forEach(i=>{const[y,T]=i.split("/").map(Number).map(i=>i-1),w=_[y];let P;0!==b.length&&(P=b[T]);const $=(m.length?3:0)+(g.length?2:0);Rs.index.push(Rs.resultInterleave.length/$),m.length&&(Rs.resultPosition.push(...w),Rs.resultInterleave.push(...w)),g.length&&(Rs.resultUV.push(...P),Rs.resultInterleave.push(...P))})}function processFaceVertex(i,m){let g=i.split(" ");Rs.resultInterleave=Rs.resultPosition=Rs.position,Rs.index.push(+g[1]-1,+g[2]-1,+g[3]-1),Rs.index.push(+g[1]-1,+g[3]-1,+g[4]-1)}const parserMesh_OBJ=(i,m,g)=>{for(let _ in g){const b=g[_];let y;if(b.use){const m=b.createVertexBuffer(i,_),g=b.createBufferIndex(i,_),T=b.createColorMaterial(i);y=new Mesh(i,new Geometry(i,m,g),T),b.ableUV=Boolean(b.resultUV.length),b.ableNormal=Boolean(b.resultNormal.length),b.ableLight=b.ableUV&&b.ableNormal}else y=new Mesh(i);y.name=_,b.mesh=y,m.addChild(y),parserMesh_OBJ(i,y,b.childrenInfo)}},parserOBJ=(i,m,g)=>{const _=((i,m,g)=>{let _,b;const y=new TotalPointInfo_OBJ,{points:T,normalPoints:w,uvPoints:P}=y,{position:$,normal:H,uv:q}=y;let W,ye;b={},_={};const Ge=g.length;for(W=0;W<Ge;W++)if(bs.test(g[W])){ye=!0;break}if(!ye){const i="objModel"+createUUID();b[i]=Rs=new MeshInfo_OBJ(i,i),_[i]=Rs,Cs=i}const Ke=g.length;for(let y=0;y<Ke;y++){const W=g[y];W.startsWith("mtllib ")?processMaterialLibrary(W,m,i,_,void 0):W.startsWith("usemtl ")?processMaterialUsage(W,_,Cs):W.startsWith("g ")?processGroup(W,b,Cs,_):W.startsWith("o ")?processNewObject(W,b,_):W.startsWith("vn ")?processVertexNormals(W,H,w):W.startsWith("vt ")?processTextureCoordinates(W,q,P):ys.test(W)?processVertex(W,$,T):Ms.test(W)?processFaceVertexNormal(W,$,H,T,w):ws.test(W)?processFaceVertexTextureNormal(W,$,H,q,T,w,P):Ss.test(W)?processFaceVertexTexture(W,$,q,T,P):Ts.test(W)&&processFaceVertex(W)}return{info:_,infoHierarchy:b}})(i,m,(g=g.replace(/^\#[\s\S]+?\n/g,"")).split("\n")),b=_.infoHierarchy;return parserMesh_OBJ(i,m.resultMesh,b),{...m,..._,parseInfoMaterial:m.mtlLoader}};class OBJLoader{modelParsingComplete=!1;resultMesh;result;callback;mtlLoader;#Eh;#Ih;#Bh;constructor(i,m,g){validateRedGPUContext(i),m&&(fetch(m).then(i=>i.text()).then(m=>{this.result=parserOBJ(i,this,m),this.modelParsingComplete=!0,this.resultMesh=m,g&&(this.mtlLoader?this.mtlLoader.complete&&g(this.result):g(this.result))}).catch(i=>console.error("Error:",i)),this.#Eh=getFilePath(m),this.#Ih=getFileName(m),this.#Bh=m,this.mtlLoader=null,this.callback=g,this.resultMesh=new Mesh(i),this.resultMesh.name="instanceOfOBJLoader_"+createUUID(),this.result=null)}get path(){return this.#Eh}get fileName(){return this.#Ih}get url(){return this.#Bh}}Object.freeze(OBJLoader);class AMultiPassPostEffect extends ASinglePassPostEffect{#Dh=[];constructor(i,m){super(i),this.#Dh.push(...m)}get passList(){return this.#Dh}clear(){this.#Dh.forEach(i=>i.clear())}render(i,m,g,_){let b;return this.#Dh.forEach((y,T)=>{T&&(_=b),b=y.render(i,m,g,_)}),b}}Object.freeze(AMultiPassPostEffect);class BrightnessContrast extends ASinglePassPostEffect{#Uh=0;#Ah=0;constructor(i){super(i),this.init(i,"POST_EFFECT_BRIGHTNESS_CONTRAST",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet brightness_value:f32=uniforms.brightness/255.0;\nlet contrast_value:f32=uniforms.contrast/255.0;\nvar tempColor:vec3<f32>;\nif ( contrast_value > 0.0 ) { tempColor=( color.rgb - 0.5 )/( 1.0 - contrast_value ) + 0.5;\n}else { tempColor=( color.rgb - 0.5 ) * ( 1.0 + contrast_value ) + 0.5;\n}\ncolor=vec4<f32>(tempColor + brightness_value,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms { brightness:f32, contrast:f32\n};\n"))}get brightness(){return this.#Uh}set brightness(i){validateNumberRange(i,-150,150),this.#Uh=i,this.updateUniform("brightness",i)}get contrast(){return this.#Ah}set contrast(i){validateNumberRange(i,-50,100),this.#Ah=i,this.updateUniform("contrast",i)}}Object.freeze(BrightnessContrast);class ColorBalance extends ASinglePassPostEffect{#kh=0;#Oh=0;#Nh=0;#Gh=0;#Fh=0;#Vh=0;#$h=0;#Hh=0;#zh=0;#qh=!0;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_BALANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet original_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nlet shadow_weight=1.0 - smoothstep(0.0,0.5,original_luminance);\nlet highlight_weight=smoothstep(0.5,1.0,original_luminance);\nlet midtone_weight=1.0 - shadow_weight - highlight_weight;\nlet cyan_red=shadow_weight * uniforms.shadowCyanRed +\nmidtone_weight * uniforms.midtoneCyanRed +\nhighlight_weight * uniforms.highlightCyanRed;\nlet magenta_green=shadow_weight * uniforms.shadowMagentaGreen +\nmidtone_weight * uniforms.midtoneMagentaGreen +\nhighlight_weight * uniforms.highlightMagentaGreen;\nlet yellow_blue=shadow_weight * uniforms.shadowYellowBlue +\nmidtone_weight * uniforms.midtoneYellowBlue +\nhighlight_weight * uniforms.highlightYellowBlue;\ncolor.r +=cyan_red * 0.01;\ncolor.g +=magenta_green * 0.01;\ncolor.b +=yellow_blue * 0.01;\nlet adjusted_luminance=0.299 * color.r + 0.587 * color.g + 0.114 * color.b;\nif (uniforms.preserveLuminosity==1 && adjusted_luminance > 0.0) { let ratio=original_luminance/adjusted_luminance; color=color * ratio;\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms { shadowCyanRed:f32, shadowMagentaGreen:f32, shadowYellowBlue:f32, midtoneCyanRed:f32, midtoneMagentaGreen:f32, midtoneYellowBlue:f32, highlightCyanRed:f32, highlightMagentaGreen:f32, highlightYellowBlue:f32, preserveLuminosity:u32\n};\n"))}get shadowCyanRed(){return this.#kh}set shadowCyanRed(i){validateNumberRange(i,-100,100),this.#kh=i,this.updateUniform("shadowCyanRed",i)}get shadowMagentaGreen(){return this.#Oh}set shadowMagentaGreen(i){validateNumberRange(i,-100,100),this.#Oh=i,this.updateUniform("shadowMagentaGreen",i)}get shadowYellowBlue(){return this.#Nh}set shadowYellowBlue(i){validateNumberRange(i,-100,100),this.#Nh=i,this.updateUniform("shadowYellowBlue",i)}get midtoneCyanRed(){return this.#Gh}set midtoneCyanRed(i){validateNumberRange(i,-100,100),this.#Gh=i,this.updateUniform("midtoneCyanRed",i)}get midtoneMagentaGreen(){return this.#Fh}set midtoneMagentaGreen(i){validateNumberRange(i,-100,100),this.#Fh=i,this.updateUniform("midtoneMagentaGreen",i)}get midtoneYellowBlue(){return this.#Vh}set midtoneYellowBlue(i){validateNumberRange(i,-100,100),this.#Vh=i,this.updateUniform("midtoneYellowBlue",i)}get highlightCyanRed(){return this.#$h}set highlightCyanRed(i){validateNumberRange(i,-100,100),this.#$h=i,this.updateUniform("highlightCyanRed",i)}get highlightMagentaGreen(){return this.#Hh}set highlightMagentaGreen(i){validateNumberRange(i,-100,100),this.#Hh=i,this.updateUniform("highlightMagentaGreen",i)}get highlightYellowBlue(){return this.#zh}set highlightYellowBlue(i){validateNumberRange(i,-100,100),this.#zh=i,this.updateUniform("highlightYellowBlue",i)}get preserveLuminosity(){return this.#qh}set preserveLuminosity(i){this.#qh=i,this.updateUniform("preserveLuminosity",i)}}Object.freeze(ColorBalance);class ColorTemperatureTint extends ASinglePassPostEffect{#Kh=6500;#Wh=0;#Xh=100;constructor(i){super(i),this.init(i,"POST_EFFECT_COLOR_TEMPERATURE_TINT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet temp=uniforms.temperature;\nvar tempRGB:vec3<f32>;\nif (temp <=6600.0) { tempRGB.r=1.0;\n} else { let t=temp - 6600.0; tempRGB.r=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp <=6600.0) { let t=temp; tempRGB.g=clamp(0.39008157 * log(t) - 0.63184144,0.0,1.0);\n} else { let t=temp - 6600.0; tempRGB.g=clamp(1.292936 * pow(t,-0.1332047),0.0,1.0);\n}\nif (temp >=6600.0) { tempRGB.b=1.0;\n} else if (temp <=1900.0) { tempRGB.b=0.0;\n} else { let t=temp - 1000.0; tempRGB.b=clamp(0.543206789 * log(t) - 1.19625408,0.0,1.0);\n}\nlet neutralTemp:vec3<f32>=vec3<f32>(1.0,1.0,1.0);\nlet tempAdjust:vec3<f32>=tempRGB/neutralTemp;\nlet tintValue=uniforms.tint * 0.01;\nvar tintRGB:vec3<f32>;\nif (tintValue >=0.0) { tintRGB=vec3<f32>(1.0 - tintValue * 0.2,1.0,1.0 - tintValue * 0.2);\n} else { let mag=-tintValue; tintRGB=vec3<f32>(1.0,1.0 - mag * 0.2,1.0);\n}\nlet colorAdjust=tempAdjust * tintRGB;\nlet strength=uniforms.strength * 0.01;\nlet finalAdjust=mix(vec3<f32>(1.0,1.0,1.0),colorAdjust,strength);\ncolor=vec4<f32>(color.rgb * finalAdjust,color.a);\ncolor=vec4<f32>(clamp(color.rgb,vec3<f32>(0.0),vec3<f32>(1.0)),color.a);\ntextureStore(outputTexture,index,color);\n","struct Uniforms { temperature:f32, tint:f32, strength:f32\n};\n")),this.strength=this.#Xh,this.tint=this.#Wh,this.temperature=this.#Kh}get temperature(){return this.#Kh}set temperature(i){validateNumberRange(i,1e3,2e4),this.#Kh=i,this.updateUniform("temperature",i)}get tint(){return this.#Wh}set tint(i){validateNumberRange(i,-100,100),this.#Wh=i,this.updateUniform("tint",i)}get strength(){return this.#Xh}set strength(i){validateNumberRange(i,0,100),this.#Xh=i,this.updateUniform("strength",i)}setWarmTone(){this.temperature=3200,this.tint=-10}setCoolTone(){this.temperature=8e3,this.tint=10}setNeutral(){this.temperature=6500,this.tint=0}setCandleLight(){this.temperature=1900,this.tint=-5}setDaylight(){this.temperature=5600,this.tint=0}setCloudyDay(){this.temperature=7500,this.tint=5}setNeonLight(){this.temperature=9e3,this.tint=15}}Object.freeze(ColorTemperatureTint);class Grayscale extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_GRAYSCALE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index );\nlet gray=(color.r + color.g + color.b)/3.0;\ntextureStore(outputTexture,index,vec4<f32>( gray,gray,gray,1.0) );\n",""))}}Object.freeze(Grayscale);class HueSaturation extends ASinglePassPostEffect{#Yh=0;#jh=0;constructor(i){super(i),this.init(i,"POST_EFFECT_HUE_SATURATION",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet hue_value:f32=uniforms.hue/180.0;\nlet saturation_value:f32=uniforms.saturation/100.0;\nlet angle:f32=hue_value * 3.1415926535897932384626433832795;\nlet s:f32=sin(angle);\nlet c:f32=cos(angle);\nvar weights:vec3<f32>=(vec3<f32>(2.0 * c,-sqrt(3.0) * s - c,sqrt(3.0) * s - c) + 1.0)/3.0;\nlet len:f32=length(color.rgb);\ncolor=vec4<f32>( vec3<f32>( dot(color.rgb,weights.xyz), dot(color.rgb,weights.zxy), dot(color.rgb,weights.yzx) ), color.a\n);\nlet average:f32=(color.r + color.g + color.b)/3.0;\nif (saturation_value > 0.0) { color=vec4<f32>( color.rgb + (average - color.rgb) * (1.0 - 1.0/(1.001 - saturation_value)), color.a );\n} else { color=vec4<f32>( color.rgb + (average - color.rgb) * (-saturation_value), color.a );\n}\ntextureStore(outputTexture,index,color );\n","struct Uniforms { hue:f32, saturation:f32\n};\n"))}get hue(){return this.#Yh}set hue(i){validateNumberRange(i,-180,180),this.#Yh=i,this.updateUniform("hue",i)}get saturation(){return this.#jh}set saturation(i){validateNumberRange(i,-100,100),this.#jh=i,this.updateUniform("saturation",i)}}Object.freeze(HueSaturation);class Invert extends ASinglePassPostEffect{constructor(i){super(i);this.init(i,"POST_EFFECT_INVERT",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\ncolor.r=1.0 - color.r;\ncolor.g=1.0 - color.g;\ncolor.b=1.0 - color.b;\ntextureStore(outputTexture,index,color );\n",""))}}Object.freeze(Invert);class Threshold extends ASinglePassPostEffect{#Zh=128;constructor(i){super(i),this.init(i,"POST_EFFECT_THRESHOLD",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nvar color:vec4<f32>=textureLoad( sourceTexture,index,);\nlet threshold_value:f32=uniforms.threshold/255.0;\nvar v=0.0;\nif( 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b >=threshold_value) { v=1.0;\n}\ncolor=vec4<f32>(v,v,v,color.a);\ntextureStore(outputTexture,index,color );\n","struct Uniforms { threshold:f32\n};\n")),this.threshold=this.#Zh}get threshold(){return this.#Zh}set threshold(i){validateNumberRange(i,1,255),this.#Zh=i,this.updateUniform("threshold",i)}}Object.freeze(Threshold);class Vibrance extends ASinglePassPostEffect{#Jh=0;#jh=0;constructor(i){super(i),this.init(i,"POST_EFFECT_VIBRANCE",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nlet originalColor=color;\nlet luminance=0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\nif (uniforms.saturation !=0.0) { let saturationFactor=1.0 + uniforms.saturation * 0.01; color=vec4<f32>( mix(luminance,color.r,saturationFactor), mix(luminance,color.g,saturationFactor), mix(luminance,color.b,saturationFactor), color.a );\n}\nif (uniforms.vibrance !=0.0) { let maxComponent=max(max(color.r,color.g),color.b); let minComponent=min(min(color.r,color.g),color.b); let currentSaturation=maxComponent - minComponent; let protectionFactor=1.0/(1.0 + exp(6.0 * (currentSaturation - 0.6))); var skinToneProtection=1.0; if (color.r > color.g && color.g > color.b) { let skinToneAmount=(color.r - color.b)/max(color.r,0.001); skinToneProtection=1.0 - smoothstep(0.3,0.8,skinToneAmount) * 0.7; } let finalProtection=protectionFactor * skinToneProtection; let vibranceStrength=uniforms.vibrance * 0.01 * finalProtection; let vibranceFactor=1.0 + vibranceStrength; color=vec4<f32>( mix(luminance,color.r,vibranceFactor), mix(luminance,color.g,vibranceFactor), mix(luminance,color.b,vibranceFactor), color.a );\n}\ncolor=clamp(color,vec4<f32>(0.0),vec4<f32>(1.0));\ntextureStore(outputTexture,index,color);\n","struct Uniforms { vibrance:f32, saturation:f32\n};\n"))}get vibrance(){return this.#Jh}set vibrance(i){validateNumberRange(i,-100,100),this.#Jh=i,this.updateUniform("vibrance",i)}get saturation(){return this.#jh}set saturation(i){validateNumberRange(i,-100,100),this.#jh=i,this.updateUniform("saturation",i)}}Object.freeze(Vibrance);const Ps=[0,0,0,0,0,1,0,0,0,0,0,0],Es=[0,-1,0,0,-1,5,-1,0,0,-1,0,0],Is=[1,1,1,0,1,1,1,0,1,1,1,0],Bs=[0,1,0,0,1,-4,1,0,0,1,0,0],Ls=[-2,-1,0,0,-1,1,1,0,0,1,2,0];class Convolution extends ASinglePassPostEffect{static NORMAL=Ps;static SHARPEN=Es;static BLUR=Is;static EDGE=Bs;static EMBOSE=Ls;#Qh=Is;constructor(i){super(i),this.init(i,"POST_EFFECT_CONVOLUTION",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy );\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet perPX=vec2<f32>(1.0/dimW,1.0/dimH);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nvar color:vec4<f32>=vec4<f32>(0.0);\nlet kernelWeight_value:f32=uniforms.kernelWeight;\nlet kernel_value:mat3x3<f32>=uniforms.kernel;\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,-1)) * kernel_value[0][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,-1)) * kernel_value[0][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,-1)) * kernel_value[0][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,0)) * kernel_value[1][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,0)) * kernel_value[1][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,0)) * kernel_value[1][2];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(-1,1)) * kernel_value[2][0];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(0,1)) * kernel_value[2][1];\ncolor +=textureLoad(sourceTexture,index + vec2<i32>(1,1)) * kernel_value[2][2];\ntextureStore(outputTexture,index,vec4<f32>((color/kernelWeight_value).rgb,1.0) );\n","struct Uniforms { kernelWeight:f32, kernel:mat3x3<f32>\n};\n")),this.kernel=this.#Qh}get kernel(){return this.#Qh}set kernel(i){this.#Qh=i;let m=0;for(const i in this.#Qh)m+=this.#Qh[i];this.updateUniform("kernelWeight",m),this.updateUniform("kernel",i)}}Object.freeze(Convolution);class Blur extends AMultiPassPostEffect{#ef;constructor(i){super(i,[new Convolution(i)]),this.#ef=this.passList[0],this.#ef.kernel=Convolution.BLUR}render(i,m,g,_){return this.#ef.render(i,m,g,_)}}Object.freeze(Blur);class BlurX extends ASinglePassPostEffect{#J=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_X",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=(t + offset - 0.5)/loopSize; var weight=1.0 - abs(percent); var ix=clamp((f32(global_id.x) + f32(size_value * percent)),0.0,dimW - 1.0); let delta=vec2<i32>(i32(ix),i32(global_id.y)); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms { size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#J}get size(){return this.#J}set size(i){validateNumberRange(i,0),this.#J=i,this.updateUniform("size",i)}}Object.freeze(BlurX);class BlurY extends ASinglePassPostEffect{#J=32;constructor(i){super(i),this.init(i,"POST_EFFECT_BLUR_Y",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet dimensions=textureDimensions(sourceTexture);\nlet dimH=f32(dimensions.y);\nlet size_value:f32=uniforms.size;\nvar sum:vec4<f32>=vec4<f32>(0.0,0.0,0.0,0.0);\nvar offset=random(global_id,0.0);\nvar total=0.0;\nlet loopSize=10.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=(t + offset - 0.5)/loopSize; var weight=1.0 - abs(percent); var iy=clamp((f32(global_id.y) + f32(size_value * percent)),0.0,dimH - 1.0); let delta=vec2<i32>(i32(global_id.x),i32(iy)); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\nsum/=total;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum);\n","struct Uniforms { size:f32,\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.size=this.#J}get size(){return this.#J}set size(i){validateNumberRange(i,0),this.#J=i,this.updateUniform("size",i)}}Object.freeze(BlurY);class DirectionalBlur extends ASinglePassPostEffect{#tf=15;#nf=0;constructor(i){super(i),this.init(i,"POST_EFFECT_DIRECTIONAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet direction=vec2<f32>(uniforms.directionX,uniforms.directionY);\nlet dirLength=length(direction);\nlet normalizedDir=select(vec2<f32>(0.0),direction/dirLength,dirLength > 0.0);\nlet dir=normalizedDir * uniforms.amount;\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=1.0 - (t + offset - 0.5)/loopSize; var weight=3.0 * (percent - percent * percent); let deltaPercent=dir * percent; let delta=vec2<i32>( i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)), i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms { amount:f32, directionX:f32, directionY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#tf,this.angle=this.#nf}get angle(){return this.#nf}set angle(i){validateNumber(i),this.#nf=i%360,this.#rf()}get amount(){return this.#tf}set amount(i){validateNumberRange(i,0),this.#tf=i,this.updateUniform("amount",i)}#rf(){const i=this.#nf*Math.PI/180,m=Math.cos(i),g=Math.sin(i);this.updateUniform("directionX",m),this.updateUniform("directionY",g)}}Object.freeze(DirectionalBlur);class GaussianBlur extends AMultiPassPostEffect{#J=32;constructor(i){super(i,[new BlurX(i),new BlurY(i)])}get size(){return this.#J}set size(i){this.#J=i,this.passList.forEach(m=>m.size=i)}}Object.freeze(GaussianBlur);class RadialBlur extends ASinglePassPostEffect{#tf=50;#Lr=0;#Dr=0;#if=16;constructor(i){super(i),this.init(i,"POST_EFFECT_RADIAL_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet toPixel=global_id_vec - center;\nlet distance=length(toPixel);\nlet angle=atan2(toPixel.y,toPixel.x);\nlet maxDist=min(dimW,dimH) * 0.5;\nlet normalizedDistance=distance/maxDist;\nlet rotationAngle=uniforms.amount * normalizedDistance * 0.001;\nlet sampleCount=i32(uniforms.sampleCount);\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar totalWeight=0.0;\nfor (var i=0;i < sampleCount;i=i + 1) { let t=f32(i)/f32(sampleCount - 1); let sampleAngle=angle + (t - 0.5) * rotationAngle; let samplePos=center + vec2<f32>( cos(sampleAngle) * distance, sin(sampleAngle) * distance ); var weight=1.0 - abs(t - 0.5) * 1.5; weight=max(weight,0.1); let sampleCoord=vec2<i32>( i32(clamp(samplePos.x,0.0,dimW - 1.0)), i32(clamp(samplePos.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,sampleCoord).xyzw * weight; totalWeight +=weight;\n}\nlet centerFalloff=smoothstep(0.0,maxDist * 0.2,distance);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).xyzw;\nlet blurredColor=sum/totalWeight;\nlet finalColor=mix(originalColor,blurredColor,centerFalloff);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),finalColor);\n","struct Uniforms { amount:f32, centerX:f32, centerY:f32, sampleCount:f32\n};\n")),this.amount=this.#tf,this.sampleCount=this.#if}get centerX(){return this.#Lr}set centerX(i){validateNumber(i),this.#Lr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Dr}set centerY(i){validateNumber(i),this.#Dr=i,this.updateUniform("centerY",i)}get amount(){return this.#tf}set amount(i){validateNumberRange(i,0),this.#tf=i,this.updateUniform("amount",i)}get sampleCount(){return this.#if}set sampleCount(i){validateNumberRange(i,4),this.#if=i,this.updateUniform("sampleCount",i)}}Object.freeze(RadialBlur);class ZoomBlur extends ASinglePassPostEffect{#tf=64;#Lr=0;#Dr=0;constructor(i){super(i),this.init(i,"POST_EFFECT_ZOOM_BLUR",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet dimensionsVec=vec2<f32>(dimW,dimH);\nlet amount=uniforms.amount/min(dimW,dimH);\nconst loopSize=30.0;\nlet offset=random(global_id,0.0);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet dir=(center - global_id_vec) * amount;\nvar sum=vec4<f32>(0.0,0.0,0.0,0.0);\nvar total=0.0;\nfor (var t=-loopSize;t <=loopSize;t=t + 1.0) { var percent=1.0 - (t + offset - 0.5)/loopSize; var weight=3.0 * (percent - percent * percent); let deltaPercent=dir * percent; let delta=vec2<i32>( i32(clamp(global_id_vec.x + deltaPercent.x,0.0,dimW - 1.0)), i32(clamp(global_id_vec.y + deltaPercent.y,0.0,dimH - 1.0)) ); sum +=textureLoad(sourceTexture,delta).xyzw * weight; total +=weight;\n}\ntextureStore(outputTexture,vec2<i32>(global_id.xy),sum/total);\n","struct Uniforms { amount:f32, centerX:f32, centerY:f32\n};\nfn random(id:vec3<u32>,delta:f32) -> f32 { let seed:u32=((id.x << 16) | (id.y & 0xFFFF)) ^ (id.z * 0x63641362); let t:vec3<f32>=vec3<f32>(f32(seed & 0xFF),f32((seed >> 8) & 0xFF),f32(seed >> 16)); return delta + fract(sin(dot(t,vec3<f32>(12.9898,78.233,12.9898))) * 43758.5453);\n}\n")),this.amount=this.#tf}get centerX(){return this.#Lr}set centerX(i){validateNumber(i),this.#Lr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Dr}set centerY(i){validateNumber(i),this.#Dr=i,this.updateUniform("centerY",i)}get amount(){return this.#tf}set amount(i){validateNumberRange(i,0),this.#tf=i,this.updateUniform("amount",i)}}Object.freeze(ZoomBlur);const Ds={filmGrainIntensity:.02,filmGrainResponse:.9,filmGrainScale:2.5,coloredGrain:.3,grainSaturation:.4},Us={filmGrainIntensity:.05,filmGrainResponse:.8,filmGrainScale:3,coloredGrain:.5,grainSaturation:.6},As={filmGrainIntensity:.12,filmGrainResponse:.6,filmGrainScale:4,coloredGrain:.7,grainSaturation:.8},ks={filmGrainIntensity:.08,filmGrainResponse:.7,filmGrainScale:5,coloredGrain:.9,grainSaturation:1};class FilmGrain extends ASinglePassPostEffect{static SUBTLE=Ds;static MEDIUM=Us;static HEAVY=As;static VINTAGE=ks;#af=As.filmGrainIntensity;#sf=As.filmGrainResponse;#of=As.filmGrainScale;#uf=As.coloredGrain;#lf=As.grainSaturation;#Mc=0;#cf=1;constructor(i){super(i),this.#cf=window?.devicePixelRatio||1,this.init(i,"POST_EFFECT_FILM_GRAIN",createBasicPostEffectCode(this,"let index=vec2<i32>(global_id.xy);\nlet dimensions:vec2<u32>=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet originalColor=textureLoad(sourceTexture,index);\nlet filmGrainIntensity_value:f32=uniforms.filmGrainIntensity;\nlet filmGrainResponse_value:f32=uniforms.filmGrainResponse;\nlet filmGrainScale_value:f32=uniforms.filmGrainScale;\nlet coloredGrain_value:f32=uniforms.coloredGrain;\nlet grainSaturation_value:f32=uniforms.grainSaturation;\nlet time_value:f32=uniforms.time;\nlet devicePixelRatio_value:f32=uniforms.devicePixelRatio;\nif (filmGrainIntensity_value <=0.0) { textureStore(outputTexture,index,originalColor); return;\n}\nlet baseScale=max(filmGrainScale_value,0.1);\nlet scaledUV=uv * vec2<f32>(dimW,dimH) * devicePixelRatio_value/baseScale;\nlet timeOffset=vec2<f32>( fract(time_value * 0.0317) * 100.0, fract(time_value * 0.0271) * 100.0\n);\nlet grainCoord=scaledUV + timeOffset;\nlet sampleOffset=1.0/baseScale;\nlet noiseR=(filmGrainNoise(grainCoord) + filmGrainNoise(grainCoord + vec2<f32>(sampleOffset,0.0)) + filmGrainNoise(grainCoord + vec2<f32>(0.0,sampleOffset)))/3.0;\nlet noiseG=filmGrainNoise(grainCoord + vec2<f32>(127.1,311.7));\nlet noiseB=filmGrainNoise(grainCoord + vec2<f32>(269.5,183.3));\nlet monoGrain=(noiseR + noiseG + noiseB)/3.0;\nlet colorGrain=vec3<f32>(noiseR,noiseG,noiseB);\nvar grainColor=mix(vec3<f32>(monoGrain),colorGrain,coloredGrain_value);\nlet grainLuminance=dot(grainColor,vec3<f32>(0.299,0.587,0.114));\ngrainColor=mix(vec3<f32>(grainLuminance),grainColor,grainSaturation_value);\nlet luminance=dot(originalColor.rgb,vec3<f32>(0.299,0.587,0.114));\nlet luminanceWeight=pow(max(luminance,0.01),filmGrainResponse_value);\nlet grainIntensity=filmGrainIntensity_value * luminanceWeight;\nlet grain=grainColor * grainIntensity;\nlet finalColor=originalColor.rgb + grain;\nlet outputColor=vec4<f32>(clamp(finalColor,vec3<f32>(0.0),vec3<f32>(1.0)),originalColor.a);\ntextureStore(outputTexture,index,outputColor);\n","struct Uniforms { filmGrainIntensity:f32, filmGrainResponse:f32, filmGrainScale:f32, coloredGrain:f32, grainSaturation:f32, time:f32, devicePixelRatio:f32\n};\nfn filmGrainNoise(coord:vec2<f32>) -> f32 { let p=floor(coord); let f=fract(coord); let u=f * f * f * (f * (f * 6.0 - 15.0) + 10.0); let a=hash(p); let b=hash(p + vec2<f32>(1.0,0.0)); let c=hash(p + vec2<f32>(0.0,1.0)); let d=hash(p + vec2<f32>(1.0,1.0)); let noise=mix(mix(a,b,u.x),mix(c,d,u.x),u.y); return (noise - 0.5) * 2.0;\n}\nfn hash(p:vec2<f32>) -> f32 { var p3=fract(vec3<f32>(p.xyx) * 0.1031); p3 +=dot(p3,p3.yzx + 33.33); return fract((p3.x + p3.y) * p3.z);\n}\n")),this.#hf()}get filmGrainIntensity(){return this.#af}set filmGrainIntensity(i){this.#af=Math.max(0,Math.min(1,i)),this.updateUniform("filmGrainIntensity",this.#af)}get filmGrainResponse(){return this.#sf}set filmGrainResponse(i){this.#sf=Math.max(0,Math.min(2,i)),this.updateUniform("filmGrainResponse",this.#sf)}get filmGrainScale(){return this.#of}set filmGrainScale(i){this.#of=Math.max(.1,Math.min(20,i)),this.updateUniform("filmGrainScale",this.#of)}get coloredGrain(){return this.#uf}set coloredGrain(i){this.#uf=Math.max(0,Math.min(1,i)),this.updateUniform("coloredGrain",this.#uf)}get grainSaturation(){return this.#lf}set grainSaturation(i){this.#lf=Math.max(0,Math.min(2,i)),this.updateUniform("grainSaturation",this.#lf)}applyPreset(i){this.#af=i.filmGrainIntensity,this.#sf=i.filmGrainResponse,this.#of=i.filmGrainScale,this.#uf=i.coloredGrain,this.#lf=i.grainSaturation,this.#hf()}update(i){this.#Mc+=i,this.updateUniform("time",this.#Mc)}#hf(){this.updateUniform("filmGrainIntensity",this.#af),this.updateUniform("filmGrainResponse",this.#sf),this.updateUniform("filmGrainScale",this.#of),this.updateUniform("coloredGrain",this.#uf),this.updateUniform("grainSaturation",this.#lf),this.updateUniform("time",this.#Mc),this.updateUniform("devicePixelRatio",this.#cf)}}Object.freeze(FilmGrain);class Fog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#ff=Fog.EXPONENTIAL;#df=.05;#mf=4.5;#pf=50;#gf;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_FOG",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nvar sceneColor:vec4<f32>=textureLoad(sourceTexture,coord);\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth,systemUniforms.camera.nearClipping,systemUniforms.camera.farClipping);\nlet fogFactor=calculateFogFactor(linearDepth,systemUniforms.camera.farClipping);\nlet finalColor=mix(uniforms.fogColor.rgb,sceneColor.rgb,fogFactor);\ntextureStore(outputTexture,coord,vec4<f32>(finalColor,sceneColor.a));\n","struct Uniforms { fogType:u32, density:f32, nearDistance:f32, farDistance:f32, fogColor:vec3<f32>, padding1:f32,\n};\nfn linearizeDepth(depth:f32,cameraNear:f32,cameraFar:f32) -> f32 { let z=depth * 2.0 - 1.0; return (2.0 * cameraNear * cameraFar)/ (cameraFar + cameraNear - z * (cameraFar - cameraNear));\n}\nfn calculateFogFactor(linearDepth:f32,cameraFar:f32) -> f32 { let u_density=uniforms.density; let u_fogType=uniforms.fogType; let u_nearDistance=uniforms.nearDistance; let u_farDistance=uniforms.farDistance; let isBackground=linearDepth >=(cameraFar * 0.99); if (isBackground) { return 1.0 - u_density; } let distance=max(0.0,linearDepth - u_nearDistance); let maxDistance=u_farDistance - u_nearDistance; let normalizedDistance=clamp(distance/max(0.1,maxDistance),0.0,1.0); var fogFactor:f32; if (u_fogType==0u) { fogFactor=exp(-u_density * normalizedDistance * 10.0); } else { let expValue=u_density * normalizedDistance * 5.0; fogFactor=exp(-(expValue * expValue)); } return clamp(fogFactor,0.0,1.0);\n}\n")),this.#gf=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#gf.rgbNormal)}),this.fogType=this.#ff,this.density=this.#df,this.nearDistance=this.#mf,this.farDistance=this.#pf}get fogType(){return this.#ff}set fogType(i){validateNumberRange(i,0,1),this.#ff=Math.floor(i),this.updateUniform("fogType",this.#ff)}get density(){return this.#df}set density(i){validateNumberRange(i,0,1),this.#df=Math.max(0,Math.min(1,i)),this.updateUniform("density",this.#df)}get nearDistance(){return this.#mf}set nearDistance(i){validateNumberRange(i,0),this.#mf=Math.max(.1,i),this.#pf<=this.#mf&&(this.#pf=this.#mf+.1,this.updateUniform("farDistance",this.#pf)),this.updateUniform("nearDistance",this.#mf)}get farDistance(){return this.#pf}set farDistance(i){validateNumberRange(i,0),this.#pf=Math.max(this.#mf+.1,i),this.updateUniform("farDistance",this.#pf)}get fogColor(){return this.#gf}render(i,m,g,_){return super.render(i,m,g,_)}}Object.freeze(Fog);class HeightFog extends ASinglePassPostEffect{static EXPONENTIAL=0;static EXPONENTIAL_SQUARED=1;#ff=HeightFog.EXPONENTIAL;#df=1;#gf;#xf=0;#_f=100;#vf=.1;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_HEIGHT_FOG",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet screenCoord=vec2<f32>( global_id_vec.x/dimW,global_id_vec.y/dimH );\nvar depth:f32=1.0;\nif (dimensions.x > u32(global_id.x) && dimensions.y > u32(global_id.y)) { depth=textureLoad(depthTexture,vec2<i32>(global_id.xy),0);\n}\nlet fogFactor=calculateHeightFogFactor(screenCoord,depth);\nlet originalColor=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).rgb;\nlet foggedColor=mix(uniforms.fogColor,originalColor,fogFactor);\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(foggedColor,1.0));\n","struct Uniforms { fogType:u32, density:f32, baseHeight:f32, falloff:f32, maxHeight:f32, fogColor:vec3<f32>, padding1:f32, padding2:f32,\n};\nfn isFiniteValue(value:f32) -> bool { return value==value;\n}\nfn isFiniteVec3(v:vec3<f32>) -> bool { return isFiniteValue(v.x) && isFiniteValue(v.y) && isFiniteValue(v.z);\n}\nfn reconstructWorldPositionUltraPrecise(screenCoord:vec2<f32>,depth:f32) -> vec3<f32> { let ndcX=fma(screenCoord.x,2.0,-1.0); let ndcY=fma(-screenCoord.y,2.0,1.0); let safeDepth=clamp(depth,1e-7,1.0 - 1e-7); let ndc=vec3<f32>(ndcX,ndcY,safeDepth); let clipPos=vec4<f32>(ndc,1.0); let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos; let epsilon=1e-6; let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon); let worldPos=worldPos4.xyz/w; let maxCoord=1e6; let stabilizedX=clamp(worldPos.x,-maxCoord,maxCoord); let stabilizedY=clamp(worldPos.y,-maxCoord,maxCoord); let stabilizedZ=clamp(worldPos.z,-maxCoord,maxCoord); let finalPos=vec3<f32>(stabilizedX,stabilizedY,stabilizedZ); return select(vec3<f32>(0.0,0.0,0.0),finalPos,isFiniteVec3(finalPos));\n}\nfn calculateHeightFogFactor(screenCoord:vec2<f32>,depth:f32) -> f32 { let backgroundThreshold=1.0 - 1e-5; let isBackground=depth >=backgroundThreshold; var pixelWorldHeight:f32; if (isBackground) { let rayDirection=getRayDirectionMaxPrecision(screenCoord); pixelWorldHeight=getSkyboxHeightMaxPrecision(rayDirection); } else { let worldPos=reconstructWorldPositionUltraPrecise(screenCoord,depth); pixelWorldHeight=worldPos.y; } return calculateAbsoluteHeightFogMaxPrecision(pixelWorldHeight);\n}\nfn getSkyboxHeightMaxPrecision(rayDirection:vec3<f32>) -> f32 { let u_baseHeight=uniforms.baseHeight; let u_maxHeight=uniforms.maxHeight; let rayY=clamp(rayDirection.y,-0.999,0.999); let upThreshold=0.08; let downThreshold=-0.015; let transitionRange=upThreshold - downThreshold; let safeTransitionRange=max(transitionRange,1e-6); if (rayY > upThreshold) { return u_maxHeight + 25.0; } else if (rayY < downThreshold) { return fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight); } else { let normalizedT=(rayY - downThreshold)/safeTransitionRange; let smoothT=smoothstep(0.0,1.0,normalizedT); let lowValue=fma(u_maxHeight - u_baseHeight,0.03,u_baseHeight); let highValue=u_maxHeight + 25.0; return fma(smoothT,highValue - lowValue,lowValue); }\n}\nfn calculateAbsoluteHeightFogMaxPrecision(worldHeight:f32) -> f32 { let u_baseHeight=uniforms.baseHeight; let u_maxHeight=uniforms.maxHeight; let u_density=uniforms.density; let u_falloff=uniforms.falloff; let u_fogType=uniforms.fogType; if (!isFiniteValue(worldHeight)) { return 1.0; } let heightRange=u_maxHeight - u_baseHeight; let safeHeightRange=max(heightRange,1e-3); let margin=fma(safeHeightRange,0.18,1.2); let extendedBaseHeight=u_baseHeight - margin; let extendedMaxHeight=u_maxHeight + margin; let extendedRange=extendedMaxHeight - extendedBaseHeight; if (worldHeight <=extendedBaseHeight || worldHeight >=extendedMaxHeight) { return 1.0; } let safeExtendedRange=max(extendedRange,1e-3); if (safeExtendedRange <=0.3) { return 1.0; } let normalizedHeight=clamp( (worldHeight - extendedBaseHeight)/safeExtendedRange, 0.0, 1.0 ); let centerOffset=normalizedHeight - 0.5; let edgeFactor=fma(-abs(centerOffset),0.25,1.0); let heightFactor=1.0 - normalizedHeight; let safeHeightFactor=max(heightFactor,1e-4); let safeFalloff=clamp(u_falloff,0.05,1.8); let expPower=fma(safeFalloff,0.73,1.05); var fogDensity:f32; if (u_fogType==0u) { fogDensity=pow(safeHeightFactor,expPower); fogDensity=smoothstep(0.0,1.0,fogDensity); } else { let expResult=pow(safeHeightFactor,expPower); fogDensity=expResult * expResult; fogDensity=smoothstep(0.0,1.0,fogDensity); } let densityWithEdge=fogDensity * edgeFactor; let safeDensity=clamp(u_density,0.0,4.0); let finalFogAmount=fma(densityWithEdge,safeDensity,0.0) * 0.42; let result=clamp(1.0 - finalFogAmount,0.0,1.0); return select(1.0,result,isFiniteValue(result));\n}\nfn getRayDirectionMaxPrecision(screenCoord:vec2<f32>) -> vec3<f32> { let centeredX=fma(screenCoord.x,1.0,-0.5); let centeredY=fma(screenCoord.y,1.0,-0.5); let ndcX=centeredX * 2.0; let ndcY=-(centeredY * 2.0); let ndc=vec3<f32>(ndcX,ndcY,1.0); let clipPos=vec4<f32>(ndc,1.0); let worldPos4=systemUniforms.inverseProjectionCameraMatrix * clipPos; let epsilon=1e-6; let w=select(worldPos4.w,epsilon,abs(worldPos4.w) < epsilon); let worldPos=worldPos4.xyz/w; let cameraPos=systemUniforms.camera.cameraPosition; let rayDir=worldPos - cameraPos; let rayLength=length(rayDir); let minLength=1e-6; if (rayLength < minLength) { return vec3<f32>(0.0,0.0,1.0); } let normalizedRay=rayDir/rayLength; let safeRayX=clamp(normalizedRay.x,-0.999,0.999); let safeRayY=clamp(normalizedRay.y,-0.999,0.999); let safeRayZ=clamp(normalizedRay.z,-0.999,0.999); let safeRay=vec3<f32>(safeRayX,safeRayY,safeRayZ); let finalRayLength=length(safeRay); let isValidRay=finalRayLength > 1e-6 && isFiniteValue(finalRayLength); if (isValidRay) { let finalRay=safeRay/finalRayLength; return select(vec3<f32>(0.0,0.0,1.0),finalRay,isFiniteVec3(finalRay)); } return vec3<f32>(0.0,0.0,1.0);\n}\n")),this.#gf=new ColorRGB(178,178,204,()=>{this.updateUniform("fogColor",this.#gf.rgbNormal)}),this.fogType=this.#ff,this.density=this.#df,this.baseHeight=this.#xf,this.thickness=this.#_f,this.falloff=this.#vf}get fogType(){return this.#ff}set fogType(i){validateNumberRange(i,0,1),this.#ff=Math.floor(i),this.updateUniform("fogType",this.#ff)}get density(){return this.#df}set density(i){validateNumberRange(i,0,5),this.#df=Math.max(0,Math.min(5,i)),this.updateUniform("density",this.#df)}get fogColor(){return this.#gf}get baseHeight(){return this.#xf}set baseHeight(i){validateNumberRange(i),this.#xf=i,this.updateUniform("baseHeight",this.#xf),this.updateUniform("maxHeight",this.maxHeight)}get maxHeight(){return this.#xf+this.#_f}get thickness(){return this.#_f}set thickness(i){validateNumberRange(i,.1),this.#_f=Math.max(.1,i),this.updateUniform("maxHeight",this.#xf+this.#_f)}get falloff(){return this.#vf}set falloff(i){validateNumberRange(i,0,2),this.#vf=Math.max(.001,Math.min(2,i)),this.updateUniform("falloff",this.#vf)}render(i,m,g,_){return super.render(i,m,g,_)}}Object.freeze(HeightFog);class ChromaticAberration extends ASinglePassPostEffect{#Xh=.015;#Lr=.5;#Dr=.5;#vf=1;constructor(i){super(i),this.init(i,"POST_EFFECT_CHROMATIC_ABERRATION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet uv=vec2<f32>(f32(global_id.x),f32(global_id.y))/vec2<f32>(dimW,dimH);\nlet center=vec2<f32>(uniforms.centerX,uniforms.centerY);\nlet offset=uv - center;\nlet distance=length(offset);\nlet distortion=uniforms.strength * pow(distance,uniforms.falloff);\nlet redOffset=uv + offset * distortion * vec2<f32>(-1.0,-1.0);\nlet greenOffset=uv;\nlet blueOffset=uv + offset * distortion * vec2<f32>(1.0,1.0);\nvar finalColor=vec3<f32>(0.0);\nif (redOffset.x >=0.0 && redOffset.x <=1.0 && redOffset.y >=0.0 && redOffset.y <=1.0) { let redCoord=vec2<i32>( i32(clamp(redOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(redOffset.y * dimH,0.0,dimH - 1.0)) ); finalColor.r=textureLoad(sourceTexture,redCoord).r;\n}\nlet greenCoord=vec2<i32>( i32(clamp(greenOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(greenOffset.y * dimH,0.0,dimH - 1.0))\n);\nfinalColor.g=textureLoad(sourceTexture,greenCoord).g;\nif (blueOffset.x >=0.0 && blueOffset.x <=1.0 && blueOffset.y >=0.0 && blueOffset.y <=1.0) { let blueCoord=vec2<i32>( i32(clamp(blueOffset.x * dimW,0.0,dimW - 1.0)), i32(clamp(blueOffset.y * dimH,0.0,dimH - 1.0)) ); finalColor.b=textureLoad(sourceTexture,blueCoord).b;\n}\nlet originalAlpha=textureLoad(sourceTexture,vec2<i32>(global_id.xy)).a;\ntextureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(finalColor,originalAlpha));\n","struct Uniforms { strength:f32, centerX:f32, centerY:f32, falloff:f32\n};\n")),this.strength=this.#Xh,this.centerX=this.#Lr,this.centerY=this.#Dr,this.falloff=this.#vf}get strength(){return this.#Xh}set strength(i){validateNumberRange(i,0),this.#Xh=i,this.updateUniform("strength",i)}get centerX(){return this.#Lr}set centerX(i){validateNumberRange(i,0,1),this.#Lr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Dr}set centerY(i){validateNumberRange(i,0,1),this.#Dr=i,this.updateUniform("centerY",i)}get falloff(){return this.#vf}set falloff(i){validateNumberRange(i,0,5),this.#vf=i,this.updateUniform("falloff",i)}}Object.freeze(ChromaticAberration);class DOFCoC extends ASinglePassPostEffect{#bf=15;#yf=1.4;#Tf=32;#Sf=.1;#wf=1e3;constructor(i){super(i),this.useDepthTexture=!0,this.init(i,"POST_EFFECT_DOF_COC",createBasicPostEffectCode(this,"let index=vec2<u32>(global_id.xy);\nlet coord=vec2<i32>(global_id.xy);\nlet originalColor=textureLoad(sourceTexture,coord).xyzw;\nlet depth=textureLoad(depthTexture,coord,0);\nlet linearDepth=linearizeDepth(depth);\nlet coc=calculateCoC(linearDepth);\nlet encodedCoC=encodeCoC(coc);\ntextureStore(outputTexture,coord,vec4<f32>(originalColor.rgb,encodedCoC));\n","struct Uniforms { focusDistance:f32, aperture:f32, maxCoC:f32, nearPlane:f32, farPlane:f32,\n};\nfn linearizeDepth(depth:f32) -> f32 { let z=depth * 2.0 - 1.0; return (2.0 * uniforms.nearPlane * uniforms.farPlane)/ (uniforms.farPlane + uniforms.nearPlane - z * (uniforms.farPlane - uniforms.nearPlane));\n}\nfn encodeCoC(coc:f32) -> f32 { return (coc + 1.0) * 0.5;\n}\nfn calculateCoC(linearDepth:f32) -> f32 { let subjectDistance=linearDepth; let focalLength=50.0; let focusRange=uniforms.focusDistance * 0.15; let transitionRange=uniforms.focusDistance * 0.35; let distanceFromFocus=abs(subjectDistance - uniforms.focusDistance); if (distanceFromFocus < focusRange) { let focusFactor=smoothstep(0.0,focusRange,distanceFromFocus); return mix(0.0,0.02,focusFactor); } var rawCoC:f32; var signedCoC:f32; if (subjectDistance < uniforms.focusDistance) { let nearDistance=uniforms.focusDistance - subjectDistance; let nearFactor=nearDistance/uniforms.focusDistance; rawCoC=(uniforms.aperture * focalLength * nearDistance)/ (subjectDistance * (uniforms.focusDistance - focalLength)); rawCoC=rawCoC * (1.0 + nearFactor * 1.5); signedCoC=-(rawCoC/uniforms.maxCoC); let absCoC=abs(signedCoC); if (absCoC > 0.05) { signedCoC=-min(1.0,absCoC * smoothstep(0.05,0.3,absCoC) * 1.5); } if (distanceFromFocus < transitionRange) { let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus); signedCoC=mix(0.0,signedCoC,transitionFactor); } return clamp(signedCoC,-1.0,0.0); } else { let farDistance=subjectDistance - uniforms.focusDistance; rawCoC=(uniforms.aperture * focalLength * farDistance)/ (subjectDistance * (uniforms.focusDistance + focalLength)); rawCoC=rawCoC * (1.0 + farDistance * 0.08); signedCoC=rawCoC/uniforms.maxCoC; let absCoC=abs(signedCoC); if (absCoC > 0.1) { signedCoC=min(1.0,absCoC * smoothstep(0.1,0.5,absCoC) * 1.2); } if (distanceFromFocus < transitionRange) { let transitionFactor=smoothstep(focusRange,transitionRange,distanceFromFocus); signedCoC=mix(0.0,signedCoC,transitionFactor); } return clamp(signedCoC,0.0,1.0); }\n}\n")),this.focusDistance=this.#bf,this.aperture=this.#yf,this.maxCoC=this.#Tf,this.nearPlane=this.#Sf,this.farPlane=this.#wf}get focusDistance(){return this.#bf}set focusDistance(i){validateNumberRange(i),this.#bf=i,this.updateUniform("focusDistance",i)}get aperture(){return this.#yf}set aperture(i){validateNumberRange(i),this.#yf=i,this.updateUniform("aperture",i)}get maxCoC(){return this.#Tf}set maxCoC(i){validateNumberRange(i),this.#Tf=i,this.updateUniform("maxCoC",i)}get nearPlane(){return this.#Sf}set nearPlane(i){validateNumberRange(i),this.#Sf=i,this.updateUniform("nearPlane",i)}get farPlane(){return this.#wf}set farPlane(i){validateNumberRange(i),this.#wf=i,this.updateUniform("farPlane",i)}}Object.freeze(DOFCoC);class DOFUnified extends ASinglePassPostEffect{#Mf=16;#Rf=24;#Cf=1;#Pf=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:_}=this,b=` struct Uniforms { nearBlurSize:f32, farBlurSize:f32, nearStrength:f32, farStrength:f32, };  @group(0) @binding(0) var sourceTexture:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var cocTexture:texture_storage_2d<rgba8unorm,read>; @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; @group(1) @binding(1) var<uniform> uniforms:Uniforms;  /* CoC 디코딩 함수 */ fn decodeCoC(encoded:f32) -> f32 { /* 0~1 범위를 -1~1 범위로 복원 */ return encoded * 2.0 - 1.0; }  @compute @workgroup_size(${m},${g},${_}) fn main (@builtin(global_invocation_id) global_id:vec3<u32>) { let index=vec2<u32>(global_id.xy); let dimensions:vec2<u32>=textureDimensions(sourceTexture);  if (index.x >=dimensions.x || index.y >=dimensions.y) { return; }  let originalColor=textureLoad(sourceTexture,index).rgb; let encodedCoC=textureLoad(cocTexture,index).a;  /* CoC 값 디코딩 */ let cocValue=decodeCoC(encodedCoC);  /* CoC 임계값 체크 */ if (abs(cocValue) < 0.005) { textureStore(outputTexture,index,vec4<f32>(originalColor,1.0)); return; }  var finalColor=originalColor;  /* Near blur 처리 (CoC < 0) */ if (cocValue < 0.0) { let nearBlur=calculateBlur(index,abs(cocValue),uniforms.nearBlurSize,true); /* Near strength 블렌딩 개선 - 더 강한 효과 */ let nearBlend=saturate(pow(abs(cocValue) * uniforms.nearStrength,0.7)); finalColor=mix(originalColor,nearBlur,nearBlend); } /* Far blur 처리 (CoC > 0) */ else if (cocValue > 0.0) { let farBlur=calculateBlur(index,cocValue,uniforms.farBlurSize,false); let rawBlend=cocValue * uniforms.farStrength; let farBlend=saturate(smoothstep(0.0,0.8,rawBlend)); finalColor=mix(originalColor,farBlur,farBlend); }  textureStore(outputTexture,index,vec4<f32>(finalColor,1.0)); }  fn calculateBlur(center:vec2<u32>,intensity:f32,maxBlurSize:f32,isNear:bool) -> vec3<f32> { let dimensions:vec2<u32>=textureDimensions(sourceTexture); let blurRadius=intensity * maxBlurSize;  /* 최소 블러 반경 조정 */ if (blurRadius < 0.3) { return textureLoad(sourceTexture,center).rgb; }  var sum:vec3<f32>=vec3<f32>(0.0); var totalWeight=0.0;  let maxRadius=min(blurRadius,maxBlurSize); /* Near blur에 더 많은 샘플 적용 */ let samples=select(8,16,isNear);/* near=16,far=8 */ let angleStep=6.28318530718/f32(samples);  let originalColor=textureLoad(sourceTexture,center).rgb; /* Near blur에 더 강한 중앙 가중치 */ let centerWeight=select(0.4,0.2,isNear);/* near=0.2,far=0.4 */ sum +=originalColor * centerWeight; totalWeight +=centerWeight;  /* 방사형 샘플링 */ for (var i=0;i < samples;i=i + 1) { for (var r=1.0;r <=maxRadius;r=r + 1.0) { let angle=f32(i) * angleStep; let offset=vec2<f32>(cos(angle) * r,sin(angle) * r);  let samplePos=vec2<i32>( clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1), clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1) );  let sampleColor=textureLoad(sourceTexture,vec2<u32>(samplePos)).rgb; let sampleEncodedCoC=textureLoad(cocTexture,vec2<u32>(samplePos)).a; let sampleCoC=decodeCoC(sampleEncodedCoC);/* 디코딩 추가 */  /* 가우시안 가중치 */ var weight=exp(-r * r/(maxRadius * maxRadius * 0.5));  /* CoC 기반 가중치 조정 */ if (isNear) { /* Near blur:더 강한 조건으로 가중치 증가 */ if (sampleCoC < 0.0 && abs(sampleCoC) >=intensity * 0.5) { weight *=1.5; } } else { /* Far blur:기존 조건 유지 */ if (sampleCoC > 0.0 && sampleCoC >=intensity * 0.7) { weight *=1.2; } }  sum +=sampleColor * weight; totalWeight +=weight; } }  /* 추가 근거리 샘플링 (near blur만) */ if (isNear && maxRadius > 2.0) { let additionalSamples=8; let innerRadius=maxRadius * 0.3; let innerAngleStep=6.28318530718/f32(additionalSamples);  for (var i=0;i < additionalSamples;i=i + 1) { let angle=f32(i) * innerAngleStep + 0.5;/* 약간의 오프셋 */ let offset=vec2<f32>(cos(angle) * innerRadius,sin(angle) * innerRadius);  let samplePos=vec2<i32>( clamp(i32(f32(center.x) + offset.x),0,i32(dimensions.x) - 1), clamp(i32(f32(center.y) + offset.y),0,i32(dimensions.y) - 1) );  let sampleColor=textureLoad(sourceTexture,vec2<u32>(samplePos)).rgb; let weight=0.8;  sum +=sampleColor * weight; totalWeight +=weight; } }  if (totalWeight > 0.0) { return sum/totalWeight; } else { return originalColor; } } `;this.init(i,"POST_EFFECT_DOF_UNIFIED",{msaa:b,nonMsaa:b}),this.nearBlurSize=this.#Mf,this.farBlurSize=this.#Rf,this.nearStrength=this.#Cf,this.farStrength=this.#Pf}get nearBlurSize(){return this.#Mf}set nearBlurSize(i){validateNumberRange(i),this.#Mf=i,this.updateUniform("nearBlurSize",i)}get farBlurSize(){return this.#Rf}set farBlurSize(i){validateNumberRange(i),this.#Rf=i,this.updateUniform("farBlurSize",i)}get nearStrength(){return this.#Cf}set nearStrength(i){validateNumberRange(i),this.#Cf=i,this.updateUniform("nearStrength",i)}get farStrength(){return this.#Pf}set farStrength(i){validateNumberRange(i),this.#Pf=i,this.updateUniform("farStrength",i)}render(i,m,g,_,b){return super.render(i,m,g,_,b)}}Object.freeze(DOFUnified);class DOF extends AMultiPassPostEffect{#Ef;#If;#bf=15;#yf=2.8;#Tf=25;#Sf=.1;#wf=1e3;#Mf=15;#Rf=15;#Cf=1;#Pf=1;constructor(i){super(i,[new DOFCoC(i),new DOFUnified(i)]),this.#Ef=this.passList[0],this.#If=this.passList[1],this.#Ef.focusDistance=this.#bf,this.#Ef.aperture=this.#yf,this.#Ef.maxCoC=this.#Tf,this.#Ef.nearPlane=this.#Sf,this.#Ef.farPlane=this.#wf,this.#If.nearBlurSize=this.#Mf,this.#If.farBlurSize=this.#Rf,this.#If.nearStrength=this.#Cf,this.#If.farStrength=this.#Pf}get focusDistance(){return this.#bf}set focusDistance(i){this.#bf=i,this.#Ef.focusDistance=i}get aperture(){return this.#yf}set aperture(i){this.#yf=i,this.#Ef.aperture=i}get maxCoC(){return this.#Tf}set maxCoC(i){this.#Tf=i,this.#Ef.maxCoC=i}get nearPlane(){return this.#Sf}set nearPlane(i){this.#Sf=i,this.#Ef.nearPlane=i}get farPlane(){return this.#wf}set farPlane(i){this.#wf=i,this.#Ef.farPlane=i}get nearBlurSize(){return this.#Mf}set nearBlurSize(i){this.#Mf=i,this.#If.nearBlurSize=i}get farBlurSize(){return this.#Rf}set farBlurSize(i){this.#Rf=i,this.#If.farBlurSize=i}get nearStrength(){return this.#Cf}set nearStrength(i){this.#Cf=i,this.#If.nearStrength=i}get farStrength(){return this.#Pf}set farStrength(i){this.#Pf=i,this.#If.farStrength=i}setGameDefault(){this.focusDistance=15,this.aperture=2.8,this.maxCoC=25,this.nearBlurSize=15,this.farBlurSize=15,this.nearStrength=1,this.farStrength=1}setCinematic(){this.focusDistance=20,this.aperture=1.4,this.maxCoC=40,this.nearBlurSize=25,this.farBlurSize=30,this.nearStrength=1.2,this.farStrength=1.3}setPortrait(){this.focusDistance=8,this.aperture=1.8,this.maxCoC=35,this.nearBlurSize=12,this.farBlurSize=25,this.nearStrength=.8,this.farStrength=1.4}setLandscape(){this.focusDistance=50,this.aperture=8,this.maxCoC=20,this.nearBlurSize=20,this.farBlurSize=10,this.nearStrength=1.1,this.farStrength=.6}setMacro(){this.focusDistance=2,this.aperture=1,this.maxCoC=50,this.nearBlurSize=30,this.farBlurSize=35,this.nearStrength=1.5,this.farStrength=1.6}setSports(){this.focusDistance=25,this.aperture=4,this.maxCoC=18,this.nearBlurSize=10,this.farBlurSize=12,this.nearStrength=.8,this.farStrength=.9}setNightMode(){this.focusDistance=12,this.aperture=2,this.maxCoC=30,this.nearBlurSize=18,this.farBlurSize=20,this.nearStrength=1.1,this.farStrength=1.2}render(i,m,g,_){const b=this.#Ef.render(i,m,g,_);return this.#If.render(i,m,g,_,b)}}Object.freeze(DOF);class LensDistortion extends ASinglePassPostEffect{#Bf=.1;#Lf=0;#Lr=0;#Dr=0;constructor(i){super(i),this.init(i,"POST_EFFECT_LENS_DISTORTION",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet center=vec2<f32>(dimW * 0.5 + uniforms.centerX,dimH * 0.5 + uniforms.centerY);\nlet global_id_vec=vec2<f32>(f32(global_id.x),f32(global_id.y));\nlet uv=global_id_vec/vec2<f32>(dimW,dimH);\nlet uvCenter=center/vec2<f32>(dimW,dimH);\nlet offset=uv - uvCenter;\nlet distance=length(offset);\nlet barrelFactor=1.0 + uniforms.barrelStrength * distance * distance;\nlet pincushionFactor=1.0 - uniforms.pincushionStrength * distance * distance;\nlet distortionFactor=barrelFactor * pincushionFactor;\nlet distortedUV=uvCenter + offset * distortionFactor;\nif (distortedUV.x < 0.0 || distortedUV.x > 1.0 || distortedUV.y < 0.0 || distortedUV.y > 1.0) { textureStore(outputTexture,vec2<i32>(global_id.xy),vec4<f32>(0.0,0.0,0.0,1.0));\n} else { let sampleCoord=vec2<i32>( i32(clamp(distortedUV.x * dimW,0.0,dimW - 1.0)), i32(clamp(distortedUV.y * dimH,0.0,dimH - 1.0)) ); let sampledColor=textureLoad(sourceTexture,sampleCoord).xyzw; textureStore(outputTexture,vec2<i32>(global_id.xy),sampledColor);\n}\n","struct Uniforms { barrelStrength:f32, pincushionStrength:f32, centerX:f32, centerY:f32\n};\n")),this.barrelStrength=this.#Bf,this.pincushionStrength=this.#Lf,this.centerX=this.#Lr,this.centerY=this.#Dr}get barrelStrength(){return this.#Bf}set barrelStrength(i){validateNumberRange(i,0),this.#Bf=i,this.updateUniform("barrelStrength",i)}get pincushionStrength(){return this.#Lf}set pincushionStrength(i){validateNumberRange(i,0),this.#Lf=i,this.updateUniform("pincushionStrength",i)}get centerX(){return this.#Lr}set centerX(i){validateNumber(i),this.#Lr=i,this.updateUniform("centerX",i)}get centerY(){return this.#Dr}set centerY(i){validateNumber(i),this.#Dr=i,this.updateUniform("centerY",i)}}Object.freeze(LensDistortion);class Vignetting extends ASinglePassPostEffect{#Df=.2;#J=.5;constructor(i){super(i),this.init(i,"POST_EFFECT_VIGNETTING",createBasicPostEffectCode(this,"let dimensions=textureDimensions(sourceTexture);\nlet dimW=f32(dimensions.x);\nlet dimH=f32(dimensions.y);\nlet index=vec2<u32>(global_id.xy);\nlet uv=vec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH);\nlet smoothness=uniforms.smoothness;\nlet size=uniforms.size;\nvar color:vec4<f32>=textureLoad(sourceTexture,index);\nvar diff=size - distance(uv,vec2<f32>(0.5));\nlet vignette=smoothstep(-smoothness,smoothness,diff);\ncolor.r *=vignette;\ncolor.g *=vignette;\ncolor.b *=vignette;\ntextureStore(outputTexture,index,color);\n","struct Uniforms { smoothness:f32, size:f32,\n};\n")),this.smoothness=this.#Df,this.size=this.#J}get size(){return this.#J}set size(i){validateNumberRange(i,0),this.#J=i,this.updateUniform("size",i)}get smoothness(){return this.#Df}set smoothness(i){validateNumberRange(i,0,1),this.#Df=i,this.updateUniform("smoothness",i)}}Object.freeze(Vignetting);class OldBloomBlend extends ASinglePassPostEffect{#Uf=1;#wu=1;constructor(i){super(i);const{WORK_SIZE_X:m,WORK_SIZE_Y:g,WORK_SIZE_Z:_}=this,b=` struct Uniforms { bloomStrength:f32, exposure:f32 }; @group(0) @binding(0) var sourceTexture0:texture_storage_2d<rgba8unorm,read>; @group(0) @binding(1) var sourceTexture1:texture_storage_2d<rgba8unorm,read>; @group(1) @binding(0) var outputTexture:texture_storage_2d<rgba8unorm,write>; @group(1) @binding(1) var<uniform> uniforms:Uniforms; @compute @workgroup_size(${m},${g},${_}) fn main ( @builtin(global_invocation_id) global_id:vec3<u32>, ){ let index=vec2<u32>(global_id.xy ); let dimensions:vec2<u32>=textureDimensions(sourceTexture0); let dimW=f32(dimensions.x); let dimH=f32(dimensions.y); let uv=\tvec2<f32>(f32(index.x)/dimW,f32(index.y)/dimH); var diffuse:vec4<f32>=textureLoad( sourceTexture0, index, ); var blur:vec4<f32>=textureLoad( sourceTexture1, index, );  let finalColor=vec4<f32>((diffuse.rgb + blur.rgb * uniforms.bloomStrength ) * uniforms.exposure,diffuse.a); textureStore(outputTexture,index,finalColor ); }; `;this.init(i,"POST_EFFECT_OLD_BLOOM",{msaa:b,nonMsaa:b}),this.exposure=this.#wu,this.bloomStrength=this.#Uf}get bloomStrength(){return this.#Uf}set bloomStrength(i){this.#Uf=i,this.updateUniform("bloomStrength",i)}get exposure(){return this.#wu}set exposure(i){this.#wu=i,this.updateUniform("exposure",i)}render(i,m,g,_,b){return super.render(i,m,g,_,b)}}Object.freeze(OldBloomBlend);class OldBloom extends AMultiPassPostEffect{#Af;#kf;#Of;#Zh=156;#Nf=32;#wu=1;#Uf=1.2;constructor(i){super(i,[new Threshold(i),new GaussianBlur(i),new OldBloomBlend(i)]),this.#Af=this.passList[0],this.#kf=this.passList[1],this.#Of=this.passList[2],this.#Af.threshold=this.#Zh,this.#kf.size=this.#Nf,this.#Of.exposure=this.#wu,this.#Of.bloomStrength=this.#Uf}get threshold(){return this.#Zh}set threshold(i){this.#Zh=i,this.#Af.threshold=i}get gaussianBlurSize(){return this.#Nf}set gaussianBlurSize(i){this.#Nf=i,this.#kf.size=i}get exposure(){return this.#wu}set exposure(i){this.#wu=i,this.#Of.exposure=i}get bloomStrength(){return this.#Uf}set bloomStrength(i){this.#Uf=i,this.#Of.bloomStrength=i}render(i,m,g,_){const b=this.#Af.render(i,m,g,_),y=this.#kf.render(i,m,g,b);return this.#Of.render(i,m,g,_,y)}}Object.freeze(OldBloom);class Sharpen extends AMultiPassPostEffect{#ef;constructor(i){super(i,[new Convolution(i)]),this.#ef=this.passList[0],this.#ef.kernel=Convolution.SHARPEN}render(i,m,g,_){return this.#ef.render(i,m,g,_)}}Object.freeze(Sharpen);var Os=Object.freeze({__proto__:null,AMultiPassPostEffect:AMultiPassPostEffect,ASinglePassPostEffect:ASinglePassPostEffect,Blur:Blur,BlurX:BlurX,BlurY:BlurY,BrightnessContrast:BrightnessContrast,ChromaticAberration:ChromaticAberration,ColorBalance:ColorBalance,ColorTemperatureTint:ColorTemperatureTint,Convolution:Convolution,DOF:DOF,DirectionalBlur:DirectionalBlur,FilmGrain:FilmGrain,Fog:Fog,GaussianBlur:GaussianBlur,Grayscale:Grayscale,HeightFog:HeightFog,HueSaturation:HueSaturation,Invert:Invert,LensDistortion:LensDistortion,OldBloom:OldBloom,PostEffectManager:PostEffectManager,RadialBlur:RadialBlur,Sharpen:Sharpen,Threshold:Threshold,Vibrance:Vibrance,Vignetting:Vignetting,ZoomBlur:ZoomBlur}),Ns=Object.freeze({__proto__:null,PICKING_EVENT_TYPE:Gi,PickingEvent:PickingEvent,PickingManager:PickingManager});const init=async(i,m,g,_,b="premultiplied",y={powerPreference:"high-performance",forceFallbackAdapter:!1})=>{const{gpu:T}=navigator,errorHandler=(i,m)=>{const _=generateErrorMessage(i,m);console.error("\n============\n",_,"\n============\n"),g?.(_)},validateAndRequestDevice=async m=>{const g=[];m?.features.has("texture-compression-astc")&&g.push("texture-compression-astc");const _={requiredFeatures:g};try{const g=await m.requestDevice(_);validateAndInitializeContext(i,m,g)}catch(i){errorHandler(null,`Failed to request device. Adapter was ${m},error message is ${i.message}`)}},validateAndInitializeContext=(i,y,T)=>{const w=i.getContext("webgpu");if(w)try{const g=new RedGPUContext(i,y,T,w,b);m(g),T.addEventListener("uncapturederror",i=>{console.warn("TODO A WebGPU error was not captured:",i),console.warn(i.error?.message),window.cancelAnimationFrame(g.currentRequestAnimationFrame)}),T.lost.then(i=>{console.warn(i),console.warn(`Device lost occurred:${i.message}`),"destroyed"===i.reason&&_?.(i)});const clearDevice=()=>{if(g.gpuContext)try{g.gpuContext.unconfigure(),$n("🧹 Canvas Context unconfigure 완료")}catch(i){$n("⚠️ Canvas Context unconfigure 실패:",i)}window?.cancelAnimationFrame(g.currentRequestAnimationFrame),g.gpuDevice.destroy()};window?.addEventListener("beforeunload",()=>{g&&g.gpuDevice&&($n("🧹 페이지 종료 시 GPU 디바이스 정리"),clearDevice())}),window?.addEventListener("pageshow",i=>{i.persisted&&($n("🔄 bfcache에서 복원됨 (뒤로가기 또는 앞으로가기) - 페이지 재로드"),window.location.reload())}),window?.addEventListener("pagehide",i=>{i.persisted&&($n("💾 bfcache에 저장됨"),g&&g.gpuDevice&&clearDevice())})}catch(i){g(errorHandler(i,""))}else errorHandler(new Error(`Failed to get context from canvas:${i.id||i}`),"Failed to get webgpu initialize from canvas")},initializeWebGPU=async()=>{m instanceof Function?i instanceof HTMLCanvasElement?await(async i=>{i||errorHandler(null,"Cannot find navigator.gpu");try{const m=await i.requestAdapter(y);await validateAndRequestDevice(m)}catch(m){errorHandler(m,`Failed to request adapter or validate device with target GPU:${i},error message is ${m.message}`)}})(T):errorHandler(null,`Expected HTMLCanvasElement,but received:${i}`):errorHandler(null,`Expected onWebGPUInitialized,but received:${m}`)};try{await initializeWebGPU()}catch(i){errorHandler(i,`Unexpected error occurred during WebGPU initialization:${i.message}`)}},generateErrorMessage=(i,m)=>{let g=m;return i instanceof Error?(g=i.message??m,"string"==typeof i.stack&&(g+=`\nStack Trace:${i.stack}`)):console.warn("generateErrorMessage function expected an Error instance,but got:",i),g};class TextureLoaderData{src;texture;loadEnd;loadSuccess;srcInfo;idx;constructor(i,m,g){this.src=i,this.texture=null,this.loadEnd=!1,this.loadSuccess=!1,this.srcInfo=m,this.idx=g}}class TextureLoader{textures=[];#Gf=0;#b;#Ff;#Vf;#$f;constructor(i,m=[],g,_){this.#b=i,this.#Ff=m,this.#Vf=g,this.#$f=_,this.#Ff.length?this.#Ff.forEach((i,m)=>this.#Hf(i,m)):this.#zf()}getTextureByIndex(i){if(this.textures[i])return this.textures[i].texture}#Hf(i,m){let g,_,b=BitmapTexture;_=i.hasOwnProperty("src")?i.src:i,_ instanceof Array&&(b=CubeTexture),g=new TextureLoaderData(_,i,m);const onLoadHandler=()=>{g.loadSuccess=!0,g.loadEnd=!0,this.#qf()},onErrorHandler=()=>{g.loadSuccess=!1,g.loadEnd=!0,this.#qf()};g.texture=b===BitmapTexture?new b(this.#b,i,i.useMipmap,onLoadHandler,onErrorHandler,i.format,!1):new b(this.#b,i,i.useMipmap,onLoadHandler,onErrorHandler,i.format),this.textures.push(g)}#qf(){this.#Gf++,this.#$f&&this.#$f.call(this,{totalNum:this.#Ff.length,loaded:this.#Gf}),this.#Gf===this.#Ff.length&&this.#zf()}#zf(){requestAnimationFrame(()=>{this.#Vf&&this.#Vf.call(this,this)})}}const Gs=new Map,Fs=new Map,arrayBufferLoader=(i,m,g)=>{if(i=getAbsoluteURL(window.location.href,i),Gs.has(i))return void m?.(Gs.get(i));if(Fs.has(i))return void Fs.get(i).then(i=>m?.(i)).catch(i=>g?.(i));const _=fetch(i).then(i=>{if(!i.ok)throw new Error(`Network response was not ok:${i.statusText}`);return i.arrayBuffer()}).then(m=>(Gs.set(i,m),m)).finally(()=>{Fs.delete(i)});Fs.set(i,_),_.then(i=>m?.(i)).catch(i=>g?.(i))},Vs={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array};Object.freeze(Vs);class AccessorInfo_GLTF{accessor;bufferView;bufferGlTfId;buffer;bufferURIDataView;componentType;componentType_BYTES_PER_ELEMENT;getMethod;accessorBufferOffset;bufferViewOffset;bufferViewByteStride;startIndex;constructor(i,m,g){switch(this.accessor=m.accessors[g],this.bufferView=m.bufferViews[this.accessor.bufferView],this.bufferGlTfId=this.bufferView.buffer,this.buffer=m.buffers[this.bufferGlTfId],this.bufferURIDataView=null,this.buffer.uri&&(this.bufferURIDataView=i.parsingResult.uris.buffers[this.bufferGlTfId]),this.componentType=Vs[this.accessor.componentType],this.componentType_BYTES_PER_ELEMENT=this.componentType.BYTES_PER_ELEMENT,this.componentType){case Float32Array:this.getMethod="getFloat32";break;case Uint32Array:this.getMethod="getUint32";break;case Uint16Array:this.getMethod="getUint16";break;case Int16Array:this.getMethod="getInt16";break;case Uint8Array:this.getMethod="getUint8";break;case Int8Array:this.getMethod="getInt8";break;default:consoleAndThrowError("파싱할수없는 타입",this.componentType)}this.accessorBufferOffset=this.accessor.byteOffset||0,this.bufferViewOffset=this.bufferView.byteOffset||0,this.bufferViewByteStride=this.bufferView.byteStride||0,this.startIndex=(this.bufferViewOffset+this.accessorBufferOffset)/this.componentType_BYTES_PER_ELEMENT}}class AnimationData_GLTF{gltfLoader;scenesData;accessorGlTfId;dataList;constructor(i,m,g){this.gltfLoader=i,this.scenesData=m,this.accessorGlTfId=g;const _=new AccessorInfo_GLTF(this.gltfLoader,this.scenesData,this.accessorGlTfId),{accessor:b,startIndex:y,componentType_BYTES_PER_ELEMENT:T,bufferURIDataView:w,getMethod:P}=_,{type:$,count:H}=b;let q=y,W=1;switch($){case"SCALAR":W=1;break;case"VEC4":W=4;break;case"VEC3":W=3}this.dataList=[];let ye=0;for(;ye<H*W;q++,ye++)this.dataList[ye]=w[P](q*T,!0)}}class AniTrack_GLTF{key;timeAnimationInfo;aniDataAnimationInfo;interpolation;animationTargetMesh;weightMeshes;constructor(i,m,g,_,b,y){this.key=i,this.timeAnimationInfo=m,this.aniDataAnimationInfo=g,this.interpolation=_,this.animationTargetMesh=b,this.weightMeshes=y}}const parseAnimations=(i,m)=>new Promise(async g=>{m.animations||(m.animations=[]);const{parsingResult:_}=i,{animations:b}=_,{animations:y}=m;if(y.length){const g=y.map(async g=>{const{samplers:_,channels:y}=g,T=[];T.minTime=1e7,T.maxTime=-1,T.name=g.name,b.push(T),await Promise.all(y.map(async g=>((i,m,g,_,b)=>{let y,T;const{nodes:w,meshes:P}=b,$=[],{sampler:H,target:q}=g,W=_[H],{node:ye,path:Ge}=q,Ke=w[ye];if("mesh"in Ke){y=Ke.Mesh;const{primitives:i}=P[Ke.mesh];let m=i.length;for(;m--;)$.push(i[m].Mesh)}else{let m;if(!i.parsingResult.groups[ye])return;m=i.parsingResult.groups[ye],y=m}if("scale"!=Ge&&"rotation"!=Ge&&"translation"!=Ge&&"weights"!=Ge||(T=new AniTrack_GLTF(Ge,new AnimationData_GLTF(i,b,W.input),new AnimationData_GLTF(i,b,W.output),W.interpolation,y,$),m.push(T)),T){const{timeAnimationInfo:i}=T,{dataList:g}=i;m.minTime>g[0]&&(m.minTime=g[0]),m.maxTime<g[g.length-1]&&(m.maxTime=g[g.length-1])}})(i,T,g,_,m)))});await Promise.all(g),b.length&&b.forEach(m=>i.playAnimation(m))}g()});let $s=new Float32Array(16),Hs=new Float32Array(16);class ParsedSkinInfo_GLTF{joints;inverseBindMatrices;skeletonMesh;isInverseBindMatrixUpdated=!1;vertexStorageInfo;vertexStorageBuffer;#Kf;#Wf;constructor(){this.joints=[],this.inverseBindMatrices=null,this.skeletonMesh=null}update(i,m){const g=this.#Xf(m.modelMatrix),_=this.#Yf(this.joints,g);this.#jf(i,m.animationInfo.skinInfo,_)}#Xf(i){return this.#Kf=this.#Kf||new Float32Array(i.length),this.#Kf.set(i),invert$2(this.#Kf,this.#Kf),this.#Kf}#Yf(i,m){const g=16*i.length;this.#Wf&&this.#Wf.length==g||(this.#Wf=new Float32Array(g));for(let g=0;g<i.length;g++){const _=multiply$5($s,m,i[g].modelMatrix),b=multiply$5(Hs,_,this.inverseBindMatrices[g]);this.#Wf.set(b,16*g)}return this.#Wf}#jf(i,m,g){const{vertexStorageBuffer:_,vertexStorageInfo:b}=m,{gpuBuffer:y}=_,{jointMatrix:T}=b.members;i.gpuDevice.queue.writeBuffer(y,T.uniformOffset,g)}}const parseJoint_GLTF=(i,m,g,_)=>{const b=g[_].Mesh;b?(m.joints.push(b),b.depthCompare=di.NEVER):requestAnimationFrame(function(){parseJoint_GLTF(i,m,g,_)})},parseAttributeInfo_GLTF=function(i,m,g,_,b,y,T,w,P,$,H){const{accessor:q,startIndex:W,getMethod:ye,bufferViewByteStride:Ge,bufferURIDataView:Ke,componentType_BYTES_PER_ELEMENT:Xe}=m,{type:Ye,count:je}=q;let Ze=0;const Je=Ge/Xe;let Qe,et=W;switch(Ye){case"VEC4":if(Ge)for(Qe=et+je*(Ge/Xe);et<Qe;et++)Ze%Je<4&&("WEIGHTS_0"==i?w.push(Ke[ye](et*Xe,!0)):"JOINTS_0"==i?P.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?$.push(Ke[ye](et*Xe,!0)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i)),Ze++;else for(Qe=et+4*je;et<Qe;et++)"WEIGHTS_0"==i?w.push(Ke[ye](et*Xe,!0)):"JOINTS_0"==i?P.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?$.push(Ke[ye](et*Xe,!0)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC4에서 현재 지원하고 있지 않는 키",i),Ze++;break;case"VEC3":if(Ge)for(Qe=et+je*(Ge/Xe);et<Qe;et++)Ze%Je<3&&("NORMAL"==i?T.push(Ke[ye](et*Xe,!0)):"POSITION"==i?g.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?($.push(Ke[ye](et*Xe,!0)),Ze%Je==2&&$.push(1)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i)),Ze++;else for(Qe=et+3*je;et<Qe;et++)"NORMAL"==i?T.push(Ke[ye](et*Xe,!0)):"POSITION"==i?g.push(Ke[ye](et*Xe,!0)):"COLOR_0"==i?($.push(Ke[ye](et*Xe,!0)),Ze%3==2&&$.push(1)):"TANGENT"==i?H.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC3에서 현재 지원하고 있지 않는 키",i),Ze++;break;case"VEC2":if(Ge)for(Qe=et+je*(Ge/Xe);et<Qe;et++)Ze%Je<2&&("TEXCOORD_0"==i?_.push(Ke[ye](et*Xe,!0)):"TEXCOORD_1"==i?b.push(Ke[ye](et*Xe,!0)):"TEXCOORD_2"==i?y.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i)),Ze++;else for(Qe=et+2*je;et<Qe;et++)"TEXCOORD_0"==i?_.push(Ke[ye](et*Xe,!0)):"TEXCOORD_1"==i?b.push(Ke[ye](et*Xe,!0)):"TEXCOORD_2"==i?y.push(Ke[ye](et*Xe,!0)):consoleAndThrowError("VEC2에서 현재 지원하고 있지 않는 키",i),Ze++}},parseSparse_GLTF=(i,m,g,_,b)=>{const y=g.sparse;if(!y)return;const{values:T,indices:w,count:P}=y,$=_.bufferViews,H=$[T.bufferView],q=H.buffer,W=_.buffers,ye=W[q],Ge=[],Ke=[],Xe=$[w.bufferView],Ye=Xe.buffer,je=W[Ye];let Ze;ye.uri&&(Ze=i.parsingResult.uris.buffers[q]);const Je=Vs[g.componentType],{BYTES_PER_ELEMENT:Qe}=Je;let et;switch(Je){case Float32Array:et="getFloat32";break;case Uint32Array:et="getUint32";break;case Uint16Array:et="getUint16";break;case Int16Array:et="getInt16";break;case Uint8Array:et="getUint8";break;case Int8Array:et="getInt8"}const at=g.byteOffset||0;let ht,ft,gt=((H.byteOffset||0)+at)/Qe;switch(g.type){case"VEC3":for(ht=gt+Qe*P/Qe*3;gt<ht;gt++){const i=Ze[et](gt*Qe,!0);"NORMAL"==m||"POSITION"==m&&Ge.push(i)}break;case"VEC2":for(ht=gt+Qe*P/Qe*2;gt<ht;gt++)"TEXCOORD_0"==m&&Ke.push(Ze[et](gt*Qe,!0))}je.uri&&(ft=i.parsingResult.uris.buffers[Ye]);const xt=Vs[w.componentType],vt=xt.BYTES_PER_ELEMENT,bt=xt===Uint16Array?"getUint16":"getUint8",yt=w.byteOffset||0;let Tt=((Xe.byteOffset||0)+yt)/vt;const St=Tt+vt*P/vt;let wt=0;for(;Tt<St;Tt++){const i=ft[bt](Tt*vt,!0);b[3*i]=Ge[3*wt],b[3*i+1]=Ge[3*wt+1],b[3*i+2]=Ge[3*wt+2],wt++}};class MorphInfoData_GLTF{vertices=[];verticesColor_0=[];normals=[];uvs=[];uvs1=[];uvs2=[];jointWeights=[];joints=[];tangents=[];interleaveData;constructor(i=[],m=[],g=[],_=[],b=[],y=[],T=[],w=[],P=[]){this.vertices=i,this.verticesColor_0=m,this.normals=g,this.uvs=_,this.uvs1=b,this.uvs2=b,this.jointWeights=T,this.joints=w,this.tangents=P}}class MorphInfo_GLTF{morphInfoDataList=[];weights;cacheData={};origin;constructor(i,m,g,_){g.targets&&(this.morphInfoDataList=g.targets.map(g=>{const _=new MorphInfoData_GLTF;for(let b in g){const{vertices:y,verticesColor_0:T,normals:w,uvs:P,uvs1:$,uvs2:H,jointWeights:q,joints:W,tangents:ye}=_,Ge=g[b],Ke=new AccessorInfo_GLTF(i,m,Ge),{accessor:Xe}=Ke;parseAttributeInfo_GLTF(b,Ke,y,P,$,H,w,q,W,T,ye),Xe.sparse&&parseSparse_GLTF(i,b,Xe,m,y)}return _})),this.weights=_||[],this.origin=null}}const parseMaterialTexture=(i,m,g,_,b,y=!0)=>{const{redGPUContext:T,gltfData:w}=i,{textureRawList:P}=i.parsingResult,$=g.index,H=w.textures[$],q=H.extensions?.EXT_texture_webp?.source||H.source,W=getURL(i,w,q);if(W){const $=H.sampler,ye=getSamplerInfo(i,w,$),{parsedURI:Ge,cacheKey:Ke}=W,Xe=`${_}SourceGlTfId_${q}`;if(P[Xe]?(P[Xe].materialList.push(m),P[Xe].samplerList.push(new Sampler(T,ye))):P[Xe]={src:Ge,cacheKey:Ke,targetTextureKey:_,targetSamplerKey:`${_}Sampler`,materialList:[m],samplerList:[new Sampler(T,ye)],format:b||navigator.gpu.getPreferredCanvasFormat(),useMipmap:y},m[`${_}_texCoord_index`]=g.texCoord||0,"extensions"in g){const{extensions:i}=g,{KHR_texture_transform:b}=i;b&&((i,m,g)=>{i[`${m}_KHR_texture_transform_offset`]=g.offset||[0,0],i[`${m}_KHR_texture_transform_scale`]=g.scale||[1,1],i[`${m}_KHR_texture_transform_rotation`]=g.rotation||0,i[`use_${m}_KHR_texture_transform`]=!0})(m,_,b)}}},getURL=function(i,m,g){if(!m.images[g])return null;const{uri:_}=m.images[g];let b;const y=`${i.url}_${g}`;return b=_.indexOf("blob:http")>-1?_:(_.indexOf(";base64,")>-1?"":i.filePath)+_,{parsedURI:b,cacheKey:y}},getSamplerInfo=function(i,m,g){const _={magFilter:$r.LINEAR,minFilter:$r.LINEAR,mipmapFilter:$r.LINEAR,addressModeU:Fr.REPEAT,addressModeV:Fr.REPEAT,addressModeW:Fr.REPEAT},b={33071:Fr.CLAMP_TO_EDGE,33648:Fr.MIRRORED_REPEAT,10497:Fr.REPEAT},y={9728:$r.NEAREST,9729:$r.LINEAR},T={9728:$r.NEAREST,9729:$r.LINEAR};if(m.samplers){let i=m.samplers[g];i&&("magFilter"in i&&(_.magFilter=y[i.magFilter]||$r.LINEAR),"minFilter"in i&&(_.minFilter=T[i.minFilter]||$r.LINEAR),"wrapS"in i&&(_.addressModeU=b[i.wrapS]),"wrapT"in i&&(_.addressModeV=b[i.wrapT]))}return _.string=JSON.stringify(_),_},parseMaterialInfo_GLTF=(i,m,g)=>{const{redGPUContext:_}=i;let b,y=!1,T="OPAQUE",w=.5;if("material"in g){b=new PBRMaterial(_);const P=g.material,$=m.materials[P];y=!!$.doubleSided,T=$.alphaMode??T,w=$.alphaCutoff??w;const{pbrMetallicRoughness:H,normalTexture:q,emissiveTexture:W,occlusionTexture:ye}=$;if(b.emissiveFactor=$.emissiveFactor||[0,0,0],H){const{metallicRoughnessTexture:m,baseColorTexture:g}=H;let _,y;b.baseColorFactor=H.baseColorFactor||[1,1,1,1],"metallicFactor"in H&&(_=H.metallicFactor),"roughnessFactor"in H&&(y=H.roughnessFactor),b.metallicFactor=null!=_?_:1,b.roughnessFactor=null!=y?y:1,g&&parseMaterialTexture(i,b,g,"baseColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),m&&parseMaterialTexture(i,b,m,"metallicRoughnessTexture",null,!1)}if(q){parseMaterialTexture(i,b,q,"normalTexture");const{scale:m}=q;b.normalScale=null!=m?m:1}if(W&&parseMaterialTexture(i,b,W,"emissiveTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`),ye&&(parseMaterialTexture(i,b,ye,"occlusionTexture",null,!1),b.occlusionStrength=$.occlusionTexture.strength||1),"extensions"in $){const{extensions:m}=$,{KHR_materials_clearcoat:g,KHR_materials_emissive_strength:_,KHR_materials_transmission:y,KHR_materials_diffuse_transmission:w,KHR_materials_volume:P,KHR_materials_unlit:H,KHR_materials_ior:q,KHR_materials_sheen:W,KHR_materials_specular:ye,KHR_materials_dispersion:Ge,KHR_materials_anisotropy:Ke,KHR_materials_iridescence:Xe}=m;if(Xe&&((i,m,g)=>{i.useKHR_materials_iridescence=!0,i.KHR_iridescenceFactor=m.iridescenceFactor||0,i.KHR_iridescenceIor=m.iridescenceIor||1.3,i.KHR_iridescenceThicknessMinimum=m.iridescenceThicknessMinimum||100,i.KHR_iridescenceThicknessMaximum=m.iridescenceThicknessMaximum||400,i.transparent=!0;{const{iridescenceTexture:_,iridescenceThicknessTexture:b}=m;_&&parseMaterialTexture(g,i,_,"KHR_iridescenceTexture",null,!1),b&&parseMaterialTexture(g,i,b,"KHR_iridescenceThicknessTexture",null,!1)}})(b,Xe,i),Ke&&((i,m,g)=>{i.useKHR_materials_anisotropy=!0,i.KHR_anisotropyStrength=m.anisotropyStrength||0,i.KHR_anisotropyRotation=m.anisotropyRotation||0;const{anisotropyTexture:_}=m;_&&parseMaterialTexture(g,i,_,"KHR_anisotropyTexture")})(b,Ke,i),g&&((i,m,g)=>{i.KHR_clearcoatFactor=m.clearcoatFactor||0,i.KHR_clearcoatRoughnessFactor=m.clearcoatRoughnessFactor||0,i.useKHR_materials_clearcoat=!0;const{clearcoatTexture:_,clearcoatNormalTexture:b,clearcoatRoughnessTexture:y}=m;_&&parseMaterialTexture(g,i,_,"KHR_clearcoatTexture",null,!1),b&&parseMaterialTexture(g,i,b,"KHR_clearcoatNormalTexture"),y&&parseMaterialTexture(g,i,y,"KHR_clearcoatRoughnessTexture",null,!1)})(b,g,i),_){const{emissiveStrength:i}=_;b.emissiveStrength=null!=i?i:1}if(y&&(((i,m,g)=>{i.useKHR_materials_transmission=!0,i.KHR_transmissionFactor=m.transmissionFactor||0,i.use2PathRender=!0;{const _=m.transmissionTexture;_&&parseMaterialTexture(g,i,_,"KHR_transmissionTexture",null,!1)}})(b,y,i),b.transparent="BLEND"===T),w&&((i,m,g)=>{i.useKHR_materials_diffuse_transmission=!0,i.KHR_diffuseTransmissionFactor=m.diffuseTransmissionFactor||0,i.KHR_diffuseTransmissionColorFactor=m.diffuseTransmissionColorFactor||[1,1,1],i.transparent=!0;{const _=m.diffuseTransmissionTexture;_&&parseMaterialTexture(g,i,_,"KHR_diffuseTransmissionTexture",null,!1);const b=m.diffuseTransmissionColorTexture;b&&parseMaterialTexture(g,i,b,"KHR_diffuseTransmissionColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`,!1)}})(b,w,i),P&&(((i,m,g)=>{i.useKHR_materials_volume=!0,i.KHR_thicknessFactor=m.thicknessFactor||1,i.KHR_attenuationDistance=m.attenuationDistance||1,i.KHR_attenuationColor=m.attenuationColor||[1,1,1],i.use2PathRender=!0,i.transparent=!0;{const _=m.thicknessTexture;_&&parseMaterialTexture(g,i,_,"KHR_thicknessTexture",null,!1)}})(b,P,i),T="BLEND"),H&&(b.useKHR_materials_unlit=!0),q){const{ior:i}=q;b.KHR_materials_ior=null!=i?i:1.5,b.use2PathRender=!0,b.transparent=!0}if(Ge){const{dispersion:i}=Ge;b.KHR_dispersion=i||0,b.use2PathRender=!0,b.transparent=!0}W&&((i,m,g)=>{i.KHR_sheenColorFactor=m.sheenColorFactor||[0,0,0],i.KHR_sheenRoughnessFactor=m.sheenRoughnessFactor||0,i.useKHR_materials_sheen=!0;const{sheenColorTexture:_,sheenRoughnessTexture:b}=m;_&&parseMaterialTexture(g,i,_,"KHR_sheenColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`,!1),b&&parseMaterialTexture(g,i,b,"KHR_sheenRoughnessTexture",null,!1)})(b,W,i),ye&&((i,m,g)=>{i.useKHR_materials_specular=!0,i.KHR_specularFactor=m.specularFactor??1,i.KHR_specularColorFactor=m.specularColorFactor||[1,1,1];const{specularTexture:_,specularColorTexture:b}=m;_&&parseMaterialTexture(g,i,_,"KHR_specularTexture"),b&&parseMaterialTexture(g,i,b,"KHR_specularColorTexture",`${navigator.gpu.getPreferredCanvasFormat()}-srgb`)})(b,ye,i)}}else b=new PBRMaterial(_);Object.hasOwn(g.attributes,"COLOR_0")&&(b.useVertexColor=!0),b.doubleSided=y,b.cutOff=w;const{blendColorState:P,blendAlphaState:$}=b;switch(T){case"BLEND":b.alphaBlend=2,P.srcFactor=Ar.SRC_ALPHA,P.dstFactor=Ar.ONE_MINUS_SRC_ALPHA,$.srcFactor=Ar.SRC_ALPHA,$.dstFactor=Ar.ONE_MINUS_SRC_ALPHA,b.transparent=!0;break;case"MASK":b.alphaBlend=1,b.useCutOff=!0,P.srcFactor=Ar.ONE,P.dstFactor=Ar.ZERO,$.srcFactor=Ar.ONE,$.dstFactor=Ar.ZERO;break;default:P.srcFactor=Ar.ONE,P.dstFactor=Ar.ZERO,$.srcFactor=Ar.ONE,$.dstFactor=Ar.ZERO,b.alphaBlend=0}return b},parseIndicesInfo_GLTF=(i,m)=>{const{accessor:g,startIndex:_,getMethod:b,bufferURIDataView:y,componentType_BYTES_PER_ELEMENT:T}=i,{type:w,count:P}=g;let $,H=_;if("SCALAR"===w)for($=H+P;H<$;H++)m.push(y[b](H*T,!0))},parseInterleaveData_GLTF=(i,m,g,_,b,y,T,w,P,$)=>{let H,q,W,ye,Ge,Ke,Xe,Ye,je,Ze=0,Je=m.length/3,Qe=0;const et=m.length,at=_.length,ht=y.length,ft=T.length,gt=g.length,xt=w.length,vt=P.length,bt=$.length;for(H=W=Ke=0,q=ye=Xe=1,Ge=Ye=2,je=3;Ze<Je;Ze++)et&&(i[Qe++]=m[W],i[Qe++]=m[ye],i[Qe++]=m[Ge]),at?(i[Qe++]=_[W],i[Qe++]=_[ye],i[Qe++]=_[Ge]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),b.length||b.push(0,0),b.length&&(i[Qe++]=b[H],i[Qe++]=b[q]),ft?(i[Qe++]=T[H],i[Qe++]=T[q]):ht?(i[Qe++]=y[H],i[Qe++]=y[q]):b.length&&(i[Qe++]=b[H],i[Qe++]=b[q]),gt?(i[Qe++]=g[Ke],i[Qe++]=g[Xe],i[Qe++]=g[Ye],i[Qe++]=g[je]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),xt?(i[Qe++]=w[Ke],i[Qe++]=w[Xe],i[Qe++]=w[Ye],i[Qe++]=w[je]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),vt?(i[Qe++]=P[Ke],i[Qe++]=P[Xe],i[Qe++]=P[Ye],i[Qe++]=P[je]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),bt?(i[Qe++]=$[Ke],i[Qe++]=$[Xe],i[Qe++]=$[Ye],i[Qe++]=$[je]):(i[Qe++]=0,i[Qe++]=0,i[Qe++]=0,i[Qe++]=0),H+=2,q+=2,W+=3,ye+=3,Ge+=3,Ke+=4,Xe+=4,Ye+=4,je+=4},zs=180/Math.PI,setMeshRotation=(i,m)=>{m.setRotation(-i[0]*zs,-i[1]*zs,-i[2]*zs)},parseTRSAndMATRIX_GLTF=(i,m)=>{const{matrix:g,rotation:_,translation:b,scale:y}=m;let T,w;if("matrix"in m){T=create$5(),w=create$4(),mat4ToEuler(g,w),setMeshRotation(w,i),i.setPosition(g[12],g[13],g[14]);const m=fromValues$4(1,1,1);getScaling(m,g),i.setScale(m[0],m[1],m[2])}"rotation"in m&&(T=create$5(),w=create$4(),quaternionToRotationMat4(_,T),mat4ToEuler(T,w),setMeshRotation(w,i)),"translation"in m&&i.setPosition(b[0],b[1],b[2]),"scale"in m&&(i.setScale(y[0],y[1],y[2]),(y[0]<0||y[1]<0||y[2]<0)&&(i.primitiveState.frontFace=_i.CW))},parseChildrenAndSkin=(i,m,g,_,b)=>{if("children"in _){const b=_.children,y=b.length;for(let _=0;_<y;_++)parseNode_GLTF(i,m,b[_],g)}"skin"in _&&((i,m,g,_)=>{const b=new ParsedSkinInfo_GLTF,y=[],{nodes:T}=m,{joints:w,skeleton:P}=g;{let m=0;const g=w.length;for(;m<g;m++){const g=w[m];parseJoint_GLTF(i,b,T,g)}}P&&(b.skeletonMesh=T[P].Mesh);const $=g.inverseBindMatrices,H=new AccessorInfo_GLTF(i,m,$),{startIndex:q,accessor:W,componentType_BYTES_PER_ELEMENT:ye,bufferViewByteStride:Ge,bufferURIDataView:Ke,getMethod:Xe}=H,{type:Ye,count:je}=W;let Ze=0;const Je=Ge/ye;let Qe,et=q;if("MAT4"===Ye)if(Ge)for(Qe=et+je*(Ge/ye);et<Qe;et++)Ze%Je<16&&y.push(Ke[Xe](et*ye,!0)),Ze++;else for(Qe=et+16*je;et<Qe;et++)y.push(Ke[Xe](et*ye,!0)),Ze++;b.inverseBindMatrices=[];for(let i=0;i<w.length;i++)b.inverseBindMatrices.push(new Float32Array([y[16*i],y[16*i+1],y[16*i+2],y[16*i+3],y[16*i+4],y[16*i+5],y[16*i+6],y[16*i+7],y[16*i+8],y[16*i+9],y[16*i+10],y[16*i+11],y[16*i+12],y[16*i+13],y[16*i+14],y[16*i+15]]));_.animationInfo.skinInfo=b,_.material.useSkin=!!_.animationInfo.skinInfo})(i,m,b[_.skin],g)},parseNode_GLTF=(i,m,g,_)=>{const{redGPUContext:b,parsingResult:y}=i,{nodes:T,meshes:w,skins:P}=m,{groups:$,cameras:H}=y,q=T[g];if("mesh"in q){const g=function(i,m,g){const{redGPUContext:_}=i;let b;g.name&&(b=g.name);const y=[],{primitives:T}=g;let w=0;const P=T.length;for(;w<P;w++){const P=T[w];let $,H,q,W=[],ye=[],Ge=[],Ke=[],Xe=[],Ye=[],je=[],Ze=[],Je=[],Qe=[];const{attributes:et}=P;if(et)for(const g in et){const _=et[g],b=new AccessorInfo_GLTF(i,m,_);parseAttributeInfo_GLTF(g,b,ye,Ke,Xe,Ye,je,Ze,Je,Ge,Qe),b.accessor.sparse&&parseSparse_GLTF(i,g,b.accessor,m,ye)}if("indices"in P){let g=P.indices,_=new AccessorInfo_GLTF(i,m,g);parseIndicesInfo_GLTF(_,W)}H=parseMaterialInfo_GLTF(i,m,P),H instanceof PBRMaterial&&i.parsingResult.materials.push(H);let at,ht=!1;if("mode"in P)switch(P.mode){case 0:q=zn.POINT_LIST;break;case 1:case 2:q=zn.LINE_LIST;break;case 3:q=zn.LINE_STRIP,ht=!0;break;case 4:case 6:q=zn.TRIANGLE_LIST;break;case 5:q=zn.TRIANGLE_STRIP,ht=!0}Ge.length&&(H.useVertexColor_0=!0),Qe.length&&(H.useVertexTangent=!0),at=je.length?je:calculateNormals(ye,W);let ft,gt=[];parseInterleaveData_GLTF(gt,ye,Ge,at,Ke,Xe,Ye,Ze,Je,Qe);let xt={};if(ye.length&&(xt.aVertexPosition=InterleaveType.float32x3),at.length&&(xt.aVertexNormal=InterleaveType.float32x3),Ke.length&&(xt.aTexcoord=InterleaveType.float32x2),(Ye.length||Xe.length||Ke.length)&&(xt.aTexcoord1=InterleaveType.float32x2),xt.aVertexColor_0=InterleaveType.float32x4,xt.aVertexWeight=InterleaveType.float32x4,xt.aVertexJoint=InterleaveType.float32x4,xt.aVertexTangent=InterleaveType.float32x4,ft=new Geometry(_,new VertexBuffer(_,gt,new InterleavedStruct(xt)),!ht&&W.length?new IndexBuffer(_,new Uint32Array(W)):null),H||consoleAndThrowError("재질을 파싱할수없는경우 ",P),$=new Mesh(_,ft,H),b&&($.name=b,i.parsingOption))for(let m in i.parsingOption)b.toLowerCase().indexOf(m)>-1&&i.parsingOption[m]($);$.primitiveState.topology=q||zn.TRIANGLE_LIST,$.material.doubleSided&&($.primitiveState.cullMode=xi.NONE),$.material.use2PathRender&&($.primitiveState.cullMode=xi.NONE,$.depthStencilState.depthCompare=di.LESS),2===$.material.alphaBlend&&($.depthStencilState.depthCompare=di.LESS);{let _=new MorphInfo_GLTF(i,m,P,g.weights),b=0,y=_.morphInfoDataList;const T=y.length;for(;b<T;){const i=y[b],m=i.normals.length?i.normals:calculateNormals(i.vertices,W),g=[];parseInterleaveData_GLTF(g,i.vertices,i.verticesColor_0,m,i.uvs,i.uvs1,i.uvs2,i.jointWeights,i.joints,i.tangents),i.interleaveData=g,b++}$.animationInfo.morphInfo=_,$.animationInfo.morphInfo.origin=new Float32Array(gt)}let vt=$.geometry.vertexBuffer.data;$.gpuRenderInfo||$.initGPURenderInfos();let bt=0;for(const i in xt)bt+=xt[i].numElements;{const i=$.animationInfo.morphInfo.morphInfoDataList;let m=0;const g=i.length,_=vt.length;for(;m<g;){const g=i[m].vertices;let b=0,y=_/bt,T=null==$.animationInfo.morphInfo.weights[m]?.5:$.animationInfo.morphInfo.weights[m];for(;b<y;)vt[b*bt]+=g[3*b]*T,vt[b*bt+1]+=g[3*b+1]*T,vt[b*bt+2]+=g[3*b+2]*T,b++;m++}}$.geometry.vertexBuffer.updateAllData(vt),$.animationInfo.morphInfo.origin=new Float32Array(vt),P.Mesh=$,y.push($)}return y}(i,m,w[q.mesh]),b=g.length;for(let y=0;y<b;y++){let b=g[y];_.addChild(q.Mesh=b),parseTRSAndMATRIX_GLTF(b,q),parseChildrenAndSkin(i,m,b,q,P)}}else{let y;$[g]?(y=$[g],q.Mesh=y):(y=new Mesh(b),_.addChild(y),q.Mesh=y,y.name=q.name,$[g]=y),parseTRSAndMATRIX_GLTF(y,q),parseChildrenAndSkin(i,m,y,q,P)}},parseGLTF=(i,m,g)=>{requestAnimationFrame(()=>{(i=>{const m=i?.asset;m||consoleAndThrowError("GLTFLoader - asset must be defined"),m.version||consoleAndThrowError("GLTFLoader - asset version must be defined");const g=parseFloat(m.version);isNaN(g)&&consoleAndThrowError("GLTFLoader - asset version must be a numerical value"),g<2&&consoleAndThrowError("GLTFLoader - asset version must be 2.0 or higher")})(m),requestAnimationFrame(()=>{((i,m,g)=>{const{parsingResult:_}=i,{uris:b}=_,y="buffers",T=b[y],w=m.buffers,P=w.length;let $=0;w.forEach((m,_)=>{var b;function checkLoadingStatus(){$===P&&g&&g()}m._redURIkey=y,m._redURIIndex=_,m.uri instanceof ArrayBuffer?(b=new DataView(m.uri),$++,T[_]=b,checkLoadingStatus()):function(m){const g=m.startsWith("data:")?m:i.filePath+m;arrayBufferLoader(g,function(i){$++,T[_]=new DataView(i),checkLoadingStatus()},function(i,m){})}(m.uri)})})(i,m,()=>{requestAnimationFrame(()=>{((i,m,g)=>{const{scenes:_}=m;_[0].nodes.forEach(g=>{parseNode_GLTF(i,m,g,i.resultMesh)}),g?.()})(i,m,()=>{requestAnimationFrame(()=>{((i,m)=>{const{cameras:g}=m;g&&g.forEach(function(m){let g=new PerspectiveCamera;"orthographic"==m.type||(g.fieldOfView=180*m.perspective.yfieldOfView/Math.PI,g.farClipping=m.perspective.zfar,g.nearClipping=m.perspective.znear),i.parsingResult.cameras.push(g)})})(i,m),new TextureLoader(i.redGPUContext,Object.values(i.parsingResult.textureRawList),_=>{_.textures.forEach(i=>{const{targetTextureKey:m,targetSamplerKey:g,samplerList:_}=i.srcInfo;i.srcInfo.materialList.forEach((b,y)=>{b[m]=i.texture,_[y]&&(b[g]=_[y])})}),parseAnimations(i,m).then(i=>{g&&g()})})})})})})})})},qs=new Map,Ks=new Map,parseFileGLB=async(i,m)=>{const g=getAbsoluteURL(window.location.href,i.filePath+i.fileName);if($n(g,i.filePath+i.fileName),qs.has(g))return $n("GLB Model parsing has cache",g),void await parseArrayBuffer(i,qs.get(g),m);if(Ks.has(g))return await Ks.get(g),void await parseArrayBuffer(i,qs.get(g),m);const _=new Promise((i,m)=>{(async(i,m,g=()=>{})=>{try{const g=await fetch(i);m(await g.arrayBuffer())}catch(i){g(i)}})(g,m=>{qs.set(g,m),$n("GLB Model parsing set cache",g),Ks.delete(g),i(m)},i=>{Ks.delete(g),m(i)})});Ks.set(g,_);try{const g=await _;await parseArrayBuffer(i,g,m)}catch(i){}},parseArrayBuffer=async(i,m,g)=>{const{content:_,binaryChunk:b}=parseBuffer(m);if(null===_)throw new Error("JSON content not found");const y=JSON.parse(_);processImagesIfExist(y,b),y.buffers[0].uri=b,i.gltfData=y,parseGLTF(i,y,g)},parseBuffer=i=>{let m=null,g=null;const _=new DataView(i,12),b=_.byteLength;for(let y=0;y<b;){const b=_.getUint32(y,!0);y+=4;const T=_.getUint32(y,!0);switch(y+=4,T){case 1313821514:const _=new Uint8Array(i,12+y,b);m=convertUint8ArrayToString(_);break;case 5130562:const T=12+y;g=i.slice(T,T+b)}y+=b}return{content:m,binaryChunk:g}},processImagesIfExist=(i,m)=>{const{images:g,bufferViews:_}=i,b=["image/png","image/jpeg","image/gif","image/webp"],y=new Map;if(g)for(let i=0;i<g.length;i++){const T=g[i],{mimeType:w,bufferView:P}=T;if(b.includes(w)&&void 0!==P){const i=_[P].byteOffset||0,g=_[P].byteLength,b=`${i}_${g}_${w}`;if(y.has(b))T.uri=y.get(b);else{const _=m.slice(i,i+g),P=new Blob([new Uint8Array(_)],{type:w}),$=URL.createObjectURL(P);y.set(b,$),T.uri=$}}}return y},convertUint8ArrayToString=i=>{let m="";for(let g of i)m+=String.fromCharCode(g);return m},Ws=new Map,Xs=new Map;class GLTFLoader{parsingResult;resultMesh;parsingOption;activeAnimations=[];#b;#Zf;#Ih;#Bh;#Jf;#Qf;#Pt;#Et;#ed;constructor(i,m,g,_){validateRedGPUContext(i),this.#b=i,this.#Bh=m,this.#Zf=getFilePath(m),this.#Ih=getFileName(m),this.#Jf=getFileExtension(m),this.#Pt=g,this.#Et=_,this.parsingResult={groups:[],materials:[],uris:{buffers:[]},textures:{},textureRawList:[],cameras:[],animations:[]},this.resultMesh=new Mesh(this.#b),this.resultMesh.gltfLoaderInfo=this,this.resultMesh.animationInfo.animationsList=this.parsingResult.animations,this.#td()}get redGPUContext(){return this.#b}get filePath(){return this.#Zf}get gltfData(){return this.#Qf}set gltfData(i){this.#Qf=i}get fileName(){return this.#Ih}get url(){return this.#Bh}stopAnimation(){const{activeAnimations:i}=this;let m=i.indexOf(this.#ed);m>-1&&i.splice(m,1)}playAnimation(i){const{activeAnimations:m}=this;m.push(this.#ed=new PlayAnimationInfo(performance.now(),i))}async#td(){try{"glb"===this.#Jf?parseFileGLB(this,()=>this.#Pt(this)):"gltf"===this.#Jf?(async(i,m)=>{const g=getAbsoluteURL(window.location.href,i.filePath+i.fileName);if(Ws.has(g))return i.gltfData=Ws.get(g),void requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,m)});if(Xs.has(g))return await Xs.get(g),i.gltfData=Ws.get(g),void requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,m)});const _=new Promise(async(m,_)=>{try{const _=await fetch(i.url);if(!_.ok)throw new Error("GLTF 네트워크 오류:"+_.status);const b=await _.json();Ws.set(g,b),m(b)}catch(i){_(i)}finally{Xs.delete(g)}});Xs.set(g,_);const b=await _;i.gltfData=b,requestAnimationFrame(()=>{parseGLTF(i,i.gltfData,m)})})(this,()=>this.#Pt(this)):consoleAndThrowError("Unknown file extension:"+this.#Jf)}catch(i){this.#Et?.(i)}}}Object.freeze(GLTFLoader);class PlayAnimationInfo{startTime;targetAniTrackList;constructor(i,m){this.startTime=i,this.targetAniTrackList=m}}export{Oi as Camera,ColorRGB,ColorRGBA,Ha as Display,FinalRender,GLTFLoader,Fr as GPU_ADDRESS_MODE,Ar as GPU_BLEND_FACTOR,kr as GPU_BLEND_OPERATION,di as GPU_COMPARE_FUNCTION,xi as GPU_CULL_MODE,Vr as GPU_FILTER_MODE,_i as GPU_FRONT_FACE,vi as GPU_INDEX_FORMAT,ti as GPU_LOAD_OP,$r as GPU_MIPMAP_FILTER_MODE,zn as GPU_PRIMITIVE_TOPOLOGY,ni as GPU_STORE_OP,Geometry,za as Light,zi as Material,OBJLoader,OBJMTLLoader,Ns as Picking,Os as PostEffect,qa as Primitive,RedGPUContext,RedGPUContextDetector,RedGPUContextSizeManager,RedGPUContextViewContainer,ns as RenderState,Renderer,ts as Resource,vs as RuntimeChecker,Cr as SystemCode,Hn as Util,vn as glMatrix,init};