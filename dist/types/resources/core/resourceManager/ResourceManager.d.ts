import RedGPUContext from "../../../context/RedGPUContext";
import Sampler from "../../sampler/Sampler";
import BitmapTexture from "../../texture/BitmapTexture";
import DownSampleCubeMapGenerator from "../../texture/core/downSampleCubeMapGenerator/DownSampleCubeMapGenerator";
import MipmapGenerator from "../../texture/core/mipmapGenerator/MipmapGenerator";
import CubeTexture from "../../texture/CubeTexture";
import IBLCubeTexture from "../../texture/ibl/IBLCubeTexture";
import PackedTexture from "../../texture/packedTexture/PackedTexture";
import ManagementResourceBase from "../ManagementResourceBase";
import ResourceStateIndexBuffer from "./resourceState/ResourceStateIndexBuffer";
import ResourceStateStorageBuffer from "./resourceState/ResourceStateStorageBuffer";
import ResourceStateUniformBuffer from "./resourceState/ResourceStateUniformBuffer";
import ResourceStateVertexBuffer from "./resourceState/ResourceStateVertexBuffer";
import ResourceStatusInfo from "./resourceState/ResourceStatusInfo";
import ResourceStateBitmapTexture from "./resourceState/texture/ResourceStateBitmapTexture";
import ResourceStateCubeTexture from "./resourceState/texture/ResourceStateCubeTexture";
import ResourceStateHDRTexture from "./resourceState/texture/ResourceStateHDRTexture";
type ResourceState = ResourceStateVertexBuffer | ResourceStateIndexBuffer | ResourceStateUniformBuffer | ResourceStateStorageBuffer | ResourceStateCubeTexture | ResourceStateBitmapTexture | ResourceStateHDRTexture;
declare class ResourceManager {
    #private;
    static PRESET_GPUBindGroupLayout_System: string;
    static PRESET_VERTEX_GPUBindGroupLayout_Instancing: string;
    static PRESET_VERTEX_GPUBindGroupLayout: string;
    static PRESET_VERTEX_GPUBindGroupLayout_SKIN: string;
    constructor(redGPUContext: RedGPUContext);
    get redGPUContext(): RedGPUContext;
    get gpuDevice(): GPUDevice;
    get basicSampler(): Sampler;
    get mipmapGenerator(): MipmapGenerator;
    get downSampleCubeMapGenerator(): DownSampleCubeMapGenerator;
    get cachedBufferState(): any;
    get emptyBitmapTextureView(): GPUTextureView;
    get emptyCubeTextureView(): GPUTextureView;
    get managedBitmapTextureState(): ResourceStatusInfo;
    get managedCubeTextureState(): ResourceStatusInfo;
    get managedHDRTextureState(): ResourceStatusInfo;
    get managedUniformBufferState(): ResourceStatusInfo;
    get managedVertexBufferState(): ResourceStatusInfo;
    get managedIndexBufferState(): ResourceStatusInfo;
    get managedStorageBufferState(): ResourceStatusInfo;
    get resources(): ImmutableKeyMap;
    registerManagementResource(target: ManagementResourceBase, resourceState: ResourceState): void;
    unregisterManagementResource(target: ManagementResourceBase): void;
    createManagedTexture(desc: GPUTextureDescriptor): GPUTexture;
    getGPUResourceBitmapTextureView(texture: BitmapTexture | PackedTexture | GPUTexture, viewDescriptor?: GPUTextureViewDescriptor): GPUTextureView | null;
    getGPUResourceCubeTextureView(cubeTexture: CubeTexture | GPUTexture | IBLCubeTexture, viewDescriptor?: GPUTextureViewDescriptor): GPUTextureView | null;
    createGPUShaderModule(name: string, gpuShaderModuleDescriptor: GPUShaderModuleDescriptor): any;
    getGPUShaderModule(name: string): GPUShaderModule;
    deleteGPUShaderModule(name: string): void;
    createBindGroupLayout(name: string, bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor): GPUBindGroupLayout;
    getGPUBindGroupLayout(name: string): GPUBindGroupLayout;
    deleteGPUBindGroupLayout(name: string): void;
    createGPUPipelineLayout(name: string, gpuPipelineLayoutDescriptor: GPUPipelineLayoutDescriptor): any;
    createGPUBuffer(name: string, gpuBufferDescriptor: GPUBufferDescriptor): any;
}
export default ResourceManager;
declare class ImmutableKeyMap extends Map {
    constructor(initValues?: [any, any][]);
    set(key: any, value: any): this;
}
